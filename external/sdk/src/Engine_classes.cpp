/*
#############################################################################################
# Dishonered (DSDK) SDK 1.0.0.0
# Generated with the CodeRedGenerator v1.1.3
# ========================================================================================= #
# File: Engine_classes.cpp
# ========================================================================================= #
# Credits: ItsBranK, TheFeckless
# Links: www.github.com/CodeRedModding/CodeRed-Generator
#############################################################################################
*/
#include "../include/sdk.hpp"

/*
# ========================================================================================= #
# Functions
# ========================================================================================= #
*/

// Function Engine.DownloadableContentEnumerator.CleanLaunchedDLC
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[27365])
// Parameter Info:
// uint8_t                        LocalUserNum                   (CPF_Parm)

void UDownloadableContentEnumerator::CleanLaunchedDLC(uint8_t LocalUserNum)
{
	static UFunction* uFnCleanLaunchedDLC = nullptr;

	if (!uFnCleanLaunchedDLC)
	{
		uFnCleanLaunchedDLC = UFunction::FindFunction("Function Engine.DownloadableContentEnumerator.CleanLaunchedDLC");
	}

	UDownloadableContentEnumerator_execCleanLaunchedDLC_Params CleanLaunchedDLC_Params;
	memset(&CleanLaunchedDLC_Params, 0, sizeof(CleanLaunchedDLC_Params));
	memcpy_s(&CleanLaunchedDLC_Params.LocalUserNum, sizeof(CleanLaunchedDLC_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));

	uFnCleanLaunchedDLC->iNative = 0;
	uFnCleanLaunchedDLC->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnCleanLaunchedDLC, &CleanLaunchedDLC_Params, nullptr);
	uFnCleanLaunchedDLC->FunctionFlags |= 0x400;
	uFnCleanLaunchedDLC->iNative = 27365;
};

// Function Engine.DownloadableContentEnumerator.TriggerFindDLCDelegates
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[26854])
// Parameter Info:

void UDownloadableContentEnumerator::TriggerFindDLCDelegates()
{
	static UFunction* uFnTriggerFindDLCDelegates = nullptr;

	if (!uFnTriggerFindDLCDelegates)
	{
		uFnTriggerFindDLCDelegates = UFunction::FindFunction("Function Engine.DownloadableContentEnumerator.TriggerFindDLCDelegates");
	}

	UDownloadableContentEnumerator_execTriggerFindDLCDelegates_Params TriggerFindDLCDelegates_Params;
	memset(&TriggerFindDLCDelegates_Params, 0, sizeof(TriggerFindDLCDelegates_Params));

	uFnTriggerFindDLCDelegates->iNative = 0;
	uFnTriggerFindDLCDelegates->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnTriggerFindDLCDelegates, &TriggerFindDLCDelegates_Params, nullptr);
	uFnTriggerFindDLCDelegates->FunctionFlags |= 0x400;
	uFnTriggerFindDLCDelegates->iNative = 26854;
};

// Function Engine.DownloadableContentEnumerator.UninstallDLC
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[27416])
// Parameter Info:
// class FString                  DLCName                        (CPF_Parm | CPF_NeedCtorLink)
// uint32_t                       bForceUninstallIfActive        (CPF_Const | CPF_Parm)

void UDownloadableContentEnumerator::UninstallDLC(const class FString& DLCName, bool bForceUninstallIfActive)
{
	static UFunction* uFnUninstallDLC = nullptr;

	if (!uFnUninstallDLC)
	{
		uFnUninstallDLC = UFunction::FindFunction("Function Engine.DownloadableContentEnumerator.UninstallDLC");
	}

	UDownloadableContentEnumerator_execUninstallDLC_Params UninstallDLC_Params;
	memset(&UninstallDLC_Params, 0, sizeof(UninstallDLC_Params));
	memcpy_s(&UninstallDLC_Params.DLCName, sizeof(UninstallDLC_Params.DLCName), &DLCName, sizeof(DLCName));
	UninstallDLC_Params.bForceUninstallIfActive = bForceUninstallIfActive;

	uFnUninstallDLC->iNative = 0;
	uFnUninstallDLC->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnUninstallDLC, &UninstallDLC_Params, nullptr);
	uFnUninstallDLC->FunctionFlags |= 0x400;
	uFnUninstallDLC->iNative = 27416;
};

// Function Engine.DownloadableContentEnumerator.InstallDLC
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[21248])
// Parameter Info:
// class FString                  DLCName                        (CPF_Parm | CPF_NeedCtorLink)

void UDownloadableContentEnumerator::InstallDLC(const class FString& DLCName)
{
	static UFunction* uFnInstallDLC = nullptr;

	if (!uFnInstallDLC)
	{
		uFnInstallDLC = UFunction::FindFunction("Function Engine.DownloadableContentEnumerator.InstallDLC");
	}

	UDownloadableContentEnumerator_execInstallDLC_Params InstallDLC_Params;
	memset(&InstallDLC_Params, 0, sizeof(InstallDLC_Params));
	memcpy_s(&InstallDLC_Params.DLCName, sizeof(InstallDLC_Params.DLCName), &DLCName, sizeof(DLCName));

	uFnInstallDLC->iNative = 0;
	uFnInstallDLC->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnInstallDLC, &InstallDLC_Params, nullptr);
	uFnInstallDLC->FunctionFlags |= 0x400;
	uFnInstallDLC->iNative = 21248;
};

// Function Engine.DownloadableContentEnumerator.InstallAllDLC
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UDownloadableContentEnumerator::InstallAllDLC()
{
	static UFunction* uFnInstallAllDLC = nullptr;

	if (!uFnInstallAllDLC)
	{
		uFnInstallAllDLC = UFunction::FindFunction("Function Engine.DownloadableContentEnumerator.InstallAllDLC");
	}

	UDownloadableContentEnumerator_execInstallAllDLC_Params InstallAllDLC_Params;
	memset(&InstallAllDLC_Params, 0, sizeof(InstallAllDLC_Params));

	this->ProcessEvent(uFnInstallAllDLC, &InstallAllDLC_Params, nullptr);
};

// Function Engine.DownloadableContentEnumerator.DeleteDLC
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[18884])
// Parameter Info:
// class FString                  DLCName                        (CPF_Parm | CPF_NeedCtorLink)

void UDownloadableContentEnumerator::DeleteDLC(const class FString& DLCName)
{
	static UFunction* uFnDeleteDLC = nullptr;

	if (!uFnDeleteDLC)
	{
		uFnDeleteDLC = UFunction::FindFunction("Function Engine.DownloadableContentEnumerator.DeleteDLC");
	}

	UDownloadableContentEnumerator_execDeleteDLC_Params DeleteDLC_Params;
	memset(&DeleteDLC_Params, 0, sizeof(DeleteDLC_Params));
	memcpy_s(&DeleteDLC_Params.DLCName, sizeof(DeleteDLC_Params.DLCName), &DLCName, sizeof(DLCName));

	uFnDeleteDLC->iNative = 0;
	uFnDeleteDLC->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnDeleteDLC, &DeleteDLC_Params, nullptr);
	uFnDeleteDLC->FunctionFlags |= 0x400;
	uFnDeleteDLC->iNative = 18884;
};

// Function Engine.DownloadableContentEnumerator.ClearFindDLCDelegate
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FScriptDelegate         InDelegate                     (CPF_Parm | CPF_NeedCtorLink)

void UDownloadableContentEnumerator::ClearFindDLCDelegate(const struct FScriptDelegate& InDelegate)
{
	static UFunction* uFnClearFindDLCDelegate = nullptr;

	if (!uFnClearFindDLCDelegate)
	{
		uFnClearFindDLCDelegate = UFunction::FindFunction("Function Engine.DownloadableContentEnumerator.ClearFindDLCDelegate");
	}

	UDownloadableContentEnumerator_execClearFindDLCDelegate_Params ClearFindDLCDelegate_Params;
	memset(&ClearFindDLCDelegate_Params, 0, sizeof(ClearFindDLCDelegate_Params));
	memcpy_s(&ClearFindDLCDelegate_Params.InDelegate, sizeof(ClearFindDLCDelegate_Params.InDelegate), &InDelegate, sizeof(InDelegate));

	this->ProcessEvent(uFnClearFindDLCDelegate, &ClearFindDLCDelegate_Params, nullptr);
};

// Function Engine.DownloadableContentEnumerator.AddFindDLCDelegate
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FScriptDelegate         InDelegate                     (CPF_Parm | CPF_NeedCtorLink)

void UDownloadableContentEnumerator::AddFindDLCDelegate(const struct FScriptDelegate& InDelegate)
{
	static UFunction* uFnAddFindDLCDelegate = nullptr;

	if (!uFnAddFindDLCDelegate)
	{
		uFnAddFindDLCDelegate = UFunction::FindFunction("Function Engine.DownloadableContentEnumerator.AddFindDLCDelegate");
	}

	UDownloadableContentEnumerator_execAddFindDLCDelegate_Params AddFindDLCDelegate_Params;
	memset(&AddFindDLCDelegate_Params, 0, sizeof(AddFindDLCDelegate_Params));
	memcpy_s(&AddFindDLCDelegate_Params.InDelegate, sizeof(AddFindDLCDelegate_Params.InDelegate), &InDelegate, sizeof(InDelegate));

	this->ProcessEvent(uFnAddFindDLCDelegate, &AddFindDLCDelegate_Params, nullptr);
};

// Function Engine.DownloadableContentEnumerator.OnFindDLCComplete
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:

void UDownloadableContentEnumerator::OnFindDLCComplete()
{
	static UFunction* uFnOnFindDLCComplete = nullptr;

	if (!uFnOnFindDLCComplete)
	{
		uFnOnFindDLCComplete = UFunction::FindFunction("Function Engine.DownloadableContentEnumerator.OnFindDLCComplete");
	}

	UDownloadableContentEnumerator_execOnFindDLCComplete_Params OnFindDLCComplete_Params;
	memset(&OnFindDLCComplete_Params, 0, sizeof(OnFindDLCComplete_Params));

	this->ProcessEvent(uFnOnFindDLCComplete, &OnFindDLCComplete_Params, nullptr);
};

// Function Engine.DownloadableContentEnumerator.FindDLC
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20098])
// Parameter Info:

void UDownloadableContentEnumerator::FindDLC()
{
	static UFunction* uFnFindDLC = nullptr;

	if (!uFnFindDLC)
	{
		uFnFindDLC = UFunction::FindFunction("Function Engine.DownloadableContentEnumerator.FindDLC");
	}

	UDownloadableContentEnumerator_execFindDLC_Params FindDLC_Params;
	memset(&FindDLC_Params, 0, sizeof(FindDLC_Params));

	uFnFindDLC->iNative = 0;
	uFnFindDLC->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnFindDLC, &FindDLC_Params, nullptr);
	uFnFindDLC->FunctionFlags |= 0x400;
	uFnFindDLC->iNative = 20098;
};

// Function Engine.DownloadableContentManager.OnRefreshComplete
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:

void UDownloadableContentManager::OnRefreshComplete()
{
	static UFunction* uFnOnRefreshComplete = nullptr;

	if (!uFnOnRefreshComplete)
	{
		uFnOnRefreshComplete = UFunction::FindFunction("Function Engine.DownloadableContentManager.OnRefreshComplete");
	}

	UDownloadableContentManager_execOnRefreshComplete_Params OnRefreshComplete_Params;
	memset(&OnRefreshComplete_Params, 0, sizeof(OnRefreshComplete_Params));

	this->ProcessEvent(uFnOnRefreshComplete, &OnRefreshComplete_Params, nullptr);
};

// Function Engine.DownloadableContentManager.AddPackagesToFullyLoad
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[15339])
// Parameter Info:
// class FString                  Filename                       (CPF_Parm | CPF_NeedCtorLink)

void UDownloadableContentManager::AddPackagesToFullyLoad(const class FString& Filename)
{
	static UFunction* uFnAddPackagesToFullyLoad = nullptr;

	if (!uFnAddPackagesToFullyLoad)
	{
		uFnAddPackagesToFullyLoad = UFunction::FindFunction("Function Engine.DownloadableContentManager.AddPackagesToFullyLoad");
	}

	UDownloadableContentManager_execAddPackagesToFullyLoad_Params AddPackagesToFullyLoad_Params;
	memset(&AddPackagesToFullyLoad_Params, 0, sizeof(AddPackagesToFullyLoad_Params));
	memcpy_s(&AddPackagesToFullyLoad_Params.Filename, sizeof(AddPackagesToFullyLoad_Params.Filename), &Filename, sizeof(Filename));

	uFnAddPackagesToFullyLoad->iNative = 0;
	uFnAddPackagesToFullyLoad->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnAddPackagesToFullyLoad, &AddPackagesToFullyLoad_Params, nullptr);
	uFnAddPackagesToFullyLoad->FunctionFlags |= 0x400;
	uFnAddPackagesToFullyLoad->iNative = 15339;
};

// Function Engine.DownloadableContentManager.RemoveUnavailableDLC
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[27413])
// Parameter Info:

void UDownloadableContentManager::RemoveUnavailableDLC()
{
	static UFunction* uFnRemoveUnavailableDLC = nullptr;

	if (!uFnRemoveUnavailableDLC)
	{
		uFnRemoveUnavailableDLC = UFunction::FindFunction("Function Engine.DownloadableContentManager.RemoveUnavailableDLC");
	}

	UDownloadableContentManager_execRemoveUnavailableDLC_Params RemoveUnavailableDLC_Params;
	memset(&RemoveUnavailableDLC_Params, 0, sizeof(RemoveUnavailableDLC_Params));

	uFnRemoveUnavailableDLC->iNative = 0;
	uFnRemoveUnavailableDLC->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnRemoveUnavailableDLC, &RemoveUnavailableDLC_Params, nullptr);
	uFnRemoveUnavailableDLC->FunctionFlags |= 0x400;
	uFnRemoveUnavailableDLC->iNative = 27413;
};

// Function Engine.DownloadableContentManager.BackupDLCList
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[27363])
// Parameter Info:

void UDownloadableContentManager::BackupDLCList()
{
	static UFunction* uFnBackupDLCList = nullptr;

	if (!uFnBackupDLCList)
	{
		uFnBackupDLCList = UFunction::FindFunction("Function Engine.DownloadableContentManager.BackupDLCList");
	}

	UDownloadableContentManager_execBackupDLCList_Params BackupDLCList_Params;
	memset(&BackupDLCList_Params, 0, sizeof(BackupDLCList_Params));

	uFnBackupDLCList->iNative = 0;
	uFnBackupDLCList->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnBackupDLCList, &BackupDLCList_Params, nullptr);
	uFnBackupDLCList->FunctionFlags |= 0x400;
	uFnBackupDLCList->iNative = 27363;
};

// Function Engine.DownloadableContentManager.RefreshDLCEnumComplete
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UDownloadableContentManager::RefreshDLCEnumComplete()
{
	static UFunction* uFnRefreshDLCEnumComplete = nullptr;

	if (!uFnRefreshDLCEnumComplete)
	{
		uFnRefreshDLCEnumComplete = UFunction::FindFunction("Function Engine.DownloadableContentManager.RefreshDLCEnumComplete");
	}

	UDownloadableContentManager_execRefreshDLCEnumComplete_Params RefreshDLCEnumComplete_Params;
	memset(&RefreshDLCEnumComplete_Params, 0, sizeof(RefreshDLCEnumComplete_Params));

	this->ProcessEvent(uFnRefreshDLCEnumComplete, &RefreshDLCEnumComplete_Params, nullptr);
};

// Function Engine.DownloadableContentManager.RefreshDLC
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UDownloadableContentManager::RefreshDLC()
{
	static UFunction* uFnRefreshDLC = nullptr;

	if (!uFnRefreshDLC)
	{
		uFnRefreshDLC = UFunction::FindFunction("Function Engine.DownloadableContentManager.RefreshDLC");
	}

	UDownloadableContentManager_execRefreshDLC_Params RefreshDLC_Params;
	memset(&RefreshDLC_Params, 0, sizeof(RefreshDLC_Params));

	this->ProcessEvent(uFnRefreshDLC, &RefreshDLC_Params, nullptr);
};

// Function Engine.DownloadableContentManager.RefreshDLCFromNative
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UDownloadableContentManager::eventRefreshDLCFromNative()
{
	static UFunction* uFnRefreshDLCFromNative = nullptr;

	if (!uFnRefreshDLCFromNative)
	{
		uFnRefreshDLCFromNative = UFunction::FindFunction("Function Engine.DownloadableContentManager.RefreshDLCFromNative");
	}

	UDownloadableContentManager_eventRefreshDLCFromNative_Params RefreshDLCFromNative_Params;
	memset(&RefreshDLCFromNative_Params, 0, sizeof(RefreshDLCFromNative_Params));

	this->ProcessEvent(uFnRefreshDLCFromNative, &RefreshDLCFromNative_Params, nullptr);
};

// Function Engine.DownloadableContentManager.OnContentChange
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UDownloadableContentManager::OnContentChange()
{
	static UFunction* uFnOnContentChange = nullptr;

	if (!uFnOnContentChange)
	{
		uFnOnContentChange = UFunction::FindFunction("Function Engine.DownloadableContentManager.OnContentChange");
	}

	UDownloadableContentManager_execOnContentChange_Params OnContentChange_Params;
	memset(&OnContentChange_Params, 0, sizeof(OnContentChange_Params));

	this->ProcessEvent(uFnOnContentChange, &OnContentChange_Params, nullptr);
};

// Function Engine.DownloadableContentManager.OnStorageDeviceChange
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UDownloadableContentManager::OnStorageDeviceChange()
{
	static UFunction* uFnOnStorageDeviceChange = nullptr;

	if (!uFnOnStorageDeviceChange)
	{
		uFnOnStorageDeviceChange = UFunction::FindFunction("Function Engine.DownloadableContentManager.OnStorageDeviceChange");
	}

	UDownloadableContentManager_execOnStorageDeviceChange_Params OnStorageDeviceChange_Params;
	memset(&OnStorageDeviceChange_Params, 0, sizeof(OnStorageDeviceChange_Params));

	this->ProcessEvent(uFnOnStorageDeviceChange, &OnStorageDeviceChange_Params, nullptr);
};

// Function Engine.DownloadableContentManager.OnLoginChange
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint8_t                        LocalUserNum                   (CPF_Parm)

void UDownloadableContentManager::OnLoginChange(uint8_t LocalUserNum)
{
	static UFunction* uFnOnLoginChange = nullptr;

	if (!uFnOnLoginChange)
	{
		uFnOnLoginChange = UFunction::FindFunction("Function Engine.DownloadableContentManager.OnLoginChange");
	}

	UDownloadableContentManager_execOnLoginChange_Params OnLoginChange_Params;
	memset(&OnLoginChange_Params, 0, sizeof(OnLoginChange_Params));
	memcpy_s(&OnLoginChange_Params.LocalUserNum, sizeof(OnLoginChange_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));

	this->ProcessEvent(uFnOnLoginChange, &OnLoginChange_Params, nullptr);
};

// Function Engine.DownloadableContentManager.Init
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UDownloadableContentManager::eventInit()
{
	static UFunction* uFnInit = nullptr;

	if (!uFnInit)
	{
		uFnInit = UFunction::FindFunction("Function Engine.DownloadableContentManager.Init");
	}

	UDownloadableContentManager_eventInit_Params Init_Params;
	memset(&Init_Params, 0, sizeof(Init_Params));

	this->ProcessEvent(uFnInit, &Init_Params, nullptr);
};

// Function Engine.DownloadableContentManager.InstallNonPackageFiles
// [0x00480400] (FUNC_Native | FUNC_Protected | FUNC_HasOutParms | FUNC_AllFlags) (iNative[21251])
// Parameter Info:
// struct FOnlineContent          DLCBundle                      (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void UDownloadableContentManager::InstallNonPackageFiles(struct FOnlineContent& DLCBundle)
{
	static UFunction* uFnInstallNonPackageFiles = nullptr;

	if (!uFnInstallNonPackageFiles)
	{
		uFnInstallNonPackageFiles = UFunction::FindFunction("Function Engine.DownloadableContentManager.InstallNonPackageFiles");
	}

	UDownloadableContentManager_execInstallNonPackageFiles_Params InstallNonPackageFiles_Params;
	memset(&InstallNonPackageFiles_Params, 0, sizeof(InstallNonPackageFiles_Params));
	memcpy_s(&InstallNonPackageFiles_Params.DLCBundle, sizeof(InstallNonPackageFiles_Params.DLCBundle), &DLCBundle, sizeof(DLCBundle));

	uFnInstallNonPackageFiles->iNative = 0;
	uFnInstallNonPackageFiles->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnInstallNonPackageFiles, &InstallNonPackageFiles_Params, nullptr);
	uFnInstallNonPackageFiles->FunctionFlags |= 0x400;
	uFnInstallNonPackageFiles->iNative = 21251;

	memcpy_s(&DLCBundle, sizeof(DLCBundle), &InstallNonPackageFiles_Params.DLCBundle, sizeof(InstallNonPackageFiles_Params.DLCBundle));
};

// Function Engine.DownloadableContentManager.InstallPackages
// [0x00480400] (FUNC_Native | FUNC_Protected | FUNC_HasOutParms | FUNC_AllFlags) (iNative[21252])
// Parameter Info:
// struct FOnlineContent          DLCBundle                      (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void UDownloadableContentManager::InstallPackages(struct FOnlineContent& DLCBundle)
{
	static UFunction* uFnInstallPackages = nullptr;

	if (!uFnInstallPackages)
	{
		uFnInstallPackages = UFunction::FindFunction("Function Engine.DownloadableContentManager.InstallPackages");
	}

	UDownloadableContentManager_execInstallPackages_Params InstallPackages_Params;
	memset(&InstallPackages_Params, 0, sizeof(InstallPackages_Params));
	memcpy_s(&InstallPackages_Params.DLCBundle, sizeof(InstallPackages_Params.DLCBundle), &DLCBundle, sizeof(DLCBundle));

	uFnInstallPackages->iNative = 0;
	uFnInstallPackages->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnInstallPackages, &InstallPackages_Params, nullptr);
	uFnInstallPackages->FunctionFlags |= 0x400;
	uFnInstallPackages->iNative = 21252;

	memcpy_s(&DLCBundle, sizeof(DLCBundle), &InstallPackages_Params.DLCBundle, sizeof(InstallPackages_Params.DLCBundle));
};

// Function Engine.DownloadableContentManager.UpdateObjectLists
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[26990])
// Parameter Info:

void UDownloadableContentManager::UpdateObjectLists()
{
	static UFunction* uFnUpdateObjectLists = nullptr;

	if (!uFnUpdateObjectLists)
	{
		uFnUpdateObjectLists = UFunction::FindFunction("Function Engine.DownloadableContentManager.UpdateObjectLists");
	}

	UDownloadableContentManager_execUpdateObjectLists_Params UpdateObjectLists_Params;
	memset(&UpdateObjectLists_Params, 0, sizeof(UpdateObjectLists_Params));

	uFnUpdateObjectLists->iNative = 0;
	uFnUpdateObjectLists->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnUpdateObjectLists, &UpdateObjectLists_Params, nullptr);
	uFnUpdateObjectLists->FunctionFlags |= 0x400;
	uFnUpdateObjectLists->iNative = 26990;
};

// Function Engine.DownloadableContentManager.MarkPerObjectConfigPendingKill
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[22633])
// Parameter Info:
// class FString                  Section                        (CPF_Parm | CPF_NeedCtorLink)

void UDownloadableContentManager::MarkPerObjectConfigPendingKill(const class FString& Section)
{
	static UFunction* uFnMarkPerObjectConfigPendingKill = nullptr;

	if (!uFnMarkPerObjectConfigPendingKill)
	{
		uFnMarkPerObjectConfigPendingKill = UFunction::FindFunction("Function Engine.DownloadableContentManager.MarkPerObjectConfigPendingKill");
	}

	UDownloadableContentManager_execMarkPerObjectConfigPendingKill_Params MarkPerObjectConfigPendingKill_Params;
	memset(&MarkPerObjectConfigPendingKill_Params, 0, sizeof(MarkPerObjectConfigPendingKill_Params));
	memcpy_s(&MarkPerObjectConfigPendingKill_Params.Section, sizeof(MarkPerObjectConfigPendingKill_Params.Section), &Section, sizeof(Section));

	uFnMarkPerObjectConfigPendingKill->iNative = 0;
	uFnMarkPerObjectConfigPendingKill->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnMarkPerObjectConfigPendingKill, &MarkPerObjectConfigPendingKill_Params, nullptr);
	uFnMarkPerObjectConfigPendingKill->FunctionFlags |= 0x400;
	uFnMarkPerObjectConfigPendingKill->iNative = 22633;
};

// Function Engine.DownloadableContentManager.AddSectionToObjectList
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[15366])
// Parameter Info:
// class FString                  Section                        (CPF_Parm | CPF_NeedCtorLink)

void UDownloadableContentManager::AddSectionToObjectList(const class FString& Section)
{
	static UFunction* uFnAddSectionToObjectList = nullptr;

	if (!uFnAddSectionToObjectList)
	{
		uFnAddSectionToObjectList = UFunction::FindFunction("Function Engine.DownloadableContentManager.AddSectionToObjectList");
	}

	UDownloadableContentManager_execAddSectionToObjectList_Params AddSectionToObjectList_Params;
	memset(&AddSectionToObjectList_Params, 0, sizeof(AddSectionToObjectList_Params));
	memcpy_s(&AddSectionToObjectList_Params.Section, sizeof(AddSectionToObjectList_Params.Section), &Section, sizeof(Section));

	uFnAddSectionToObjectList->iNative = 0;
	uFnAddSectionToObjectList->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnAddSectionToObjectList, &AddSectionToObjectList_Params, nullptr);
	uFnAddSectionToObjectList->FunctionFlags |= 0x400;
	uFnAddSectionToObjectList->iNative = 15366;
};

// Function Engine.DownloadableContentManager.GetDLCNonPackageFilePath
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20571])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    NonPackageFileName             (CPF_Parm)
// class FString                  Path                           (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

bool UDownloadableContentManager::GetDLCNonPackageFilePath(const class FName& NonPackageFileName, class FString& Path)
{
	static UFunction* uFnGetDLCNonPackageFilePath = nullptr;

	if (!uFnGetDLCNonPackageFilePath)
	{
		uFnGetDLCNonPackageFilePath = UFunction::FindFunction("Function Engine.DownloadableContentManager.GetDLCNonPackageFilePath");
	}

	UDownloadableContentManager_execGetDLCNonPackageFilePath_Params GetDLCNonPackageFilePath_Params;
	memset(&GetDLCNonPackageFilePath_Params, 0, sizeof(GetDLCNonPackageFilePath_Params));
	memcpy_s(&GetDLCNonPackageFilePath_Params.NonPackageFileName, sizeof(GetDLCNonPackageFilePath_Params.NonPackageFileName), &NonPackageFileName, sizeof(NonPackageFileName));
	memcpy_s(&GetDLCNonPackageFilePath_Params.Path, sizeof(GetDLCNonPackageFilePath_Params.Path), &Path, sizeof(Path));

	uFnGetDLCNonPackageFilePath->iNative = 0;
	uFnGetDLCNonPackageFilePath->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetDLCNonPackageFilePath, &GetDLCNonPackageFilePath_Params, nullptr);
	uFnGetDLCNonPackageFilePath->FunctionFlags |= 0x400;
	uFnGetDLCNonPackageFilePath->iNative = 20571;

	memcpy_s(&Path, sizeof(Path), &GetDLCNonPackageFilePath_Params.Path, sizeof(GetDLCNonPackageFilePath_Params.Path));

	return GetDLCNonPackageFilePath_Params.ReturnValue;
};

// Function Engine.DownloadableContentManager.ClearDLC
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[18123])
// Parameter Info:

void UDownloadableContentManager::ClearDLC()
{
	static UFunction* uFnClearDLC = nullptr;

	if (!uFnClearDLC)
	{
		uFnClearDLC = UFunction::FindFunction("Function Engine.DownloadableContentManager.ClearDLC");
	}

	UDownloadableContentManager_execClearDLC_Params ClearDLC_Params;
	memset(&ClearDLC_Params, 0, sizeof(ClearDLC_Params));

	uFnClearDLC->iNative = 0;
	uFnClearDLC->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnClearDLC, &ClearDLC_Params, nullptr);
	uFnClearDLC->FunctionFlags |= 0x400;
	uFnClearDLC->iNative = 18123;
};

// Function Engine.DownloadableContentManager.UninstallDLCs
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[27417])
// Parameter Info:
// class TArray<struct FOnlineContent> DLCBundles                     (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void UDownloadableContentManager::UninstallDLCs(class TArray<struct FOnlineContent>& DLCBundles)
{
	static UFunction* uFnUninstallDLCs = nullptr;

	if (!uFnUninstallDLCs)
	{
		uFnUninstallDLCs = UFunction::FindFunction("Function Engine.DownloadableContentManager.UninstallDLCs");
	}

	UDownloadableContentManager_execUninstallDLCs_Params UninstallDLCs_Params;
	memset(&UninstallDLCs_Params, 0, sizeof(UninstallDLCs_Params));
	memcpy_s(&UninstallDLCs_Params.DLCBundles, sizeof(UninstallDLCs_Params.DLCBundles), &DLCBundles, sizeof(DLCBundles));

	uFnUninstallDLCs->iNative = 0;
	uFnUninstallDLCs->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnUninstallDLCs, &UninstallDLCs_Params, nullptr);
	uFnUninstallDLCs->FunctionFlags |= 0x400;
	uFnUninstallDLCs->iNative = 27417;

	memcpy_s(&DLCBundles, sizeof(DLCBundles), &UninstallDLCs_Params.DLCBundles, sizeof(UninstallDLCs_Params.DLCBundles));
};

// Function Engine.DownloadableContentManager.UninstallDLC
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[27416])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       bForceUninstallIfActive        (CPF_Const | CPF_Parm)
// struct FOnlineContent          DLCBundle                      (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

bool UDownloadableContentManager::UninstallDLC(bool bForceUninstallIfActive, struct FOnlineContent& DLCBundle)
{
	static UFunction* uFnUninstallDLC = nullptr;

	if (!uFnUninstallDLC)
	{
		uFnUninstallDLC = UFunction::FindFunction("Function Engine.DownloadableContentManager.UninstallDLC");
	}

	UDownloadableContentManager_execUninstallDLC_Params UninstallDLC_Params;
	memset(&UninstallDLC_Params, 0, sizeof(UninstallDLC_Params));
	UninstallDLC_Params.bForceUninstallIfActive = bForceUninstallIfActive;
	memcpy_s(&UninstallDLC_Params.DLCBundle, sizeof(UninstallDLC_Params.DLCBundle), &DLCBundle, sizeof(DLCBundle));

	uFnUninstallDLC->iNative = 0;
	uFnUninstallDLC->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnUninstallDLC, &UninstallDLC_Params, nullptr);
	uFnUninstallDLC->FunctionFlags |= 0x400;
	uFnUninstallDLC->iNative = 27416;

	memcpy_s(&DLCBundle, sizeof(DLCBundle), &UninstallDLC_Params.DLCBundle, sizeof(UninstallDLC_Params.DLCBundle));

	return UninstallDLC_Params.ReturnValue;
};

// Function Engine.DownloadableContentManager.InstallDLCs
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[21249])
// Parameter Info:
// class TArray<struct FOnlineContent> DLCBundles                     (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void UDownloadableContentManager::InstallDLCs(class TArray<struct FOnlineContent>& DLCBundles)
{
	static UFunction* uFnInstallDLCs = nullptr;

	if (!uFnInstallDLCs)
	{
		uFnInstallDLCs = UFunction::FindFunction("Function Engine.DownloadableContentManager.InstallDLCs");
	}

	UDownloadableContentManager_execInstallDLCs_Params InstallDLCs_Params;
	memset(&InstallDLCs_Params, 0, sizeof(InstallDLCs_Params));
	memcpy_s(&InstallDLCs_Params.DLCBundles, sizeof(InstallDLCs_Params.DLCBundles), &DLCBundles, sizeof(DLCBundles));

	uFnInstallDLCs->iNative = 0;
	uFnInstallDLCs->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnInstallDLCs, &InstallDLCs_Params, nullptr);
	uFnInstallDLCs->FunctionFlags |= 0x400;
	uFnInstallDLCs->iNative = 21249;

	memcpy_s(&DLCBundles, sizeof(DLCBundles), &InstallDLCs_Params.DLCBundles, sizeof(InstallDLCs_Params.DLCBundles));
};

// Function Engine.DownloadableContentManager.InstallDLC
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[21248])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FOnlineContent          DLCBundle                      (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

bool UDownloadableContentManager::InstallDLC(struct FOnlineContent& DLCBundle)
{
	static UFunction* uFnInstallDLC = nullptr;

	if (!uFnInstallDLC)
	{
		uFnInstallDLC = UFunction::FindFunction("Function Engine.DownloadableContentManager.InstallDLC");
	}

	UDownloadableContentManager_execInstallDLC_Params InstallDLC_Params;
	memset(&InstallDLC_Params, 0, sizeof(InstallDLC_Params));
	memcpy_s(&InstallDLC_Params.DLCBundle, sizeof(InstallDLC_Params.DLCBundle), &DLCBundle, sizeof(DLCBundle));

	uFnInstallDLC->iNative = 0;
	uFnInstallDLC->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnInstallDLC, &InstallDLC_Params, nullptr);
	uFnInstallDLC->FunctionFlags |= 0x400;
	uFnInstallDLC->iNative = 21248;

	memcpy_s(&DLCBundle, sizeof(DLCBundle), &InstallDLC_Params.DLCBundle, sizeof(InstallDLC_Params.DLCBundle));

	return InstallDLC_Params.ReturnValue;
};

// Function Engine.Engine.BasicLoadObject
// [0x00022401] (FUNC_Final | FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags) (iNative[15925])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UObject*                 Obj                            (CPF_Parm)
// class FString                  PathName                       (CPF_Parm | CPF_NeedCtorLink)
// uint32_t                       bIsSaveGame                    (CPF_Parm)
// int32_t                        Version                        (CPF_Parm)

bool UEngine::BasicLoadObject(class UObject* Obj, const class FString& PathName, bool bIsSaveGame, int32_t Version)
{
	static UFunction* uFnBasicLoadObject = nullptr;

	if (!uFnBasicLoadObject)
	{
		uFnBasicLoadObject = UFunction::FindFunction("Function Engine.Engine.BasicLoadObject");
	}

	UEngine_execBasicLoadObject_Params BasicLoadObject_Params;
	memset(&BasicLoadObject_Params, 0, sizeof(BasicLoadObject_Params));
	BasicLoadObject_Params.Obj = Obj;
	memcpy_s(&BasicLoadObject_Params.PathName, sizeof(BasicLoadObject_Params.PathName), &PathName, sizeof(PathName));
	BasicLoadObject_Params.bIsSaveGame = bIsSaveGame;
	memcpy_s(&BasicLoadObject_Params.Version, sizeof(BasicLoadObject_Params.Version), &Version, sizeof(Version));

	uFnBasicLoadObject->iNative = 0;
	uFnBasicLoadObject->FunctionFlags &= ~0x400;
	UEngine::StaticClass()->ProcessEvent(uFnBasicLoadObject, &BasicLoadObject_Params, nullptr);
	uFnBasicLoadObject->FunctionFlags |= 0x400;
	uFnBasicLoadObject->iNative = 15925;

	return BasicLoadObject_Params.ReturnValue;
};

// Function Engine.Engine.BasicSaveObject
// [0x00022401] (FUNC_Final | FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags) (iNative[15926])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UObject*                 Obj                            (CPF_Parm)
// class FString                  PathName                       (CPF_Parm | CPF_NeedCtorLink)
// uint32_t                       bIsSaveGame                    (CPF_Parm)
// int32_t                        Version                        (CPF_Parm)

bool UEngine::BasicSaveObject(class UObject* Obj, const class FString& PathName, bool bIsSaveGame, int32_t Version)
{
	static UFunction* uFnBasicSaveObject = nullptr;

	if (!uFnBasicSaveObject)
	{
		uFnBasicSaveObject = UFunction::FindFunction("Function Engine.Engine.BasicSaveObject");
	}

	UEngine_execBasicSaveObject_Params BasicSaveObject_Params;
	memset(&BasicSaveObject_Params, 0, sizeof(BasicSaveObject_Params));
	BasicSaveObject_Params.Obj = Obj;
	memcpy_s(&BasicSaveObject_Params.PathName, sizeof(BasicSaveObject_Params.PathName), &PathName, sizeof(PathName));
	BasicSaveObject_Params.bIsSaveGame = bIsSaveGame;
	memcpy_s(&BasicSaveObject_Params.Version, sizeof(BasicSaveObject_Params.Version), &Version, sizeof(Version));

	uFnBasicSaveObject->iNative = 0;
	uFnBasicSaveObject->FunctionFlags &= ~0x400;
	UEngine::StaticClass()->ProcessEvent(uFnBasicSaveObject, &BasicSaveObject_Params, nullptr);
	uFnBasicSaveObject->FunctionFlags |= 0x400;
	uFnBasicSaveObject->iNative = 15926;

	return BasicSaveObject_Params.ReturnValue;
};

// Function Engine.Engine.AddTextureStreamingSlaveLoc
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[15373])
// Parameter Info:
// struct FVector                 InLoc                          (CPF_Parm)

void UEngine::AddTextureStreamingSlaveLoc(const struct FVector& InLoc)
{
	static UFunction* uFnAddTextureStreamingSlaveLoc = nullptr;

	if (!uFnAddTextureStreamingSlaveLoc)
	{
		uFnAddTextureStreamingSlaveLoc = UFunction::FindFunction("Function Engine.Engine.AddTextureStreamingSlaveLoc");
	}

	UEngine_execAddTextureStreamingSlaveLoc_Params AddTextureStreamingSlaveLoc_Params;
	memset(&AddTextureStreamingSlaveLoc_Params, 0, sizeof(AddTextureStreamingSlaveLoc_Params));
	memcpy_s(&AddTextureStreamingSlaveLoc_Params.InLoc, sizeof(AddTextureStreamingSlaveLoc_Params.InLoc), &InLoc, sizeof(InLoc));

	uFnAddTextureStreamingSlaveLoc->iNative = 0;
	uFnAddTextureStreamingSlaveLoc->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnAddTextureStreamingSlaveLoc, &AddTextureStreamingSlaveLoc_Params, nullptr);
	uFnAddTextureStreamingSlaveLoc->FunctionFlags |= 0x400;
	uFnAddTextureStreamingSlaveLoc->iNative = 15373;
};

// Function Engine.Engine.GetWorldPostProcessChain
// [0x00022401] (FUNC_Final | FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags) (iNative[20823])
// Parameter Info:
// class UPostProcessChain*       ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class UPostProcessChain* UEngine::GetWorldPostProcessChain()
{
	static UFunction* uFnGetWorldPostProcessChain = nullptr;

	if (!uFnGetWorldPostProcessChain)
	{
		uFnGetWorldPostProcessChain = UFunction::FindFunction("Function Engine.Engine.GetWorldPostProcessChain");
	}

	UEngine_execGetWorldPostProcessChain_Params GetWorldPostProcessChain_Params;
	memset(&GetWorldPostProcessChain_Params, 0, sizeof(GetWorldPostProcessChain_Params));

	uFnGetWorldPostProcessChain->iNative = 0;
	uFnGetWorldPostProcessChain->FunctionFlags &= ~0x400;
	UEngine::StaticClass()->ProcessEvent(uFnGetWorldPostProcessChain, &GetWorldPostProcessChain_Params, nullptr);
	uFnGetWorldPostProcessChain->FunctionFlags |= 0x400;
	uFnGetWorldPostProcessChain->iNative = 20823;

	return GetWorldPostProcessChain_Params.ReturnValue;
};

// Function Engine.Engine.GetEngine
// [0x00022401] (FUNC_Final | FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags) (iNative[20573])
// Parameter Info:
// class UEngine*                 ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class UEngine* UEngine::GetEngine()
{
	static UFunction* uFnGetEngine = nullptr;

	if (!uFnGetEngine)
	{
		uFnGetEngine = UFunction::FindFunction("Function Engine.Engine.GetEngine");
	}

	UEngine_execGetEngine_Params GetEngine_Params;
	memset(&GetEngine_Params, 0, sizeof(GetEngine_Params));

	uFnGetEngine->iNative = 0;
	uFnGetEngine->FunctionFlags &= ~0x400;
	UEngine::StaticClass()->ProcessEvent(uFnGetEngine, &GetEngine_Params, nullptr);
	uFnGetEngine->FunctionFlags |= 0x400;
	uFnGetEngine->iNative = 20573;

	return GetEngine_Params.ReturnValue;
};

// Function Engine.Engine.AddOverlayWrapped
// [0x00022401] (FUNC_Final | FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags) (iNative[15338])
// Parameter Info:
// class UFont*                   Font                           (CPF_Parm)
// class FString                  Text                           (CPF_Parm | CPF_NeedCtorLink)
// float                          X                              (CPF_Parm)
// float                          Y                              (CPF_Parm)
// float                          ScaleX                         (CPF_Parm)
// float                          ScaleY                         (CPF_Parm)
// float                          WrapWidth                      (CPF_Parm)

void UEngine::AddOverlayWrapped(class UFont* Font, const class FString& Text, float X, float Y, float ScaleX, float ScaleY, float WrapWidth)
{
	static UFunction* uFnAddOverlayWrapped = nullptr;

	if (!uFnAddOverlayWrapped)
	{
		uFnAddOverlayWrapped = UFunction::FindFunction("Function Engine.Engine.AddOverlayWrapped");
	}

	UEngine_execAddOverlayWrapped_Params AddOverlayWrapped_Params;
	memset(&AddOverlayWrapped_Params, 0, sizeof(AddOverlayWrapped_Params));
	AddOverlayWrapped_Params.Font = Font;
	memcpy_s(&AddOverlayWrapped_Params.Text, sizeof(AddOverlayWrapped_Params.Text), &Text, sizeof(Text));
	memcpy_s(&AddOverlayWrapped_Params.X, sizeof(AddOverlayWrapped_Params.X), &X, sizeof(X));
	memcpy_s(&AddOverlayWrapped_Params.Y, sizeof(AddOverlayWrapped_Params.Y), &Y, sizeof(Y));
	memcpy_s(&AddOverlayWrapped_Params.ScaleX, sizeof(AddOverlayWrapped_Params.ScaleX), &ScaleX, sizeof(ScaleX));
	memcpy_s(&AddOverlayWrapped_Params.ScaleY, sizeof(AddOverlayWrapped_Params.ScaleY), &ScaleY, sizeof(ScaleY));
	memcpy_s(&AddOverlayWrapped_Params.WrapWidth, sizeof(AddOverlayWrapped_Params.WrapWidth), &WrapWidth, sizeof(WrapWidth));

	uFnAddOverlayWrapped->iNative = 0;
	uFnAddOverlayWrapped->FunctionFlags &= ~0x400;
	UEngine::StaticClass()->ProcessEvent(uFnAddOverlayWrapped, &AddOverlayWrapped_Params, nullptr);
	uFnAddOverlayWrapped->FunctionFlags |= 0x400;
	uFnAddOverlayWrapped->iNative = 15338;
};

// Function Engine.Engine.AddOverlay
// [0x00022401] (FUNC_Final | FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags) (iNative[15337])
// Parameter Info:
// class UFont*                   Font                           (CPF_Parm)
// class FString                  Text                           (CPF_Parm | CPF_NeedCtorLink)
// float                          X                              (CPF_Parm)
// float                          Y                              (CPF_Parm)
// float                          ScaleX                         (CPF_Parm)
// float                          ScaleY                         (CPF_Parm)
// uint32_t                       bIsCentered                    (CPF_Parm)

void UEngine::AddOverlay(class UFont* Font, const class FString& Text, float X, float Y, float ScaleX, float ScaleY, bool bIsCentered)
{
	static UFunction* uFnAddOverlay = nullptr;

	if (!uFnAddOverlay)
	{
		uFnAddOverlay = UFunction::FindFunction("Function Engine.Engine.AddOverlay");
	}

	UEngine_execAddOverlay_Params AddOverlay_Params;
	memset(&AddOverlay_Params, 0, sizeof(AddOverlay_Params));
	AddOverlay_Params.Font = Font;
	memcpy_s(&AddOverlay_Params.Text, sizeof(AddOverlay_Params.Text), &Text, sizeof(Text));
	memcpy_s(&AddOverlay_Params.X, sizeof(AddOverlay_Params.X), &X, sizeof(X));
	memcpy_s(&AddOverlay_Params.Y, sizeof(AddOverlay_Params.Y), &Y, sizeof(Y));
	memcpy_s(&AddOverlay_Params.ScaleX, sizeof(AddOverlay_Params.ScaleX), &ScaleX, sizeof(ScaleX));
	memcpy_s(&AddOverlay_Params.ScaleY, sizeof(AddOverlay_Params.ScaleY), &ScaleY, sizeof(ScaleY));
	AddOverlay_Params.bIsCentered = bIsCentered;

	uFnAddOverlay->iNative = 0;
	uFnAddOverlay->FunctionFlags &= ~0x400;
	UEngine::StaticClass()->ProcessEvent(uFnAddOverlay, &AddOverlay_Params, nullptr);
	uFnAddOverlay->FunctionFlags |= 0x400;
	uFnAddOverlay->iNative = 15337;
};

// Function Engine.Engine.RemoveAllOverlays
// [0x00022401] (FUNC_Final | FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags) (iNative[25061])
// Parameter Info:

void UEngine::RemoveAllOverlays()
{
	static UFunction* uFnRemoveAllOverlays = nullptr;

	if (!uFnRemoveAllOverlays)
	{
		uFnRemoveAllOverlays = UFunction::FindFunction("Function Engine.Engine.RemoveAllOverlays");
	}

	UEngine_execRemoveAllOverlays_Params RemoveAllOverlays_Params;
	memset(&RemoveAllOverlays_Params, 0, sizeof(RemoveAllOverlays_Params));

	uFnRemoveAllOverlays->iNative = 0;
	uFnRemoveAllOverlays->FunctionFlags &= ~0x400;
	UEngine::StaticClass()->ProcessEvent(uFnRemoveAllOverlays, &RemoveAllOverlays_Params, nullptr);
	uFnRemoveAllOverlays->FunctionFlags |= 0x400;
	uFnRemoveAllOverlays->iNative = 25061;
};

// Function Engine.Engine.StopMovie
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[26325])
// Parameter Info:
// uint32_t                       bDelayStopUntilGameHasRendered (CPF_Parm)

void UEngine::StopMovie(bool bDelayStopUntilGameHasRendered)
{
	static UFunction* uFnStopMovie = nullptr;

	if (!uFnStopMovie)
	{
		uFnStopMovie = UFunction::FindFunction("Function Engine.Engine.StopMovie");
	}

	UEngine_execStopMovie_Params StopMovie_Params;
	memset(&StopMovie_Params, 0, sizeof(StopMovie_Params));
	StopMovie_Params.bDelayStopUntilGameHasRendered = bDelayStopUntilGameHasRendered;

	uFnStopMovie->iNative = 0;
	uFnStopMovie->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnStopMovie, &StopMovie_Params, nullptr);
	uFnStopMovie->FunctionFlags |= 0x400;
	uFnStopMovie->iNative = 26325;
};

// Function Engine.Engine.OpenContentUnavailableMenu
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[27392])
// Parameter Info:

void UEngine::OpenContentUnavailableMenu()
{
	static UFunction* uFnOpenContentUnavailableMenu = nullptr;

	if (!uFnOpenContentUnavailableMenu)
	{
		uFnOpenContentUnavailableMenu = UFunction::FindFunction("Function Engine.Engine.OpenContentUnavailableMenu");
	}

	UEngine_execOpenContentUnavailableMenu_Params OpenContentUnavailableMenu_Params;
	memset(&OpenContentUnavailableMenu_Params, 0, sizeof(OpenContentUnavailableMenu_Params));

	uFnOpenContentUnavailableMenu->iNative = 0;
	uFnOpenContentUnavailableMenu->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnOpenContentUnavailableMenu, &OpenContentUnavailableMenu_Params, nullptr);
	uFnOpenContentUnavailableMenu->FunctionFlags |= 0x400;
	uFnOpenContentUnavailableMenu->iNative = 27392;
};

// Function Engine.Engine.OpenControllerConnectionMenu
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[23688])
// Parameter Info:

void UEngine::OpenControllerConnectionMenu()
{
	static UFunction* uFnOpenControllerConnectionMenu = nullptr;

	if (!uFnOpenControllerConnectionMenu)
	{
		uFnOpenControllerConnectionMenu = UFunction::FindFunction("Function Engine.Engine.OpenControllerConnectionMenu");
	}

	UEngine_execOpenControllerConnectionMenu_Params OpenControllerConnectionMenu_Params;
	memset(&OpenControllerConnectionMenu_Params, 0, sizeof(OpenControllerConnectionMenu_Params));

	uFnOpenControllerConnectionMenu->iNative = 0;
	uFnOpenControllerConnectionMenu->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnOpenControllerConnectionMenu, &OpenControllerConnectionMenu_Params, nullptr);
	uFnOpenControllerConnectionMenu->FunctionFlags |= 0x400;
	uFnOpenControllerConnectionMenu->iNative = 23688;
};

// Function Engine.Engine.OnControllerDisconnected
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[23582])
// Parameter Info:
// int32_t                        ControllerId                   (CPF_Parm)

void UEngine::OnControllerDisconnected(int32_t ControllerId)
{
	static UFunction* uFnOnControllerDisconnected = nullptr;

	if (!uFnOnControllerDisconnected)
	{
		uFnOnControllerDisconnected = UFunction::FindFunction("Function Engine.Engine.OnControllerDisconnected");
	}

	UEngine_execOnControllerDisconnected_Params OnControllerDisconnected_Params;
	memset(&OnControllerDisconnected_Params, 0, sizeof(OnControllerDisconnected_Params));
	memcpy_s(&OnControllerDisconnected_Params.ControllerId, sizeof(OnControllerDisconnected_Params.ControllerId), &ControllerId, sizeof(ControllerId));

	uFnOnControllerDisconnected->iNative = 0;
	uFnOnControllerDisconnected->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnOnControllerDisconnected, &OnControllerDisconnected_Params, nullptr);
	uFnOnControllerDisconnected->FunctionFlags |= 0x400;
	uFnOnControllerDisconnected->iNative = 23582;
};

// Function Engine.Engine.OpenPauseMenu
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[23691])
// Parameter Info:

void UEngine::OpenPauseMenu()
{
	static UFunction* uFnOpenPauseMenu = nullptr;

	if (!uFnOpenPauseMenu)
	{
		uFnOpenPauseMenu = UFunction::FindFunction("Function Engine.Engine.OpenPauseMenu");
	}

	UEngine_execOpenPauseMenu_Params OpenPauseMenu_Params;
	memset(&OpenPauseMenu_Params, 0, sizeof(OpenPauseMenu_Params));

	uFnOpenPauseMenu->iNative = 0;
	uFnOpenPauseMenu->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnOpenPauseMenu, &OpenPauseMenu_Params, nullptr);
	uFnOpenPauseMenu->FunctionFlags |= 0x400;
	uFnOpenPauseMenu->iNative = 23691;
};

// Function Engine.Engine.WaitMovie
// [0x00022401] (FUNC_Final | FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags) (iNative[27220])
// Parameter Info:

void UEngine::WaitMovie()
{
	static UFunction* uFnWaitMovie = nullptr;

	if (!uFnWaitMovie)
	{
		uFnWaitMovie = UFunction::FindFunction("Function Engine.Engine.WaitMovie");
	}

	UEngine_execWaitMovie_Params WaitMovie_Params;
	memset(&WaitMovie_Params, 0, sizeof(WaitMovie_Params));

	uFnWaitMovie->iNative = 0;
	uFnWaitMovie->FunctionFlags &= ~0x400;
	UEngine::StaticClass()->ProcessEvent(uFnWaitMovie, &WaitMovie_Params, nullptr);
	uFnWaitMovie->FunctionFlags |= 0x400;
	uFnWaitMovie->iNative = 27220;
};

// Function Engine.Engine.PlayLoadMapMovie
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[24342])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FString                  MapName                        (CPF_Parm | CPF_NeedCtorLink)
// class FString                  MovieName                      (CPF_Parm | CPF_NeedCtorLink)

bool UEngine::PlayLoadMapMovie(const class FString& MapName, const class FString& MovieName)
{
	static UFunction* uFnPlayLoadMapMovie = nullptr;

	if (!uFnPlayLoadMapMovie)
	{
		uFnPlayLoadMapMovie = UFunction::FindFunction("Function Engine.Engine.PlayLoadMapMovie");
	}

	UEngine_execPlayLoadMapMovie_Params PlayLoadMapMovie_Params;
	memset(&PlayLoadMapMovie_Params, 0, sizeof(PlayLoadMapMovie_Params));
	memcpy_s(&PlayLoadMapMovie_Params.MapName, sizeof(PlayLoadMapMovie_Params.MapName), &MapName, sizeof(MapName));
	memcpy_s(&PlayLoadMapMovie_Params.MovieName, sizeof(PlayLoadMapMovie_Params.MovieName), &MovieName, sizeof(MovieName));

	uFnPlayLoadMapMovie->iNative = 0;
	uFnPlayLoadMapMovie->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnPlayLoadMapMovie, &PlayLoadMapMovie_Params, nullptr);
	uFnPlayLoadMapMovie->FunctionFlags |= 0x400;
	uFnPlayLoadMapMovie->iNative = 24342;

	return PlayLoadMapMovie_Params.ReturnValue;
};

// Function Engine.Engine.GetLastMovieName
// [0x00022401] (FUNC_Final | FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags) (iNative[20618])
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)

class FString UEngine::GetLastMovieName()
{
	static UFunction* uFnGetLastMovieName = nullptr;

	if (!uFnGetLastMovieName)
	{
		uFnGetLastMovieName = UFunction::FindFunction("Function Engine.Engine.GetLastMovieName");
	}

	UEngine_execGetLastMovieName_Params GetLastMovieName_Params;
	memset(&GetLastMovieName_Params, 0, sizeof(GetLastMovieName_Params));

	uFnGetLastMovieName->iNative = 0;
	uFnGetLastMovieName->FunctionFlags &= ~0x400;
	UEngine::StaticClass()->ProcessEvent(uFnGetLastMovieName, &GetLastMovieName_Params, nullptr);
	uFnGetLastMovieName->FunctionFlags |= 0x400;
	uFnGetLastMovieName->iNative = 20618;

	return GetLastMovieName_Params.ReturnValue;
};

// Function Engine.Engine.IsSplitScreen
// [0x00022401] (FUNC_Final | FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags) (iNative[21426])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UEngine::IsSplitScreen()
{
	static UFunction* uFnIsSplitScreen = nullptr;

	if (!uFnIsSplitScreen)
	{
		uFnIsSplitScreen = UFunction::FindFunction("Function Engine.Engine.IsSplitScreen");
	}

	UEngine_execIsSplitScreen_Params IsSplitScreen_Params;
	memset(&IsSplitScreen_Params, 0, sizeof(IsSplitScreen_Params));

	uFnIsSplitScreen->iNative = 0;
	uFnIsSplitScreen->FunctionFlags &= ~0x400;
	UEngine::StaticClass()->ProcessEvent(uFnIsSplitScreen, &IsSplitScreen_Params, nullptr);
	uFnIsSplitScreen->FunctionFlags |= 0x400;
	uFnIsSplitScreen->iNative = 21426;

	return IsSplitScreen_Params.ReturnValue;
};

// Function Engine.Engine.GetAdditionalFont
// [0x00022401] (FUNC_Final | FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags) (iNative[20483])
// Parameter Info:
// class UFont*                   ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        AdditionalFontIndex            (CPF_Parm)

class UFont* UEngine::GetAdditionalFont(int32_t AdditionalFontIndex)
{
	static UFunction* uFnGetAdditionalFont = nullptr;

	if (!uFnGetAdditionalFont)
	{
		uFnGetAdditionalFont = UFunction::FindFunction("Function Engine.Engine.GetAdditionalFont");
	}

	UEngine_execGetAdditionalFont_Params GetAdditionalFont_Params;
	memset(&GetAdditionalFont_Params, 0, sizeof(GetAdditionalFont_Params));
	memcpy_s(&GetAdditionalFont_Params.AdditionalFontIndex, sizeof(GetAdditionalFont_Params.AdditionalFontIndex), &AdditionalFontIndex, sizeof(AdditionalFontIndex));

	uFnGetAdditionalFont->iNative = 0;
	uFnGetAdditionalFont->FunctionFlags &= ~0x400;
	UEngine::StaticClass()->ProcessEvent(uFnGetAdditionalFont, &GetAdditionalFont_Params, nullptr);
	uFnGetAdditionalFont->FunctionFlags |= 0x400;
	uFnGetAdditionalFont->iNative = 20483;

	return GetAdditionalFont_Params.ReturnValue;
};

// Function Engine.Engine.GetSubtitleFont
// [0x00022401] (FUNC_Final | FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags) (iNative[20775])
// Parameter Info:
// class UFont*                   ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class UFont* UEngine::GetSubtitleFont()
{
	static UFunction* uFnGetSubtitleFont = nullptr;

	if (!uFnGetSubtitleFont)
	{
		uFnGetSubtitleFont = UFunction::FindFunction("Function Engine.Engine.GetSubtitleFont");
	}

	UEngine_execGetSubtitleFont_Params GetSubtitleFont_Params;
	memset(&GetSubtitleFont_Params, 0, sizeof(GetSubtitleFont_Params));

	uFnGetSubtitleFont->iNative = 0;
	uFnGetSubtitleFont->FunctionFlags &= ~0x400;
	UEngine::StaticClass()->ProcessEvent(uFnGetSubtitleFont, &GetSubtitleFont_Params, nullptr);
	uFnGetSubtitleFont->FunctionFlags |= 0x400;
	uFnGetSubtitleFont->iNative = 20775;

	return GetSubtitleFont_Params.ReturnValue;
};

// Function Engine.Engine.GetLargeFont
// [0x00022401] (FUNC_Final | FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags) (iNative[20617])
// Parameter Info:
// class UFont*                   ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class UFont* UEngine::GetLargeFont()
{
	static UFunction* uFnGetLargeFont = nullptr;

	if (!uFnGetLargeFont)
	{
		uFnGetLargeFont = UFunction::FindFunction("Function Engine.Engine.GetLargeFont");
	}

	UEngine_execGetLargeFont_Params GetLargeFont_Params;
	memset(&GetLargeFont_Params, 0, sizeof(GetLargeFont_Params));

	uFnGetLargeFont->iNative = 0;
	uFnGetLargeFont->FunctionFlags &= ~0x400;
	UEngine::StaticClass()->ProcessEvent(uFnGetLargeFont, &GetLargeFont_Params, nullptr);
	uFnGetLargeFont->FunctionFlags |= 0x400;
	uFnGetLargeFont->iNative = 20617;

	return GetLargeFont_Params.ReturnValue;
};

// Function Engine.Engine.GetMediumFont
// [0x00022401] (FUNC_Final | FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags) (iNative[20642])
// Parameter Info:
// class UFont*                   ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class UFont* UEngine::GetMediumFont()
{
	static UFunction* uFnGetMediumFont = nullptr;

	if (!uFnGetMediumFont)
	{
		uFnGetMediumFont = UFunction::FindFunction("Function Engine.Engine.GetMediumFont");
	}

	UEngine_execGetMediumFont_Params GetMediumFont_Params;
	memset(&GetMediumFont_Params, 0, sizeof(GetMediumFont_Params));

	uFnGetMediumFont->iNative = 0;
	uFnGetMediumFont->FunctionFlags &= ~0x400;
	UEngine::StaticClass()->ProcessEvent(uFnGetMediumFont, &GetMediumFont_Params, nullptr);
	uFnGetMediumFont->FunctionFlags |= 0x400;
	uFnGetMediumFont->iNative = 20642;

	return GetMediumFont_Params.ReturnValue;
};

// Function Engine.Engine.GetSmallFont
// [0x00022401] (FUNC_Final | FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags) (iNative[20754])
// Parameter Info:
// class UFont*                   ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class UFont* UEngine::GetSmallFont()
{
	static UFunction* uFnGetSmallFont = nullptr;

	if (!uFnGetSmallFont)
	{
		uFnGetSmallFont = UFunction::FindFunction("Function Engine.Engine.GetSmallFont");
	}

	UEngine_execGetSmallFont_Params GetSmallFont_Params;
	memset(&GetSmallFont_Params, 0, sizeof(GetSmallFont_Params));

	uFnGetSmallFont->iNative = 0;
	uFnGetSmallFont->FunctionFlags &= ~0x400;
	UEngine::StaticClass()->ProcessEvent(uFnGetSmallFont, &GetSmallFont_Params, nullptr);
	uFnGetSmallFont->FunctionFlags |= 0x400;
	uFnGetSmallFont->iNative = 20754;

	return GetSmallFont_Params.ReturnValue;
};

// Function Engine.Engine.GetTinyFont
// [0x00022401] (FUNC_Final | FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags) (iNative[20789])
// Parameter Info:
// class UFont*                   ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class UFont* UEngine::GetTinyFont()
{
	static UFunction* uFnGetTinyFont = nullptr;

	if (!uFnGetTinyFont)
	{
		uFnGetTinyFont = UFunction::FindFunction("Function Engine.Engine.GetTinyFont");
	}

	UEngine_execGetTinyFont_Params GetTinyFont_Params;
	memset(&GetTinyFont_Params, 0, sizeof(GetTinyFont_Params));

	uFnGetTinyFont->iNative = 0;
	uFnGetTinyFont->FunctionFlags &= ~0x400;
	UEngine::StaticClass()->ProcessEvent(uFnGetTinyFont, &GetTinyFont_Params, nullptr);
	uFnGetTinyFont->FunctionFlags |= 0x400;
	uFnGetTinyFont->iNative = 20789;

	return GetTinyFont_Params.ReturnValue;
};

// Function Engine.Engine.GetBuildDate
// [0x00022401] (FUNC_Final | FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags) (iNative[20521])
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)

class FString UEngine::GetBuildDate()
{
	static UFunction* uFnGetBuildDate = nullptr;

	if (!uFnGetBuildDate)
	{
		uFnGetBuildDate = UFunction::FindFunction("Function Engine.Engine.GetBuildDate");
	}

	UEngine_execGetBuildDate_Params GetBuildDate_Params;
	memset(&GetBuildDate_Params, 0, sizeof(GetBuildDate_Params));

	uFnGetBuildDate->iNative = 0;
	uFnGetBuildDate->FunctionFlags &= ~0x400;
	UEngine::StaticClass()->ProcessEvent(uFnGetBuildDate, &GetBuildDate_Params, nullptr);
	uFnGetBuildDate->FunctionFlags |= 0x400;
	uFnGetBuildDate->iNative = 20521;

	return GetBuildDate_Params.ReturnValue;
};

// Function Engine.Engine.GetCurrentWorldInfo
// [0x00022401] (FUNC_Final | FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags) (iNative[20549])
// Parameter Info:
// class AWorldInfo*              ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class AWorldInfo* UEngine::GetCurrentWorldInfo()
{
	static UFunction* uFnGetCurrentWorldInfo = nullptr;

	if (!uFnGetCurrentWorldInfo)
	{
		uFnGetCurrentWorldInfo = UFunction::FindFunction("Function Engine.Engine.GetCurrentWorldInfo");
	}

	UEngine_execGetCurrentWorldInfo_Params GetCurrentWorldInfo_Params;
	memset(&GetCurrentWorldInfo_Params, 0, sizeof(GetCurrentWorldInfo_Params));

	uFnGetCurrentWorldInfo->iNative = 0;
	uFnGetCurrentWorldInfo->FunctionFlags &= ~0x400;
	UEngine::StaticClass()->ProcessEvent(uFnGetCurrentWorldInfo, &GetCurrentWorldInfo_Params, nullptr);
	uFnGetCurrentWorldInfo->FunctionFlags |= 0x400;
	uFnGetCurrentWorldInfo->iNative = 20549;

	return GetCurrentWorldInfo_Params.ReturnValue;
};

// Function Engine.Engine.IsGame
// [0x00022401] (FUNC_Final | FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags) (iNative[21384])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UEngine::IsGame()
{
	static UFunction* uFnIsGame = nullptr;

	if (!uFnIsGame)
	{
		uFnIsGame = UFunction::FindFunction("Function Engine.Engine.IsGame");
	}

	UEngine_execIsGame_Params IsGame_Params;
	memset(&IsGame_Params, 0, sizeof(IsGame_Params));

	uFnIsGame->iNative = 0;
	uFnIsGame->FunctionFlags &= ~0x400;
	UEngine::StaticClass()->ProcessEvent(uFnIsGame, &IsGame_Params, nullptr);
	uFnIsGame->FunctionFlags |= 0x400;
	uFnIsGame->iNative = 21384;

	return IsGame_Params.ReturnValue;
};

// Function Engine.Engine.IsEditor
// [0x00022401] (FUNC_Final | FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags) (iNative[14582])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UEngine::IsEditor()
{
	static UFunction* uFnIsEditor = nullptr;

	if (!uFnIsEditor)
	{
		uFnIsEditor = UFunction::FindFunction("Function Engine.Engine.IsEditor");
	}

	UEngine_execIsEditor_Params IsEditor_Params;
	memset(&IsEditor_Params, 0, sizeof(IsEditor_Params));

	uFnIsEditor->iNative = 0;
	uFnIsEditor->FunctionFlags &= ~0x400;
	UEngine::StaticClass()->ProcessEvent(uFnIsEditor, &IsEditor_Params, nullptr);
	uFnIsEditor->FunctionFlags |= 0x400;
	uFnIsEditor->iNative = 14582;

	return IsEditor_Params.ReturnValue;
};

// Function Engine.GameEngine.GetDLCManagementBridge
// [0x00022401] (FUNC_Final | FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags) (iNative[20569])
// Parameter Info:
// class UArkDLCManagementBridge* ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class UArkDLCManagementBridge* UGameEngine::GetDLCManagementBridge()
{
	static UFunction* uFnGetDLCManagementBridge = nullptr;

	if (!uFnGetDLCManagementBridge)
	{
		uFnGetDLCManagementBridge = UFunction::FindFunction("Function Engine.GameEngine.GetDLCManagementBridge");
	}

	UGameEngine_execGetDLCManagementBridge_Params GetDLCManagementBridge_Params;
	memset(&GetDLCManagementBridge_Params, 0, sizeof(GetDLCManagementBridge_Params));

	uFnGetDLCManagementBridge->iNative = 0;
	uFnGetDLCManagementBridge->FunctionFlags &= ~0x400;
	UGameEngine::StaticClass()->ProcessEvent(uFnGetDLCManagementBridge, &GetDLCManagementBridge_Params, nullptr);
	uFnGetDLCManagementBridge->FunctionFlags |= 0x400;
	uFnGetDLCManagementBridge->iNative = 20569;

	return GetDLCManagementBridge_Params.ReturnValue;
};

// Function Engine.GameEngine.GetDLCManager
// [0x00022401] (FUNC_Final | FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags) (iNative[20570])
// Parameter Info:
// class UDownloadableContentManager* ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class UDownloadableContentManager* UGameEngine::GetDLCManager()
{
	static UFunction* uFnGetDLCManager = nullptr;

	if (!uFnGetDLCManager)
	{
		uFnGetDLCManager = UFunction::FindFunction("Function Engine.GameEngine.GetDLCManager");
	}

	UGameEngine_execGetDLCManager_Params GetDLCManager_Params;
	memset(&GetDLCManager_Params, 0, sizeof(GetDLCManager_Params));

	uFnGetDLCManager->iNative = 0;
	uFnGetDLCManager->FunctionFlags &= ~0x400;
	UGameEngine::StaticClass()->ProcessEvent(uFnGetDLCManager, &GetDLCManager_Params, nullptr);
	uFnGetDLCManager->FunctionFlags |= 0x400;
	uFnGetDLCManager->iNative = 20570;

	return GetDLCManager_Params.ReturnValue;
};

// Function Engine.GameEngine.GetDLCEnumerator
// [0x00022401] (FUNC_Final | FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags) (iNative[20568])
// Parameter Info:
// class UDownloadableContentEnumerator* ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class UDownloadableContentEnumerator* UGameEngine::GetDLCEnumerator()
{
	static UFunction* uFnGetDLCEnumerator = nullptr;

	if (!uFnGetDLCEnumerator)
	{
		uFnGetDLCEnumerator = UFunction::FindFunction("Function Engine.GameEngine.GetDLCEnumerator");
	}

	UGameEngine_execGetDLCEnumerator_Params GetDLCEnumerator_Params;
	memset(&GetDLCEnumerator_Params, 0, sizeof(GetDLCEnumerator_Params));

	uFnGetDLCEnumerator->iNative = 0;
	uFnGetDLCEnumerator->FunctionFlags &= ~0x400;
	UGameEngine::StaticClass()->ProcessEvent(uFnGetDLCEnumerator, &GetDLCEnumerator_Params, nullptr);
	uFnGetDLCEnumerator->FunctionFlags |= 0x400;
	uFnGetDLCEnumerator->iNative = 20568;

	return GetDLCEnumerator_Params.ReturnValue;
};

// Function Engine.GameEngine.GetOnlineSubsystem
// [0x00022401] (FUNC_Final | FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags) (iNative[20663])
// Parameter Info:
// class UOnlineSubsystem*        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class UOnlineSubsystem* UGameEngine::GetOnlineSubsystem()
{
	static UFunction* uFnGetOnlineSubsystem = nullptr;

	if (!uFnGetOnlineSubsystem)
	{
		uFnGetOnlineSubsystem = UFunction::FindFunction("Function Engine.GameEngine.GetOnlineSubsystem");
	}

	UGameEngine_execGetOnlineSubsystem_Params GetOnlineSubsystem_Params;
	memset(&GetOnlineSubsystem_Params, 0, sizeof(GetOnlineSubsystem_Params));

	uFnGetOnlineSubsystem->iNative = 0;
	uFnGetOnlineSubsystem->FunctionFlags &= ~0x400;
	UGameEngine::StaticClass()->ProcessEvent(uFnGetOnlineSubsystem, &GetOnlineSubsystem_Params, nullptr);
	uFnGetOnlineSubsystem->FunctionFlags |= 0x400;
	uFnGetOnlineSubsystem->iNative = 20663;

	return GetOnlineSubsystem_Params.ReturnValue;
};

// Function Engine.Actor.OnSetDamageInstigator
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_SetDamageInstigator* Action                         (CPF_Parm)

void AActor::OnSetDamageInstigator(class USeqAct_SetDamageInstigator* Action)
{
	static UFunction* uFnOnSetDamageInstigator = nullptr;

	if (!uFnOnSetDamageInstigator)
	{
		uFnOnSetDamageInstigator = UFunction::FindFunction("Function Engine.Actor.OnSetDamageInstigator");
	}

	AActor_execOnSetDamageInstigator_Params OnSetDamageInstigator_Params;
	memset(&OnSetDamageInstigator_Params, 0, sizeof(OnSetDamageInstigator_Params));
	OnSetDamageInstigator_Params.Action = Action;

	this->ProcessEvent(uFnOnSetDamageInstigator, &OnSetDamageInstigator_Params, nullptr);
};

// Function Engine.Actor.CallDisplayDebug
// [0x00420802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// class AHUD*                    _pHUD                          (CPF_Parm)
// float                          _rfOut_YL                      (CPF_Parm | CPF_OutParm)
// float                          _rfOut_YPos                    (CPF_Parm | CPF_OutParm)

void AActor::eventCallDisplayDebug(class AHUD* _pHUD, float& _rfOut_YL, float& _rfOut_YPos)
{
	static UFunction* uFnCallDisplayDebug = nullptr;

	if (!uFnCallDisplayDebug)
	{
		uFnCallDisplayDebug = UFunction::FindFunction("Function Engine.Actor.CallDisplayDebug");
	}

	AActor_eventCallDisplayDebug_Params CallDisplayDebug_Params;
	memset(&CallDisplayDebug_Params, 0, sizeof(CallDisplayDebug_Params));
	CallDisplayDebug_Params._pHUD = _pHUD;
	memcpy_s(&CallDisplayDebug_Params._rfOut_YL, sizeof(CallDisplayDebug_Params._rfOut_YL), &_rfOut_YL, sizeof(_rfOut_YL));
	memcpy_s(&CallDisplayDebug_Params._rfOut_YPos, sizeof(CallDisplayDebug_Params._rfOut_YPos), &_rfOut_YPos, sizeof(_rfOut_YPos));

	this->ProcessEvent(uFnCallDisplayDebug, &CallDisplayDebug_Params, nullptr);

	memcpy_s(&_rfOut_YL, sizeof(_rfOut_YL), &CallDisplayDebug_Params._rfOut_YL, sizeof(CallDisplayDebug_Params._rfOut_YL));
	memcpy_s(&_rfOut_YPos, sizeof(_rfOut_YPos), &CallDisplayDebug_Params._rfOut_YPos, sizeof(CallDisplayDebug_Params._rfOut_YPos));
};

// Function Engine.Actor.ShouldBeHiddenBySHOW_NavigationNodes
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25894])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AActor::ShouldBeHiddenBySHOW_NavigationNodes()
{
	static UFunction* uFnShouldBeHiddenBySHOW_NavigationNodes = nullptr;

	if (!uFnShouldBeHiddenBySHOW_NavigationNodes)
	{
		uFnShouldBeHiddenBySHOW_NavigationNodes = UFunction::FindFunction("Function Engine.Actor.ShouldBeHiddenBySHOW_NavigationNodes");
	}

	AActor_execShouldBeHiddenBySHOW_NavigationNodes_Params ShouldBeHiddenBySHOW_NavigationNodes_Params;
	memset(&ShouldBeHiddenBySHOW_NavigationNodes_Params, 0, sizeof(ShouldBeHiddenBySHOW_NavigationNodes_Params));

	uFnShouldBeHiddenBySHOW_NavigationNodes->iNative = 0;
	uFnShouldBeHiddenBySHOW_NavigationNodes->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnShouldBeHiddenBySHOW_NavigationNodes, &ShouldBeHiddenBySHOW_NavigationNodes_Params, nullptr);
	uFnShouldBeHiddenBySHOW_NavigationNodes->FunctionFlags |= 0x400;
	uFnShouldBeHiddenBySHOW_NavigationNodes->iNative = 25894;

	return ShouldBeHiddenBySHOW_NavigationNodes_Params.ReturnValue;
};

// Function Engine.Actor.WillOverlap
// [0x00420401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[27281])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FVector                 PosA                           (CPF_Parm)
// struct FVector                 VelA                           (CPF_Parm)
// struct FVector                 PosB                           (CPF_Parm)
// struct FVector                 VelB                           (CPF_Parm)
// float                          StepSize                       (CPF_Parm)
// float                          Radius                         (CPF_Parm)
// float                          Time                           (CPF_Parm | CPF_OutParm)

bool AActor::WillOverlap(const struct FVector& PosA, const struct FVector& VelA, const struct FVector& PosB, const struct FVector& VelB, float StepSize, float Radius, float& Time)
{
	static UFunction* uFnWillOverlap = nullptr;

	if (!uFnWillOverlap)
	{
		uFnWillOverlap = UFunction::FindFunction("Function Engine.Actor.WillOverlap");
	}

	AActor_execWillOverlap_Params WillOverlap_Params;
	memset(&WillOverlap_Params, 0, sizeof(WillOverlap_Params));
	memcpy_s(&WillOverlap_Params.PosA, sizeof(WillOverlap_Params.PosA), &PosA, sizeof(PosA));
	memcpy_s(&WillOverlap_Params.VelA, sizeof(WillOverlap_Params.VelA), &VelA, sizeof(VelA));
	memcpy_s(&WillOverlap_Params.PosB, sizeof(WillOverlap_Params.PosB), &PosB, sizeof(PosB));
	memcpy_s(&WillOverlap_Params.VelB, sizeof(WillOverlap_Params.VelB), &VelB, sizeof(VelB));
	memcpy_s(&WillOverlap_Params.StepSize, sizeof(WillOverlap_Params.StepSize), &StepSize, sizeof(StepSize));
	memcpy_s(&WillOverlap_Params.Radius, sizeof(WillOverlap_Params.Radius), &Radius, sizeof(Radius));
	memcpy_s(&WillOverlap_Params.Time, sizeof(WillOverlap_Params.Time), &Time, sizeof(Time));

	uFnWillOverlap->iNative = 0;
	uFnWillOverlap->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnWillOverlap, &WillOverlap_Params, nullptr);
	uFnWillOverlap->FunctionFlags |= 0x400;
	uFnWillOverlap->iNative = 27281;

	memcpy_s(&Time, sizeof(Time), &WillOverlap_Params.Time, sizeof(WillOverlap_Params.Time));

	return WillOverlap_Params.ReturnValue;
};

// Function Engine.Actor.ReplicationEnded
// [0x00020900] (FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AActor::eventReplicationEnded()
{
	static UFunction* uFnReplicationEnded = nullptr;

	if (!uFnReplicationEnded)
	{
		uFnReplicationEnded = UFunction::FindFunction("Function Engine.Actor.ReplicationEnded");
	}

	AActor_eventReplicationEnded_Params ReplicationEnded_Params;
	memset(&ReplicationEnded_Params, 0, sizeof(ReplicationEnded_Params));

	this->ProcessEvent(uFnReplicationEnded, &ReplicationEnded_Params, nullptr);
};

// Function Engine.Actor.PostDemoRewind
// [0x00020900] (FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AActor::eventPostDemoRewind()
{
	static UFunction* uFnPostDemoRewind = nullptr;

	if (!uFnPostDemoRewind)
	{
		uFnPostDemoRewind = UFunction::FindFunction("Function Engine.Actor.PostDemoRewind");
	}

	AActor_eventPostDemoRewind_Params PostDemoRewind_Params;
	memset(&PostDemoRewind_Params, 0, sizeof(PostDemoRewind_Params));

	this->ProcessEvent(uFnPostDemoRewind, &PostDemoRewind_Params, nullptr);
};

// Function Engine.Actor.SupportsKismetModification
// [0x00420401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[26403])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class USequenceOp*             AskingOp                       (CPF_Parm)
// class FString                  Reason                         (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

bool AActor::SupportsKismetModification(class USequenceOp* AskingOp, class FString& Reason)
{
	static UFunction* uFnSupportsKismetModification = nullptr;

	if (!uFnSupportsKismetModification)
	{
		uFnSupportsKismetModification = UFunction::FindFunction("Function Engine.Actor.SupportsKismetModification");
	}

	AActor_execSupportsKismetModification_Params SupportsKismetModification_Params;
	memset(&SupportsKismetModification_Params, 0, sizeof(SupportsKismetModification_Params));
	SupportsKismetModification_Params.AskingOp = AskingOp;
	memcpy_s(&SupportsKismetModification_Params.Reason, sizeof(SupportsKismetModification_Params.Reason), &Reason, sizeof(Reason));

	uFnSupportsKismetModification->iNative = 0;
	uFnSupportsKismetModification->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSupportsKismetModification, &SupportsKismetModification_Params, nullptr);
	uFnSupportsKismetModification->FunctionFlags |= 0x400;
	uFnSupportsKismetModification->iNative = 26403;

	memcpy_s(&Reason, sizeof(Reason), &SupportsKismetModification_Params.Reason, sizeof(SupportsKismetModification_Params.Reason));

	return SupportsKismetModification_Params.ReturnValue;
};

// Function Engine.Actor.TrailsNotifyEnd
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UAnimNotify_Trails*      AnimNotifyData                 (CPF_Const | CPF_Parm)

void AActor::eventTrailsNotifyEnd(class UAnimNotify_Trails* AnimNotifyData)
{
	static UFunction* uFnTrailsNotifyEnd = nullptr;

	if (!uFnTrailsNotifyEnd)
	{
		uFnTrailsNotifyEnd = UFunction::FindFunction("Function Engine.Actor.TrailsNotifyEnd");
	}

	AActor_eventTrailsNotifyEnd_Params TrailsNotifyEnd_Params;
	memset(&TrailsNotifyEnd_Params, 0, sizeof(TrailsNotifyEnd_Params));
	TrailsNotifyEnd_Params.AnimNotifyData = AnimNotifyData;

	this->ProcessEvent(uFnTrailsNotifyEnd, &TrailsNotifyEnd_Params, nullptr);
};

// Function Engine.Actor.TrailsNotifyTick
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UAnimNotify_Trails*      AnimNotifyData                 (CPF_Const | CPF_Parm)

void AActor::eventTrailsNotifyTick(class UAnimNotify_Trails* AnimNotifyData)
{
	static UFunction* uFnTrailsNotifyTick = nullptr;

	if (!uFnTrailsNotifyTick)
	{
		uFnTrailsNotifyTick = UFunction::FindFunction("Function Engine.Actor.TrailsNotifyTick");
	}

	AActor_eventTrailsNotifyTick_Params TrailsNotifyTick_Params;
	memset(&TrailsNotifyTick_Params, 0, sizeof(TrailsNotifyTick_Params));
	TrailsNotifyTick_Params.AnimNotifyData = AnimNotifyData;

	this->ProcessEvent(uFnTrailsNotifyTick, &TrailsNotifyTick_Params, nullptr);
};

// Function Engine.Actor.TrailsNotify
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UAnimNotify_Trails*      AnimNotifyData                 (CPF_Const | CPF_Parm)

void AActor::eventTrailsNotify(class UAnimNotify_Trails* AnimNotifyData)
{
	static UFunction* uFnTrailsNotify = nullptr;

	if (!uFnTrailsNotify)
	{
		uFnTrailsNotify = UFunction::FindFunction("Function Engine.Actor.TrailsNotify");
	}

	AActor_eventTrailsNotify_Params TrailsNotify_Params;
	memset(&TrailsNotify_Params, 0, sizeof(TrailsNotify_Params));
	TrailsNotify_Params.AnimNotifyData = AnimNotifyData;

	this->ProcessEvent(uFnTrailsNotify, &TrailsNotify_Params, nullptr);
};

// Function Engine.Actor.PlayParticleEffect
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UAnimNotify_PlayParticleEffect* AnimNotifyData                 (CPF_Const | CPF_Parm)

bool AActor::eventPlayParticleEffect(class UAnimNotify_PlayParticleEffect* AnimNotifyData)
{
	static UFunction* uFnPlayParticleEffect = nullptr;

	if (!uFnPlayParticleEffect)
	{
		uFnPlayParticleEffect = UFunction::FindFunction("Function Engine.Actor.PlayParticleEffect");
	}

	AActor_eventPlayParticleEffect_Params PlayParticleEffect_Params;
	memset(&PlayParticleEffect_Params, 0, sizeof(PlayParticleEffect_Params));
	PlayParticleEffect_Params.AnimNotifyData = AnimNotifyData;

	this->ProcessEvent(uFnPlayParticleEffect, &PlayParticleEffect_Params, nullptr);

	return PlayParticleEffect_Params.ReturnValue;
};

// Function Engine.Actor.IsInPersistentLevel
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[21394])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       bIncludeLevelStreamingPersistent (CPF_OptionalParm | CPF_Parm)

bool AActor::IsInPersistentLevel(bool bIncludeLevelStreamingPersistent)
{
	static UFunction* uFnIsInPersistentLevel = nullptr;

	if (!uFnIsInPersistentLevel)
	{
		uFnIsInPersistentLevel = UFunction::FindFunction("Function Engine.Actor.IsInPersistentLevel");
	}

	AActor_execIsInPersistentLevel_Params IsInPersistentLevel_Params;
	memset(&IsInPersistentLevel_Params, 0, sizeof(IsInPersistentLevel_Params));
	IsInPersistentLevel_Params.bIncludeLevelStreamingPersistent = bIncludeLevelStreamingPersistent;

	uFnIsInPersistentLevel->iNative = 0;
	uFnIsInPersistentLevel->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnIsInPersistentLevel, &IsInPersistentLevel_Params, nullptr);
	uFnIsInPersistentLevel->FunctionFlags |= 0x400;
	uFnIsInPersistentLevel->iNative = 21394;

	return IsInPersistentLevel_Params.ReturnValue;
};

// Function Engine.Actor.OnRigidBodySpringOverextension
// [0x00020900] (FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class URB_BodyInstance*        BodyInstance                   (CPF_Parm)

void AActor::eventOnRigidBodySpringOverextension(class URB_BodyInstance* BodyInstance)
{
	static UFunction* uFnOnRigidBodySpringOverextension = nullptr;

	if (!uFnOnRigidBodySpringOverextension)
	{
		uFnOnRigidBodySpringOverextension = UFunction::FindFunction("Function Engine.Actor.OnRigidBodySpringOverextension");
	}

	AActor_eventOnRigidBodySpringOverextension_Params OnRigidBodySpringOverextension_Params;
	memset(&OnRigidBodySpringOverextension_Params, 0, sizeof(OnRigidBodySpringOverextension_Params));
	OnRigidBodySpringOverextension_Params.BodyInstance = BodyInstance;

	this->ProcessEvent(uFnOnRigidBodySpringOverextension, &OnRigidBodySpringOverextension_Params, nullptr);
};

// Function Engine.Actor.GetPackageGuid
// [0x00022401] (FUNC_Final | FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags) (iNative[20667])
// Parameter Info:
// struct FGuid                   ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    PackageName                    (CPF_Parm)

struct FGuid AActor::GetPackageGuid(const class FName& PackageName)
{
	static UFunction* uFnGetPackageGuid = nullptr;

	if (!uFnGetPackageGuid)
	{
		uFnGetPackageGuid = UFunction::FindFunction("Function Engine.Actor.GetPackageGuid");
	}

	AActor_execGetPackageGuid_Params GetPackageGuid_Params;
	memset(&GetPackageGuid_Params, 0, sizeof(GetPackageGuid_Params));
	memcpy_s(&GetPackageGuid_Params.PackageName, sizeof(GetPackageGuid_Params.PackageName), &PackageName, sizeof(PackageName));

	uFnGetPackageGuid->iNative = 0;
	uFnGetPackageGuid->FunctionFlags &= ~0x400;
	AActor::StaticClass()->ProcessEvent(uFnGetPackageGuid, &GetPackageGuid_Params, nullptr);
	uFnGetPackageGuid->FunctionFlags |= 0x400;
	uFnGetPackageGuid->iNative = 20667;

	return GetPackageGuid_Params.ReturnValue;
};

// Function Engine.Actor.PostRenderFor
// [0x00020900] (FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class APlayerController*       PC                             (CPF_Parm)
// class UCanvas*                 Canvas                         (CPF_Parm)
// struct FVector                 CameraPosition                 (CPF_Parm)
// struct FVector                 CameraDir                      (CPF_Parm)

void AActor::eventPostRenderFor(class APlayerController* PC, class UCanvas* Canvas, const struct FVector& CameraPosition, const struct FVector& CameraDir)
{
	static UFunction* uFnPostRenderFor = nullptr;

	if (!uFnPostRenderFor)
	{
		uFnPostRenderFor = UFunction::FindFunction("Function Engine.Actor.PostRenderFor");
	}

	AActor_eventPostRenderFor_Params PostRenderFor_Params;
	memset(&PostRenderFor_Params, 0, sizeof(PostRenderFor_Params));
	PostRenderFor_Params.PC = PC;
	PostRenderFor_Params.Canvas = Canvas;
	memcpy_s(&PostRenderFor_Params.CameraPosition, sizeof(PostRenderFor_Params.CameraPosition), &CameraPosition, sizeof(CameraPosition));
	memcpy_s(&PostRenderFor_Params.CameraDir, sizeof(PostRenderFor_Params.CameraDir), &CameraDir, sizeof(CameraDir));

	this->ProcessEvent(uFnPostRenderFor, &PostRenderFor_Params, nullptr);
};

// Function Engine.Actor.NativePostRenderFor
// [0x00020500] (FUNC_Simulated | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[23078])
// Parameter Info:
// class APlayerController*       PC                             (CPF_Parm)
// class UCanvas*                 Canvas                         (CPF_Parm)
// struct FVector                 CameraPosition                 (CPF_Parm)
// struct FVector                 CameraDir                      (CPF_Parm)

void AActor::NativePostRenderFor(class APlayerController* PC, class UCanvas* Canvas, const struct FVector& CameraPosition, const struct FVector& CameraDir)
{
	static UFunction* uFnNativePostRenderFor = nullptr;

	if (!uFnNativePostRenderFor)
	{
		uFnNativePostRenderFor = UFunction::FindFunction("Function Engine.Actor.NativePostRenderFor");
	}

	AActor_execNativePostRenderFor_Params NativePostRenderFor_Params;
	memset(&NativePostRenderFor_Params, 0, sizeof(NativePostRenderFor_Params));
	NativePostRenderFor_Params.PC = PC;
	NativePostRenderFor_Params.Canvas = Canvas;
	memcpy_s(&NativePostRenderFor_Params.CameraPosition, sizeof(NativePostRenderFor_Params.CameraPosition), &CameraPosition, sizeof(CameraPosition));
	memcpy_s(&NativePostRenderFor_Params.CameraDir, sizeof(NativePostRenderFor_Params.CameraDir), &CameraDir, sizeof(CameraDir));

	uFnNativePostRenderFor->iNative = 0;
	uFnNativePostRenderFor->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnNativePostRenderFor, &NativePostRenderFor_Params, nullptr);
	uFnNativePostRenderFor->FunctionFlags |= 0x400;
	uFnNativePostRenderFor->iNative = 23078;
};

// Function Engine.Actor.SetHUDLocation
// [0x00020500] (FUNC_Simulated | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25676])
// Parameter Info:
// struct FVector                 NewHUDLocation                 (CPF_Parm)

void AActor::SetHUDLocation(const struct FVector& NewHUDLocation)
{
	static UFunction* uFnSetHUDLocation = nullptr;

	if (!uFnSetHUDLocation)
	{
		uFnSetHUDLocation = UFunction::FindFunction("Function Engine.Actor.SetHUDLocation");
	}

	AActor_execSetHUDLocation_Params SetHUDLocation_Params;
	memset(&SetHUDLocation_Params, 0, sizeof(SetHUDLocation_Params));
	memcpy_s(&SetHUDLocation_Params.NewHUDLocation, sizeof(SetHUDLocation_Params.NewHUDLocation), &NewHUDLocation, sizeof(NewHUDLocation));

	uFnSetHUDLocation->iNative = 0;
	uFnSetHUDLocation->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetHUDLocation, &SetHUDLocation_Params, nullptr);
	uFnSetHUDLocation->FunctionFlags |= 0x400;
	uFnSetHUDLocation->iNative = 25676;
};

// Function Engine.Actor.SpawnedByKismet
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AActor::eventSpawnedByKismet()
{
	static UFunction* uFnSpawnedByKismet = nullptr;

	if (!uFnSpawnedByKismet)
	{
		uFnSpawnedByKismet = UFunction::FindFunction("Function Engine.Actor.SpawnedByKismet");
	}

	AActor_eventSpawnedByKismet_Params SpawnedByKismet_Params;
	memset(&SpawnedByKismet_Params, 0, sizeof(SpawnedByKismet_Params));

	this->ProcessEvent(uFnSpawnedByKismet, &SpawnedByKismet_Params, nullptr);
};

// Function Engine.Actor.GetTargetLocation
// [0x00024500] (FUNC_Simulated | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[20781])
// Parameter Info:
// struct FVector                 ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class AActor*                  RequestedBy                    (CPF_OptionalParm | CPF_Parm)
// uint32_t                       bRequestAlternateLoc           (CPF_OptionalParm | CPF_Parm)

struct FVector AActor::GetTargetLocation(class AActor* RequestedBy, bool bRequestAlternateLoc)
{
	static UFunction* uFnGetTargetLocation = nullptr;

	if (!uFnGetTargetLocation)
	{
		uFnGetTargetLocation = UFunction::FindFunction("Function Engine.Actor.GetTargetLocation");
	}

	AActor_execGetTargetLocation_Params GetTargetLocation_Params;
	memset(&GetTargetLocation_Params, 0, sizeof(GetTargetLocation_Params));
	GetTargetLocation_Params.RequestedBy = RequestedBy;
	GetTargetLocation_Params.bRequestAlternateLoc = bRequestAlternateLoc;

	uFnGetTargetLocation->iNative = 0;
	uFnGetTargetLocation->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetTargetLocation, &GetTargetLocation_Params, nullptr);
	uFnGetTargetLocation->FunctionFlags |= 0x400;
	uFnGetTargetLocation->iNative = 20781;

	return GetTargetLocation_Params.ReturnValue;
};

// Function Engine.Actor.FindGoodEndView
// [0x00420102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// class APlayerController*       PC                             (CPF_Parm)
// struct FRotator                GoodRotation                   (CPF_Parm | CPF_OutParm)

void AActor::FindGoodEndView(class APlayerController* PC, struct FRotator& GoodRotation)
{
	static UFunction* uFnFindGoodEndView = nullptr;

	if (!uFnFindGoodEndView)
	{
		uFnFindGoodEndView = UFunction::FindFunction("Function Engine.Actor.FindGoodEndView");
	}

	AActor_execFindGoodEndView_Params FindGoodEndView_Params;
	memset(&FindGoodEndView_Params, 0, sizeof(FindGoodEndView_Params));
	FindGoodEndView_Params.PC = PC;
	memcpy_s(&FindGoodEndView_Params.GoodRotation, sizeof(FindGoodEndView_Params.GoodRotation), &GoodRotation, sizeof(GoodRotation));

	this->ProcessEvent(uFnFindGoodEndView, &FindGoodEndView_Params, nullptr);

	memcpy_s(&GoodRotation, sizeof(GoodRotation), &FindGoodEndView_Params.GoodRotation, sizeof(FindGoodEndView_Params.GoodRotation));
};

// Function Engine.Actor.NotifyLocalPlayerTeamReceived
// [0x00020100] (FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AActor::NotifyLocalPlayerTeamReceived()
{
	static UFunction* uFnNotifyLocalPlayerTeamReceived = nullptr;

	if (!uFnNotifyLocalPlayerTeamReceived)
	{
		uFnNotifyLocalPlayerTeamReceived = UFunction::FindFunction("Function Engine.Actor.NotifyLocalPlayerTeamReceived");
	}

	AActor_execNotifyLocalPlayerTeamReceived_Params NotifyLocalPlayerTeamReceived_Params;
	memset(&NotifyLocalPlayerTeamReceived_Params, 0, sizeof(NotifyLocalPlayerTeamReceived_Params));

	this->ProcessEvent(uFnNotifyLocalPlayerTeamReceived, &NotifyLocalPlayerTeamReceived_Params, nullptr);
};

// Function Engine.Actor.ScriptGetTeamNum
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint8_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

uint8_t AActor::eventScriptGetTeamNum()
{
	static UFunction* uFnScriptGetTeamNum = nullptr;

	if (!uFnScriptGetTeamNum)
	{
		uFnScriptGetTeamNum = UFunction::FindFunction("Function Engine.Actor.ScriptGetTeamNum");
	}

	AActor_eventScriptGetTeamNum_Params ScriptGetTeamNum_Params;
	memset(&ScriptGetTeamNum_Params, 0, sizeof(ScriptGetTeamNum_Params));

	this->ProcessEvent(uFnScriptGetTeamNum, &ScriptGetTeamNum_Params, nullptr);

	return ScriptGetTeamNum_Params.ReturnValue;
};

// Function Engine.Actor.GetTeamNum
// [0x00020500] (FUNC_Simulated | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20783])
// Parameter Info:
// uint8_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

uint8_t AActor::GetTeamNum()
{
	static UFunction* uFnGetTeamNum = nullptr;

	if (!uFnGetTeamNum)
	{
		uFnGetTeamNum = UFunction::FindFunction("Function Engine.Actor.GetTeamNum");
	}

	AActor_execGetTeamNum_Params GetTeamNum_Params;
	memset(&GetTeamNum_Params, 0, sizeof(GetTeamNum_Params));

	uFnGetTeamNum->iNative = 0;
	uFnGetTeamNum->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetTeamNum, &GetTeamNum_Params, nullptr);
	uFnGetTeamNum->FunctionFlags |= 0x400;
	uFnGetTeamNum->iNative = 20783;

	return GetTeamNum_Params.ReturnValue;
};

// Function Engine.Actor.PawnBaseDied
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AActor::PawnBaseDied()
{
	static UFunction* uFnPawnBaseDied = nullptr;

	if (!uFnPawnBaseDied)
	{
		uFnPawnBaseDied = UFunction::FindFunction("Function Engine.Actor.PawnBaseDied");
	}

	AActor_execPawnBaseDied_Params PawnBaseDied_Params;
	memset(&PawnBaseDied_Params, 0, sizeof(PawnBaseDied_Params));

	this->ProcessEvent(uFnPawnBaseDied, &PawnBaseDied_Params, nullptr);
};

// Function Engine.Actor.IsPlayerOwned
// [0x00020500] (FUNC_Simulated | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[21414])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AActor::IsPlayerOwned()
{
	static UFunction* uFnIsPlayerOwned = nullptr;

	if (!uFnIsPlayerOwned)
	{
		uFnIsPlayerOwned = UFunction::FindFunction("Function Engine.Actor.IsPlayerOwned");
	}

	AActor_execIsPlayerOwned_Params IsPlayerOwned_Params;
	memset(&IsPlayerOwned_Params, 0, sizeof(IsPlayerOwned_Params));

	uFnIsPlayerOwned->iNative = 0;
	uFnIsPlayerOwned->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnIsPlayerOwned, &IsPlayerOwned_Params, nullptr);
	uFnIsPlayerOwned->FunctionFlags |= 0x400;
	uFnIsPlayerOwned->iNative = 21414;

	return IsPlayerOwned_Params.ReturnValue;
};

// Function Engine.Actor.GetActorEyesViewPoint
// [0x00420902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// struct FVector                 out_Location                   (CPF_Parm | CPF_OutParm)
// struct FRotator                out_Rotation                   (CPF_Parm | CPF_OutParm)

void AActor::eventGetActorEyesViewPoint(struct FVector& out_Location, struct FRotator& out_Rotation)
{
	static UFunction* uFnGetActorEyesViewPoint = nullptr;

	if (!uFnGetActorEyesViewPoint)
	{
		uFnGetActorEyesViewPoint = UFunction::FindFunction("Function Engine.Actor.GetActorEyesViewPoint");
	}

	AActor_eventGetActorEyesViewPoint_Params GetActorEyesViewPoint_Params;
	memset(&GetActorEyesViewPoint_Params, 0, sizeof(GetActorEyesViewPoint_Params));
	memcpy_s(&GetActorEyesViewPoint_Params.out_Location, sizeof(GetActorEyesViewPoint_Params.out_Location), &out_Location, sizeof(out_Location));
	memcpy_s(&GetActorEyesViewPoint_Params.out_Rotation, sizeof(GetActorEyesViewPoint_Params.out_Rotation), &out_Rotation, sizeof(out_Rotation));

	this->ProcessEvent(uFnGetActorEyesViewPoint, &GetActorEyesViewPoint_Params, nullptr);

	memcpy_s(&out_Location, sizeof(out_Location), &GetActorEyesViewPoint_Params.out_Location, sizeof(GetActorEyesViewPoint_Params.out_Location));
	memcpy_s(&out_Rotation, sizeof(out_Rotation), &GetActorEyesViewPoint_Params.out_Rotation, sizeof(GetActorEyesViewPoint_Params.out_Rotation));
};

// Function Engine.Actor.GetActorFaceFXAsset
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UFaceFXAsset*            ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class UFaceFXAsset* AActor::eventGetActorFaceFXAsset()
{
	static UFunction* uFnGetActorFaceFXAsset = nullptr;

	if (!uFnGetActorFaceFXAsset)
	{
		uFnGetActorFaceFXAsset = UFunction::FindFunction("Function Engine.Actor.GetActorFaceFXAsset");
	}

	AActor_eventGetActorFaceFXAsset_Params GetActorFaceFXAsset_Params;
	memset(&GetActorFaceFXAsset_Params, 0, sizeof(GetActorFaceFXAsset_Params));

	this->ProcessEvent(uFnGetActorFaceFXAsset, &GetActorFaceFXAsset_Params, nullptr);

	return GetActorFaceFXAsset_Params.ReturnValue;
};

// Function Engine.Actor.CanActorPlayFaceFXAnim
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AActor::CanActorPlayFaceFXAnim()
{
	static UFunction* uFnCanActorPlayFaceFXAnim = nullptr;

	if (!uFnCanActorPlayFaceFXAnim)
	{
		uFnCanActorPlayFaceFXAnim = UFunction::FindFunction("Function Engine.Actor.CanActorPlayFaceFXAnim");
	}

	AActor_execCanActorPlayFaceFXAnim_Params CanActorPlayFaceFXAnim_Params;
	memset(&CanActorPlayFaceFXAnim_Params, 0, sizeof(CanActorPlayFaceFXAnim_Params));

	this->ProcessEvent(uFnCanActorPlayFaceFXAnim, &CanActorPlayFaceFXAnim_Params, nullptr);

	return CanActorPlayFaceFXAnim_Params.ReturnValue;
};

// Function Engine.Actor.IsActorPlayingFaceFXAnim
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AActor::IsActorPlayingFaceFXAnim()
{
	static UFunction* uFnIsActorPlayingFaceFXAnim = nullptr;

	if (!uFnIsActorPlayingFaceFXAnim)
	{
		uFnIsActorPlayingFaceFXAnim = UFunction::FindFunction("Function Engine.Actor.IsActorPlayingFaceFXAnim");
	}

	AActor_execIsActorPlayingFaceFXAnim_Params IsActorPlayingFaceFXAnim_Params;
	memset(&IsActorPlayingFaceFXAnim_Params, 0, sizeof(IsActorPlayingFaceFXAnim_Params));

	this->ProcessEvent(uFnIsActorPlayingFaceFXAnim, &IsActorPlayingFaceFXAnim_Params, nullptr);

	return IsActorPlayingFaceFXAnim_Params.ReturnValue;
};

// Function Engine.Actor.StopActorFaceFXAnim
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[26317])
// Parameter Info:

void AActor::StopActorFaceFXAnim()
{
	static UFunction* uFnStopActorFaceFXAnim = nullptr;

	if (!uFnStopActorFaceFXAnim)
	{
		uFnStopActorFaceFXAnim = UFunction::FindFunction("Function Engine.Actor.StopActorFaceFXAnim");
	}

	AActor_execStopActorFaceFXAnim_Params StopActorFaceFXAnim_Params;
	memset(&StopActorFaceFXAnim_Params, 0, sizeof(StopActorFaceFXAnim_Params));

	uFnStopActorFaceFXAnim->iNative = 0;
	uFnStopActorFaceFXAnim->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnStopActorFaceFXAnim, &StopActorFaceFXAnim_Params, nullptr);
	uFnStopActorFaceFXAnim->FunctionFlags |= 0x400;
	uFnStopActorFaceFXAnim->iNative = 26317;
};

// Function Engine.Actor.PlayActorFaceFXAnim
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[24267])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UFaceFXAnimSet*          AnimSet                        (CPF_Parm)
// class FString                  GroupName                      (CPF_Parm | CPF_NeedCtorLink)
// class FString                  SeqName                        (CPF_Parm | CPF_NeedCtorLink)
// class UAkEvent*                AkEventToPlay                  (CPF_Parm)

bool AActor::PlayActorFaceFXAnim(class UFaceFXAnimSet* AnimSet, const class FString& GroupName, const class FString& SeqName, class UAkEvent* AkEventToPlay)
{
	static UFunction* uFnPlayActorFaceFXAnim = nullptr;

	if (!uFnPlayActorFaceFXAnim)
	{
		uFnPlayActorFaceFXAnim = UFunction::FindFunction("Function Engine.Actor.PlayActorFaceFXAnim");
	}

	AActor_execPlayActorFaceFXAnim_Params PlayActorFaceFXAnim_Params;
	memset(&PlayActorFaceFXAnim_Params, 0, sizeof(PlayActorFaceFXAnim_Params));
	PlayActorFaceFXAnim_Params.AnimSet = AnimSet;
	memcpy_s(&PlayActorFaceFXAnim_Params.GroupName, sizeof(PlayActorFaceFXAnim_Params.GroupName), &GroupName, sizeof(GroupName));
	memcpy_s(&PlayActorFaceFXAnim_Params.SeqName, sizeof(PlayActorFaceFXAnim_Params.SeqName), &SeqName, sizeof(SeqName));
	PlayActorFaceFXAnim_Params.AkEventToPlay = AkEventToPlay;

	uFnPlayActorFaceFXAnim->iNative = 0;
	uFnPlayActorFaceFXAnim->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnPlayActorFaceFXAnim, &PlayActorFaceFXAnim_Params, nullptr);
	uFnPlayActorFaceFXAnim->FunctionFlags |= 0x400;
	uFnPlayActorFaceFXAnim->iNative = 24267;

	return PlayActorFaceFXAnim_Params.ReturnValue;
};

// Function Engine.Actor.OnAnimPlay
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UAnimNodeSequence*       SeqNode                        (CPF_Parm)

void AActor::eventOnAnimPlay(class UAnimNodeSequence* SeqNode)
{
	static UFunction* uFnOnAnimPlay = nullptr;

	if (!uFnOnAnimPlay)
	{
		uFnOnAnimPlay = UFunction::FindFunction("Function Engine.Actor.OnAnimPlay");
	}

	AActor_eventOnAnimPlay_Params OnAnimPlay_Params;
	memset(&OnAnimPlay_Params, 0, sizeof(OnAnimPlay_Params));
	OnAnimPlay_Params.SeqNode = SeqNode;

	this->ProcessEvent(uFnOnAnimPlay, &OnAnimPlay_Params, nullptr);
};

// Function Engine.Actor.OnAnimEnd
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UAnimNodeSequence*       SeqNode                        (CPF_Parm)
// float                          PlayedTime                     (CPF_Parm)
// float                          ExcessTime                     (CPF_Parm)

void AActor::eventOnAnimEnd(class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime)
{
	static UFunction* uFnOnAnimEnd = nullptr;

	if (!uFnOnAnimEnd)
	{
		uFnOnAnimEnd = UFunction::FindFunction("Function Engine.Actor.OnAnimEnd");
	}

	AActor_eventOnAnimEnd_Params OnAnimEnd_Params;
	memset(&OnAnimEnd_Params, 0, sizeof(OnAnimEnd_Params));
	OnAnimEnd_Params.SeqNode = SeqNode;
	memcpy_s(&OnAnimEnd_Params.PlayedTime, sizeof(OnAnimEnd_Params.PlayedTime), &PlayedTime, sizeof(PlayedTime));
	memcpy_s(&OnAnimEnd_Params.ExcessTime, sizeof(OnAnimEnd_Params.ExcessTime), &ExcessTime, sizeof(ExcessTime));

	this->ProcessEvent(uFnOnAnimEnd, &OnAnimEnd_Params, nullptr);
};

// Function Engine.Actor.DoKismetAttachment
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[19115])
// Parameter Info:
// class AActor*                  Attachment                     (CPF_Parm)
// struct FAttachmentInfos        AttachInfos                    (CPF_Const | CPF_Parm)

void AActor::DoKismetAttachment(class AActor* Attachment, const struct FAttachmentInfos& AttachInfos)
{
	static UFunction* uFnDoKismetAttachment = nullptr;

	if (!uFnDoKismetAttachment)
	{
		uFnDoKismetAttachment = UFunction::FindFunction("Function Engine.Actor.DoKismetAttachment");
	}

	AActor_execDoKismetAttachment_Params DoKismetAttachment_Params;
	memset(&DoKismetAttachment_Params, 0, sizeof(DoKismetAttachment_Params));
	DoKismetAttachment_Params.Attachment = Attachment;
	memcpy_s(&DoKismetAttachment_Params.AttachInfos, sizeof(DoKismetAttachment_Params.AttachInfos), &AttachInfos, sizeof(AttachInfos));

	uFnDoKismetAttachment->iNative = 0;
	uFnDoKismetAttachment->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnDoKismetAttachment, &DoKismetAttachment_Params, nullptr);
	uFnDoKismetAttachment->FunctionFlags |= 0x400;
	uFnDoKismetAttachment->iNative = 19115;
};

// Function Engine.Actor.OnAttachToActor
// [0x00820002] (FUNC_Defined | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_AttachToActor*   Action                         (CPF_Parm)

void AActor::OnAttachToActor(class USeqAct_AttachToActor* Action)
{
	static UFunction* uFnOnAttachToActor = nullptr;

	if (!uFnOnAttachToActor)
	{
		uFnOnAttachToActor = UFunction::FindFunction("Function Engine.Actor.OnAttachToActor");
	}

	AActor_execOnAttachToActor_Params OnAttachToActor_Params;
	memset(&OnAttachToActor_Params, 0, sizeof(OnAttachToActor_Params));
	OnAttachToActor_Params.Action = Action;

	this->ProcessEvent(uFnOnAttachToActor, &OnAttachToActor_Params, nullptr);
};

// Function Engine.Actor.OnToggleHidden
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_ToggleHidden*    Action                         (CPF_Parm)

void AActor::OnToggleHidden(class USeqAct_ToggleHidden* Action)
{
	static UFunction* uFnOnToggleHidden = nullptr;

	if (!uFnOnToggleHidden)
	{
		uFnOnToggleHidden = UFunction::FindFunction("Function Engine.Actor.OnToggleHidden");
	}

	AActor_execOnToggleHidden_Params OnToggleHidden_Params;
	memset(&OnToggleHidden_Params, 0, sizeof(OnToggleHidden_Params));
	OnToggleHidden_Params.Action = Action;

	this->ProcessEvent(uFnOnToggleHidden, &OnToggleHidden_Params, nullptr);
};

// Function Engine.Actor.OnChangeCollision
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_ChangeCollision* Action                         (CPF_Parm)

void AActor::OnChangeCollision(class USeqAct_ChangeCollision* Action)
{
	static UFunction* uFnOnChangeCollision = nullptr;

	if (!uFnOnChangeCollision)
	{
		uFnOnChangeCollision = UFunction::FindFunction("Function Engine.Actor.OnChangeCollision");
	}

	AActor_execOnChangeCollision_Params OnChangeCollision_Params;
	memset(&OnChangeCollision_Params, 0, sizeof(OnChangeCollision_Params));
	OnChangeCollision_Params.Action = Action;

	this->ProcessEvent(uFnOnChangeCollision, &OnChangeCollision_Params, nullptr);
};

// Function Engine.Actor.OnSetPhysics
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_SetPhysics*      Action                         (CPF_Parm)

void AActor::OnSetPhysics(class USeqAct_SetPhysics* Action)
{
	static UFunction* uFnOnSetPhysics = nullptr;

	if (!uFnOnSetPhysics)
	{
		uFnOnSetPhysics = UFunction::FindFunction("Function Engine.Actor.OnSetPhysics");
	}

	AActor_execOnSetPhysics_Params OnSetPhysics_Params;
	memset(&OnSetPhysics_Params, 0, sizeof(OnSetPhysics_Params));
	OnSetPhysics_Params.Action = Action;

	this->ProcessEvent(uFnOnSetPhysics, &OnSetPhysics_Params, nullptr);
};

// Function Engine.Actor.OnSetBlockRigidBody
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_SetBlockRigidBody* Action                         (CPF_Parm)

void AActor::OnSetBlockRigidBody(class USeqAct_SetBlockRigidBody* Action)
{
	static UFunction* uFnOnSetBlockRigidBody = nullptr;

	if (!uFnOnSetBlockRigidBody)
	{
		uFnOnSetBlockRigidBody = UFunction::FindFunction("Function Engine.Actor.OnSetBlockRigidBody");
	}

	AActor_execOnSetBlockRigidBody_Params OnSetBlockRigidBody_Params;
	memset(&OnSetBlockRigidBody_Params, 0, sizeof(OnSetBlockRigidBody_Params));
	OnSetBlockRigidBody_Params.Action = Action;

	this->ProcessEvent(uFnOnSetBlockRigidBody, &OnSetBlockRigidBody_Params, nullptr);
};

// Function Engine.Actor.OnSetVelocity
// [0x00820102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_SetVelocity*     Action                         (CPF_Parm)

void AActor::OnSetVelocity(class USeqAct_SetVelocity* Action)
{
	static UFunction* uFnOnSetVelocity = nullptr;

	if (!uFnOnSetVelocity)
	{
		uFnOnSetVelocity = UFunction::FindFunction("Function Engine.Actor.OnSetVelocity");
	}

	AActor_execOnSetVelocity_Params OnSetVelocity_Params;
	memset(&OnSetVelocity_Params, 0, sizeof(OnSetVelocity_Params));
	OnSetVelocity_Params.Action = Action;

	this->ProcessEvent(uFnOnSetVelocity, &OnSetVelocity_Params, nullptr);
};

// Function Engine.Actor.OnTeleport
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_Teleport*        Action                         (CPF_Parm)

void AActor::OnTeleport(class USeqAct_Teleport* Action)
{
	static UFunction* uFnOnTeleport = nullptr;

	if (!uFnOnTeleport)
	{
		uFnOnTeleport = UFunction::FindFunction("Function Engine.Actor.OnTeleport");
	}

	AActor_execOnTeleport_Params OnTeleport_Params;
	memset(&OnTeleport_Params, 0, sizeof(OnTeleport_Params));
	OnTeleport_Params.Action = Action;

	this->ProcessEvent(uFnOnTeleport, &OnTeleport_Params, nullptr);
};

// Function Engine.Actor.OnModifyHealth
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_ModifyHealth*    Action                         (CPF_Parm)

void AActor::OnModifyHealth(class USeqAct_ModifyHealth* Action)
{
	static UFunction* uFnOnModifyHealth = nullptr;

	if (!uFnOnModifyHealth)
	{
		uFnOnModifyHealth = UFunction::FindFunction("Function Engine.Actor.OnModifyHealth");
	}

	AActor_execOnModifyHealth_Params OnModifyHealth_Params;
	memset(&OnModifyHealth_Params, 0, sizeof(OnModifyHealth_Params));
	OnModifyHealth_Params.Action = Action;

	this->ProcessEvent(uFnOnModifyHealth, &OnModifyHealth_Params, nullptr);
};

// Function Engine.Actor.PrestreamTextures
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[24481])
// Parameter Info:
// float                          Seconds                        (CPF_Parm)
// uint32_t                       bEnableStreaming               (CPF_Parm)
// int32_t                        CinematicTextureGroups         (CPF_OptionalParm | CPF_Parm)

void AActor::PrestreamTextures(float Seconds, bool bEnableStreaming, int32_t CinematicTextureGroups)
{
	static UFunction* uFnPrestreamTextures = nullptr;

	if (!uFnPrestreamTextures)
	{
		uFnPrestreamTextures = UFunction::FindFunction("Function Engine.Actor.PrestreamTextures");
	}

	AActor_execPrestreamTextures_Params PrestreamTextures_Params;
	memset(&PrestreamTextures_Params, 0, sizeof(PrestreamTextures_Params));
	memcpy_s(&PrestreamTextures_Params.Seconds, sizeof(PrestreamTextures_Params.Seconds), &Seconds, sizeof(Seconds));
	PrestreamTextures_Params.bEnableStreaming = bEnableStreaming;
	memcpy_s(&PrestreamTextures_Params.CinematicTextureGroups, sizeof(PrestreamTextures_Params.CinematicTextureGroups), &CinematicTextureGroups, sizeof(CinematicTextureGroups));

	uFnPrestreamTextures->iNative = 0;
	uFnPrestreamTextures->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnPrestreamTextures, &PrestreamTextures_Params, nullptr);
	uFnPrestreamTextures->FunctionFlags |= 0x400;
	uFnPrestreamTextures->iNative = 24481;
};

// Function Engine.Actor.ShutDown
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AActor::eventShutDown()
{
	static UFunction* uFnShutDown = nullptr;

	if (!uFnShutDown)
	{
		uFnShutDown = UFunction::FindFunction("Function Engine.Actor.ShutDown");
	}

	AActor_eventShutDown_Params ShutDown_Params;
	memset(&ShutDown_Params, 0, sizeof(ShutDown_Params));

	this->ProcessEvent(uFnShutDown, &ShutDown_Params, nullptr);
};

// Function Engine.Actor.SetNetUpdateTime
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25721])
// Parameter Info:
// float                          NewUpdateTime                  (CPF_Parm)

void AActor::SetNetUpdateTime(float NewUpdateTime)
{
	static UFunction* uFnSetNetUpdateTime = nullptr;

	if (!uFnSetNetUpdateTime)
	{
		uFnSetNetUpdateTime = UFunction::FindFunction("Function Engine.Actor.SetNetUpdateTime");
	}

	AActor_execSetNetUpdateTime_Params SetNetUpdateTime_Params;
	memset(&SetNetUpdateTime_Params, 0, sizeof(SetNetUpdateTime_Params));
	memcpy_s(&SetNetUpdateTime_Params.NewUpdateTime, sizeof(SetNetUpdateTime_Params.NewUpdateTime), &NewUpdateTime, sizeof(NewUpdateTime));

	uFnSetNetUpdateTime->iNative = 0;
	uFnSetNetUpdateTime->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetNetUpdateTime, &SetNetUpdateTime_Params, nullptr);
	uFnSetNetUpdateTime->FunctionFlags |= 0x400;
	uFnSetNetUpdateTime->iNative = 25721;
};

// Function Engine.Actor.ForceNetRelevant
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AActor::eventForceNetRelevant()
{
	static UFunction* uFnForceNetRelevant = nullptr;

	if (!uFnForceNetRelevant)
	{
		uFnForceNetRelevant = UFunction::FindFunction("Function Engine.Actor.ForceNetRelevant");
	}

	AActor_eventForceNetRelevant_Params ForceNetRelevant_Params;
	memset(&ForceNetRelevant_Params, 0, sizeof(ForceNetRelevant_Params));

	this->ProcessEvent(uFnForceNetRelevant, &ForceNetRelevant_Params, nullptr);
};

// Function Engine.Actor.OnDestroy
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_Destroy*         Action                         (CPF_Parm)

void AActor::OnDestroy(class USeqAct_Destroy* Action)
{
	static UFunction* uFnOnDestroy = nullptr;

	if (!uFnOnDestroy)
	{
		uFnOnDestroy = UFunction::FindFunction("Function Engine.Actor.OnDestroy");
	}

	AActor_execOnDestroy_Params OnDestroy_Params;
	memset(&OnDestroy_Params, 0, sizeof(OnDestroy_Params));
	OnDestroy_Params.Action = Action;

	this->ProcessEvent(uFnOnDestroy, &OnDestroy_Params, nullptr);
};

// Function Engine.Actor.ClearLatentAction
// [0x00024103] (FUNC_Final | FUNC_Defined | FUNC_Simulated | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_Latent*          actionClass                    (CPF_Parm)
// uint32_t                       bAborted                       (CPF_OptionalParm | CPF_Parm)
// class USeqAct_Latent*          exceptionAction                (CPF_OptionalParm | CPF_Parm)

void AActor::ClearLatentAction(class USeqAct_Latent* actionClass, bool bAborted, class USeqAct_Latent* exceptionAction)
{
	static UFunction* uFnClearLatentAction = nullptr;

	if (!uFnClearLatentAction)
	{
		uFnClearLatentAction = UFunction::FindFunction("Function Engine.Actor.ClearLatentAction");
	}

	AActor_execClearLatentAction_Params ClearLatentAction_Params;
	memset(&ClearLatentAction_Params, 0, sizeof(ClearLatentAction_Params));
	ClearLatentAction_Params.actionClass = actionClass;
	ClearLatentAction_Params.bAborted = bAborted;
	ClearLatentAction_Params.exceptionAction = exceptionAction;

	this->ProcessEvent(uFnClearLatentAction, &ClearLatentAction_Params, nullptr);
};

// Function Engine.Actor.FindEventsOfClass
// [0x00424501] (FUNC_Final | FUNC_Simulated | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20100])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class USequenceEvent*          EventClass                     (CPF_Parm)
// uint32_t                       bIncludeDisabled               (CPF_OptionalParm | CPF_Parm)
// class TArray<class USequenceEvent*> out_EventList                  (CPF_OptionalParm | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

bool AActor::FindEventsOfClass(class USequenceEvent* EventClass, bool bIncludeDisabled, class TArray<class USequenceEvent*>& out_EventList)
{
	static UFunction* uFnFindEventsOfClass = nullptr;

	if (!uFnFindEventsOfClass)
	{
		uFnFindEventsOfClass = UFunction::FindFunction("Function Engine.Actor.FindEventsOfClass");
	}

	AActor_execFindEventsOfClass_Params FindEventsOfClass_Params;
	memset(&FindEventsOfClass_Params, 0, sizeof(FindEventsOfClass_Params));
	FindEventsOfClass_Params.EventClass = EventClass;
	FindEventsOfClass_Params.bIncludeDisabled = bIncludeDisabled;
	memcpy_s(&FindEventsOfClass_Params.out_EventList, sizeof(FindEventsOfClass_Params.out_EventList), &out_EventList, sizeof(out_EventList));

	uFnFindEventsOfClass->iNative = 0;
	uFnFindEventsOfClass->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnFindEventsOfClass, &FindEventsOfClass_Params, nullptr);
	uFnFindEventsOfClass->FunctionFlags |= 0x400;
	uFnFindEventsOfClass->iNative = 20100;

	memcpy_s(&out_EventList, sizeof(out_EventList), &FindEventsOfClass_Params.out_EventList, sizeof(FindEventsOfClass_Params.out_EventList));

	return FindEventsOfClass_Params.ReturnValue;
};

// Function Engine.Actor.ActivateEventClass
// [0x00424103] (FUNC_Final | FUNC_Defined | FUNC_Simulated | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class USequenceEvent*          InClass                        (CPF_Parm)
// class AActor*                  InInstigator                   (CPF_Parm)
// uint32_t                       bTest                          (CPF_OptionalParm | CPF_Parm)
// class TArray<class USequenceEvent*> EventList                      (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)
// class TArray<int32_t>          ActivateIndices                (CPF_Const | CPF_OptionalParm | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)
// class TArray<class USequenceEvent*> ActivatedEvents                (CPF_OptionalParm | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

bool AActor::ActivateEventClass(class USequenceEvent* InClass, class AActor* InInstigator, bool bTest, class TArray<class USequenceEvent*>& EventList, class TArray<int32_t>& ActivateIndices, class TArray<class USequenceEvent*>& ActivatedEvents)
{
	static UFunction* uFnActivateEventClass = nullptr;

	if (!uFnActivateEventClass)
	{
		uFnActivateEventClass = UFunction::FindFunction("Function Engine.Actor.ActivateEventClass");
	}

	AActor_execActivateEventClass_Params ActivateEventClass_Params;
	memset(&ActivateEventClass_Params, 0, sizeof(ActivateEventClass_Params));
	ActivateEventClass_Params.InClass = InClass;
	ActivateEventClass_Params.InInstigator = InInstigator;
	ActivateEventClass_Params.bTest = bTest;
	memcpy_s(&ActivateEventClass_Params.EventList, sizeof(ActivateEventClass_Params.EventList), &EventList, sizeof(EventList));
	memcpy_s(&ActivateEventClass_Params.ActivateIndices, sizeof(ActivateEventClass_Params.ActivateIndices), &ActivateIndices, sizeof(ActivateIndices));
	memcpy_s(&ActivateEventClass_Params.ActivatedEvents, sizeof(ActivateEventClass_Params.ActivatedEvents), &ActivatedEvents, sizeof(ActivatedEvents));

	this->ProcessEvent(uFnActivateEventClass, &ActivateEventClass_Params, nullptr);

	memcpy_s(&EventList, sizeof(EventList), &ActivateEventClass_Params.EventList, sizeof(ActivateEventClass_Params.EventList));
	memcpy_s(&ActivateIndices, sizeof(ActivateIndices), &ActivateEventClass_Params.ActivateIndices, sizeof(ActivateEventClass_Params.ActivateIndices));
	memcpy_s(&ActivatedEvents, sizeof(ActivatedEvents), &ActivateEventClass_Params.ActivatedEvents, sizeof(ActivateEventClass_Params.ActivatedEvents));

	return ActivateEventClass_Params.ReturnValue;
};

// Function Engine.Actor.ReceivedNewEvent
// [0x00020900] (FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USequenceEvent*          Evt                            (CPF_Parm)

void AActor::eventReceivedNewEvent(class USequenceEvent* Evt)
{
	static UFunction* uFnReceivedNewEvent = nullptr;

	if (!uFnReceivedNewEvent)
	{
		uFnReceivedNewEvent = UFunction::FindFunction("Function Engine.Actor.ReceivedNewEvent");
	}

	AActor_eventReceivedNewEvent_Params ReceivedNewEvent_Params;
	memset(&ReceivedNewEvent_Params, 0, sizeof(ReceivedNewEvent_Params));
	ReceivedNewEvent_Params.Evt = Evt;

	this->ProcessEvent(uFnReceivedNewEvent, &ReceivedNewEvent_Params, nullptr);
};

// Function Engine.Actor.TriggerEventClass
// [0x00424102] (FUNC_Defined | FUNC_Simulated | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class USequenceEvent*          InEventClass                   (CPF_Parm)
// class AActor*                  InInstigator                   (CPF_Parm)
// int32_t                        ActivateIndex                  (CPF_OptionalParm | CPF_Parm)
// uint32_t                       bTest                          (CPF_OptionalParm | CPF_Parm)
// class TArray<class USequenceEvent*> ActivatedEvents                (CPF_OptionalParm | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

bool AActor::TriggerEventClass(class USequenceEvent* InEventClass, class AActor* InInstigator, int32_t ActivateIndex, bool bTest, class TArray<class USequenceEvent*>& ActivatedEvents)
{
	static UFunction* uFnTriggerEventClass = nullptr;

	if (!uFnTriggerEventClass)
	{
		uFnTriggerEventClass = UFunction::FindFunction("Function Engine.Actor.TriggerEventClass");
	}

	AActor_execTriggerEventClass_Params TriggerEventClass_Params;
	memset(&TriggerEventClass_Params, 0, sizeof(TriggerEventClass_Params));
	TriggerEventClass_Params.InEventClass = InEventClass;
	TriggerEventClass_Params.InInstigator = InInstigator;
	memcpy_s(&TriggerEventClass_Params.ActivateIndex, sizeof(TriggerEventClass_Params.ActivateIndex), &ActivateIndex, sizeof(ActivateIndex));
	TriggerEventClass_Params.bTest = bTest;
	memcpy_s(&TriggerEventClass_Params.ActivatedEvents, sizeof(TriggerEventClass_Params.ActivatedEvents), &ActivatedEvents, sizeof(ActivatedEvents));

	this->ProcessEvent(uFnTriggerEventClass, &TriggerEventClass_Params, nullptr);

	memcpy_s(&ActivatedEvents, sizeof(ActivatedEvents), &TriggerEventClass_Params.ActivatedEvents, sizeof(TriggerEventClass_Params.ActivatedEvents));

	return TriggerEventClass_Params.ReturnValue;
};

// Function Engine.Actor.IsInVolume
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class AVolume*                 aVolume                        (CPF_Parm)

bool AActor::IsInVolume(class AVolume* aVolume)
{
	static UFunction* uFnIsInVolume = nullptr;

	if (!uFnIsInVolume)
	{
		uFnIsInVolume = UFunction::FindFunction("Function Engine.Actor.IsInVolume");
	}

	AActor_execIsInVolume_Params IsInVolume_Params;
	memset(&IsInVolume_Params, 0, sizeof(IsInVolume_Params));
	IsInVolume_Params.aVolume = aVolume;

	this->ProcessEvent(uFnIsInVolume, &IsInVolume_Params, nullptr);

	return IsInVolume_Params.ReturnValue;
};

// Function Engine.Actor.Reset
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AActor::eventReset()
{
	static UFunction* uFnReset = nullptr;

	if (!uFnReset)
	{
		uFnReset = UFunction::FindFunction("Function Engine.Actor.Reset");
	}

	AActor_eventReset_Params Reset_Params;
	memset(&Reset_Params, 0, sizeof(Reset_Params));

	this->ProcessEvent(uFnReset, &Reset_Params, nullptr);
};

// Function Engine.Actor.GetPhysicsName
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)

class FString AActor::GetPhysicsName()
{
	static UFunction* uFnGetPhysicsName = nullptr;

	if (!uFnGetPhysicsName)
	{
		uFnGetPhysicsName = UFunction::FindFunction("Function Engine.Actor.GetPhysicsName");
	}

	AActor_execGetPhysicsName_Params GetPhysicsName_Params;
	memset(&GetPhysicsName_Params, 0, sizeof(GetPhysicsName_Params));

	this->ProcessEvent(uFnGetPhysicsName, &GetPhysicsName_Params, nullptr);

	return GetPhysicsName_Params.ReturnValue;
};

// Function Engine.Actor.DisplayDebug
// [0x00420102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// class AHUD*                    HUD                            (CPF_Parm)
// float                          out_YL                         (CPF_Parm | CPF_OutParm)
// float                          out_YPos                       (CPF_Parm | CPF_OutParm)

void AActor::DisplayDebug(class AHUD* HUD, float& out_YL, float& out_YPos)
{
	static UFunction* uFnDisplayDebug = nullptr;

	if (!uFnDisplayDebug)
	{
		uFnDisplayDebug = UFunction::FindFunction("Function Engine.Actor.DisplayDebug");
	}

	AActor_execDisplayDebug_Params DisplayDebug_Params;
	memset(&DisplayDebug_Params, 0, sizeof(DisplayDebug_Params));
	DisplayDebug_Params.HUD = HUD;
	memcpy_s(&DisplayDebug_Params.out_YL, sizeof(DisplayDebug_Params.out_YL), &out_YL, sizeof(out_YL));
	memcpy_s(&DisplayDebug_Params.out_YPos, sizeof(DisplayDebug_Params.out_YPos), &out_YPos, sizeof(out_YPos));

	this->ProcessEvent(uFnDisplayDebug, &DisplayDebug_Params, nullptr);

	memcpy_s(&out_YL, sizeof(out_YL), &DisplayDebug_Params.out_YL, sizeof(DisplayDebug_Params.out_YL));
	memcpy_s(&out_YPos, sizeof(out_YPos), &DisplayDebug_Params.out_YPos, sizeof(DisplayDebug_Params.out_YPos));
};

// Function Engine.Actor.GetDebugName
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)

class FString AActor::GetDebugName()
{
	static UFunction* uFnGetDebugName = nullptr;

	if (!uFnGetDebugName)
	{
		uFnGetDebugName = UFunction::FindFunction("Function Engine.Actor.GetDebugName");
	}

	AActor_execGetDebugName_Params GetDebugName_Params;
	memset(&GetDebugName_Params, 0, sizeof(GetDebugName_Params));

	this->ProcessEvent(uFnGetDebugName, &GetDebugName_Params, nullptr);

	return GetDebugName_Params.ReturnValue;
};

// Function Engine.Actor.MatchStarting
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AActor::MatchStarting()
{
	static UFunction* uFnMatchStarting = nullptr;

	if (!uFnMatchStarting)
	{
		uFnMatchStarting = UFunction::FindFunction("Function Engine.Actor.MatchStarting");
	}

	AActor_execMatchStarting_Params MatchStarting_Params;
	memset(&MatchStarting_Params, 0, sizeof(MatchStarting_Params));

	this->ProcessEvent(uFnMatchStarting, &MatchStarting_Params, nullptr);
};

// Function Engine.Actor.GetLocalString
// [0x00026002] (FUNC_Defined | FUNC_Static | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)
// int32_t                        Switch                         (CPF_OptionalParm | CPF_Parm)

class FString AActor::GetLocalString(int32_t Switch)
{
	static UFunction* uFnGetLocalString = nullptr;

	if (!uFnGetLocalString)
	{
		uFnGetLocalString = UFunction::FindFunction("Function Engine.Actor.GetLocalString");
	}

	AActor_execGetLocalString_Params GetLocalString_Params;
	memset(&GetLocalString_Params, 0, sizeof(GetLocalString_Params));
	memcpy_s(&GetLocalString_Params.Switch, sizeof(GetLocalString_Params.Switch), &Switch, sizeof(Switch));

	AActor::StaticClass()->ProcessEvent(uFnGetLocalString, &GetLocalString_Params, nullptr);

	return GetLocalString_Params.ReturnValue;
};

// Function Engine.Actor.GetHumanReadableName
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)

class FString AActor::GetHumanReadableName()
{
	static UFunction* uFnGetHumanReadableName = nullptr;

	if (!uFnGetHumanReadableName)
	{
		uFnGetHumanReadableName = UFunction::FindFunction("Function Engine.Actor.GetHumanReadableName");
	}

	AActor_execGetHumanReadableName_Params GetHumanReadableName_Params;
	memset(&GetHumanReadableName_Params, 0, sizeof(GetHumanReadableName_Params));

	this->ProcessEvent(uFnGetHumanReadableName, &GetHumanReadableName_Params, nullptr);

	return GetHumanReadableName_Params.ReturnValue;
};

// Function Engine.Actor.GetItemName
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)
// class FString                  FullName                       (CPF_Parm | CPF_NeedCtorLink)

class FString AActor::GetItemName(const class FString& FullName)
{
	static UFunction* uFnGetItemName = nullptr;

	if (!uFnGetItemName)
	{
		uFnGetItemName = UFunction::FindFunction("Function Engine.Actor.GetItemName");
	}

	AActor_execGetItemName_Params GetItemName_Params;
	memset(&GetItemName_Params, 0, sizeof(GetItemName_Params));
	memcpy_s(&GetItemName_Params.FullName, sizeof(GetItemName_Params.FullName), &FullName, sizeof(FullName));

	this->ProcessEvent(uFnGetItemName, &GetItemName_Params, nullptr);

	return GetItemName_Params.ReturnValue;
};

// Function Engine.Actor.CalcCamera
// [0x00C20902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_HasOutParms | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// float                          fDeltaTime                     (CPF_Parm)
// struct FVector                 out_CamLoc                     (CPF_Parm | CPF_OutParm)
// struct FRotator                out_CamRot                     (CPF_Parm | CPF_OutParm)
// float                          out_FOV                        (CPF_Parm | CPF_OutParm)

bool AActor::eventCalcCamera(float fDeltaTime, struct FVector& out_CamLoc, struct FRotator& out_CamRot, float& out_FOV)
{
	static UFunction* uFnCalcCamera = nullptr;

	if (!uFnCalcCamera)
	{
		uFnCalcCamera = UFunction::FindFunction("Function Engine.Actor.CalcCamera");
	}

	AActor_eventCalcCamera_Params CalcCamera_Params;
	memset(&CalcCamera_Params, 0, sizeof(CalcCamera_Params));
	memcpy_s(&CalcCamera_Params.fDeltaTime, sizeof(CalcCamera_Params.fDeltaTime), &fDeltaTime, sizeof(fDeltaTime));
	memcpy_s(&CalcCamera_Params.out_CamLoc, sizeof(CalcCamera_Params.out_CamLoc), &out_CamLoc, sizeof(out_CamLoc));
	memcpy_s(&CalcCamera_Params.out_CamRot, sizeof(CalcCamera_Params.out_CamRot), &out_CamRot, sizeof(out_CamRot));
	memcpy_s(&CalcCamera_Params.out_FOV, sizeof(CalcCamera_Params.out_FOV), &out_FOV, sizeof(out_FOV));

	this->ProcessEvent(uFnCalcCamera, &CalcCamera_Params, nullptr);

	memcpy_s(&out_CamLoc, sizeof(out_CamLoc), &CalcCamera_Params.out_CamLoc, sizeof(CalcCamera_Params.out_CamLoc));
	memcpy_s(&out_CamRot, sizeof(out_CamRot), &CalcCamera_Params.out_CamRot, sizeof(CalcCamera_Params.out_CamRot));
	memcpy_s(&out_FOV, sizeof(out_FOV), &CalcCamera_Params.out_FOV, sizeof(CalcCamera_Params.out_FOV));

	return CalcCamera_Params.ReturnValue;
};

// Function Engine.Actor.EndViewTarget
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class APlayerController*       PC                             (CPF_Parm)

void AActor::eventEndViewTarget(class APlayerController* PC)
{
	static UFunction* uFnEndViewTarget = nullptr;

	if (!uFnEndViewTarget)
	{
		uFnEndViewTarget = UFunction::FindFunction("Function Engine.Actor.EndViewTarget");
	}

	AActor_eventEndViewTarget_Params EndViewTarget_Params;
	memset(&EndViewTarget_Params, 0, sizeof(EndViewTarget_Params));
	EndViewTarget_Params.PC = PC;

	this->ProcessEvent(uFnEndViewTarget, &EndViewTarget_Params, nullptr);
};

// Function Engine.Actor.BecomeViewTarget
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class APlayerController*       PC                             (CPF_Parm)

void AActor::eventBecomeViewTarget(class APlayerController* PC)
{
	static UFunction* uFnBecomeViewTarget = nullptr;

	if (!uFnBecomeViewTarget)
	{
		uFnBecomeViewTarget = UFunction::FindFunction("Function Engine.Actor.BecomeViewTarget");
	}

	AActor_eventBecomeViewTarget_Params BecomeViewTarget_Params;
	memset(&BecomeViewTarget_Params, 0, sizeof(BecomeViewTarget_Params));
	BecomeViewTarget_Params.PC = PC;

	this->ProcessEvent(uFnBecomeViewTarget, &BecomeViewTarget_Params, nullptr);
};

// Function Engine.Actor.CheckForErrors
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AActor::CheckForErrors()
{
	static UFunction* uFnCheckForErrors = nullptr;

	if (!uFnCheckForErrors)
	{
		uFnCheckForErrors = UFunction::FindFunction("Function Engine.Actor.CheckForErrors");
	}

	AActor_execCheckForErrors_Params CheckForErrors_Params;
	memset(&CheckForErrors_Params, 0, sizeof(CheckForErrors_Params));

	this->ProcessEvent(uFnCheckForErrors, &CheckForErrors_Params, nullptr);

	return CheckForErrors_Params.ReturnValue;
};

// Function Engine.Actor.DebugFreezeGame
// [0x00024800] (FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AActor*                  ActorToLookAt                  (CPF_OptionalParm | CPF_Parm)

void AActor::eventDebugFreezeGame(class AActor* ActorToLookAt)
{
	static UFunction* uFnDebugFreezeGame = nullptr;

	if (!uFnDebugFreezeGame)
	{
		uFnDebugFreezeGame = UFunction::FindFunction("Function Engine.Actor.DebugFreezeGame");
	}

	AActor_eventDebugFreezeGame_Params DebugFreezeGame_Params;
	memset(&DebugFreezeGame_Params, 0, sizeof(DebugFreezeGame_Params));
	DebugFreezeGame_Params.ActorToLookAt = ActorToLookAt;

	this->ProcessEvent(uFnDebugFreezeGame, &DebugFreezeGame_Params, nullptr);
};

// Function Engine.Actor.GetGravityZ
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20597])
// Parameter Info:
// float                          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

float AActor::GetGravityZ()
{
	static UFunction* uFnGetGravityZ = nullptr;

	if (!uFnGetGravityZ)
	{
		uFnGetGravityZ = UFunction::FindFunction("Function Engine.Actor.GetGravityZ");
	}

	AActor_execGetGravityZ_Params GetGravityZ_Params;
	memset(&GetGravityZ_Params, 0, sizeof(GetGravityZ_Params));

	uFnGetGravityZ->iNative = 0;
	uFnGetGravityZ->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetGravityZ, &GetGravityZ_Params, nullptr);
	uFnGetGravityZ->FunctionFlags |= 0x400;
	uFnGetGravityZ->iNative = 20597;

	return GetGravityZ_Params.ReturnValue;
};

// Function Engine.Actor.CheckHitInfo
// [0x00420501] (FUNC_Final | FUNC_Simulated | FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[18058])
// Parameter Info:
// class UPrimitiveComponent*     FallBackComponent              (CPF_Parm | CPF_EditInline)
// struct FVector                 Dir                            (CPF_Parm)
// struct FTraceHitInfo           HitInfo                        (CPF_Parm | CPF_OutParm)
// struct FVector                 out_HitLocation                (CPF_Parm | CPF_OutParm)

void AActor::CheckHitInfo(class UPrimitiveComponent* FallBackComponent, const struct FVector& Dir, struct FTraceHitInfo& HitInfo, struct FVector& out_HitLocation)
{
	static UFunction* uFnCheckHitInfo = nullptr;

	if (!uFnCheckHitInfo)
	{
		uFnCheckHitInfo = UFunction::FindFunction("Function Engine.Actor.CheckHitInfo");
	}

	AActor_execCheckHitInfo_Params CheckHitInfo_Params;
	memset(&CheckHitInfo_Params, 0, sizeof(CheckHitInfo_Params));
	CheckHitInfo_Params.FallBackComponent = FallBackComponent;
	memcpy_s(&CheckHitInfo_Params.Dir, sizeof(CheckHitInfo_Params.Dir), &Dir, sizeof(Dir));
	memcpy_s(&CheckHitInfo_Params.HitInfo, sizeof(CheckHitInfo_Params.HitInfo), &HitInfo, sizeof(HitInfo));
	memcpy_s(&CheckHitInfo_Params.out_HitLocation, sizeof(CheckHitInfo_Params.out_HitLocation), &out_HitLocation, sizeof(out_HitLocation));

	uFnCheckHitInfo->iNative = 0;
	uFnCheckHitInfo->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnCheckHitInfo, &CheckHitInfo_Params, nullptr);
	uFnCheckHitInfo->FunctionFlags |= 0x400;
	uFnCheckHitInfo->iNative = 18058;

	memcpy_s(&HitInfo, sizeof(HitInfo), &CheckHitInfo_Params.HitInfo, sizeof(CheckHitInfo_Params.HitInfo));
	memcpy_s(&out_HitLocation, sizeof(out_HitLocation), &CheckHitInfo_Params.out_HitLocation, sizeof(CheckHitInfo_Params.out_HitLocation));
};

// Function Engine.Actor.TakeRadiusDamage
// [0x00824102] (FUNC_Defined | FUNC_Simulated | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// class AController*             InstigatedBy                   (CPF_Parm)
// float                          BaseDamage                     (CPF_Parm)
// float                          DamageRadius                   (CPF_Parm)
// class UDamageType*             DamageType                     (CPF_Parm)
// float                          Momentum                       (CPF_Parm)
// struct FVector                 HurtOrigin                     (CPF_Parm)
// uint32_t                       bFullDamage                    (CPF_Parm)
// class AActor*                  DamageCauser                   (CPF_Parm)
// float                          DamageFalloffExponent          (CPF_OptionalParm | CPF_Parm)

void AActor::TakeRadiusDamage(class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UDamageType* DamageType, float Momentum, const struct FVector& HurtOrigin, bool bFullDamage, class AActor* DamageCauser, float DamageFalloffExponent)
{
	static UFunction* uFnTakeRadiusDamage = nullptr;

	if (!uFnTakeRadiusDamage)
	{
		uFnTakeRadiusDamage = UFunction::FindFunction("Function Engine.Actor.TakeRadiusDamage");
	}

	AActor_execTakeRadiusDamage_Params TakeRadiusDamage_Params;
	memset(&TakeRadiusDamage_Params, 0, sizeof(TakeRadiusDamage_Params));
	TakeRadiusDamage_Params.InstigatedBy = InstigatedBy;
	memcpy_s(&TakeRadiusDamage_Params.BaseDamage, sizeof(TakeRadiusDamage_Params.BaseDamage), &BaseDamage, sizeof(BaseDamage));
	memcpy_s(&TakeRadiusDamage_Params.DamageRadius, sizeof(TakeRadiusDamage_Params.DamageRadius), &DamageRadius, sizeof(DamageRadius));
	TakeRadiusDamage_Params.DamageType = DamageType;
	memcpy_s(&TakeRadiusDamage_Params.Momentum, sizeof(TakeRadiusDamage_Params.Momentum), &Momentum, sizeof(Momentum));
	memcpy_s(&TakeRadiusDamage_Params.HurtOrigin, sizeof(TakeRadiusDamage_Params.HurtOrigin), &HurtOrigin, sizeof(HurtOrigin));
	TakeRadiusDamage_Params.bFullDamage = bFullDamage;
	TakeRadiusDamage_Params.DamageCauser = DamageCauser;
	memcpy_s(&TakeRadiusDamage_Params.DamageFalloffExponent, sizeof(TakeRadiusDamage_Params.DamageFalloffExponent), &DamageFalloffExponent, sizeof(DamageFalloffExponent));

	this->ProcessEvent(uFnTakeRadiusDamage, &TakeRadiusDamage_Params, nullptr);
};

// Function Engine.Actor.HealDamage
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        Amount                         (CPF_Parm)
// class AController*             Healer                         (CPF_Parm)
// class UDamageType*             DamageType                     (CPF_Parm)

bool AActor::eventHealDamage(int32_t Amount, class AController* Healer, class UDamageType* DamageType)
{
	static UFunction* uFnHealDamage = nullptr;

	if (!uFnHealDamage)
	{
		uFnHealDamage = UFunction::FindFunction("Function Engine.Actor.HealDamage");
	}

	AActor_eventHealDamage_Params HealDamage_Params;
	memset(&HealDamage_Params, 0, sizeof(HealDamage_Params));
	memcpy_s(&HealDamage_Params.Amount, sizeof(HealDamage_Params.Amount), &Amount, sizeof(Amount));
	HealDamage_Params.Healer = Healer;
	HealDamage_Params.DamageType = DamageType;

	this->ProcessEvent(uFnHealDamage, &HealDamage_Params, nullptr);

	return HealDamage_Params.ReturnValue;
};

// Function Engine.Actor.TakeDamage
// [0x00024C00] (FUNC_Native | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[13766])
// Parameter Info:
// int32_t                        DamageAmount                   (CPF_Parm)
// class AController*             EventInstigator                (CPF_Parm)
// struct FVector                 HitLocation                    (CPF_Parm)
// struct FVector                 Momentum                       (CPF_Parm)
// class UDamageType*             DamageType                     (CPF_Parm)
// struct FTraceHitInfo           HitInfo                        (CPF_OptionalParm | CPF_Parm)
// class AActor*                  DamageCauser                   (CPF_OptionalParm | CPF_Parm)

void AActor::eventTakeDamage(int32_t DamageAmount, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UDamageType* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser)
{
	static UFunction* uFnTakeDamage = nullptr;

	if (!uFnTakeDamage)
	{
		uFnTakeDamage = UFunction::FindFunction("Function Engine.Actor.TakeDamage");
	}

	AActor_eventTakeDamage_Params TakeDamage_Params;
	memset(&TakeDamage_Params, 0, sizeof(TakeDamage_Params));
	memcpy_s(&TakeDamage_Params.DamageAmount, sizeof(TakeDamage_Params.DamageAmount), &DamageAmount, sizeof(DamageAmount));
	TakeDamage_Params.EventInstigator = EventInstigator;
	memcpy_s(&TakeDamage_Params.HitLocation, sizeof(TakeDamage_Params.HitLocation), &HitLocation, sizeof(HitLocation));
	memcpy_s(&TakeDamage_Params.Momentum, sizeof(TakeDamage_Params.Momentum), &Momentum, sizeof(Momentum));
	TakeDamage_Params.DamageType = DamageType;
	memcpy_s(&TakeDamage_Params.HitInfo, sizeof(TakeDamage_Params.HitInfo), &HitInfo, sizeof(HitInfo));
	TakeDamage_Params.DamageCauser = DamageCauser;

	uFnTakeDamage->iNative = 0;
	uFnTakeDamage->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnTakeDamage, &TakeDamage_Params, nullptr);
	uFnTakeDamage->FunctionFlags |= 0x400;
	uFnTakeDamage->iNative = 13766;
};

// Function Engine.Actor.KilledBy
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class APawn*                   EventInstigator                (CPF_Parm)

void AActor::KilledBy(class APawn* EventInstigator)
{
	static UFunction* uFnKilledBy = nullptr;

	if (!uFnKilledBy)
	{
		uFnKilledBy = UFunction::FindFunction("Function Engine.Actor.KilledBy");
	}

	AActor_execKilledBy_Params KilledBy_Params;
	memset(&KilledBy_Params, 0, sizeof(KilledBy_Params));
	KilledBy_Params.EventInstigator = EventInstigator;

	this->ProcessEvent(uFnKilledBy, &KilledBy_Params, nullptr);
};

// Function Engine.Actor.NotifySkelControlBeyondLimit
// [0x00020900] (FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USkelControlLookAt*      LookAt                         (CPF_Parm)

void AActor::eventNotifySkelControlBeyondLimit(class USkelControlLookAt* LookAt)
{
	static UFunction* uFnNotifySkelControlBeyondLimit = nullptr;

	if (!uFnNotifySkelControlBeyondLimit)
	{
		uFnNotifySkelControlBeyondLimit = UFunction::FindFunction("Function Engine.Actor.NotifySkelControlBeyondLimit");
	}

	AActor_eventNotifySkelControlBeyondLimit_Params NotifySkelControlBeyondLimit_Params;
	memset(&NotifySkelControlBeyondLimit_Params, 0, sizeof(NotifySkelControlBeyondLimit_Params));
	NotifySkelControlBeyondLimit_Params.LookAt = LookAt;

	this->ProcessEvent(uFnNotifySkelControlBeyondLimit, &NotifySkelControlBeyondLimit_Params, nullptr);
};

// Function Engine.Actor.ConstraintBrokenNotify
// [0x00020900] (FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AActor*                  ConOwner                       (CPF_Parm)
// class URB_ConstraintSetup*     ConSetup                       (CPF_Parm)
// class URB_ConstraintInstance*  ConInstance                    (CPF_Parm)

void AActor::eventConstraintBrokenNotify(class AActor* ConOwner, class URB_ConstraintSetup* ConSetup, class URB_ConstraintInstance* ConInstance)
{
	static UFunction* uFnConstraintBrokenNotify = nullptr;

	if (!uFnConstraintBrokenNotify)
	{
		uFnConstraintBrokenNotify = UFunction::FindFunction("Function Engine.Actor.ConstraintBrokenNotify");
	}

	AActor_eventConstraintBrokenNotify_Params ConstraintBrokenNotify_Params;
	memset(&ConstraintBrokenNotify_Params, 0, sizeof(ConstraintBrokenNotify_Params));
	ConstraintBrokenNotify_Params.ConOwner = ConOwner;
	ConstraintBrokenNotify_Params.ConSetup = ConSetup;
	ConstraintBrokenNotify_Params.ConInstance = ConInstance;

	this->ProcessEvent(uFnConstraintBrokenNotify, &ConstraintBrokenNotify_Params, nullptr);
};

// Function Engine.Actor.SetInitialState
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AActor::eventSetInitialState()
{
	static UFunction* uFnSetInitialState = nullptr;

	if (!uFnSetInitialState)
	{
		uFnSetInitialState = UFunction::FindFunction("Function Engine.Actor.SetInitialState");
	}

	AActor_eventSetInitialState_Params SetInitialState_Params;
	memset(&SetInitialState_Params, 0, sizeof(SetInitialState_Params));

	this->ProcessEvent(uFnSetInitialState, &SetInitialState_Params, nullptr);
};

// Function Engine.Actor.PostBeginPlay
// [0x08020800] (FUNC_Event | FUNC_Public | FUNC_K2Override | FUNC_AllFlags)
// Parameter Info:

void AActor::eventPostBeginPlay()
{
	static UFunction* uFnPostBeginPlay = nullptr;

	if (!uFnPostBeginPlay)
	{
		uFnPostBeginPlay = UFunction::FindFunction("Function Engine.Actor.PostBeginPlay");
	}

	AActor_eventPostBeginPlay_Params PostBeginPlay_Params;
	memset(&PostBeginPlay_Params, 0, sizeof(PostBeginPlay_Params));

	this->ProcessEvent(uFnPostBeginPlay, &PostBeginPlay_Params, nullptr);
};

// Function Engine.Actor.BroadcastLocalizedTeamMessage
// [0x00024802] (FUNC_Defined | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        TeamIndex                      (CPF_Parm)
// class ULocalMessage*           InMessageClass                 (CPF_Parm)
// int32_t                        Switch                         (CPF_OptionalParm | CPF_Parm)
// class UObject*                 OptionalObject                 (CPF_OptionalParm | CPF_Parm)

void AActor::eventBroadcastLocalizedTeamMessage(int32_t TeamIndex, class ULocalMessage* InMessageClass, int32_t Switch, class UObject* OptionalObject)
{
	static UFunction* uFnBroadcastLocalizedTeamMessage = nullptr;

	if (!uFnBroadcastLocalizedTeamMessage)
	{
		uFnBroadcastLocalizedTeamMessage = UFunction::FindFunction("Function Engine.Actor.BroadcastLocalizedTeamMessage");
	}

	AActor_eventBroadcastLocalizedTeamMessage_Params BroadcastLocalizedTeamMessage_Params;
	memset(&BroadcastLocalizedTeamMessage_Params, 0, sizeof(BroadcastLocalizedTeamMessage_Params));
	memcpy_s(&BroadcastLocalizedTeamMessage_Params.TeamIndex, sizeof(BroadcastLocalizedTeamMessage_Params.TeamIndex), &TeamIndex, sizeof(TeamIndex));
	BroadcastLocalizedTeamMessage_Params.InMessageClass = InMessageClass;
	memcpy_s(&BroadcastLocalizedTeamMessage_Params.Switch, sizeof(BroadcastLocalizedTeamMessage_Params.Switch), &Switch, sizeof(Switch));
	BroadcastLocalizedTeamMessage_Params.OptionalObject = OptionalObject;

	this->ProcessEvent(uFnBroadcastLocalizedTeamMessage, &BroadcastLocalizedTeamMessage_Params, nullptr);
};

// Function Engine.Actor.BroadcastLocalizedMessage
// [0x00024802] (FUNC_Defined | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class ULocalMessage*           InMessageClass                 (CPF_Parm)
// int32_t                        Switch                         (CPF_OptionalParm | CPF_Parm)
// class UObject*                 OptionalObject                 (CPF_OptionalParm | CPF_Parm)

void AActor::eventBroadcastLocalizedMessage(class ULocalMessage* InMessageClass, int32_t Switch, class UObject* OptionalObject)
{
	static UFunction* uFnBroadcastLocalizedMessage = nullptr;

	if (!uFnBroadcastLocalizedMessage)
	{
		uFnBroadcastLocalizedMessage = UFunction::FindFunction("Function Engine.Actor.BroadcastLocalizedMessage");
	}

	AActor_eventBroadcastLocalizedMessage_Params BroadcastLocalizedMessage_Params;
	memset(&BroadcastLocalizedMessage_Params, 0, sizeof(BroadcastLocalizedMessage_Params));
	BroadcastLocalizedMessage_Params.InMessageClass = InMessageClass;
	memcpy_s(&BroadcastLocalizedMessage_Params.Switch, sizeof(BroadcastLocalizedMessage_Params.Switch), &Switch, sizeof(Switch));
	BroadcastLocalizedMessage_Params.OptionalObject = OptionalObject;

	this->ProcessEvent(uFnBroadcastLocalizedMessage, &BroadcastLocalizedMessage_Params, nullptr);
};

// Function Engine.Actor.PreBeginPlay
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AActor::eventPreBeginPlay()
{
	static UFunction* uFnPreBeginPlay = nullptr;

	if (!uFnPreBeginPlay)
	{
		uFnPreBeginPlay = UFunction::FindFunction("Function Engine.Actor.PreBeginPlay");
	}

	AActor_eventPreBeginPlay_Params PreBeginPlay_Params;
	memset(&PreBeginPlay_Params, 0, sizeof(PreBeginPlay_Params));

	this->ProcessEvent(uFnPreBeginPlay, &PreBeginPlay_Params, nullptr);
};

// Function Engine.Actor.GetALocalPlayerController
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20495])
// Parameter Info:
// class APlayerController*       ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class APlayerController* AActor::GetALocalPlayerController()
{
	static UFunction* uFnGetALocalPlayerController = nullptr;

	if (!uFnGetALocalPlayerController)
	{
		uFnGetALocalPlayerController = UFunction::FindFunction("Function Engine.Actor.GetALocalPlayerController");
	}

	AActor_execGetALocalPlayerController_Params GetALocalPlayerController_Params;
	memset(&GetALocalPlayerController_Params, 0, sizeof(GetALocalPlayerController_Params));

	uFnGetALocalPlayerController->iNative = 0;
	uFnGetALocalPlayerController->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetALocalPlayerController, &GetALocalPlayerController_Params, nullptr);
	uFnGetALocalPlayerController->FunctionFlags |= 0x400;
	uFnGetALocalPlayerController->iNative = 20495;

	return GetALocalPlayerController_Params.ReturnValue;
};

// Function Engine.Actor.LocalPlayerControllers
// [0x00420405] (FUNC_Final | FUNC_Iterator | FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[21782])
// Parameter Info:
// class APlayerController*       BaseClass                      (CPF_Parm)
// class APlayerController*       PC                             (CPF_Parm | CPF_OutParm)

void AActor::LocalPlayerControllers(class APlayerController* BaseClass, class APlayerController*& PC)
{
	static UFunction* uFnLocalPlayerControllers = nullptr;

	if (!uFnLocalPlayerControllers)
	{
		uFnLocalPlayerControllers = UFunction::FindFunction("Function Engine.Actor.LocalPlayerControllers");
	}

	AActor_execLocalPlayerControllers_Params LocalPlayerControllers_Params;
	memset(&LocalPlayerControllers_Params, 0, sizeof(LocalPlayerControllers_Params));
	LocalPlayerControllers_Params.BaseClass = BaseClass;
	LocalPlayerControllers_Params.PC = PC;

	uFnLocalPlayerControllers->iNative = 0;
	uFnLocalPlayerControllers->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnLocalPlayerControllers, &LocalPlayerControllers_Params, nullptr);
	uFnLocalPlayerControllers->FunctionFlags |= 0x400;
	uFnLocalPlayerControllers->iNative = 21782;

	PC = LocalPlayerControllers_Params.PC;
};

// Function Engine.Actor.AllOwnedComponents
// [0x00420405] (FUNC_Final | FUNC_Iterator | FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[15448])
// Parameter Info:
// class UComponent*              BaseClass                      (CPF_Parm)
// class UActorComponent*         OutComponent                   (CPF_Parm | CPF_OutParm | CPF_EditInline)

void AActor::AllOwnedComponents(class UComponent* BaseClass, class UActorComponent*& OutComponent)
{
	static UFunction* uFnAllOwnedComponents = nullptr;

	if (!uFnAllOwnedComponents)
	{
		uFnAllOwnedComponents = UFunction::FindFunction("Function Engine.Actor.AllOwnedComponents");
	}

	AActor_execAllOwnedComponents_Params AllOwnedComponents_Params;
	memset(&AllOwnedComponents_Params, 0, sizeof(AllOwnedComponents_Params));
	AllOwnedComponents_Params.BaseClass = BaseClass;
	AllOwnedComponents_Params.OutComponent = OutComponent;

	uFnAllOwnedComponents->iNative = 0;
	uFnAllOwnedComponents->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnAllOwnedComponents, &AllOwnedComponents_Params, nullptr);
	uFnAllOwnedComponents->FunctionFlags |= 0x400;
	uFnAllOwnedComponents->iNative = 15448;

	OutComponent = AllOwnedComponents_Params.OutComponent;
};

// Function Engine.Actor.ComponentList
// [0x00420405] (FUNC_Final | FUNC_Iterator | FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[18313])
// Parameter Info:
// class UActorComponent*         BaseClass                      (CPF_Parm)
// class UActorComponent*         out_Component                  (CPF_Parm | CPF_OutParm | CPF_EditInline)

void AActor::ComponentList(class UActorComponent* BaseClass, class UActorComponent*& out_Component)
{
	static UFunction* uFnComponentList = nullptr;

	if (!uFnComponentList)
	{
		uFnComponentList = UFunction::FindFunction("Function Engine.Actor.ComponentList");
	}

	AActor_execComponentList_Params ComponentList_Params;
	memset(&ComponentList_Params, 0, sizeof(ComponentList_Params));
	ComponentList_Params.BaseClass = BaseClass;
	ComponentList_Params.out_Component = out_Component;

	uFnComponentList->iNative = 0;
	uFnComponentList->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnComponentList, &ComponentList_Params, nullptr);
	uFnComponentList->FunctionFlags |= 0x400;
	uFnComponentList->iNative = 18313;

	out_Component = ComponentList_Params.out_Component;
};

// Function Engine.Actor.OverlappingActors
// [0x00424405] (FUNC_Final | FUNC_Iterator | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[23848])
// Parameter Info:
// class AActor*                  BaseClass                      (CPF_Parm)
// float                          Radius                         (CPF_Parm)
// struct FVector                 Loc                            (CPF_OptionalParm | CPF_Parm)
// uint32_t                       bIgnoreHidden                  (CPF_OptionalParm | CPF_Parm)
// class AActor*                  out_Actor                      (CPF_Parm | CPF_OutParm)

void AActor::OverlappingActors(class AActor* BaseClass, float Radius, const struct FVector& Loc, bool bIgnoreHidden, class AActor*& out_Actor)
{
	static UFunction* uFnOverlappingActors = nullptr;

	if (!uFnOverlappingActors)
	{
		uFnOverlappingActors = UFunction::FindFunction("Function Engine.Actor.OverlappingActors");
	}

	AActor_execOverlappingActors_Params OverlappingActors_Params;
	memset(&OverlappingActors_Params, 0, sizeof(OverlappingActors_Params));
	OverlappingActors_Params.BaseClass = BaseClass;
	memcpy_s(&OverlappingActors_Params.Radius, sizeof(OverlappingActors_Params.Radius), &Radius, sizeof(Radius));
	memcpy_s(&OverlappingActors_Params.Loc, sizeof(OverlappingActors_Params.Loc), &Loc, sizeof(Loc));
	OverlappingActors_Params.bIgnoreHidden = bIgnoreHidden;
	OverlappingActors_Params.out_Actor = out_Actor;

	uFnOverlappingActors->iNative = 0;
	uFnOverlappingActors->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnOverlappingActors, &OverlappingActors_Params, nullptr);
	uFnOverlappingActors->FunctionFlags |= 0x400;
	uFnOverlappingActors->iNative = 23848;

	out_Actor = OverlappingActors_Params.out_Actor;
};

// Function Engine.Actor.CollidingActors
// [0x14100424405] (FUNC_Final | FUNC_Iterator | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[18251])
// Parameter Info:
// class AActor*                  BaseClass                      (CPF_Parm)
// float                          Radius                         (CPF_Parm)
// struct FVector                 Loc                            (CPF_OptionalParm | CPF_Parm)
// uint32_t                       bUseOverlapCheck               (CPF_OptionalParm | CPF_Parm)
// class UInterface*              InterfaceClass                 (CPF_OptionalParm | CPF_Parm)
// class AActor*                  Actor                          (CPF_Parm | CPF_OutParm)
// struct FTraceHitInfo           HitInfo                        (CPF_OptionalParm | CPF_Parm | CPF_OutParm)

void AActor::CollidingActors(class AActor* BaseClass, float Radius, const struct FVector& Loc, bool bUseOverlapCheck, class UInterface* InterfaceClass, class AActor*& Actor, struct FTraceHitInfo& HitInfo)
{
	static UFunction* uFnCollidingActors = nullptr;

	if (!uFnCollidingActors)
	{
		uFnCollidingActors = UFunction::FindFunction("Function Engine.Actor.CollidingActors");
	}

	AActor_execCollidingActors_Params CollidingActors_Params;
	memset(&CollidingActors_Params, 0, sizeof(CollidingActors_Params));
	CollidingActors_Params.BaseClass = BaseClass;
	memcpy_s(&CollidingActors_Params.Radius, sizeof(CollidingActors_Params.Radius), &Radius, sizeof(Radius));
	memcpy_s(&CollidingActors_Params.Loc, sizeof(CollidingActors_Params.Loc), &Loc, sizeof(Loc));
	CollidingActors_Params.bUseOverlapCheck = bUseOverlapCheck;
	CollidingActors_Params.InterfaceClass = InterfaceClass;
	CollidingActors_Params.Actor = Actor;
	memcpy_s(&CollidingActors_Params.HitInfo, sizeof(CollidingActors_Params.HitInfo), &HitInfo, sizeof(HitInfo));

	uFnCollidingActors->iNative = 0;
	uFnCollidingActors->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnCollidingActors, &CollidingActors_Params, nullptr);
	uFnCollidingActors->FunctionFlags |= 0x400;
	uFnCollidingActors->iNative = 18251;

	Actor = CollidingActors_Params.Actor;
	memcpy_s(&HitInfo, sizeof(HitInfo), &CollidingActors_Params.HitInfo, sizeof(CollidingActors_Params.HitInfo));
};

// Function Engine.Actor.VisibleCollidingActors
// [0x13800424405] (FUNC_Final | FUNC_Iterator | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[27187])
// Parameter Info:
// class AActor*                  BaseClass                      (CPF_Parm)
// float                          Radius                         (CPF_Parm)
// struct FVector                 Loc                            (CPF_OptionalParm | CPF_Parm)
// uint32_t                       bIgnoreHidden                  (CPF_OptionalParm | CPF_Parm)
// struct FVector                 Extent                         (CPF_OptionalParm | CPF_Parm)
// uint32_t                       bTraceActors                   (CPF_OptionalParm | CPF_Parm)
// class UInterface*              InterfaceClass                 (CPF_OptionalParm | CPF_Parm)
// class AActor*                  Actor                          (CPF_Parm | CPF_OutParm)
// struct FTraceHitInfo           HitInfo                        (CPF_OptionalParm | CPF_Parm | CPF_OutParm)

void AActor::VisibleCollidingActors(class AActor* BaseClass, float Radius, const struct FVector& Loc, bool bIgnoreHidden, const struct FVector& Extent, bool bTraceActors, class UInterface* InterfaceClass, class AActor*& Actor, struct FTraceHitInfo& HitInfo)
{
	static UFunction* uFnVisibleCollidingActors = nullptr;

	if (!uFnVisibleCollidingActors)
	{
		uFnVisibleCollidingActors = UFunction::FindFunction("Function Engine.Actor.VisibleCollidingActors");
	}

	AActor_execVisibleCollidingActors_Params VisibleCollidingActors_Params;
	memset(&VisibleCollidingActors_Params, 0, sizeof(VisibleCollidingActors_Params));
	VisibleCollidingActors_Params.BaseClass = BaseClass;
	memcpy_s(&VisibleCollidingActors_Params.Radius, sizeof(VisibleCollidingActors_Params.Radius), &Radius, sizeof(Radius));
	memcpy_s(&VisibleCollidingActors_Params.Loc, sizeof(VisibleCollidingActors_Params.Loc), &Loc, sizeof(Loc));
	VisibleCollidingActors_Params.bIgnoreHidden = bIgnoreHidden;
	memcpy_s(&VisibleCollidingActors_Params.Extent, sizeof(VisibleCollidingActors_Params.Extent), &Extent, sizeof(Extent));
	VisibleCollidingActors_Params.bTraceActors = bTraceActors;
	VisibleCollidingActors_Params.InterfaceClass = InterfaceClass;
	VisibleCollidingActors_Params.Actor = Actor;
	memcpy_s(&VisibleCollidingActors_Params.HitInfo, sizeof(VisibleCollidingActors_Params.HitInfo), &HitInfo, sizeof(HitInfo));

	uFnVisibleCollidingActors->iNative = 0;
	uFnVisibleCollidingActors->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnVisibleCollidingActors, &VisibleCollidingActors_Params, nullptr);
	uFnVisibleCollidingActors->FunctionFlags |= 0x400;
	uFnVisibleCollidingActors->iNative = 27187;

	Actor = VisibleCollidingActors_Params.Actor;
	memcpy_s(&HitInfo, sizeof(HitInfo), &VisibleCollidingActors_Params.HitInfo, sizeof(VisibleCollidingActors_Params.HitInfo));
};

// Function Engine.Actor.VisibleActors
// [0x13700424405] (FUNC_Final | FUNC_Iterator | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[27186])
// Parameter Info:
// class AActor*                  BaseClass                      (CPF_Parm)
// float                          Radius                         (CPF_OptionalParm | CPF_Parm)
// struct FVector                 Loc                            (CPF_OptionalParm | CPF_Parm)
// class AActor*                  Actor                          (CPF_Parm | CPF_OutParm)

void AActor::VisibleActors(class AActor* BaseClass, float Radius, const struct FVector& Loc, class AActor*& Actor)
{
	static UFunction* uFnVisibleActors = nullptr;

	if (!uFnVisibleActors)
	{
		uFnVisibleActors = UFunction::FindFunction("Function Engine.Actor.VisibleActors");
	}

	AActor_execVisibleActors_Params VisibleActors_Params;
	memset(&VisibleActors_Params, 0, sizeof(VisibleActors_Params));
	VisibleActors_Params.BaseClass = BaseClass;
	memcpy_s(&VisibleActors_Params.Radius, sizeof(VisibleActors_Params.Radius), &Radius, sizeof(Radius));
	memcpy_s(&VisibleActors_Params.Loc, sizeof(VisibleActors_Params.Loc), &Loc, sizeof(Loc));
	VisibleActors_Params.Actor = Actor;

	uFnVisibleActors->iNative = 0;
	uFnVisibleActors->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnVisibleActors, &VisibleActors_Params, nullptr);
	uFnVisibleActors->FunctionFlags |= 0x400;
	uFnVisibleActors->iNative = 27186;

	Actor = VisibleActors_Params.Actor;
};

// Function Engine.Actor.TraceActors
// [0x13500424405] (FUNC_Final | FUNC_Iterator | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[26773])
// Parameter Info:
// class AActor*                  BaseClass                      (CPF_Parm)
// struct FVector                 End                            (CPF_Parm)
// struct FVector                 Start                          (CPF_OptionalParm | CPF_Parm)
// struct FVector                 Extent                         (CPF_OptionalParm | CPF_Parm)
// int32_t                        ExtraTraceFlags                (CPF_OptionalParm | CPF_Parm)
// class AActor*                  Actor                          (CPF_Parm | CPF_OutParm)
// struct FVector                 HitLoc                         (CPF_Parm | CPF_OutParm)
// struct FVector                 HitNorm                        (CPF_Parm | CPF_OutParm)
// struct FTraceHitInfo           HitInfo                        (CPF_OptionalParm | CPF_Parm | CPF_OutParm)

void AActor::TraceActors(class AActor* BaseClass, const struct FVector& End, const struct FVector& Start, const struct FVector& Extent, int32_t ExtraTraceFlags, class AActor*& Actor, struct FVector& HitLoc, struct FVector& HitNorm, struct FTraceHitInfo& HitInfo)
{
	static UFunction* uFnTraceActors = nullptr;

	if (!uFnTraceActors)
	{
		uFnTraceActors = UFunction::FindFunction("Function Engine.Actor.TraceActors");
	}

	AActor_execTraceActors_Params TraceActors_Params;
	memset(&TraceActors_Params, 0, sizeof(TraceActors_Params));
	TraceActors_Params.BaseClass = BaseClass;
	memcpy_s(&TraceActors_Params.End, sizeof(TraceActors_Params.End), &End, sizeof(End));
	memcpy_s(&TraceActors_Params.Start, sizeof(TraceActors_Params.Start), &Start, sizeof(Start));
	memcpy_s(&TraceActors_Params.Extent, sizeof(TraceActors_Params.Extent), &Extent, sizeof(Extent));
	memcpy_s(&TraceActors_Params.ExtraTraceFlags, sizeof(TraceActors_Params.ExtraTraceFlags), &ExtraTraceFlags, sizeof(ExtraTraceFlags));
	TraceActors_Params.Actor = Actor;
	memcpy_s(&TraceActors_Params.HitLoc, sizeof(TraceActors_Params.HitLoc), &HitLoc, sizeof(HitLoc));
	memcpy_s(&TraceActors_Params.HitNorm, sizeof(TraceActors_Params.HitNorm), &HitNorm, sizeof(HitNorm));
	memcpy_s(&TraceActors_Params.HitInfo, sizeof(TraceActors_Params.HitInfo), &HitInfo, sizeof(HitInfo));

	uFnTraceActors->iNative = 0;
	uFnTraceActors->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnTraceActors, &TraceActors_Params, nullptr);
	uFnTraceActors->FunctionFlags |= 0x400;
	uFnTraceActors->iNative = 26773;

	Actor = TraceActors_Params.Actor;
	memcpy_s(&HitLoc, sizeof(HitLoc), &TraceActors_Params.HitLoc, sizeof(TraceActors_Params.HitLoc));
	memcpy_s(&HitNorm, sizeof(HitNorm), &TraceActors_Params.HitNorm, sizeof(TraceActors_Params.HitNorm));
	memcpy_s(&HitInfo, sizeof(HitInfo), &TraceActors_Params.HitInfo, sizeof(TraceActors_Params.HitInfo));
};

// Function Engine.Actor.TouchingActors
// [0x13300420405] (FUNC_Final | FUNC_Iterator | FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[26768])
// Parameter Info:
// class AActor*                  BaseClass                      (CPF_Parm)
// class AActor*                  Actor                          (CPF_Parm | CPF_OutParm)

void AActor::TouchingActors(class AActor* BaseClass, class AActor*& Actor)
{
	static UFunction* uFnTouchingActors = nullptr;

	if (!uFnTouchingActors)
	{
		uFnTouchingActors = UFunction::FindFunction("Function Engine.Actor.TouchingActors");
	}

	AActor_execTouchingActors_Params TouchingActors_Params;
	memset(&TouchingActors_Params, 0, sizeof(TouchingActors_Params));
	TouchingActors_Params.BaseClass = BaseClass;
	TouchingActors_Params.Actor = Actor;

	uFnTouchingActors->iNative = 0;
	uFnTouchingActors->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnTouchingActors, &TouchingActors_Params, nullptr);
	uFnTouchingActors->FunctionFlags |= 0x400;
	uFnTouchingActors->iNative = 26768;

	Actor = TouchingActors_Params.Actor;
};

// Function Engine.Actor.BasedActors
// [0x13200420405] (FUNC_Final | FUNC_Iterator | FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[15911])
// Parameter Info:
// class AActor*                  BaseClass                      (CPF_Parm)
// class AActor*                  Actor                          (CPF_Parm | CPF_OutParm)

void AActor::BasedActors(class AActor* BaseClass, class AActor*& Actor)
{
	static UFunction* uFnBasedActors = nullptr;

	if (!uFnBasedActors)
	{
		uFnBasedActors = UFunction::FindFunction("Function Engine.Actor.BasedActors");
	}

	AActor_execBasedActors_Params BasedActors_Params;
	memset(&BasedActors_Params, 0, sizeof(BasedActors_Params));
	BasedActors_Params.BaseClass = BaseClass;
	BasedActors_Params.Actor = Actor;

	uFnBasedActors->iNative = 0;
	uFnBasedActors->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnBasedActors, &BasedActors_Params, nullptr);
	uFnBasedActors->FunctionFlags |= 0x400;
	uFnBasedActors->iNative = 15911;

	Actor = BasedActors_Params.Actor;
};

// Function Engine.Actor.ChildActors
// [0x13100420405] (FUNC_Final | FUNC_Iterator | FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[18077])
// Parameter Info:
// class AActor*                  BaseClass                      (CPF_Parm)
// class AActor*                  Actor                          (CPF_Parm | CPF_OutParm)

void AActor::ChildActors(class AActor* BaseClass, class AActor*& Actor)
{
	static UFunction* uFnChildActors = nullptr;

	if (!uFnChildActors)
	{
		uFnChildActors = UFunction::FindFunction("Function Engine.Actor.ChildActors");
	}

	AActor_execChildActors_Params ChildActors_Params;
	memset(&ChildActors_Params, 0, sizeof(ChildActors_Params));
	ChildActors_Params.BaseClass = BaseClass;
	ChildActors_Params.Actor = Actor;

	uFnChildActors->iNative = 0;
	uFnChildActors->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnChildActors, &ChildActors_Params, nullptr);
	uFnChildActors->FunctionFlags |= 0x400;
	uFnChildActors->iNative = 18077;

	Actor = ChildActors_Params.Actor;
};

// Function Engine.Actor.DynamicActors
// [0x13900424405] (FUNC_Final | FUNC_Iterator | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[19241])
// Parameter Info:
// class AActor*                  BaseClass                      (CPF_Parm)
// class UInterface*              InterfaceClass                 (CPF_OptionalParm | CPF_Parm)
// class AActor*                  Actor                          (CPF_Parm | CPF_OutParm)

void AActor::DynamicActors(class AActor* BaseClass, class UInterface* InterfaceClass, class AActor*& Actor)
{
	static UFunction* uFnDynamicActors = nullptr;

	if (!uFnDynamicActors)
	{
		uFnDynamicActors = UFunction::FindFunction("Function Engine.Actor.DynamicActors");
	}

	AActor_execDynamicActors_Params DynamicActors_Params;
	memset(&DynamicActors_Params, 0, sizeof(DynamicActors_Params));
	DynamicActors_Params.BaseClass = BaseClass;
	DynamicActors_Params.InterfaceClass = InterfaceClass;
	DynamicActors_Params.Actor = Actor;

	uFnDynamicActors->iNative = 0;
	uFnDynamicActors->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnDynamicActors, &DynamicActors_Params, nullptr);
	uFnDynamicActors->FunctionFlags |= 0x400;
	uFnDynamicActors->iNative = 19241;

	Actor = DynamicActors_Params.Actor;
};

// Function Engine.Actor.AllActors
// [0x13000424405] (FUNC_Final | FUNC_Iterator | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[15432])
// Parameter Info:
// class AActor*                  BaseClass                      (CPF_Parm)
// class UInterface*              InterfaceClass                 (CPF_OptionalParm | CPF_Parm)
// class AActor*                  Actor                          (CPF_Parm | CPF_OutParm)

void AActor::AllActors(class AActor* BaseClass, class UInterface* InterfaceClass, class AActor*& Actor)
{
	static UFunction* uFnAllActors = nullptr;

	if (!uFnAllActors)
	{
		uFnAllActors = UFunction::FindFunction("Function Engine.Actor.AllActors");
	}

	AActor_execAllActors_Params AllActors_Params;
	memset(&AllActors_Params, 0, sizeof(AllActors_Params));
	AllActors_Params.BaseClass = BaseClass;
	AllActors_Params.InterfaceClass = InterfaceClass;
	AllActors_Params.Actor = Actor;

	uFnAllActors->iNative = 0;
	uFnAllActors->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnAllActors, &AllActors_Params, nullptr);
	uFnAllActors->FunctionFlags |= 0x400;
	uFnAllActors->iNative = 15432;

	Actor = AllActors_Params.Actor;
};

// Function Engine.Actor.GetURLMap
// [0x22300020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20806])
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)

class FString AActor::GetURLMap()
{
	static UFunction* uFnGetURLMap = nullptr;

	if (!uFnGetURLMap)
	{
		uFnGetURLMap = UFunction::FindFunction("Function Engine.Actor.GetURLMap");
	}

	AActor_execGetURLMap_Params GetURLMap_Params;
	memset(&GetURLMap_Params, 0, sizeof(GetURLMap_Params));

	uFnGetURLMap->iNative = 0;
	uFnGetURLMap->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetURLMap, &GetURLMap_Params, nullptr);
	uFnGetURLMap->FunctionFlags |= 0x400;
	uFnGetURLMap->iNative = 20806;

	return GetURLMap_Params.ReturnValue;
};

// Function Engine.Actor.PostTeleport
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class ATeleporter*             OutTeleporter                  (CPF_Parm)

void AActor::PostTeleport(class ATeleporter* OutTeleporter)
{
	static UFunction* uFnPostTeleport = nullptr;

	if (!uFnPostTeleport)
	{
		uFnPostTeleport = UFunction::FindFunction("Function Engine.Actor.PostTeleport");
	}

	AActor_execPostTeleport_Params PostTeleport_Params;
	memset(&PostTeleport_Params, 0, sizeof(PostTeleport_Params));
	PostTeleport_Params.OutTeleporter = OutTeleporter;

	this->ProcessEvent(uFnPostTeleport, &PostTeleport_Params, nullptr);
};

// Function Engine.Actor.PreTeleport
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class ATeleporter*             InTeleporter                   (CPF_Parm)

bool AActor::eventPreTeleport(class ATeleporter* InTeleporter)
{
	static UFunction* uFnPreTeleport = nullptr;

	if (!uFnPreTeleport)
	{
		uFnPreTeleport = UFunction::FindFunction("Function Engine.Actor.PreTeleport");
	}

	AActor_eventPreTeleport_Params PreTeleport_Params;
	memset(&PreTeleport_Params, 0, sizeof(PreTeleport_Params));
	PreTeleport_Params.InTeleporter = InTeleporter;

	this->ProcessEvent(uFnPreTeleport, &PreTeleport_Params, nullptr);

	return PreTeleport_Params.ReturnValue;
};

// Function Engine.Actor.CalculateMinSpeedTrajectory
// [0x00424401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[17891])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FVector                 End                            (CPF_Parm)
// struct FVector                 Start                          (CPF_Parm)
// float                          MaxTossSpeed                   (CPF_Parm)
// float                          MinTossSpeed                   (CPF_Parm)
// struct FVector                 CollisionSize                  (CPF_OptionalParm | CPF_Parm)
// float                          TerminalVelocity               (CPF_OptionalParm | CPF_Parm)
// float                          GravityZ                       (CPF_OptionalParm | CPF_Parm)
// uint32_t                       bOnlyTraceUp                   (CPF_OptionalParm | CPF_Parm)
// struct FVector                 out_Velocity                   (CPF_Parm | CPF_OutParm)

bool AActor::CalculateMinSpeedTrajectory(const struct FVector& End, const struct FVector& Start, float MaxTossSpeed, float MinTossSpeed, const struct FVector& CollisionSize, float TerminalVelocity, float GravityZ, bool bOnlyTraceUp, struct FVector& out_Velocity)
{
	static UFunction* uFnCalculateMinSpeedTrajectory = nullptr;

	if (!uFnCalculateMinSpeedTrajectory)
	{
		uFnCalculateMinSpeedTrajectory = UFunction::FindFunction("Function Engine.Actor.CalculateMinSpeedTrajectory");
	}

	AActor_execCalculateMinSpeedTrajectory_Params CalculateMinSpeedTrajectory_Params;
	memset(&CalculateMinSpeedTrajectory_Params, 0, sizeof(CalculateMinSpeedTrajectory_Params));
	memcpy_s(&CalculateMinSpeedTrajectory_Params.End, sizeof(CalculateMinSpeedTrajectory_Params.End), &End, sizeof(End));
	memcpy_s(&CalculateMinSpeedTrajectory_Params.Start, sizeof(CalculateMinSpeedTrajectory_Params.Start), &Start, sizeof(Start));
	memcpy_s(&CalculateMinSpeedTrajectory_Params.MaxTossSpeed, sizeof(CalculateMinSpeedTrajectory_Params.MaxTossSpeed), &MaxTossSpeed, sizeof(MaxTossSpeed));
	memcpy_s(&CalculateMinSpeedTrajectory_Params.MinTossSpeed, sizeof(CalculateMinSpeedTrajectory_Params.MinTossSpeed), &MinTossSpeed, sizeof(MinTossSpeed));
	memcpy_s(&CalculateMinSpeedTrajectory_Params.CollisionSize, sizeof(CalculateMinSpeedTrajectory_Params.CollisionSize), &CollisionSize, sizeof(CollisionSize));
	memcpy_s(&CalculateMinSpeedTrajectory_Params.TerminalVelocity, sizeof(CalculateMinSpeedTrajectory_Params.TerminalVelocity), &TerminalVelocity, sizeof(TerminalVelocity));
	memcpy_s(&CalculateMinSpeedTrajectory_Params.GravityZ, sizeof(CalculateMinSpeedTrajectory_Params.GravityZ), &GravityZ, sizeof(GravityZ));
	CalculateMinSpeedTrajectory_Params.bOnlyTraceUp = bOnlyTraceUp;
	memcpy_s(&CalculateMinSpeedTrajectory_Params.out_Velocity, sizeof(CalculateMinSpeedTrajectory_Params.out_Velocity), &out_Velocity, sizeof(out_Velocity));

	uFnCalculateMinSpeedTrajectory->iNative = 0;
	uFnCalculateMinSpeedTrajectory->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnCalculateMinSpeedTrajectory, &CalculateMinSpeedTrajectory_Params, nullptr);
	uFnCalculateMinSpeedTrajectory->FunctionFlags |= 0x400;
	uFnCalculateMinSpeedTrajectory->iNative = 17891;

	memcpy_s(&out_Velocity, sizeof(out_Velocity), &CalculateMinSpeedTrajectory_Params.out_Velocity, sizeof(CalculateMinSpeedTrajectory_Params.out_Velocity));

	return CalculateMinSpeedTrajectory_Params.ReturnValue;
};

// Function Engine.Actor.SuggestTossVelocity
// [0x00424401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[26391])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FVector                 Destination                    (CPF_Parm)
// struct FVector                 Start                          (CPF_Parm)
// float                          TossSpeed                      (CPF_Parm)
// float                          BaseTossZ                      (CPF_OptionalParm | CPF_Parm)
// float                          DesiredZPct                    (CPF_OptionalParm | CPF_Parm)
// struct FVector                 CollisionSize                  (CPF_OptionalParm | CPF_Parm)
// float                          TerminalVelocity               (CPF_OptionalParm | CPF_Parm)
// float                          OverrideGravityZ               (CPF_OptionalParm | CPF_Parm)
// uint32_t                       bOnlyTraceUp                   (CPF_OptionalParm | CPF_Parm)
// struct FVector                 TossVelocity                   (CPF_Parm | CPF_OutParm)

bool AActor::SuggestTossVelocity(const struct FVector& Destination, const struct FVector& Start, float TossSpeed, float BaseTossZ, float DesiredZPct, const struct FVector& CollisionSize, float TerminalVelocity, float OverrideGravityZ, bool bOnlyTraceUp, struct FVector& TossVelocity)
{
	static UFunction* uFnSuggestTossVelocity = nullptr;

	if (!uFnSuggestTossVelocity)
	{
		uFnSuggestTossVelocity = UFunction::FindFunction("Function Engine.Actor.SuggestTossVelocity");
	}

	AActor_execSuggestTossVelocity_Params SuggestTossVelocity_Params;
	memset(&SuggestTossVelocity_Params, 0, sizeof(SuggestTossVelocity_Params));
	memcpy_s(&SuggestTossVelocity_Params.Destination, sizeof(SuggestTossVelocity_Params.Destination), &Destination, sizeof(Destination));
	memcpy_s(&SuggestTossVelocity_Params.Start, sizeof(SuggestTossVelocity_Params.Start), &Start, sizeof(Start));
	memcpy_s(&SuggestTossVelocity_Params.TossSpeed, sizeof(SuggestTossVelocity_Params.TossSpeed), &TossSpeed, sizeof(TossSpeed));
	memcpy_s(&SuggestTossVelocity_Params.BaseTossZ, sizeof(SuggestTossVelocity_Params.BaseTossZ), &BaseTossZ, sizeof(BaseTossZ));
	memcpy_s(&SuggestTossVelocity_Params.DesiredZPct, sizeof(SuggestTossVelocity_Params.DesiredZPct), &DesiredZPct, sizeof(DesiredZPct));
	memcpy_s(&SuggestTossVelocity_Params.CollisionSize, sizeof(SuggestTossVelocity_Params.CollisionSize), &CollisionSize, sizeof(CollisionSize));
	memcpy_s(&SuggestTossVelocity_Params.TerminalVelocity, sizeof(SuggestTossVelocity_Params.TerminalVelocity), &TerminalVelocity, sizeof(TerminalVelocity));
	memcpy_s(&SuggestTossVelocity_Params.OverrideGravityZ, sizeof(SuggestTossVelocity_Params.OverrideGravityZ), &OverrideGravityZ, sizeof(OverrideGravityZ));
	SuggestTossVelocity_Params.bOnlyTraceUp = bOnlyTraceUp;
	memcpy_s(&SuggestTossVelocity_Params.TossVelocity, sizeof(SuggestTossVelocity_Params.TossVelocity), &TossVelocity, sizeof(TossVelocity));

	uFnSuggestTossVelocity->iNative = 0;
	uFnSuggestTossVelocity->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSuggestTossVelocity, &SuggestTossVelocity_Params, nullptr);
	uFnSuggestTossVelocity->FunctionFlags |= 0x400;
	uFnSuggestTossVelocity->iNative = 26391;

	memcpy_s(&TossVelocity, sizeof(TossVelocity), &SuggestTossVelocity_Params.TossVelocity, sizeof(SuggestTossVelocity_Params.TossVelocity));

	return SuggestTossVelocity_Params.ReturnValue;
};

// Function Engine.Actor.PlayerCanSeeMe
// [0x21400020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[24285])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AActor::PlayerCanSeeMe()
{
	static UFunction* uFnPlayerCanSeeMe = nullptr;

	if (!uFnPlayerCanSeeMe)
	{
		uFnPlayerCanSeeMe = UFunction::FindFunction("Function Engine.Actor.PlayerCanSeeMe");
	}

	AActor_execPlayerCanSeeMe_Params PlayerCanSeeMe_Params;
	memset(&PlayerCanSeeMe_Params, 0, sizeof(PlayerCanSeeMe_Params));

	uFnPlayerCanSeeMe->iNative = 0;
	uFnPlayerCanSeeMe->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnPlayerCanSeeMe, &PlayerCanSeeMe_Params, nullptr);
	uFnPlayerCanSeeMe->FunctionFlags |= 0x400;
	uFnPlayerCanSeeMe->iNative = 24285;

	return PlayerCanSeeMe_Params.ReturnValue;
};

// Function Engine.Actor.ActivateOcclusion
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[15066])
// Parameter Info:
// uint32_t                       bInActivate                    (CPF_Parm)

void AActor::ActivateOcclusion(bool bInActivate)
{
	static UFunction* uFnActivateOcclusion = nullptr;

	if (!uFnActivateOcclusion)
	{
		uFnActivateOcclusion = UFunction::FindFunction("Function Engine.Actor.ActivateOcclusion");
	}

	AActor_execActivateOcclusion_Params ActivateOcclusion_Params;
	memset(&ActivateOcclusion_Params, 0, sizeof(ActivateOcclusion_Params));
	ActivateOcclusion_Params.bInActivate = bInActivate;

	uFnActivateOcclusion->iNative = 0;
	uFnActivateOcclusion->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnActivateOcclusion, &ActivateOcclusion_Params, nullptr);
	uFnActivateOcclusion->FunctionFlags |= 0x400;
	uFnActivateOcclusion->iNative = 15066;
};

// Function Engine.Actor.PostTrigger
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[24421])
// Parameter Info:
// class FName                    InTrigger                      (CPF_Parm)

void AActor::PostTrigger(const class FName& InTrigger)
{
	static UFunction* uFnPostTrigger = nullptr;

	if (!uFnPostTrigger)
	{
		uFnPostTrigger = UFunction::FindFunction("Function Engine.Actor.PostTrigger");
	}

	AActor_execPostTrigger_Params PostTrigger_Params;
	memset(&PostTrigger_Params, 0, sizeof(PostTrigger_Params));
	memcpy_s(&PostTrigger_Params.InTrigger, sizeof(PostTrigger_Params.InTrigger), &InTrigger, sizeof(InTrigger));

	uFnPostTrigger->iNative = 0;
	uFnPostTrigger->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnPostTrigger, &PostTrigger_Params, nullptr);
	uFnPostTrigger->FunctionFlags |= 0x400;
	uFnPostTrigger->iNative = 24421;
};

// Function Engine.Actor.SetSwitch
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25809])
// Parameter Info:
// class FName                    InSwitchGroup                  (CPF_Parm)
// class FName                    InSwitch                       (CPF_Parm)

void AActor::SetSwitch(const class FName& InSwitchGroup, const class FName& InSwitch)
{
	static UFunction* uFnSetSwitch = nullptr;

	if (!uFnSetSwitch)
	{
		uFnSetSwitch = UFunction::FindFunction("Function Engine.Actor.SetSwitch");
	}

	AActor_execSetSwitch_Params SetSwitch_Params;
	memset(&SetSwitch_Params, 0, sizeof(SetSwitch_Params));
	memcpy_s(&SetSwitch_Params.InSwitchGroup, sizeof(SetSwitch_Params.InSwitchGroup), &InSwitchGroup, sizeof(InSwitchGroup));
	memcpy_s(&SetSwitch_Params.InSwitch, sizeof(SetSwitch_Params.InSwitch), &InSwitch, sizeof(InSwitch));

	uFnSetSwitch->iNative = 0;
	uFnSetSwitch->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetSwitch, &SetSwitch_Params, nullptr);
	uFnSetSwitch->FunctionFlags |= 0x400;
	uFnSetSwitch->iNative = 25809;
};

// Function Engine.Actor.SetState
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25801])
// Parameter Info:
// class FName                    InStateGroup                   (CPF_Parm)
// class FName                    InState                        (CPF_Parm)

void AActor::SetState(const class FName& InStateGroup, const class FName& InState)
{
	static UFunction* uFnSetState = nullptr;

	if (!uFnSetState)
	{
		uFnSetState = UFunction::FindFunction("Function Engine.Actor.SetState");
	}

	AActor_execSetState_Params SetState_Params;
	memset(&SetState_Params, 0, sizeof(SetState_Params));
	memcpy_s(&SetState_Params.InStateGroup, sizeof(SetState_Params.InStateGroup), &InStateGroup, sizeof(InStateGroup));
	memcpy_s(&SetState_Params.InState, sizeof(SetState_Params.InState), &InState, sizeof(InState));

	uFnSetState->iNative = 0;
	uFnSetState->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetState, &SetState_Params, nullptr);
	uFnSetState->FunctionFlags |= 0x400;
	uFnSetState->iNative = 25801;
};

// Function Engine.Actor.SetRTPCValue
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25773])
// Parameter Info:
// class FName                    InRTPC                         (CPF_Parm)
// float                          targetvalue                    (CPF_Parm)

void AActor::SetRTPCValue(const class FName& InRTPC, float targetvalue)
{
	static UFunction* uFnSetRTPCValue = nullptr;

	if (!uFnSetRTPCValue)
	{
		uFnSetRTPCValue = UFunction::FindFunction("Function Engine.Actor.SetRTPCValue");
	}

	AActor_execSetRTPCValue_Params SetRTPCValue_Params;
	memset(&SetRTPCValue_Params, 0, sizeof(SetRTPCValue_Params));
	memcpy_s(&SetRTPCValue_Params.InRTPC, sizeof(SetRTPCValue_Params.InRTPC), &InRTPC, sizeof(InRTPC));
	memcpy_s(&SetRTPCValue_Params.targetvalue, sizeof(SetRTPCValue_Params.targetvalue), &targetvalue, sizeof(targetvalue));

	uFnSetRTPCValue->iNative = 0;
	uFnSetRTPCValue->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetRTPCValue, &SetRTPCValue_Params, nullptr);
	uFnSetRTPCValue->FunctionFlags |= 0x400;
	uFnSetRTPCValue->iNative = 25773;
};

// Function Engine.Actor.PostAkEvent
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[24411])
// Parameter Info:
// class UAkEvent*                InAkEvent                      (CPF_Parm)

void AActor::PostAkEvent(class UAkEvent* InAkEvent)
{
	static UFunction* uFnPostAkEvent = nullptr;

	if (!uFnPostAkEvent)
	{
		uFnPostAkEvent = UFunction::FindFunction("Function Engine.Actor.PostAkEvent");
	}

	AActor_execPostAkEvent_Params PostAkEvent_Params;
	memset(&PostAkEvent_Params, 0, sizeof(PostAkEvent_Params));
	PostAkEvent_Params.InAkEvent = InAkEvent;

	uFnPostAkEvent->iNative = 0;
	uFnPostAkEvent->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnPostAkEvent, &PostAkEvent_Params, nullptr);
	uFnPostAkEvent->FunctionFlags |= 0x400;
	uFnPostAkEvent->iNative = 24411;
};

// Function Engine.Actor.ResetTimerTimeDilation
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[25160])
// Parameter Info:
// class FName                    TimerName                      (CPF_Const | CPF_Parm)
// class UObject*                 inObj                          (CPF_OptionalParm | CPF_Parm)

void AActor::ResetTimerTimeDilation(const class FName& TimerName, class UObject* inObj)
{
	static UFunction* uFnResetTimerTimeDilation = nullptr;

	if (!uFnResetTimerTimeDilation)
	{
		uFnResetTimerTimeDilation = UFunction::FindFunction("Function Engine.Actor.ResetTimerTimeDilation");
	}

	AActor_execResetTimerTimeDilation_Params ResetTimerTimeDilation_Params;
	memset(&ResetTimerTimeDilation_Params, 0, sizeof(ResetTimerTimeDilation_Params));
	memcpy_s(&ResetTimerTimeDilation_Params.TimerName, sizeof(ResetTimerTimeDilation_Params.TimerName), &TimerName, sizeof(TimerName));
	ResetTimerTimeDilation_Params.inObj = inObj;

	uFnResetTimerTimeDilation->iNative = 0;
	uFnResetTimerTimeDilation->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnResetTimerTimeDilation, &ResetTimerTimeDilation_Params, nullptr);
	uFnResetTimerTimeDilation->FunctionFlags |= 0x400;
	uFnResetTimerTimeDilation->iNative = 25160;
};

// Function Engine.Actor.ModifyTimerTimeDilation
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[22941])
// Parameter Info:
// class FName                    TimerName                      (CPF_Const | CPF_Parm)
// float                          InTimerTimeDilation            (CPF_Const | CPF_Parm)
// class UObject*                 inObj                          (CPF_OptionalParm | CPF_Parm)

void AActor::ModifyTimerTimeDilation(const class FName& TimerName, float InTimerTimeDilation, class UObject* inObj)
{
	static UFunction* uFnModifyTimerTimeDilation = nullptr;

	if (!uFnModifyTimerTimeDilation)
	{
		uFnModifyTimerTimeDilation = UFunction::FindFunction("Function Engine.Actor.ModifyTimerTimeDilation");
	}

	AActor_execModifyTimerTimeDilation_Params ModifyTimerTimeDilation_Params;
	memset(&ModifyTimerTimeDilation_Params, 0, sizeof(ModifyTimerTimeDilation_Params));
	memcpy_s(&ModifyTimerTimeDilation_Params.TimerName, sizeof(ModifyTimerTimeDilation_Params.TimerName), &TimerName, sizeof(TimerName));
	memcpy_s(&ModifyTimerTimeDilation_Params.InTimerTimeDilation, sizeof(ModifyTimerTimeDilation_Params.InTimerTimeDilation), &InTimerTimeDilation, sizeof(InTimerTimeDilation));
	ModifyTimerTimeDilation_Params.inObj = inObj;

	uFnModifyTimerTimeDilation->iNative = 0;
	uFnModifyTimerTimeDilation->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnModifyTimerTimeDilation, &ModifyTimerTimeDilation_Params, nullptr);
	uFnModifyTimerTimeDilation->FunctionFlags |= 0x400;
	uFnModifyTimerTimeDilation->iNative = 22941;
};

// Function Engine.Actor.GetTimerRate
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[20788])
// Parameter Info:
// float                          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    TimerFuncName                  (CPF_OptionalParm | CPF_Parm)
// class UObject*                 inObj                          (CPF_OptionalParm | CPF_Parm)

float AActor::GetTimerRate(const class FName& TimerFuncName, class UObject* inObj)
{
	static UFunction* uFnGetTimerRate = nullptr;

	if (!uFnGetTimerRate)
	{
		uFnGetTimerRate = UFunction::FindFunction("Function Engine.Actor.GetTimerRate");
	}

	AActor_execGetTimerRate_Params GetTimerRate_Params;
	memset(&GetTimerRate_Params, 0, sizeof(GetTimerRate_Params));
	memcpy_s(&GetTimerRate_Params.TimerFuncName, sizeof(GetTimerRate_Params.TimerFuncName), &TimerFuncName, sizeof(TimerFuncName));
	GetTimerRate_Params.inObj = inObj;

	uFnGetTimerRate->iNative = 0;
	uFnGetTimerRate->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetTimerRate, &GetTimerRate_Params, nullptr);
	uFnGetTimerRate->FunctionFlags |= 0x400;
	uFnGetTimerRate->iNative = 20788;

	return GetTimerRate_Params.ReturnValue;
};

// Function Engine.Actor.GetTimerCount
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[20787])
// Parameter Info:
// float                          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    inTimerFunc                    (CPF_OptionalParm | CPF_Parm)
// class UObject*                 inObj                          (CPF_OptionalParm | CPF_Parm)

float AActor::GetTimerCount(const class FName& inTimerFunc, class UObject* inObj)
{
	static UFunction* uFnGetTimerCount = nullptr;

	if (!uFnGetTimerCount)
	{
		uFnGetTimerCount = UFunction::FindFunction("Function Engine.Actor.GetTimerCount");
	}

	AActor_execGetTimerCount_Params GetTimerCount_Params;
	memset(&GetTimerCount_Params, 0, sizeof(GetTimerCount_Params));
	memcpy_s(&GetTimerCount_Params.inTimerFunc, sizeof(GetTimerCount_Params.inTimerFunc), &inTimerFunc, sizeof(inTimerFunc));
	GetTimerCount_Params.inObj = inObj;

	uFnGetTimerCount->iNative = 0;
	uFnGetTimerCount->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetTimerCount, &GetTimerCount_Params, nullptr);
	uFnGetTimerCount->FunctionFlags |= 0x400;
	uFnGetTimerCount->iNative = 20787;

	return GetTimerCount_Params.ReturnValue;
};

// Function Engine.Actor.IsTimerActive
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[21427])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    inTimerFunc                    (CPF_OptionalParm | CPF_Parm)
// class UObject*                 inObj                          (CPF_OptionalParm | CPF_Parm)

bool AActor::IsTimerActive(const class FName& inTimerFunc, class UObject* inObj)
{
	static UFunction* uFnIsTimerActive = nullptr;

	if (!uFnIsTimerActive)
	{
		uFnIsTimerActive = UFunction::FindFunction("Function Engine.Actor.IsTimerActive");
	}

	AActor_execIsTimerActive_Params IsTimerActive_Params;
	memset(&IsTimerActive_Params, 0, sizeof(IsTimerActive_Params));
	memcpy_s(&IsTimerActive_Params.inTimerFunc, sizeof(IsTimerActive_Params.inTimerFunc), &inTimerFunc, sizeof(inTimerFunc));
	IsTimerActive_Params.inObj = inObj;

	uFnIsTimerActive->iNative = 0;
	uFnIsTimerActive->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnIsTimerActive, &IsTimerActive_Params, nullptr);
	uFnIsTimerActive->FunctionFlags |= 0x400;
	uFnIsTimerActive->iNative = 21427;

	return IsTimerActive_Params.ReturnValue;
};

// Function Engine.Actor.PauseTimer
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[24015])
// Parameter Info:
// uint32_t                       bPause                         (CPF_Parm)
// class FName                    inTimerFunc                    (CPF_OptionalParm | CPF_Parm)
// class UObject*                 inObj                          (CPF_OptionalParm | CPF_Parm)

void AActor::PauseTimer(bool bPause, const class FName& inTimerFunc, class UObject* inObj)
{
	static UFunction* uFnPauseTimer = nullptr;

	if (!uFnPauseTimer)
	{
		uFnPauseTimer = UFunction::FindFunction("Function Engine.Actor.PauseTimer");
	}

	AActor_execPauseTimer_Params PauseTimer_Params;
	memset(&PauseTimer_Params, 0, sizeof(PauseTimer_Params));
	PauseTimer_Params.bPause = bPause;
	memcpy_s(&PauseTimer_Params.inTimerFunc, sizeof(PauseTimer_Params.inTimerFunc), &inTimerFunc, sizeof(inTimerFunc));
	PauseTimer_Params.inObj = inObj;

	uFnPauseTimer->iNative = 0;
	uFnPauseTimer->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnPauseTimer, &PauseTimer_Params, nullptr);
	uFnPauseTimer->FunctionFlags |= 0x400;
	uFnPauseTimer->iNative = 24015;
};

// Function Engine.Actor.ClearAllTimers
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[18106])
// Parameter Info:
// class UObject*                 inObj                          (CPF_OptionalParm | CPF_Parm)

void AActor::ClearAllTimers(class UObject* inObj)
{
	static UFunction* uFnClearAllTimers = nullptr;

	if (!uFnClearAllTimers)
	{
		uFnClearAllTimers = UFunction::FindFunction("Function Engine.Actor.ClearAllTimers");
	}

	AActor_execClearAllTimers_Params ClearAllTimers_Params;
	memset(&ClearAllTimers_Params, 0, sizeof(ClearAllTimers_Params));
	ClearAllTimers_Params.inObj = inObj;

	uFnClearAllTimers->iNative = 0;
	uFnClearAllTimers->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnClearAllTimers, &ClearAllTimers_Params, nullptr);
	uFnClearAllTimers->FunctionFlags |= 0x400;
	uFnClearAllTimers->iNative = 18106;
};

// Function Engine.Actor.ClearTimer
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[18172])
// Parameter Info:
// class FName                    inTimerFunc                    (CPF_OptionalParm | CPF_Parm)
// class UObject*                 inObj                          (CPF_OptionalParm | CPF_Parm)

void AActor::ClearTimer(const class FName& inTimerFunc, class UObject* inObj)
{
	static UFunction* uFnClearTimer = nullptr;

	if (!uFnClearTimer)
	{
		uFnClearTimer = UFunction::FindFunction("Function Engine.Actor.ClearTimer");
	}

	AActor_execClearTimer_Params ClearTimer_Params;
	memset(&ClearTimer_Params, 0, sizeof(ClearTimer_Params));
	memcpy_s(&ClearTimer_Params.inTimerFunc, sizeof(ClearTimer_Params.inTimerFunc), &inTimerFunc, sizeof(inTimerFunc));
	ClearTimer_Params.inObj = inObj;

	uFnClearTimer->iNative = 0;
	uFnClearTimer->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnClearTimer, &ClearTimer_Params, nullptr);
	uFnClearTimer->FunctionFlags |= 0x400;
	uFnClearTimer->iNative = 18172;
};

// Function Engine.Actor.SetTimer
// [0x11800024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[25817])
// Parameter Info:
// float                          InRate                         (CPF_Parm)
// uint32_t                       inbLoop                        (CPF_OptionalParm | CPF_Parm)
// class FName                    inTimerFunc                    (CPF_OptionalParm | CPF_Parm)
// class UObject*                 inObj                          (CPF_OptionalParm | CPF_Parm)

void AActor::SetTimer(float InRate, bool inbLoop, const class FName& inTimerFunc, class UObject* inObj)
{
	static UFunction* uFnSetTimer = nullptr;

	if (!uFnSetTimer)
	{
		uFnSetTimer = UFunction::FindFunction("Function Engine.Actor.SetTimer");
	}

	AActor_execSetTimer_Params SetTimer_Params;
	memset(&SetTimer_Params, 0, sizeof(SetTimer_Params));
	memcpy_s(&SetTimer_Params.InRate, sizeof(SetTimer_Params.InRate), &InRate, sizeof(InRate));
	SetTimer_Params.inbLoop = inbLoop;
	memcpy_s(&SetTimer_Params.inTimerFunc, sizeof(SetTimer_Params.inTimerFunc), &inTimerFunc, sizeof(inTimerFunc));
	SetTimer_Params.inObj = inObj;

	uFnSetTimer->iNative = 0;
	uFnSetTimer->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetTimer, &SetTimer_Params, nullptr);
	uFnSetTimer->FunctionFlags |= 0x400;
	uFnSetTimer->iNative = 25817;
};

// Function Engine.Actor.TornOff
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AActor::eventTornOff()
{
	static UFunction* uFnTornOff = nullptr;

	if (!uFnTornOff)
	{
		uFnTornOff = UFunction::FindFunction("Function Engine.Actor.TornOff");
	}

	AActor_eventTornOff_Params TornOff_Params;
	memset(&TornOff_Params, 0, sizeof(TornOff_Params));

	this->ProcessEvent(uFnTornOff, &TornOff_Params, nullptr);
};

// Function Engine.Actor.Destroy
// [0x11704020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_K2Call | FUNC_AllFlags) (iNative[18920])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AActor::Destroy()
{
	static UFunction* uFnDestroy = nullptr;

	if (!uFnDestroy)
	{
		uFnDestroy = UFunction::FindFunction("Function Engine.Actor.Destroy");
	}

	AActor_execDestroy_Params Destroy_Params;
	memset(&Destroy_Params, 0, sizeof(Destroy_Params));

	uFnDestroy->iNative = 0;
	uFnDestroy->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnDestroy, &Destroy_Params, nullptr);
	uFnDestroy->FunctionFlags |= 0x400;
	uFnDestroy->iNative = 18920;

	return Destroy_Params.ReturnValue;
};

// Function Engine.Actor.Spawn
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[730])
// Parameter Info:
// class AActor*                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_CoerceParm)
// class AActor*                  SpawnClass                     (CPF_Parm)
// class AActor*                  SpawnOwner                     (CPF_OptionalParm | CPF_Parm)
// class FName                    SpawnTag                       (CPF_OptionalParm | CPF_Parm)
// struct FVector                 SpawnLocation                  (CPF_OptionalParm | CPF_Parm)
// struct FRotator                SpawnRotation                  (CPF_OptionalParm | CPF_Parm)
// class AActor*                  ActorTemplate                  (CPF_OptionalParm | CPF_Parm)
// uint32_t                       bNoCollisionFail               (CPF_OptionalParm | CPF_Parm)

class AActor* AActor::Spawn(class AActor* SpawnClass, class AActor* SpawnOwner, const class FName& SpawnTag, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation, class AActor* ActorTemplate, bool bNoCollisionFail)
{
	static UFunction* uFnSpawn = nullptr;

	if (!uFnSpawn)
	{
		uFnSpawn = UFunction::FindFunction("Function Engine.Actor.Spawn");
	}

	AActor_execSpawn_Params Spawn_Params;
	memset(&Spawn_Params, 0, sizeof(Spawn_Params));
	Spawn_Params.SpawnClass = SpawnClass;
	Spawn_Params.SpawnOwner = SpawnOwner;
	memcpy_s(&Spawn_Params.SpawnTag, sizeof(Spawn_Params.SpawnTag), &SpawnTag, sizeof(SpawnTag));
	memcpy_s(&Spawn_Params.SpawnLocation, sizeof(Spawn_Params.SpawnLocation), &SpawnLocation, sizeof(SpawnLocation));
	memcpy_s(&Spawn_Params.SpawnRotation, sizeof(Spawn_Params.SpawnRotation), &SpawnRotation, sizeof(SpawnRotation));
	Spawn_Params.ActorTemplate = ActorTemplate;
	Spawn_Params.bNoCollisionFail = bNoCollisionFail;

	uFnSpawn->iNative = 0;
	uFnSpawn->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSpawn, &Spawn_Params, nullptr);
	uFnSpawn->FunctionFlags |= 0x400;
	uFnSpawn->iNative = 730;

	return Spawn_Params.ReturnValue;
};

// Function Engine.Actor.GetBoundingCylinder
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20520])
// Parameter Info:
// float                          CollisionRadius                (CPF_Parm | CPF_OutParm)
// float                          CollisionHeight                (CPF_Parm | CPF_OutParm)

void AActor::GetBoundingCylinder(float& CollisionRadius, float& CollisionHeight)
{
	static UFunction* uFnGetBoundingCylinder = nullptr;

	if (!uFnGetBoundingCylinder)
	{
		uFnGetBoundingCylinder = UFunction::FindFunction("Function Engine.Actor.GetBoundingCylinder");
	}

	AActor_execGetBoundingCylinder_Params GetBoundingCylinder_Params;
	memset(&GetBoundingCylinder_Params, 0, sizeof(GetBoundingCylinder_Params));
	memcpy_s(&GetBoundingCylinder_Params.CollisionRadius, sizeof(GetBoundingCylinder_Params.CollisionRadius), &CollisionRadius, sizeof(CollisionRadius));
	memcpy_s(&GetBoundingCylinder_Params.CollisionHeight, sizeof(GetBoundingCylinder_Params.CollisionHeight), &CollisionHeight, sizeof(CollisionHeight));

	uFnGetBoundingCylinder->iNative = 0;
	uFnGetBoundingCylinder->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetBoundingCylinder, &GetBoundingCylinder_Params, nullptr);
	uFnGetBoundingCylinder->FunctionFlags |= 0x400;
	uFnGetBoundingCylinder->iNative = 20520;

	memcpy_s(&CollisionRadius, sizeof(CollisionRadius), &GetBoundingCylinder_Params.CollisionRadius, sizeof(GetBoundingCylinder_Params.CollisionRadius));
	memcpy_s(&CollisionHeight, sizeof(CollisionHeight), &GetBoundingCylinder_Params.CollisionHeight, sizeof(GetBoundingCylinder_Params.CollisionHeight));
};

// Function Engine.Actor.GetComponentsBoundingBox
// [0x00420401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20536])
// Parameter Info:
// struct FBox                    ActorBox                       (CPF_Parm | CPF_OutParm)

void AActor::GetComponentsBoundingBox(struct FBox& ActorBox)
{
	static UFunction* uFnGetComponentsBoundingBox = nullptr;

	if (!uFnGetComponentsBoundingBox)
	{
		uFnGetComponentsBoundingBox = UFunction::FindFunction("Function Engine.Actor.GetComponentsBoundingBox");
	}

	AActor_execGetComponentsBoundingBox_Params GetComponentsBoundingBox_Params;
	memset(&GetComponentsBoundingBox_Params, 0, sizeof(GetComponentsBoundingBox_Params));
	memcpy_s(&GetComponentsBoundingBox_Params.ActorBox, sizeof(GetComponentsBoundingBox_Params.ActorBox), &ActorBox, sizeof(ActorBox));

	uFnGetComponentsBoundingBox->iNative = 0;
	uFnGetComponentsBoundingBox->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetComponentsBoundingBox, &GetComponentsBoundingBox_Params, nullptr);
	uFnGetComponentsBoundingBox->FunctionFlags |= 0x400;
	uFnGetComponentsBoundingBox->iNative = 20536;

	memcpy_s(&ActorBox, sizeof(ActorBox), &GetComponentsBoundingBox_Params.ActorBox, sizeof(GetComponentsBoundingBox_Params.ActorBox));
};

// Function Engine.Actor.IsOverlapping
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[21411])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class AActor*                  A                              (CPF_Parm)

bool AActor::IsOverlapping(class AActor* A)
{
	static UFunction* uFnIsOverlapping = nullptr;

	if (!uFnIsOverlapping)
	{
		uFnIsOverlapping = UFunction::FindFunction("Function Engine.Actor.IsOverlapping");
	}

	AActor_execIsOverlapping_Params IsOverlapping_Params;
	memset(&IsOverlapping_Params, 0, sizeof(IsOverlapping_Params));
	IsOverlapping_Params.A = A;

	uFnIsOverlapping->iNative = 0;
	uFnIsOverlapping->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnIsOverlapping, &IsOverlapping_Params, nullptr);
	uFnIsOverlapping->FunctionFlags |= 0x400;
	uFnIsOverlapping->iNative = 21411;

	return IsOverlapping_Params.ReturnValue;
};

// Function Engine.Actor.ContainsPoint
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[18397])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FVector                 Spot                           (CPF_Parm)

bool AActor::ContainsPoint(const struct FVector& Spot)
{
	static UFunction* uFnContainsPoint = nullptr;

	if (!uFnContainsPoint)
	{
		uFnContainsPoint = UFunction::FindFunction("Function Engine.Actor.ContainsPoint");
	}

	AActor_execContainsPoint_Params ContainsPoint_Params;
	memset(&ContainsPoint_Params, 0, sizeof(ContainsPoint_Params));
	memcpy_s(&ContainsPoint_Params.Spot, sizeof(ContainsPoint_Params.Spot), &Spot, sizeof(Spot));

	uFnContainsPoint->iNative = 0;
	uFnContainsPoint->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnContainsPoint, &ContainsPoint_Params, nullptr);
	uFnContainsPoint->FunctionFlags |= 0x400;
	uFnContainsPoint->iNative = 18397;

	return ContainsPoint_Params.ReturnValue;
};

// Function Engine.Actor.FindSpot
// [0x00420401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20123])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FVector                 BoxExtent                      (CPF_Parm)
// struct FVector                 SpotLocation                   (CPF_Parm | CPF_OutParm)

bool AActor::FindSpot(const struct FVector& BoxExtent, struct FVector& SpotLocation)
{
	static UFunction* uFnFindSpot = nullptr;

	if (!uFnFindSpot)
	{
		uFnFindSpot = UFunction::FindFunction("Function Engine.Actor.FindSpot");
	}

	AActor_execFindSpot_Params FindSpot_Params;
	memset(&FindSpot_Params, 0, sizeof(FindSpot_Params));
	memcpy_s(&FindSpot_Params.BoxExtent, sizeof(FindSpot_Params.BoxExtent), &BoxExtent, sizeof(BoxExtent));
	memcpy_s(&FindSpot_Params.SpotLocation, sizeof(FindSpot_Params.SpotLocation), &SpotLocation, sizeof(SpotLocation));

	uFnFindSpot->iNative = 0;
	uFnFindSpot->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnFindSpot, &FindSpot_Params, nullptr);
	uFnFindSpot->FunctionFlags |= 0x400;
	uFnFindSpot->iNative = 20123;

	memcpy_s(&SpotLocation, sizeof(SpotLocation), &FindSpot_Params.SpotLocation, sizeof(FindSpot_Params.SpotLocation));

	return FindSpot_Params.ReturnValue;
};

// Function Engine.Actor.TraceAllPhysicsAssetInteractions
// [0x00424401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[26774])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class USkeletalMeshComponent*  SkelMeshComp                   (CPF_Parm | CPF_EditInline)
// struct FVector                 EndTrace                       (CPF_Parm)
// struct FVector                 StartTrace                     (CPF_Parm)
// struct FVector                 Extent                         (CPF_OptionalParm | CPF_Parm)
// class TArray<struct FImpactInfo> out_Hits                       (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

bool AActor::TraceAllPhysicsAssetInteractions(class USkeletalMeshComponent* SkelMeshComp, const struct FVector& EndTrace, const struct FVector& StartTrace, const struct FVector& Extent, class TArray<struct FImpactInfo>& out_Hits)
{
	static UFunction* uFnTraceAllPhysicsAssetInteractions = nullptr;

	if (!uFnTraceAllPhysicsAssetInteractions)
	{
		uFnTraceAllPhysicsAssetInteractions = UFunction::FindFunction("Function Engine.Actor.TraceAllPhysicsAssetInteractions");
	}

	AActor_execTraceAllPhysicsAssetInteractions_Params TraceAllPhysicsAssetInteractions_Params;
	memset(&TraceAllPhysicsAssetInteractions_Params, 0, sizeof(TraceAllPhysicsAssetInteractions_Params));
	TraceAllPhysicsAssetInteractions_Params.SkelMeshComp = SkelMeshComp;
	memcpy_s(&TraceAllPhysicsAssetInteractions_Params.EndTrace, sizeof(TraceAllPhysicsAssetInteractions_Params.EndTrace), &EndTrace, sizeof(EndTrace));
	memcpy_s(&TraceAllPhysicsAssetInteractions_Params.StartTrace, sizeof(TraceAllPhysicsAssetInteractions_Params.StartTrace), &StartTrace, sizeof(StartTrace));
	memcpy_s(&TraceAllPhysicsAssetInteractions_Params.Extent, sizeof(TraceAllPhysicsAssetInteractions_Params.Extent), &Extent, sizeof(Extent));
	memcpy_s(&TraceAllPhysicsAssetInteractions_Params.out_Hits, sizeof(TraceAllPhysicsAssetInteractions_Params.out_Hits), &out_Hits, sizeof(out_Hits));

	uFnTraceAllPhysicsAssetInteractions->iNative = 0;
	uFnTraceAllPhysicsAssetInteractions->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnTraceAllPhysicsAssetInteractions, &TraceAllPhysicsAssetInteractions_Params, nullptr);
	uFnTraceAllPhysicsAssetInteractions->FunctionFlags |= 0x400;
	uFnTraceAllPhysicsAssetInteractions->iNative = 26774;

	memcpy_s(&out_Hits, sizeof(out_Hits), &TraceAllPhysicsAssetInteractions_Params.out_Hits, sizeof(TraceAllPhysicsAssetInteractions_Params.out_Hits));

	return TraceAllPhysicsAssetInteractions_Params.ReturnValue;
};

// Function Engine.Actor.FastTrace
// [0x22400024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[20019])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FVector                 TraceEnd                       (CPF_Parm)
// struct FVector                 TraceStart                     (CPF_OptionalParm | CPF_Parm)
// struct FVector                 BoxExtent                      (CPF_OptionalParm | CPF_Parm)
// uint32_t                       bTraceBullet                   (CPF_OptionalParm | CPF_Parm)

bool AActor::FastTrace(const struct FVector& TraceEnd, const struct FVector& TraceStart, const struct FVector& BoxExtent, bool bTraceBullet)
{
	static UFunction* uFnFastTrace = nullptr;

	if (!uFnFastTrace)
	{
		uFnFastTrace = UFunction::FindFunction("Function Engine.Actor.FastTrace");
	}

	AActor_execFastTrace_Params FastTrace_Params;
	memset(&FastTrace_Params, 0, sizeof(FastTrace_Params));
	memcpy_s(&FastTrace_Params.TraceEnd, sizeof(FastTrace_Params.TraceEnd), &TraceEnd, sizeof(TraceEnd));
	memcpy_s(&FastTrace_Params.TraceStart, sizeof(FastTrace_Params.TraceStart), &TraceStart, sizeof(TraceStart));
	memcpy_s(&FastTrace_Params.BoxExtent, sizeof(FastTrace_Params.BoxExtent), &BoxExtent, sizeof(BoxExtent));
	FastTrace_Params.bTraceBullet = bTraceBullet;

	uFnFastTrace->iNative = 0;
	uFnFastTrace->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnFastTrace, &FastTrace_Params, nullptr);
	uFnFastTrace->FunctionFlags |= 0x400;
	uFnFastTrace->iNative = 20019;

	return FastTrace_Params.ReturnValue;
};

// Function Engine.Actor.PointCheckComponent
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[24370])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UPrimitiveComponent*     InComponent                    (CPF_Parm | CPF_EditInline)
// struct FVector                 PointLocation                  (CPF_Parm)
// struct FVector                 PointExtent                    (CPF_Parm)

bool AActor::PointCheckComponent(class UPrimitiveComponent* InComponent, const struct FVector& PointLocation, const struct FVector& PointExtent)
{
	static UFunction* uFnPointCheckComponent = nullptr;

	if (!uFnPointCheckComponent)
	{
		uFnPointCheckComponent = UFunction::FindFunction("Function Engine.Actor.PointCheckComponent");
	}

	AActor_execPointCheckComponent_Params PointCheckComponent_Params;
	memset(&PointCheckComponent_Params, 0, sizeof(PointCheckComponent_Params));
	PointCheckComponent_Params.InComponent = InComponent;
	memcpy_s(&PointCheckComponent_Params.PointLocation, sizeof(PointCheckComponent_Params.PointLocation), &PointLocation, sizeof(PointLocation));
	memcpy_s(&PointCheckComponent_Params.PointExtent, sizeof(PointCheckComponent_Params.PointExtent), &PointExtent, sizeof(PointExtent));

	uFnPointCheckComponent->iNative = 0;
	uFnPointCheckComponent->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnPointCheckComponent, &PointCheckComponent_Params, nullptr);
	uFnPointCheckComponent->FunctionFlags |= 0x400;
	uFnPointCheckComponent->iNative = 24370;

	return PointCheckComponent_Params.ReturnValue;
};

// Function Engine.Actor.TraceComponent
// [0x00424401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[26775])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UPrimitiveComponent*     InComponent                    (CPF_Parm | CPF_EditInline)
// struct FVector                 TraceEnd                       (CPF_Parm)
// struct FVector                 TraceStart                     (CPF_OptionalParm | CPF_Parm)
// struct FVector                 Extent                         (CPF_OptionalParm | CPF_Parm)
// uint32_t                       bComplexCollision              (CPF_OptionalParm | CPF_Parm)
// struct FVector                 HitLocation                    (CPF_Parm | CPF_OutParm)
// struct FVector                 HitNormal                      (CPF_Parm | CPF_OutParm)
// struct FTraceHitInfo           HitInfo                        (CPF_OptionalParm | CPF_Parm | CPF_OutParm)

bool AActor::TraceComponent(class UPrimitiveComponent* InComponent, const struct FVector& TraceEnd, const struct FVector& TraceStart, const struct FVector& Extent, bool bComplexCollision, struct FVector& HitLocation, struct FVector& HitNormal, struct FTraceHitInfo& HitInfo)
{
	static UFunction* uFnTraceComponent = nullptr;

	if (!uFnTraceComponent)
	{
		uFnTraceComponent = UFunction::FindFunction("Function Engine.Actor.TraceComponent");
	}

	AActor_execTraceComponent_Params TraceComponent_Params;
	memset(&TraceComponent_Params, 0, sizeof(TraceComponent_Params));
	TraceComponent_Params.InComponent = InComponent;
	memcpy_s(&TraceComponent_Params.TraceEnd, sizeof(TraceComponent_Params.TraceEnd), &TraceEnd, sizeof(TraceEnd));
	memcpy_s(&TraceComponent_Params.TraceStart, sizeof(TraceComponent_Params.TraceStart), &TraceStart, sizeof(TraceStart));
	memcpy_s(&TraceComponent_Params.Extent, sizeof(TraceComponent_Params.Extent), &Extent, sizeof(Extent));
	TraceComponent_Params.bComplexCollision = bComplexCollision;
	memcpy_s(&TraceComponent_Params.HitLocation, sizeof(TraceComponent_Params.HitLocation), &HitLocation, sizeof(HitLocation));
	memcpy_s(&TraceComponent_Params.HitNormal, sizeof(TraceComponent_Params.HitNormal), &HitNormal, sizeof(HitNormal));
	memcpy_s(&TraceComponent_Params.HitInfo, sizeof(TraceComponent_Params.HitInfo), &HitInfo, sizeof(HitInfo));

	uFnTraceComponent->iNative = 0;
	uFnTraceComponent->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnTraceComponent, &TraceComponent_Params, nullptr);
	uFnTraceComponent->FunctionFlags |= 0x400;
	uFnTraceComponent->iNative = 26775;

	memcpy_s(&HitLocation, sizeof(HitLocation), &TraceComponent_Params.HitLocation, sizeof(TraceComponent_Params.HitLocation));
	memcpy_s(&HitNormal, sizeof(HitNormal), &TraceComponent_Params.HitNormal, sizeof(TraceComponent_Params.HitNormal));
	memcpy_s(&HitInfo, sizeof(HitInfo), &TraceComponent_Params.HitInfo, sizeof(TraceComponent_Params.HitInfo));

	return TraceComponent_Params.ReturnValue;
};

// Function Engine.Actor.Trace
// [0x11500424401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[26772])
// Parameter Info:
// class AActor*                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FVector                 TraceEnd                       (CPF_Parm)
// struct FVector                 TraceStart                     (CPF_OptionalParm | CPF_Parm)
// uint32_t                       bTraceActors                   (CPF_OptionalParm | CPF_Parm)
// struct FVector                 Extent                         (CPF_OptionalParm | CPF_Parm)
// int32_t                        ExtraTraceFlags                (CPF_OptionalParm | CPF_Parm)
// struct FVector                 HitLocation                    (CPF_Parm | CPF_OutParm)
// struct FVector                 HitNormal                      (CPF_Parm | CPF_OutParm)
// struct FTraceHitInfo           HitInfo                        (CPF_OptionalParm | CPF_Parm | CPF_OutParm)

class AActor* AActor::Trace(const struct FVector& TraceEnd, const struct FVector& TraceStart, bool bTraceActors, const struct FVector& Extent, int32_t ExtraTraceFlags, struct FVector& HitLocation, struct FVector& HitNormal, struct FTraceHitInfo& HitInfo)
{
	static UFunction* uFnTrace = nullptr;

	if (!uFnTrace)
	{
		uFnTrace = UFunction::FindFunction("Function Engine.Actor.Trace");
	}

	AActor_execTrace_Params Trace_Params;
	memset(&Trace_Params, 0, sizeof(Trace_Params));
	memcpy_s(&Trace_Params.TraceEnd, sizeof(Trace_Params.TraceEnd), &TraceEnd, sizeof(TraceEnd));
	memcpy_s(&Trace_Params.TraceStart, sizeof(Trace_Params.TraceStart), &TraceStart, sizeof(TraceStart));
	Trace_Params.bTraceActors = bTraceActors;
	memcpy_s(&Trace_Params.Extent, sizeof(Trace_Params.Extent), &Extent, sizeof(Extent));
	memcpy_s(&Trace_Params.ExtraTraceFlags, sizeof(Trace_Params.ExtraTraceFlags), &ExtraTraceFlags, sizeof(ExtraTraceFlags));
	memcpy_s(&Trace_Params.HitLocation, sizeof(Trace_Params.HitLocation), &HitLocation, sizeof(HitLocation));
	memcpy_s(&Trace_Params.HitNormal, sizeof(Trace_Params.HitNormal), &HitNormal, sizeof(HitNormal));
	memcpy_s(&Trace_Params.HitInfo, sizeof(Trace_Params.HitInfo), &HitInfo, sizeof(HitInfo));

	uFnTrace->iNative = 0;
	uFnTrace->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnTrace, &Trace_Params, nullptr);
	uFnTrace->FunctionFlags |= 0x400;
	uFnTrace->iNative = 26772;

	memcpy_s(&HitLocation, sizeof(HitLocation), &Trace_Params.HitLocation, sizeof(Trace_Params.HitLocation));
	memcpy_s(&HitNormal, sizeof(HitNormal), &Trace_Params.HitNormal, sizeof(Trace_Params.HitNormal));
	memcpy_s(&HitInfo, sizeof(HitInfo), &Trace_Params.HitInfo, sizeof(Trace_Params.HitInfo));

	return Trace_Params.ReturnValue;
};

// Function Engine.Actor.VolumeBasedDestroy
// [0x00020500] (FUNC_Simulated | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[27203])
// Parameter Info:
// class APhysicsVolume*          PV                             (CPF_Parm)

void AActor::VolumeBasedDestroy(class APhysicsVolume* PV)
{
	static UFunction* uFnVolumeBasedDestroy = nullptr;

	if (!uFnVolumeBasedDestroy)
	{
		uFnVolumeBasedDestroy = UFunction::FindFunction("Function Engine.Actor.VolumeBasedDestroy");
	}

	AActor_execVolumeBasedDestroy_Params VolumeBasedDestroy_Params;
	memset(&VolumeBasedDestroy_Params, 0, sizeof(VolumeBasedDestroy_Params));
	VolumeBasedDestroy_Params.PV = PV;

	uFnVolumeBasedDestroy->iNative = 0;
	uFnVolumeBasedDestroy->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnVolumeBasedDestroy, &VolumeBasedDestroy_Params, nullptr);
	uFnVolumeBasedDestroy->FunctionFlags |= 0x400;
	uFnVolumeBasedDestroy->iNative = 27203;
};

// Function Engine.Actor.OutsideWorldBounds
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AActor::eventOutsideWorldBounds()
{
	static UFunction* uFnOutsideWorldBounds = nullptr;

	if (!uFnOutsideWorldBounds)
	{
		uFnOutsideWorldBounds = UFunction::FindFunction("Function Engine.Actor.OutsideWorldBounds");
	}

	AActor_eventOutsideWorldBounds_Params OutsideWorldBounds_Params;
	memset(&OutsideWorldBounds_Params, 0, sizeof(OutsideWorldBounds_Params));

	this->ProcessEvent(uFnOutsideWorldBounds, &OutsideWorldBounds_Params, nullptr);
};

// Function Engine.Actor.FellOutOfWorld
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UDamageType*             dmgType                        (CPF_Parm)

void AActor::eventFellOutOfWorld(class UDamageType* dmgType)
{
	static UFunction* uFnFellOutOfWorld = nullptr;

	if (!uFnFellOutOfWorld)
	{
		uFnFellOutOfWorld = UFunction::FindFunction("Function Engine.Actor.FellOutOfWorld");
	}

	AActor_eventFellOutOfWorld_Params FellOutOfWorld_Params;
	memset(&FellOutOfWorld_Params, 0, sizeof(FellOutOfWorld_Params));
	FellOutOfWorld_Params.dmgType = dmgType;

	this->ProcessEvent(uFnFellOutOfWorld, &FellOutOfWorld_Params, nullptr);
};

// Function Engine.Actor.UsedBy
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class APawn*                   User                           (CPF_Parm)

bool AActor::UsedBy(class APawn* User)
{
	static UFunction* uFnUsedBy = nullptr;

	if (!uFnUsedBy)
	{
		uFnUsedBy = UFunction::FindFunction("Function Engine.Actor.UsedBy");
	}

	AActor_execUsedBy_Params UsedBy_Params;
	memset(&UsedBy_Params, 0, sizeof(UsedBy_Params));
	UsedBy_Params.User = User;

	this->ProcessEvent(uFnUsedBy, &UsedBy_Params, nullptr);

	return UsedBy_Params.ReturnValue;
};

// Function Engine.Actor.OverRotated
// [0x00420900] (FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FRotator                out_Desired                    (CPF_Parm | CPF_OutParm)
// struct FRotator                out_Actual                     (CPF_Parm | CPF_OutParm)

bool AActor::eventOverRotated(struct FRotator& out_Desired, struct FRotator& out_Actual)
{
	static UFunction* uFnOverRotated = nullptr;

	if (!uFnOverRotated)
	{
		uFnOverRotated = UFunction::FindFunction("Function Engine.Actor.OverRotated");
	}

	AActor_eventOverRotated_Params OverRotated_Params;
	memset(&OverRotated_Params, 0, sizeof(OverRotated_Params));
	memcpy_s(&OverRotated_Params.out_Desired, sizeof(OverRotated_Params.out_Desired), &out_Desired, sizeof(out_Desired));
	memcpy_s(&OverRotated_Params.out_Actual, sizeof(OverRotated_Params.out_Actual), &out_Actual, sizeof(out_Actual));

	this->ProcessEvent(uFnOverRotated, &OverRotated_Params, nullptr);

	memcpy_s(&out_Desired, sizeof(out_Desired), &OverRotated_Params.out_Desired, sizeof(OverRotated_Params.out_Desired));
	memcpy_s(&out_Actual, sizeof(out_Actual), &OverRotated_Params.out_Actual, sizeof(OverRotated_Params.out_Actual));

	return OverRotated_Params.ReturnValue;
};

// Function Engine.Actor.ClampRotation
// [0x00420501] (FUNC_Final | FUNC_Simulated | FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[18091])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FRotator                rBase                          (CPF_Parm)
// struct FRotator                rUpperLimits                   (CPF_Parm)
// struct FRotator                rLowerLimits                   (CPF_Parm)
// struct FRotator                out_Rot                        (CPF_Parm | CPF_OutParm)

bool AActor::ClampRotation(const struct FRotator& rBase, const struct FRotator& rUpperLimits, const struct FRotator& rLowerLimits, struct FRotator& out_Rot)
{
	static UFunction* uFnClampRotation = nullptr;

	if (!uFnClampRotation)
	{
		uFnClampRotation = UFunction::FindFunction("Function Engine.Actor.ClampRotation");
	}

	AActor_execClampRotation_Params ClampRotation_Params;
	memset(&ClampRotation_Params, 0, sizeof(ClampRotation_Params));
	memcpy_s(&ClampRotation_Params.rBase, sizeof(ClampRotation_Params.rBase), &rBase, sizeof(rBase));
	memcpy_s(&ClampRotation_Params.rUpperLimits, sizeof(ClampRotation_Params.rUpperLimits), &rUpperLimits, sizeof(rUpperLimits));
	memcpy_s(&ClampRotation_Params.rLowerLimits, sizeof(ClampRotation_Params.rLowerLimits), &rLowerLimits, sizeof(rLowerLimits));
	memcpy_s(&ClampRotation_Params.out_Rot, sizeof(ClampRotation_Params.out_Rot), &out_Rot, sizeof(out_Rot));

	uFnClampRotation->iNative = 0;
	uFnClampRotation->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnClampRotation, &ClampRotation_Params, nullptr);
	uFnClampRotation->FunctionFlags |= 0x400;
	uFnClampRotation->iNative = 18091;

	memcpy_s(&out_Rot, sizeof(out_Rot), &ClampRotation_Params.out_Rot, sizeof(ClampRotation_Params.out_Rot));

	return ClampRotation_Params.ReturnValue;
};

// Function Engine.Actor.OnSleepRBPhysics
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AActor::eventOnSleepRBPhysics()
{
	static UFunction* uFnOnSleepRBPhysics = nullptr;

	if (!uFnOnSleepRBPhysics)
	{
		uFnOnSleepRBPhysics = UFunction::FindFunction("Function Engine.Actor.OnSleepRBPhysics");
	}

	AActor_eventOnSleepRBPhysics_Params OnSleepRBPhysics_Params;
	memset(&OnSleepRBPhysics_Params, 0, sizeof(OnSleepRBPhysics_Params));

	this->ProcessEvent(uFnOnSleepRBPhysics, &OnSleepRBPhysics_Params, nullptr);
};

// Function Engine.Actor.OnWakeRBPhysics
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AActor::eventOnWakeRBPhysics()
{
	static UFunction* uFnOnWakeRBPhysics = nullptr;

	if (!uFnOnWakeRBPhysics)
	{
		uFnOnWakeRBPhysics = UFunction::FindFunction("Function Engine.Actor.OnWakeRBPhysics");
	}

	AActor_eventOnWakeRBPhysics_Params OnWakeRBPhysics_Params;
	memset(&OnWakeRBPhysics_Params, 0, sizeof(OnWakeRBPhysics_Params));

	this->ProcessEvent(uFnOnWakeRBPhysics, &OnWakeRBPhysics_Params, nullptr);
};

// Function Engine.Actor.RanInto
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AActor*                  Other                          (CPF_Parm)

void AActor::eventRanInto(class AActor* Other)
{
	static UFunction* uFnRanInto = nullptr;

	if (!uFnRanInto)
	{
		uFnRanInto = UFunction::FindFunction("Function Engine.Actor.RanInto");
	}

	AActor_eventRanInto_Params RanInto_Params;
	memset(&RanInto_Params, 0, sizeof(RanInto_Params));
	RanInto_Params.Other = Other;

	this->ProcessEvent(uFnRanInto, &RanInto_Params, nullptr);
};

// Function Engine.Actor.EncroachedBy
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AActor*                  Other                          (CPF_Parm)

void AActor::eventEncroachedBy(class AActor* Other)
{
	static UFunction* uFnEncroachedBy = nullptr;

	if (!uFnEncroachedBy)
	{
		uFnEncroachedBy = UFunction::FindFunction("Function Engine.Actor.EncroachedBy");
	}

	AActor_eventEncroachedBy_Params EncroachedBy_Params;
	memset(&EncroachedBy_Params, 0, sizeof(EncroachedBy_Params));
	EncroachedBy_Params.Other = Other;

	this->ProcessEvent(uFnEncroachedBy, &EncroachedBy_Params, nullptr);
};

// Function Engine.Actor.EncroachingOn
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class AActor*                  Other                          (CPF_Parm)

bool AActor::eventEncroachingOn(class AActor* Other)
{
	static UFunction* uFnEncroachingOn = nullptr;

	if (!uFnEncroachingOn)
	{
		uFnEncroachingOn = UFunction::FindFunction("Function Engine.Actor.EncroachingOn");
	}

	AActor_eventEncroachingOn_Params EncroachingOn_Params;
	memset(&EncroachingOn_Params, 0, sizeof(EncroachingOn_Params));
	EncroachingOn_Params.Other = Other;

	this->ProcessEvent(uFnEncroachingOn, &EncroachingOn_Params, nullptr);

	return EncroachingOn_Params.ReturnValue;
};

// Function Engine.Actor.CollisionChanged
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AActor::eventCollisionChanged()
{
	static UFunction* uFnCollisionChanged = nullptr;

	if (!uFnCollisionChanged)
	{
		uFnCollisionChanged = UFunction::FindFunction("Function Engine.Actor.CollisionChanged");
	}

	AActor_eventCollisionChanged_Params CollisionChanged_Params;
	memset(&CollisionChanged_Params, 0, sizeof(CollisionChanged_Params));

	this->ProcessEvent(uFnCollisionChanged, &CollisionChanged_Params, nullptr);
};

// Function Engine.Actor.SpecialHandling
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AActor*                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class APawn*                   Other                          (CPF_Parm)

class AActor* AActor::eventSpecialHandling(class APawn* Other)
{
	static UFunction* uFnSpecialHandling = nullptr;

	if (!uFnSpecialHandling)
	{
		uFnSpecialHandling = UFunction::FindFunction("Function Engine.Actor.SpecialHandling");
	}

	AActor_eventSpecialHandling_Params SpecialHandling_Params;
	memset(&SpecialHandling_Params, 0, sizeof(SpecialHandling_Params));
	SpecialHandling_Params.Other = Other;

	this->ProcessEvent(uFnSpecialHandling, &SpecialHandling_Params, nullptr);

	return SpecialHandling_Params.ReturnValue;
};

// Function Engine.Actor.Detach
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AActor*                  Other                          (CPF_Parm)

void AActor::eventDetach(class AActor* Other)
{
	static UFunction* uFnDetach = nullptr;

	if (!uFnDetach)
	{
		uFnDetach = UFunction::FindFunction("Function Engine.Actor.Detach");
	}

	AActor_eventDetach_Params Detach_Params;
	memset(&Detach_Params, 0, sizeof(Detach_Params));
	Detach_Params.Other = Other;

	this->ProcessEvent(uFnDetach, &Detach_Params, nullptr);
};

// Function Engine.Actor.Attach
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AActor*                  Other                          (CPF_Parm)

void AActor::eventAttach(class AActor* Other)
{
	static UFunction* uFnAttach = nullptr;

	if (!uFnAttach)
	{
		uFnAttach = UFunction::FindFunction("Function Engine.Actor.Attach");
	}

	AActor_eventAttach_Params Attach_Params;
	memset(&Attach_Params, 0, sizeof(Attach_Params));
	Attach_Params.Other = Other;

	this->ProcessEvent(uFnAttach, &Attach_Params, nullptr);
};

// Function Engine.Actor.BaseChange
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AActor::eventBaseChange()
{
	static UFunction* uFnBaseChange = nullptr;

	if (!uFnBaseChange)
	{
		uFnBaseChange = UFunction::FindFunction("Function Engine.Actor.BaseChange");
	}

	AActor_eventBaseChange_Params BaseChange_Params;
	memset(&BaseChange_Params, 0, sizeof(BaseChange_Params));

	this->ProcessEvent(uFnBaseChange, &BaseChange_Params, nullptr);
};

// Function Engine.Actor.Bump
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AActor*                  Other                          (CPF_Parm)
// class UPrimitiveComponent*     OtherComp                      (CPF_Parm | CPF_EditInline)
// struct FVector                 HitNormal                      (CPF_Parm)

void AActor::eventBump(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitNormal)
{
	static UFunction* uFnBump = nullptr;

	if (!uFnBump)
	{
		uFnBump = UFunction::FindFunction("Function Engine.Actor.Bump");
	}

	AActor_eventBump_Params Bump_Params;
	memset(&Bump_Params, 0, sizeof(Bump_Params));
	Bump_Params.Other = Other;
	Bump_Params.OtherComp = OtherComp;
	memcpy_s(&Bump_Params.HitNormal, sizeof(Bump_Params.HitNormal), &HitNormal, sizeof(HitNormal));

	this->ProcessEvent(uFnBump, &Bump_Params, nullptr);
};

// Function Engine.Actor.PostTouch
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AActor*                  Other                          (CPF_Parm)

void AActor::eventPostTouch(class AActor* Other)
{
	static UFunction* uFnPostTouch = nullptr;

	if (!uFnPostTouch)
	{
		uFnPostTouch = UFunction::FindFunction("Function Engine.Actor.PostTouch");
	}

	AActor_eventPostTouch_Params PostTouch_Params;
	memset(&PostTouch_Params, 0, sizeof(PostTouch_Params));
	PostTouch_Params.Other = Other;

	this->ProcessEvent(uFnPostTouch, &PostTouch_Params, nullptr);
};

// Function Engine.Actor.PhysicsVolumeChange
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class APhysicsVolume*          NewVolume                      (CPF_Parm)

void AActor::eventPhysicsVolumeChange(class APhysicsVolume* NewVolume)
{
	static UFunction* uFnPhysicsVolumeChange = nullptr;

	if (!uFnPhysicsVolumeChange)
	{
		uFnPhysicsVolumeChange = UFunction::FindFunction("Function Engine.Actor.PhysicsVolumeChange");
	}

	AActor_eventPhysicsVolumeChange_Params PhysicsVolumeChange_Params;
	memset(&PhysicsVolumeChange_Params, 0, sizeof(PhysicsVolumeChange_Params));
	PhysicsVolumeChange_Params.NewVolume = NewVolume;

	this->ProcessEvent(uFnPhysicsVolumeChange, &PhysicsVolumeChange_Params, nullptr);
};

// Function Engine.Actor.Landed
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FVector                 HitNormal                      (CPF_Parm)
// class AActor*                  FloorActor                     (CPF_Parm)

void AActor::eventLanded(const struct FVector& HitNormal, class AActor* FloorActor)
{
	static UFunction* uFnLanded = nullptr;

	if (!uFnLanded)
	{
		uFnLanded = UFunction::FindFunction("Function Engine.Actor.Landed");
	}

	AActor_eventLanded_Params Landed_Params;
	memset(&Landed_Params, 0, sizeof(Landed_Params));
	memcpy_s(&Landed_Params.HitNormal, sizeof(Landed_Params.HitNormal), &HitNormal, sizeof(HitNormal));
	Landed_Params.FloorActor = FloorActor;

	this->ProcessEvent(uFnLanded, &Landed_Params, nullptr);
};

// Function Engine.Actor.Falling
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AActor::eventFalling()
{
	static UFunction* uFnFalling = nullptr;

	if (!uFnFalling)
	{
		uFnFalling = UFunction::FindFunction("Function Engine.Actor.Falling");
	}

	AActor_eventFalling_Params Falling_Params;
	memset(&Falling_Params, 0, sizeof(Falling_Params));

	this->ProcessEvent(uFnFalling, &Falling_Params, nullptr);
};

// Function Engine.Actor.HitWall
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FVector                 HitNormal                      (CPF_Parm)
// class AActor*                  Wall                           (CPF_Parm)
// class UPrimitiveComponent*     WallComp                       (CPF_Parm | CPF_EditInline)

void AActor::eventHitWall(const struct FVector& HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp)
{
	static UFunction* uFnHitWall = nullptr;

	if (!uFnHitWall)
	{
		uFnHitWall = UFunction::FindFunction("Function Engine.Actor.HitWall");
	}

	AActor_eventHitWall_Params HitWall_Params;
	memset(&HitWall_Params, 0, sizeof(HitWall_Params));
	memcpy_s(&HitWall_Params.HitNormal, sizeof(HitWall_Params.HitNormal), &HitNormal, sizeof(HitNormal));
	HitWall_Params.Wall = Wall;
	HitWall_Params.WallComp = WallComp;

	this->ProcessEvent(uFnHitWall, &HitWall_Params, nullptr);
};

// Function Engine.Actor.Timer
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AActor::eventTimer()
{
	static UFunction* uFnTimer = nullptr;

	if (!uFnTimer)
	{
		uFnTimer = UFunction::FindFunction("Function Engine.Actor.Timer");
	}

	AActor_eventTimer_Params Timer_Params;
	memset(&Timer_Params, 0, sizeof(Timer_Params));

	this->ProcessEvent(uFnTimer, &Timer_Params, nullptr);
};

// Function Engine.Actor.LostChild
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AActor*                  Other                          (CPF_Parm)

void AActor::eventLostChild(class AActor* Other)
{
	static UFunction* uFnLostChild = nullptr;

	if (!uFnLostChild)
	{
		uFnLostChild = UFunction::FindFunction("Function Engine.Actor.LostChild");
	}

	AActor_eventLostChild_Params LostChild_Params;
	memset(&LostChild_Params, 0, sizeof(LostChild_Params));
	LostChild_Params.Other = Other;

	this->ProcessEvent(uFnLostChild, &LostChild_Params, nullptr);
};

// Function Engine.Actor.GainedChild
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AActor*                  Other                          (CPF_Parm)

void AActor::eventGainedChild(class AActor* Other)
{
	static UFunction* uFnGainedChild = nullptr;

	if (!uFnGainedChild)
	{
		uFnGainedChild = UFunction::FindFunction("Function Engine.Actor.GainedChild");
	}

	AActor_eventGainedChild_Params GainedChild_Params;
	memset(&GainedChild_Params, 0, sizeof(GainedChild_Params));
	GainedChild_Params.Other = Other;

	this->ProcessEvent(uFnGainedChild, &GainedChild_Params, nullptr);
};

// Function Engine.Actor.Destroyed
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AActor::eventDestroyed()
{
	static UFunction* uFnDestroyed = nullptr;

	if (!uFnDestroyed)
	{
		uFnDestroyed = UFunction::FindFunction("Function Engine.Actor.Destroyed");
	}

	AActor_eventDestroyed_Params Destroyed_Params;
	memset(&Destroyed_Params, 0, sizeof(Destroyed_Params));

	this->ProcessEvent(uFnDestroyed, &Destroyed_Params, nullptr);
};

// Function Engine.Actor.SetTickIsDisabled
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25816])
// Parameter Info:
// uint32_t                       bInDisabled                    (CPF_Parm)

void AActor::SetTickIsDisabled(bool bInDisabled)
{
	static UFunction* uFnSetTickIsDisabled = nullptr;

	if (!uFnSetTickIsDisabled)
	{
		uFnSetTickIsDisabled = UFunction::FindFunction("Function Engine.Actor.SetTickIsDisabled");
	}

	AActor_execSetTickIsDisabled_Params SetTickIsDisabled_Params;
	memset(&SetTickIsDisabled_Params, 0, sizeof(SetTickIsDisabled_Params));
	SetTickIsDisabled_Params.bInDisabled = bInDisabled;

	uFnSetTickIsDisabled->iNative = 0;
	uFnSetTickIsDisabled->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetTickIsDisabled, &SetTickIsDisabled_Params, nullptr);
	uFnSetTickIsDisabled->FunctionFlags |= 0x400;
	uFnSetTickIsDisabled->iNative = 25816;
};

// Function Engine.Actor.SetTickGroup
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25815])
// Parameter Info:
// ETickingGroup                  NewTickGroup                   (CPF_Parm)

void AActor::SetTickGroup(ETickingGroup NewTickGroup)
{
	static UFunction* uFnSetTickGroup = nullptr;

	if (!uFnSetTickGroup)
	{
		uFnSetTickGroup = UFunction::FindFunction("Function Engine.Actor.SetTickGroup");
	}

	AActor_execSetTickGroup_Params SetTickGroup_Params;
	memset(&SetTickGroup_Params, 0, sizeof(SetTickGroup_Params));
	memcpy_s(&SetTickGroup_Params.NewTickGroup, sizeof(SetTickGroup_Params.NewTickGroup), &NewTickGroup, sizeof(NewTickGroup));

	uFnSetTickGroup->iNative = 0;
	uFnSetTickGroup->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetTickGroup, &SetTickGroup_Params, nullptr);
	uFnSetTickGroup->FunctionFlags |= 0x400;
	uFnSetTickGroup->iNative = 25815;
};

// Function Engine.Actor.ReattachComponent
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[24975])
// Parameter Info:
// class UActorComponent*         ComponentToReattach            (CPF_Parm | CPF_EditInline)

void AActor::ReattachComponent(class UActorComponent* ComponentToReattach)
{
	static UFunction* uFnReattachComponent = nullptr;

	if (!uFnReattachComponent)
	{
		uFnReattachComponent = UFunction::FindFunction("Function Engine.Actor.ReattachComponent");
	}

	AActor_execReattachComponent_Params ReattachComponent_Params;
	memset(&ReattachComponent_Params, 0, sizeof(ReattachComponent_Params));
	ReattachComponent_Params.ComponentToReattach = ComponentToReattach;

	uFnReattachComponent->iNative = 0;
	uFnReattachComponent->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnReattachComponent, &ReattachComponent_Params, nullptr);
	uFnReattachComponent->FunctionFlags |= 0x400;
	uFnReattachComponent->iNative = 24975;
};

// Function Engine.Actor.DetachComponent
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[18923])
// Parameter Info:
// class UActorComponent*         ExComponent                    (CPF_Parm | CPF_EditInline)

void AActor::DetachComponent(class UActorComponent* ExComponent)
{
	static UFunction* uFnDetachComponent = nullptr;

	if (!uFnDetachComponent)
	{
		uFnDetachComponent = UFunction::FindFunction("Function Engine.Actor.DetachComponent");
	}

	AActor_execDetachComponent_Params DetachComponent_Params;
	memset(&DetachComponent_Params, 0, sizeof(DetachComponent_Params));
	DetachComponent_Params.ExComponent = ExComponent;

	uFnDetachComponent->iNative = 0;
	uFnDetachComponent->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnDetachComponent, &DetachComponent_Params, nullptr);
	uFnDetachComponent->FunctionFlags |= 0x400;
	uFnDetachComponent->iNative = 18923;
};

// Function Engine.Actor.AttachComponent
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[15715])
// Parameter Info:
// class UActorComponent*         NewComponent                   (CPF_Parm | CPF_EditInline)

void AActor::AttachComponent(class UActorComponent* NewComponent)
{
	static UFunction* uFnAttachComponent = nullptr;

	if (!uFnAttachComponent)
	{
		uFnAttachComponent = UFunction::FindFunction("Function Engine.Actor.AttachComponent");
	}

	AActor_execAttachComponent_Params AttachComponent_Params;
	memset(&AttachComponent_Params, 0, sizeof(AttachComponent_Params));
	AttachComponent_Params.NewComponent = NewComponent;

	uFnAttachComponent->iNative = 0;
	uFnAttachComponent->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnAttachComponent, &AttachComponent_Params, nullptr);
	uFnAttachComponent->FunctionFlags |= 0x400;
	uFnAttachComponent->iNative = 15715;
};

// Function Engine.Actor.UnClock
// [0x00420401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[26931])
// Parameter Info:
// float                          Time                           (CPF_Parm | CPF_OutParm)

void AActor::UnClock(float& Time)
{
	static UFunction* uFnUnClock = nullptr;

	if (!uFnUnClock)
	{
		uFnUnClock = UFunction::FindFunction("Function Engine.Actor.UnClock");
	}

	AActor_execUnClock_Params UnClock_Params;
	memset(&UnClock_Params, 0, sizeof(UnClock_Params));
	memcpy_s(&UnClock_Params.Time, sizeof(UnClock_Params.Time), &Time, sizeof(Time));

	uFnUnClock->iNative = 0;
	uFnUnClock->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnUnClock, &UnClock_Params, nullptr);
	uFnUnClock->FunctionFlags |= 0x400;
	uFnUnClock->iNative = 26931;

	memcpy_s(&Time, sizeof(Time), &UnClock_Params.Time, sizeof(UnClock_Params.Time));
};

// Function Engine.Actor.Clock
// [0x00420401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[18220])
// Parameter Info:
// float                          Time                           (CPF_Parm | CPF_OutParm)

void AActor::Clock(float& Time)
{
	static UFunction* uFnClock = nullptr;

	if (!uFnClock)
	{
		uFnClock = UFunction::FindFunction("Function Engine.Actor.Clock");
	}

	AActor_execClock_Params Clock_Params;
	memset(&Clock_Params, 0, sizeof(Clock_Params));
	memcpy_s(&Clock_Params.Time, sizeof(Clock_Params.Time), &Time, sizeof(Time));

	uFnClock->iNative = 0;
	uFnClock->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnClock, &Clock_Params, nullptr);
	uFnClock->FunctionFlags |= 0x400;
	uFnClock->iNative = 18220;

	memcpy_s(&Time, sizeof(Time), &Clock_Params.Time, sizeof(Clock_Params.Time));
};

// Function Engine.Actor.SetPhysics
// [0xF8200020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25738])
// Parameter Info:
// EPhysics                       newPhysics                     (CPF_Parm)

void AActor::SetPhysics(EPhysics newPhysics)
{
	static UFunction* uFnSetPhysics = nullptr;

	if (!uFnSetPhysics)
	{
		uFnSetPhysics = UFunction::FindFunction("Function Engine.Actor.SetPhysics");
	}

	AActor_execSetPhysics_Params SetPhysics_Params;
	memset(&SetPhysics_Params, 0, sizeof(SetPhysics_Params));
	memcpy_s(&SetPhysics_Params.newPhysics, sizeof(SetPhysics_Params.newPhysics), &newPhysics, sizeof(newPhysics));

	uFnSetPhysics->iNative = 0;
	uFnSetPhysics->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetPhysics, &SetPhysics_Params, nullptr);
	uFnSetPhysics->FunctionFlags |= 0x400;
	uFnSetPhysics->iNative = 25738;
};

// Function Engine.Actor.SetOnlyOwnerSee
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25727])
// Parameter Info:
// uint32_t                       bNewOnlyOwnerSee               (CPF_Parm)

void AActor::SetOnlyOwnerSee(bool bNewOnlyOwnerSee)
{
	static UFunction* uFnSetOnlyOwnerSee = nullptr;

	if (!uFnSetOnlyOwnerSee)
	{
		uFnSetOnlyOwnerSee = UFunction::FindFunction("Function Engine.Actor.SetOnlyOwnerSee");
	}

	AActor_execSetOnlyOwnerSee_Params SetOnlyOwnerSee_Params;
	memset(&SetOnlyOwnerSee_Params, 0, sizeof(SetOnlyOwnerSee_Params));
	SetOnlyOwnerSee_Params.bNewOnlyOwnerSee = bNewOnlyOwnerSee;

	uFnSetOnlyOwnerSee->iNative = 0;
	uFnSetOnlyOwnerSee->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetOnlyOwnerSee, &SetOnlyOwnerSee_Params, nullptr);
	uFnSetOnlyOwnerSee->FunctionFlags |= 0x400;
	uFnSetOnlyOwnerSee->iNative = 25727;
};

// Function Engine.Actor.SetHidden
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25675])
// Parameter Info:
// uint32_t                       bNewHidden                     (CPF_Parm)

void AActor::SetHidden(bool bNewHidden)
{
	static UFunction* uFnSetHidden = nullptr;

	if (!uFnSetHidden)
	{
		uFnSetHidden = UFunction::FindFunction("Function Engine.Actor.SetHidden");
	}

	AActor_execSetHidden_Params SetHidden_Params;
	memset(&SetHidden_Params, 0, sizeof(SetHidden_Params));
	SetHidden_Params.bNewHidden = bNewHidden;

	uFnSetHidden->iNative = 0;
	uFnSetHidden->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetHidden, &SetHidden_Params, nullptr);
	uFnSetHidden->FunctionFlags |= 0x400;
	uFnSetHidden->iNative = 25675;
};

// Function Engine.Actor.ChartData
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[18046])
// Parameter Info:
// class FString                  DataName                       (CPF_Parm | CPF_NeedCtorLink)
// float                          DataValue                      (CPF_Parm)

void AActor::ChartData(const class FString& DataName, float DataValue)
{
	static UFunction* uFnChartData = nullptr;

	if (!uFnChartData)
	{
		uFnChartData = UFunction::FindFunction("Function Engine.Actor.ChartData");
	}

	AActor_execChartData_Params ChartData_Params;
	memset(&ChartData_Params, 0, sizeof(ChartData_Params));
	memcpy_s(&ChartData_Params.DataName, sizeof(ChartData_Params.DataName), &DataName, sizeof(DataName));
	memcpy_s(&ChartData_Params.DataValue, sizeof(ChartData_Params.DataValue), &DataValue, sizeof(DataValue));

	uFnChartData->iNative = 0;
	uFnChartData->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnChartData, &ChartData_Params, nullptr);
	uFnChartData->FunctionFlags |= 0x400;
	uFnChartData->iNative = 18046;
};

// Function Engine.Actor.FlushDebugStrings
// [0x00022401] (FUNC_Final | FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags) (iNative[20188])
// Parameter Info:

void AActor::FlushDebugStrings()
{
	static UFunction* uFnFlushDebugStrings = nullptr;

	if (!uFnFlushDebugStrings)
	{
		uFnFlushDebugStrings = UFunction::FindFunction("Function Engine.Actor.FlushDebugStrings");
	}

	AActor_execFlushDebugStrings_Params FlushDebugStrings_Params;
	memset(&FlushDebugStrings_Params, 0, sizeof(FlushDebugStrings_Params));

	uFnFlushDebugStrings->iNative = 0;
	uFnFlushDebugStrings->FunctionFlags &= ~0x400;
	AActor::StaticClass()->ProcessEvent(uFnFlushDebugStrings, &FlushDebugStrings_Params, nullptr);
	uFnFlushDebugStrings->FunctionFlags |= 0x400;
	uFnFlushDebugStrings->iNative = 20188;
};

// Function Engine.Actor.DrawDebugFrustrum
// [0x00426401] (FUNC_Final | FUNC_Native | FUNC_Static | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[19167])
// Parameter Info:
// uint8_t                        R                              (CPF_Parm)
// uint8_t                        G                              (CPF_Parm)
// uint8_t                        B                              (CPF_Parm)
// uint32_t                       bPersistentLines               (CPF_OptionalParm | CPF_Parm)
// struct FMatrix                 FrustumToWorld                 (CPF_Const | CPF_Parm | CPF_OutParm)

void AActor::DrawDebugFrustrum(uint8_t R, uint8_t G, uint8_t B, bool bPersistentLines, struct FMatrix& FrustumToWorld)
{
	static UFunction* uFnDrawDebugFrustrum = nullptr;

	if (!uFnDrawDebugFrustrum)
	{
		uFnDrawDebugFrustrum = UFunction::FindFunction("Function Engine.Actor.DrawDebugFrustrum");
	}

	AActor_execDrawDebugFrustrum_Params DrawDebugFrustrum_Params;
	memset(&DrawDebugFrustrum_Params, 0, sizeof(DrawDebugFrustrum_Params));
	memcpy_s(&DrawDebugFrustrum_Params.R, sizeof(DrawDebugFrustrum_Params.R), &R, sizeof(R));
	memcpy_s(&DrawDebugFrustrum_Params.G, sizeof(DrawDebugFrustrum_Params.G), &G, sizeof(G));
	memcpy_s(&DrawDebugFrustrum_Params.B, sizeof(DrawDebugFrustrum_Params.B), &B, sizeof(B));
	DrawDebugFrustrum_Params.bPersistentLines = bPersistentLines;
	memcpy_s(&DrawDebugFrustrum_Params.FrustumToWorld, sizeof(DrawDebugFrustrum_Params.FrustumToWorld), &FrustumToWorld, sizeof(FrustumToWorld));

	uFnDrawDebugFrustrum->iNative = 0;
	uFnDrawDebugFrustrum->FunctionFlags &= ~0x400;
	AActor::StaticClass()->ProcessEvent(uFnDrawDebugFrustrum, &DrawDebugFrustrum_Params, nullptr);
	uFnDrawDebugFrustrum->FunctionFlags |= 0x400;
	uFnDrawDebugFrustrum->iNative = 19167;

	memcpy_s(&FrustumToWorld, sizeof(FrustumToWorld), &DrawDebugFrustrum_Params.FrustumToWorld, sizeof(DrawDebugFrustrum_Params.FrustumToWorld));
};

// Function Engine.Actor.DrawDebugString
// [0x00026401] (FUNC_Final | FUNC_Native | FUNC_Static | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[19173])
// Parameter Info:
// struct FVector                 TextLocation                   (CPF_Parm)
// class FString                  Text                           (CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink)
// class AActor*                  TestBaseActor                  (CPF_OptionalParm | CPF_Parm)
// struct FColor                  TextColor                      (CPF_OptionalParm | CPF_Parm)
// float                          Duration                       (CPF_OptionalParm | CPF_Parm)

void AActor::DrawDebugString(const struct FVector& TextLocation, const class FString& Text, class AActor* TestBaseActor, const struct FColor& TextColor, float Duration)
{
	static UFunction* uFnDrawDebugString = nullptr;

	if (!uFnDrawDebugString)
	{
		uFnDrawDebugString = UFunction::FindFunction("Function Engine.Actor.DrawDebugString");
	}

	AActor_execDrawDebugString_Params DrawDebugString_Params;
	memset(&DrawDebugString_Params, 0, sizeof(DrawDebugString_Params));
	memcpy_s(&DrawDebugString_Params.TextLocation, sizeof(DrawDebugString_Params.TextLocation), &TextLocation, sizeof(TextLocation));
	memcpy_s(&DrawDebugString_Params.Text, sizeof(DrawDebugString_Params.Text), &Text, sizeof(Text));
	DrawDebugString_Params.TestBaseActor = TestBaseActor;
	memcpy_s(&DrawDebugString_Params.TextColor, sizeof(DrawDebugString_Params.TextColor), &TextColor, sizeof(TextColor));
	memcpy_s(&DrawDebugString_Params.Duration, sizeof(DrawDebugString_Params.Duration), &Duration, sizeof(Duration));

	uFnDrawDebugString->iNative = 0;
	uFnDrawDebugString->FunctionFlags &= ~0x400;
	AActor::StaticClass()->ProcessEvent(uFnDrawDebugString, &DrawDebugString_Params, nullptr);
	uFnDrawDebugString->FunctionFlags |= 0x400;
	uFnDrawDebugString->iNative = 19173;
};

// Function Engine.Actor.DrawDebugCone
// [0x00026401] (FUNC_Final | FUNC_Native | FUNC_Static | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[19164])
// Parameter Info:
// struct FVector                 Origin                         (CPF_Parm)
// struct FVector                 Direction                      (CPF_Parm)
// float                          Length                         (CPF_Parm)
// float                          AngleWidth                     (CPF_Parm)
// float                          AngleHeight                    (CPF_Parm)
// int32_t                        NumSides                       (CPF_Parm)
// struct FColor                  DrawColor                      (CPF_Parm)
// uint32_t                       bPersistentLines               (CPF_OptionalParm | CPF_Parm)

void AActor::DrawDebugCone(const struct FVector& Origin, const struct FVector& Direction, float Length, float AngleWidth, float AngleHeight, int32_t NumSides, const struct FColor& DrawColor, bool bPersistentLines)
{
	static UFunction* uFnDrawDebugCone = nullptr;

	if (!uFnDrawDebugCone)
	{
		uFnDrawDebugCone = UFunction::FindFunction("Function Engine.Actor.DrawDebugCone");
	}

	AActor_execDrawDebugCone_Params DrawDebugCone_Params;
	memset(&DrawDebugCone_Params, 0, sizeof(DrawDebugCone_Params));
	memcpy_s(&DrawDebugCone_Params.Origin, sizeof(DrawDebugCone_Params.Origin), &Origin, sizeof(Origin));
	memcpy_s(&DrawDebugCone_Params.Direction, sizeof(DrawDebugCone_Params.Direction), &Direction, sizeof(Direction));
	memcpy_s(&DrawDebugCone_Params.Length, sizeof(DrawDebugCone_Params.Length), &Length, sizeof(Length));
	memcpy_s(&DrawDebugCone_Params.AngleWidth, sizeof(DrawDebugCone_Params.AngleWidth), &AngleWidth, sizeof(AngleWidth));
	memcpy_s(&DrawDebugCone_Params.AngleHeight, sizeof(DrawDebugCone_Params.AngleHeight), &AngleHeight, sizeof(AngleHeight));
	memcpy_s(&DrawDebugCone_Params.NumSides, sizeof(DrawDebugCone_Params.NumSides), &NumSides, sizeof(NumSides));
	memcpy_s(&DrawDebugCone_Params.DrawColor, sizeof(DrawDebugCone_Params.DrawColor), &DrawColor, sizeof(DrawColor));
	DrawDebugCone_Params.bPersistentLines = bPersistentLines;

	uFnDrawDebugCone->iNative = 0;
	uFnDrawDebugCone->FunctionFlags &= ~0x400;
	AActor::StaticClass()->ProcessEvent(uFnDrawDebugCone, &DrawDebugCone_Params, nullptr);
	uFnDrawDebugCone->FunctionFlags |= 0x400;
	uFnDrawDebugCone->iNative = 19164;
};

// Function Engine.Actor.DrawDebugCylinder
// [0x00026401] (FUNC_Final | FUNC_Native | FUNC_Static | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[19166])
// Parameter Info:
// struct FVector                 Start                          (CPF_Parm)
// struct FVector                 End                            (CPF_Parm)
// float                          Radius                         (CPF_Parm)
// int32_t                        Segments                       (CPF_Parm)
// uint8_t                        R                              (CPF_Parm)
// uint8_t                        G                              (CPF_Parm)
// uint8_t                        B                              (CPF_Parm)
// uint32_t                       bPersistentLines               (CPF_OptionalParm | CPF_Parm)

void AActor::DrawDebugCylinder(const struct FVector& Start, const struct FVector& End, float Radius, int32_t Segments, uint8_t R, uint8_t G, uint8_t B, bool bPersistentLines)
{
	static UFunction* uFnDrawDebugCylinder = nullptr;

	if (!uFnDrawDebugCylinder)
	{
		uFnDrawDebugCylinder = UFunction::FindFunction("Function Engine.Actor.DrawDebugCylinder");
	}

	AActor_execDrawDebugCylinder_Params DrawDebugCylinder_Params;
	memset(&DrawDebugCylinder_Params, 0, sizeof(DrawDebugCylinder_Params));
	memcpy_s(&DrawDebugCylinder_Params.Start, sizeof(DrawDebugCylinder_Params.Start), &Start, sizeof(Start));
	memcpy_s(&DrawDebugCylinder_Params.End, sizeof(DrawDebugCylinder_Params.End), &End, sizeof(End));
	memcpy_s(&DrawDebugCylinder_Params.Radius, sizeof(DrawDebugCylinder_Params.Radius), &Radius, sizeof(Radius));
	memcpy_s(&DrawDebugCylinder_Params.Segments, sizeof(DrawDebugCylinder_Params.Segments), &Segments, sizeof(Segments));
	memcpy_s(&DrawDebugCylinder_Params.R, sizeof(DrawDebugCylinder_Params.R), &R, sizeof(R));
	memcpy_s(&DrawDebugCylinder_Params.G, sizeof(DrawDebugCylinder_Params.G), &G, sizeof(G));
	memcpy_s(&DrawDebugCylinder_Params.B, sizeof(DrawDebugCylinder_Params.B), &B, sizeof(B));
	DrawDebugCylinder_Params.bPersistentLines = bPersistentLines;

	uFnDrawDebugCylinder->iNative = 0;
	uFnDrawDebugCylinder->FunctionFlags &= ~0x400;
	AActor::StaticClass()->ProcessEvent(uFnDrawDebugCylinder, &DrawDebugCylinder_Params, nullptr);
	uFnDrawDebugCylinder->FunctionFlags |= 0x400;
	uFnDrawDebugCylinder->iNative = 19166;
};

// Function Engine.Actor.DrawDebugSphere
// [0x00026401] (FUNC_Final | FUNC_Native | FUNC_Static | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[19171])
// Parameter Info:
// struct FVector                 Center                         (CPF_Parm)
// float                          Radius                         (CPF_Parm)
// int32_t                        Segments                       (CPF_Parm)
// uint8_t                        R                              (CPF_Parm)
// uint8_t                        G                              (CPF_Parm)
// uint8_t                        B                              (CPF_Parm)
// uint32_t                       bPersistentLines               (CPF_OptionalParm | CPF_Parm)

void AActor::DrawDebugSphere(const struct FVector& Center, float Radius, int32_t Segments, uint8_t R, uint8_t G, uint8_t B, bool bPersistentLines)
{
	static UFunction* uFnDrawDebugSphere = nullptr;

	if (!uFnDrawDebugSphere)
	{
		uFnDrawDebugSphere = UFunction::FindFunction("Function Engine.Actor.DrawDebugSphere");
	}

	AActor_execDrawDebugSphere_Params DrawDebugSphere_Params;
	memset(&DrawDebugSphere_Params, 0, sizeof(DrawDebugSphere_Params));
	memcpy_s(&DrawDebugSphere_Params.Center, sizeof(DrawDebugSphere_Params.Center), &Center, sizeof(Center));
	memcpy_s(&DrawDebugSphere_Params.Radius, sizeof(DrawDebugSphere_Params.Radius), &Radius, sizeof(Radius));
	memcpy_s(&DrawDebugSphere_Params.Segments, sizeof(DrawDebugSphere_Params.Segments), &Segments, sizeof(Segments));
	memcpy_s(&DrawDebugSphere_Params.R, sizeof(DrawDebugSphere_Params.R), &R, sizeof(R));
	memcpy_s(&DrawDebugSphere_Params.G, sizeof(DrawDebugSphere_Params.G), &G, sizeof(G));
	memcpy_s(&DrawDebugSphere_Params.B, sizeof(DrawDebugSphere_Params.B), &B, sizeof(B));
	DrawDebugSphere_Params.bPersistentLines = bPersistentLines;

	uFnDrawDebugSphere->iNative = 0;
	uFnDrawDebugSphere->FunctionFlags &= ~0x400;
	AActor::StaticClass()->ProcessEvent(uFnDrawDebugSphere, &DrawDebugSphere_Params, nullptr);
	uFnDrawDebugSphere->FunctionFlags |= 0x400;
	uFnDrawDebugSphere->iNative = 19171;
};

// Function Engine.Actor.DrawDebugCoordinateSystem
// [0x00026401] (FUNC_Final | FUNC_Native | FUNC_Static | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[19165])
// Parameter Info:
// struct FVector                 AxisLoc                        (CPF_Parm)
// struct FRotator                AxisRot                        (CPF_Parm)
// float                          Scale                          (CPF_Parm)
// uint32_t                       bPersistentLines               (CPF_OptionalParm | CPF_Parm)

void AActor::DrawDebugCoordinateSystem(const struct FVector& AxisLoc, const struct FRotator& AxisRot, float Scale, bool bPersistentLines)
{
	static UFunction* uFnDrawDebugCoordinateSystem = nullptr;

	if (!uFnDrawDebugCoordinateSystem)
	{
		uFnDrawDebugCoordinateSystem = UFunction::FindFunction("Function Engine.Actor.DrawDebugCoordinateSystem");
	}

	AActor_execDrawDebugCoordinateSystem_Params DrawDebugCoordinateSystem_Params;
	memset(&DrawDebugCoordinateSystem_Params, 0, sizeof(DrawDebugCoordinateSystem_Params));
	memcpy_s(&DrawDebugCoordinateSystem_Params.AxisLoc, sizeof(DrawDebugCoordinateSystem_Params.AxisLoc), &AxisLoc, sizeof(AxisLoc));
	memcpy_s(&DrawDebugCoordinateSystem_Params.AxisRot, sizeof(DrawDebugCoordinateSystem_Params.AxisRot), &AxisRot, sizeof(AxisRot));
	memcpy_s(&DrawDebugCoordinateSystem_Params.Scale, sizeof(DrawDebugCoordinateSystem_Params.Scale), &Scale, sizeof(Scale));
	DrawDebugCoordinateSystem_Params.bPersistentLines = bPersistentLines;

	uFnDrawDebugCoordinateSystem->iNative = 0;
	uFnDrawDebugCoordinateSystem->FunctionFlags &= ~0x400;
	AActor::StaticClass()->ProcessEvent(uFnDrawDebugCoordinateSystem, &DrawDebugCoordinateSystem_Params, nullptr);
	uFnDrawDebugCoordinateSystem->FunctionFlags |= 0x400;
	uFnDrawDebugCoordinateSystem->iNative = 19165;
};

// Function Engine.Actor.DrawDebugStar
// [0x00026401] (FUNC_Final | FUNC_Native | FUNC_Static | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[19172])
// Parameter Info:
// struct FVector                 Position                       (CPF_Parm)
// float                          Size                           (CPF_Parm)
// uint8_t                        R                              (CPF_Parm)
// uint8_t                        G                              (CPF_Parm)
// uint8_t                        B                              (CPF_Parm)
// uint32_t                       bPersistentLines               (CPF_OptionalParm | CPF_Parm)

void AActor::DrawDebugStar(const struct FVector& Position, float Size, uint8_t R, uint8_t G, uint8_t B, bool bPersistentLines)
{
	static UFunction* uFnDrawDebugStar = nullptr;

	if (!uFnDrawDebugStar)
	{
		uFnDrawDebugStar = UFunction::FindFunction("Function Engine.Actor.DrawDebugStar");
	}

	AActor_execDrawDebugStar_Params DrawDebugStar_Params;
	memset(&DrawDebugStar_Params, 0, sizeof(DrawDebugStar_Params));
	memcpy_s(&DrawDebugStar_Params.Position, sizeof(DrawDebugStar_Params.Position), &Position, sizeof(Position));
	memcpy_s(&DrawDebugStar_Params.Size, sizeof(DrawDebugStar_Params.Size), &Size, sizeof(Size));
	memcpy_s(&DrawDebugStar_Params.R, sizeof(DrawDebugStar_Params.R), &R, sizeof(R));
	memcpy_s(&DrawDebugStar_Params.G, sizeof(DrawDebugStar_Params.G), &G, sizeof(G));
	memcpy_s(&DrawDebugStar_Params.B, sizeof(DrawDebugStar_Params.B), &B, sizeof(B));
	DrawDebugStar_Params.bPersistentLines = bPersistentLines;

	uFnDrawDebugStar->iNative = 0;
	uFnDrawDebugStar->FunctionFlags &= ~0x400;
	AActor::StaticClass()->ProcessEvent(uFnDrawDebugStar, &DrawDebugStar_Params, nullptr);
	uFnDrawDebugStar->FunctionFlags |= 0x400;
	uFnDrawDebugStar->iNative = 19172;
};

// Function Engine.Actor.DrawDebugBox
// [0x00026401] (FUNC_Final | FUNC_Native | FUNC_Static | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[19163])
// Parameter Info:
// struct FVector                 Center                         (CPF_Parm)
// struct FVector                 Extent                         (CPF_Parm)
// uint8_t                        R                              (CPF_Parm)
// uint8_t                        G                              (CPF_Parm)
// uint8_t                        B                              (CPF_Parm)
// uint32_t                       bPersistentLines               (CPF_OptionalParm | CPF_Parm)

void AActor::DrawDebugBox(const struct FVector& Center, const struct FVector& Extent, uint8_t R, uint8_t G, uint8_t B, bool bPersistentLines)
{
	static UFunction* uFnDrawDebugBox = nullptr;

	if (!uFnDrawDebugBox)
	{
		uFnDrawDebugBox = UFunction::FindFunction("Function Engine.Actor.DrawDebugBox");
	}

	AActor_execDrawDebugBox_Params DrawDebugBox_Params;
	memset(&DrawDebugBox_Params, 0, sizeof(DrawDebugBox_Params));
	memcpy_s(&DrawDebugBox_Params.Center, sizeof(DrawDebugBox_Params.Center), &Center, sizeof(Center));
	memcpy_s(&DrawDebugBox_Params.Extent, sizeof(DrawDebugBox_Params.Extent), &Extent, sizeof(Extent));
	memcpy_s(&DrawDebugBox_Params.R, sizeof(DrawDebugBox_Params.R), &R, sizeof(R));
	memcpy_s(&DrawDebugBox_Params.G, sizeof(DrawDebugBox_Params.G), &G, sizeof(G));
	memcpy_s(&DrawDebugBox_Params.B, sizeof(DrawDebugBox_Params.B), &B, sizeof(B));
	DrawDebugBox_Params.bPersistentLines = bPersistentLines;

	uFnDrawDebugBox->iNative = 0;
	uFnDrawDebugBox->FunctionFlags &= ~0x400;
	AActor::StaticClass()->ProcessEvent(uFnDrawDebugBox, &DrawDebugBox_Params, nullptr);
	uFnDrawDebugBox->FunctionFlags |= 0x400;
	uFnDrawDebugBox->iNative = 19163;
};

// Function Engine.Actor.DrawDebugPoint
// [0x00026401] (FUNC_Final | FUNC_Native | FUNC_Static | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[19170])
// Parameter Info:
// struct FVector                 Position                       (CPF_Parm)
// float                          Size                           (CPF_Parm)
// struct FLinearColor            PointColor                     (CPF_Parm)
// uint32_t                       bPersistentLines               (CPF_OptionalParm | CPF_Parm)

void AActor::DrawDebugPoint(const struct FVector& Position, float Size, const struct FLinearColor& PointColor, bool bPersistentLines)
{
	static UFunction* uFnDrawDebugPoint = nullptr;

	if (!uFnDrawDebugPoint)
	{
		uFnDrawDebugPoint = UFunction::FindFunction("Function Engine.Actor.DrawDebugPoint");
	}

	AActor_execDrawDebugPoint_Params DrawDebugPoint_Params;
	memset(&DrawDebugPoint_Params, 0, sizeof(DrawDebugPoint_Params));
	memcpy_s(&DrawDebugPoint_Params.Position, sizeof(DrawDebugPoint_Params.Position), &Position, sizeof(Position));
	memcpy_s(&DrawDebugPoint_Params.Size, sizeof(DrawDebugPoint_Params.Size), &Size, sizeof(Size));
	memcpy_s(&DrawDebugPoint_Params.PointColor, sizeof(DrawDebugPoint_Params.PointColor), &PointColor, sizeof(PointColor));
	DrawDebugPoint_Params.bPersistentLines = bPersistentLines;

	uFnDrawDebugPoint->iNative = 0;
	uFnDrawDebugPoint->FunctionFlags &= ~0x400;
	AActor::StaticClass()->ProcessEvent(uFnDrawDebugPoint, &DrawDebugPoint_Params, nullptr);
	uFnDrawDebugPoint->FunctionFlags |= 0x400;
	uFnDrawDebugPoint->iNative = 19170;
};

// Function Engine.Actor.DrawDebugLine
// [0x00026401] (FUNC_Final | FUNC_Native | FUNC_Static | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[19169])
// Parameter Info:
// struct FVector                 LineStart                      (CPF_Parm)
// struct FVector                 LineEnd                        (CPF_Parm)
// uint8_t                        R                              (CPF_Parm)
// uint8_t                        G                              (CPF_Parm)
// uint8_t                        B                              (CPF_Parm)
// uint32_t                       bPersistentLines               (CPF_OptionalParm | CPF_Parm)

void AActor::DrawDebugLine(const struct FVector& LineStart, const struct FVector& LineEnd, uint8_t R, uint8_t G, uint8_t B, bool bPersistentLines)
{
	static UFunction* uFnDrawDebugLine = nullptr;

	if (!uFnDrawDebugLine)
	{
		uFnDrawDebugLine = UFunction::FindFunction("Function Engine.Actor.DrawDebugLine");
	}

	AActor_execDrawDebugLine_Params DrawDebugLine_Params;
	memset(&DrawDebugLine_Params, 0, sizeof(DrawDebugLine_Params));
	memcpy_s(&DrawDebugLine_Params.LineStart, sizeof(DrawDebugLine_Params.LineStart), &LineStart, sizeof(LineStart));
	memcpy_s(&DrawDebugLine_Params.LineEnd, sizeof(DrawDebugLine_Params.LineEnd), &LineEnd, sizeof(LineEnd));
	memcpy_s(&DrawDebugLine_Params.R, sizeof(DrawDebugLine_Params.R), &R, sizeof(R));
	memcpy_s(&DrawDebugLine_Params.G, sizeof(DrawDebugLine_Params.G), &G, sizeof(G));
	memcpy_s(&DrawDebugLine_Params.B, sizeof(DrawDebugLine_Params.B), &B, sizeof(B));
	DrawDebugLine_Params.bPersistentLines = bPersistentLines;

	uFnDrawDebugLine->iNative = 0;
	uFnDrawDebugLine->FunctionFlags &= ~0x400;
	AActor::StaticClass()->ProcessEvent(uFnDrawDebugLine, &DrawDebugLine_Params, nullptr);
	uFnDrawDebugLine->FunctionFlags |= 0x400;
	uFnDrawDebugLine->iNative = 19169;
};

// Function Engine.Actor.FlushPersistentDebugLines
// [0x00022401] (FUNC_Final | FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags) (iNative[20191])
// Parameter Info:

void AActor::FlushPersistentDebugLines()
{
	static UFunction* uFnFlushPersistentDebugLines = nullptr;

	if (!uFnFlushPersistentDebugLines)
	{
		uFnFlushPersistentDebugLines = UFunction::FindFunction("Function Engine.Actor.FlushPersistentDebugLines");
	}

	AActor_execFlushPersistentDebugLines_Params FlushPersistentDebugLines_Params;
	memset(&FlushPersistentDebugLines_Params, 0, sizeof(FlushPersistentDebugLines_Params));

	uFnFlushPersistentDebugLines->iNative = 0;
	uFnFlushPersistentDebugLines->FunctionFlags &= ~0x400;
	AActor::StaticClass()->ProcessEvent(uFnFlushPersistentDebugLines, &FlushPersistentDebugLines_Params, nullptr);
	uFnFlushPersistentDebugLines->FunctionFlags |= 0x400;
	uFnFlushPersistentDebugLines->iNative = 20191;
};

// Function Engine.Actor.GetBasedPosition
// [0x00022401] (FUNC_Final | FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags) (iNative[20502])
// Parameter Info:
// struct FVector                 ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FBasedPosition          BP                             (CPF_Parm)

struct FVector AActor::GetBasedPosition(const struct FBasedPosition& BP)
{
	static UFunction* uFnGetBasedPosition = nullptr;

	if (!uFnGetBasedPosition)
	{
		uFnGetBasedPosition = UFunction::FindFunction("Function Engine.Actor.GetBasedPosition");
	}

	AActor_execGetBasedPosition_Params GetBasedPosition_Params;
	memset(&GetBasedPosition_Params, 0, sizeof(GetBasedPosition_Params));
	memcpy_s(&GetBasedPosition_Params.BP, sizeof(GetBasedPosition_Params.BP), &BP, sizeof(BP));

	uFnGetBasedPosition->iNative = 0;
	uFnGetBasedPosition->FunctionFlags &= ~0x400;
	AActor::StaticClass()->ProcessEvent(uFnGetBasedPosition, &GetBasedPosition_Params, nullptr);
	uFnGetBasedPosition->FunctionFlags |= 0x400;
	uFnGetBasedPosition->iNative = 20502;

	return GetBasedPosition_Params.ReturnValue;
};

// Function Engine.Actor.SetBasedPosition
// [0x00426401] (FUNC_Final | FUNC_Native | FUNC_Static | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[25589])
// Parameter Info:
// struct FVector                 pos                            (CPF_Parm)
// class AActor*                  ForcedBase                     (CPF_OptionalParm | CPF_Parm)
// struct FBasedPosition          BP                             (CPF_Parm | CPF_OutParm)

void AActor::SetBasedPosition(const struct FVector& pos, class AActor* ForcedBase, struct FBasedPosition& BP)
{
	static UFunction* uFnSetBasedPosition = nullptr;

	if (!uFnSetBasedPosition)
	{
		uFnSetBasedPosition = UFunction::FindFunction("Function Engine.Actor.SetBasedPosition");
	}

	AActor_execSetBasedPosition_Params SetBasedPosition_Params;
	memset(&SetBasedPosition_Params, 0, sizeof(SetBasedPosition_Params));
	memcpy_s(&SetBasedPosition_Params.pos, sizeof(SetBasedPosition_Params.pos), &pos, sizeof(pos));
	SetBasedPosition_Params.ForcedBase = ForcedBase;
	memcpy_s(&SetBasedPosition_Params.BP, sizeof(SetBasedPosition_Params.BP), &BP, sizeof(BP));

	uFnSetBasedPosition->iNative = 0;
	uFnSetBasedPosition->FunctionFlags &= ~0x400;
	AActor::StaticClass()->ProcessEvent(uFnSetBasedPosition, &SetBasedPosition_Params, nullptr);
	uFnSetBasedPosition->FunctionFlags |= 0x400;
	uFnSetBasedPosition->iNative = 25589;

	memcpy_s(&BP, sizeof(BP), &SetBasedPosition_Params.BP, sizeof(SetBasedPosition_Params.BP));
};

// Function Engine.Actor.BP2Vect
// [0x00022401] (FUNC_Final | FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags) (iNative[17202])
// Parameter Info:
// struct FVector                 ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FBasedPosition          BP                             (CPF_Parm)

struct FVector AActor::BP2Vect(const struct FBasedPosition& BP)
{
	static UFunction* uFnBP2Vect = nullptr;

	if (!uFnBP2Vect)
	{
		uFnBP2Vect = UFunction::FindFunction("Function Engine.Actor.BP2Vect");
	}

	AActor_execBP2Vect_Params BP2Vect_Params;
	memset(&BP2Vect_Params, 0, sizeof(BP2Vect_Params));
	memcpy_s(&BP2Vect_Params.BP, sizeof(BP2Vect_Params.BP), &BP, sizeof(BP));

	uFnBP2Vect->iNative = 0;
	uFnBP2Vect->FunctionFlags &= ~0x400;
	AActor::StaticClass()->ProcessEvent(uFnBP2Vect, &BP2Vect_Params, nullptr);
	uFnBP2Vect->FunctionFlags |= 0x400;
	uFnBP2Vect->iNative = 17202;

	return BP2Vect_Params.ReturnValue;
};

// Function Engine.Actor.Vect2BP
// [0x00426401] (FUNC_Final | FUNC_Native | FUNC_Static | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[27074])
// Parameter Info:
// struct FVector                 pos                            (CPF_Parm)
// class AActor*                  ForcedBase                     (CPF_OptionalParm | CPF_Parm)
// struct FBasedPosition          BP                             (CPF_Parm | CPF_OutParm)

void AActor::Vect2BP(const struct FVector& pos, class AActor* ForcedBase, struct FBasedPosition& BP)
{
	static UFunction* uFnVect2BP = nullptr;

	if (!uFnVect2BP)
	{
		uFnVect2BP = UFunction::FindFunction("Function Engine.Actor.Vect2BP");
	}

	AActor_execVect2BP_Params Vect2BP_Params;
	memset(&Vect2BP_Params, 0, sizeof(Vect2BP_Params));
	memcpy_s(&Vect2BP_Params.pos, sizeof(Vect2BP_Params.pos), &pos, sizeof(pos));
	Vect2BP_Params.ForcedBase = ForcedBase;
	memcpy_s(&Vect2BP_Params.BP, sizeof(Vect2BP_Params.BP), &BP, sizeof(BP));

	uFnVect2BP->iNative = 0;
	uFnVect2BP->FunctionFlags &= ~0x400;
	AActor::StaticClass()->ProcessEvent(uFnVect2BP, &Vect2BP_Params, nullptr);
	uFnVect2BP->FunctionFlags |= 0x400;
	uFnVect2BP->iNative = 27074;

	memcpy_s(&BP, sizeof(BP), &Vect2BP_Params.BP, sizeof(Vect2BP_Params.BP));
};

// Function Engine.Actor.ReplicatedEvent
// [0x00020900] (FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FName                    VarName                        (CPF_Parm)

void AActor::eventReplicatedEvent(const class FName& VarName)
{
	static UFunction* uFnReplicatedEvent = nullptr;

	if (!uFnReplicatedEvent)
	{
		uFnReplicatedEvent = UFunction::FindFunction("Function Engine.Actor.ReplicatedEvent");
	}

	AActor_eventReplicatedEvent_Params ReplicatedEvent_Params;
	memset(&ReplicatedEvent_Params, 0, sizeof(ReplicatedEvent_Params));
	memcpy_s(&ReplicatedEvent_Params.VarName, sizeof(ReplicatedEvent_Params.VarName), &VarName, sizeof(VarName));

	this->ProcessEvent(uFnReplicatedEvent, &ReplicatedEvent_Params, nullptr);
};

// Function Engine.Actor.IsOwnedBy
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[21412])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class AActor*                  TestActor                      (CPF_Parm)

bool AActor::IsOwnedBy(class AActor* TestActor)
{
	static UFunction* uFnIsOwnedBy = nullptr;

	if (!uFnIsOwnedBy)
	{
		uFnIsOwnedBy = UFunction::FindFunction("Function Engine.Actor.IsOwnedBy");
	}

	AActor_execIsOwnedBy_Params IsOwnedBy_Params;
	memset(&IsOwnedBy_Params, 0, sizeof(IsOwnedBy_Params));
	IsOwnedBy_Params.TestActor = TestActor;

	uFnIsOwnedBy->iNative = 0;
	uFnIsOwnedBy->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnIsOwnedBy, &IsOwnedBy_Params, nullptr);
	uFnIsOwnedBy->FunctionFlags |= 0x400;
	uFnIsOwnedBy->iNative = 21412;

	return IsOwnedBy_Params.ReturnValue;
};

// Function Engine.Actor.GetBaseMost
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20503])
// Parameter Info:
// class AActor*                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class AActor* AActor::GetBaseMost()
{
	static UFunction* uFnGetBaseMost = nullptr;

	if (!uFnGetBaseMost)
	{
		uFnGetBaseMost = UFunction::FindFunction("Function Engine.Actor.GetBaseMost");
	}

	AActor_execGetBaseMost_Params GetBaseMost_Params;
	memset(&GetBaseMost_Params, 0, sizeof(GetBaseMost_Params));

	uFnGetBaseMost->iNative = 0;
	uFnGetBaseMost->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetBaseMost, &GetBaseMost_Params, nullptr);
	uFnGetBaseMost->FunctionFlags |= 0x400;
	uFnGetBaseMost->iNative = 20503;

	return GetBaseMost_Params.ReturnValue;
};

// Function Engine.Actor.IsBasedOn
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[21361])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class AActor*                  TestActor                      (CPF_Parm)

bool AActor::IsBasedOn(class AActor* TestActor)
{
	static UFunction* uFnIsBasedOn = nullptr;

	if (!uFnIsBasedOn)
	{
		uFnIsBasedOn = UFunction::FindFunction("Function Engine.Actor.IsBasedOn");
	}

	AActor_execIsBasedOn_Params IsBasedOn_Params;
	memset(&IsBasedOn_Params, 0, sizeof(IsBasedOn_Params));
	IsBasedOn_Params.TestActor = TestActor;

	uFnIsBasedOn->iNative = 0;
	uFnIsBasedOn->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnIsBasedOn, &IsBasedOn_Params, nullptr);
	uFnIsBasedOn->FunctionFlags |= 0x400;
	uFnIsBasedOn->iNative = 21361;

	return IsBasedOn_Params.ReturnValue;
};

// Function Engine.Actor.FindBase
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20083])
// Parameter Info:

void AActor::FindBase()
{
	static UFunction* uFnFindBase = nullptr;

	if (!uFnFindBase)
	{
		uFnFindBase = UFunction::FindFunction("Function Engine.Actor.FindBase");
	}

	AActor_execFindBase_Params FindBase_Params;
	memset(&FindBase_Params, 0, sizeof(FindBase_Params));

	uFnFindBase->iNative = 0;
	uFnFindBase->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnFindBase, &FindBase_Params, nullptr);
	uFnFindBase->FunctionFlags |= 0x400;
	uFnFindBase->iNative = 20083;
};

// Function Engine.Actor.SetOwner
// [0x11000020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25731])
// Parameter Info:
// class AActor*                  NewOwner                       (CPF_Parm)

void AActor::SetOwner(class AActor* NewOwner)
{
	static UFunction* uFnSetOwner = nullptr;

	if (!uFnSetOwner)
	{
		uFnSetOwner = UFunction::FindFunction("Function Engine.Actor.SetOwner");
	}

	AActor_execSetOwner_Params SetOwner_Params;
	memset(&SetOwner_Params, 0, sizeof(SetOwner_Params));
	SetOwner_Params.NewOwner = NewOwner;

	uFnSetOwner->iNative = 0;
	uFnSetOwner->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetOwner, &SetOwner_Params, nullptr);
	uFnSetOwner->FunctionFlags |= 0x400;
	uFnSetOwner->iNative = 25731;
};

// Function Engine.Actor.SetBase
// [0x12A00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[25588])
// Parameter Info:
// class AActor*                  NewBase                        (CPF_Parm)
// struct FVector                 NewFloor                       (CPF_OptionalParm | CPF_Parm)
// class USkeletalMeshComponent*  SkelComp                       (CPF_OptionalParm | CPF_Parm | CPF_EditInline)
// class FName                    AttachName                     (CPF_OptionalParm | CPF_Parm)

void AActor::SetBase(class AActor* NewBase, const struct FVector& NewFloor, class USkeletalMeshComponent* SkelComp, const class FName& AttachName)
{
	static UFunction* uFnSetBase = nullptr;

	if (!uFnSetBase)
	{
		uFnSetBase = UFunction::FindFunction("Function Engine.Actor.SetBase");
	}

	AActor_execSetBase_Params SetBase_Params;
	memset(&SetBase_Params, 0, sizeof(SetBase_Params));
	SetBase_Params.NewBase = NewBase;
	memcpy_s(&SetBase_Params.NewFloor, sizeof(SetBase_Params.NewFloor), &NewFloor, sizeof(NewFloor));
	SetBase_Params.SkelComp = SkelComp;
	memcpy_s(&SetBase_Params.AttachName, sizeof(SetBase_Params.AttachName), &AttachName, sizeof(AttachName));

	uFnSetBase->iNative = 0;
	uFnSetBase->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetBase, &SetBase_Params, nullptr);
	uFnSetBase->FunctionFlags |= 0x400;
	uFnSetBase->iNative = 25588;
};

// Function Engine.Actor.GetTerminalVelocity
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20784])
// Parameter Info:
// float                          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

float AActor::GetTerminalVelocity()
{
	static UFunction* uFnGetTerminalVelocity = nullptr;

	if (!uFnGetTerminalVelocity)
	{
		uFnGetTerminalVelocity = UFunction::FindFunction("Function Engine.Actor.GetTerminalVelocity");
	}

	AActor_execGetTerminalVelocity_Params GetTerminalVelocity_Params;
	memset(&GetTerminalVelocity_Params, 0, sizeof(GetTerminalVelocity_Params));

	uFnGetTerminalVelocity->iNative = 0;
	uFnGetTerminalVelocity->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetTerminalVelocity, &GetTerminalVelocity_Params, nullptr);
	uFnGetTerminalVelocity->FunctionFlags |= 0x400;
	uFnGetTerminalVelocity->iNative = 20784;

	return GetTerminalVelocity_Params.ReturnValue;
};

// Function Engine.Actor.AutonomousPhysics
// [0xF8300020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[15757])
// Parameter Info:
// float                          DeltaSeconds                   (CPF_Parm)

void AActor::AutonomousPhysics(float DeltaSeconds)
{
	static UFunction* uFnAutonomousPhysics = nullptr;

	if (!uFnAutonomousPhysics)
	{
		uFnAutonomousPhysics = UFunction::FindFunction("Function Engine.Actor.AutonomousPhysics");
	}

	AActor_execAutonomousPhysics_Params AutonomousPhysics_Params;
	memset(&AutonomousPhysics_Params, 0, sizeof(AutonomousPhysics_Params));
	memcpy_s(&AutonomousPhysics_Params.DeltaSeconds, sizeof(AutonomousPhysics_Params.DeltaSeconds), &DeltaSeconds, sizeof(DeltaSeconds));

	uFnAutonomousPhysics->iNative = 0;
	uFnAutonomousPhysics->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnAutonomousPhysics, &AutonomousPhysics_Params, nullptr);
	uFnAutonomousPhysics->FunctionFlags |= 0x400;
	uFnAutonomousPhysics->iNative = 15757;
};

// Function Engine.Actor.MoveSmooth
// [0xF8100020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[23001])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FVector                 Delta                          (CPF_Parm)

bool AActor::MoveSmooth(const struct FVector& Delta)
{
	static UFunction* uFnMoveSmooth = nullptr;

	if (!uFnMoveSmooth)
	{
		uFnMoveSmooth = UFunction::FindFunction("Function Engine.Actor.MoveSmooth");
	}

	AActor_execMoveSmooth_Params MoveSmooth_Params;
	memset(&MoveSmooth_Params, 0, sizeof(MoveSmooth_Params));
	memcpy_s(&MoveSmooth_Params.Delta, sizeof(MoveSmooth_Params.Delta), &Delta, sizeof(Delta));

	uFnMoveSmooth->iNative = 0;
	uFnMoveSmooth->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnMoveSmooth, &MoveSmooth_Params, nullptr);
	uFnMoveSmooth->FunctionFlags |= 0x400;
	uFnMoveSmooth->iNative = 23001;

	return MoveSmooth_Params.ReturnValue;
};

// Function Engine.Actor.fixedTurn
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20158])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        Current                        (CPF_Parm)
// int32_t                        Desired                        (CPF_Parm)
// int32_t                        DeltaRate                      (CPF_Parm)

int32_t AActor::fixedTurn(int32_t Current, int32_t Desired, int32_t DeltaRate)
{
	static UFunction* uFnfixedTurn = nullptr;

	if (!uFnfixedTurn)
	{
		uFnfixedTurn = UFunction::FindFunction("Function Engine.Actor.fixedTurn");
	}

	AActor_execfixedTurn_Params fixedTurn_Params;
	memset(&fixedTurn_Params, 0, sizeof(fixedTurn_Params));
	memcpy_s(&fixedTurn_Params.Current, sizeof(fixedTurn_Params.Current), &Current, sizeof(Current));
	memcpy_s(&fixedTurn_Params.Desired, sizeof(fixedTurn_Params.Desired), &Desired, sizeof(Desired));
	memcpy_s(&fixedTurn_Params.DeltaRate, sizeof(fixedTurn_Params.DeltaRate), &DeltaRate, sizeof(DeltaRate));

	uFnfixedTurn->iNative = 0;
	uFnfixedTurn->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnfixedTurn, &fixedTurn_Params, nullptr);
	uFnfixedTurn->FunctionFlags |= 0x400;
	uFnfixedTurn->iNative = 20158;

	return fixedTurn_Params.ReturnValue;
};

// Function Engine.Actor.SetHardAttach
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[25673])
// Parameter Info:
// uint32_t                       bNewHardAttach                 (CPF_OptionalParm | CPF_Parm)

void AActor::SetHardAttach(bool bNewHardAttach)
{
	static UFunction* uFnSetHardAttach = nullptr;

	if (!uFnSetHardAttach)
	{
		uFnSetHardAttach = UFunction::FindFunction("Function Engine.Actor.SetHardAttach");
	}

	AActor_execSetHardAttach_Params SetHardAttach_Params;
	memset(&SetHardAttach_Params, 0, sizeof(SetHardAttach_Params));
	SetHardAttach_Params.bNewHardAttach = bNewHardAttach;

	uFnSetHardAttach->iNative = 0;
	uFnSetHardAttach->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetHardAttach, &SetHardAttach_Params, nullptr);
	uFnSetHardAttach->FunctionFlags |= 0x400;
	uFnSetHardAttach->iNative = 25673;
};

// Function Engine.Actor.SetRelativeLocation
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25766])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FVector                 NewLocation                    (CPF_Parm)

bool AActor::SetRelativeLocation(const struct FVector& NewLocation)
{
	static UFunction* uFnSetRelativeLocation = nullptr;

	if (!uFnSetRelativeLocation)
	{
		uFnSetRelativeLocation = UFunction::FindFunction("Function Engine.Actor.SetRelativeLocation");
	}

	AActor_execSetRelativeLocation_Params SetRelativeLocation_Params;
	memset(&SetRelativeLocation_Params, 0, sizeof(SetRelativeLocation_Params));
	memcpy_s(&SetRelativeLocation_Params.NewLocation, sizeof(SetRelativeLocation_Params.NewLocation), &NewLocation, sizeof(NewLocation));

	uFnSetRelativeLocation->iNative = 0;
	uFnSetRelativeLocation->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetRelativeLocation, &SetRelativeLocation_Params, nullptr);
	uFnSetRelativeLocation->FunctionFlags |= 0x400;
	uFnSetRelativeLocation->iNative = 25766;

	return SetRelativeLocation_Params.ReturnValue;
};

// Function Engine.Actor.SetRelativeRotation
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25767])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FRotator                NewRotation                    (CPF_Parm)

bool AActor::SetRelativeRotation(const struct FRotator& NewRotation)
{
	static UFunction* uFnSetRelativeRotation = nullptr;

	if (!uFnSetRelativeRotation)
	{
		uFnSetRelativeRotation = UFunction::FindFunction("Function Engine.Actor.SetRelativeRotation");
	}

	AActor_execSetRelativeRotation_Params SetRelativeRotation_Params;
	memset(&SetRelativeRotation_Params, 0, sizeof(SetRelativeRotation_Params));
	memcpy_s(&SetRelativeRotation_Params.NewRotation, sizeof(SetRelativeRotation_Params.NewRotation), &NewRotation, sizeof(NewRotation));

	uFnSetRelativeRotation->iNative = 0;
	uFnSetRelativeRotation->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetRelativeRotation, &SetRelativeRotation_Params, nullptr);
	uFnSetRelativeRotation->FunctionFlags |= 0x400;
	uFnSetRelativeRotation->iNative = 25767;

	return SetRelativeRotation_Params.ReturnValue;
};

// Function Engine.Actor.SetZone
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25842])
// Parameter Info:
// uint32_t                       bForceRefresh                  (CPF_Parm)

void AActor::SetZone(bool bForceRefresh)
{
	static UFunction* uFnSetZone = nullptr;

	if (!uFnSetZone)
	{
		uFnSetZone = UFunction::FindFunction("Function Engine.Actor.SetZone");
	}

	AActor_execSetZone_Params SetZone_Params;
	memset(&SetZone_Params, 0, sizeof(SetZone_Params));
	SetZone_Params.bForceRefresh = bForceRefresh;

	uFnSetZone->iNative = 0;
	uFnSetZone->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetZone, &SetZone_Params, nullptr);
	uFnSetZone->FunctionFlags |= 0x400;
	uFnSetZone->iNative = 25842;
};

// Function Engine.Actor.MovingWhichWay
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[23011])
// Parameter Info:
// EMoveDir                       ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// float                          Amount                         (CPF_Parm | CPF_OutParm)

EMoveDir AActor::MovingWhichWay(float& Amount)
{
	static UFunction* uFnMovingWhichWay = nullptr;

	if (!uFnMovingWhichWay)
	{
		uFnMovingWhichWay = UFunction::FindFunction("Function Engine.Actor.MovingWhichWay");
	}

	AActor_execMovingWhichWay_Params MovingWhichWay_Params;
	memset(&MovingWhichWay_Params, 0, sizeof(MovingWhichWay_Params));
	memcpy_s(&MovingWhichWay_Params.Amount, sizeof(MovingWhichWay_Params.Amount), &Amount, sizeof(Amount));

	uFnMovingWhichWay->iNative = 0;
	uFnMovingWhichWay->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnMovingWhichWay, &MovingWhichWay_Params, nullptr);
	uFnMovingWhichWay->FunctionFlags |= 0x400;
	uFnMovingWhichWay->iNative = 23011;

	memcpy_s(&Amount, sizeof(Amount), &MovingWhichWay_Params.Amount, sizeof(MovingWhichWay_Params.Amount));

	return static_cast<EMoveDir>(MovingWhichWay_Params.ReturnValue);
};

// Function Engine.Actor.SetRotation
// [0x12B00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25772])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FRotator                NewRotation                    (CPF_Parm)

bool AActor::SetRotation(const struct FRotator& NewRotation)
{
	static UFunction* uFnSetRotation = nullptr;

	if (!uFnSetRotation)
	{
		uFnSetRotation = UFunction::FindFunction("Function Engine.Actor.SetRotation");
	}

	AActor_execSetRotation_Params SetRotation_Params;
	memset(&SetRotation_Params, 0, sizeof(SetRotation_Params));
	memcpy_s(&SetRotation_Params.NewRotation, sizeof(SetRotation_Params.NewRotation), &NewRotation, sizeof(NewRotation));

	uFnSetRotation->iNative = 0;
	uFnSetRotation->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetRotation, &SetRotation_Params, nullptr);
	uFnSetRotation->FunctionFlags |= 0x400;
	uFnSetRotation->iNative = 25772;

	return SetRotation_Params.ReturnValue;
};

// Function Engine.Actor.SetLocation
// [0x10B04020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_K2Call | FUNC_AllFlags) (iNative[25703])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FVector                 NewLocation                    (CPF_Parm)

bool AActor::SetLocation(const struct FVector& NewLocation)
{
	static UFunction* uFnSetLocation = nullptr;

	if (!uFnSetLocation)
	{
		uFnSetLocation = UFunction::FindFunction("Function Engine.Actor.SetLocation");
	}

	AActor_execSetLocation_Params SetLocation_Params;
	memset(&SetLocation_Params, 0, sizeof(SetLocation_Params));
	memcpy_s(&SetLocation_Params.NewLocation, sizeof(SetLocation_Params.NewLocation), &NewLocation, sizeof(NewLocation));

	uFnSetLocation->iNative = 0;
	uFnSetLocation->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetLocation, &SetLocation_Params, nullptr);
	uFnSetLocation->FunctionFlags |= 0x400;
	uFnSetLocation->iNative = 25703;

	return SetLocation_Params.ReturnValue;
};

// Function Engine.Actor.Move
// [0x10A00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[22978])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FVector                 Delta                          (CPF_Parm)

bool AActor::Move(const struct FVector& Delta)
{
	static UFunction* uFnMove = nullptr;

	if (!uFnMove)
	{
		uFnMove = UFunction::FindFunction("Function Engine.Actor.Move");
	}

	AActor_execMove_Params Move_Params;
	memset(&Move_Params, 0, sizeof(Move_Params));
	memcpy_s(&Move_Params.Delta, sizeof(Move_Params.Delta), &Delta, sizeof(Delta));

	uFnMove->iNative = 0;
	uFnMove->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnMove, &Move_Params, nullptr);
	uFnMove->FunctionFlags |= 0x400;
	uFnMove->iNative = 22978;

	return Move_Params.ReturnValue;
};

// Function Engine.Actor.SetDrawScale3D
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25644])
// Parameter Info:
// struct FVector                 NewScale3D                     (CPF_Parm)

void AActor::SetDrawScale3D(const struct FVector& NewScale3D)
{
	static UFunction* uFnSetDrawScale3D = nullptr;

	if (!uFnSetDrawScale3D)
	{
		uFnSetDrawScale3D = UFunction::FindFunction("Function Engine.Actor.SetDrawScale3D");
	}

	AActor_execSetDrawScale3D_Params SetDrawScale3D_Params;
	memset(&SetDrawScale3D_Params, 0, sizeof(SetDrawScale3D_Params));
	memcpy_s(&SetDrawScale3D_Params.NewScale3D, sizeof(SetDrawScale3D_Params.NewScale3D), &NewScale3D, sizeof(NewScale3D));

	uFnSetDrawScale3D->iNative = 0;
	uFnSetDrawScale3D->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetDrawScale3D, &SetDrawScale3D_Params, nullptr);
	uFnSetDrawScale3D->FunctionFlags |= 0x400;
	uFnSetDrawScale3D->iNative = 25644;
};

// Function Engine.Actor.SetDrawScale
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25643])
// Parameter Info:
// float                          NewScale                       (CPF_Parm)

void AActor::SetDrawScale(float NewScale)
{
	static UFunction* uFnSetDrawScale = nullptr;

	if (!uFnSetDrawScale)
	{
		uFnSetDrawScale = UFunction::FindFunction("Function Engine.Actor.SetDrawScale");
	}

	AActor_execSetDrawScale_Params SetDrawScale_Params;
	memset(&SetDrawScale_Params, 0, sizeof(SetDrawScale_Params));
	memcpy_s(&SetDrawScale_Params.NewScale, sizeof(SetDrawScale_Params.NewScale), &NewScale, sizeof(NewScale));

	uFnSetDrawScale->iNative = 0;
	uFnSetDrawScale->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetDrawScale, &SetDrawScale_Params, nullptr);
	uFnSetDrawScale->FunctionFlags |= 0x400;
	uFnSetDrawScale->iNative = 25643;
};

// Function Engine.Actor.SetCollisionType
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25617])
// Parameter Info:
// ECollisionType                 NewCollisionType               (CPF_Parm)

void AActor::SetCollisionType(ECollisionType NewCollisionType)
{
	static UFunction* uFnSetCollisionType = nullptr;

	if (!uFnSetCollisionType)
	{
		uFnSetCollisionType = UFunction::FindFunction("Function Engine.Actor.SetCollisionType");
	}

	AActor_execSetCollisionType_Params SetCollisionType_Params;
	memset(&SetCollisionType_Params, 0, sizeof(SetCollisionType_Params));
	memcpy_s(&SetCollisionType_Params.NewCollisionType, sizeof(SetCollisionType_Params.NewCollisionType), &NewCollisionType, sizeof(NewCollisionType));

	uFnSetCollisionType->iNative = 0;
	uFnSetCollisionType->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetCollisionType, &SetCollisionType_Params, nullptr);
	uFnSetCollisionType->FunctionFlags |= 0x400;
	uFnSetCollisionType->iNative = 25617;
};

// Function Engine.Actor.SetCollisionSize
// [0x11B00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25616])
// Parameter Info:
// float                          NewRadius                      (CPF_Parm)
// float                          NewHeight                      (CPF_Parm)

void AActor::SetCollisionSize(float NewRadius, float NewHeight)
{
	static UFunction* uFnSetCollisionSize = nullptr;

	if (!uFnSetCollisionSize)
	{
		uFnSetCollisionSize = UFunction::FindFunction("Function Engine.Actor.SetCollisionSize");
	}

	AActor_execSetCollisionSize_Params SetCollisionSize_Params;
	memset(&SetCollisionSize_Params, 0, sizeof(SetCollisionSize_Params));
	memcpy_s(&SetCollisionSize_Params.NewRadius, sizeof(SetCollisionSize_Params.NewRadius), &NewRadius, sizeof(NewRadius));
	memcpy_s(&SetCollisionSize_Params.NewHeight, sizeof(SetCollisionSize_Params.NewHeight), &NewHeight, sizeof(NewHeight));

	uFnSetCollisionSize->iNative = 0;
	uFnSetCollisionSize->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetCollisionSize, &SetCollisionSize_Params, nullptr);
	uFnSetCollisionSize->FunctionFlags |= 0x400;
	uFnSetCollisionSize->iNative = 25616;
};

// Function Engine.Actor.SetCollision
// [0x10600024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[4379])
// Parameter Info:
// uint32_t                       bNewColActors                  (CPF_OptionalParm | CPF_Parm)
// uint32_t                       bNewBlockActors                (CPF_OptionalParm | CPF_Parm)
// uint32_t                       bNewIgnoreEncroachers          (CPF_OptionalParm | CPF_Parm)

void AActor::SetCollision(bool bNewColActors, bool bNewBlockActors, bool bNewIgnoreEncroachers)
{
	static UFunction* uFnSetCollision = nullptr;

	if (!uFnSetCollision)
	{
		uFnSetCollision = UFunction::FindFunction("Function Engine.Actor.SetCollision");
	}

	AActor_execSetCollision_Params SetCollision_Params;
	memset(&SetCollision_Params, 0, sizeof(SetCollision_Params));
	SetCollision_Params.bNewColActors = bNewColActors;
	SetCollision_Params.bNewBlockActors = bNewBlockActors;
	SetCollision_Params.bNewIgnoreEncroachers = bNewIgnoreEncroachers;

	uFnSetCollision->iNative = 0;
	uFnSetCollision->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetCollision, &SetCollision_Params, nullptr);
	uFnSetCollision->FunctionFlags |= 0x400;
	uFnSetCollision->iNative = 4379;
};

// Function Engine.Actor.FinishAnim
// [0x10500020409] (FUNC_Final | FUNC_Latent | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20127])
// Parameter Info:
// class UAnimNodeSequence*       SeqNode                        (CPF_Parm)

void AActor::FinishAnim(class UAnimNodeSequence* SeqNode)
{
	static UFunction* uFnFinishAnim = nullptr;

	if (!uFnFinishAnim)
	{
		uFnFinishAnim = UFunction::FindFunction("Function Engine.Actor.FinishAnim");
	}

	AActor_execFinishAnim_Params FinishAnim_Params;
	memset(&FinishAnim_Params, 0, sizeof(FinishAnim_Params));
	FinishAnim_Params.SeqNode = SeqNode;

	uFnFinishAnim->iNative = 0;
	uFnFinishAnim->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnFinishAnim, &FinishAnim_Params, nullptr);
	uFnFinishAnim->FunctionFlags |= 0x400;
	uFnFinishAnim->iNative = 20127;
};

// Function Engine.Actor.Sleep
// [0x10000020409] (FUNC_Final | FUNC_Latent | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25988])
// Parameter Info:
// float                          Seconds                        (CPF_Parm)

void AActor::Sleep(float Seconds)
{
	static UFunction* uFnSleep = nullptr;

	if (!uFnSleep)
	{
		uFnSleep = UFunction::FindFunction("Function Engine.Actor.Sleep");
	}

	AActor_execSleep_Params Sleep_Params;
	memset(&Sleep_Params, 0, sizeof(Sleep_Params));
	memcpy_s(&Sleep_Params.Seconds, sizeof(Sleep_Params.Seconds), &Seconds, sizeof(Seconds));

	uFnSleep->iNative = 0;
	uFnSleep->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSleep, &Sleep_Params, nullptr);
	uFnSleep->FunctionFlags |= 0x400;
	uFnSleep->iNative = 25988;
};

// Function Engine.Actor.ConsoleCommand
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[18363])
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)
// class FString                  Command                        (CPF_Parm | CPF_NeedCtorLink)
// uint32_t                       bWriteToLog                    (CPF_OptionalParm | CPF_Parm)

class FString AActor::ConsoleCommand(const class FString& Command, bool bWriteToLog)
{
	static UFunction* uFnConsoleCommand = nullptr;

	if (!uFnConsoleCommand)
	{
		uFnConsoleCommand = UFunction::FindFunction("Function Engine.Actor.ConsoleCommand");
	}

	AActor_execConsoleCommand_Params ConsoleCommand_Params;
	memset(&ConsoleCommand_Params, 0, sizeof(ConsoleCommand_Params));
	memcpy_s(&ConsoleCommand_Params.Command, sizeof(ConsoleCommand_Params.Command), &Command, sizeof(Command));
	ConsoleCommand_Params.bWriteToLog = bWriteToLog;

	uFnConsoleCommand->iNative = 0;
	uFnConsoleCommand->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnConsoleCommand, &ConsoleCommand_Params, nullptr);
	uFnConsoleCommand->FunctionFlags |= 0x400;
	uFnConsoleCommand->iNative = 18363;

	return ConsoleCommand_Params.ReturnValue;
};

// Function Engine.Actor.ForceUpdateComponents
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[20282])
// Parameter Info:
// uint32_t                       bCollisionUpdate               (CPF_OptionalParm | CPF_Parm)
// uint32_t                       bTransformOnly                 (CPF_OptionalParm | CPF_Parm)

void AActor::ForceUpdateComponents(bool bCollisionUpdate, bool bTransformOnly)
{
	static UFunction* uFnForceUpdateComponents = nullptr;

	if (!uFnForceUpdateComponents)
	{
		uFnForceUpdateComponents = UFunction::FindFunction("Function Engine.Actor.ForceUpdateComponents");
	}

	AActor_execForceUpdateComponents_Params ForceUpdateComponents_Params;
	memset(&ForceUpdateComponents_Params, 0, sizeof(ForceUpdateComponents_Params));
	ForceUpdateComponents_Params.bCollisionUpdate = bCollisionUpdate;
	ForceUpdateComponents_Params.bTransformOnly = bTransformOnly;

	uFnForceUpdateComponents->iNative = 0;
	uFnForceUpdateComponents->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnForceUpdateComponents, &ForceUpdateComponents_Params, nullptr);
	uFnForceUpdateComponents->FunctionFlags |= 0x400;
	uFnForceUpdateComponents->iNative = 20282;
};

// Function Engine.Volume.ProcessActorSetVolume
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AActor*                  Other                          (CPF_Parm)

void AVolume::eventProcessActorSetVolume(class AActor* Other)
{
	static UFunction* uFnProcessActorSetVolume = nullptr;

	if (!uFnProcessActorSetVolume)
	{
		uFnProcessActorSetVolume = UFunction::FindFunction("Function Engine.Volume.ProcessActorSetVolume");
	}

	AVolume_eventProcessActorSetVolume_Params ProcessActorSetVolume_Params;
	memset(&ProcessActorSetVolume_Params, 0, sizeof(ProcessActorSetVolume_Params));
	ProcessActorSetVolume_Params.Other = Other;

	this->ProcessEvent(uFnProcessActorSetVolume, &ProcessActorSetVolume_Params, nullptr);
};

// Function Engine.Volume.CollisionChanged
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AVolume::eventCollisionChanged()
{
	static UFunction* uFnCollisionChanged = nullptr;

	if (!uFnCollisionChanged)
	{
		uFnCollisionChanged = UFunction::FindFunction("Function Engine.Volume.CollisionChanged");
	}

	AVolume_eventCollisionChanged_Params CollisionChanged_Params;
	memset(&CollisionChanged_Params, 0, sizeof(CollisionChanged_Params));

	this->ProcessEvent(uFnCollisionChanged, &CollisionChanged_Params, nullptr);
};

// Function Engine.Volume.OnToggle
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_Toggle*          Action                         (CPF_Parm)

void AVolume::OnToggle(class USeqAct_Toggle* Action)
{
	static UFunction* uFnOnToggle = nullptr;

	if (!uFnOnToggle)
	{
		uFnOnToggle = UFunction::FindFunction("Function Engine.Volume.OnToggle");
	}

	AVolume_execOnToggle_Params OnToggle_Params;
	memset(&OnToggle_Params, 0, sizeof(OnToggle_Params));
	OnToggle_Params.Action = Action;

	this->ProcessEvent(uFnOnToggle, &OnToggle_Params, nullptr);
};

// Function Engine.Volume.DisplayDebug
// [0x00420102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// class AHUD*                    HUD                            (CPF_Parm)
// float                          out_YL                         (CPF_Parm | CPF_OutParm)
// float                          out_YPos                       (CPF_Parm | CPF_OutParm)

void AVolume::DisplayDebug(class AHUD* HUD, float& out_YL, float& out_YPos)
{
	static UFunction* uFnDisplayDebug = nullptr;

	if (!uFnDisplayDebug)
	{
		uFnDisplayDebug = UFunction::FindFunction("Function Engine.Volume.DisplayDebug");
	}

	AVolume_execDisplayDebug_Params DisplayDebug_Params;
	memset(&DisplayDebug_Params, 0, sizeof(DisplayDebug_Params));
	DisplayDebug_Params.HUD = HUD;
	memcpy_s(&DisplayDebug_Params.out_YL, sizeof(DisplayDebug_Params.out_YL), &out_YL, sizeof(out_YL));
	memcpy_s(&DisplayDebug_Params.out_YPos, sizeof(DisplayDebug_Params.out_YPos), &out_YPos, sizeof(out_YPos));

	this->ProcessEvent(uFnDisplayDebug, &DisplayDebug_Params, nullptr);

	memcpy_s(&out_YL, sizeof(out_YL), &DisplayDebug_Params.out_YL, sizeof(DisplayDebug_Params.out_YL));
	memcpy_s(&out_YPos, sizeof(out_YPos), &DisplayDebug_Params.out_YPos, sizeof(DisplayDebug_Params.out_YPos));
};

// Function Engine.Volume.EncompassesPoint
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[19554])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FVector                 Loc                            (CPF_Parm)

bool AVolume::EncompassesPoint(const struct FVector& Loc)
{
	static UFunction* uFnEncompassesPoint = nullptr;

	if (!uFnEncompassesPoint)
	{
		uFnEncompassesPoint = UFunction::FindFunction("Function Engine.Volume.EncompassesPoint");
	}

	AVolume_execEncompassesPoint_Params EncompassesPoint_Params;
	memset(&EncompassesPoint_Params, 0, sizeof(EncompassesPoint_Params));
	memcpy_s(&EncompassesPoint_Params.Loc, sizeof(EncompassesPoint_Params.Loc), &Loc, sizeof(Loc));

	uFnEncompassesPoint->iNative = 0;
	uFnEncompassesPoint->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnEncompassesPoint, &EncompassesPoint_Params, nullptr);
	uFnEncompassesPoint->FunctionFlags |= 0x400;
	uFnEncompassesPoint->iNative = 19554;

	return EncompassesPoint_Params.ReturnValue;
};

// Function Engine.Volume.Encompasses
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[19553])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class AActor*                  Other                          (CPF_Parm)

bool AVolume::Encompasses(class AActor* Other)
{
	static UFunction* uFnEncompasses = nullptr;

	if (!uFnEncompasses)
	{
		uFnEncompasses = UFunction::FindFunction("Function Engine.Volume.Encompasses");
	}

	AVolume_execEncompasses_Params Encompasses_Params;
	memset(&Encompasses_Params, 0, sizeof(Encompasses_Params));
	Encompasses_Params.Other = Other;

	uFnEncompasses->iNative = 0;
	uFnEncompasses->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnEncompasses, &Encompasses_Params, nullptr);
	uFnEncompasses->FunctionFlags |= 0x400;
	uFnEncompasses->iNative = 19553;

	return Encompasses_Params.ReturnValue;
};

// Function Engine.BlockingVolume.OnToggle
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_Toggle*          Action                         (CPF_Parm)

void ABlockingVolume::OnToggle(class USeqAct_Toggle* Action)
{
	static UFunction* uFnOnToggle = nullptr;

	if (!uFnOnToggle)
	{
		uFnOnToggle = UFunction::FindFunction("Function Engine.BlockingVolume.OnToggle");
	}

	ABlockingVolume_execOnToggle_Params OnToggle_Params;
	memset(&OnToggle_Params, 0, sizeof(OnToggle_Params));
	OnToggle_Params.Action = Action;

	this->ProcessEvent(uFnOnToggle, &OnToggle_Params, nullptr);
};

// Function Engine.DynamicBlockingVolume.ApplyCheckpointRecord
// [0x00420002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// struct ADynamicBlockingVolume_FCheckpointRecord Record                         (CPF_Const | CPF_Parm | CPF_OutParm)

void ADynamicBlockingVolume::ApplyCheckpointRecord(struct ADynamicBlockingVolume_FCheckpointRecord& Record)
{
	static UFunction* uFnApplyCheckpointRecord = nullptr;

	if (!uFnApplyCheckpointRecord)
	{
		uFnApplyCheckpointRecord = UFunction::FindFunction("Function Engine.DynamicBlockingVolume.ApplyCheckpointRecord");
	}

	ADynamicBlockingVolume_execApplyCheckpointRecord_Params ApplyCheckpointRecord_Params;
	memset(&ApplyCheckpointRecord_Params, 0, sizeof(ApplyCheckpointRecord_Params));
	memcpy_s(&ApplyCheckpointRecord_Params.Record, sizeof(ApplyCheckpointRecord_Params.Record), &Record, sizeof(Record));

	this->ProcessEvent(uFnApplyCheckpointRecord, &ApplyCheckpointRecord_Params, nullptr);

	memcpy_s(&Record, sizeof(Record), &ApplyCheckpointRecord_Params.Record, sizeof(ApplyCheckpointRecord_Params.Record));
};

// Function Engine.DynamicBlockingVolume.CreateCheckpointRecord
// [0x00420002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// struct ADynamicBlockingVolume_FCheckpointRecord Record                         (CPF_Parm | CPF_OutParm)

void ADynamicBlockingVolume::CreateCheckpointRecord(struct ADynamicBlockingVolume_FCheckpointRecord& Record)
{
	static UFunction* uFnCreateCheckpointRecord = nullptr;

	if (!uFnCreateCheckpointRecord)
	{
		uFnCreateCheckpointRecord = UFunction::FindFunction("Function Engine.DynamicBlockingVolume.CreateCheckpointRecord");
	}

	ADynamicBlockingVolume_execCreateCheckpointRecord_Params CreateCheckpointRecord_Params;
	memset(&CreateCheckpointRecord_Params, 0, sizeof(CreateCheckpointRecord_Params));
	memcpy_s(&CreateCheckpointRecord_Params.Record, sizeof(CreateCheckpointRecord_Params.Record), &Record, sizeof(Record));

	this->ProcessEvent(uFnCreateCheckpointRecord, &CreateCheckpointRecord_Params, nullptr);

	memcpy_s(&Record, sizeof(Record), &CreateCheckpointRecord_Params.Record, sizeof(CreateCheckpointRecord_Params.Record));
};

// Function Engine.DynamicBlockingVolume.PostBeginPlay
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void ADynamicBlockingVolume::eventPostBeginPlay()
{
	static UFunction* uFnPostBeginPlay = nullptr;

	if (!uFnPostBeginPlay)
	{
		uFnPostBeginPlay = UFunction::FindFunction("Function Engine.DynamicBlockingVolume.PostBeginPlay");
	}

	ADynamicBlockingVolume_eventPostBeginPlay_Params PostBeginPlay_Params;
	memset(&PostBeginPlay_Params, 0, sizeof(PostBeginPlay_Params));

	this->ProcessEvent(uFnPostBeginPlay, &PostBeginPlay_Params, nullptr);
};

// Function Engine.LevelStreamingVolume.ApplyCheckpointRecord
// [0x00420002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// struct ALevelStreamingVolume_FCheckpointRecord Record                         (CPF_Const | CPF_Parm | CPF_OutParm)

void ALevelStreamingVolume::ApplyCheckpointRecord(struct ALevelStreamingVolume_FCheckpointRecord& Record)
{
	static UFunction* uFnApplyCheckpointRecord = nullptr;

	if (!uFnApplyCheckpointRecord)
	{
		uFnApplyCheckpointRecord = UFunction::FindFunction("Function Engine.LevelStreamingVolume.ApplyCheckpointRecord");
	}

	ALevelStreamingVolume_execApplyCheckpointRecord_Params ApplyCheckpointRecord_Params;
	memset(&ApplyCheckpointRecord_Params, 0, sizeof(ApplyCheckpointRecord_Params));
	memcpy_s(&ApplyCheckpointRecord_Params.Record, sizeof(ApplyCheckpointRecord_Params.Record), &Record, sizeof(Record));

	this->ProcessEvent(uFnApplyCheckpointRecord, &ApplyCheckpointRecord_Params, nullptr);

	memcpy_s(&Record, sizeof(Record), &ApplyCheckpointRecord_Params.Record, sizeof(ApplyCheckpointRecord_Params.Record));
};

// Function Engine.LevelStreamingVolume.CreateCheckpointRecord
// [0x00420002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// struct ALevelStreamingVolume_FCheckpointRecord Record                         (CPF_Parm | CPF_OutParm)

void ALevelStreamingVolume::CreateCheckpointRecord(struct ALevelStreamingVolume_FCheckpointRecord& Record)
{
	static UFunction* uFnCreateCheckpointRecord = nullptr;

	if (!uFnCreateCheckpointRecord)
	{
		uFnCreateCheckpointRecord = UFunction::FindFunction("Function Engine.LevelStreamingVolume.CreateCheckpointRecord");
	}

	ALevelStreamingVolume_execCreateCheckpointRecord_Params CreateCheckpointRecord_Params;
	memset(&CreateCheckpointRecord_Params, 0, sizeof(CreateCheckpointRecord_Params));
	memcpy_s(&CreateCheckpointRecord_Params.Record, sizeof(CreateCheckpointRecord_Params.Record), &Record, sizeof(Record));

	this->ProcessEvent(uFnCreateCheckpointRecord, &CreateCheckpointRecord_Params, nullptr);

	memcpy_s(&Record, sizeof(Record), &CreateCheckpointRecord_Params.Record, sizeof(CreateCheckpointRecord_Params.Record));
};

// Function Engine.LevelStreamingVolume.OnToggle
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_Toggle*          Action                         (CPF_Parm)

void ALevelStreamingVolume::OnToggle(class USeqAct_Toggle* Action)
{
	static UFunction* uFnOnToggle = nullptr;

	if (!uFnOnToggle)
	{
		uFnOnToggle = UFunction::FindFunction("Function Engine.LevelStreamingVolume.OnToggle");
	}

	ALevelStreamingVolume_execOnToggle_Params OnToggle_Params;
	memset(&OnToggle_Params, 0, sizeof(OnToggle_Params));
	OnToggle_Params.Action = Action;

	this->ProcessEvent(uFnOnToggle, &OnToggle_Params, nullptr);
};

// Function Engine.PhysicsVolume.ApplyCheckpointRecord
// [0x00420002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// struct APhysicsVolume_FCheckpointRecord Record                         (CPF_Const | CPF_Parm | CPF_OutParm)

void APhysicsVolume::ApplyCheckpointRecord(struct APhysicsVolume_FCheckpointRecord& Record)
{
	static UFunction* uFnApplyCheckpointRecord = nullptr;

	if (!uFnApplyCheckpointRecord)
	{
		uFnApplyCheckpointRecord = UFunction::FindFunction("Function Engine.PhysicsVolume.ApplyCheckpointRecord");
	}

	APhysicsVolume_execApplyCheckpointRecord_Params ApplyCheckpointRecord_Params;
	memset(&ApplyCheckpointRecord_Params, 0, sizeof(ApplyCheckpointRecord_Params));
	memcpy_s(&ApplyCheckpointRecord_Params.Record, sizeof(ApplyCheckpointRecord_Params.Record), &Record, sizeof(Record));

	this->ProcessEvent(uFnApplyCheckpointRecord, &ApplyCheckpointRecord_Params, nullptr);

	memcpy_s(&Record, sizeof(Record), &ApplyCheckpointRecord_Params.Record, sizeof(ApplyCheckpointRecord_Params.Record));
};

// Function Engine.PhysicsVolume.CreateCheckpointRecord
// [0x00420002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// struct APhysicsVolume_FCheckpointRecord Record                         (CPF_Parm | CPF_OutParm)

void APhysicsVolume::CreateCheckpointRecord(struct APhysicsVolume_FCheckpointRecord& Record)
{
	static UFunction* uFnCreateCheckpointRecord = nullptr;

	if (!uFnCreateCheckpointRecord)
	{
		uFnCreateCheckpointRecord = UFunction::FindFunction("Function Engine.PhysicsVolume.CreateCheckpointRecord");
	}

	APhysicsVolume_execCreateCheckpointRecord_Params CreateCheckpointRecord_Params;
	memset(&CreateCheckpointRecord_Params, 0, sizeof(CreateCheckpointRecord_Params));
	memcpy_s(&CreateCheckpointRecord_Params.Record, sizeof(CreateCheckpointRecord_Params.Record), &Record, sizeof(Record));

	this->ProcessEvent(uFnCreateCheckpointRecord, &CreateCheckpointRecord_Params, nullptr);

	memcpy_s(&Record, sizeof(Record), &CreateCheckpointRecord_Params.Record, sizeof(CreateCheckpointRecord_Params.Record));
};

// Function Engine.PhysicsVolume.ShouldSaveForCheckpoint
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool APhysicsVolume::ShouldSaveForCheckpoint()
{
	static UFunction* uFnShouldSaveForCheckpoint = nullptr;

	if (!uFnShouldSaveForCheckpoint)
	{
		uFnShouldSaveForCheckpoint = UFunction::FindFunction("Function Engine.PhysicsVolume.ShouldSaveForCheckpoint");
	}

	APhysicsVolume_execShouldSaveForCheckpoint_Params ShouldSaveForCheckpoint_Params;
	memset(&ShouldSaveForCheckpoint_Params, 0, sizeof(ShouldSaveForCheckpoint_Params));

	this->ProcessEvent(uFnShouldSaveForCheckpoint, &ShouldSaveForCheckpoint_Params, nullptr);

	return ShouldSaveForCheckpoint_Params.ReturnValue;
};

// Function Engine.PhysicsVolume.OnSetDamageInstigator
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_SetDamageInstigator* Action                         (CPF_Parm)

void APhysicsVolume::OnSetDamageInstigator(class USeqAct_SetDamageInstigator* Action)
{
	static UFunction* uFnOnSetDamageInstigator = nullptr;

	if (!uFnOnSetDamageInstigator)
	{
		uFnOnSetDamageInstigator = UFunction::FindFunction("Function Engine.PhysicsVolume.OnSetDamageInstigator");
	}

	APhysicsVolume_execOnSetDamageInstigator_Params OnSetDamageInstigator_Params;
	memset(&OnSetDamageInstigator_Params, 0, sizeof(OnSetDamageInstigator_Params));
	OnSetDamageInstigator_Params.Action = Action;

	this->ProcessEvent(uFnOnSetDamageInstigator, &OnSetDamageInstigator_Params, nullptr);
};

// Function Engine.PhysicsVolume.NotifyPawnBecameViewTarget
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class APawn*                   P                              (CPF_Parm)
// class APlayerController*       PC                             (CPF_Parm)

void APhysicsVolume::NotifyPawnBecameViewTarget(class APawn* P, class APlayerController* PC)
{
	static UFunction* uFnNotifyPawnBecameViewTarget = nullptr;

	if (!uFnNotifyPawnBecameViewTarget)
	{
		uFnNotifyPawnBecameViewTarget = UFunction::FindFunction("Function Engine.PhysicsVolume.NotifyPawnBecameViewTarget");
	}

	APhysicsVolume_execNotifyPawnBecameViewTarget_Params NotifyPawnBecameViewTarget_Params;
	memset(&NotifyPawnBecameViewTarget_Params, 0, sizeof(NotifyPawnBecameViewTarget_Params));
	NotifyPawnBecameViewTarget_Params.P = P;
	NotifyPawnBecameViewTarget_Params.PC = PC;

	this->ProcessEvent(uFnNotifyPawnBecameViewTarget, &NotifyPawnBecameViewTarget_Params, nullptr);
};

// Function Engine.PhysicsVolume.ModifyPlayer
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class APawn*                   PlayerPawn                     (CPF_Parm)

void APhysicsVolume::ModifyPlayer(class APawn* PlayerPawn)
{
	static UFunction* uFnModifyPlayer = nullptr;

	if (!uFnModifyPlayer)
	{
		uFnModifyPlayer = UFunction::FindFunction("Function Engine.PhysicsVolume.ModifyPlayer");
	}

	APhysicsVolume_execModifyPlayer_Params ModifyPlayer_Params;
	memset(&ModifyPlayer_Params, 0, sizeof(ModifyPlayer_Params));
	ModifyPlayer_Params.PlayerPawn = PlayerPawn;

	this->ProcessEvent(uFnModifyPlayer, &ModifyPlayer_Params, nullptr);
};

// Function Engine.PhysicsVolume.CausePainTo
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AActor*                  Other                          (CPF_Parm)

void APhysicsVolume::eventCausePainTo(class AActor* Other)
{
	static UFunction* uFnCausePainTo = nullptr;

	if (!uFnCausePainTo)
	{
		uFnCausePainTo = UFunction::FindFunction("Function Engine.PhysicsVolume.CausePainTo");
	}

	APhysicsVolume_eventCausePainTo_Params CausePainTo_Params;
	memset(&CausePainTo_Params, 0, sizeof(CausePainTo_Params));
	CausePainTo_Params.Other = Other;

	this->ProcessEvent(uFnCausePainTo, &CausePainTo_Params, nullptr);
};

// Function Engine.PhysicsVolume.TimerPop
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AVolumeTimer*            T                              (CPF_Parm)

void APhysicsVolume::TimerPop(class AVolumeTimer* T)
{
	static UFunction* uFnTimerPop = nullptr;

	if (!uFnTimerPop)
	{
		uFnTimerPop = UFunction::FindFunction("Function Engine.PhysicsVolume.TimerPop");
	}

	APhysicsVolume_execTimerPop_Params TimerPop_Params;
	memset(&TimerPop_Params, 0, sizeof(TimerPop_Params));
	TimerPop_Params.T = T;

	this->ProcessEvent(uFnTimerPop, &TimerPop_Params, nullptr);
};

// Function Engine.PhysicsVolume.CollisionChanged
// [0x00020900] (FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void APhysicsVolume::eventCollisionChanged()
{
	static UFunction* uFnCollisionChanged = nullptr;

	if (!uFnCollisionChanged)
	{
		uFnCollisionChanged = UFunction::FindFunction("Function Engine.PhysicsVolume.CollisionChanged");
	}

	APhysicsVolume_eventCollisionChanged_Params CollisionChanged_Params;
	memset(&CollisionChanged_Params, 0, sizeof(CollisionChanged_Params));

	this->ProcessEvent(uFnCollisionChanged, &CollisionChanged_Params, nullptr);
};

// Function Engine.PhysicsVolume.OnToggle
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_Toggle*          inAction                       (CPF_Parm)

void APhysicsVolume::OnToggle(class USeqAct_Toggle* inAction)
{
	static UFunction* uFnOnToggle = nullptr;

	if (!uFnOnToggle)
	{
		uFnOnToggle = UFunction::FindFunction("Function Engine.PhysicsVolume.OnToggle");
	}

	APhysicsVolume_execOnToggle_Params OnToggle_Params;
	memset(&OnToggle_Params, 0, sizeof(OnToggle_Params));
	OnToggle_Params.inAction = inAction;

	this->ProcessEvent(uFnOnToggle, &OnToggle_Params, nullptr);
};

// Function Engine.PhysicsVolume.PawnLeavingVolume
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class APawn*                   Other                          (CPF_Parm)

void APhysicsVolume::eventPawnLeavingVolume(class APawn* Other)
{
	static UFunction* uFnPawnLeavingVolume = nullptr;

	if (!uFnPawnLeavingVolume)
	{
		uFnPawnLeavingVolume = UFunction::FindFunction("Function Engine.PhysicsVolume.PawnLeavingVolume");
	}

	APhysicsVolume_eventPawnLeavingVolume_Params PawnLeavingVolume_Params;
	memset(&PawnLeavingVolume_Params, 0, sizeof(PawnLeavingVolume_Params));
	PawnLeavingVolume_Params.Other = Other;

	this->ProcessEvent(uFnPawnLeavingVolume, &PawnLeavingVolume_Params, nullptr);
};

// Function Engine.PhysicsVolume.PawnEnteredVolume
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class APawn*                   Other                          (CPF_Parm)

void APhysicsVolume::eventPawnEnteredVolume(class APawn* Other)
{
	static UFunction* uFnPawnEnteredVolume = nullptr;

	if (!uFnPawnEnteredVolume)
	{
		uFnPawnEnteredVolume = UFunction::FindFunction("Function Engine.PhysicsVolume.PawnEnteredVolume");
	}

	APhysicsVolume_eventPawnEnteredVolume_Params PawnEnteredVolume_Params;
	memset(&PawnEnteredVolume_Params, 0, sizeof(PawnEnteredVolume_Params));
	PawnEnteredVolume_Params.Other = Other;

	this->ProcessEvent(uFnPawnEnteredVolume, &PawnEnteredVolume_Params, nullptr);
};

// Function Engine.PhysicsVolume.ActorLeavingVolume
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AActor*                  Other                          (CPF_Parm)

void APhysicsVolume::eventActorLeavingVolume(class AActor* Other)
{
	static UFunction* uFnActorLeavingVolume = nullptr;

	if (!uFnActorLeavingVolume)
	{
		uFnActorLeavingVolume = UFunction::FindFunction("Function Engine.PhysicsVolume.ActorLeavingVolume");
	}

	APhysicsVolume_eventActorLeavingVolume_Params ActorLeavingVolume_Params;
	memset(&ActorLeavingVolume_Params, 0, sizeof(ActorLeavingVolume_Params));
	ActorLeavingVolume_Params.Other = Other;

	this->ProcessEvent(uFnActorLeavingVolume, &ActorLeavingVolume_Params, nullptr);
};

// Function Engine.PhysicsVolume.ActorEnteredVolume
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AActor*                  Other                          (CPF_Parm)

void APhysicsVolume::eventActorEnteredVolume(class AActor* Other)
{
	static UFunction* uFnActorEnteredVolume = nullptr;

	if (!uFnActorEnteredVolume)
	{
		uFnActorEnteredVolume = UFunction::FindFunction("Function Engine.PhysicsVolume.ActorEnteredVolume");
	}

	APhysicsVolume_eventActorEnteredVolume_Params ActorEnteredVolume_Params;
	memset(&ActorEnteredVolume_Params, 0, sizeof(ActorEnteredVolume_Params));
	ActorEnteredVolume_Params.Other = Other;

	this->ProcessEvent(uFnActorEnteredVolume, &ActorEnteredVolume_Params, nullptr);
};

// Function Engine.PhysicsVolume.PhysicsChangedFor
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AActor*                  Other                          (CPF_Parm)

void APhysicsVolume::eventPhysicsChangedFor(class AActor* Other)
{
	static UFunction* uFnPhysicsChangedFor = nullptr;

	if (!uFnPhysicsChangedFor)
	{
		uFnPhysicsChangedFor = UFunction::FindFunction("Function Engine.PhysicsVolume.PhysicsChangedFor");
	}

	APhysicsVolume_eventPhysicsChangedFor_Params PhysicsChangedFor_Params;
	memset(&PhysicsChangedFor_Params, 0, sizeof(PhysicsChangedFor_Params));
	PhysicsChangedFor_Params.Other = Other;

	this->ProcessEvent(uFnPhysicsChangedFor, &PhysicsChangedFor_Params, nullptr);
};

// Function Engine.PhysicsVolume.Reset
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void APhysicsVolume::Reset()
{
	static UFunction* uFnReset = nullptr;

	if (!uFnReset)
	{
		uFnReset = UFunction::FindFunction("Function Engine.PhysicsVolume.Reset");
	}

	APhysicsVolume_execReset_Params Reset_Params;
	memset(&Reset_Params, 0, sizeof(Reset_Params));

	this->ProcessEvent(uFnReset, &Reset_Params, nullptr);
};

// Function Engine.PhysicsVolume.PostBeginPlay
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void APhysicsVolume::eventPostBeginPlay()
{
	static UFunction* uFnPostBeginPlay = nullptr;

	if (!uFnPostBeginPlay)
	{
		uFnPostBeginPlay = UFunction::FindFunction("Function Engine.PhysicsVolume.PostBeginPlay");
	}

	APhysicsVolume_eventPostBeginPlay_Params PostBeginPlay_Params;
	memset(&PostBeginPlay_Params, 0, sizeof(PostBeginPlay_Params));

	this->ProcessEvent(uFnPostBeginPlay, &PostBeginPlay_Params, nullptr);
};

// Function Engine.PhysicsVolume.GetZoneVelocityForActor
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20826])
// Parameter Info:
// struct FVector                 ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class AActor*                  TheActor                       (CPF_Parm)

struct FVector APhysicsVolume::GetZoneVelocityForActor(class AActor* TheActor)
{
	static UFunction* uFnGetZoneVelocityForActor = nullptr;

	if (!uFnGetZoneVelocityForActor)
	{
		uFnGetZoneVelocityForActor = UFunction::FindFunction("Function Engine.PhysicsVolume.GetZoneVelocityForActor");
	}

	APhysicsVolume_execGetZoneVelocityForActor_Params GetZoneVelocityForActor_Params;
	memset(&GetZoneVelocityForActor_Params, 0, sizeof(GetZoneVelocityForActor_Params));
	GetZoneVelocityForActor_Params.TheActor = TheActor;

	uFnGetZoneVelocityForActor->iNative = 0;
	uFnGetZoneVelocityForActor->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetZoneVelocityForActor, &GetZoneVelocityForActor_Params, nullptr);
	uFnGetZoneVelocityForActor->FunctionFlags |= 0x400;
	uFnGetZoneVelocityForActor->iNative = 20826;

	return GetZoneVelocityForActor_Params.ReturnValue;
};

// Function Engine.DefaultPhysicsVolume.Destroyed
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void ADefaultPhysicsVolume::eventDestroyed()
{
	static UFunction* uFnDestroyed = nullptr;

	if (!uFnDestroyed)
	{
		uFnDestroyed = UFunction::FindFunction("Function Engine.DefaultPhysicsVolume.Destroyed");
	}

	ADefaultPhysicsVolume_eventDestroyed_Params Destroyed_Params;
	memset(&Destroyed_Params, 0, sizeof(Destroyed_Params));

	this->ProcessEvent(uFnDestroyed, &Destroyed_Params, nullptr);
};

// Function Engine.TriggerVolume.PostBeginPlay
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void ATriggerVolume::eventPostBeginPlay()
{
	static UFunction* uFnPostBeginPlay = nullptr;

	if (!uFnPostBeginPlay)
	{
		uFnPostBeginPlay = UFunction::FindFunction("Function Engine.TriggerVolume.PostBeginPlay");
	}

	ATriggerVolume_eventPostBeginPlay_Params PostBeginPlay_Params;
	memset(&PostBeginPlay_Params, 0, sizeof(PostBeginPlay_Params));

	this->ProcessEvent(uFnPostBeginPlay, &PostBeginPlay_Params, nullptr);
};

// Function Engine.DynamicSMActor.SetLightEnvironmentToNotBeDynamic
// [0x00020103] (FUNC_Final | FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void ADynamicSMActor::SetLightEnvironmentToNotBeDynamic()
{
	static UFunction* uFnSetLightEnvironmentToNotBeDynamic = nullptr;

	if (!uFnSetLightEnvironmentToNotBeDynamic)
	{
		uFnSetLightEnvironmentToNotBeDynamic = UFunction::FindFunction("Function Engine.DynamicSMActor.SetLightEnvironmentToNotBeDynamic");
	}

	ADynamicSMActor_execSetLightEnvironmentToNotBeDynamic_Params SetLightEnvironmentToNotBeDynamic_Params;
	memset(&SetLightEnvironmentToNotBeDynamic_Params, 0, sizeof(SetLightEnvironmentToNotBeDynamic_Params));

	this->ProcessEvent(uFnSetLightEnvironmentToNotBeDynamic, &SetLightEnvironmentToNotBeDynamic_Params, nullptr);
};

// Function Engine.DynamicSMActor.Detach
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AActor*                  Other                          (CPF_Parm)

void ADynamicSMActor::eventDetach(class AActor* Other)
{
	static UFunction* uFnDetach = nullptr;

	if (!uFnDetach)
	{
		uFnDetach = UFunction::FindFunction("Function Engine.DynamicSMActor.Detach");
	}

	ADynamicSMActor_eventDetach_Params Detach_Params;
	memset(&Detach_Params, 0, sizeof(Detach_Params));
	Detach_Params.Other = Other;

	this->ProcessEvent(uFnDetach, &Detach_Params, nullptr);
};

// Function Engine.DynamicSMActor.Attach
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AActor*                  Other                          (CPF_Parm)

void ADynamicSMActor::eventAttach(class AActor* Other)
{
	static UFunction* uFnAttach = nullptr;

	if (!uFnAttach)
	{
		uFnAttach = UFunction::FindFunction("Function Engine.DynamicSMActor.Attach");
	}

	ADynamicSMActor_eventAttach_Params Attach_Params;
	memset(&Attach_Params, 0, sizeof(Attach_Params));
	Attach_Params.Other = Other;

	this->ProcessEvent(uFnAttach, &Attach_Params, nullptr);
};

// Function Engine.DynamicSMActor.CanBasePawn
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class APawn*                   P                              (CPF_Parm)

bool ADynamicSMActor::CanBasePawn(class APawn* P)
{
	static UFunction* uFnCanBasePawn = nullptr;

	if (!uFnCanBasePawn)
	{
		uFnCanBasePawn = UFunction::FindFunction("Function Engine.DynamicSMActor.CanBasePawn");
	}

	ADynamicSMActor_execCanBasePawn_Params CanBasePawn_Params;
	memset(&CanBasePawn_Params, 0, sizeof(CanBasePawn_Params));
	CanBasePawn_Params.P = P;

	this->ProcessEvent(uFnCanBasePawn, &CanBasePawn_Params, nullptr);

	return CanBasePawn_Params.ReturnValue;
};

// Function Engine.DynamicSMActor.SetStaticMesh
// [0x00024002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UStaticMesh*             NewMesh                        (CPF_Parm)
// struct FVector                 NewTranslation                 (CPF_OptionalParm | CPF_Parm)
// struct FRotator                NewRotation                    (CPF_OptionalParm | CPF_Parm)
// struct FVector                 NewScale3D                     (CPF_OptionalParm | CPF_Parm)

void ADynamicSMActor::SetStaticMesh(class UStaticMesh* NewMesh, const struct FVector& NewTranslation, const struct FRotator& NewRotation, const struct FVector& NewScale3D)
{
	static UFunction* uFnSetStaticMesh = nullptr;

	if (!uFnSetStaticMesh)
	{
		uFnSetStaticMesh = UFunction::FindFunction("Function Engine.DynamicSMActor.SetStaticMesh");
	}

	ADynamicSMActor_execSetStaticMesh_Params SetStaticMesh_Params;
	memset(&SetStaticMesh_Params, 0, sizeof(SetStaticMesh_Params));
	SetStaticMesh_Params.NewMesh = NewMesh;
	memcpy_s(&SetStaticMesh_Params.NewTranslation, sizeof(SetStaticMesh_Params.NewTranslation), &NewTranslation, sizeof(NewTranslation));
	memcpy_s(&SetStaticMesh_Params.NewRotation, sizeof(SetStaticMesh_Params.NewRotation), &NewRotation, sizeof(NewRotation));
	memcpy_s(&SetStaticMesh_Params.NewScale3D, sizeof(SetStaticMesh_Params.NewScale3D), &NewScale3D, sizeof(NewScale3D));

	this->ProcessEvent(uFnSetStaticMesh, &SetStaticMesh_Params, nullptr);
};

// Function Engine.DynamicSMActor.OnSetMaterial
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_SetMaterial*     Action                         (CPF_Parm)

void ADynamicSMActor::OnSetMaterial(class USeqAct_SetMaterial* Action)
{
	static UFunction* uFnOnSetMaterial = nullptr;

	if (!uFnOnSetMaterial)
	{
		uFnOnSetMaterial = UFunction::FindFunction("Function Engine.DynamicSMActor.OnSetMaterial");
	}

	ADynamicSMActor_execOnSetMaterial_Params OnSetMaterial_Params;
	memset(&OnSetMaterial_Params, 0, sizeof(OnSetMaterial_Params));
	OnSetMaterial_Params.Action = Action;

	this->ProcessEvent(uFnOnSetMaterial, &OnSetMaterial_Params, nullptr);
};

// Function Engine.DynamicSMActor.OnSetMesh
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_SetMesh*         Action                         (CPF_Parm)

void ADynamicSMActor::OnSetMesh(class USeqAct_SetMesh* Action)
{
	static UFunction* uFnOnSetMesh = nullptr;

	if (!uFnOnSetMesh)
	{
		uFnOnSetMesh = UFunction::FindFunction("Function Engine.DynamicSMActor.OnSetMesh");
	}

	ADynamicSMActor_execOnSetMesh_Params OnSetMesh_Params;
	memset(&OnSetMesh_Params, 0, sizeof(OnSetMesh_Params));
	OnSetMesh_Params.Action = Action;

	this->ProcessEvent(uFnOnSetMesh, &OnSetMesh_Params, nullptr);
};

// Function Engine.DynamicSMActor.ReplicatedEvent
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FName                    VarName                        (CPF_Parm)

void ADynamicSMActor::eventReplicatedEvent(const class FName& VarName)
{
	static UFunction* uFnReplicatedEvent = nullptr;

	if (!uFnReplicatedEvent)
	{
		uFnReplicatedEvent = UFunction::FindFunction("Function Engine.DynamicSMActor.ReplicatedEvent");
	}

	ADynamicSMActor_eventReplicatedEvent_Params ReplicatedEvent_Params;
	memset(&ReplicatedEvent_Params, 0, sizeof(ReplicatedEvent_Params));
	memcpy_s(&ReplicatedEvent_Params.VarName, sizeof(ReplicatedEvent_Params.VarName), &VarName, sizeof(VarName));

	this->ProcessEvent(uFnReplicatedEvent, &ReplicatedEvent_Params, nullptr);
};

// Function Engine.DynamicSMActor.PostBeginPlay
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void ADynamicSMActor::eventPostBeginPlay()
{
	static UFunction* uFnPostBeginPlay = nullptr;

	if (!uFnPostBeginPlay)
	{
		uFnPostBeginPlay = UFunction::FindFunction("Function Engine.DynamicSMActor.PostBeginPlay");
	}

	ADynamicSMActor_eventPostBeginPlay_Params PostBeginPlay_Params;
	memset(&PostBeginPlay_Params, 0, sizeof(PostBeginPlay_Params));

	this->ProcessEvent(uFnPostBeginPlay, &PostBeginPlay_Params, nullptr);
};

// Function Engine.InterpActor.ApplyCheckpointRecord
// [0x00420002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// struct AInterpActor_FCheckpointRecord Record                         (CPF_Const | CPF_Parm | CPF_OutParm)

void AInterpActor::ApplyCheckpointRecord(struct AInterpActor_FCheckpointRecord& Record)
{
	static UFunction* uFnApplyCheckpointRecord = nullptr;

	if (!uFnApplyCheckpointRecord)
	{
		uFnApplyCheckpointRecord = UFunction::FindFunction("Function Engine.InterpActor.ApplyCheckpointRecord");
	}

	AInterpActor_execApplyCheckpointRecord_Params ApplyCheckpointRecord_Params;
	memset(&ApplyCheckpointRecord_Params, 0, sizeof(ApplyCheckpointRecord_Params));
	memcpy_s(&ApplyCheckpointRecord_Params.Record, sizeof(ApplyCheckpointRecord_Params.Record), &Record, sizeof(Record));

	this->ProcessEvent(uFnApplyCheckpointRecord, &ApplyCheckpointRecord_Params, nullptr);

	memcpy_s(&Record, sizeof(Record), &ApplyCheckpointRecord_Params.Record, sizeof(ApplyCheckpointRecord_Params.Record));
};

// Function Engine.InterpActor.CreateCheckpointRecord
// [0x00420002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// struct AInterpActor_FCheckpointRecord Record                         (CPF_Parm | CPF_OutParm)

void AInterpActor::CreateCheckpointRecord(struct AInterpActor_FCheckpointRecord& Record)
{
	static UFunction* uFnCreateCheckpointRecord = nullptr;

	if (!uFnCreateCheckpointRecord)
	{
		uFnCreateCheckpointRecord = UFunction::FindFunction("Function Engine.InterpActor.CreateCheckpointRecord");
	}

	AInterpActor_execCreateCheckpointRecord_Params CreateCheckpointRecord_Params;
	memset(&CreateCheckpointRecord_Params, 0, sizeof(CreateCheckpointRecord_Params));
	memcpy_s(&CreateCheckpointRecord_Params.Record, sizeof(CreateCheckpointRecord_Params.Record), &Record, sizeof(Record));

	this->ProcessEvent(uFnCreateCheckpointRecord, &CreateCheckpointRecord_Params, nullptr);

	memcpy_s(&Record, sizeof(Record), &CreateCheckpointRecord_Params.Record, sizeof(CreateCheckpointRecord_Params.Record));
};

// Function Engine.InterpActor.ShouldSaveForCheckpoint
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AInterpActor::ShouldSaveForCheckpoint()
{
	static UFunction* uFnShouldSaveForCheckpoint = nullptr;

	if (!uFnShouldSaveForCheckpoint)
	{
		uFnShouldSaveForCheckpoint = UFunction::FindFunction("Function Engine.InterpActor.ShouldSaveForCheckpoint");
	}

	AInterpActor_execShouldSaveForCheckpoint_Params ShouldSaveForCheckpoint_Params;
	memset(&ShouldSaveForCheckpoint_Params, 0, sizeof(ShouldSaveForCheckpoint_Params));

	this->ProcessEvent(uFnShouldSaveForCheckpoint, &ShouldSaveForCheckpoint_Params, nullptr);

	return ShouldSaveForCheckpoint_Params.ReturnValue;
};

// Function Engine.InterpActor.ShutDown
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AInterpActor::ShutDown()
{
	static UFunction* uFnShutDown = nullptr;

	if (!uFnShutDown)
	{
		uFnShutDown = UFunction::FindFunction("Function Engine.InterpActor.ShutDown");
	}

	AInterpActor_execShutDown_Params ShutDown_Params;
	memset(&ShutDown_Params, 0, sizeof(ShutDown_Params));

	this->ProcessEvent(uFnShutDown, &ShutDown_Params, nullptr);
};

// Function Engine.InterpActor.FinishedOpen
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AInterpActor::FinishedOpen()
{
	static UFunction* uFnFinishedOpen = nullptr;

	if (!uFnFinishedOpen)
	{
		uFnFinishedOpen = UFunction::FindFunction("Function Engine.InterpActor.FinishedOpen");
	}

	AInterpActor_execFinishedOpen_Params FinishedOpen_Params;
	memset(&FinishedOpen_Params, 0, sizeof(FinishedOpen_Params));

	this->ProcessEvent(uFnFinishedOpen, &FinishedOpen_Params, nullptr);
};

// Function Engine.InterpActor.Restart
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AInterpActor::Restart()
{
	static UFunction* uFnRestart = nullptr;

	if (!uFnRestart)
	{
		uFnRestart = UFunction::FindFunction("Function Engine.InterpActor.Restart");
	}

	AInterpActor_execRestart_Params Restart_Params;
	memset(&Restart_Params, 0, sizeof(Restart_Params));

	this->ProcessEvent(uFnRestart, &Restart_Params, nullptr);
};

// Function Engine.InterpActor.Detach
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AActor*                  Other                          (CPF_Parm)

void AInterpActor::eventDetach(class AActor* Other)
{
	static UFunction* uFnDetach = nullptr;

	if (!uFnDetach)
	{
		uFnDetach = UFunction::FindFunction("Function Engine.InterpActor.Detach");
	}

	AInterpActor_eventDetach_Params Detach_Params;
	memset(&Detach_Params, 0, sizeof(Detach_Params));
	Detach_Params.Other = Other;

	this->ProcessEvent(uFnDetach, &Detach_Params, nullptr);
};

// Function Engine.InterpActor.Attach
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AActor*                  Other                          (CPF_Parm)

void AInterpActor::eventAttach(class AActor* Other)
{
	static UFunction* uFnAttach = nullptr;

	if (!uFnAttach)
	{
		uFnAttach = UFunction::FindFunction("Function Engine.InterpActor.Attach");
	}

	AInterpActor_eventAttach_Params Attach_Params;
	memset(&Attach_Params, 0, sizeof(Attach_Params));
	Attach_Params.Other = Other;

	this->ProcessEvent(uFnAttach, &Attach_Params, nullptr);
};

// Function Engine.InterpActor.RanInto
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AActor*                  Other                          (CPF_Parm)

void AInterpActor::eventRanInto(class AActor* Other)
{
	static UFunction* uFnRanInto = nullptr;

	if (!uFnRanInto)
	{
		uFnRanInto = UFunction::FindFunction("Function Engine.InterpActor.RanInto");
	}

	AInterpActor_eventRanInto_Params RanInto_Params;
	memset(&RanInto_Params, 0, sizeof(RanInto_Params));
	RanInto_Params.Other = Other;

	this->ProcessEvent(uFnRanInto, &RanInto_Params, nullptr);
};

// Function Engine.InterpActor.EncroachingOn
// [0x00820802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class AActor*                  Other                          (CPF_Parm)

bool AInterpActor::eventEncroachingOn(class AActor* Other)
{
	static UFunction* uFnEncroachingOn = nullptr;

	if (!uFnEncroachingOn)
	{
		uFnEncroachingOn = UFunction::FindFunction("Function Engine.InterpActor.EncroachingOn");
	}

	AInterpActor_eventEncroachingOn_Params EncroachingOn_Params;
	memset(&EncroachingOn_Params, 0, sizeof(EncroachingOn_Params));
	EncroachingOn_Params.Other = Other;

	this->ProcessEvent(uFnEncroachingOn, &EncroachingOn_Params, nullptr);

	return EncroachingOn_Params.ReturnValue;
};

// Function Engine.InterpActor.SetShadowParentOnAllAttachedComponents
// [0x00020500] (FUNC_Simulated | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25789])
// Parameter Info:

void AInterpActor::SetShadowParentOnAllAttachedComponents()
{
	static UFunction* uFnSetShadowParentOnAllAttachedComponents = nullptr;

	if (!uFnSetShadowParentOnAllAttachedComponents)
	{
		uFnSetShadowParentOnAllAttachedComponents = UFunction::FindFunction("Function Engine.InterpActor.SetShadowParentOnAllAttachedComponents");
	}

	AInterpActor_execSetShadowParentOnAllAttachedComponents_Params SetShadowParentOnAllAttachedComponents_Params;
	memset(&SetShadowParentOnAllAttachedComponents_Params, 0, sizeof(SetShadowParentOnAllAttachedComponents_Params));

	uFnSetShadowParentOnAllAttachedComponents->iNative = 0;
	uFnSetShadowParentOnAllAttachedComponents->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetShadowParentOnAllAttachedComponents, &SetShadowParentOnAllAttachedComponents_Params, nullptr);
	uFnSetShadowParentOnAllAttachedComponents->FunctionFlags |= 0x400;
	uFnSetShadowParentOnAllAttachedComponents->iNative = 25789;
};

// Function Engine.InterpActor.PostBeginPlay
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AInterpActor::eventPostBeginPlay()
{
	static UFunction* uFnPostBeginPlay = nullptr;

	if (!uFnPostBeginPlay)
	{
		uFnPostBeginPlay = UFunction::FindFunction("Function Engine.InterpActor.PostBeginPlay");
	}

	AInterpActor_eventPostBeginPlay_Params PostBeginPlay_Params;
	memset(&PostBeginPlay_Params, 0, sizeof(PostBeginPlay_Params));

	this->ProcessEvent(uFnPostBeginPlay, &PostBeginPlay_Params, nullptr);
};

// Function Engine.Emitter.HideSelf
// [0x00020100] (FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AEmitter::HideSelf()
{
	static UFunction* uFnHideSelf = nullptr;

	if (!uFnHideSelf)
	{
		uFnHideSelf = UFunction::FindFunction("Function Engine.Emitter.HideSelf");
	}

	AEmitter_execHideSelf_Params HideSelf_Params;
	memset(&HideSelf_Params, 0, sizeof(HideSelf_Params));

	this->ProcessEvent(uFnHideSelf, &HideSelf_Params, nullptr);
};

// Function Engine.Emitter.ApplyCheckpointRecord
// [0x00420002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// struct AEmitter_FCheckpointRecord Record                         (CPF_Const | CPF_Parm | CPF_OutParm)

void AEmitter::ApplyCheckpointRecord(struct AEmitter_FCheckpointRecord& Record)
{
	static UFunction* uFnApplyCheckpointRecord = nullptr;

	if (!uFnApplyCheckpointRecord)
	{
		uFnApplyCheckpointRecord = UFunction::FindFunction("Function Engine.Emitter.ApplyCheckpointRecord");
	}

	AEmitter_execApplyCheckpointRecord_Params ApplyCheckpointRecord_Params;
	memset(&ApplyCheckpointRecord_Params, 0, sizeof(ApplyCheckpointRecord_Params));
	memcpy_s(&ApplyCheckpointRecord_Params.Record, sizeof(ApplyCheckpointRecord_Params.Record), &Record, sizeof(Record));

	this->ProcessEvent(uFnApplyCheckpointRecord, &ApplyCheckpointRecord_Params, nullptr);

	memcpy_s(&Record, sizeof(Record), &ApplyCheckpointRecord_Params.Record, sizeof(ApplyCheckpointRecord_Params.Record));
};

// Function Engine.Emitter.CreateCheckpointRecord
// [0x00420002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// struct AEmitter_FCheckpointRecord Record                         (CPF_Parm | CPF_OutParm)

void AEmitter::CreateCheckpointRecord(struct AEmitter_FCheckpointRecord& Record)
{
	static UFunction* uFnCreateCheckpointRecord = nullptr;

	if (!uFnCreateCheckpointRecord)
	{
		uFnCreateCheckpointRecord = UFunction::FindFunction("Function Engine.Emitter.CreateCheckpointRecord");
	}

	AEmitter_execCreateCheckpointRecord_Params CreateCheckpointRecord_Params;
	memset(&CreateCheckpointRecord_Params, 0, sizeof(CreateCheckpointRecord_Params));
	memcpy_s(&CreateCheckpointRecord_Params.Record, sizeof(CreateCheckpointRecord_Params.Record), &Record, sizeof(Record));

	this->ProcessEvent(uFnCreateCheckpointRecord, &CreateCheckpointRecord_Params, nullptr);

	memcpy_s(&Record, sizeof(Record), &CreateCheckpointRecord_Params.Record, sizeof(CreateCheckpointRecord_Params.Record));
};

// Function Engine.Emitter.ShouldSaveForCheckpoint
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AEmitter::ShouldSaveForCheckpoint()
{
	static UFunction* uFnShouldSaveForCheckpoint = nullptr;

	if (!uFnShouldSaveForCheckpoint)
	{
		uFnShouldSaveForCheckpoint = UFunction::FindFunction("Function Engine.Emitter.ShouldSaveForCheckpoint");
	}

	AEmitter_execShouldSaveForCheckpoint_Params ShouldSaveForCheckpoint_Params;
	memset(&ShouldSaveForCheckpoint_Params, 0, sizeof(ShouldSaveForCheckpoint_Params));

	this->ProcessEvent(uFnShouldSaveForCheckpoint, &ShouldSaveForCheckpoint_Params, nullptr);

	return ShouldSaveForCheckpoint_Params.ReturnValue;
};

// Function Engine.Emitter.OnSetParticleSysParam
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_SetParticleSysParam* Action                         (CPF_Parm)

void AEmitter::OnSetParticleSysParam(class USeqAct_SetParticleSysParam* Action)
{
	static UFunction* uFnOnSetParticleSysParam = nullptr;

	if (!uFnOnSetParticleSysParam)
	{
		uFnOnSetParticleSysParam = UFunction::FindFunction("Function Engine.Emitter.OnSetParticleSysParam");
	}

	AEmitter_execOnSetParticleSysParam_Params OnSetParticleSysParam_Params;
	memset(&OnSetParticleSysParam_Params, 0, sizeof(OnSetParticleSysParam_Params));
	OnSetParticleSysParam_Params.Action = Action;

	this->ProcessEvent(uFnOnSetParticleSysParam, &OnSetParticleSysParam_Params, nullptr);
};

// Function Engine.Emitter.SetActorParameter
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FName                    ParameterName                  (CPF_Parm)
// class AActor*                  Param                          (CPF_Parm)

void AEmitter::SetActorParameter(const class FName& ParameterName, class AActor* Param)
{
	static UFunction* uFnSetActorParameter = nullptr;

	if (!uFnSetActorParameter)
	{
		uFnSetActorParameter = UFunction::FindFunction("Function Engine.Emitter.SetActorParameter");
	}

	AEmitter_execSetActorParameter_Params SetActorParameter_Params;
	memset(&SetActorParameter_Params, 0, sizeof(SetActorParameter_Params));
	memcpy_s(&SetActorParameter_Params.ParameterName, sizeof(SetActorParameter_Params.ParameterName), &ParameterName, sizeof(ParameterName));
	SetActorParameter_Params.Param = Param;

	this->ProcessEvent(uFnSetActorParameter, &SetActorParameter_Params, nullptr);
};

// Function Engine.Emitter.SetExtColorParameter
// [0x00820102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// class FName                    ParameterName                  (CPF_Parm)
// uint8_t                        Red                            (CPF_Parm)
// uint8_t                        Green                          (CPF_Parm)
// uint8_t                        Blue                           (CPF_Parm)
// uint8_t                        Alpha                          (CPF_Parm)

void AEmitter::SetExtColorParameter(const class FName& ParameterName, uint8_t Red, uint8_t Green, uint8_t Blue, uint8_t Alpha)
{
	static UFunction* uFnSetExtColorParameter = nullptr;

	if (!uFnSetExtColorParameter)
	{
		uFnSetExtColorParameter = UFunction::FindFunction("Function Engine.Emitter.SetExtColorParameter");
	}

	AEmitter_execSetExtColorParameter_Params SetExtColorParameter_Params;
	memset(&SetExtColorParameter_Params, 0, sizeof(SetExtColorParameter_Params));
	memcpy_s(&SetExtColorParameter_Params.ParameterName, sizeof(SetExtColorParameter_Params.ParameterName), &ParameterName, sizeof(ParameterName));
	memcpy_s(&SetExtColorParameter_Params.Red, sizeof(SetExtColorParameter_Params.Red), &Red, sizeof(Red));
	memcpy_s(&SetExtColorParameter_Params.Green, sizeof(SetExtColorParameter_Params.Green), &Green, sizeof(Green));
	memcpy_s(&SetExtColorParameter_Params.Blue, sizeof(SetExtColorParameter_Params.Blue), &Blue, sizeof(Blue));
	memcpy_s(&SetExtColorParameter_Params.Alpha, sizeof(SetExtColorParameter_Params.Alpha), &Alpha, sizeof(Alpha));

	this->ProcessEvent(uFnSetExtColorParameter, &SetExtColorParameter_Params, nullptr);
};

// Function Engine.Emitter.SetColorParameter
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FName                    ParameterName                  (CPF_Parm)
// struct FColor                  Param                          (CPF_Parm)

void AEmitter::SetColorParameter(const class FName& ParameterName, const struct FColor& Param)
{
	static UFunction* uFnSetColorParameter = nullptr;

	if (!uFnSetColorParameter)
	{
		uFnSetColorParameter = UFunction::FindFunction("Function Engine.Emitter.SetColorParameter");
	}

	AEmitter_execSetColorParameter_Params SetColorParameter_Params;
	memset(&SetColorParameter_Params, 0, sizeof(SetColorParameter_Params));
	memcpy_s(&SetColorParameter_Params.ParameterName, sizeof(SetColorParameter_Params.ParameterName), &ParameterName, sizeof(ParameterName));
	memcpy_s(&SetColorParameter_Params.Param, sizeof(SetColorParameter_Params.Param), &Param, sizeof(Param));

	this->ProcessEvent(uFnSetColorParameter, &SetColorParameter_Params, nullptr);
};

// Function Engine.Emitter.SetVectorParameter
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FName                    ParameterName                  (CPF_Parm)
// struct FVector                 Param                          (CPF_Parm)

void AEmitter::SetVectorParameter(const class FName& ParameterName, const struct FVector& Param)
{
	static UFunction* uFnSetVectorParameter = nullptr;

	if (!uFnSetVectorParameter)
	{
		uFnSetVectorParameter = UFunction::FindFunction("Function Engine.Emitter.SetVectorParameter");
	}

	AEmitter_execSetVectorParameter_Params SetVectorParameter_Params;
	memset(&SetVectorParameter_Params, 0, sizeof(SetVectorParameter_Params));
	memcpy_s(&SetVectorParameter_Params.ParameterName, sizeof(SetVectorParameter_Params.ParameterName), &ParameterName, sizeof(ParameterName));
	memcpy_s(&SetVectorParameter_Params.Param, sizeof(SetVectorParameter_Params.Param), &Param, sizeof(Param));

	this->ProcessEvent(uFnSetVectorParameter, &SetVectorParameter_Params, nullptr);
};

// Function Engine.Emitter.SetFloatParameter
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FName                    ParameterName                  (CPF_Parm)
// float                          Param                          (CPF_Parm)

void AEmitter::SetFloatParameter(const class FName& ParameterName, float Param)
{
	static UFunction* uFnSetFloatParameter = nullptr;

	if (!uFnSetFloatParameter)
	{
		uFnSetFloatParameter = UFunction::FindFunction("Function Engine.Emitter.SetFloatParameter");
	}

	AEmitter_execSetFloatParameter_Params SetFloatParameter_Params;
	memset(&SetFloatParameter_Params, 0, sizeof(SetFloatParameter_Params));
	memcpy_s(&SetFloatParameter_Params.ParameterName, sizeof(SetFloatParameter_Params.ParameterName), &ParameterName, sizeof(ParameterName));
	memcpy_s(&SetFloatParameter_Params.Param, sizeof(SetFloatParameter_Params.Param), &Param, sizeof(Param));

	this->ProcessEvent(uFnSetFloatParameter, &SetFloatParameter_Params, nullptr);
};

// Function Engine.Emitter.ShutDown
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AEmitter::ShutDown()
{
	static UFunction* uFnShutDown = nullptr;

	if (!uFnShutDown)
	{
		uFnShutDown = UFunction::FindFunction("Function Engine.Emitter.ShutDown");
	}

	AEmitter_execShutDown_Params ShutDown_Params;
	memset(&ShutDown_Params, 0, sizeof(ShutDown_Params));

	this->ProcessEvent(uFnShutDown, &ShutDown_Params, nullptr);
};

// Function Engine.Emitter.OnParticleEventGenerator
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_ParticleEventGenerator* Action                         (CPF_Parm)

void AEmitter::OnParticleEventGenerator(class USeqAct_ParticleEventGenerator* Action)
{
	static UFunction* uFnOnParticleEventGenerator = nullptr;

	if (!uFnOnParticleEventGenerator)
	{
		uFnOnParticleEventGenerator = UFunction::FindFunction("Function Engine.Emitter.OnParticleEventGenerator");
	}

	AEmitter_execOnParticleEventGenerator_Params OnParticleEventGenerator_Params;
	memset(&OnParticleEventGenerator_Params, 0, sizeof(OnParticleEventGenerator_Params));
	OnParticleEventGenerator_Params.Action = Action;

	this->ProcessEvent(uFnOnParticleEventGenerator, &OnParticleEventGenerator_Params, nullptr);
};

// Function Engine.Emitter.OnToggle
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_Toggle*          Action                         (CPF_Parm)

void AEmitter::OnToggle(class USeqAct_Toggle* Action)
{
	static UFunction* uFnOnToggle = nullptr;

	if (!uFnOnToggle)
	{
		uFnOnToggle = UFunction::FindFunction("Function Engine.Emitter.OnToggle");
	}

	AEmitter_execOnToggle_Params OnToggle_Params;
	memset(&OnToggle_Params, 0, sizeof(OnToggle_Params));
	OnToggle_Params.Action = Action;

	this->ProcessEvent(uFnOnToggle, &OnToggle_Params, nullptr);
};

// Function Engine.Emitter.OnParticleSystemFinished
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UParticleSystemComponent* FinishedComponent              (CPF_Parm | CPF_EditInline)

void AEmitter::OnParticleSystemFinished(class UParticleSystemComponent* FinishedComponent)
{
	static UFunction* uFnOnParticleSystemFinished = nullptr;

	if (!uFnOnParticleSystemFinished)
	{
		uFnOnParticleSystemFinished = UFunction::FindFunction("Function Engine.Emitter.OnParticleSystemFinished");
	}

	AEmitter_execOnParticleSystemFinished_Params OnParticleSystemFinished_Params;
	memset(&OnParticleSystemFinished_Params, 0, sizeof(OnParticleSystemFinished_Params));
	OnParticleSystemFinished_Params.FinishedComponent = FinishedComponent;

	this->ProcessEvent(uFnOnParticleSystemFinished, &OnParticleSystemFinished_Params, nullptr);
};

// Function Engine.Emitter.ReplicatedEvent
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FName                    VarName                        (CPF_Parm)

void AEmitter::eventReplicatedEvent(const class FName& VarName)
{
	static UFunction* uFnReplicatedEvent = nullptr;

	if (!uFnReplicatedEvent)
	{
		uFnReplicatedEvent = UFunction::FindFunction("Function Engine.Emitter.ReplicatedEvent");
	}

	AEmitter_eventReplicatedEvent_Params ReplicatedEvent_Params;
	memset(&ReplicatedEvent_Params, 0, sizeof(ReplicatedEvent_Params));
	memcpy_s(&ReplicatedEvent_Params.VarName, sizeof(ReplicatedEvent_Params.VarName), &VarName, sizeof(VarName));

	this->ProcessEvent(uFnReplicatedEvent, &ReplicatedEvent_Params, nullptr);
};

// Function Engine.Emitter.PostBeginPlay
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AEmitter::eventPostBeginPlay()
{
	static UFunction* uFnPostBeginPlay = nullptr;

	if (!uFnPostBeginPlay)
	{
		uFnPostBeginPlay = UFunction::FindFunction("Function Engine.Emitter.PostBeginPlay");
	}

	AEmitter_eventPostBeginPlay_Params PostBeginPlay_Params;
	memset(&PostBeginPlay_Params, 0, sizeof(PostBeginPlay_Params));

	this->ProcessEvent(uFnPostBeginPlay, &PostBeginPlay_Params, nullptr);
};

// Function Engine.Emitter.SetTemplate
// [0x00024C00] (FUNC_Native | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[13745])
// Parameter Info:
// class UParticleSystem*         NewTemplate                    (CPF_Parm)
// uint32_t                       bDestroyOnFinish               (CPF_OptionalParm | CPF_Parm)

void AEmitter::eventSetTemplate(class UParticleSystem* NewTemplate, bool bDestroyOnFinish)
{
	static UFunction* uFnSetTemplate = nullptr;

	if (!uFnSetTemplate)
	{
		uFnSetTemplate = UFunction::FindFunction("Function Engine.Emitter.SetTemplate");
	}

	AEmitter_eventSetTemplate_Params SetTemplate_Params;
	memset(&SetTemplate_Params, 0, sizeof(SetTemplate_Params));
	SetTemplate_Params.NewTemplate = NewTemplate;
	SetTemplate_Params.bDestroyOnFinish = bDestroyOnFinish;

	uFnSetTemplate->iNative = 0;
	uFnSetTemplate->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetTemplate, &SetTemplate_Params, nullptr);
	uFnSetTemplate->FunctionFlags |= 0x400;
	uFnSetTemplate->iNative = 13745;
};

// Function Engine.EmitterPool.SpawnEmitterCustomLifetime
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UParticleSystemComponent* ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline)
// class UParticleSystem*         EmitterTemplate                (CPF_Parm)

class UParticleSystemComponent* AEmitterPool::SpawnEmitterCustomLifetime(class UParticleSystem* EmitterTemplate)
{
	static UFunction* uFnSpawnEmitterCustomLifetime = nullptr;

	if (!uFnSpawnEmitterCustomLifetime)
	{
		uFnSpawnEmitterCustomLifetime = UFunction::FindFunction("Function Engine.EmitterPool.SpawnEmitterCustomLifetime");
	}

	AEmitterPool_execSpawnEmitterCustomLifetime_Params SpawnEmitterCustomLifetime_Params;
	memset(&SpawnEmitterCustomLifetime_Params, 0, sizeof(SpawnEmitterCustomLifetime_Params));
	SpawnEmitterCustomLifetime_Params.EmitterTemplate = EmitterTemplate;

	this->ProcessEvent(uFnSpawnEmitterCustomLifetime, &SpawnEmitterCustomLifetime_Params, nullptr);

	return SpawnEmitterCustomLifetime_Params.ReturnValue;
};

// Function Engine.EmitterPool.SpawnEmitterMeshAttachment
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[26099])
// Parameter Info:
// class UParticleSystemComponent* ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline)
// class UParticleSystem*         EmitterTemplate                (CPF_Parm)
// class USkeletalMeshComponent*  Mesh                           (CPF_Parm | CPF_EditInline)
// class FName                    AttachPointName                (CPF_Parm)
// uint32_t                       bAttachToSocket                (CPF_OptionalParm | CPF_Parm)
// struct FVector                 RelativeLoc                    (CPF_OptionalParm | CPF_Parm)
// struct FRotator                RelativeRot                    (CPF_OptionalParm | CPF_Parm)

class UParticleSystemComponent* AEmitterPool::SpawnEmitterMeshAttachment(class UParticleSystem* EmitterTemplate, class USkeletalMeshComponent* Mesh, const class FName& AttachPointName, bool bAttachToSocket, const struct FVector& RelativeLoc, const struct FRotator& RelativeRot)
{
	static UFunction* uFnSpawnEmitterMeshAttachment = nullptr;

	if (!uFnSpawnEmitterMeshAttachment)
	{
		uFnSpawnEmitterMeshAttachment = UFunction::FindFunction("Function Engine.EmitterPool.SpawnEmitterMeshAttachment");
	}

	AEmitterPool_execSpawnEmitterMeshAttachment_Params SpawnEmitterMeshAttachment_Params;
	memset(&SpawnEmitterMeshAttachment_Params, 0, sizeof(SpawnEmitterMeshAttachment_Params));
	SpawnEmitterMeshAttachment_Params.EmitterTemplate = EmitterTemplate;
	SpawnEmitterMeshAttachment_Params.Mesh = Mesh;
	memcpy_s(&SpawnEmitterMeshAttachment_Params.AttachPointName, sizeof(SpawnEmitterMeshAttachment_Params.AttachPointName), &AttachPointName, sizeof(AttachPointName));
	SpawnEmitterMeshAttachment_Params.bAttachToSocket = bAttachToSocket;
	memcpy_s(&SpawnEmitterMeshAttachment_Params.RelativeLoc, sizeof(SpawnEmitterMeshAttachment_Params.RelativeLoc), &RelativeLoc, sizeof(RelativeLoc));
	memcpy_s(&SpawnEmitterMeshAttachment_Params.RelativeRot, sizeof(SpawnEmitterMeshAttachment_Params.RelativeRot), &RelativeRot, sizeof(RelativeRot));

	uFnSpawnEmitterMeshAttachment->iNative = 0;
	uFnSpawnEmitterMeshAttachment->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSpawnEmitterMeshAttachment, &SpawnEmitterMeshAttachment_Params, nullptr);
	uFnSpawnEmitterMeshAttachment->FunctionFlags |= 0x400;
	uFnSpawnEmitterMeshAttachment->iNative = 26099;

	return SpawnEmitterMeshAttachment_Params.ReturnValue;
};

// Function Engine.EmitterPool.SpawnEmitter
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[26097])
// Parameter Info:
// class UParticleSystemComponent* ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline)
// class UParticleSystem*         EmitterTemplate                (CPF_Parm)
// struct FVector                 SpawnLocation                  (CPF_Parm)
// struct FRotator                SpawnRotation                  (CPF_OptionalParm | CPF_Parm)
// class AActor*                  AttachToActor                  (CPF_OptionalParm | CPF_Parm)
// uint32_t                       bInheritScaleFromBase          (CPF_OptionalParm | CPF_Parm)

class UParticleSystemComponent* AEmitterPool::SpawnEmitter(class UParticleSystem* EmitterTemplate, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation, class AActor* AttachToActor, bool bInheritScaleFromBase)
{
	static UFunction* uFnSpawnEmitter = nullptr;

	if (!uFnSpawnEmitter)
	{
		uFnSpawnEmitter = UFunction::FindFunction("Function Engine.EmitterPool.SpawnEmitter");
	}

	AEmitterPool_execSpawnEmitter_Params SpawnEmitter_Params;
	memset(&SpawnEmitter_Params, 0, sizeof(SpawnEmitter_Params));
	SpawnEmitter_Params.EmitterTemplate = EmitterTemplate;
	memcpy_s(&SpawnEmitter_Params.SpawnLocation, sizeof(SpawnEmitter_Params.SpawnLocation), &SpawnLocation, sizeof(SpawnLocation));
	memcpy_s(&SpawnEmitter_Params.SpawnRotation, sizeof(SpawnEmitter_Params.SpawnRotation), &SpawnRotation, sizeof(SpawnRotation));
	SpawnEmitter_Params.AttachToActor = AttachToActor;
	SpawnEmitter_Params.bInheritScaleFromBase = bInheritScaleFromBase;

	uFnSpawnEmitter->iNative = 0;
	uFnSpawnEmitter->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSpawnEmitter, &SpawnEmitter_Params, nullptr);
	uFnSpawnEmitter->FunctionFlags |= 0x400;
	uFnSpawnEmitter->iNative = 26097;

	return SpawnEmitter_Params.ReturnValue;
};

// Function Engine.EmitterPool.GetPooledComponent
// [0x00080401] (FUNC_Final | FUNC_Native | FUNC_Protected | FUNC_AllFlags) (iNative[20688])
// Parameter Info:
// class UParticleSystemComponent* ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline)
// class UParticleSystem*         EmitterTemplate                (CPF_Parm)
// uint32_t                       bAutoActivate                  (CPF_Parm)

class UParticleSystemComponent* AEmitterPool::GetPooledComponent(class UParticleSystem* EmitterTemplate, bool bAutoActivate)
{
	static UFunction* uFnGetPooledComponent = nullptr;

	if (!uFnGetPooledComponent)
	{
		uFnGetPooledComponent = UFunction::FindFunction("Function Engine.EmitterPool.GetPooledComponent");
	}

	AEmitterPool_execGetPooledComponent_Params GetPooledComponent_Params;
	memset(&GetPooledComponent_Params, 0, sizeof(GetPooledComponent_Params));
	GetPooledComponent_Params.EmitterTemplate = EmitterTemplate;
	GetPooledComponent_Params.bAutoActivate = bAutoActivate;

	uFnGetPooledComponent->iNative = 0;
	uFnGetPooledComponent->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetPooledComponent, &GetPooledComponent_Params, nullptr);
	uFnGetPooledComponent->FunctionFlags |= 0x400;
	uFnGetPooledComponent->iNative = 20688;

	return GetPooledComponent_Params.ReturnValue;
};

// Function Engine.EmitterPool.GetFreeMatInstConsts
// [0x00084401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Protected | FUNC_AllFlags) (iNative[20587])
// Parameter Info:
// class UMaterialInstanceConstant* ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       bCreateNewObject               (CPF_OptionalParm | CPF_Parm)

class UMaterialInstanceConstant* AEmitterPool::GetFreeMatInstConsts(bool bCreateNewObject)
{
	static UFunction* uFnGetFreeMatInstConsts = nullptr;

	if (!uFnGetFreeMatInstConsts)
	{
		uFnGetFreeMatInstConsts = UFunction::FindFunction("Function Engine.EmitterPool.GetFreeMatInstConsts");
	}

	AEmitterPool_execGetFreeMatInstConsts_Params GetFreeMatInstConsts_Params;
	memset(&GetFreeMatInstConsts_Params, 0, sizeof(GetFreeMatInstConsts_Params));
	GetFreeMatInstConsts_Params.bCreateNewObject = bCreateNewObject;

	uFnGetFreeMatInstConsts->iNative = 0;
	uFnGetFreeMatInstConsts->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetFreeMatInstConsts, &GetFreeMatInstConsts_Params, nullptr);
	uFnGetFreeMatInstConsts->FunctionFlags |= 0x400;
	uFnGetFreeMatInstConsts->iNative = 20587;

	return GetFreeMatInstConsts_Params.ReturnValue;
};

// Function Engine.EmitterPool.FreeMaterialInstanceConstants
// [0x00080401] (FUNC_Final | FUNC_Native | FUNC_Protected | FUNC_AllFlags) (iNative[20315])
// Parameter Info:
// class UStaticMeshComponent*    SMC                            (CPF_Parm | CPF_EditInline)

void AEmitterPool::FreeMaterialInstanceConstants(class UStaticMeshComponent* SMC)
{
	static UFunction* uFnFreeMaterialInstanceConstants = nullptr;

	if (!uFnFreeMaterialInstanceConstants)
	{
		uFnFreeMaterialInstanceConstants = UFunction::FindFunction("Function Engine.EmitterPool.FreeMaterialInstanceConstants");
	}

	AEmitterPool_execFreeMaterialInstanceConstants_Params FreeMaterialInstanceConstants_Params;
	memset(&FreeMaterialInstanceConstants_Params, 0, sizeof(FreeMaterialInstanceConstants_Params));
	FreeMaterialInstanceConstants_Params.SMC = SMC;

	uFnFreeMaterialInstanceConstants->iNative = 0;
	uFnFreeMaterialInstanceConstants->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnFreeMaterialInstanceConstants, &FreeMaterialInstanceConstants_Params, nullptr);
	uFnFreeMaterialInstanceConstants->FunctionFlags |= 0x400;
	uFnFreeMaterialInstanceConstants->iNative = 20315;
};

// Function Engine.EmitterPool.GetFreeStaticMeshComponent
// [0x00084401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Protected | FUNC_AllFlags) (iNative[20589])
// Parameter Info:
// class UStaticMeshComponent*    ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline)
// uint32_t                       bCreateNewObject               (CPF_OptionalParm | CPF_Parm)

class UStaticMeshComponent* AEmitterPool::GetFreeStaticMeshComponent(bool bCreateNewObject)
{
	static UFunction* uFnGetFreeStaticMeshComponent = nullptr;

	if (!uFnGetFreeStaticMeshComponent)
	{
		uFnGetFreeStaticMeshComponent = UFunction::FindFunction("Function Engine.EmitterPool.GetFreeStaticMeshComponent");
	}

	AEmitterPool_execGetFreeStaticMeshComponent_Params GetFreeStaticMeshComponent_Params;
	memset(&GetFreeStaticMeshComponent_Params, 0, sizeof(GetFreeStaticMeshComponent_Params));
	GetFreeStaticMeshComponent_Params.bCreateNewObject = bCreateNewObject;

	uFnGetFreeStaticMeshComponent->iNative = 0;
	uFnGetFreeStaticMeshComponent->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetFreeStaticMeshComponent, &GetFreeStaticMeshComponent_Params, nullptr);
	uFnGetFreeStaticMeshComponent->FunctionFlags |= 0x400;
	uFnGetFreeStaticMeshComponent->iNative = 20589;

	return GetFreeStaticMeshComponent_Params.ReturnValue;
};

// Function Engine.EmitterPool.FreeStaticMeshComponents
// [0x00080401] (FUNC_Final | FUNC_Native | FUNC_Protected | FUNC_AllFlags) (iNative[20319])
// Parameter Info:
// class UParticleSystemComponent* PSC                            (CPF_Parm | CPF_EditInline)

void AEmitterPool::FreeStaticMeshComponents(class UParticleSystemComponent* PSC)
{
	static UFunction* uFnFreeStaticMeshComponents = nullptr;

	if (!uFnFreeStaticMeshComponents)
	{
		uFnFreeStaticMeshComponents = UFunction::FindFunction("Function Engine.EmitterPool.FreeStaticMeshComponents");
	}

	AEmitterPool_execFreeStaticMeshComponents_Params FreeStaticMeshComponents_Params;
	memset(&FreeStaticMeshComponents_Params, 0, sizeof(FreeStaticMeshComponents_Params));
	FreeStaticMeshComponents_Params.PSC = PSC;

	uFnFreeStaticMeshComponents->iNative = 0;
	uFnFreeStaticMeshComponents->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnFreeStaticMeshComponents, &FreeStaticMeshComponents_Params, nullptr);
	uFnFreeStaticMeshComponents->FunctionFlags |= 0x400;
	uFnFreeStaticMeshComponents->iNative = 20319;
};

// Function Engine.EmitterPool.ReturnToPool
// [0x00080401] (FUNC_Final | FUNC_Native | FUNC_Protected | FUNC_AllFlags) (iNative[25186])
// Parameter Info:
// class UParticleSystemComponent* PSC                            (CPF_Parm | CPF_EditInline)

void AEmitterPool::ReturnToPool(class UParticleSystemComponent* PSC)
{
	static UFunction* uFnReturnToPool = nullptr;

	if (!uFnReturnToPool)
	{
		uFnReturnToPool = UFunction::FindFunction("Function Engine.EmitterPool.ReturnToPool");
	}

	AEmitterPool_execReturnToPool_Params ReturnToPool_Params;
	memset(&ReturnToPool_Params, 0, sizeof(ReturnToPool_Params));
	ReturnToPool_Params.PSC = PSC;

	uFnReturnToPool->iNative = 0;
	uFnReturnToPool->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnReturnToPool, &ReturnToPool_Params, nullptr);
	uFnReturnToPool->FunctionFlags |= 0x400;
	uFnReturnToPool->iNative = 25186;
};

// Function Engine.EmitterPool.ClearPoolComponents
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[18146])
// Parameter Info:
// uint32_t                       bClearActive                   (CPF_OptionalParm | CPF_Parm)

void AEmitterPool::ClearPoolComponents(bool bClearActive)
{
	static UFunction* uFnClearPoolComponents = nullptr;

	if (!uFnClearPoolComponents)
	{
		uFnClearPoolComponents = UFunction::FindFunction("Function Engine.EmitterPool.ClearPoolComponents");
	}

	AEmitterPool_execClearPoolComponents_Params ClearPoolComponents_Params;
	memset(&ClearPoolComponents_Params, 0, sizeof(ClearPoolComponents_Params));
	ClearPoolComponents_Params.bClearActive = bClearActive;

	uFnClearPoolComponents->iNative = 0;
	uFnClearPoolComponents->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnClearPoolComponents, &ClearPoolComponents_Params, nullptr);
	uFnClearPoolComponents->FunctionFlags |= 0x400;
	uFnClearPoolComponents->iNative = 18146;
};

// Function Engine.EmitterPool.OnParticleSystemFinished
// [0x00020C00] (FUNC_Native | FUNC_Event | FUNC_Public | FUNC_AllFlags) (iNative[13653])
// Parameter Info:
// class UParticleSystemComponent* PSC                            (CPF_Parm | CPF_EditInline)

void AEmitterPool::eventOnParticleSystemFinished(class UParticleSystemComponent* PSC)
{
	static UFunction* uFnOnParticleSystemFinished = nullptr;

	if (!uFnOnParticleSystemFinished)
	{
		uFnOnParticleSystemFinished = UFunction::FindFunction("Function Engine.EmitterPool.OnParticleSystemFinished");
	}

	AEmitterPool_eventOnParticleSystemFinished_Params OnParticleSystemFinished_Params;
	memset(&OnParticleSystemFinished_Params, 0, sizeof(OnParticleSystemFinished_Params));
	OnParticleSystemFinished_Params.PSC = PSC;

	uFnOnParticleSystemFinished->iNative = 0;
	uFnOnParticleSystemFinished->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnOnParticleSystemFinished, &OnParticleSystemFinished_Params, nullptr);
	uFnOnParticleSystemFinished->FunctionFlags |= 0x400;
	uFnOnParticleSystemFinished->iNative = 13653;
};

// Function Engine.HUD.OnLostFocusPause
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bEnable                        (CPF_Parm)

void AHUD::eventOnLostFocusPause(bool bEnable)
{
	static UFunction* uFnOnLostFocusPause = nullptr;

	if (!uFnOnLostFocusPause)
	{
		uFnOnLostFocusPause = UFunction::FindFunction("Function Engine.HUD.OnLostFocusPause");
	}

	AHUD_eventOnLostFocusPause_Params OnLostFocusPause_Params;
	memset(&OnLostFocusPause_Params, 0, sizeof(OnLostFocusPause_Params));
	OnLostFocusPause_Params.bEnable = bEnable;

	this->ProcessEvent(uFnOnLostFocusPause, &OnLostFocusPause_Params, nullptr);
};

// Function Engine.HUD.NotifyBindPostProcessEffects
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AHUD::NotifyBindPostProcessEffects()
{
	static UFunction* uFnNotifyBindPostProcessEffects = nullptr;

	if (!uFnNotifyBindPostProcessEffects)
	{
		uFnNotifyBindPostProcessEffects = UFunction::FindFunction("Function Engine.HUD.NotifyBindPostProcessEffects");
	}

	AHUD_execNotifyBindPostProcessEffects_Params NotifyBindPostProcessEffects_Params;
	memset(&NotifyBindPostProcessEffects_Params, 0, sizeof(NotifyBindPostProcessEffects_Params));

	this->ProcessEvent(uFnNotifyBindPostProcessEffects, &NotifyBindPostProcessEffects_Params, nullptr);
};

// Function Engine.HUD.PlayerOwnerDied
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AHUD::PlayerOwnerDied()
{
	static UFunction* uFnPlayerOwnerDied = nullptr;

	if (!uFnPlayerOwnerDied)
	{
		uFnPlayerOwnerDied = UFunction::FindFunction("Function Engine.HUD.PlayerOwnerDied");
	}

	AHUD_execPlayerOwnerDied_Params PlayerOwnerDied_Params;
	memset(&PlayerOwnerDied_Params, 0, sizeof(PlayerOwnerDied_Params));

	this->ProcessEvent(uFnPlayerOwnerDied, &PlayerOwnerDied_Params, nullptr);
};

// Function Engine.HUD.GetFontSizeIndex
// [0x00022002] (FUNC_Defined | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UFont*                   ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        FontSize                       (CPF_Parm)

class UFont* AHUD::GetFontSizeIndex(int32_t FontSize)
{
	static UFunction* uFnGetFontSizeIndex = nullptr;

	if (!uFnGetFontSizeIndex)
	{
		uFnGetFontSizeIndex = UFunction::FindFunction("Function Engine.HUD.GetFontSizeIndex");
	}

	AHUD_execGetFontSizeIndex_Params GetFontSizeIndex_Params;
	memset(&GetFontSizeIndex_Params, 0, sizeof(GetFontSizeIndex_Params));
	memcpy_s(&GetFontSizeIndex_Params.FontSize, sizeof(GetFontSizeIndex_Params.FontSize), &FontSize, sizeof(FontSize));

	AHUD::StaticClass()->ProcessEvent(uFnGetFontSizeIndex, &GetFontSizeIndex_Params, nullptr);

	return GetFontSizeIndex_Params.ReturnValue;
};

// Function Engine.HUD.DrawText
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  Text                           (CPF_Parm | CPF_NeedCtorLink)
// struct FVector2D               Position                       (CPF_Parm)
// class UFont*                   TextFont                       (CPF_Parm)
// struct FVector2D               FontScale                      (CPF_Parm)
// struct FColor                  TextColor                      (CPF_Parm)

void AHUD::DrawTextW(const class FString& Text, const struct FVector2D& Position, class UFont* TextFont, const struct FVector2D& FontScale, const struct FColor& TextColor)
{
	static UFunction* uFnDrawTextW = nullptr;

	if (!uFnDrawTextW)
	{
		uFnDrawTextW = UFunction::FindFunction("Function Engine.HUD.DrawText");
	}

	AHUD_execDrawTextW_Params DrawTextW_Params;
	memset(&DrawTextW_Params, 0, sizeof(DrawTextW_Params));
	memcpy_s(&DrawTextW_Params.Text, sizeof(DrawTextW_Params.Text), &Text, sizeof(Text));
	memcpy_s(&DrawTextW_Params.Position, sizeof(DrawTextW_Params.Position), &Position, sizeof(Position));
	DrawTextW_Params.TextFont = TextFont;
	memcpy_s(&DrawTextW_Params.FontScale, sizeof(DrawTextW_Params.FontScale), &FontScale, sizeof(FontScale));
	memcpy_s(&DrawTextW_Params.TextColor, sizeof(DrawTextW_Params.TextColor), &TextColor, sizeof(TextColor));

	this->ProcessEvent(uFnDrawTextW, &DrawTextW_Params, nullptr);
};

// Function Engine.HUD.DisplayKismetMessages
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AHUD::DisplayKismetMessages()
{
	static UFunction* uFnDisplayKismetMessages = nullptr;

	if (!uFnDisplayKismetMessages)
	{
		uFnDisplayKismetMessages = UFunction::FindFunction("Function Engine.HUD.DisplayKismetMessages");
	}

	AHUD_execDisplayKismetMessages_Params DisplayKismetMessages_Params;
	memset(&DisplayKismetMessages_Params, 0, sizeof(DisplayKismetMessages_Params));

	this->ProcessEvent(uFnDisplayKismetMessages, &DisplayKismetMessages_Params, nullptr);
};

// Function Engine.HUD.DisplayLocalMessages
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AHUD::DisplayLocalMessages()
{
	static UFunction* uFnDisplayLocalMessages = nullptr;

	if (!uFnDisplayLocalMessages)
	{
		uFnDisplayLocalMessages = UFunction::FindFunction("Function Engine.HUD.DisplayLocalMessages");
	}

	AHUD_execDisplayLocalMessages_Params DisplayLocalMessages_Params;
	memset(&DisplayLocalMessages_Params, 0, sizeof(DisplayLocalMessages_Params));

	this->ProcessEvent(uFnDisplayLocalMessages, &DisplayLocalMessages_Params, nullptr);
};

// Function Engine.HUD.DrawMessageText
// [0x00820002] (FUNC_Defined | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// struct FHudLocalizedMessage    LocalMessage                   (CPF_Parm | CPF_NeedCtorLink)
// float                          ScreenX                        (CPF_Parm)
// float                          ScreenY                        (CPF_Parm)

void AHUD::DrawMessageText(const struct FHudLocalizedMessage& LocalMessage, float ScreenX, float ScreenY)
{
	static UFunction* uFnDrawMessageText = nullptr;

	if (!uFnDrawMessageText)
	{
		uFnDrawMessageText = UFunction::FindFunction("Function Engine.HUD.DrawMessageText");
	}

	AHUD_execDrawMessageText_Params DrawMessageText_Params;
	memset(&DrawMessageText_Params, 0, sizeof(DrawMessageText_Params));
	memcpy_s(&DrawMessageText_Params.LocalMessage, sizeof(DrawMessageText_Params.LocalMessage), &LocalMessage, sizeof(LocalMessage));
	memcpy_s(&DrawMessageText_Params.ScreenX, sizeof(DrawMessageText_Params.ScreenX), &ScreenX, sizeof(ScreenX));
	memcpy_s(&DrawMessageText_Params.ScreenY, sizeof(DrawMessageText_Params.ScreenY), &ScreenY, sizeof(ScreenY));

	this->ProcessEvent(uFnDrawMessageText, &DrawMessageText_Params, nullptr);
};

// Function Engine.HUD.DrawMessage
// [0x00420002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// int32_t                        I                              (CPF_Parm)
// float                          PosY                           (CPF_Parm)
// float                          DX                             (CPF_Parm | CPF_OutParm)
// float                          DY                             (CPF_Parm | CPF_OutParm)

void AHUD::DrawMessage(int32_t I, float PosY, float& DX, float& DY)
{
	static UFunction* uFnDrawMessage = nullptr;

	if (!uFnDrawMessage)
	{
		uFnDrawMessage = UFunction::FindFunction("Function Engine.HUD.DrawMessage");
	}

	AHUD_execDrawMessage_Params DrawMessage_Params;
	memset(&DrawMessage_Params, 0, sizeof(DrawMessage_Params));
	memcpy_s(&DrawMessage_Params.I, sizeof(DrawMessage_Params.I), &I, sizeof(I));
	memcpy_s(&DrawMessage_Params.PosY, sizeof(DrawMessage_Params.PosY), &PosY, sizeof(PosY));
	memcpy_s(&DrawMessage_Params.DX, sizeof(DrawMessage_Params.DX), &DX, sizeof(DX));
	memcpy_s(&DrawMessage_Params.DY, sizeof(DrawMessage_Params.DY), &DY, sizeof(DY));

	this->ProcessEvent(uFnDrawMessage, &DrawMessage_Params, nullptr);

	memcpy_s(&DX, sizeof(DX), &DrawMessage_Params.DX, sizeof(DrawMessage_Params.DX));
	memcpy_s(&DY, sizeof(DY), &DrawMessage_Params.DY, sizeof(DrawMessage_Params.DY));
};

// Function Engine.HUD.GetScreenCoords
// [0x00420002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// float                          PosY                           (CPF_Parm)
// float                          ScreenX                        (CPF_Parm | CPF_OutParm)
// float                          ScreenY                        (CPF_Parm | CPF_OutParm)
// struct FHudLocalizedMessage    InMessage                      (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void AHUD::GetScreenCoords(float PosY, float& ScreenX, float& ScreenY, struct FHudLocalizedMessage& InMessage)
{
	static UFunction* uFnGetScreenCoords = nullptr;

	if (!uFnGetScreenCoords)
	{
		uFnGetScreenCoords = UFunction::FindFunction("Function Engine.HUD.GetScreenCoords");
	}

	AHUD_execGetScreenCoords_Params GetScreenCoords_Params;
	memset(&GetScreenCoords_Params, 0, sizeof(GetScreenCoords_Params));
	memcpy_s(&GetScreenCoords_Params.PosY, sizeof(GetScreenCoords_Params.PosY), &PosY, sizeof(PosY));
	memcpy_s(&GetScreenCoords_Params.ScreenX, sizeof(GetScreenCoords_Params.ScreenX), &ScreenX, sizeof(ScreenX));
	memcpy_s(&GetScreenCoords_Params.ScreenY, sizeof(GetScreenCoords_Params.ScreenY), &ScreenY, sizeof(ScreenY));
	memcpy_s(&GetScreenCoords_Params.InMessage, sizeof(GetScreenCoords_Params.InMessage), &InMessage, sizeof(InMessage));

	this->ProcessEvent(uFnGetScreenCoords, &GetScreenCoords_Params, nullptr);

	memcpy_s(&ScreenX, sizeof(ScreenX), &GetScreenCoords_Params.ScreenX, sizeof(GetScreenCoords_Params.ScreenX));
	memcpy_s(&ScreenY, sizeof(ScreenY), &GetScreenCoords_Params.ScreenY, sizeof(GetScreenCoords_Params.ScreenY));
	memcpy_s(&InMessage, sizeof(InMessage), &GetScreenCoords_Params.InMessage, sizeof(GetScreenCoords_Params.InMessage));
};

// Function Engine.HUD.AddLocalizedMessage
// [0x00024002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Index                          (CPF_Parm)
// class ULocalMessage*           InMessageClass                 (CPF_Parm)
// class FString                  CriticalString                 (CPF_Parm | CPF_NeedCtorLink)
// int32_t                        Switch                         (CPF_Parm)
// float                          Position                       (CPF_Parm)
// float                          Lifetime                       (CPF_Parm)
// int32_t                        FontSize                       (CPF_Parm)
// struct FColor                  DrawColor                      (CPF_Parm)
// int32_t                        MessageCount                   (CPF_OptionalParm | CPF_Parm)
// class UObject*                 OptionalObject                 (CPF_OptionalParm | CPF_Parm)

void AHUD::AddLocalizedMessage(int32_t Index, class ULocalMessage* InMessageClass, const class FString& CriticalString, int32_t Switch, float Position, float Lifetime, int32_t FontSize, const struct FColor& DrawColor, int32_t MessageCount, class UObject* OptionalObject)
{
	static UFunction* uFnAddLocalizedMessage = nullptr;

	if (!uFnAddLocalizedMessage)
	{
		uFnAddLocalizedMessage = UFunction::FindFunction("Function Engine.HUD.AddLocalizedMessage");
	}

	AHUD_execAddLocalizedMessage_Params AddLocalizedMessage_Params;
	memset(&AddLocalizedMessage_Params, 0, sizeof(AddLocalizedMessage_Params));
	memcpy_s(&AddLocalizedMessage_Params.Index, sizeof(AddLocalizedMessage_Params.Index), &Index, sizeof(Index));
	AddLocalizedMessage_Params.InMessageClass = InMessageClass;
	memcpy_s(&AddLocalizedMessage_Params.CriticalString, sizeof(AddLocalizedMessage_Params.CriticalString), &CriticalString, sizeof(CriticalString));
	memcpy_s(&AddLocalizedMessage_Params.Switch, sizeof(AddLocalizedMessage_Params.Switch), &Switch, sizeof(Switch));
	memcpy_s(&AddLocalizedMessage_Params.Position, sizeof(AddLocalizedMessage_Params.Position), &Position, sizeof(Position));
	memcpy_s(&AddLocalizedMessage_Params.Lifetime, sizeof(AddLocalizedMessage_Params.Lifetime), &Lifetime, sizeof(Lifetime));
	memcpy_s(&AddLocalizedMessage_Params.FontSize, sizeof(AddLocalizedMessage_Params.FontSize), &FontSize, sizeof(FontSize));
	memcpy_s(&AddLocalizedMessage_Params.DrawColor, sizeof(AddLocalizedMessage_Params.DrawColor), &DrawColor, sizeof(DrawColor));
	memcpy_s(&AddLocalizedMessage_Params.MessageCount, sizeof(AddLocalizedMessage_Params.MessageCount), &MessageCount, sizeof(MessageCount));
	AddLocalizedMessage_Params.OptionalObject = OptionalObject;

	this->ProcessEvent(uFnAddLocalizedMessage, &AddLocalizedMessage_Params, nullptr);
};

// Function Engine.HUD.LocalizedMessage
// [0x00024002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class ULocalMessage*           InMessageClass                 (CPF_Parm)
// class FString                  CriticalString                 (CPF_Parm | CPF_NeedCtorLink)
// int32_t                        Switch                         (CPF_Parm)
// float                          Position                       (CPF_Parm)
// float                          Lifetime                       (CPF_Parm)
// int32_t                        FontSize                       (CPF_Parm)
// struct FColor                  DrawColor                      (CPF_Parm)
// class UObject*                 OptionalObject                 (CPF_OptionalParm | CPF_Parm)

void AHUD::LocalizedMessage(class ULocalMessage* InMessageClass, const class FString& CriticalString, int32_t Switch, float Position, float Lifetime, int32_t FontSize, const struct FColor& DrawColor, class UObject* OptionalObject)
{
	static UFunction* uFnLocalizedMessage = nullptr;

	if (!uFnLocalizedMessage)
	{
		uFnLocalizedMessage = UFunction::FindFunction("Function Engine.HUD.LocalizedMessage");
	}

	AHUD_execLocalizedMessage_Params LocalizedMessage_Params;
	memset(&LocalizedMessage_Params, 0, sizeof(LocalizedMessage_Params));
	LocalizedMessage_Params.InMessageClass = InMessageClass;
	memcpy_s(&LocalizedMessage_Params.CriticalString, sizeof(LocalizedMessage_Params.CriticalString), &CriticalString, sizeof(CriticalString));
	memcpy_s(&LocalizedMessage_Params.Switch, sizeof(LocalizedMessage_Params.Switch), &Switch, sizeof(Switch));
	memcpy_s(&LocalizedMessage_Params.Position, sizeof(LocalizedMessage_Params.Position), &Position, sizeof(Position));
	memcpy_s(&LocalizedMessage_Params.Lifetime, sizeof(LocalizedMessage_Params.Lifetime), &Lifetime, sizeof(Lifetime));
	memcpy_s(&LocalizedMessage_Params.FontSize, sizeof(LocalizedMessage_Params.FontSize), &FontSize, sizeof(FontSize));
	memcpy_s(&LocalizedMessage_Params.DrawColor, sizeof(LocalizedMessage_Params.DrawColor), &DrawColor, sizeof(DrawColor));
	LocalizedMessage_Params.OptionalObject = OptionalObject;

	this->ProcessEvent(uFnLocalizedMessage, &LocalizedMessage_Params, nullptr);
};

// Function Engine.HUD.AddConsoleMessage
// [0x00024002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  M                              (CPF_Parm | CPF_NeedCtorLink)
// class ULocalMessage*           InMessageClass                 (CPF_Parm)
// float                          Lifetime                       (CPF_OptionalParm | CPF_Parm)

void AHUD::AddConsoleMessage(const class FString& M, class ULocalMessage* InMessageClass, float Lifetime)
{
	static UFunction* uFnAddConsoleMessage = nullptr;

	if (!uFnAddConsoleMessage)
	{
		uFnAddConsoleMessage = UFunction::FindFunction("Function Engine.HUD.AddConsoleMessage");
	}

	AHUD_execAddConsoleMessage_Params AddConsoleMessage_Params;
	memset(&AddConsoleMessage_Params, 0, sizeof(AddConsoleMessage_Params));
	memcpy_s(&AddConsoleMessage_Params.M, sizeof(AddConsoleMessage_Params.M), &M, sizeof(M));
	AddConsoleMessage_Params.InMessageClass = InMessageClass;
	memcpy_s(&AddConsoleMessage_Params.Lifetime, sizeof(AddConsoleMessage_Params.Lifetime), &Lifetime, sizeof(Lifetime));

	this->ProcessEvent(uFnAddConsoleMessage, &AddConsoleMessage_Params, nullptr);
};

// Function Engine.HUD.DisplayConsoleMessages
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[18966])
// Parameter Info:

void AHUD::DisplayConsoleMessages()
{
	static UFunction* uFnDisplayConsoleMessages = nullptr;

	if (!uFnDisplayConsoleMessages)
	{
		uFnDisplayConsoleMessages = UFunction::FindFunction("Function Engine.HUD.DisplayConsoleMessages");
	}

	AHUD_execDisplayConsoleMessages_Params DisplayConsoleMessages_Params;
	memset(&DisplayConsoleMessages_Params, 0, sizeof(DisplayConsoleMessages_Params));

	uFnDisplayConsoleMessages->iNative = 0;
	uFnDisplayConsoleMessages->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnDisplayConsoleMessages, &DisplayConsoleMessages_Params, nullptr);
	uFnDisplayConsoleMessages->FunctionFlags |= 0x400;
	uFnDisplayConsoleMessages->iNative = 18966;
};

// Function Engine.HUD.DebugMessage
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  Message                        (CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink)
// class FName                    MsgType                        (CPF_Parm)

void AHUD::eventDebugMessage(const class FString& Message, const class FName& MsgType)
{
	static UFunction* uFnDebugMessage = nullptr;

	if (!uFnDebugMessage)
	{
		uFnDebugMessage = UFunction::FindFunction("Function Engine.HUD.DebugMessage");
	}

	AHUD_eventDebugMessage_Params DebugMessage_Params;
	memset(&DebugMessage_Params, 0, sizeof(DebugMessage_Params));
	memcpy_s(&DebugMessage_Params.Message, sizeof(DebugMessage_Params.Message), &Message, sizeof(Message));
	memcpy_s(&DebugMessage_Params.MsgType, sizeof(DebugMessage_Params.MsgType), &MsgType, sizeof(MsgType));

	this->ProcessEvent(uFnDebugMessage, &DebugMessage_Params, nullptr);
};

// Function Engine.HUD.Message
// [0x00024002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  Msg                            (CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink)
// class FName                    MsgType                        (CPF_Parm)
// float                          Lifetime                       (CPF_OptionalParm | CPF_Parm)

void AHUD::Message(const class FString& Msg, const class FName& MsgType, float Lifetime)
{
	static UFunction* uFnMessage = nullptr;

	if (!uFnMessage)
	{
		uFnMessage = UFunction::FindFunction("Function Engine.HUD.Message");
	}

	AHUD_execMessage_Params Message_Params;
	memset(&Message_Params, 0, sizeof(Message_Params));
	memcpy_s(&Message_Params.Msg, sizeof(Message_Params.Msg), &Msg, sizeof(Msg));
	memcpy_s(&Message_Params.MsgType, sizeof(Message_Params.MsgType), &MsgType, sizeof(MsgType));
	memcpy_s(&Message_Params.Lifetime, sizeof(Message_Params.Lifetime), &Lifetime, sizeof(Lifetime));

	this->ProcessEvent(uFnMessage, &Message_Params, nullptr);
};

// Function Engine.HUD.ClearMessage
// [0x00420002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// struct FHudLocalizedMessage    M                              (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void AHUD::ClearMessage(struct FHudLocalizedMessage& M)
{
	static UFunction* uFnClearMessage = nullptr;

	if (!uFnClearMessage)
	{
		uFnClearMessage = UFunction::FindFunction("Function Engine.HUD.ClearMessage");
	}

	AHUD_execClearMessage_Params ClearMessage_Params;
	memset(&ClearMessage_Params, 0, sizeof(ClearMessage_Params));
	memcpy_s(&ClearMessage_Params.M, sizeof(ClearMessage_Params.M), &M, sizeof(M));

	this->ProcessEvent(uFnClearMessage, &ClearMessage_Params, nullptr);

	memcpy_s(&M, sizeof(M), &ClearMessage_Params.M, sizeof(ClearMessage_Params.M));
};

// Function Engine.HUD.DisplayBadConnectionAlert
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AHUD::DisplayBadConnectionAlert()
{
	static UFunction* uFnDisplayBadConnectionAlert = nullptr;

	if (!uFnDisplayBadConnectionAlert)
	{
		uFnDisplayBadConnectionAlert = UFunction::FindFunction("Function Engine.HUD.DisplayBadConnectionAlert");
	}

	AHUD_execDisplayBadConnectionAlert_Params DisplayBadConnectionAlert_Params;
	memset(&DisplayBadConnectionAlert_Params, 0, sizeof(DisplayBadConnectionAlert_Params));

	this->ProcessEvent(uFnDisplayBadConnectionAlert, &DisplayBadConnectionAlert_Params, nullptr);
};

// Function Engine.HUD.DrawHUD
// [0x00820002] (FUNC_Defined | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:

void AHUD::DrawHUD()
{
	static UFunction* uFnDrawHUD = nullptr;

	if (!uFnDrawHUD)
	{
		uFnDrawHUD = UFunction::FindFunction("Function Engine.HUD.DrawHUD");
	}

	AHUD_execDrawHUD_Params DrawHUD_Params;
	memset(&DrawHUD_Params, 0, sizeof(DrawHUD_Params));

	this->ProcessEvent(uFnDrawHUD, &DrawHUD_Params, nullptr);
};

// Function Engine.HUD.PostRender
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AHUD::eventPostRender()
{
	static UFunction* uFnPostRender = nullptr;

	if (!uFnPostRender)
	{
		uFnPostRender = UFunction::FindFunction("Function Engine.HUD.PostRender");
	}

	AHUD_eventPostRender_Params PostRender_Params;
	memset(&PostRender_Params, 0, sizeof(PostRender_Params));

	this->ProcessEvent(uFnPostRender, &PostRender_Params, nullptr);
};

// Function Engine.HUD.PreCalcValues
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AHUD::PreCalcValues()
{
	static UFunction* uFnPreCalcValues = nullptr;

	if (!uFnPreCalcValues)
	{
		uFnPreCalcValues = UFunction::FindFunction("Function Engine.HUD.PreCalcValues");
	}

	AHUD_execPreCalcValues_Params PreCalcValues_Params;
	memset(&PreCalcValues_Params, 0, sizeof(PreCalcValues_Params));

	this->ProcessEvent(uFnPreCalcValues, &PreCalcValues_Params, nullptr);
};

// Function Engine.HUD.DrawRoute
// [0x00820002] (FUNC_Defined | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// class APawn*                   Target                         (CPF_Parm)

void AHUD::DrawRoute(class APawn* Target)
{
	static UFunction* uFnDrawRoute = nullptr;

	if (!uFnDrawRoute)
	{
		uFnDrawRoute = UFunction::FindFunction("Function Engine.HUD.DrawRoute");
	}

	AHUD_execDrawRoute_Params DrawRoute_Params;
	memset(&DrawRoute_Params, 0, sizeof(DrawRoute_Params));
	DrawRoute_Params.Target = Target;

	this->ProcessEvent(uFnDrawRoute, &DrawRoute_Params, nullptr);
};

// Function Engine.HUD.ShowDebugInfo
// [0x00420002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// float                          out_YL                         (CPF_Parm | CPF_OutParm)
// float                          out_YPos                       (CPF_Parm | CPF_OutParm)

void AHUD::ShowDebugInfo(float& out_YL, float& out_YPos)
{
	static UFunction* uFnShowDebugInfo = nullptr;

	if (!uFnShowDebugInfo)
	{
		uFnShowDebugInfo = UFunction::FindFunction("Function Engine.HUD.ShowDebugInfo");
	}

	AHUD_execShowDebugInfo_Params ShowDebugInfo_Params;
	memset(&ShowDebugInfo_Params, 0, sizeof(ShowDebugInfo_Params));
	memcpy_s(&ShowDebugInfo_Params.out_YL, sizeof(ShowDebugInfo_Params.out_YL), &out_YL, sizeof(out_YL));
	memcpy_s(&ShowDebugInfo_Params.out_YPos, sizeof(ShowDebugInfo_Params.out_YPos), &out_YPos, sizeof(out_YPos));

	this->ProcessEvent(uFnShowDebugInfo, &ShowDebugInfo_Params, nullptr);

	memcpy_s(&out_YL, sizeof(out_YL), &ShowDebugInfo_Params.out_YL, sizeof(ShowDebugInfo_Params.out_YL));
	memcpy_s(&out_YPos, sizeof(out_YPos), &ShowDebugInfo_Params.out_YPos, sizeof(ShowDebugInfo_Params.out_YPos));
};

// Function Engine.HUD.ShouldDisplayDebug
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25898])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    DebugType                      (CPF_Parm)

bool AHUD::ShouldDisplayDebug(const class FName& DebugType)
{
	static UFunction* uFnShouldDisplayDebug = nullptr;

	if (!uFnShouldDisplayDebug)
	{
		uFnShouldDisplayDebug = UFunction::FindFunction("Function Engine.HUD.ShouldDisplayDebug");
	}

	AHUD_execShouldDisplayDebug_Params ShouldDisplayDebug_Params;
	memset(&ShouldDisplayDebug_Params, 0, sizeof(ShouldDisplayDebug_Params));
	memcpy_s(&ShouldDisplayDebug_Params.DebugType, sizeof(ShouldDisplayDebug_Params.DebugType), &DebugType, sizeof(DebugType));

	uFnShouldDisplayDebug->iNative = 0;
	uFnShouldDisplayDebug->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnShouldDisplayDebug, &ShouldDisplayDebug_Params, nullptr);
	uFnShouldDisplayDebug->FunctionFlags |= 0x400;
	uFnShouldDisplayDebug->iNative = 25898;

	return ShouldDisplayDebug_Params.ReturnValue;
};

// Function Engine.HUD.ShowDebug
// [0x00024600] (FUNC_Exec | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[25909])
// Parameter Info:
// class FName                    DebugType                      (CPF_OptionalParm | CPF_Parm)

void AHUD::ShowDebug(const class FName& DebugType)
{
	static UFunction* uFnShowDebug = nullptr;

	if (!uFnShowDebug)
	{
		uFnShowDebug = UFunction::FindFunction("Function Engine.HUD.ShowDebug");
	}

	AHUD_execShowDebug_Params ShowDebug_Params;
	memset(&ShowDebug_Params, 0, sizeof(ShowDebug_Params));
	memcpy_s(&ShowDebug_Params.DebugType, sizeof(ShowDebug_Params.DebugType), &DebugType, sizeof(DebugType));

	uFnShowDebug->iNative = 0;
	uFnShowDebug->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnShowDebug, &ShowDebug_Params, nullptr);
	uFnShowDebug->FunctionFlags |= 0x400;
	uFnShowDebug->iNative = 25909;
};

// Function Engine.HUD.SetShowScores
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bNewValue                      (CPF_Parm)

void AHUD::SetShowScores(bool bNewValue)
{
	static UFunction* uFnSetShowScores = nullptr;

	if (!uFnSetShowScores)
	{
		uFnSetShowScores = UFunction::FindFunction("Function Engine.HUD.SetShowScores");
	}

	AHUD_execSetShowScores_Params SetShowScores_Params;
	memset(&SetShowScores_Params, 0, sizeof(SetShowScores_Params));
	SetShowScores_Params.bNewValue = bNewValue;

	this->ProcessEvent(uFnSetShowScores, &SetShowScores_Params, nullptr);
};

// Function Engine.HUD.ShowScores
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AHUD::ShowScores()
{
	static UFunction* uFnShowScores = nullptr;

	if (!uFnShowScores)
	{
		uFnShowScores = UFunction::FindFunction("Function Engine.HUD.ShowScores");
	}

	AHUD_execShowScores_Params ShowScores_Params;
	memset(&ShowScores_Params, 0, sizeof(ShowScores_Params));

	this->ProcessEvent(uFnShowScores, &ShowScores_Params, nullptr);
};

// Function Engine.HUD.ShowHUD
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AHUD::ShowHUD()
{
	static UFunction* uFnShowHUD = nullptr;

	if (!uFnShowHUD)
	{
		uFnShowHUD = UFunction::FindFunction("Function Engine.HUD.ShowHUD");
	}

	AHUD_execShowHUD_Params ShowHUD_Params;
	memset(&ShowHUD_Params, 0, sizeof(ShowHUD_Params));

	this->ProcessEvent(uFnShowHUD, &ShowHUD_Params, nullptr);
};

// Function Engine.HUD.ToggleHUD
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AHUD::ToggleHUD()
{
	static UFunction* uFnToggleHUD = nullptr;

	if (!uFnToggleHUD)
	{
		uFnToggleHUD = UFunction::FindFunction("Function Engine.HUD.ToggleHUD");
	}

	AHUD_execToggleHUD_Params ToggleHUD_Params;
	memset(&ToggleHUD_Params, 0, sizeof(ToggleHUD_Params));

	this->ProcessEvent(uFnToggleHUD, &ToggleHUD_Params, nullptr);
};

// Function Engine.HUD.AddPostRenderedActor
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AActor*                  A                              (CPF_Parm)

void AHUD::AddPostRenderedActor(class AActor* A)
{
	static UFunction* uFnAddPostRenderedActor = nullptr;

	if (!uFnAddPostRenderedActor)
	{
		uFnAddPostRenderedActor = UFunction::FindFunction("Function Engine.HUD.AddPostRenderedActor");
	}

	AHUD_execAddPostRenderedActor_Params AddPostRenderedActor_Params;
	memset(&AddPostRenderedActor_Params, 0, sizeof(AddPostRenderedActor_Params));
	AddPostRenderedActor_Params.A = A;

	this->ProcessEvent(uFnAddPostRenderedActor, &AddPostRenderedActor_Params, nullptr);
};

// Function Engine.HUD.RemovePostRenderedActor
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AActor*                  A                              (CPF_Parm)

void AHUD::RemovePostRenderedActor(class AActor* A)
{
	static UFunction* uFnRemovePostRenderedActor = nullptr;

	if (!uFnRemovePostRenderedActor)
	{
		uFnRemovePostRenderedActor = UFunction::FindFunction("Function Engine.HUD.RemovePostRenderedActor");
	}

	AHUD_execRemovePostRenderedActor_Params RemovePostRenderedActor_Params;
	memset(&RemovePostRenderedActor_Params, 0, sizeof(RemovePostRenderedActor_Params));
	RemovePostRenderedActor_Params.A = A;

	this->ProcessEvent(uFnRemovePostRenderedActor, &RemovePostRenderedActor_Params, nullptr);
};

// Function Engine.HUD.DrawActorOverlays
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[19155])
// Parameter Info:
// struct FVector                 ViewPoint                      (CPF_Parm)
// struct FRotator                ViewRotation                   (CPF_Parm)

void AHUD::DrawActorOverlays(const struct FVector& ViewPoint, const struct FRotator& ViewRotation)
{
	static UFunction* uFnDrawActorOverlays = nullptr;

	if (!uFnDrawActorOverlays)
	{
		uFnDrawActorOverlays = UFunction::FindFunction("Function Engine.HUD.DrawActorOverlays");
	}

	AHUD_execDrawActorOverlays_Params DrawActorOverlays_Params;
	memset(&DrawActorOverlays_Params, 0, sizeof(DrawActorOverlays_Params));
	memcpy_s(&DrawActorOverlays_Params.ViewPoint, sizeof(DrawActorOverlays_Params.ViewPoint), &ViewPoint, sizeof(ViewPoint));
	memcpy_s(&DrawActorOverlays_Params.ViewRotation, sizeof(DrawActorOverlays_Params.ViewRotation), &ViewRotation, sizeof(ViewRotation));

	uFnDrawActorOverlays->iNative = 0;
	uFnDrawActorOverlays->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnDrawActorOverlays, &DrawActorOverlays_Params, nullptr);
	uFnDrawActorOverlays->FunctionFlags |= 0x400;
	uFnDrawActorOverlays->iNative = 19155;
};

// Function Engine.HUD.PostBeginPlay
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AHUD::eventPostBeginPlay()
{
	static UFunction* uFnPostBeginPlay = nullptr;

	if (!uFnPostBeginPlay)
	{
		uFnPostBeginPlay = UFunction::FindFunction("Function Engine.HUD.PostBeginPlay");
	}

	AHUD_eventPostBeginPlay_Params PostBeginPlay_Params;
	memset(&PostBeginPlay_Params, 0, sizeof(PostBeginPlay_Params));

	this->ProcessEvent(uFnPostBeginPlay, &PostBeginPlay_Params, nullptr);
};

// Function Engine.HUD.Draw2DLine
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[19153])
// Parameter Info:
// int32_t                        X1                             (CPF_Parm)
// int32_t                        Y1                             (CPF_Parm)
// int32_t                        X2                             (CPF_Parm)
// int32_t                        Y2                             (CPF_Parm)
// struct FColor                  LineColor                      (CPF_Parm)

void AHUD::Draw2DLine(int32_t X1, int32_t Y1, int32_t X2, int32_t Y2, const struct FColor& LineColor)
{
	static UFunction* uFnDraw2DLine = nullptr;

	if (!uFnDraw2DLine)
	{
		uFnDraw2DLine = UFunction::FindFunction("Function Engine.HUD.Draw2DLine");
	}

	AHUD_execDraw2DLine_Params Draw2DLine_Params;
	memset(&Draw2DLine_Params, 0, sizeof(Draw2DLine_Params));
	memcpy_s(&Draw2DLine_Params.X1, sizeof(Draw2DLine_Params.X1), &X1, sizeof(X1));
	memcpy_s(&Draw2DLine_Params.Y1, sizeof(Draw2DLine_Params.Y1), &Y1, sizeof(Y1));
	memcpy_s(&Draw2DLine_Params.X2, sizeof(Draw2DLine_Params.X2), &X2, sizeof(X2));
	memcpy_s(&Draw2DLine_Params.Y2, sizeof(Draw2DLine_Params.Y2), &Y2, sizeof(Y2));
	memcpy_s(&Draw2DLine_Params.LineColor, sizeof(Draw2DLine_Params.LineColor), &LineColor, sizeof(LineColor));

	uFnDraw2DLine->iNative = 0;
	uFnDraw2DLine->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnDraw2DLine, &Draw2DLine_Params, nullptr);
	uFnDraw2DLine->FunctionFlags |= 0x400;
	uFnDraw2DLine->iNative = 19153;
};

// Function Engine.HUD.Draw3DLine
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[19154])
// Parameter Info:
// struct FVector                 Start                          (CPF_Parm)
// struct FVector                 End                            (CPF_Parm)
// struct FColor                  LineColor                      (CPF_Parm)

void AHUD::Draw3DLine(const struct FVector& Start, const struct FVector& End, const struct FColor& LineColor)
{
	static UFunction* uFnDraw3DLine = nullptr;

	if (!uFnDraw3DLine)
	{
		uFnDraw3DLine = UFunction::FindFunction("Function Engine.HUD.Draw3DLine");
	}

	AHUD_execDraw3DLine_Params Draw3DLine_Params;
	memset(&Draw3DLine_Params, 0, sizeof(Draw3DLine_Params));
	memcpy_s(&Draw3DLine_Params.Start, sizeof(Draw3DLine_Params.Start), &Start, sizeof(Start));
	memcpy_s(&Draw3DLine_Params.End, sizeof(Draw3DLine_Params.End), &End, sizeof(End));
	memcpy_s(&Draw3DLine_Params.LineColor, sizeof(Draw3DLine_Params.LineColor), &LineColor, sizeof(LineColor));

	uFnDraw3DLine->iNative = 0;
	uFnDraw3DLine->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnDraw3DLine, &Draw3DLine_Params, nullptr);
	uFnDraw3DLine->FunctionFlags |= 0x400;
	uFnDraw3DLine->iNative = 19154;
};

// Function Engine.AutoTestManager.CheckForSentinelRun
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AAutoTestManager::CheckForSentinelRun()
{
	static UFunction* uFnCheckForSentinelRun = nullptr;

	if (!uFnCheckForSentinelRun)
	{
		uFnCheckForSentinelRun = UFunction::FindFunction("Function Engine.AutoTestManager.CheckForSentinelRun");
	}

	AAutoTestManager_execCheckForSentinelRun_Params CheckForSentinelRun_Params;
	memset(&CheckForSentinelRun_Params, 0, sizeof(CheckForSentinelRun_Params));

	this->ProcessEvent(uFnCheckForSentinelRun, &CheckForSentinelRun_Params, nullptr);

	return CheckForSentinelRun_Params.ReturnValue;
};

// Function Engine.AutoTestManager.StartMatch
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AAutoTestManager::StartMatch()
{
	static UFunction* uFnStartMatch = nullptr;

	if (!uFnStartMatch)
	{
		uFnStartMatch = UFunction::FindFunction("Function Engine.AutoTestManager.StartMatch");
	}

	AAutoTestManager_execStartMatch_Params StartMatch_Params;
	memset(&StartMatch_Params, 0, sizeof(StartMatch_Params));

	this->ProcessEvent(uFnStartMatch, &StartMatch_Params, nullptr);
};

// Function Engine.AutoTestManager.GetNextAutomatedTestingMap
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)

class FString AAutoTestManager::GetNextAutomatedTestingMap()
{
	static UFunction* uFnGetNextAutomatedTestingMap = nullptr;

	if (!uFnGetNextAutomatedTestingMap)
	{
		uFnGetNextAutomatedTestingMap = UFunction::FindFunction("Function Engine.AutoTestManager.GetNextAutomatedTestingMap");
	}

	AAutoTestManager_execGetNextAutomatedTestingMap_Params GetNextAutomatedTestingMap_Params;
	memset(&GetNextAutomatedTestingMap_Params, 0, sizeof(GetNextAutomatedTestingMap_Params));

	this->ProcessEvent(uFnGetNextAutomatedTestingMap, &GetNextAutomatedTestingMap_Params, nullptr);

	return GetNextAutomatedTestingMap_Params.ReturnValue;
};

// Function Engine.AutoTestManager.IncrementAutomatedTestingMapIndex
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AAutoTestManager::IncrementAutomatedTestingMapIndex()
{
	static UFunction* uFnIncrementAutomatedTestingMapIndex = nullptr;

	if (!uFnIncrementAutomatedTestingMapIndex)
	{
		uFnIncrementAutomatedTestingMapIndex = UFunction::FindFunction("Function Engine.AutoTestManager.IncrementAutomatedTestingMapIndex");
	}

	AAutoTestManager_execIncrementAutomatedTestingMapIndex_Params IncrementAutomatedTestingMapIndex_Params;
	memset(&IncrementAutomatedTestingMapIndex_Params, 0, sizeof(IncrementAutomatedTestingMapIndex_Params));

	this->ProcessEvent(uFnIncrementAutomatedTestingMapIndex, &IncrementAutomatedTestingMapIndex_Params, nullptr);
};

// Function Engine.AutoTestManager.CloseAutomatedMapTestTimer
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AAutoTestManager::CloseAutomatedMapTestTimer()
{
	static UFunction* uFnCloseAutomatedMapTestTimer = nullptr;

	if (!uFnCloseAutomatedMapTestTimer)
	{
		uFnCloseAutomatedMapTestTimer = UFunction::FindFunction("Function Engine.AutoTestManager.CloseAutomatedMapTestTimer");
	}

	AAutoTestManager_execCloseAutomatedMapTestTimer_Params CloseAutomatedMapTestTimer_Params;
	memset(&CloseAutomatedMapTestTimer_Params, 0, sizeof(CloseAutomatedMapTestTimer_Params));

	this->ProcessEvent(uFnCloseAutomatedMapTestTimer, &CloseAutomatedMapTestTimer_Params, nullptr);
};

// Function Engine.AutoTestManager.StartAutomatedMapTestTimerWorker
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AAutoTestManager::StartAutomatedMapTestTimerWorker()
{
	static UFunction* uFnStartAutomatedMapTestTimerWorker = nullptr;

	if (!uFnStartAutomatedMapTestTimerWorker)
	{
		uFnStartAutomatedMapTestTimerWorker = UFunction::FindFunction("Function Engine.AutoTestManager.StartAutomatedMapTestTimerWorker");
	}

	AAutoTestManager_execStartAutomatedMapTestTimerWorker_Params StartAutomatedMapTestTimerWorker_Params;
	memset(&StartAutomatedMapTestTimerWorker_Params, 0, sizeof(StartAutomatedMapTestTimerWorker_Params));

	this->ProcessEvent(uFnStartAutomatedMapTestTimerWorker, &StartAutomatedMapTestTimerWorker_Params, nullptr);
};

// Function Engine.AutoTestManager.StartAutomatedMapTestTimer
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AAutoTestManager::eventStartAutomatedMapTestTimer()
{
	static UFunction* uFnStartAutomatedMapTestTimer = nullptr;

	if (!uFnStartAutomatedMapTestTimer)
	{
		uFnStartAutomatedMapTestTimer = UFunction::FindFunction("Function Engine.AutoTestManager.StartAutomatedMapTestTimer");
	}

	AAutoTestManager_eventStartAutomatedMapTestTimer_Params StartAutomatedMapTestTimer_Params;
	memset(&StartAutomatedMapTestTimer_Params, 0, sizeof(StartAutomatedMapTestTimer_Params));

	this->ProcessEvent(uFnStartAutomatedMapTestTimer, &StartAutomatedMapTestTimer_Params, nullptr);
};

// Function Engine.AutoTestManager.DoTimeBasedSentinelStatGathering
// [0x00820002] (FUNC_Defined | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:

void AAutoTestManager::DoTimeBasedSentinelStatGathering()
{
	static UFunction* uFnDoTimeBasedSentinelStatGathering = nullptr;

	if (!uFnDoTimeBasedSentinelStatGathering)
	{
		uFnDoTimeBasedSentinelStatGathering = UFunction::FindFunction("Function Engine.AutoTestManager.DoTimeBasedSentinelStatGathering");
	}

	AAutoTestManager_execDoTimeBasedSentinelStatGathering_Params DoTimeBasedSentinelStatGathering_Params;
	memset(&DoTimeBasedSentinelStatGathering_Params, 0, sizeof(DoTimeBasedSentinelStatGathering_Params));

	this->ProcessEvent(uFnDoTimeBasedSentinelStatGathering, &DoTimeBasedSentinelStatGathering_Params, nullptr);
};

// Function Engine.AutoTestManager.DoSentinel_ViewDependentMemoryAtSpecificLocation
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[19129])
// Parameter Info:
// struct FVector                 InLocation                     (CPF_Const | CPF_Parm | CPF_OutParm)
// struct FRotator                InRotation                     (CPF_Const | CPF_Parm | CPF_OutParm)

void AAutoTestManager::DoSentinel_ViewDependentMemoryAtSpecificLocation(struct FVector& InLocation, struct FRotator& InRotation)
{
	static UFunction* uFnDoSentinel_ViewDependentMemoryAtSpecificLocation = nullptr;

	if (!uFnDoSentinel_ViewDependentMemoryAtSpecificLocation)
	{
		uFnDoSentinel_ViewDependentMemoryAtSpecificLocation = UFunction::FindFunction("Function Engine.AutoTestManager.DoSentinel_ViewDependentMemoryAtSpecificLocation");
	}

	AAutoTestManager_execDoSentinel_ViewDependentMemoryAtSpecificLocation_Params DoSentinel_ViewDependentMemoryAtSpecificLocation_Params;
	memset(&DoSentinel_ViewDependentMemoryAtSpecificLocation_Params, 0, sizeof(DoSentinel_ViewDependentMemoryAtSpecificLocation_Params));
	memcpy_s(&DoSentinel_ViewDependentMemoryAtSpecificLocation_Params.InLocation, sizeof(DoSentinel_ViewDependentMemoryAtSpecificLocation_Params.InLocation), &InLocation, sizeof(InLocation));
	memcpy_s(&DoSentinel_ViewDependentMemoryAtSpecificLocation_Params.InRotation, sizeof(DoSentinel_ViewDependentMemoryAtSpecificLocation_Params.InRotation), &InRotation, sizeof(InRotation));

	uFnDoSentinel_ViewDependentMemoryAtSpecificLocation->iNative = 0;
	uFnDoSentinel_ViewDependentMemoryAtSpecificLocation->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnDoSentinel_ViewDependentMemoryAtSpecificLocation, &DoSentinel_ViewDependentMemoryAtSpecificLocation_Params, nullptr);
	uFnDoSentinel_ViewDependentMemoryAtSpecificLocation->FunctionFlags |= 0x400;
	uFnDoSentinel_ViewDependentMemoryAtSpecificLocation->iNative = 19129;

	memcpy_s(&InLocation, sizeof(InLocation), &DoSentinel_ViewDependentMemoryAtSpecificLocation_Params.InLocation, sizeof(DoSentinel_ViewDependentMemoryAtSpecificLocation_Params.InLocation));
	memcpy_s(&InRotation, sizeof(InRotation), &DoSentinel_ViewDependentMemoryAtSpecificLocation_Params.InRotation, sizeof(DoSentinel_ViewDependentMemoryAtSpecificLocation_Params.InRotation));
};

// Function Engine.AutoTestManager.DoSentinel_PerfAtSpecificLocation
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[19128])
// Parameter Info:
// struct FVector                 InLocation                     (CPF_Const | CPF_Parm | CPF_OutParm)
// struct FRotator                InRotation                     (CPF_Const | CPF_Parm | CPF_OutParm)

void AAutoTestManager::DoSentinel_PerfAtSpecificLocation(struct FVector& InLocation, struct FRotator& InRotation)
{
	static UFunction* uFnDoSentinel_PerfAtSpecificLocation = nullptr;

	if (!uFnDoSentinel_PerfAtSpecificLocation)
	{
		uFnDoSentinel_PerfAtSpecificLocation = UFunction::FindFunction("Function Engine.AutoTestManager.DoSentinel_PerfAtSpecificLocation");
	}

	AAutoTestManager_execDoSentinel_PerfAtSpecificLocation_Params DoSentinel_PerfAtSpecificLocation_Params;
	memset(&DoSentinel_PerfAtSpecificLocation_Params, 0, sizeof(DoSentinel_PerfAtSpecificLocation_Params));
	memcpy_s(&DoSentinel_PerfAtSpecificLocation_Params.InLocation, sizeof(DoSentinel_PerfAtSpecificLocation_Params.InLocation), &InLocation, sizeof(InLocation));
	memcpy_s(&DoSentinel_PerfAtSpecificLocation_Params.InRotation, sizeof(DoSentinel_PerfAtSpecificLocation_Params.InRotation), &InRotation, sizeof(InRotation));

	uFnDoSentinel_PerfAtSpecificLocation->iNative = 0;
	uFnDoSentinel_PerfAtSpecificLocation->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnDoSentinel_PerfAtSpecificLocation, &DoSentinel_PerfAtSpecificLocation_Params, nullptr);
	uFnDoSentinel_PerfAtSpecificLocation->FunctionFlags |= 0x400;
	uFnDoSentinel_PerfAtSpecificLocation->iNative = 19128;

	memcpy_s(&InLocation, sizeof(InLocation), &DoSentinel_PerfAtSpecificLocation_Params.InLocation, sizeof(DoSentinel_PerfAtSpecificLocation_Params.InLocation));
	memcpy_s(&InRotation, sizeof(InRotation), &DoSentinel_PerfAtSpecificLocation_Params.InRotation, sizeof(DoSentinel_PerfAtSpecificLocation_Params.InRotation));
};

// Function Engine.AutoTestManager.DoSentinel_MemoryAtSpecificLocation
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[19127])
// Parameter Info:
// struct FVector                 InLocation                     (CPF_Const | CPF_Parm)
// struct FRotator                InRotation                     (CPF_Const | CPF_Parm)

void AAutoTestManager::DoSentinel_MemoryAtSpecificLocation(const struct FVector& InLocation, const struct FRotator& InRotation)
{
	static UFunction* uFnDoSentinel_MemoryAtSpecificLocation = nullptr;

	if (!uFnDoSentinel_MemoryAtSpecificLocation)
	{
		uFnDoSentinel_MemoryAtSpecificLocation = UFunction::FindFunction("Function Engine.AutoTestManager.DoSentinel_MemoryAtSpecificLocation");
	}

	AAutoTestManager_execDoSentinel_MemoryAtSpecificLocation_Params DoSentinel_MemoryAtSpecificLocation_Params;
	memset(&DoSentinel_MemoryAtSpecificLocation_Params, 0, sizeof(DoSentinel_MemoryAtSpecificLocation_Params));
	memcpy_s(&DoSentinel_MemoryAtSpecificLocation_Params.InLocation, sizeof(DoSentinel_MemoryAtSpecificLocation_Params.InLocation), &InLocation, sizeof(InLocation));
	memcpy_s(&DoSentinel_MemoryAtSpecificLocation_Params.InRotation, sizeof(DoSentinel_MemoryAtSpecificLocation_Params.InRotation), &InRotation, sizeof(InRotation));

	uFnDoSentinel_MemoryAtSpecificLocation->iNative = 0;
	uFnDoSentinel_MemoryAtSpecificLocation->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnDoSentinel_MemoryAtSpecificLocation, &DoSentinel_MemoryAtSpecificLocation_Params, nullptr);
	uFnDoSentinel_MemoryAtSpecificLocation->FunctionFlags |= 0x400;
	uFnDoSentinel_MemoryAtSpecificLocation->iNative = 19127;
};

// Function Engine.AutoTestManager.GetTravelLocations
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20796])
// Parameter Info:
// class FName                    LevelName                      (CPF_Parm)
// class APlayerController*       PC                             (CPF_Parm)
// class TArray<struct FVector>   TravelPoints                   (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void AAutoTestManager::GetTravelLocations(const class FName& LevelName, class APlayerController* PC, class TArray<struct FVector>& TravelPoints)
{
	static UFunction* uFnGetTravelLocations = nullptr;

	if (!uFnGetTravelLocations)
	{
		uFnGetTravelLocations = UFunction::FindFunction("Function Engine.AutoTestManager.GetTravelLocations");
	}

	AAutoTestManager_execGetTravelLocations_Params GetTravelLocations_Params;
	memset(&GetTravelLocations_Params, 0, sizeof(GetTravelLocations_Params));
	memcpy_s(&GetTravelLocations_Params.LevelName, sizeof(GetTravelLocations_Params.LevelName), &LevelName, sizeof(LevelName));
	GetTravelLocations_Params.PC = PC;
	memcpy_s(&GetTravelLocations_Params.TravelPoints, sizeof(GetTravelLocations_Params.TravelPoints), &TravelPoints, sizeof(TravelPoints));

	uFnGetTravelLocations->iNative = 0;
	uFnGetTravelLocations->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetTravelLocations, &GetTravelLocations_Params, nullptr);
	uFnGetTravelLocations->FunctionFlags |= 0x400;
	uFnGetTravelLocations->iNative = 20796;

	memcpy_s(&TravelPoints, sizeof(TravelPoints), &GetTravelLocations_Params.TravelPoints, sizeof(GetTravelLocations_Params.TravelPoints));
};

// Function Engine.AutoTestManager.DoSentinelActionBeforeExit_Native
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[19130])
// Parameter Info:

void AAutoTestManager::DoSentinelActionBeforeExit_Native()
{
	static UFunction* uFnDoSentinelActionBeforeExit_Native = nullptr;

	if (!uFnDoSentinelActionBeforeExit_Native)
	{
		uFnDoSentinelActionBeforeExit_Native = UFunction::FindFunction("Function Engine.AutoTestManager.DoSentinelActionBeforeExit_Native");
	}

	AAutoTestManager_execDoSentinelActionBeforeExit_Native_Params DoSentinelActionBeforeExit_Native_Params;
	memset(&DoSentinelActionBeforeExit_Native_Params, 0, sizeof(DoSentinelActionBeforeExit_Native_Params));

	uFnDoSentinelActionBeforeExit_Native->iNative = 0;
	uFnDoSentinelActionBeforeExit_Native->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnDoSentinelActionBeforeExit_Native, &DoSentinelActionBeforeExit_Native_Params, nullptr);
	uFnDoSentinelActionBeforeExit_Native->FunctionFlags |= 0x400;
	uFnDoSentinelActionBeforeExit_Native->iNative = 19130;
};

// Function Engine.AutoTestManager.DoSentinelActionPerLoadedLevel_Native
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[19131])
// Parameter Info:

void AAutoTestManager::DoSentinelActionPerLoadedLevel_Native()
{
	static UFunction* uFnDoSentinelActionPerLoadedLevel_Native = nullptr;

	if (!uFnDoSentinelActionPerLoadedLevel_Native)
	{
		uFnDoSentinelActionPerLoadedLevel_Native = UFunction::FindFunction("Function Engine.AutoTestManager.DoSentinelActionPerLoadedLevel_Native");
	}

	AAutoTestManager_execDoSentinelActionPerLoadedLevel_Native_Params DoSentinelActionPerLoadedLevel_Native_Params;
	memset(&DoSentinelActionPerLoadedLevel_Native_Params, 0, sizeof(DoSentinelActionPerLoadedLevel_Native_Params));

	uFnDoSentinelActionPerLoadedLevel_Native->iNative = 0;
	uFnDoSentinelActionPerLoadedLevel_Native->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnDoSentinelActionPerLoadedLevel_Native, &DoSentinelActionPerLoadedLevel_Native_Params, nullptr);
	uFnDoSentinelActionPerLoadedLevel_Native->FunctionFlags |= 0x400;
	uFnDoSentinelActionPerLoadedLevel_Native->iNative = 19131;
};

// Function Engine.AutoTestManager.DoSentinelActionPerLoadedMap
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[19132])
// Parameter Info:

void AAutoTestManager::DoSentinelActionPerLoadedMap()
{
	static UFunction* uFnDoSentinelActionPerLoadedMap = nullptr;

	if (!uFnDoSentinelActionPerLoadedMap)
	{
		uFnDoSentinelActionPerLoadedMap = UFunction::FindFunction("Function Engine.AutoTestManager.DoSentinelActionPerLoadedMap");
	}

	AAutoTestManager_execDoSentinelActionPerLoadedMap_Params DoSentinelActionPerLoadedMap_Params;
	memset(&DoSentinelActionPerLoadedMap_Params, 0, sizeof(DoSentinelActionPerLoadedMap_Params));

	uFnDoSentinelActionPerLoadedMap->iNative = 0;
	uFnDoSentinelActionPerLoadedMap->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnDoSentinelActionPerLoadedMap, &DoSentinelActionPerLoadedMap_Params, nullptr);
	uFnDoSentinelActionPerLoadedMap->FunctionFlags |= 0x400;
	uFnDoSentinelActionPerLoadedMap->iNative = 19132;
};

// Function Engine.AutoTestManager.DoTravelTheWorld
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AAutoTestManager::DoTravelTheWorld()
{
	static UFunction* uFnDoTravelTheWorld = nullptr;

	if (!uFnDoTravelTheWorld)
	{
		uFnDoTravelTheWorld = UFunction::FindFunction("Function Engine.AutoTestManager.DoTravelTheWorld");
	}

	AAutoTestManager_execDoTravelTheWorld_Params DoTravelTheWorld_Params;
	memset(&DoTravelTheWorld_Params, 0, sizeof(DoTravelTheWorld_Params));

	this->ProcessEvent(uFnDoTravelTheWorld, &DoTravelTheWorld_Params, nullptr);
};

// Function Engine.AutoTestManager.EndSentinelRun
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[19576])
// Parameter Info:
// EAutomatedRunResult            RunResult                      (CPF_Parm)

void AAutoTestManager::EndSentinelRun(EAutomatedRunResult RunResult)
{
	static UFunction* uFnEndSentinelRun = nullptr;

	if (!uFnEndSentinelRun)
	{
		uFnEndSentinelRun = UFunction::FindFunction("Function Engine.AutoTestManager.EndSentinelRun");
	}

	AAutoTestManager_execEndSentinelRun_Params EndSentinelRun_Params;
	memset(&EndSentinelRun_Params, 0, sizeof(EndSentinelRun_Params));
	memcpy_s(&EndSentinelRun_Params.RunResult, sizeof(EndSentinelRun_Params.RunResult), &RunResult, sizeof(RunResult));

	uFnEndSentinelRun->iNative = 0;
	uFnEndSentinelRun->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnEndSentinelRun, &EndSentinelRun_Params, nullptr);
	uFnEndSentinelRun->FunctionFlags |= 0x400;
	uFnEndSentinelRun->iNative = 19576;
};

// Function Engine.AutoTestManager.AddSentinelPerTimePeriodStats
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[15367])
// Parameter Info:
// struct FVector                 InLocation                     (CPF_Const | CPF_Parm)
// struct FRotator                InRotation                     (CPF_Const | CPF_Parm)

void AAutoTestManager::AddSentinelPerTimePeriodStats(const struct FVector& InLocation, const struct FRotator& InRotation)
{
	static UFunction* uFnAddSentinelPerTimePeriodStats = nullptr;

	if (!uFnAddSentinelPerTimePeriodStats)
	{
		uFnAddSentinelPerTimePeriodStats = UFunction::FindFunction("Function Engine.AutoTestManager.AddSentinelPerTimePeriodStats");
	}

	AAutoTestManager_execAddSentinelPerTimePeriodStats_Params AddSentinelPerTimePeriodStats_Params;
	memset(&AddSentinelPerTimePeriodStats_Params, 0, sizeof(AddSentinelPerTimePeriodStats_Params));
	memcpy_s(&AddSentinelPerTimePeriodStats_Params.InLocation, sizeof(AddSentinelPerTimePeriodStats_Params.InLocation), &InLocation, sizeof(InLocation));
	memcpy_s(&AddSentinelPerTimePeriodStats_Params.InRotation, sizeof(AddSentinelPerTimePeriodStats_Params.InRotation), &InRotation, sizeof(InRotation));

	uFnAddSentinelPerTimePeriodStats->iNative = 0;
	uFnAddSentinelPerTimePeriodStats->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnAddSentinelPerTimePeriodStats, &AddSentinelPerTimePeriodStats_Params, nullptr);
	uFnAddSentinelPerTimePeriodStats->FunctionFlags |= 0x400;
	uFnAddSentinelPerTimePeriodStats->iNative = 15367;
};

// Function Engine.AutoTestManager.BeginSentinelRun
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[16240])
// Parameter Info:
// class FString                  TaskDescription                (CPF_Const | CPF_Parm | CPF_NeedCtorLink)
// class FString                  TaskParameter                  (CPF_Const | CPF_Parm | CPF_NeedCtorLink)
// class FString                  TagDesc                        (CPF_Const | CPF_Parm | CPF_NeedCtorLink)

void AAutoTestManager::BeginSentinelRun(const class FString& TaskDescription, const class FString& TaskParameter, const class FString& TagDesc)
{
	static UFunction* uFnBeginSentinelRun = nullptr;

	if (!uFnBeginSentinelRun)
	{
		uFnBeginSentinelRun = UFunction::FindFunction("Function Engine.AutoTestManager.BeginSentinelRun");
	}

	AAutoTestManager_execBeginSentinelRun_Params BeginSentinelRun_Params;
	memset(&BeginSentinelRun_Params, 0, sizeof(BeginSentinelRun_Params));
	memcpy_s(&BeginSentinelRun_Params.TaskDescription, sizeof(BeginSentinelRun_Params.TaskDescription), &TaskDescription, sizeof(TaskDescription));
	memcpy_s(&BeginSentinelRun_Params.TaskParameter, sizeof(BeginSentinelRun_Params.TaskParameter), &TaskParameter, sizeof(TaskParameter));
	memcpy_s(&BeginSentinelRun_Params.TagDesc, sizeof(BeginSentinelRun_Params.TagDesc), &TagDesc, sizeof(TagDesc));

	uFnBeginSentinelRun->iNative = 0;
	uFnBeginSentinelRun->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnBeginSentinelRun, &BeginSentinelRun_Params, nullptr);
	uFnBeginSentinelRun->FunctionFlags |= 0x400;
	uFnBeginSentinelRun->iNative = 16240;
};

// Function Engine.AutoTestManager.InitializeOptions
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  Options                        (CPF_Parm | CPF_NeedCtorLink)

void AAutoTestManager::InitializeOptions(const class FString& Options)
{
	static UFunction* uFnInitializeOptions = nullptr;

	if (!uFnInitializeOptions)
	{
		uFnInitializeOptions = UFunction::FindFunction("Function Engine.AutoTestManager.InitializeOptions");
	}

	AAutoTestManager_execInitializeOptions_Params InitializeOptions_Params;
	memset(&InitializeOptions_Params, 0, sizeof(InitializeOptions_Params));
	memcpy_s(&InitializeOptions_Params.Options, sizeof(InitializeOptions_Params.Options), &Options, sizeof(Options));

	this->ProcessEvent(uFnInitializeOptions, &InitializeOptions_Params, nullptr);
};

// Function Engine.AutoTestManager.Timer
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AAutoTestManager::eventTimer()
{
	static UFunction* uFnTimer = nullptr;

	if (!uFnTimer)
	{
		uFnTimer = UFunction::FindFunction("Function Engine.AutoTestManager.Timer");
	}

	AAutoTestManager_eventTimer_Params Timer_Params;
	memset(&Timer_Params, 0, sizeof(Timer_Params));

	this->ProcessEvent(uFnTimer, &Timer_Params, nullptr);
};

// Function Engine.AutoTestManager.PostBeginPlay
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AAutoTestManager::eventPostBeginPlay()
{
	static UFunction* uFnPostBeginPlay = nullptr;

	if (!uFnPostBeginPlay)
	{
		uFnPostBeginPlay = UFunction::FindFunction("Function Engine.AutoTestManager.PostBeginPlay");
	}

	AAutoTestManager_eventPostBeginPlay_Params PostBeginPlay_Params;
	memset(&PostBeginPlay_Params, 0, sizeof(PostBeginPlay_Params));

	this->ProcessEvent(uFnPostBeginPlay, &PostBeginPlay_Params, nullptr);
};

// Function Engine.FileWriter.Destroyed
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AFileWriter::eventDestroyed()
{
	static UFunction* uFnDestroyed = nullptr;

	if (!uFnDestroyed)
	{
		uFnDestroyed = UFunction::FindFunction("Function Engine.FileWriter.Destroyed");
	}

	AFileWriter_eventDestroyed_Params Destroyed_Params;
	memset(&Destroyed_Params, 0, sizeof(Destroyed_Params));

	this->ProcessEvent(uFnDestroyed, &Destroyed_Params, nullptr);
};

// Function Engine.FileWriter.Logf
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[21839])
// Parameter Info:
// class FString                  logString                      (CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink)

void AFileWriter::Logf(const class FString& logString)
{
	static UFunction* uFnLogf = nullptr;

	if (!uFnLogf)
	{
		uFnLogf = UFunction::FindFunction("Function Engine.FileWriter.Logf");
	}

	AFileWriter_execLogf_Params Logf_Params;
	memset(&Logf_Params, 0, sizeof(Logf_Params));
	memcpy_s(&Logf_Params.logString, sizeof(Logf_Params.logString), &logString, sizeof(logString));

	uFnLogf->iNative = 0;
	uFnLogf->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnLogf, &Logf_Params, nullptr);
	uFnLogf->FunctionFlags |= 0x400;
	uFnLogf->iNative = 21839;
};

// Function Engine.FileWriter.CloseFile
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[18222])
// Parameter Info:

void AFileWriter::CloseFile()
{
	static UFunction* uFnCloseFile = nullptr;

	if (!uFnCloseFile)
	{
		uFnCloseFile = UFunction::FindFunction("Function Engine.FileWriter.CloseFile");
	}

	AFileWriter_execCloseFile_Params CloseFile_Params;
	memset(&CloseFile_Params, 0, sizeof(CloseFile_Params));

	uFnCloseFile->iNative = 0;
	uFnCloseFile->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnCloseFile, &CloseFile_Params, nullptr);
	uFnCloseFile->FunctionFlags |= 0x400;
	uFnCloseFile->iNative = 18222;
};

// Function Engine.FileWriter.OpenFile
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[23689])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FString                  InFilename                     (CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink)
// EFWFileType                    InFileType                     (CPF_OptionalParm | CPF_Parm)
// class FString                  InExtension                    (CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink)
// uint32_t                       bUnique                        (CPF_OptionalParm | CPF_Parm)
// uint32_t                       bIncludeTimeStamp              (CPF_OptionalParm | CPF_Parm)

bool AFileWriter::OpenFile(const class FString& InFilename, EFWFileType InFileType, const class FString& InExtension, bool bUnique, bool bIncludeTimeStamp)
{
	static UFunction* uFnOpenFile = nullptr;

	if (!uFnOpenFile)
	{
		uFnOpenFile = UFunction::FindFunction("Function Engine.FileWriter.OpenFile");
	}

	AFileWriter_execOpenFile_Params OpenFile_Params;
	memset(&OpenFile_Params, 0, sizeof(OpenFile_Params));
	memcpy_s(&OpenFile_Params.InFilename, sizeof(OpenFile_Params.InFilename), &InFilename, sizeof(InFilename));
	memcpy_s(&OpenFile_Params.InFileType, sizeof(OpenFile_Params.InFileType), &InFileType, sizeof(InFileType));
	memcpy_s(&OpenFile_Params.InExtension, sizeof(OpenFile_Params.InExtension), &InExtension, sizeof(InExtension));
	OpenFile_Params.bUnique = bUnique;
	OpenFile_Params.bIncludeTimeStamp = bIncludeTimeStamp;

	uFnOpenFile->iNative = 0;
	uFnOpenFile->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnOpenFile, &OpenFile_Params, nullptr);
	uFnOpenFile->FunctionFlags |= 0x400;
	uFnOpenFile->iNative = 23689;

	return OpenFile_Params.ReturnValue;
};

// Function Engine.FileLog.CloseLog
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AFileLog::CloseLog()
{
	static UFunction* uFnCloseLog = nullptr;

	if (!uFnCloseLog)
	{
		uFnCloseLog = UFunction::FindFunction("Function Engine.FileLog.CloseLog");
	}

	AFileLog_execCloseLog_Params CloseLog_Params;
	memset(&CloseLog_Params, 0, sizeof(CloseLog_Params));

	this->ProcessEvent(uFnCloseLog, &CloseLog_Params, nullptr);
};

// Function Engine.FileLog.OpenLog
// [0x00024002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  LogFilename                    (CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink)
// class FString                  extension                      (CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink)
// uint32_t                       bUnique                        (CPF_OptionalParm | CPF_Parm)

void AFileLog::OpenLog(const class FString& LogFilename, const class FString& extension, bool bUnique)
{
	static UFunction* uFnOpenLog = nullptr;

	if (!uFnOpenLog)
	{
		uFnOpenLog = UFunction::FindFunction("Function Engine.FileLog.OpenLog");
	}

	AFileLog_execOpenLog_Params OpenLog_Params;
	memset(&OpenLog_Params, 0, sizeof(OpenLog_Params));
	memcpy_s(&OpenLog_Params.LogFilename, sizeof(OpenLog_Params.LogFilename), &LogFilename, sizeof(LogFilename));
	memcpy_s(&OpenLog_Params.extension, sizeof(OpenLog_Params.extension), &extension, sizeof(extension));
	OpenLog_Params.bUnique = bUnique;

	this->ProcessEvent(uFnOpenLog, &OpenLog_Params, nullptr);
};

// Function Engine.GameInfo.StandbyCheatDetected
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EStandbyType                   StandbyType                    (CPF_Parm)

void AGameInfo::eventStandbyCheatDetected(EStandbyType StandbyType)
{
	static UFunction* uFnStandbyCheatDetected = nullptr;

	if (!uFnStandbyCheatDetected)
	{
		uFnStandbyCheatDetected = UFunction::FindFunction("Function Engine.GameInfo.StandbyCheatDetected");
	}

	AGameInfo_eventStandbyCheatDetected_Params StandbyCheatDetected_Params;
	memset(&StandbyCheatDetected_Params, 0, sizeof(StandbyCheatDetected_Params));
	memcpy_s(&StandbyCheatDetected_Params.StandbyType, sizeof(StandbyCheatDetected_Params.StandbyType), &StandbyType, sizeof(StandbyType));

	this->ProcessEvent(uFnStandbyCheatDetected, &StandbyCheatDetected_Params, nullptr);
};

// Function Engine.GameInfo.EnableStandbyCheatDetection
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[19545])
// Parameter Info:
// uint32_t                       bIsEnabled                     (CPF_Parm)

void AGameInfo::EnableStandbyCheatDetection(bool bIsEnabled)
{
	static UFunction* uFnEnableStandbyCheatDetection = nullptr;

	if (!uFnEnableStandbyCheatDetection)
	{
		uFnEnableStandbyCheatDetection = UFunction::FindFunction("Function Engine.GameInfo.EnableStandbyCheatDetection");
	}

	AGameInfo_execEnableStandbyCheatDetection_Params EnableStandbyCheatDetection_Params;
	memset(&EnableStandbyCheatDetection_Params, 0, sizeof(EnableStandbyCheatDetection_Params));
	EnableStandbyCheatDetection_Params.bIsEnabled = bIsEnabled;

	uFnEnableStandbyCheatDetection->iNative = 0;
	uFnEnableStandbyCheatDetection->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnEnableStandbyCheatDetection, &EnableStandbyCheatDetection_Params, nullptr);
	uFnEnableStandbyCheatDetection->FunctionFlags |= 0x400;
	uFnEnableStandbyCheatDetection->iNative = 19545;
};

// Function Engine.GameInfo.BeginBVT
// [0x00024302] (FUNC_Defined | FUNC_Simulated | FUNC_Exec | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  TagDesc                        (CPF_OptionalParm | CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink)

void AGameInfo::BeginBVT(const class FString& TagDesc)
{
	static UFunction* uFnBeginBVT = nullptr;

	if (!uFnBeginBVT)
	{
		uFnBeginBVT = UFunction::FindFunction("Function Engine.GameInfo.BeginBVT");
	}

	AGameInfo_execBeginBVT_Params BeginBVT_Params;
	memset(&BeginBVT_Params, 0, sizeof(BeginBVT_Params));
	memcpy_s(&BeginBVT_Params.TagDesc, sizeof(BeginBVT_Params.TagDesc), &TagDesc, sizeof(TagDesc));

	this->ProcessEvent(uFnBeginBVT, &BeginBVT_Params, nullptr);
};

// Function Engine.GameInfo.CheckForSentinelRun
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AGameInfo::CheckForSentinelRun()
{
	static UFunction* uFnCheckForSentinelRun = nullptr;

	if (!uFnCheckForSentinelRun)
	{
		uFnCheckForSentinelRun = UFunction::FindFunction("Function Engine.GameInfo.CheckForSentinelRun");
	}

	AGameInfo_execCheckForSentinelRun_Params CheckForSentinelRun_Params;
	memset(&CheckForSentinelRun_Params, 0, sizeof(CheckForSentinelRun_Params));

	this->ProcessEvent(uFnCheckForSentinelRun, &CheckForSentinelRun_Params, nullptr);

	return CheckForSentinelRun_Params.ReturnValue;
};

// Function Engine.GameInfo.ShouldAutoContinueToNextRound
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AGameInfo::ShouldAutoContinueToNextRound()
{
	static UFunction* uFnShouldAutoContinueToNextRound = nullptr;

	if (!uFnShouldAutoContinueToNextRound)
	{
		uFnShouldAutoContinueToNextRound = UFunction::FindFunction("Function Engine.GameInfo.ShouldAutoContinueToNextRound");
	}

	AGameInfo_execShouldAutoContinueToNextRound_Params ShouldAutoContinueToNextRound_Params;
	memset(&ShouldAutoContinueToNextRound_Params, 0, sizeof(ShouldAutoContinueToNextRound_Params));

	this->ProcessEvent(uFnShouldAutoContinueToNextRound, &ShouldAutoContinueToNextRound_Params, nullptr);

	return ShouldAutoContinueToNextRound_Params.ReturnValue;
};

// Function Engine.GameInfo.IsDoingASentinelRun
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AGameInfo::IsDoingASentinelRun()
{
	static UFunction* uFnIsDoingASentinelRun = nullptr;

	if (!uFnIsDoingASentinelRun)
	{
		uFnIsDoingASentinelRun = UFunction::FindFunction("Function Engine.GameInfo.IsDoingASentinelRun");
	}

	AGameInfo_execIsDoingASentinelRun_Params IsDoingASentinelRun_Params;
	memset(&IsDoingASentinelRun_Params, 0, sizeof(IsDoingASentinelRun_Params));

	this->ProcessEvent(uFnIsDoingASentinelRun, &IsDoingASentinelRun_Params, nullptr);

	return IsDoingASentinelRun_Params.ReturnValue;
};

// Function Engine.GameInfo.IsCheckingForMemLeaks
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AGameInfo::IsCheckingForMemLeaks()
{
	static UFunction* uFnIsCheckingForMemLeaks = nullptr;

	if (!uFnIsCheckingForMemLeaks)
	{
		uFnIsCheckingForMemLeaks = UFunction::FindFunction("Function Engine.GameInfo.IsCheckingForMemLeaks");
	}

	AGameInfo_execIsCheckingForMemLeaks_Params IsCheckingForMemLeaks_Params;
	memset(&IsCheckingForMemLeaks_Params, 0, sizeof(IsCheckingForMemLeaks_Params));

	this->ProcessEvent(uFnIsCheckingForMemLeaks, &IsCheckingForMemLeaks_Params, nullptr);

	return IsCheckingForMemLeaks_Params.ReturnValue;
};

// Function Engine.GameInfo.IsCheckingForFragmentation
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AGameInfo::IsCheckingForFragmentation()
{
	static UFunction* uFnIsCheckingForFragmentation = nullptr;

	if (!uFnIsCheckingForFragmentation)
	{
		uFnIsCheckingForFragmentation = UFunction::FindFunction("Function Engine.GameInfo.IsCheckingForFragmentation");
	}

	AGameInfo_execIsCheckingForFragmentation_Params IsCheckingForFragmentation_Params;
	memset(&IsCheckingForFragmentation_Params, 0, sizeof(IsCheckingForFragmentation_Params));

	this->ProcessEvent(uFnIsCheckingForFragmentation, &IsCheckingForFragmentation_Params, nullptr);

	return IsCheckingForFragmentation_Params.ReturnValue;
};

// Function Engine.GameInfo.IsAutomatedPerfTesting
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AGameInfo::IsAutomatedPerfTesting()
{
	static UFunction* uFnIsAutomatedPerfTesting = nullptr;

	if (!uFnIsAutomatedPerfTesting)
	{
		uFnIsAutomatedPerfTesting = UFunction::FindFunction("Function Engine.GameInfo.IsAutomatedPerfTesting");
	}

	AGameInfo_execIsAutomatedPerfTesting_Params IsAutomatedPerfTesting_Params;
	memset(&IsAutomatedPerfTesting_Params, 0, sizeof(IsAutomatedPerfTesting_Params));

	this->ProcessEvent(uFnIsAutomatedPerfTesting, &IsAutomatedPerfTesting_Params, nullptr);

	return IsAutomatedPerfTesting_Params.ReturnValue;
};

// Function Engine.GameInfo.DoTravelTheWorld
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AGameInfo::DoTravelTheWorld()
{
	static UFunction* uFnDoTravelTheWorld = nullptr;

	if (!uFnDoTravelTheWorld)
	{
		uFnDoTravelTheWorld = UFunction::FindFunction("Function Engine.GameInfo.DoTravelTheWorld");
	}

	AGameInfo_execDoTravelTheWorld_Params DoTravelTheWorld_Params;
	memset(&DoTravelTheWorld_Params, 0, sizeof(DoTravelTheWorld_Params));

	this->ProcessEvent(uFnDoTravelTheWorld, &DoTravelTheWorld_Params, nullptr);
};

// Function Engine.GameInfo.OnLoginChange
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint8_t                        LocalUserNum                   (CPF_Parm)

void AGameInfo::OnLoginChange(uint8_t LocalUserNum)
{
	static UFunction* uFnOnLoginChange = nullptr;

	if (!uFnOnLoginChange)
	{
		uFnOnLoginChange = UFunction::FindFunction("Function Engine.GameInfo.OnLoginChange");
	}

	AGameInfo_execOnLoginChange_Params OnLoginChange_Params;
	memset(&OnLoginChange_Params, 0, sizeof(OnLoginChange_Params));
	memcpy_s(&OnLoginChange_Params.LocalUserNum, sizeof(OnLoginChange_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));

	this->ProcessEvent(uFnOnLoginChange, &OnLoginChange_Params, nullptr);
};

// Function Engine.GameInfo.OnLoginFailed
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint8_t                        LocalUserNum                   (CPF_Parm)
// EOnlineServerConnectionStatus  ErrorCode                      (CPF_Parm)

void AGameInfo::OnLoginFailed(uint8_t LocalUserNum, EOnlineServerConnectionStatus ErrorCode)
{
	static UFunction* uFnOnLoginFailed = nullptr;

	if (!uFnOnLoginFailed)
	{
		uFnOnLoginFailed = UFunction::FindFunction("Function Engine.GameInfo.OnLoginFailed");
	}

	AGameInfo_execOnLoginFailed_Params OnLoginFailed_Params;
	memset(&OnLoginFailed_Params, 0, sizeof(OnLoginFailed_Params));
	memcpy_s(&OnLoginFailed_Params.LocalUserNum, sizeof(OnLoginFailed_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	memcpy_s(&OnLoginFailed_Params.ErrorCode, sizeof(OnLoginFailed_Params.ErrorCode), &ErrorCode, sizeof(ErrorCode));

	this->ProcessEvent(uFnOnLoginFailed, &OnLoginFailed_Params, nullptr);
};

// Function Engine.GameInfo.ClearAutoLoginDelegates
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AGameInfo::ClearAutoLoginDelegates()
{
	static UFunction* uFnClearAutoLoginDelegates = nullptr;

	if (!uFnClearAutoLoginDelegates)
	{
		uFnClearAutoLoginDelegates = UFunction::FindFunction("Function Engine.GameInfo.ClearAutoLoginDelegates");
	}

	AGameInfo_execClearAutoLoginDelegates_Params ClearAutoLoginDelegates_Params;
	memset(&ClearAutoLoginDelegates_Params, 0, sizeof(ClearAutoLoginDelegates_Params));

	this->ProcessEvent(uFnClearAutoLoginDelegates, &ClearAutoLoginDelegates_Params, nullptr);
};

// Function Engine.GameInfo.ProcessServerLogin
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AGameInfo::ProcessServerLogin()
{
	static UFunction* uFnProcessServerLogin = nullptr;

	if (!uFnProcessServerLogin)
	{
		uFnProcessServerLogin = UFunction::FindFunction("Function Engine.GameInfo.ProcessServerLogin");
	}

	AGameInfo_execProcessServerLogin_Params ProcessServerLogin_Params;
	memset(&ProcessServerLogin_Params, 0, sizeof(ProcessServerLogin_Params));

	this->ProcessEvent(uFnProcessServerLogin, &ProcessServerLogin_Params, nullptr);

	return ProcessServerLogin_Params.ReturnValue;
};

// Function Engine.GameInfo.MatineeCancelled
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AGameInfo::eventMatineeCancelled()
{
	static UFunction* uFnMatineeCancelled = nullptr;

	if (!uFnMatineeCancelled)
	{
		uFnMatineeCancelled = UFunction::FindFunction("Function Engine.GameInfo.MatineeCancelled");
	}

	AGameInfo_eventMatineeCancelled_Params MatineeCancelled_Params;
	memset(&MatineeCancelled_Params, 0, sizeof(MatineeCancelled_Params));

	this->ProcessEvent(uFnMatineeCancelled, &MatineeCancelled_Params, nullptr);
};

// Function Engine.GameInfo.MatchIsInProgress
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AGameInfo::MatchIsInProgress()
{
	static UFunction* uFnMatchIsInProgress = nullptr;

	if (!uFnMatchIsInProgress)
	{
		uFnMatchIsInProgress = UFunction::FindFunction("Function Engine.GameInfo.MatchIsInProgress");
	}

	AGameInfo_execMatchIsInProgress_Params MatchIsInProgress_Params;
	memset(&MatchIsInProgress_Params, 0, sizeof(MatchIsInProgress_Params));

	this->ProcessEvent(uFnMatchIsInProgress, &MatchIsInProgress_Params, nullptr);

	return MatchIsInProgress_Params.ReturnValue;
};

// Function Engine.GameInfo.ArbitrationRegistrationComplete
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FName                    SessionName                    (CPF_Parm)
// uint32_t                       bWasSuccessful                 (CPF_Parm)

void AGameInfo::ArbitrationRegistrationComplete(const class FName& SessionName, bool bWasSuccessful)
{
	static UFunction* uFnArbitrationRegistrationComplete = nullptr;

	if (!uFnArbitrationRegistrationComplete)
	{
		uFnArbitrationRegistrationComplete = UFunction::FindFunction("Function Engine.GameInfo.ArbitrationRegistrationComplete");
	}

	AGameInfo_execArbitrationRegistrationComplete_Params ArbitrationRegistrationComplete_Params;
	memset(&ArbitrationRegistrationComplete_Params, 0, sizeof(ArbitrationRegistrationComplete_Params));
	memcpy_s(&ArbitrationRegistrationComplete_Params.SessionName, sizeof(ArbitrationRegistrationComplete_Params.SessionName), &SessionName, sizeof(SessionName));
	ArbitrationRegistrationComplete_Params.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent(uFnArbitrationRegistrationComplete, &ArbitrationRegistrationComplete_Params, nullptr);
};

// Function Engine.GameInfo.ProcessClientRegistrationCompletion
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class APlayerController*       PC                             (CPF_Parm)
// uint32_t                       bWasSuccessful                 (CPF_Parm)

void AGameInfo::ProcessClientRegistrationCompletion(class APlayerController* PC, bool bWasSuccessful)
{
	static UFunction* uFnProcessClientRegistrationCompletion = nullptr;

	if (!uFnProcessClientRegistrationCompletion)
	{
		uFnProcessClientRegistrationCompletion = UFunction::FindFunction("Function Engine.GameInfo.ProcessClientRegistrationCompletion");
	}

	AGameInfo_execProcessClientRegistrationCompletion_Params ProcessClientRegistrationCompletion_Params;
	memset(&ProcessClientRegistrationCompletion_Params, 0, sizeof(ProcessClientRegistrationCompletion_Params));
	ProcessClientRegistrationCompletion_Params.PC = PC;
	ProcessClientRegistrationCompletion_Params.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent(uFnProcessClientRegistrationCompletion, &ProcessClientRegistrationCompletion_Params, nullptr);
};

// Function Engine.GameInfo.UpdateGameSettings
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AGameInfo::UpdateGameSettings()
{
	static UFunction* uFnUpdateGameSettings = nullptr;

	if (!uFnUpdateGameSettings)
	{
		uFnUpdateGameSettings = UFunction::FindFunction("Function Engine.GameInfo.UpdateGameSettings");
	}

	AGameInfo_execUpdateGameSettings_Params UpdateGameSettings_Params;
	memset(&UpdateGameSettings_Params, 0, sizeof(UpdateGameSettings_Params));

	this->ProcessEvent(uFnUpdateGameSettings, &UpdateGameSettings_Params, nullptr);
};

// Function Engine.GameInfo.SwapPlayerControllers
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[26412])
// Parameter Info:
// class APlayerController*       OldPC                          (CPF_Parm)
// class APlayerController*       NewPC                          (CPF_Parm)

void AGameInfo::SwapPlayerControllers(class APlayerController* OldPC, class APlayerController* NewPC)
{
	static UFunction* uFnSwapPlayerControllers = nullptr;

	if (!uFnSwapPlayerControllers)
	{
		uFnSwapPlayerControllers = UFunction::FindFunction("Function Engine.GameInfo.SwapPlayerControllers");
	}

	AGameInfo_execSwapPlayerControllers_Params SwapPlayerControllers_Params;
	memset(&SwapPlayerControllers_Params, 0, sizeof(SwapPlayerControllers_Params));
	SwapPlayerControllers_Params.OldPC = OldPC;
	SwapPlayerControllers_Params.NewPC = NewPC;

	uFnSwapPlayerControllers->iNative = 0;
	uFnSwapPlayerControllers->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSwapPlayerControllers, &SwapPlayerControllers_Params, nullptr);
	uFnSwapPlayerControllers->FunctionFlags |= 0x400;
	uFnSwapPlayerControllers->iNative = 26412;
};

// Function Engine.GameInfo.AllowPausing
// [0x00024002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class APlayerController*       PC                             (CPF_OptionalParm | CPF_Parm)

bool AGameInfo::AllowPausing(class APlayerController* PC)
{
	static UFunction* uFnAllowPausing = nullptr;

	if (!uFnAllowPausing)
	{
		uFnAllowPausing = UFunction::FindFunction("Function Engine.GameInfo.AllowPausing");
	}

	AGameInfo_execAllowPausing_Params AllowPausing_Params;
	memset(&AllowPausing_Params, 0, sizeof(AllowPausing_Params));
	AllowPausing_Params.PC = PC;

	this->ProcessEvent(uFnAllowPausing, &AllowPausing_Params, nullptr);

	return AllowPausing_Params.ReturnValue;
};

// Function Engine.GameInfo.AllowCheats
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class APlayerController*       P                              (CPF_Parm)

bool AGameInfo::AllowCheats(class APlayerController* P)
{
	static UFunction* uFnAllowCheats = nullptr;

	if (!uFnAllowCheats)
	{
		uFnAllowCheats = UFunction::FindFunction("Function Engine.GameInfo.AllowCheats");
	}

	AGameInfo_execAllowCheats_Params AllowCheats_Params;
	memset(&AllowCheats_Params, 0, sizeof(AllowCheats_Params));
	AllowCheats_Params.P = P;

	this->ProcessEvent(uFnAllowCheats, &AllowCheats_Params, nullptr);

	return AllowCheats_Params.ReturnValue;
};

// Function Engine.GameInfo.AllowMutator
// [0x00022002] (FUNC_Defined | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FString                  MutatorClassName               (CPF_Parm | CPF_NeedCtorLink)

bool AGameInfo::AllowMutator(const class FString& MutatorClassName)
{
	static UFunction* uFnAllowMutator = nullptr;

	if (!uFnAllowMutator)
	{
		uFnAllowMutator = UFunction::FindFunction("Function Engine.GameInfo.AllowMutator");
	}

	AGameInfo_execAllowMutator_Params AllowMutator_Params;
	memset(&AllowMutator_Params, 0, sizeof(AllowMutator_Params));
	memcpy_s(&AllowMutator_Params.MutatorClassName, sizeof(AllowMutator_Params.MutatorClassName), &MutatorClassName, sizeof(MutatorClassName));

	AGameInfo::StaticClass()->ProcessEvent(uFnAllowMutator, &AllowMutator_Params, nullptr);

	return AllowMutator_Params.ReturnValue;
};

// Function Engine.GameInfo.PlayerCanRestart
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class APlayerController*       aPlayer                        (CPF_Parm)

bool AGameInfo::PlayerCanRestart(class APlayerController* aPlayer)
{
	static UFunction* uFnPlayerCanRestart = nullptr;

	if (!uFnPlayerCanRestart)
	{
		uFnPlayerCanRestart = UFunction::FindFunction("Function Engine.GameInfo.PlayerCanRestart");
	}

	AGameInfo_execPlayerCanRestart_Params PlayerCanRestart_Params;
	memset(&PlayerCanRestart_Params, 0, sizeof(PlayerCanRestart_Params));
	PlayerCanRestart_Params.aPlayer = aPlayer;

	this->ProcessEvent(uFnPlayerCanRestart, &PlayerCanRestart_Params, nullptr);

	return PlayerCanRestart_Params.ReturnValue;
};

// Function Engine.GameInfo.PlayerCanRestartGame
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class APlayerController*       aPlayer                        (CPF_Parm)

bool AGameInfo::PlayerCanRestartGame(class APlayerController* aPlayer)
{
	static UFunction* uFnPlayerCanRestartGame = nullptr;

	if (!uFnPlayerCanRestartGame)
	{
		uFnPlayerCanRestartGame = UFunction::FindFunction("Function Engine.GameInfo.PlayerCanRestartGame");
	}

	AGameInfo_execPlayerCanRestartGame_Params PlayerCanRestartGame_Params;
	memset(&PlayerCanRestartGame_Params, 0, sizeof(PlayerCanRestartGame_Params));
	PlayerCanRestartGame_Params.aPlayer = aPlayer;

	this->ProcessEvent(uFnPlayerCanRestartGame, &PlayerCanRestartGame_Params, nullptr);

	return PlayerCanRestartGame_Params.ReturnValue;
};

// Function Engine.GameInfo.RatePlayerStart
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class APlayerStart*            P                              (CPF_Parm)
// uint8_t                        Team                           (CPF_Parm)
// class AController*             Player                         (CPF_Parm)

float AGameInfo::RatePlayerStart(class APlayerStart* P, uint8_t Team, class AController* Player)
{
	static UFunction* uFnRatePlayerStart = nullptr;

	if (!uFnRatePlayerStart)
	{
		uFnRatePlayerStart = UFunction::FindFunction("Function Engine.GameInfo.RatePlayerStart");
	}

	AGameInfo_execRatePlayerStart_Params RatePlayerStart_Params;
	memset(&RatePlayerStart_Params, 0, sizeof(RatePlayerStart_Params));
	RatePlayerStart_Params.P = P;
	memcpy_s(&RatePlayerStart_Params.Team, sizeof(RatePlayerStart_Params.Team), &Team, sizeof(Team));
	RatePlayerStart_Params.Player = Player;

	this->ProcessEvent(uFnRatePlayerStart, &RatePlayerStart_Params, nullptr);

	return RatePlayerStart_Params.ReturnValue;
};

// Function Engine.GameInfo.ChoosePlayerStart
// [0x00024002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class APlayerStart*            ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class AController*             Player                         (CPF_Parm)
// uint8_t                        InTeam                         (CPF_OptionalParm | CPF_Parm)

class APlayerStart* AGameInfo::ChoosePlayerStart(class AController* Player, uint8_t InTeam)
{
	static UFunction* uFnChoosePlayerStart = nullptr;

	if (!uFnChoosePlayerStart)
	{
		uFnChoosePlayerStart = UFunction::FindFunction("Function Engine.GameInfo.ChoosePlayerStart");
	}

	AGameInfo_execChoosePlayerStart_Params ChoosePlayerStart_Params;
	memset(&ChoosePlayerStart_Params, 0, sizeof(ChoosePlayerStart_Params));
	ChoosePlayerStart_Params.Player = Player;
	memcpy_s(&ChoosePlayerStart_Params.InTeam, sizeof(ChoosePlayerStart_Params.InTeam), &InTeam, sizeof(InTeam));

	this->ProcessEvent(uFnChoosePlayerStart, &ChoosePlayerStart_Params, nullptr);

	return ChoosePlayerStart_Params.ReturnValue;
};

// Function Engine.GameInfo.FindPlayerStart
// [0x00024002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class ANavigationPoint*        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class AController*             Player                         (CPF_Parm)
// uint8_t                        InTeam                         (CPF_OptionalParm | CPF_Parm)
// class FString                  IncomingName                   (CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink)

class ANavigationPoint* AGameInfo::FindPlayerStart(class AController* Player, uint8_t InTeam, const class FString& IncomingName)
{
	static UFunction* uFnFindPlayerStart = nullptr;

	if (!uFnFindPlayerStart)
	{
		uFnFindPlayerStart = UFunction::FindFunction("Function Engine.GameInfo.FindPlayerStart");
	}

	AGameInfo_execFindPlayerStart_Params FindPlayerStart_Params;
	memset(&FindPlayerStart_Params, 0, sizeof(FindPlayerStart_Params));
	FindPlayerStart_Params.Player = Player;
	memcpy_s(&FindPlayerStart_Params.InTeam, sizeof(FindPlayerStart_Params.InTeam), &InTeam, sizeof(InTeam));
	memcpy_s(&FindPlayerStart_Params.IncomingName, sizeof(FindPlayerStart_Params.IncomingName), &IncomingName, sizeof(IncomingName));

	this->ProcessEvent(uFnFindPlayerStart, &FindPlayerStart_Params, nullptr);

	return FindPlayerStart_Params.ReturnValue;
};

// Function Engine.GameInfo.ShouldSpawnAtStartSpot
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class AController*             Player                         (CPF_Parm)

bool AGameInfo::ShouldSpawnAtStartSpot(class AController* Player)
{
	static UFunction* uFnShouldSpawnAtStartSpot = nullptr;

	if (!uFnShouldSpawnAtStartSpot)
	{
		uFnShouldSpawnAtStartSpot = UFunction::FindFunction("Function Engine.GameInfo.ShouldSpawnAtStartSpot");
	}

	AGameInfo_execShouldSpawnAtStartSpot_Params ShouldSpawnAtStartSpot_Params;
	memset(&ShouldSpawnAtStartSpot_Params, 0, sizeof(ShouldSpawnAtStartSpot_Params));
	ShouldSpawnAtStartSpot_Params.Player = Player;

	this->ProcessEvent(uFnShouldSpawnAtStartSpot, &ShouldSpawnAtStartSpot_Params, nullptr);

	return ShouldSpawnAtStartSpot_Params.ReturnValue;
};

// Function Engine.GameInfo.EndLogging
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  Reason                         (CPF_Parm | CPF_NeedCtorLink)

void AGameInfo::EndLogging(const class FString& Reason)
{
	static UFunction* uFnEndLogging = nullptr;

	if (!uFnEndLogging)
	{
		uFnEndLogging = UFunction::FindFunction("Function Engine.GameInfo.EndLogging");
	}

	AGameInfo_execEndLogging_Params EndLogging_Params;
	memset(&EndLogging_Params, 0, sizeof(EndLogging_Params));
	memcpy_s(&EndLogging_Params.Reason, sizeof(EndLogging_Params.Reason), &Reason, sizeof(Reason));

	this->ProcessEvent(uFnEndLogging, &EndLogging_Params, nullptr);
};

// Function Engine.GameInfo.BroadcastLocalizedTeam
// [0x00024802] (FUNC_Defined | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        TeamIndex                      (CPF_Parm)
// class AActor*                  Sender                         (CPF_Parm)
// class ULocalMessage*           Message                        (CPF_Parm)
// int32_t                        Switch                         (CPF_OptionalParm | CPF_Parm)
// class UObject*                 OptionalObject                 (CPF_OptionalParm | CPF_Parm)

void AGameInfo::eventBroadcastLocalizedTeam(int32_t TeamIndex, class AActor* Sender, class ULocalMessage* Message, int32_t Switch, class UObject* OptionalObject)
{
	static UFunction* uFnBroadcastLocalizedTeam = nullptr;

	if (!uFnBroadcastLocalizedTeam)
	{
		uFnBroadcastLocalizedTeam = UFunction::FindFunction("Function Engine.GameInfo.BroadcastLocalizedTeam");
	}

	AGameInfo_eventBroadcastLocalizedTeam_Params BroadcastLocalizedTeam_Params;
	memset(&BroadcastLocalizedTeam_Params, 0, sizeof(BroadcastLocalizedTeam_Params));
	memcpy_s(&BroadcastLocalizedTeam_Params.TeamIndex, sizeof(BroadcastLocalizedTeam_Params.TeamIndex), &TeamIndex, sizeof(TeamIndex));
	BroadcastLocalizedTeam_Params.Sender = Sender;
	BroadcastLocalizedTeam_Params.Message = Message;
	memcpy_s(&BroadcastLocalizedTeam_Params.Switch, sizeof(BroadcastLocalizedTeam_Params.Switch), &Switch, sizeof(Switch));
	BroadcastLocalizedTeam_Params.OptionalObject = OptionalObject;

	this->ProcessEvent(uFnBroadcastLocalizedTeam, &BroadcastLocalizedTeam_Params, nullptr);
};

// Function Engine.GameInfo.BroadcastLocalized
// [0x00024802] (FUNC_Defined | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AActor*                  Sender                         (CPF_Parm)
// class ULocalMessage*           Message                        (CPF_Parm)
// int32_t                        Switch                         (CPF_OptionalParm | CPF_Parm)
// class UObject*                 OptionalObject                 (CPF_OptionalParm | CPF_Parm)

void AGameInfo::eventBroadcastLocalized(class AActor* Sender, class ULocalMessage* Message, int32_t Switch, class UObject* OptionalObject)
{
	static UFunction* uFnBroadcastLocalized = nullptr;

	if (!uFnBroadcastLocalized)
	{
		uFnBroadcastLocalized = UFunction::FindFunction("Function Engine.GameInfo.BroadcastLocalized");
	}

	AGameInfo_eventBroadcastLocalized_Params BroadcastLocalized_Params;
	memset(&BroadcastLocalized_Params, 0, sizeof(BroadcastLocalized_Params));
	BroadcastLocalized_Params.Sender = Sender;
	BroadcastLocalized_Params.Message = Message;
	memcpy_s(&BroadcastLocalized_Params.Switch, sizeof(BroadcastLocalized_Params.Switch), &Switch, sizeof(Switch));
	BroadcastLocalized_Params.OptionalObject = OptionalObject;

	this->ProcessEvent(uFnBroadcastLocalized, &BroadcastLocalized_Params, nullptr);
};

// Function Engine.GameInfo.BroadcastTeam
// [0x00024002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AController*             Sender                         (CPF_Parm)
// class FString                  Msg                            (CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink)
// class FName                    Type                           (CPF_OptionalParm | CPF_Parm)

void AGameInfo::BroadcastTeam(class AController* Sender, const class FString& Msg, const class FName& Type)
{
	static UFunction* uFnBroadcastTeam = nullptr;

	if (!uFnBroadcastTeam)
	{
		uFnBroadcastTeam = UFunction::FindFunction("Function Engine.GameInfo.BroadcastTeam");
	}

	AGameInfo_execBroadcastTeam_Params BroadcastTeam_Params;
	memset(&BroadcastTeam_Params, 0, sizeof(BroadcastTeam_Params));
	BroadcastTeam_Params.Sender = Sender;
	memcpy_s(&BroadcastTeam_Params.Msg, sizeof(BroadcastTeam_Params.Msg), &Msg, sizeof(Msg));
	memcpy_s(&BroadcastTeam_Params.Type, sizeof(BroadcastTeam_Params.Type), &Type, sizeof(Type));

	this->ProcessEvent(uFnBroadcastTeam, &BroadcastTeam_Params, nullptr);
};

// Function Engine.GameInfo.Broadcast
// [0x00024802] (FUNC_Defined | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AActor*                  Sender                         (CPF_Parm)
// class FString                  Message                        (CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink)
// class FName                    Type                           (CPF_OptionalParm | CPF_Parm)

void AGameInfo::eventBroadcast(class AActor* Sender, const class FString& Message, const class FName& Type)
{
	static UFunction* uFnBroadcast = nullptr;

	if (!uFnBroadcast)
	{
		uFnBroadcast = UFunction::FindFunction("Function Engine.GameInfo.Broadcast");
	}

	AGameInfo_eventBroadcast_Params Broadcast_Params;
	memset(&Broadcast_Params, 0, sizeof(Broadcast_Params));
	Broadcast_Params.Sender = Sender;
	memcpy_s(&Broadcast_Params.Message, sizeof(Broadcast_Params.Message), &Message, sizeof(Message));
	memcpy_s(&Broadcast_Params.Type, sizeof(Broadcast_Params.Type), &Type, sizeof(Type));

	this->ProcessEvent(uFnBroadcast, &Broadcast_Params, nullptr);
};

// Function Engine.GameInfo.RestartGame
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AGameInfo::RestartGame()
{
	static UFunction* uFnRestartGame = nullptr;

	if (!uFnRestartGame)
	{
		uFnRestartGame = UFunction::FindFunction("Function Engine.GameInfo.RestartGame");
	}

	AGameInfo_execRestartGame_Params RestartGame_Params;
	memset(&RestartGame_Params, 0, sizeof(RestartGame_Params));

	this->ProcessEvent(uFnRestartGame, &RestartGame_Params, nullptr);
};

// Function Engine.GameInfo.GetTravelType
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AGameInfo::GetTravelType()
{
	static UFunction* uFnGetTravelType = nullptr;

	if (!uFnGetTravelType)
	{
		uFnGetTravelType = UFunction::FindFunction("Function Engine.GameInfo.GetTravelType");
	}

	AGameInfo_execGetTravelType_Params GetTravelType_Params;
	memset(&GetTravelType_Params, 0, sizeof(GetTravelType_Params));

	this->ProcessEvent(uFnGetTravelType, &GetTravelType_Params, nullptr);

	return GetTravelType_Params.ReturnValue;
};

// Function Engine.GameInfo.GetNextMap
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)

class FString AGameInfo::GetNextMap()
{
	static UFunction* uFnGetNextMap = nullptr;

	if (!uFnGetNextMap)
	{
		uFnGetNextMap = UFunction::FindFunction("Function Engine.GameInfo.GetNextMap");
	}

	AGameInfo_execGetNextMap_Params GetNextMap_Params;
	memset(&GetNextMap_Params, 0, sizeof(GetNextMap_Params));

	this->ProcessEvent(uFnGetNextMap, &GetNextMap_Params, nullptr);

	return GetNextMap_Params.ReturnValue;
};

// Function Engine.GameInfo.SendPlayer
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class APlayerController*       aPlayer                        (CPF_Parm)
// class FString                  URL                            (CPF_Parm | CPF_NeedCtorLink)

void AGameInfo::SendPlayer(class APlayerController* aPlayer, const class FString& URL)
{
	static UFunction* uFnSendPlayer = nullptr;

	if (!uFnSendPlayer)
	{
		uFnSendPlayer = UFunction::FindFunction("Function Engine.GameInfo.SendPlayer");
	}

	AGameInfo_execSendPlayer_Params SendPlayer_Params;
	memset(&SendPlayer_Params, 0, sizeof(SendPlayer_Params));
	SendPlayer_Params.aPlayer = aPlayer;
	memcpy_s(&SendPlayer_Params.URL, sizeof(SendPlayer_Params.URL), &URL, sizeof(URL));

	this->ProcessEvent(uFnSendPlayer, &SendPlayer_Params, nullptr);
};

// Function Engine.GameInfo.PickTeam
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint8_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint8_t                        Current                        (CPF_Parm)
// class AController*             C                              (CPF_Parm)

uint8_t AGameInfo::PickTeam(uint8_t Current, class AController* C)
{
	static UFunction* uFnPickTeam = nullptr;

	if (!uFnPickTeam)
	{
		uFnPickTeam = UFunction::FindFunction("Function Engine.GameInfo.PickTeam");
	}

	AGameInfo_execPickTeam_Params PickTeam_Params;
	memset(&PickTeam_Params, 0, sizeof(PickTeam_Params));
	memcpy_s(&PickTeam_Params.Current, sizeof(PickTeam_Params.Current), &Current, sizeof(Current));
	PickTeam_Params.C = C;

	this->ProcessEvent(uFnPickTeam, &PickTeam_Params, nullptr);

	return PickTeam_Params.ReturnValue;
};

// Function Engine.GameInfo.ChangeTeam
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class AController*             Other                          (CPF_Parm)
// int32_t                        N                              (CPF_Parm)
// uint32_t                       bNewTeam                       (CPF_Parm)

bool AGameInfo::ChangeTeam(class AController* Other, int32_t N, bool bNewTeam)
{
	static UFunction* uFnChangeTeam = nullptr;

	if (!uFnChangeTeam)
	{
		uFnChangeTeam = UFunction::FindFunction("Function Engine.GameInfo.ChangeTeam");
	}

	AGameInfo_execChangeTeam_Params ChangeTeam_Params;
	memset(&ChangeTeam_Params, 0, sizeof(ChangeTeam_Params));
	ChangeTeam_Params.Other = Other;
	memcpy_s(&ChangeTeam_Params.N, sizeof(ChangeTeam_Params.N), &N, sizeof(N));
	ChangeTeam_Params.bNewTeam = bNewTeam;

	this->ProcessEvent(uFnChangeTeam, &ChangeTeam_Params, nullptr);

	return ChangeTeam_Params.ReturnValue;
};

// Function Engine.GameInfo.ChangeName
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AController*             Other                          (CPF_Parm)
// class FString                  S                              (CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink)
// uint32_t                       bNameChange                    (CPF_Parm)

void AGameInfo::ChangeName(class AController* Other, const class FString& S, bool bNameChange)
{
	static UFunction* uFnChangeName = nullptr;

	if (!uFnChangeName)
	{
		uFnChangeName = UFunction::FindFunction("Function Engine.GameInfo.ChangeName");
	}

	AGameInfo_execChangeName_Params ChangeName_Params;
	memset(&ChangeName_Params, 0, sizeof(ChangeName_Params));
	ChangeName_Params.Other = Other;
	memcpy_s(&ChangeName_Params.S, sizeof(ChangeName_Params.S), &S, sizeof(S));
	ChangeName_Params.bNameChange = bNameChange;

	this->ProcessEvent(uFnChangeName, &ChangeName_Params, nullptr);
};

// Function Engine.GameInfo.DiscardInventory
// [0x00024000] (FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class APawn*                   Other                          (CPF_Parm)
// class AController*             Killer                         (CPF_OptionalParm | CPF_Parm)

void AGameInfo::DiscardInventory(class APawn* Other, class AController* Killer)
{
	static UFunction* uFnDiscardInventory = nullptr;

	if (!uFnDiscardInventory)
	{
		uFnDiscardInventory = UFunction::FindFunction("Function Engine.GameInfo.DiscardInventory");
	}

	AGameInfo_execDiscardInventory_Params DiscardInventory_Params;
	memset(&DiscardInventory_Params, 0, sizeof(DiscardInventory_Params));
	DiscardInventory_Params.Other = Other;
	DiscardInventory_Params.Killer = Killer;

	this->ProcessEvent(uFnDiscardInventory, &DiscardInventory_Params, nullptr);
};

// Function Engine.GameInfo.CheckRelevance
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class AActor*                  Other                          (CPF_Parm)

bool AGameInfo::CheckRelevance(class AActor* Other)
{
	static UFunction* uFnCheckRelevance = nullptr;

	if (!uFnCheckRelevance)
	{
		uFnCheckRelevance = UFunction::FindFunction("Function Engine.GameInfo.CheckRelevance");
	}

	AGameInfo_execCheckRelevance_Params CheckRelevance_Params;
	memset(&CheckRelevance_Params, 0, sizeof(CheckRelevance_Params));
	CheckRelevance_Params.Other = Other;

	this->ProcessEvent(uFnCheckRelevance, &CheckRelevance_Params, nullptr);

	return CheckRelevance_Params.ReturnValue;
};

// Function Engine.GameInfo.ReduceDamage
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[24992])
// Parameter Info:
// class APawn*                   injured                        (CPF_Parm)
// class AController*             InstigatedBy                   (CPF_Parm)
// struct FVector                 HitLocation                    (CPF_Parm)
// class UDamageType*             DamageType                     (CPF_Parm)
// class AActor*                  DamageCauser                   (CPF_Parm)
// int32_t                        Damage                         (CPF_Parm | CPF_OutParm)
// struct FVector                 Momentum                       (CPF_Parm | CPF_OutParm)

void AGameInfo::ReduceDamage(class APawn* injured, class AController* InstigatedBy, const struct FVector& HitLocation, class UDamageType* DamageType, class AActor* DamageCauser, int32_t& Damage, struct FVector& Momentum)
{
	static UFunction* uFnReduceDamage = nullptr;

	if (!uFnReduceDamage)
	{
		uFnReduceDamage = UFunction::FindFunction("Function Engine.GameInfo.ReduceDamage");
	}

	AGameInfo_execReduceDamage_Params ReduceDamage_Params;
	memset(&ReduceDamage_Params, 0, sizeof(ReduceDamage_Params));
	ReduceDamage_Params.injured = injured;
	ReduceDamage_Params.InstigatedBy = InstigatedBy;
	memcpy_s(&ReduceDamage_Params.HitLocation, sizeof(ReduceDamage_Params.HitLocation), &HitLocation, sizeof(HitLocation));
	ReduceDamage_Params.DamageType = DamageType;
	ReduceDamage_Params.DamageCauser = DamageCauser;
	memcpy_s(&ReduceDamage_Params.Damage, sizeof(ReduceDamage_Params.Damage), &Damage, sizeof(Damage));
	memcpy_s(&ReduceDamage_Params.Momentum, sizeof(ReduceDamage_Params.Momentum), &Momentum, sizeof(Momentum));

	uFnReduceDamage->iNative = 0;
	uFnReduceDamage->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnReduceDamage, &ReduceDamage_Params, nullptr);
	uFnReduceDamage->FunctionFlags |= 0x400;
	uFnReduceDamage->iNative = 24992;

	memcpy_s(&Damage, sizeof(Damage), &ReduceDamage_Params.Damage, sizeof(ReduceDamage_Params.Damage));
	memcpy_s(&Momentum, sizeof(Momentum), &ReduceDamage_Params.Momentum, sizeof(ReduceDamage_Params.Momentum));
};

// Function Engine.GameInfo.BroadcastDeathMessage
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AController*             Killer                         (CPF_Parm)
// class AController*             Other                          (CPF_Parm)
// class UDamageType*             DamageType                     (CPF_Parm)

void AGameInfo::BroadcastDeathMessage(class AController* Killer, class AController* Other, class UDamageType* DamageType)
{
	static UFunction* uFnBroadcastDeathMessage = nullptr;

	if (!uFnBroadcastDeathMessage)
	{
		uFnBroadcastDeathMessage = UFunction::FindFunction("Function Engine.GameInfo.BroadcastDeathMessage");
	}

	AGameInfo_execBroadcastDeathMessage_Params BroadcastDeathMessage_Params;
	memset(&BroadcastDeathMessage_Params, 0, sizeof(BroadcastDeathMessage_Params));
	BroadcastDeathMessage_Params.Killer = Killer;
	BroadcastDeathMessage_Params.Other = Other;
	BroadcastDeathMessage_Params.DamageType = DamageType;

	this->ProcessEvent(uFnBroadcastDeathMessage, &BroadcastDeathMessage_Params, nullptr);
};

// Function Engine.GameInfo.PreventDeath
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class APawn*                   KilledPawn                     (CPF_Parm)
// class AController*             Killer                         (CPF_Parm)
// class UDamageType*             DamageType                     (CPF_Parm)
// struct FVector                 HitLocation                    (CPF_Parm)

bool AGameInfo::eventPreventDeath(class APawn* KilledPawn, class AController* Killer, class UDamageType* DamageType, const struct FVector& HitLocation)
{
	static UFunction* uFnPreventDeath = nullptr;

	if (!uFnPreventDeath)
	{
		uFnPreventDeath = UFunction::FindFunction("Function Engine.GameInfo.PreventDeath");
	}

	AGameInfo_eventPreventDeath_Params PreventDeath_Params;
	memset(&PreventDeath_Params, 0, sizeof(PreventDeath_Params));
	PreventDeath_Params.KilledPawn = KilledPawn;
	PreventDeath_Params.Killer = Killer;
	PreventDeath_Params.DamageType = DamageType;
	memcpy_s(&PreventDeath_Params.HitLocation, sizeof(PreventDeath_Params.HitLocation), &HitLocation, sizeof(HitLocation));

	this->ProcessEvent(uFnPreventDeath, &PreventDeath_Params, nullptr);

	return PreventDeath_Params.ReturnValue;
};

// Function Engine.GameInfo.Killed
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AController*             Killer                         (CPF_Parm)
// class AController*             KilledPlayer                   (CPF_Parm)
// class APawn*                   KilledPawn                     (CPF_Parm)
// class UDamageType*             DamageType                     (CPF_Parm)

void AGameInfo::Killed(class AController* Killer, class AController* KilledPlayer, class APawn* KilledPawn, class UDamageType* DamageType)
{
	static UFunction* uFnKilled = nullptr;

	if (!uFnKilled)
	{
		uFnKilled = UFunction::FindFunction("Function Engine.GameInfo.Killed");
	}

	AGameInfo_execKilled_Params Killed_Params;
	memset(&Killed_Params, 0, sizeof(Killed_Params));
	Killed_Params.Killer = Killer;
	Killed_Params.KilledPlayer = KilledPlayer;
	Killed_Params.KilledPawn = KilledPawn;
	Killed_Params.DamageType = DamageType;

	this->ProcessEvent(uFnKilled, &Killed_Params, nullptr);
};

// Function Engine.GameInfo.NotifyKilled
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AController*             Killer                         (CPF_Parm)
// class AController*             Killed                         (CPF_Parm)
// class APawn*                   KilledPawn                     (CPF_Parm)
// class UDamageType*             DamageType                     (CPF_Parm)

void AGameInfo::eventNotifyKilled(class AController* Killer, class AController* Killed, class APawn* KilledPawn, class UDamageType* DamageType)
{
	static UFunction* uFnNotifyKilled = nullptr;

	if (!uFnNotifyKilled)
	{
		uFnNotifyKilled = UFunction::FindFunction("Function Engine.GameInfo.NotifyKilled");
	}

	AGameInfo_eventNotifyKilled_Params NotifyKilled_Params;
	memset(&NotifyKilled_Params, 0, sizeof(NotifyKilled_Params));
	NotifyKilled_Params.Killer = Killer;
	NotifyKilled_Params.Killed = Killed;
	NotifyKilled_Params.KilledPawn = KilledPawn;
	NotifyKilled_Params.DamageType = DamageType;

	this->ProcessEvent(uFnNotifyKilled, &NotifyKilled_Params, nullptr);
};

// Function Engine.GameInfo.SetPlayerDefaults
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class APawn*                   PlayerPawn                     (CPF_Parm)

void AGameInfo::SetPlayerDefaults(class APawn* PlayerPawn)
{
	static UFunction* uFnSetPlayerDefaults = nullptr;

	if (!uFnSetPlayerDefaults)
	{
		uFnSetPlayerDefaults = UFunction::FindFunction("Function Engine.GameInfo.SetPlayerDefaults");
	}

	AGameInfo_execSetPlayerDefaults_Params SetPlayerDefaults_Params;
	memset(&SetPlayerDefaults_Params, 0, sizeof(SetPlayerDefaults_Params));
	SetPlayerDefaults_Params.PlayerPawn = PlayerPawn;

	this->ProcessEvent(uFnSetPlayerDefaults, &SetPlayerDefaults_Params, nullptr);
};

// Function Engine.GameInfo.Mutate
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  MutateString                   (CPF_Parm | CPF_NeedCtorLink)
// class APlayerController*       Sender                         (CPF_Parm)

void AGameInfo::Mutate(const class FString& MutateString, class APlayerController* Sender)
{
	static UFunction* uFnMutate = nullptr;

	if (!uFnMutate)
	{
		uFnMutate = UFunction::FindFunction("Function Engine.GameInfo.Mutate");
	}

	AGameInfo_execMutate_Params Mutate_Params;
	memset(&Mutate_Params, 0, sizeof(Mutate_Params));
	memcpy_s(&Mutate_Params.MutateString, sizeof(Mutate_Params.MutateString), &MutateString, sizeof(MutateString));
	Mutate_Params.Sender = Sender;

	this->ProcessEvent(uFnMutate, &Mutate_Params, nullptr);
};

// Function Engine.GameInfo.AddDefaultInventory
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class APawn*                   P                              (CPF_Parm)

void AGameInfo::eventAddDefaultInventory(class APawn* P)
{
	static UFunction* uFnAddDefaultInventory = nullptr;

	if (!uFnAddDefaultInventory)
	{
		uFnAddDefaultInventory = UFunction::FindFunction("Function Engine.GameInfo.AddDefaultInventory");
	}

	AGameInfo_eventAddDefaultInventory_Params AddDefaultInventory_Params;
	memset(&AddDefaultInventory_Params, 0, sizeof(AddDefaultInventory_Params));
	AddDefaultInventory_Params.P = P;

	this->ProcessEvent(uFnAddDefaultInventory, &AddDefaultInventory_Params, nullptr);
};

// Function Engine.GameInfo.AcceptInventory
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class APawn*                   PlayerPawn                     (CPF_Parm)

void AGameInfo::eventAcceptInventory(class APawn* PlayerPawn)
{
	static UFunction* uFnAcceptInventory = nullptr;

	if (!uFnAcceptInventory)
	{
		uFnAcceptInventory = UFunction::FindFunction("Function Engine.GameInfo.AcceptInventory");
	}

	AGameInfo_eventAcceptInventory_Params AcceptInventory_Params;
	memset(&AcceptInventory_Params, 0, sizeof(AcceptInventory_Params));
	AcceptInventory_Params.PlayerPawn = PlayerPawn;

	this->ProcessEvent(uFnAcceptInventory, &AcceptInventory_Params, nullptr);
};

// Function Engine.GameInfo.UnregisterPlayer
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class APlayerController*       PC                             (CPF_Parm)

void AGameInfo::UnregisterPlayer(class APlayerController* PC)
{
	static UFunction* uFnUnregisterPlayer = nullptr;

	if (!uFnUnregisterPlayer)
	{
		uFnUnregisterPlayer = UFunction::FindFunction("Function Engine.GameInfo.UnregisterPlayer");
	}

	AGameInfo_execUnregisterPlayer_Params UnregisterPlayer_Params;
	memset(&UnregisterPlayer_Params, 0, sizeof(UnregisterPlayer_Params));
	UnregisterPlayer_Params.PC = PC;

	this->ProcessEvent(uFnUnregisterPlayer, &UnregisterPlayer_Params, nullptr);
};

// Function Engine.GameInfo.Logout
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AController*             Exiting                        (CPF_Parm)

void AGameInfo::Logout(class AController* Exiting)
{
	static UFunction* uFnLogout = nullptr;

	if (!uFnLogout)
	{
		uFnLogout = UFunction::FindFunction("Function Engine.GameInfo.Logout");
	}

	AGameInfo_execLogout_Params Logout_Params;
	memset(&Logout_Params, 0, sizeof(Logout_Params));
	Logout_Params.Exiting = Exiting;

	this->ProcessEvent(uFnLogout, &Logout_Params, nullptr);
};

// Function Engine.GameInfo.PreExit
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AGameInfo::eventPreExit()
{
	static UFunction* uFnPreExit = nullptr;

	if (!uFnPreExit)
	{
		uFnPreExit = UFunction::FindFunction("Function Engine.GameInfo.PreExit");
	}

	AGameInfo_eventPreExit_Params PreExit_Params;
	memset(&PreExit_Params, 0, sizeof(PreExit_Params));

	this->ProcessEvent(uFnPreExit, &PreExit_Params, nullptr);
};

// Function Engine.GameInfo.PostLogin
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class APlayerController*       NewPlayer                      (CPF_Parm)

void AGameInfo::eventPostLogin(class APlayerController* NewPlayer)
{
	static UFunction* uFnPostLogin = nullptr;

	if (!uFnPostLogin)
	{
		uFnPostLogin = UFunction::FindFunction("Function Engine.GameInfo.PostLogin");
	}

	AGameInfo_eventPostLogin_Params PostLogin_Params;
	memset(&PostLogin_Params, 0, sizeof(PostLogin_Params));
	PostLogin_Params.NewPlayer = NewPlayer;

	this->ProcessEvent(uFnPostLogin, &PostLogin_Params, nullptr);
};

// Function Engine.GameInfo.GenericPlayerInitialization
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AController*             C                              (CPF_Parm)

void AGameInfo::GenericPlayerInitialization(class AController* C)
{
	static UFunction* uFnGenericPlayerInitialization = nullptr;

	if (!uFnGenericPlayerInitialization)
	{
		uFnGenericPlayerInitialization = UFunction::FindFunction("Function Engine.GameInfo.GenericPlayerInitialization");
	}

	AGameInfo_execGenericPlayerInitialization_Params GenericPlayerInitialization_Params;
	memset(&GenericPlayerInitialization_Params, 0, sizeof(GenericPlayerInitialization_Params));
	GenericPlayerInitialization_Params.C = C;

	this->ProcessEvent(uFnGenericPlayerInitialization, &GenericPlayerInitialization_Params, nullptr);
};

// Function Engine.GameInfo.SpawnPlayer
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class APawn*                   ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class APawn*                   SpawnClass                     (CPF_Parm)
// struct FVector                 SpawnLocation                  (CPF_Parm)
// struct FRotator                SpawnRotation                  (CPF_Parm)

class APawn* AGameInfo::SpawnPlayer(class APawn* SpawnClass, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation)
{
	static UFunction* uFnSpawnPlayer = nullptr;

	if (!uFnSpawnPlayer)
	{
		uFnSpawnPlayer = UFunction::FindFunction("Function Engine.GameInfo.SpawnPlayer");
	}

	AGameInfo_execSpawnPlayer_Params SpawnPlayer_Params;
	memset(&SpawnPlayer_Params, 0, sizeof(SpawnPlayer_Params));
	SpawnPlayer_Params.SpawnClass = SpawnClass;
	memcpy_s(&SpawnPlayer_Params.SpawnLocation, sizeof(SpawnPlayer_Params.SpawnLocation), &SpawnLocation, sizeof(SpawnLocation));
	memcpy_s(&SpawnPlayer_Params.SpawnRotation, sizeof(SpawnPlayer_Params.SpawnRotation), &SpawnRotation, sizeof(SpawnRotation));

	this->ProcessEvent(uFnSpawnPlayer, &SpawnPlayer_Params, nullptr);

	return SpawnPlayer_Params.ReturnValue;
};

// Function Engine.GameInfo.GetDefaultPlayerClass
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class APawn*                   ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class AController*             C                              (CPF_Parm)

class APawn* AGameInfo::GetDefaultPlayerClass(class AController* C)
{
	static UFunction* uFnGetDefaultPlayerClass = nullptr;

	if (!uFnGetDefaultPlayerClass)
	{
		uFnGetDefaultPlayerClass = UFunction::FindFunction("Function Engine.GameInfo.GetDefaultPlayerClass");
	}

	AGameInfo_execGetDefaultPlayerClass_Params GetDefaultPlayerClass_Params;
	memset(&GetDefaultPlayerClass_Params, 0, sizeof(GetDefaultPlayerClass_Params));
	GetDefaultPlayerClass_Params.C = C;

	this->ProcessEvent(uFnGetDefaultPlayerClass, &GetDefaultPlayerClass_Params, nullptr);

	return GetDefaultPlayerClass_Params.ReturnValue;
};

// Function Engine.GameInfo.SpawnDefaultPawnFor
// [0x00820002] (FUNC_Defined | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// class APawn*                   ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class AController*             NewPlayer                      (CPF_Parm)
// class ANavigationPoint*        StartSpot                      (CPF_Parm)

class APawn* AGameInfo::SpawnDefaultPawnFor(class AController* NewPlayer, class ANavigationPoint* StartSpot)
{
	static UFunction* uFnSpawnDefaultPawnFor = nullptr;

	if (!uFnSpawnDefaultPawnFor)
	{
		uFnSpawnDefaultPawnFor = UFunction::FindFunction("Function Engine.GameInfo.SpawnDefaultPawnFor");
	}

	AGameInfo_execSpawnDefaultPawnFor_Params SpawnDefaultPawnFor_Params;
	memset(&SpawnDefaultPawnFor_Params, 0, sizeof(SpawnDefaultPawnFor_Params));
	SpawnDefaultPawnFor_Params.NewPlayer = NewPlayer;
	SpawnDefaultPawnFor_Params.StartSpot = StartSpot;

	this->ProcessEvent(uFnSpawnDefaultPawnFor, &SpawnDefaultPawnFor_Params, nullptr);

	return SpawnDefaultPawnFor_Params.ReturnValue;
};

// Function Engine.GameInfo.RestartPlayer
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AController*             NewPlayer                      (CPF_Parm)

void AGameInfo::RestartPlayer(class AController* NewPlayer)
{
	static UFunction* uFnRestartPlayer = nullptr;

	if (!uFnRestartPlayer)
	{
		uFnRestartPlayer = UFunction::FindFunction("Function Engine.GameInfo.RestartPlayer");
	}

	AGameInfo_execRestartPlayer_Params RestartPlayer_Params;
	memset(&RestartPlayer_Params, 0, sizeof(RestartPlayer_Params));
	RestartPlayer_Params.NewPlayer = NewPlayer;

	this->ProcessEvent(uFnRestartPlayer, &RestartPlayer_Params, nullptr);
};

// Function Engine.GameInfo.StartHumans
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AGameInfo::StartHumans()
{
	static UFunction* uFnStartHumans = nullptr;

	if (!uFnStartHumans)
	{
		uFnStartHumans = UFunction::FindFunction("Function Engine.GameInfo.StartHumans");
	}

	AGameInfo_execStartHumans_Params StartHumans_Params;
	memset(&StartHumans_Params, 0, sizeof(StartHumans_Params));

	this->ProcessEvent(uFnStartHumans, &StartHumans_Params, nullptr);
};

// Function Engine.GameInfo.StartMatch
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AGameInfo::eventStartMatch()
{
	static UFunction* uFnStartMatch = nullptr;

	if (!uFnStartMatch)
	{
		uFnStartMatch = UFunction::FindFunction("Function Engine.GameInfo.StartMatch");
	}

	AGameInfo_eventStartMatch_Params StartMatch_Params;
	memset(&StartMatch_Params, 0, sizeof(StartMatch_Params));

	this->ProcessEvent(uFnStartMatch, &StartMatch_Params, nullptr);
};

// Function Engine.GameInfo.Login
// [0x00C20802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_HasOutParms | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// class APlayerController*       ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FString                  Portal                         (CPF_Parm | CPF_NeedCtorLink)
// class FString                  Options                        (CPF_Parm | CPF_NeedCtorLink)
// struct FUniqueNetId            UniqueId                       (CPF_Const | CPF_Parm)
// class FString                  ErrorMessage                   (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

class APlayerController* AGameInfo::eventLogin(const class FString& Portal, const class FString& Options, const struct FUniqueNetId& UniqueId, class FString& ErrorMessage)
{
	static UFunction* uFnLogin = nullptr;

	if (!uFnLogin)
	{
		uFnLogin = UFunction::FindFunction("Function Engine.GameInfo.Login");
	}

	AGameInfo_eventLogin_Params Login_Params;
	memset(&Login_Params, 0, sizeof(Login_Params));
	memcpy_s(&Login_Params.Portal, sizeof(Login_Params.Portal), &Portal, sizeof(Portal));
	memcpy_s(&Login_Params.Options, sizeof(Login_Params.Options), &Options, sizeof(Options));
	memcpy_s(&Login_Params.UniqueId, sizeof(Login_Params.UniqueId), &UniqueId, sizeof(UniqueId));
	memcpy_s(&Login_Params.ErrorMessage, sizeof(Login_Params.ErrorMessage), &ErrorMessage, sizeof(ErrorMessage));

	this->ProcessEvent(uFnLogin, &Login_Params, nullptr);

	memcpy_s(&ErrorMessage, sizeof(ErrorMessage), &Login_Params.ErrorMessage, sizeof(Login_Params.ErrorMessage));

	return Login_Params.ReturnValue;
};

// Function Engine.GameInfo.SpawnPlayerController
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[26114])
// Parameter Info:
// class APlayerController*       ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FVector                 SpawnLocation                  (CPF_Parm)
// struct FRotator                SpawnRotation                  (CPF_Parm)

class APlayerController* AGameInfo::SpawnPlayerController(const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation)
{
	static UFunction* uFnSpawnPlayerController = nullptr;

	if (!uFnSpawnPlayerController)
	{
		uFnSpawnPlayerController = UFunction::FindFunction("Function Engine.GameInfo.SpawnPlayerController");
	}

	AGameInfo_execSpawnPlayerController_Params SpawnPlayerController_Params;
	memset(&SpawnPlayerController_Params, 0, sizeof(SpawnPlayerController_Params));
	memcpy_s(&SpawnPlayerController_Params.SpawnLocation, sizeof(SpawnPlayerController_Params.SpawnLocation), &SpawnLocation, sizeof(SpawnLocation));
	memcpy_s(&SpawnPlayerController_Params.SpawnRotation, sizeof(SpawnPlayerController_Params.SpawnRotation), &SpawnRotation, sizeof(SpawnRotation));

	uFnSpawnPlayerController->iNative = 0;
	uFnSpawnPlayerController->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSpawnPlayerController, &SpawnPlayerController_Params, nullptr);
	uFnSpawnPlayerController->FunctionFlags |= 0x400;
	uFnSpawnPlayerController->iNative = 26114;

	return SpawnPlayerController_Params.ReturnValue;
};

// Function Engine.GameInfo.GetNextPlayerID
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20650])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t AGameInfo::GetNextPlayerID()
{
	static UFunction* uFnGetNextPlayerID = nullptr;

	if (!uFnGetNextPlayerID)
	{
		uFnGetNextPlayerID = UFunction::FindFunction("Function Engine.GameInfo.GetNextPlayerID");
	}

	AGameInfo_execGetNextPlayerID_Params GetNextPlayerID_Params;
	memset(&GetNextPlayerID_Params, 0, sizeof(GetNextPlayerID_Params));

	uFnGetNextPlayerID->iNative = 0;
	uFnGetNextPlayerID->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetNextPlayerID, &GetNextPlayerID_Params, nullptr);
	uFnGetNextPlayerID->FunctionFlags |= 0x400;
	uFnGetNextPlayerID->iNative = 20650;

	return GetNextPlayerID_Params.ReturnValue;
};

// Function Engine.GameInfo.AtCapacity
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       bSpectator                     (CPF_Parm)

bool AGameInfo::AtCapacity(bool bSpectator)
{
	static UFunction* uFnAtCapacity = nullptr;

	if (!uFnAtCapacity)
	{
		uFnAtCapacity = UFunction::FindFunction("Function Engine.GameInfo.AtCapacity");
	}

	AGameInfo_execAtCapacity_Params AtCapacity_Params;
	memset(&AtCapacity_Params, 0, sizeof(AtCapacity_Params));
	AtCapacity_Params.bSpectator = bSpectator;

	this->ProcessEvent(uFnAtCapacity, &AtCapacity_Params, nullptr);

	return AtCapacity_Params.ReturnValue;
};

// Function Engine.GameInfo.ProcessClientTravel
// [0x00420002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// class APlayerController*       ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FGuid                   NextMapGuid                    (CPF_Parm)
// uint32_t                       bSeamless                      (CPF_Parm)
// uint32_t                       bAbsolute                      (CPF_Parm)
// class FString                  URL                            (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

class APlayerController* AGameInfo::ProcessClientTravel(const struct FGuid& NextMapGuid, bool bSeamless, bool bAbsolute, class FString& URL)
{
	static UFunction* uFnProcessClientTravel = nullptr;

	if (!uFnProcessClientTravel)
	{
		uFnProcessClientTravel = UFunction::FindFunction("Function Engine.GameInfo.ProcessClientTravel");
	}

	AGameInfo_execProcessClientTravel_Params ProcessClientTravel_Params;
	memset(&ProcessClientTravel_Params, 0, sizeof(ProcessClientTravel_Params));
	memcpy_s(&ProcessClientTravel_Params.NextMapGuid, sizeof(ProcessClientTravel_Params.NextMapGuid), &NextMapGuid, sizeof(NextMapGuid));
	ProcessClientTravel_Params.bSeamless = bSeamless;
	ProcessClientTravel_Params.bAbsolute = bAbsolute;
	memcpy_s(&ProcessClientTravel_Params.URL, sizeof(ProcessClientTravel_Params.URL), &URL, sizeof(URL));

	this->ProcessEvent(uFnProcessClientTravel, &ProcessClientTravel_Params, nullptr);

	memcpy_s(&URL, sizeof(URL), &ProcessClientTravel_Params.URL, sizeof(ProcessClientTravel_Params.URL));

	return ProcessClientTravel_Params.ReturnValue;
};

// Function Engine.GameInfo.ProcessServerTravel
// [0x00824002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// class FString                  URL                            (CPF_Parm | CPF_NeedCtorLink)
// uint32_t                       bAbsolute                      (CPF_OptionalParm | CPF_Parm)

void AGameInfo::ProcessServerTravel(const class FString& URL, bool bAbsolute)
{
	static UFunction* uFnProcessServerTravel = nullptr;

	if (!uFnProcessServerTravel)
	{
		uFnProcessServerTravel = UFunction::FindFunction("Function Engine.GameInfo.ProcessServerTravel");
	}

	AGameInfo_execProcessServerTravel_Params ProcessServerTravel_Params;
	memset(&ProcessServerTravel_Params, 0, sizeof(ProcessServerTravel_Params));
	memcpy_s(&ProcessServerTravel_Params.URL, sizeof(ProcessServerTravel_Params.URL), &URL, sizeof(URL));
	ProcessServerTravel_Params.bAbsolute = bAbsolute;

	this->ProcessEvent(uFnProcessServerTravel, &ProcessServerTravel_Params, nullptr);
};

// Function Engine.GameInfo.RemoveMutator
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AMutator*                MutatorToRemove                (CPF_Parm)

void AGameInfo::RemoveMutator(class AMutator* MutatorToRemove)
{
	static UFunction* uFnRemoveMutator = nullptr;

	if (!uFnRemoveMutator)
	{
		uFnRemoveMutator = UFunction::FindFunction("Function Engine.GameInfo.RemoveMutator");
	}

	AGameInfo_execRemoveMutator_Params RemoveMutator_Params;
	memset(&RemoveMutator_Params, 0, sizeof(RemoveMutator_Params));
	RemoveMutator_Params.MutatorToRemove = MutatorToRemove;

	this->ProcessEvent(uFnRemoveMutator, &RemoveMutator_Params, nullptr);
};

// Function Engine.GameInfo.AddMutator
// [0x00024002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  mutname                        (CPF_Parm | CPF_NeedCtorLink)
// uint32_t                       bUserAdded                     (CPF_OptionalParm | CPF_Parm)

void AGameInfo::AddMutator(const class FString& mutname, bool bUserAdded)
{
	static UFunction* uFnAddMutator = nullptr;

	if (!uFnAddMutator)
	{
		uFnAddMutator = UFunction::FindFunction("Function Engine.GameInfo.AddMutator");
	}

	AGameInfo_execAddMutator_Params AddMutator_Params;
	memset(&AddMutator_Params, 0, sizeof(AddMutator_Params));
	memcpy_s(&AddMutator_Params.mutname, sizeof(AddMutator_Params.mutname), &mutname, sizeof(mutname));
	AddMutator_Params.bUserAdded = bUserAdded;

	this->ProcessEvent(uFnAddMutator, &AddMutator_Params, nullptr);
};

// Function Engine.GameInfo.NotifyPendingConnectionLost
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AGameInfo::eventNotifyPendingConnectionLost()
{
	static UFunction* uFnNotifyPendingConnectionLost = nullptr;

	if (!uFnNotifyPendingConnectionLost)
	{
		uFnNotifyPendingConnectionLost = UFunction::FindFunction("Function Engine.GameInfo.NotifyPendingConnectionLost");
	}

	AGameInfo_eventNotifyPendingConnectionLost_Params NotifyPendingConnectionLost_Params;
	memset(&NotifyPendingConnectionLost_Params, 0, sizeof(NotifyPendingConnectionLost_Params));

	this->ProcessEvent(uFnNotifyPendingConnectionLost, &NotifyPendingConnectionLost_Params, nullptr);
};

// Function Engine.GameInfo.InitGame
// [0x00420802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// class FString                  Options                        (CPF_Parm | CPF_NeedCtorLink)
// class FString                  ErrorMessage                   (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void AGameInfo::eventInitGame(const class FString& Options, class FString& ErrorMessage)
{
	static UFunction* uFnInitGame = nullptr;

	if (!uFnInitGame)
	{
		uFnInitGame = UFunction::FindFunction("Function Engine.GameInfo.InitGame");
	}

	AGameInfo_eventInitGame_Params InitGame_Params;
	memset(&InitGame_Params, 0, sizeof(InitGame_Params));
	memcpy_s(&InitGame_Params.Options, sizeof(InitGame_Params.Options), &Options, sizeof(Options));
	memcpy_s(&InitGame_Params.ErrorMessage, sizeof(InitGame_Params.ErrorMessage), &ErrorMessage, sizeof(ErrorMessage));

	this->ProcessEvent(uFnInitGame, &InitGame_Params, nullptr);

	memcpy_s(&ErrorMessage, sizeof(ErrorMessage), &InitGame_Params.ErrorMessage, sizeof(InitGame_Params.ErrorMessage));
};

// Function Engine.GameInfo.SetGameType
// [0x00022802] (FUNC_Defined | FUNC_Event | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AGameInfo*               ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FString                  MapName                        (CPF_Parm | CPF_NeedCtorLink)
// class FString                  Options                        (CPF_Parm | CPF_NeedCtorLink)
// class FString                  Portal                         (CPF_Parm | CPF_NeedCtorLink)

class AGameInfo* AGameInfo::eventSetGameType(const class FString& MapName, const class FString& Options, const class FString& Portal)
{
	static UFunction* uFnSetGameType = nullptr;

	if (!uFnSetGameType)
	{
		uFnSetGameType = UFunction::FindFunction("Function Engine.GameInfo.SetGameType");
	}

	AGameInfo_eventSetGameType_Params SetGameType_Params;
	memset(&SetGameType_Params, 0, sizeof(SetGameType_Params));
	memcpy_s(&SetGameType_Params.MapName, sizeof(SetGameType_Params.MapName), &MapName, sizeof(MapName));
	memcpy_s(&SetGameType_Params.Options, sizeof(SetGameType_Params.Options), &Options, sizeof(Options));
	memcpy_s(&SetGameType_Params.Portal, sizeof(SetGameType_Params.Portal), &Portal, sizeof(Portal));

	AGameInfo::StaticClass()->ProcessEvent(uFnSetGameType, &SetGameType_Params, nullptr);

	return SetGameType_Params.ReturnValue;
};

// Function Engine.GameInfo.GetDefaultGameClassPath
// [0x00022802] (FUNC_Defined | FUNC_Event | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)
// class FString                  MapName                        (CPF_Parm | CPF_NeedCtorLink)
// class FString                  Options                        (CPF_Parm | CPF_NeedCtorLink)
// class FString                  Portal                         (CPF_Parm | CPF_NeedCtorLink)

class FString AGameInfo::eventGetDefaultGameClassPath(const class FString& MapName, const class FString& Options, const class FString& Portal)
{
	static UFunction* uFnGetDefaultGameClassPath = nullptr;

	if (!uFnGetDefaultGameClassPath)
	{
		uFnGetDefaultGameClassPath = UFunction::FindFunction("Function Engine.GameInfo.GetDefaultGameClassPath");
	}

	AGameInfo_eventGetDefaultGameClassPath_Params GetDefaultGameClassPath_Params;
	memset(&GetDefaultGameClassPath_Params, 0, sizeof(GetDefaultGameClassPath_Params));
	memcpy_s(&GetDefaultGameClassPath_Params.MapName, sizeof(GetDefaultGameClassPath_Params.MapName), &MapName, sizeof(MapName));
	memcpy_s(&GetDefaultGameClassPath_Params.Options, sizeof(GetDefaultGameClassPath_Params.Options), &Options, sizeof(Options));
	memcpy_s(&GetDefaultGameClassPath_Params.Portal, sizeof(GetDefaultGameClassPath_Params.Portal), &Portal, sizeof(Portal));

	AGameInfo::StaticClass()->ProcessEvent(uFnGetDefaultGameClassPath, &GetDefaultGameClassPath_Params, nullptr);

	return GetDefaultGameClassPath_Params.ReturnValue;
};

// Function Engine.GameInfo.GetIntOption
// [0x00022002] (FUNC_Defined | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FString                  Options                        (CPF_Parm | CPF_NeedCtorLink)
// class FString                  ParseString                    (CPF_Parm | CPF_NeedCtorLink)
// int32_t                        CurrentValue                   (CPF_Parm)

int32_t AGameInfo::GetIntOption(const class FString& Options, const class FString& ParseString, int32_t CurrentValue)
{
	static UFunction* uFnGetIntOption = nullptr;

	if (!uFnGetIntOption)
	{
		uFnGetIntOption = UFunction::FindFunction("Function Engine.GameInfo.GetIntOption");
	}

	AGameInfo_execGetIntOption_Params GetIntOption_Params;
	memset(&GetIntOption_Params, 0, sizeof(GetIntOption_Params));
	memcpy_s(&GetIntOption_Params.Options, sizeof(GetIntOption_Params.Options), &Options, sizeof(Options));
	memcpy_s(&GetIntOption_Params.ParseString, sizeof(GetIntOption_Params.ParseString), &ParseString, sizeof(ParseString));
	memcpy_s(&GetIntOption_Params.CurrentValue, sizeof(GetIntOption_Params.CurrentValue), &CurrentValue, sizeof(CurrentValue));

	AGameInfo::StaticClass()->ProcessEvent(uFnGetIntOption, &GetIntOption_Params, nullptr);

	return GetIntOption_Params.ReturnValue;
};

// Function Engine.GameInfo.HasOption
// [0x00022002] (FUNC_Defined | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FString                  Options                        (CPF_Parm | CPF_NeedCtorLink)
// class FString                  InKey                          (CPF_Parm | CPF_NeedCtorLink)

bool AGameInfo::HasOption(const class FString& Options, const class FString& InKey)
{
	static UFunction* uFnHasOption = nullptr;

	if (!uFnHasOption)
	{
		uFnHasOption = UFunction::FindFunction("Function Engine.GameInfo.HasOption");
	}

	AGameInfo_execHasOption_Params HasOption_Params;
	memset(&HasOption_Params, 0, sizeof(HasOption_Params));
	memcpy_s(&HasOption_Params.Options, sizeof(HasOption_Params.Options), &Options, sizeof(Options));
	memcpy_s(&HasOption_Params.InKey, sizeof(HasOption_Params.InKey), &InKey, sizeof(InKey));

	AGameInfo::StaticClass()->ProcessEvent(uFnHasOption, &HasOption_Params, nullptr);

	return HasOption_Params.ReturnValue;
};

// Function Engine.GameInfo.ParseOption
// [0x00022002] (FUNC_Defined | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)
// class FString                  Options                        (CPF_Parm | CPF_NeedCtorLink)
// class FString                  InKey                          (CPF_Parm | CPF_NeedCtorLink)

class FString AGameInfo::ParseOption(const class FString& Options, const class FString& InKey)
{
	static UFunction* uFnParseOption = nullptr;

	if (!uFnParseOption)
	{
		uFnParseOption = UFunction::FindFunction("Function Engine.GameInfo.ParseOption");
	}

	AGameInfo_execParseOption_Params ParseOption_Params;
	memset(&ParseOption_Params, 0, sizeof(ParseOption_Params));
	memcpy_s(&ParseOption_Params.Options, sizeof(ParseOption_Params.Options), &Options, sizeof(Options));
	memcpy_s(&ParseOption_Params.InKey, sizeof(ParseOption_Params.InKey), &InKey, sizeof(InKey));

	AGameInfo::StaticClass()->ProcessEvent(uFnParseOption, &ParseOption_Params, nullptr);

	return ParseOption_Params.ReturnValue;
};

// Function Engine.GameInfo.GetKeyValue
// [0x00422002] (FUNC_Defined | FUNC_Static | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// class FString                  Pair                           (CPF_Parm | CPF_NeedCtorLink)
// class FString                  Key                            (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)
// class FString                  Value                          (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void AGameInfo::GetKeyValue(const class FString& Pair, class FString& Key, class FString& Value)
{
	static UFunction* uFnGetKeyValue = nullptr;

	if (!uFnGetKeyValue)
	{
		uFnGetKeyValue = UFunction::FindFunction("Function Engine.GameInfo.GetKeyValue");
	}

	AGameInfo_execGetKeyValue_Params GetKeyValue_Params;
	memset(&GetKeyValue_Params, 0, sizeof(GetKeyValue_Params));
	memcpy_s(&GetKeyValue_Params.Pair, sizeof(GetKeyValue_Params.Pair), &Pair, sizeof(Pair));
	memcpy_s(&GetKeyValue_Params.Key, sizeof(GetKeyValue_Params.Key), &Key, sizeof(Key));
	memcpy_s(&GetKeyValue_Params.Value, sizeof(GetKeyValue_Params.Value), &Value, sizeof(Value));

	AGameInfo::StaticClass()->ProcessEvent(uFnGetKeyValue, &GetKeyValue_Params, nullptr);

	memcpy_s(&Key, sizeof(Key), &GetKeyValue_Params.Key, sizeof(GetKeyValue_Params.Key));
	memcpy_s(&Value, sizeof(Value), &GetKeyValue_Params.Value, sizeof(GetKeyValue_Params.Value));
};

// Function Engine.GameInfo.GrabOption
// [0x00422002] (FUNC_Defined | FUNC_Static | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FString                  Options                        (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)
// class FString                  Result                         (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

bool AGameInfo::GrabOption(class FString& Options, class FString& Result)
{
	static UFunction* uFnGrabOption = nullptr;

	if (!uFnGrabOption)
	{
		uFnGrabOption = UFunction::FindFunction("Function Engine.GameInfo.GrabOption");
	}

	AGameInfo_execGrabOption_Params GrabOption_Params;
	memset(&GrabOption_Params, 0, sizeof(GrabOption_Params));
	memcpy_s(&GrabOption_Params.Options, sizeof(GrabOption_Params.Options), &Options, sizeof(Options));
	memcpy_s(&GrabOption_Params.Result, sizeof(GrabOption_Params.Result), &Result, sizeof(Result));

	AGameInfo::StaticClass()->ProcessEvent(uFnGrabOption, &GrabOption_Params, nullptr);

	memcpy_s(&Options, sizeof(Options), &GrabOption_Params.Options, sizeof(GrabOption_Params.Options));
	memcpy_s(&Result, sizeof(Result), &GrabOption_Params.Result, sizeof(GrabOption_Params.Result));

	return GrabOption_Params.ReturnValue;
};

// Function Engine.GameInfo.SetGameSpeed
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          T                              (CPF_Parm)

void AGameInfo::SetGameSpeed(float T)
{
	static UFunction* uFnSetGameSpeed = nullptr;

	if (!uFnSetGameSpeed)
	{
		uFnSetGameSpeed = UFunction::FindFunction("Function Engine.GameInfo.SetGameSpeed");
	}

	AGameInfo_execSetGameSpeed_Params SetGameSpeed_Params;
	memset(&SetGameSpeed_Params, 0, sizeof(SetGameSpeed_Params));
	memcpy_s(&SetGameSpeed_Params.T, sizeof(SetGameSpeed_Params.T), &T, sizeof(T));

	this->ProcessEvent(uFnSetGameSpeed, &SetGameSpeed_Params, nullptr);
};

// Function Engine.GameInfo.DebugPause
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AGameInfo::DebugPause()
{
	static UFunction* uFnDebugPause = nullptr;

	if (!uFnDebugPause)
	{
		uFnDebugPause = UFunction::FindFunction("Function Engine.GameInfo.DebugPause");
	}

	AGameInfo_execDebugPause_Params DebugPause_Params;
	memset(&DebugPause_Params, 0, sizeof(DebugPause_Params));

	this->ProcessEvent(uFnDebugPause, &DebugPause_Params, nullptr);
};

// Function Engine.GameInfo.ForceClearUnpauseDelegates
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20256])
// Parameter Info:
// class AActor*                  PauseActor                     (CPF_Parm)

void AGameInfo::ForceClearUnpauseDelegates(class AActor* PauseActor)
{
	static UFunction* uFnForceClearUnpauseDelegates = nullptr;

	if (!uFnForceClearUnpauseDelegates)
	{
		uFnForceClearUnpauseDelegates = UFunction::FindFunction("Function Engine.GameInfo.ForceClearUnpauseDelegates");
	}

	AGameInfo_execForceClearUnpauseDelegates_Params ForceClearUnpauseDelegates_Params;
	memset(&ForceClearUnpauseDelegates_Params, 0, sizeof(ForceClearUnpauseDelegates_Params));
	ForceClearUnpauseDelegates_Params.PauseActor = PauseActor;

	uFnForceClearUnpauseDelegates->iNative = 0;
	uFnForceClearUnpauseDelegates->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnForceClearUnpauseDelegates, &ForceClearUnpauseDelegates_Params, nullptr);
	uFnForceClearUnpauseDelegates->FunctionFlags |= 0x400;
	uFnForceClearUnpauseDelegates->iNative = 20256;
};

// Function Engine.GameInfo.ClearPause
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AGameInfo::eventClearPause()
{
	static UFunction* uFnClearPause = nullptr;

	if (!uFnClearPause)
	{
		uFnClearPause = UFunction::FindFunction("Function Engine.GameInfo.ClearPause");
	}

	AGameInfo_eventClearPause_Params ClearPause_Params;
	memset(&ClearPause_Params, 0, sizeof(ClearPause_Params));

	this->ProcessEvent(uFnClearPause, &ClearPause_Params, nullptr);
};

// Function Engine.GameInfo.SetPause
// [0x00024002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class APlayerController*       PC                             (CPF_Parm)
// struct FScriptDelegate         CanUnpauseDelegate             (CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink)

bool AGameInfo::SetPause(class APlayerController* PC, const struct FScriptDelegate& CanUnpauseDelegate)
{
	static UFunction* uFnSetPause = nullptr;

	if (!uFnSetPause)
	{
		uFnSetPause = UFunction::FindFunction("Function Engine.GameInfo.SetPause");
	}

	AGameInfo_execSetPause_Params SetPause_Params;
	memset(&SetPause_Params, 0, sizeof(SetPause_Params));
	SetPause_Params.PC = PC;
	memcpy_s(&SetPause_Params.CanUnpauseDelegate, sizeof(SetPause_Params.CanUnpauseDelegate), &CanUnpauseDelegate, sizeof(CanUnpauseDelegate));

	this->ProcessEvent(uFnSetPause, &SetPause_Params, nullptr);

	return SetPause_Params.ReturnValue;
};

// Function Engine.GameInfo.CanUnpause
// [0x00120002] (FUNC_Defined | FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AGameInfo::CanUnpause()
{
	static UFunction* uFnCanUnpause = nullptr;

	if (!uFnCanUnpause)
	{
		uFnCanUnpause = UFunction::FindFunction("Function Engine.GameInfo.CanUnpause");
	}

	AGameInfo_execCanUnpause_Params CanUnpause_Params;
	memset(&CanUnpause_Params, 0, sizeof(CanUnpause_Params));

	this->ProcessEvent(uFnCanUnpause, &CanUnpause_Params, nullptr);

	return CanUnpause_Params.ReturnValue;
};

// Function Engine.GameInfo.GetNumPlayers
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t AGameInfo::GetNumPlayers()
{
	static UFunction* uFnGetNumPlayers = nullptr;

	if (!uFnGetNumPlayers)
	{
		uFnGetNumPlayers = UFunction::FindFunction("Function Engine.GameInfo.GetNumPlayers");
	}

	AGameInfo_execGetNumPlayers_Params GetNumPlayers_Params;
	memset(&GetNumPlayers_Params, 0, sizeof(GetNumPlayers_Params));

	this->ProcessEvent(uFnGetNumPlayers, &GetNumPlayers_Params, nullptr);

	return GetNumPlayers_Params.ReturnValue;
};

// Function Engine.GameInfo.GetNetworkNumber
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20647])
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)

class FString AGameInfo::GetNetworkNumber()
{
	static UFunction* uFnGetNetworkNumber = nullptr;

	if (!uFnGetNetworkNumber)
	{
		uFnGetNetworkNumber = UFunction::FindFunction("Function Engine.GameInfo.GetNetworkNumber");
	}

	AGameInfo_execGetNetworkNumber_Params GetNetworkNumber_Params;
	memset(&GetNetworkNumber_Params, 0, sizeof(GetNetworkNumber_Params));

	uFnGetNetworkNumber->iNative = 0;
	uFnGetNetworkNumber->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetNetworkNumber, &GetNetworkNumber_Params, nullptr);
	uFnGetNetworkNumber->FunctionFlags |= 0x400;
	uFnGetNetworkNumber->iNative = 20647;

	return GetNetworkNumber_Params.ReturnValue;
};

// Function Engine.GameInfo.InitGameReplicationInfo
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AGameInfo::InitGameReplicationInfo()
{
	static UFunction* uFnInitGameReplicationInfo = nullptr;

	if (!uFnInitGameReplicationInfo)
	{
		uFnInitGameReplicationInfo = UFunction::FindFunction("Function Engine.GameInfo.InitGameReplicationInfo");
	}

	AGameInfo_execInitGameReplicationInfo_Params InitGameReplicationInfo_Params;
	memset(&InitGameReplicationInfo_Params, 0, sizeof(InitGameReplicationInfo_Params));

	this->ProcessEvent(uFnInitGameReplicationInfo, &InitGameReplicationInfo_Params, nullptr);
};

// Function Engine.GameInfo.GameEnding
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AGameInfo::eventGameEnding()
{
	static UFunction* uFnGameEnding = nullptr;

	if (!uFnGameEnding)
	{
		uFnGameEnding = UFunction::FindFunction("Function Engine.GameInfo.GameEnding");
	}

	AGameInfo_eventGameEnding_Params GameEnding_Params;
	memset(&GameEnding_Params, 0, sizeof(GameEnding_Params));

	this->ProcessEvent(uFnGameEnding, &GameEnding_Params, nullptr);
};

// Function Engine.GameInfo.NotifyNavigationChanged
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class ANavigationPoint*        N                              (CPF_Parm)

void AGameInfo::NotifyNavigationChanged(class ANavigationPoint* N)
{
	static UFunction* uFnNotifyNavigationChanged = nullptr;

	if (!uFnNotifyNavigationChanged)
	{
		uFnNotifyNavigationChanged = UFunction::FindFunction("Function Engine.GameInfo.NotifyNavigationChanged");
	}

	AGameInfo_execNotifyNavigationChanged_Params NotifyNavigationChanged_Params;
	memset(&NotifyNavigationChanged_Params, 0, sizeof(NotifyNavigationChanged_Params));
	NotifyNavigationChanged_Params.N = N;

	this->ProcessEvent(uFnNotifyNavigationChanged, &NotifyNavigationChanged_Params, nullptr);
};

// Function Engine.GameInfo.DoNavFearCostFallOff
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[19126])
// Parameter Info:

void AGameInfo::DoNavFearCostFallOff()
{
	static UFunction* uFnDoNavFearCostFallOff = nullptr;

	if (!uFnDoNavFearCostFallOff)
	{
		uFnDoNavFearCostFallOff = UFunction::FindFunction("Function Engine.GameInfo.DoNavFearCostFallOff");
	}

	AGameInfo_execDoNavFearCostFallOff_Params DoNavFearCostFallOff_Params;
	memset(&DoNavFearCostFallOff_Params, 0, sizeof(DoNavFearCostFallOff_Params));

	uFnDoNavFearCostFallOff->iNative = 0;
	uFnDoNavFearCostFallOff->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnDoNavFearCostFallOff, &DoNavFearCostFallOff_Params, nullptr);
	uFnDoNavFearCostFallOff->FunctionFlags |= 0x400;
	uFnDoNavFearCostFallOff->iNative = 19126;
};

// Function Engine.GameInfo.Timer
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AGameInfo::eventTimer()
{
	static UFunction* uFnTimer = nullptr;

	if (!uFnTimer)
	{
		uFnTimer = UFunction::FindFunction("Function Engine.GameInfo.Timer");
	}

	AGameInfo_eventTimer_Params Timer_Params;
	memset(&Timer_Params, 0, sizeof(Timer_Params));

	this->ProcessEvent(uFnTimer, &Timer_Params, nullptr);
};

// Function Engine.GameInfo.ResetLevel
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AGameInfo::ResetLevel()
{
	static UFunction* uFnResetLevel = nullptr;

	if (!uFnResetLevel)
	{
		uFnResetLevel = UFunction::FindFunction("Function Engine.GameInfo.ResetLevel");
	}

	AGameInfo_execResetLevel_Params ResetLevel_Params;
	memset(&ResetLevel_Params, 0, sizeof(ResetLevel_Params));

	this->ProcessEvent(uFnResetLevel, &ResetLevel_Params, nullptr);
};

// Function Engine.GameInfo.ShouldReset
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class AActor*                  ActorToReset                   (CPF_Parm)

bool AGameInfo::ShouldReset(class AActor* ActorToReset)
{
	static UFunction* uFnShouldReset = nullptr;

	if (!uFnShouldReset)
	{
		uFnShouldReset = UFunction::FindFunction("Function Engine.GameInfo.ShouldReset");
	}

	AGameInfo_execShouldReset_Params ShouldReset_Params;
	memset(&ShouldReset_Params, 0, sizeof(ShouldReset_Params));
	ShouldReset_Params.ActorToReset = ActorToReset;

	this->ProcessEvent(uFnShouldReset, &ShouldReset_Params, nullptr);

	return ShouldReset_Params.ReturnValue;
};

// Function Engine.GameInfo.Reset
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AGameInfo::Reset()
{
	static UFunction* uFnReset = nullptr;

	if (!uFnReset)
	{
		uFnReset = UFunction::FindFunction("Function Engine.GameInfo.Reset");
	}

	AGameInfo_execReset_Params Reset_Params;
	memset(&Reset_Params, 0, sizeof(Reset_Params));

	this->ProcessEvent(uFnReset, &Reset_Params, nullptr);
};

// Function Engine.GameInfo.DisplayDebug
// [0x00420102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// class AHUD*                    HUD                            (CPF_Parm)
// float                          out_YL                         (CPF_Parm | CPF_OutParm)
// float                          out_YPos                       (CPF_Parm | CPF_OutParm)

void AGameInfo::DisplayDebug(class AHUD* HUD, float& out_YL, float& out_YPos)
{
	static UFunction* uFnDisplayDebug = nullptr;

	if (!uFnDisplayDebug)
	{
		uFnDisplayDebug = UFunction::FindFunction("Function Engine.GameInfo.DisplayDebug");
	}

	AGameInfo_execDisplayDebug_Params DisplayDebug_Params;
	memset(&DisplayDebug_Params, 0, sizeof(DisplayDebug_Params));
	DisplayDebug_Params.HUD = HUD;
	memcpy_s(&DisplayDebug_Params.out_YL, sizeof(DisplayDebug_Params.out_YL), &out_YL, sizeof(out_YL));
	memcpy_s(&DisplayDebug_Params.out_YPos, sizeof(DisplayDebug_Params.out_YPos), &out_YPos, sizeof(out_YPos));

	this->ProcessEvent(uFnDisplayDebug, &DisplayDebug_Params, nullptr);

	memcpy_s(&out_YL, sizeof(out_YL), &DisplayDebug_Params.out_YL, sizeof(DisplayDebug_Params.out_YL));
	memcpy_s(&out_YPos, sizeof(out_YPos), &DisplayDebug_Params.out_YPos, sizeof(DisplayDebug_Params.out_YPos));
};

// Function Engine.GameInfo.PostBeginPlay
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AGameInfo::eventPostBeginPlay()
{
	static UFunction* uFnPostBeginPlay = nullptr;

	if (!uFnPostBeginPlay)
	{
		uFnPostBeginPlay = UFunction::FindFunction("Function Engine.GameInfo.PostBeginPlay");
	}

	AGameInfo_eventPostBeginPlay_Params PostBeginPlay_Params;
	memset(&PostBeginPlay_Params, 0, sizeof(PostBeginPlay_Params));

	this->ProcessEvent(uFnPostBeginPlay, &PostBeginPlay_Params, nullptr);
};

// Function Engine.GameInfo.UseLowGore
// [0x00022002] (FUNC_Defined | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class AWorldInfo*              WI                             (CPF_Parm)

bool AGameInfo::UseLowGore(class AWorldInfo* WI)
{
	static UFunction* uFnUseLowGore = nullptr;

	if (!uFnUseLowGore)
	{
		uFnUseLowGore = UFunction::FindFunction("Function Engine.GameInfo.UseLowGore");
	}

	AGameInfo_execUseLowGore_Params UseLowGore_Params;
	memset(&UseLowGore_Params, 0, sizeof(UseLowGore_Params));
	UseLowGore_Params.WI = WI;

	AGameInfo::StaticClass()->ProcessEvent(uFnUseLowGore, &UseLowGore_Params, nullptr);

	return UseLowGore_Params.ReturnValue;
};

// Function Engine.GameInfo.PreBeginPlay
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AGameInfo::eventPreBeginPlay()
{
	static UFunction* uFnPreBeginPlay = nullptr;

	if (!uFnPreBeginPlay)
	{
		uFnPreBeginPlay = UFunction::FindFunction("Function Engine.GameInfo.PreBeginPlay");
	}

	AGameInfo_eventPreBeginPlay_Params PreBeginPlay_Params;
	memset(&PreBeginPlay_Params, 0, sizeof(PreBeginPlay_Params));

	this->ProcessEvent(uFnPreBeginPlay, &PreBeginPlay_Params, nullptr);
};

// Function Engine.GameInfo.GetMapCommonPackageName
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20633])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FString                  InFilename                     (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)
// class FString                  OutCommonPackageName           (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

bool AGameInfo::GetMapCommonPackageName(class FString& InFilename, class FString& OutCommonPackageName)
{
	static UFunction* uFnGetMapCommonPackageName = nullptr;

	if (!uFnGetMapCommonPackageName)
	{
		uFnGetMapCommonPackageName = UFunction::FindFunction("Function Engine.GameInfo.GetMapCommonPackageName");
	}

	AGameInfo_execGetMapCommonPackageName_Params GetMapCommonPackageName_Params;
	memset(&GetMapCommonPackageName_Params, 0, sizeof(GetMapCommonPackageName_Params));
	memcpy_s(&GetMapCommonPackageName_Params.InFilename, sizeof(GetMapCommonPackageName_Params.InFilename), &InFilename, sizeof(InFilename));
	memcpy_s(&GetMapCommonPackageName_Params.OutCommonPackageName, sizeof(GetMapCommonPackageName_Params.OutCommonPackageName), &OutCommonPackageName, sizeof(OutCommonPackageName));

	uFnGetMapCommonPackageName->iNative = 0;
	uFnGetMapCommonPackageName->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetMapCommonPackageName, &GetMapCommonPackageName_Params, nullptr);
	uFnGetMapCommonPackageName->FunctionFlags |= 0x400;
	uFnGetMapCommonPackageName->iNative = 20633;

	memcpy_s(&InFilename, sizeof(InFilename), &GetMapCommonPackageName_Params.InFilename, sizeof(GetMapCommonPackageName_Params.InFilename));
	memcpy_s(&OutCommonPackageName, sizeof(OutCommonPackageName), &GetMapCommonPackageName_Params.OutCommonPackageName, sizeof(GetMapCommonPackageName_Params.OutCommonPackageName));

	return GetMapCommonPackageName_Params.ReturnValue;
};

// Function Engine.GameInfo.GetSupportedGameTypes
// [0x00424400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20776])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       bCheckExt                      (CPF_OptionalParm | CPF_Parm)
// class FString                  InFilename                     (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)
// struct FGameTypePrefix         OutGameType                    (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

bool AGameInfo::GetSupportedGameTypes(bool bCheckExt, class FString& InFilename, struct FGameTypePrefix& OutGameType)
{
	static UFunction* uFnGetSupportedGameTypes = nullptr;

	if (!uFnGetSupportedGameTypes)
	{
		uFnGetSupportedGameTypes = UFunction::FindFunction("Function Engine.GameInfo.GetSupportedGameTypes");
	}

	AGameInfo_execGetSupportedGameTypes_Params GetSupportedGameTypes_Params;
	memset(&GetSupportedGameTypes_Params, 0, sizeof(GetSupportedGameTypes_Params));
	GetSupportedGameTypes_Params.bCheckExt = bCheckExt;
	memcpy_s(&GetSupportedGameTypes_Params.InFilename, sizeof(GetSupportedGameTypes_Params.InFilename), &InFilename, sizeof(InFilename));
	memcpy_s(&GetSupportedGameTypes_Params.OutGameType, sizeof(GetSupportedGameTypes_Params.OutGameType), &OutGameType, sizeof(OutGameType));

	uFnGetSupportedGameTypes->iNative = 0;
	uFnGetSupportedGameTypes->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetSupportedGameTypes, &GetSupportedGameTypes_Params, nullptr);
	uFnGetSupportedGameTypes->FunctionFlags |= 0x400;
	uFnGetSupportedGameTypes->iNative = 20776;

	memcpy_s(&InFilename, sizeof(InFilename), &GetSupportedGameTypes_Params.InFilename, sizeof(GetSupportedGameTypes_Params.InFilename));
	memcpy_s(&OutGameType, sizeof(OutGameType), &GetSupportedGameTypes_Params.OutGameType, sizeof(GetSupportedGameTypes_Params.OutGameType));

	return GetSupportedGameTypes_Params.ReturnValue;
};

// Function Engine.Mutator.NetDamage
// [0x00420002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// int32_t                        OriginalDamage                 (CPF_Parm)
// class APawn*                   injured                        (CPF_Parm)
// class AController*             InstigatedBy                   (CPF_Parm)
// struct FVector                 HitLocation                    (CPF_Parm)
// class UDamageType*             DamageType                     (CPF_Parm)
// class AActor*                  DamageCauser                   (CPF_Parm)
// int32_t                        Damage                         (CPF_Parm | CPF_OutParm)
// struct FVector                 Momentum                       (CPF_Parm | CPF_OutParm)

void AMutator::NetDamage(int32_t OriginalDamage, class APawn* injured, class AController* InstigatedBy, const struct FVector& HitLocation, class UDamageType* DamageType, class AActor* DamageCauser, int32_t& Damage, struct FVector& Momentum)
{
	static UFunction* uFnNetDamage = nullptr;

	if (!uFnNetDamage)
	{
		uFnNetDamage = UFunction::FindFunction("Function Engine.Mutator.NetDamage");
	}

	AMutator_execNetDamage_Params NetDamage_Params;
	memset(&NetDamage_Params, 0, sizeof(NetDamage_Params));
	memcpy_s(&NetDamage_Params.OriginalDamage, sizeof(NetDamage_Params.OriginalDamage), &OriginalDamage, sizeof(OriginalDamage));
	NetDamage_Params.injured = injured;
	NetDamage_Params.InstigatedBy = InstigatedBy;
	memcpy_s(&NetDamage_Params.HitLocation, sizeof(NetDamage_Params.HitLocation), &HitLocation, sizeof(HitLocation));
	NetDamage_Params.DamageType = DamageType;
	NetDamage_Params.DamageCauser = DamageCauser;
	memcpy_s(&NetDamage_Params.Damage, sizeof(NetDamage_Params.Damage), &Damage, sizeof(Damage));
	memcpy_s(&NetDamage_Params.Momentum, sizeof(NetDamage_Params.Momentum), &Momentum, sizeof(Momentum));

	this->ProcessEvent(uFnNetDamage, &NetDamage_Params, nullptr);

	memcpy_s(&Damage, sizeof(Damage), &NetDamage_Params.Damage, sizeof(NetDamage_Params.Damage));
	memcpy_s(&Momentum, sizeof(Momentum), &NetDamage_Params.Momentum, sizeof(NetDamage_Params.Momentum));
};

// Function Engine.Mutator.ScoreKill
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AController*             Killer                         (CPF_Parm)
// class AController*             Killed                         (CPF_Parm)

void AMutator::ScoreKill(class AController* Killer, class AController* Killed)
{
	static UFunction* uFnScoreKill = nullptr;

	if (!uFnScoreKill)
	{
		uFnScoreKill = UFunction::FindFunction("Function Engine.Mutator.ScoreKill");
	}

	AMutator_execScoreKill_Params ScoreKill_Params;
	memset(&ScoreKill_Params, 0, sizeof(ScoreKill_Params));
	ScoreKill_Params.Killer = Killer;
	ScoreKill_Params.Killed = Killed;

	this->ProcessEvent(uFnScoreKill, &ScoreKill_Params, nullptr);
};

// Function Engine.Mutator.PreventDeath
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class APawn*                   Killed                         (CPF_Parm)
// class AController*             Killer                         (CPF_Parm)
// class UDamageType*             DamageType                     (CPF_Parm)
// struct FVector                 HitLocation                    (CPF_Parm)

bool AMutator::eventPreventDeath(class APawn* Killed, class AController* Killer, class UDamageType* DamageType, const struct FVector& HitLocation)
{
	static UFunction* uFnPreventDeath = nullptr;

	if (!uFnPreventDeath)
	{
		uFnPreventDeath = UFunction::FindFunction("Function Engine.Mutator.PreventDeath");
	}

	AMutator_eventPreventDeath_Params PreventDeath_Params;
	memset(&PreventDeath_Params, 0, sizeof(PreventDeath_Params));
	PreventDeath_Params.Killed = Killed;
	PreventDeath_Params.Killer = Killer;
	PreventDeath_Params.DamageType = DamageType;
	memcpy_s(&PreventDeath_Params.HitLocation, sizeof(PreventDeath_Params.HitLocation), &HitLocation, sizeof(HitLocation));

	this->ProcessEvent(uFnPreventDeath, &PreventDeath_Params, nullptr);

	return PreventDeath_Params.ReturnValue;
};

// Function Engine.Mutator.HandleRestartGame
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AMutator::HandleRestartGame()
{
	static UFunction* uFnHandleRestartGame = nullptr;

	if (!uFnHandleRestartGame)
	{
		uFnHandleRestartGame = UFunction::FindFunction("Function Engine.Mutator.HandleRestartGame");
	}

	AMutator_execHandleRestartGame_Params HandleRestartGame_Params;
	memset(&HandleRestartGame_Params, 0, sizeof(HandleRestartGame_Params));

	this->ProcessEvent(uFnHandleRestartGame, &HandleRestartGame_Params, nullptr);

	return HandleRestartGame_Params.ReturnValue;
};

// Function Engine.Mutator.FindPlayerStart
// [0x00024002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class ANavigationPoint*        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class AController*             Player                         (CPF_Parm)
// uint8_t                        InTeam                         (CPF_OptionalParm | CPF_Parm)
// class FString                  IncomingName                   (CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink)

class ANavigationPoint* AMutator::FindPlayerStart(class AController* Player, uint8_t InTeam, const class FString& IncomingName)
{
	static UFunction* uFnFindPlayerStart = nullptr;

	if (!uFnFindPlayerStart)
	{
		uFnFindPlayerStart = UFunction::FindFunction("Function Engine.Mutator.FindPlayerStart");
	}

	AMutator_execFindPlayerStart_Params FindPlayerStart_Params;
	memset(&FindPlayerStart_Params, 0, sizeof(FindPlayerStart_Params));
	FindPlayerStart_Params.Player = Player;
	memcpy_s(&FindPlayerStart_Params.InTeam, sizeof(FindPlayerStart_Params.InTeam), &InTeam, sizeof(InTeam));
	memcpy_s(&FindPlayerStart_Params.IncomingName, sizeof(FindPlayerStart_Params.IncomingName), &IncomingName, sizeof(IncomingName));

	this->ProcessEvent(uFnFindPlayerStart, &FindPlayerStart_Params, nullptr);

	return FindPlayerStart_Params.ReturnValue;
};

// Function Engine.Mutator.GetSeamlessTravelActorList
// [0x00420002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bToEntry                       (CPF_Parm)
// class TArray<class AActor*>    ActorList                      (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void AMutator::GetSeamlessTravelActorList(bool bToEntry, class TArray<class AActor*>& ActorList)
{
	static UFunction* uFnGetSeamlessTravelActorList = nullptr;

	if (!uFnGetSeamlessTravelActorList)
	{
		uFnGetSeamlessTravelActorList = UFunction::FindFunction("Function Engine.Mutator.GetSeamlessTravelActorList");
	}

	AMutator_execGetSeamlessTravelActorList_Params GetSeamlessTravelActorList_Params;
	memset(&GetSeamlessTravelActorList_Params, 0, sizeof(GetSeamlessTravelActorList_Params));
	GetSeamlessTravelActorList_Params.bToEntry = bToEntry;
	memcpy_s(&GetSeamlessTravelActorList_Params.ActorList, sizeof(GetSeamlessTravelActorList_Params.ActorList), &ActorList, sizeof(ActorList));

	this->ProcessEvent(uFnGetSeamlessTravelActorList, &GetSeamlessTravelActorList_Params, nullptr);

	memcpy_s(&ActorList, sizeof(ActorList), &GetSeamlessTravelActorList_Params.ActorList, sizeof(GetSeamlessTravelActorList_Params.ActorList));
};

// Function Engine.Mutator.InitMutator
// [0x00420002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// class FString                  Options                        (CPF_Parm | CPF_NeedCtorLink)
// class FString                  ErrorMessage                   (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void AMutator::InitMutator(const class FString& Options, class FString& ErrorMessage)
{
	static UFunction* uFnInitMutator = nullptr;

	if (!uFnInitMutator)
	{
		uFnInitMutator = UFunction::FindFunction("Function Engine.Mutator.InitMutator");
	}

	AMutator_execInitMutator_Params InitMutator_Params;
	memset(&InitMutator_Params, 0, sizeof(InitMutator_Params));
	memcpy_s(&InitMutator_Params.Options, sizeof(InitMutator_Params.Options), &Options, sizeof(Options));
	memcpy_s(&InitMutator_Params.ErrorMessage, sizeof(InitMutator_Params.ErrorMessage), &ErrorMessage, sizeof(ErrorMessage));

	this->ProcessEvent(uFnInitMutator, &InitMutator_Params, nullptr);

	memcpy_s(&ErrorMessage, sizeof(ErrorMessage), &InitMutator_Params.ErrorMessage, sizeof(InitMutator_Params.ErrorMessage));
};

// Function Engine.Mutator.NotifyLogin
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AController*             NewPlayer                      (CPF_Parm)

void AMutator::NotifyLogin(class AController* NewPlayer)
{
	static UFunction* uFnNotifyLogin = nullptr;

	if (!uFnNotifyLogin)
	{
		uFnNotifyLogin = UFunction::FindFunction("Function Engine.Mutator.NotifyLogin");
	}

	AMutator_execNotifyLogin_Params NotifyLogin_Params;
	memset(&NotifyLogin_Params, 0, sizeof(NotifyLogin_Params));
	NotifyLogin_Params.NewPlayer = NewPlayer;

	this->ProcessEvent(uFnNotifyLogin, &NotifyLogin_Params, nullptr);
};

// Function Engine.Mutator.NotifyLogout
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AController*             Exiting                        (CPF_Parm)

void AMutator::NotifyLogout(class AController* Exiting)
{
	static UFunction* uFnNotifyLogout = nullptr;

	if (!uFnNotifyLogout)
	{
		uFnNotifyLogout = UFunction::FindFunction("Function Engine.Mutator.NotifyLogout");
	}

	AMutator_execNotifyLogout_Params NotifyLogout_Params;
	memset(&NotifyLogout_Params, 0, sizeof(NotifyLogout_Params));
	NotifyLogout_Params.Exiting = Exiting;

	this->ProcessEvent(uFnNotifyLogout, &NotifyLogout_Params, nullptr);
};

// Function Engine.Mutator.CheckReplacement
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class AActor*                  Other                          (CPF_Parm)

bool AMutator::CheckReplacement(class AActor* Other)
{
	static UFunction* uFnCheckReplacement = nullptr;

	if (!uFnCheckReplacement)
	{
		uFnCheckReplacement = UFunction::FindFunction("Function Engine.Mutator.CheckReplacement");
	}

	AMutator_execCheckReplacement_Params CheckReplacement_Params;
	memset(&CheckReplacement_Params, 0, sizeof(CheckReplacement_Params));
	CheckReplacement_Params.Other = Other;

	this->ProcessEvent(uFnCheckReplacement, &CheckReplacement_Params, nullptr);

	return CheckReplacement_Params.ReturnValue;
};

// Function Engine.Mutator.CheckRelevance
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class AActor*                  Other                          (CPF_Parm)

bool AMutator::CheckRelevance(class AActor* Other)
{
	static UFunction* uFnCheckRelevance = nullptr;

	if (!uFnCheckRelevance)
	{
		uFnCheckRelevance = UFunction::FindFunction("Function Engine.Mutator.CheckRelevance");
	}

	AMutator_execCheckRelevance_Params CheckRelevance_Params;
	memset(&CheckRelevance_Params, 0, sizeof(CheckRelevance_Params));
	CheckRelevance_Params.Other = Other;

	this->ProcessEvent(uFnCheckRelevance, &CheckRelevance_Params, nullptr);

	return CheckRelevance_Params.ReturnValue;
};

// Function Engine.Mutator.IsRelevant
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class AActor*                  Other                          (CPF_Parm)

bool AMutator::IsRelevant(class AActor* Other)
{
	static UFunction* uFnIsRelevant = nullptr;

	if (!uFnIsRelevant)
	{
		uFnIsRelevant = UFunction::FindFunction("Function Engine.Mutator.IsRelevant");
	}

	AMutator_execIsRelevant_Params IsRelevant_Params;
	memset(&IsRelevant_Params, 0, sizeof(IsRelevant_Params));
	IsRelevant_Params.Other = Other;

	this->ProcessEvent(uFnIsRelevant, &IsRelevant_Params, nullptr);

	return IsRelevant_Params.ReturnValue;
};

// Function Engine.Mutator.AlwaysKeep
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class AActor*                  Other                          (CPF_Parm)

bool AMutator::AlwaysKeep(class AActor* Other)
{
	static UFunction* uFnAlwaysKeep = nullptr;

	if (!uFnAlwaysKeep)
	{
		uFnAlwaysKeep = UFunction::FindFunction("Function Engine.Mutator.AlwaysKeep");
	}

	AMutator_execAlwaysKeep_Params AlwaysKeep_Params;
	memset(&AlwaysKeep_Params, 0, sizeof(AlwaysKeep_Params));
	AlwaysKeep_Params.Other = Other;

	this->ProcessEvent(uFnAlwaysKeep, &AlwaysKeep_Params, nullptr);

	return AlwaysKeep_Params.ReturnValue;
};

// Function Engine.Mutator.AddMutator
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AMutator*                M                              (CPF_Parm)

void AMutator::AddMutator(class AMutator* M)
{
	static UFunction* uFnAddMutator = nullptr;

	if (!uFnAddMutator)
	{
		uFnAddMutator = UFunction::FindFunction("Function Engine.Mutator.AddMutator");
	}

	AMutator_execAddMutator_Params AddMutator_Params;
	memset(&AddMutator_Params, 0, sizeof(AddMutator_Params));
	AddMutator_Params.M = M;

	this->ProcessEvent(uFnAddMutator, &AddMutator_Params, nullptr);
};

// Function Engine.Mutator.ModifyPlayer
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class APawn*                   Other                          (CPF_Parm)

void AMutator::ModifyPlayer(class APawn* Other)
{
	static UFunction* uFnModifyPlayer = nullptr;

	if (!uFnModifyPlayer)
	{
		uFnModifyPlayer = UFunction::FindFunction("Function Engine.Mutator.ModifyPlayer");
	}

	AMutator_execModifyPlayer_Params ModifyPlayer_Params;
	memset(&ModifyPlayer_Params, 0, sizeof(ModifyPlayer_Params));
	ModifyPlayer_Params.Other = Other;

	this->ProcessEvent(uFnModifyPlayer, &ModifyPlayer_Params, nullptr);
};

// Function Engine.Mutator.ModifyLogin
// [0x00420002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// class FString                  Portal                         (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)
// class FString                  Options                        (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void AMutator::ModifyLogin(class FString& Portal, class FString& Options)
{
	static UFunction* uFnModifyLogin = nullptr;

	if (!uFnModifyLogin)
	{
		uFnModifyLogin = UFunction::FindFunction("Function Engine.Mutator.ModifyLogin");
	}

	AMutator_execModifyLogin_Params ModifyLogin_Params;
	memset(&ModifyLogin_Params, 0, sizeof(ModifyLogin_Params));
	memcpy_s(&ModifyLogin_Params.Portal, sizeof(ModifyLogin_Params.Portal), &Portal, sizeof(Portal));
	memcpy_s(&ModifyLogin_Params.Options, sizeof(ModifyLogin_Params.Options), &Options, sizeof(Options));

	this->ProcessEvent(uFnModifyLogin, &ModifyLogin_Params, nullptr);

	memcpy_s(&Portal, sizeof(Portal), &ModifyLogin_Params.Portal, sizeof(ModifyLogin_Params.Portal));
	memcpy_s(&Options, sizeof(Options), &ModifyLogin_Params.Options, sizeof(ModifyLogin_Params.Options));
};

// Function Engine.Mutator.Mutate
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  MutateString                   (CPF_Parm | CPF_NeedCtorLink)
// class APlayerController*       Sender                         (CPF_Parm)

void AMutator::Mutate(const class FString& MutateString, class APlayerController* Sender)
{
	static UFunction* uFnMutate = nullptr;

	if (!uFnMutate)
	{
		uFnMutate = UFunction::FindFunction("Function Engine.Mutator.Mutate");
	}

	AMutator_execMutate_Params Mutate_Params;
	memset(&Mutate_Params, 0, sizeof(Mutate_Params));
	memcpy_s(&Mutate_Params.MutateString, sizeof(Mutate_Params.MutateString), &MutateString, sizeof(MutateString));
	Mutate_Params.Sender = Sender;

	this->ProcessEvent(uFnMutate, &Mutate_Params, nullptr);
};

// Function Engine.Mutator.Destroyed
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AMutator::eventDestroyed()
{
	static UFunction* uFnDestroyed = nullptr;

	if (!uFnDestroyed)
	{
		uFnDestroyed = UFunction::FindFunction("Function Engine.Mutator.Destroyed");
	}

	AMutator_eventDestroyed_Params Destroyed_Params;
	memset(&Destroyed_Params, 0, sizeof(Destroyed_Params));

	this->ProcessEvent(uFnDestroyed, &Destroyed_Params, nullptr);
};

// Function Engine.Mutator.MutatorIsAllowed
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AMutator::MutatorIsAllowed()
{
	static UFunction* uFnMutatorIsAllowed = nullptr;

	if (!uFnMutatorIsAllowed)
	{
		uFnMutatorIsAllowed = UFunction::FindFunction("Function Engine.Mutator.MutatorIsAllowed");
	}

	AMutator_execMutatorIsAllowed_Params MutatorIsAllowed_Params;
	memset(&MutatorIsAllowed_Params, 0, sizeof(MutatorIsAllowed_Params));

	this->ProcessEvent(uFnMutatorIsAllowed, &MutatorIsAllowed_Params, nullptr);

	return MutatorIsAllowed_Params.ReturnValue;
};

// Function Engine.Mutator.PreBeginPlay
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AMutator::eventPreBeginPlay()
{
	static UFunction* uFnPreBeginPlay = nullptr;

	if (!uFnPreBeginPlay)
	{
		uFnPreBeginPlay = UFunction::FindFunction("Function Engine.Mutator.PreBeginPlay");
	}

	AMutator_eventPreBeginPlay_Params PreBeginPlay_Params;
	memset(&PreBeginPlay_Params, 0, sizeof(PreBeginPlay_Params));

	this->ProcessEvent(uFnPreBeginPlay, &PreBeginPlay_Params, nullptr);
};

// Function Engine.Route.MoveOntoRoutePath
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[22995])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class APawn*                   P                              (CPF_Parm)
// ERouteDirection                RouteDirection                 (CPF_OptionalParm | CPF_Parm)
// float                          DistFudgeFactor                (CPF_OptionalParm | CPF_Parm)

int32_t ARoute::MoveOntoRoutePath(class APawn* P, ERouteDirection RouteDirection, float DistFudgeFactor)
{
	static UFunction* uFnMoveOntoRoutePath = nullptr;

	if (!uFnMoveOntoRoutePath)
	{
		uFnMoveOntoRoutePath = UFunction::FindFunction("Function Engine.Route.MoveOntoRoutePath");
	}

	ARoute_execMoveOntoRoutePath_Params MoveOntoRoutePath_Params;
	memset(&MoveOntoRoutePath_Params, 0, sizeof(MoveOntoRoutePath_Params));
	MoveOntoRoutePath_Params.P = P;
	memcpy_s(&MoveOntoRoutePath_Params.RouteDirection, sizeof(MoveOntoRoutePath_Params.RouteDirection), &RouteDirection, sizeof(RouteDirection));
	memcpy_s(&MoveOntoRoutePath_Params.DistFudgeFactor, sizeof(MoveOntoRoutePath_Params.DistFudgeFactor), &DistFudgeFactor, sizeof(DistFudgeFactor));

	uFnMoveOntoRoutePath->iNative = 0;
	uFnMoveOntoRoutePath->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnMoveOntoRoutePath, &MoveOntoRoutePath_Params, nullptr);
	uFnMoveOntoRoutePath->FunctionFlags |= 0x400;
	uFnMoveOntoRoutePath->iNative = 22995;

	return MoveOntoRoutePath_Params.ReturnValue;
};

// Function Engine.Route.ResolveRouteIndex
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[25166])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        idx                            (CPF_Parm)
// ERouteDirection                RouteDirection                 (CPF_Parm)
// uint8_t                        out_bComplete                  (CPF_Parm | CPF_OutParm)
// uint8_t                        out_bReverse                   (CPF_Parm | CPF_OutParm)

int32_t ARoute::ResolveRouteIndex(int32_t idx, ERouteDirection RouteDirection, uint8_t& out_bComplete, uint8_t& out_bReverse)
{
	static UFunction* uFnResolveRouteIndex = nullptr;

	if (!uFnResolveRouteIndex)
	{
		uFnResolveRouteIndex = UFunction::FindFunction("Function Engine.Route.ResolveRouteIndex");
	}

	ARoute_execResolveRouteIndex_Params ResolveRouteIndex_Params;
	memset(&ResolveRouteIndex_Params, 0, sizeof(ResolveRouteIndex_Params));
	memcpy_s(&ResolveRouteIndex_Params.idx, sizeof(ResolveRouteIndex_Params.idx), &idx, sizeof(idx));
	memcpy_s(&ResolveRouteIndex_Params.RouteDirection, sizeof(ResolveRouteIndex_Params.RouteDirection), &RouteDirection, sizeof(RouteDirection));
	memcpy_s(&ResolveRouteIndex_Params.out_bComplete, sizeof(ResolveRouteIndex_Params.out_bComplete), &out_bComplete, sizeof(out_bComplete));
	memcpy_s(&ResolveRouteIndex_Params.out_bReverse, sizeof(ResolveRouteIndex_Params.out_bReverse), &out_bReverse, sizeof(out_bReverse));

	uFnResolveRouteIndex->iNative = 0;
	uFnResolveRouteIndex->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnResolveRouteIndex, &ResolveRouteIndex_Params, nullptr);
	uFnResolveRouteIndex->FunctionFlags |= 0x400;
	uFnResolveRouteIndex->iNative = 25166;

	memcpy_s(&out_bComplete, sizeof(out_bComplete), &ResolveRouteIndex_Params.out_bComplete, sizeof(ResolveRouteIndex_Params.out_bComplete));
	memcpy_s(&out_bReverse, sizeof(out_bReverse), &ResolveRouteIndex_Params.out_bReverse, sizeof(ResolveRouteIndex_Params.out_bReverse));

	return ResolveRouteIndex_Params.ReturnValue;
};

// Function Engine.WorldInfo.GetWorldInfo
// [0x00022401] (FUNC_Final | FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags) (iNative[20822])
// Parameter Info:
// class AWorldInfo*              ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class AWorldInfo* AWorldInfo::GetWorldInfo()
{
	static UFunction* uFnGetWorldInfo = nullptr;

	if (!uFnGetWorldInfo)
	{
		uFnGetWorldInfo = UFunction::FindFunction("Function Engine.WorldInfo.GetWorldInfo");
	}

	AWorldInfo_execGetWorldInfo_Params GetWorldInfo_Params;
	memset(&GetWorldInfo_Params, 0, sizeof(GetWorldInfo_Params));

	uFnGetWorldInfo->iNative = 0;
	uFnGetWorldInfo->FunctionFlags &= ~0x400;
	AWorldInfo::StaticClass()->ProcessEvent(uFnGetWorldInfo, &GetWorldInfo_Params, nullptr);
	uFnGetWorldInfo->FunctionFlags |= 0x400;
	uFnGetWorldInfo->iNative = 20822;

	return GetWorldInfo_Params.ReturnValue;
};

// Function Engine.WorldInfo.GetWorldFractureSettings
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20821])
// Parameter Info:
// struct FWorldFractureSettings  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

struct FWorldFractureSettings AWorldInfo::GetWorldFractureSettings()
{
	static UFunction* uFnGetWorldFractureSettings = nullptr;

	if (!uFnGetWorldFractureSettings)
	{
		uFnGetWorldFractureSettings = UFunction::FindFunction("Function Engine.WorldInfo.GetWorldFractureSettings");
	}

	AWorldInfo_execGetWorldFractureSettings_Params GetWorldFractureSettings_Params;
	memset(&GetWorldFractureSettings_Params, 0, sizeof(GetWorldFractureSettings_Params));

	uFnGetWorldFractureSettings->iNative = 0;
	uFnGetWorldFractureSettings->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetWorldFractureSettings, &GetWorldFractureSettings_Params, nullptr);
	uFnGetWorldFractureSettings->FunctionFlags |= 0x400;
	uFnGetWorldFractureSettings->iNative = 20821;

	return GetWorldFractureSettings_Params.ReturnValue;
};

// Function Engine.WorldInfo.DoMemoryTracking
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[19116])
// Parameter Info:

void AWorldInfo::DoMemoryTracking()
{
	static UFunction* uFnDoMemoryTracking = nullptr;

	if (!uFnDoMemoryTracking)
	{
		uFnDoMemoryTracking = UFunction::FindFunction("Function Engine.WorldInfo.DoMemoryTracking");
	}

	AWorldInfo_execDoMemoryTracking_Params DoMemoryTracking_Params;
	memset(&DoMemoryTracking_Params, 0, sizeof(DoMemoryTracking_Params));

	uFnDoMemoryTracking->iNative = 0;
	uFnDoMemoryTracking->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnDoMemoryTracking, &DoMemoryTracking_Params, nullptr);
	uFnDoMemoryTracking->FunctionFlags |= 0x400;
	uFnDoMemoryTracking->iNative = 19116;
};

// Function Engine.WorldInfo.GetDetailMode
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20565])
// Parameter Info:
// EDetailMode                    ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

EDetailMode AWorldInfo::GetDetailMode()
{
	static UFunction* uFnGetDetailMode = nullptr;

	if (!uFnGetDetailMode)
	{
		uFnGetDetailMode = UFunction::FindFunction("Function Engine.WorldInfo.GetDetailMode");
	}

	AWorldInfo_execGetDetailMode_Params GetDetailMode_Params;
	memset(&GetDetailMode_Params, 0, sizeof(GetDetailMode_Params));

	uFnGetDetailMode->iNative = 0;
	uFnGetDetailMode->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetDetailMode, &GetDetailMode_Params, nullptr);
	uFnGetDetailMode->FunctionFlags |= 0x400;
	uFnGetDetailMode->iNative = 20565;

	return static_cast<EDetailMode>(GetDetailMode_Params.ReturnValue);
};

// Function Engine.WorldInfo.GetMapName
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[20635])
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)
// uint32_t                       bIncludePrefix                 (CPF_OptionalParm | CPF_Parm)

class FString AWorldInfo::GetMapName(bool bIncludePrefix)
{
	static UFunction* uFnGetMapName = nullptr;

	if (!uFnGetMapName)
	{
		uFnGetMapName = UFunction::FindFunction("Function Engine.WorldInfo.GetMapName");
	}

	AWorldInfo_execGetMapName_Params GetMapName_Params;
	memset(&GetMapName_Params, 0, sizeof(GetMapName_Params));
	GetMapName_Params.bIncludePrefix = bIncludePrefix;

	uFnGetMapName->iNative = 0;
	uFnGetMapName->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetMapName, &GetMapName_Params, nullptr);
	uFnGetMapName->FunctionFlags |= 0x400;
	uFnGetMapName->iNative = 20635;

	return GetMapName_Params.ReturnValue;
};

// Function Engine.WorldInfo.SetMapInfo
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25707])
// Parameter Info:
// class UMapInfo*                NewMapInfo                     (CPF_Parm)

void AWorldInfo::SetMapInfo(class UMapInfo* NewMapInfo)
{
	static UFunction* uFnSetMapInfo = nullptr;

	if (!uFnSetMapInfo)
	{
		uFnSetMapInfo = UFunction::FindFunction("Function Engine.WorldInfo.SetMapInfo");
	}

	AWorldInfo_execSetMapInfo_Params SetMapInfo_Params;
	memset(&SetMapInfo_Params, 0, sizeof(SetMapInfo_Params));
	SetMapInfo_Params.NewMapInfo = NewMapInfo;

	uFnSetMapInfo->iNative = 0;
	uFnSetMapInfo->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetMapInfo, &SetMapInfo_Params, nullptr);
	uFnSetMapInfo->FunctionFlags |= 0x400;
	uFnSetMapInfo->iNative = 25707;
};

// Function Engine.WorldInfo.GetMapInfo
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20634])
// Parameter Info:
// class UMapInfo*                ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class UMapInfo* AWorldInfo::GetMapInfo()
{
	static UFunction* uFnGetMapInfo = nullptr;

	if (!uFnGetMapInfo)
	{
		uFnGetMapInfo = UFunction::FindFunction("Function Engine.WorldInfo.GetMapInfo");
	}

	AWorldInfo_execGetMapInfo_Params GetMapInfo_Params;
	memset(&GetMapInfo_Params, 0, sizeof(GetMapInfo_Params));

	uFnGetMapInfo->iNative = 0;
	uFnGetMapInfo->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetMapInfo, &GetMapInfo_Params, nullptr);
	uFnGetMapInfo->FunctionFlags |= 0x400;
	uFnGetMapInfo->iNative = 20634;

	return GetMapInfo_Params.ReturnValue;
};

// Function Engine.WorldInfo.SetSeamlessTravelMidpointPause
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25780])
// Parameter Info:
// uint32_t                       bNowPaused                     (CPF_Parm)

void AWorldInfo::SetSeamlessTravelMidpointPause(bool bNowPaused)
{
	static UFunction* uFnSetSeamlessTravelMidpointPause = nullptr;

	if (!uFnSetSeamlessTravelMidpointPause)
	{
		uFnSetSeamlessTravelMidpointPause = UFunction::FindFunction("Function Engine.WorldInfo.SetSeamlessTravelMidpointPause");
	}

	AWorldInfo_execSetSeamlessTravelMidpointPause_Params SetSeamlessTravelMidpointPause_Params;
	memset(&SetSeamlessTravelMidpointPause_Params, 0, sizeof(SetSeamlessTravelMidpointPause_Params));
	SetSeamlessTravelMidpointPause_Params.bNowPaused = bNowPaused;

	uFnSetSeamlessTravelMidpointPause->iNative = 0;
	uFnSetSeamlessTravelMidpointPause->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetSeamlessTravelMidpointPause, &SetSeamlessTravelMidpointPause_Params, nullptr);
	uFnSetSeamlessTravelMidpointPause->FunctionFlags |= 0x400;
	uFnSetSeamlessTravelMidpointPause->iNative = 25780;
};

// Function Engine.WorldInfo.IsInSeamlessTravel
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[21395])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AWorldInfo::IsInSeamlessTravel()
{
	static UFunction* uFnIsInSeamlessTravel = nullptr;

	if (!uFnIsInSeamlessTravel)
	{
		uFnIsInSeamlessTravel = UFunction::FindFunction("Function Engine.WorldInfo.IsInSeamlessTravel");
	}

	AWorldInfo_execIsInSeamlessTravel_Params IsInSeamlessTravel_Params;
	memset(&IsInSeamlessTravel_Params, 0, sizeof(IsInSeamlessTravel_Params));

	uFnIsInSeamlessTravel->iNative = 0;
	uFnIsInSeamlessTravel->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnIsInSeamlessTravel, &IsInSeamlessTravel_Params, nullptr);
	uFnIsInSeamlessTravel->FunctionFlags |= 0x400;
	uFnIsInSeamlessTravel->iNative = 21395;

	return IsInSeamlessTravel_Params.ReturnValue;
};

// Function Engine.WorldInfo.CommitMapChange
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[18292])
// Parameter Info:

void AWorldInfo::CommitMapChange()
{
	static UFunction* uFnCommitMapChange = nullptr;

	if (!uFnCommitMapChange)
	{
		uFnCommitMapChange = UFunction::FindFunction("Function Engine.WorldInfo.CommitMapChange");
	}

	AWorldInfo_execCommitMapChange_Params CommitMapChange_Params;
	memset(&CommitMapChange_Params, 0, sizeof(CommitMapChange_Params));

	uFnCommitMapChange->iNative = 0;
	uFnCommitMapChange->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnCommitMapChange, &CommitMapChange_Params, nullptr);
	uFnCommitMapChange->FunctionFlags |= 0x400;
	uFnCommitMapChange->iNative = 18292;
};

// Function Engine.WorldInfo.CancelPendingMapChange
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[17945])
// Parameter Info:

void AWorldInfo::CancelPendingMapChange()
{
	static UFunction* uFnCancelPendingMapChange = nullptr;

	if (!uFnCancelPendingMapChange)
	{
		uFnCancelPendingMapChange = UFunction::FindFunction("Function Engine.WorldInfo.CancelPendingMapChange");
	}

	AWorldInfo_execCancelPendingMapChange_Params CancelPendingMapChange_Params;
	memset(&CancelPendingMapChange_Params, 0, sizeof(CancelPendingMapChange_Params));

	uFnCancelPendingMapChange->iNative = 0;
	uFnCancelPendingMapChange->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnCancelPendingMapChange, &CancelPendingMapChange_Params, nullptr);
	uFnCancelPendingMapChange->FunctionFlags |= 0x400;
	uFnCancelPendingMapChange->iNative = 17945;
};

// Function Engine.WorldInfo.IsMapChangeReady
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[21403])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AWorldInfo::IsMapChangeReady()
{
	static UFunction* uFnIsMapChangeReady = nullptr;

	if (!uFnIsMapChangeReady)
	{
		uFnIsMapChangeReady = UFunction::FindFunction("Function Engine.WorldInfo.IsMapChangeReady");
	}

	AWorldInfo_execIsMapChangeReady_Params IsMapChangeReady_Params;
	memset(&IsMapChangeReady_Params, 0, sizeof(IsMapChangeReady_Params));

	uFnIsMapChangeReady->iNative = 0;
	uFnIsMapChangeReady->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnIsMapChangeReady, &IsMapChangeReady_Params, nullptr);
	uFnIsMapChangeReady->FunctionFlags |= 0x400;
	uFnIsMapChangeReady->iNative = 21403;

	return IsMapChangeReady_Params.ReturnValue;
};

// Function Engine.WorldInfo.IsPreparingMapChange
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[21417])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AWorldInfo::IsPreparingMapChange()
{
	static UFunction* uFnIsPreparingMapChange = nullptr;

	if (!uFnIsPreparingMapChange)
	{
		uFnIsPreparingMapChange = UFunction::FindFunction("Function Engine.WorldInfo.IsPreparingMapChange");
	}

	AWorldInfo_execIsPreparingMapChange_Params IsPreparingMapChange_Params;
	memset(&IsPreparingMapChange_Params, 0, sizeof(IsPreparingMapChange_Params));

	uFnIsPreparingMapChange->iNative = 0;
	uFnIsPreparingMapChange->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnIsPreparingMapChange, &IsPreparingMapChange_Params, nullptr);
	uFnIsPreparingMapChange->FunctionFlags |= 0x400;
	uFnIsPreparingMapChange->iNative = 21417;

	return IsPreparingMapChange_Params.ReturnValue;
};

// Function Engine.WorldInfo.PrepareMapChange
// [0x00420401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[24472])
// Parameter Info:
// class TArray<class FName>      LevelNames                     (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void AWorldInfo::PrepareMapChange(class TArray<class FName>& LevelNames)
{
	static UFunction* uFnPrepareMapChange = nullptr;

	if (!uFnPrepareMapChange)
	{
		uFnPrepareMapChange = UFunction::FindFunction("Function Engine.WorldInfo.PrepareMapChange");
	}

	AWorldInfo_execPrepareMapChange_Params PrepareMapChange_Params;
	memset(&PrepareMapChange_Params, 0, sizeof(PrepareMapChange_Params));
	memcpy_s(&PrepareMapChange_Params.LevelNames, sizeof(PrepareMapChange_Params.LevelNames), &LevelNames, sizeof(LevelNames));

	uFnPrepareMapChange->iNative = 0;
	uFnPrepareMapChange->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnPrepareMapChange, &PrepareMapChange_Params, nullptr);
	uFnPrepareMapChange->FunctionFlags |= 0x400;
	uFnPrepareMapChange->iNative = 24472;

	memcpy_s(&LevelNames, sizeof(LevelNames), &PrepareMapChange_Params.LevelNames, sizeof(PrepareMapChange_Params.LevelNames));
};

// Function Engine.WorldInfo.NotifyMatchStarted
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[23392])
// Parameter Info:
// uint32_t                       bShouldActivateLevelStartupEvents (CPF_OptionalParm | CPF_Parm)
// uint32_t                       bShouldActivateLevelBeginningEvents (CPF_OptionalParm | CPF_Parm)
// uint32_t                       bShouldActivateLevelLoadedEvents (CPF_OptionalParm | CPF_Parm)

void AWorldInfo::NotifyMatchStarted(bool bShouldActivateLevelStartupEvents, bool bShouldActivateLevelBeginningEvents, bool bShouldActivateLevelLoadedEvents)
{
	static UFunction* uFnNotifyMatchStarted = nullptr;

	if (!uFnNotifyMatchStarted)
	{
		uFnNotifyMatchStarted = UFunction::FindFunction("Function Engine.WorldInfo.NotifyMatchStarted");
	}

	AWorldInfo_execNotifyMatchStarted_Params NotifyMatchStarted_Params;
	memset(&NotifyMatchStarted_Params, 0, sizeof(NotifyMatchStarted_Params));
	NotifyMatchStarted_Params.bShouldActivateLevelStartupEvents = bShouldActivateLevelStartupEvents;
	NotifyMatchStarted_Params.bShouldActivateLevelBeginningEvents = bShouldActivateLevelBeginningEvents;
	NotifyMatchStarted_Params.bShouldActivateLevelLoadedEvents = bShouldActivateLevelLoadedEvents;

	uFnNotifyMatchStarted->iNative = 0;
	uFnNotifyMatchStarted->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnNotifyMatchStarted, &NotifyMatchStarted_Params, nullptr);
	uFnNotifyMatchStarted->FunctionFlags |= 0x400;
	uFnNotifyMatchStarted->iNative = 23392;
};

// Function Engine.WorldInfo.AllPawns
// [0x00424405] (FUNC_Final | FUNC_Iterator | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[15455])
// Parameter Info:
// class APawn*                   BaseClass                      (CPF_Parm)
// struct FVector                 TestLocation                   (CPF_OptionalParm | CPF_Parm)
// float                          TestRadius                     (CPF_OptionalParm | CPF_Parm)
// class APawn*                   P                              (CPF_Parm | CPF_OutParm)

void AWorldInfo::AllPawns(class APawn* BaseClass, const struct FVector& TestLocation, float TestRadius, class APawn*& P)
{
	static UFunction* uFnAllPawns = nullptr;

	if (!uFnAllPawns)
	{
		uFnAllPawns = UFunction::FindFunction("Function Engine.WorldInfo.AllPawns");
	}

	AWorldInfo_execAllPawns_Params AllPawns_Params;
	memset(&AllPawns_Params, 0, sizeof(AllPawns_Params));
	AllPawns_Params.BaseClass = BaseClass;
	memcpy_s(&AllPawns_Params.TestLocation, sizeof(AllPawns_Params.TestLocation), &TestLocation, sizeof(TestLocation));
	memcpy_s(&AllPawns_Params.TestRadius, sizeof(AllPawns_Params.TestRadius), &TestRadius, sizeof(TestRadius));
	AllPawns_Params.P = P;

	uFnAllPawns->iNative = 0;
	uFnAllPawns->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnAllPawns, &AllPawns_Params, nullptr);
	uFnAllPawns->FunctionFlags |= 0x400;
	uFnAllPawns->iNative = 15455;

	P = AllPawns_Params.P;
};

// Function Engine.WorldInfo.AllControllers
// [0x00420405] (FUNC_Final | FUNC_Iterator | FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[15437])
// Parameter Info:
// class AController*             BaseClass                      (CPF_Parm)
// class AController*             C                              (CPF_Parm | CPF_OutParm)

void AWorldInfo::AllControllers(class AController* BaseClass, class AController*& C)
{
	static UFunction* uFnAllControllers = nullptr;

	if (!uFnAllControllers)
	{
		uFnAllControllers = UFunction::FindFunction("Function Engine.WorldInfo.AllControllers");
	}

	AWorldInfo_execAllControllers_Params AllControllers_Params;
	memset(&AllControllers_Params, 0, sizeof(AllControllers_Params));
	AllControllers_Params.BaseClass = BaseClass;
	AllControllers_Params.C = C;

	uFnAllControllers->iNative = 0;
	uFnAllControllers->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnAllControllers, &AllControllers_Params, nullptr);
	uFnAllControllers->FunctionFlags |= 0x400;
	uFnAllControllers->iNative = 15437;

	C = AllControllers_Params.C;
};

// Function Engine.WorldInfo.RadiusNavigationPoints
// [0x00420405] (FUNC_Final | FUNC_Iterator | FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[24842])
// Parameter Info:
// class ANavigationPoint*        BaseClass                      (CPF_Parm)
// struct FVector                 Point                          (CPF_Parm)
// float                          Radius                         (CPF_Parm)
// class ANavigationPoint*        N                              (CPF_Parm | CPF_OutParm)

void AWorldInfo::RadiusNavigationPoints(class ANavigationPoint* BaseClass, const struct FVector& Point, float Radius, class ANavigationPoint*& N)
{
	static UFunction* uFnRadiusNavigationPoints = nullptr;

	if (!uFnRadiusNavigationPoints)
	{
		uFnRadiusNavigationPoints = UFunction::FindFunction("Function Engine.WorldInfo.RadiusNavigationPoints");
	}

	AWorldInfo_execRadiusNavigationPoints_Params RadiusNavigationPoints_Params;
	memset(&RadiusNavigationPoints_Params, 0, sizeof(RadiusNavigationPoints_Params));
	RadiusNavigationPoints_Params.BaseClass = BaseClass;
	memcpy_s(&RadiusNavigationPoints_Params.Point, sizeof(RadiusNavigationPoints_Params.Point), &Point, sizeof(Point));
	memcpy_s(&RadiusNavigationPoints_Params.Radius, sizeof(RadiusNavigationPoints_Params.Radius), &Radius, sizeof(Radius));
	RadiusNavigationPoints_Params.N = N;

	uFnRadiusNavigationPoints->iNative = 0;
	uFnRadiusNavigationPoints->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnRadiusNavigationPoints, &RadiusNavigationPoints_Params, nullptr);
	uFnRadiusNavigationPoints->FunctionFlags |= 0x400;
	uFnRadiusNavigationPoints->iNative = 24842;

	N = RadiusNavigationPoints_Params.N;
};

// Function Engine.WorldInfo.AllNavigationPoints
// [0x00420405] (FUNC_Final | FUNC_Iterator | FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[15439])
// Parameter Info:
// class ANavigationPoint*        BaseClass                      (CPF_Parm)
// class ANavigationPoint*        N                              (CPF_Parm | CPF_OutParm)

void AWorldInfo::AllNavigationPoints(class ANavigationPoint* BaseClass, class ANavigationPoint*& N)
{
	static UFunction* uFnAllNavigationPoints = nullptr;

	if (!uFnAllNavigationPoints)
	{
		uFnAllNavigationPoints = UFunction::FindFunction("Function Engine.WorldInfo.AllNavigationPoints");
	}

	AWorldInfo_execAllNavigationPoints_Params AllNavigationPoints_Params;
	memset(&AllNavigationPoints_Params, 0, sizeof(AllNavigationPoints_Params));
	AllNavigationPoints_Params.BaseClass = BaseClass;
	AllNavigationPoints_Params.N = N;

	uFnAllNavigationPoints->iNative = 0;
	uFnAllNavigationPoints->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnAllNavigationPoints, &AllNavigationPoints_Params, nullptr);
	uFnAllNavigationPoints->FunctionFlags |= 0x400;
	uFnAllNavigationPoints->iNative = 15439;

	N = AllNavigationPoints_Params.N;
};

// Function Engine.WorldInfo.Reset
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AWorldInfo::Reset()
{
	static UFunction* uFnReset = nullptr;

	if (!uFnReset)
	{
		uFnReset = UFunction::FindFunction("Function Engine.WorldInfo.Reset");
	}

	AWorldInfo_execReset_Params Reset_Params;
	memset(&Reset_Params, 0, sizeof(Reset_Params));

	this->ProcessEvent(uFnReset, &Reset_Params, nullptr);
};

// Function Engine.WorldInfo.PreBeginPlay
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AWorldInfo::PreBeginPlay()
{
	static UFunction* uFnPreBeginPlay = nullptr;

	if (!uFnPreBeginPlay)
	{
		uFnPreBeginPlay = UFunction::FindFunction("Function Engine.WorldInfo.PreBeginPlay");
	}

	AWorldInfo_execPreBeginPlay_Params PreBeginPlay_Params;
	memset(&PreBeginPlay_Params, 0, sizeof(PreBeginPlay_Params));

	this->ProcessEvent(uFnPreBeginPlay, &PreBeginPlay_Params, nullptr);
};

// Function Engine.WorldInfo.ThisIsNeverExecuted
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class ADefaultPhysicsVolume*   P                              (CPF_Parm)

void AWorldInfo::ThisIsNeverExecuted(class ADefaultPhysicsVolume* P)
{
	static UFunction* uFnThisIsNeverExecuted = nullptr;

	if (!uFnThisIsNeverExecuted)
	{
		uFnThisIsNeverExecuted = UFunction::FindFunction("Function Engine.WorldInfo.ThisIsNeverExecuted");
	}

	AWorldInfo_execThisIsNeverExecuted_Params ThisIsNeverExecuted_Params;
	memset(&ThisIsNeverExecuted_Params, 0, sizeof(ThisIsNeverExecuted_Params));
	ThisIsNeverExecuted_Params.P = P;

	this->ProcessEvent(uFnThisIsNeverExecuted, &ThisIsNeverExecuted_Params, nullptr);
};

// Function Engine.WorldInfo.ServerTravel
// [0x00024902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  URL                            (CPF_Parm | CPF_NeedCtorLink)
// uint32_t                       bAbsolute                      (CPF_OptionalParm | CPF_Parm)
// uint32_t                       bShouldSkipGameNotify          (CPF_OptionalParm | CPF_Parm)

void AWorldInfo::eventServerTravel(const class FString& URL, bool bAbsolute, bool bShouldSkipGameNotify)
{
	static UFunction* uFnServerTravel = nullptr;

	if (!uFnServerTravel)
	{
		uFnServerTravel = UFunction::FindFunction("Function Engine.WorldInfo.ServerTravel");
	}

	AWorldInfo_eventServerTravel_Params ServerTravel_Params;
	memset(&ServerTravel_Params, 0, sizeof(ServerTravel_Params));
	memcpy_s(&ServerTravel_Params.URL, sizeof(ServerTravel_Params.URL), &URL, sizeof(URL));
	ServerTravel_Params.bAbsolute = bAbsolute;
	ServerTravel_Params.bShouldSkipGameNotify = bShouldSkipGameNotify;

	this->ProcessEvent(uFnServerTravel, &ServerTravel_Params, nullptr);
};

// Function Engine.WorldInfo.GetGameClass
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AGameInfo*               ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class AGameInfo* AWorldInfo::GetGameClass()
{
	static UFunction* uFnGetGameClass = nullptr;

	if (!uFnGetGameClass)
	{
		uFnGetGameClass = UFunction::FindFunction("Function Engine.WorldInfo.GetGameClass");
	}

	AWorldInfo_execGetGameClass_Params GetGameClass_Params;
	memset(&GetGameClass_Params, 0, sizeof(GetGameClass_Params));

	this->ProcessEvent(uFnGetGameClass, &GetGameClass_Params, nullptr);

	return GetGameClass_Params.ReturnValue;
};

// Function Engine.WorldInfo.GetAddressURL
// [0x00020500] (FUNC_Simulated | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20484])
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)

class FString AWorldInfo::GetAddressURL()
{
	static UFunction* uFnGetAddressURL = nullptr;

	if (!uFnGetAddressURL)
	{
		uFnGetAddressURL = UFunction::FindFunction("Function Engine.WorldInfo.GetAddressURL");
	}

	AWorldInfo_execGetAddressURL_Params GetAddressURL_Params;
	memset(&GetAddressURL_Params, 0, sizeof(GetAddressURL_Params));

	uFnGetAddressURL->iNative = 0;
	uFnGetAddressURL->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetAddressURL, &GetAddressURL_Params, nullptr);
	uFnGetAddressURL->FunctionFlags |= 0x400;
	uFnGetAddressURL->iNative = 20484;

	return GetAddressURL_Params.ReturnValue;
};

// Function Engine.WorldInfo.VerifyNavList
// [0x00020501] (FUNC_Final | FUNC_Simulated | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[27106])
// Parameter Info:

void AWorldInfo::VerifyNavList()
{
	static UFunction* uFnVerifyNavList = nullptr;

	if (!uFnVerifyNavList)
	{
		uFnVerifyNavList = UFunction::FindFunction("Function Engine.WorldInfo.VerifyNavList");
	}

	AWorldInfo_execVerifyNavList_Params VerifyNavList_Params;
	memset(&VerifyNavList_Params, 0, sizeof(VerifyNavList_Params));

	uFnVerifyNavList->iNative = 0;
	uFnVerifyNavList->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnVerifyNavList, &VerifyNavList_Params, nullptr);
	uFnVerifyNavList->FunctionFlags |= 0x400;
	uFnVerifyNavList->iNative = 27106;
};

// Function Engine.WorldInfo.ForceGarbageCollection
// [0x00024501] (FUNC_Final | FUNC_Simulated | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[20268])
// Parameter Info:
// uint32_t                       bFullPurge                     (CPF_OptionalParm | CPF_Parm)

void AWorldInfo::ForceGarbageCollection(bool bFullPurge)
{
	static UFunction* uFnForceGarbageCollection = nullptr;

	if (!uFnForceGarbageCollection)
	{
		uFnForceGarbageCollection = UFunction::FindFunction("Function Engine.WorldInfo.ForceGarbageCollection");
	}

	AWorldInfo_execForceGarbageCollection_Params ForceGarbageCollection_Params;
	memset(&ForceGarbageCollection_Params, 0, sizeof(ForceGarbageCollection_Params));
	ForceGarbageCollection_Params.bFullPurge = bFullPurge;

	uFnForceGarbageCollection->iNative = 0;
	uFnForceGarbageCollection->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnForceGarbageCollection, &ForceGarbageCollection_Params, nullptr);
	uFnForceGarbageCollection->FunctionFlags |= 0x400;
	uFnForceGarbageCollection->iNative = 20268;
};

// Function Engine.WorldInfo.IsPlayInEditor
// [0x00022501] (FUNC_Final | FUNC_Simulated | FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags) (iNative[21415])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AWorldInfo::IsPlayInEditor()
{
	static UFunction* uFnIsPlayInEditor = nullptr;

	if (!uFnIsPlayInEditor)
	{
		uFnIsPlayInEditor = UFunction::FindFunction("Function Engine.WorldInfo.IsPlayInEditor");
	}

	AWorldInfo_execIsPlayInEditor_Params IsPlayInEditor_Params;
	memset(&IsPlayInEditor_Params, 0, sizeof(IsPlayInEditor_Params));

	uFnIsPlayInEditor->iNative = 0;
	uFnIsPlayInEditor->FunctionFlags &= ~0x400;
	AWorldInfo::StaticClass()->ProcessEvent(uFnIsPlayInEditor, &IsPlayInEditor_Params, nullptr);
	uFnIsPlayInEditor->FunctionFlags |= 0x400;
	uFnIsPlayInEditor->iNative = 21415;

	return IsPlayInEditor_Params.ReturnValue;
};

// Function Engine.WorldInfo.IsConsoleBuild
// [0x00026501] (FUNC_Final | FUNC_Simulated | FUNC_Native | FUNC_Static | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[21366])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EConsoleType                   ConsoleType                    (CPF_OptionalParm | CPF_Parm)

bool AWorldInfo::IsConsoleBuild(EConsoleType ConsoleType)
{
	static UFunction* uFnIsConsoleBuild = nullptr;

	if (!uFnIsConsoleBuild)
	{
		uFnIsConsoleBuild = UFunction::FindFunction("Function Engine.WorldInfo.IsConsoleBuild");
	}

	AWorldInfo_execIsConsoleBuild_Params IsConsoleBuild_Params;
	memset(&IsConsoleBuild_Params, 0, sizeof(IsConsoleBuild_Params));
	memcpy_s(&IsConsoleBuild_Params.ConsoleType, sizeof(IsConsoleBuild_Params.ConsoleType), &ConsoleType, sizeof(ConsoleType));

	uFnIsConsoleBuild->iNative = 0;
	uFnIsConsoleBuild->FunctionFlags &= ~0x400;
	AWorldInfo::StaticClass()->ProcessEvent(uFnIsConsoleBuild, &IsConsoleBuild_Params, nullptr);
	uFnIsConsoleBuild->FunctionFlags |= 0x400;
	uFnIsConsoleBuild->iNative = 21366;

	return IsConsoleBuild_Params.ReturnValue;
};

// Function Engine.WorldInfo.IsDemoBuild
// [0x00022501] (FUNC_Final | FUNC_Simulated | FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags) (iNative[21372])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AWorldInfo::IsDemoBuild()
{
	static UFunction* uFnIsDemoBuild = nullptr;

	if (!uFnIsDemoBuild)
	{
		uFnIsDemoBuild = UFunction::FindFunction("Function Engine.WorldInfo.IsDemoBuild");
	}

	AWorldInfo_execIsDemoBuild_Params IsDemoBuild_Params;
	memset(&IsDemoBuild_Params, 0, sizeof(IsDemoBuild_Params));

	uFnIsDemoBuild->iNative = 0;
	uFnIsDemoBuild->FunctionFlags &= ~0x400;
	AWorldInfo::StaticClass()->ProcessEvent(uFnIsDemoBuild, &IsDemoBuild_Params, nullptr);
	uFnIsDemoBuild->FunctionFlags |= 0x400;
	uFnIsDemoBuild->iNative = 21372;

	return IsDemoBuild_Params.ReturnValue;
};

// Function Engine.WorldInfo.GetLocalURL
// [0x00020500] (FUNC_Simulated | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20625])
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)

class FString AWorldInfo::GetLocalURL()
{
	static UFunction* uFnGetLocalURL = nullptr;

	if (!uFnGetLocalURL)
	{
		uFnGetLocalURL = UFunction::FindFunction("Function Engine.WorldInfo.GetLocalURL");
	}

	AWorldInfo_execGetLocalURL_Params GetLocalURL_Params;
	memset(&GetLocalURL_Params, 0, sizeof(GetLocalURL_Params));

	uFnGetLocalURL->iNative = 0;
	uFnGetLocalURL->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetLocalURL, &GetLocalURL_Params, nullptr);
	uFnGetLocalURL->FunctionFlags |= 0x400;
	uFnGetLocalURL->iNative = 20625;

	return GetLocalURL_Params.ReturnValue;
};

// Function Engine.WorldInfo.SetLevelRBGravity
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25690])
// Parameter Info:
// struct FVector                 NewGrav                        (CPF_Parm)

void AWorldInfo::SetLevelRBGravity(const struct FVector& NewGrav)
{
	static UFunction* uFnSetLevelRBGravity = nullptr;

	if (!uFnSetLevelRBGravity)
	{
		uFnSetLevelRBGravity = UFunction::FindFunction("Function Engine.WorldInfo.SetLevelRBGravity");
	}

	AWorldInfo_execSetLevelRBGravity_Params SetLevelRBGravity_Params;
	memset(&SetLevelRBGravity_Params, 0, sizeof(SetLevelRBGravity_Params));
	memcpy_s(&SetLevelRBGravity_Params.NewGrav, sizeof(SetLevelRBGravity_Params.NewGrav), &NewGrav, sizeof(NewGrav));

	uFnSetLevelRBGravity->iNative = 0;
	uFnSetLevelRBGravity->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetLevelRBGravity, &SetLevelRBGravity_Params, nullptr);
	uFnSetLevelRBGravity->FunctionFlags |= 0x400;
	uFnSetLevelRBGravity->iNative = 25690;
};

// Function Engine.WorldInfo.GetAllRootSequences
// [0x00020501] (FUNC_Final | FUNC_Simulated | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20494])
// Parameter Info:
// class TArray<class USequence*> ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)

class TArray<class USequence*> AWorldInfo::GetAllRootSequences()
{
	static UFunction* uFnGetAllRootSequences = nullptr;

	if (!uFnGetAllRootSequences)
	{
		uFnGetAllRootSequences = UFunction::FindFunction("Function Engine.WorldInfo.GetAllRootSequences");
	}

	AWorldInfo_execGetAllRootSequences_Params GetAllRootSequences_Params;
	memset(&GetAllRootSequences_Params, 0, sizeof(GetAllRootSequences_Params));

	uFnGetAllRootSequences->iNative = 0;
	uFnGetAllRootSequences->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetAllRootSequences, &GetAllRootSequences_Params, nullptr);
	uFnGetAllRootSequences->FunctionFlags |= 0x400;
	uFnGetAllRootSequences->iNative = 20494;

	return GetAllRootSequences_Params.ReturnValue;
};

// Function Engine.WorldInfo.GetGameSequence
// [0x00020501] (FUNC_Final | FUNC_Simulated | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20593])
// Parameter Info:
// class USequence*               ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class USequence* AWorldInfo::GetGameSequence()
{
	static UFunction* uFnGetGameSequence = nullptr;

	if (!uFnGetGameSequence)
	{
		uFnGetGameSequence = UFunction::FindFunction("Function Engine.WorldInfo.GetGameSequence");
	}

	AWorldInfo_execGetGameSequence_Params GetGameSequence_Params;
	memset(&GetGameSequence_Params, 0, sizeof(GetGameSequence_Params));

	uFnGetGameSequence->iNative = 0;
	uFnGetGameSequence->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetGameSequence, &GetGameSequence_Params, nullptr);
	uFnGetGameSequence->FunctionFlags |= 0x400;
	uFnGetGameSequence->iNative = 20593;

	return GetGameSequence_Params.ReturnValue;
};

// Function Engine.WorldInfo.GetGlobalGravityZ
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20594])
// Parameter Info:
// float                          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

float AWorldInfo::GetGlobalGravityZ()
{
	static UFunction* uFnGetGlobalGravityZ = nullptr;

	if (!uFnGetGlobalGravityZ)
	{
		uFnGetGlobalGravityZ = UFunction::FindFunction("Function Engine.WorldInfo.GetGlobalGravityZ");
	}

	AWorldInfo_execGetGlobalGravityZ_Params GetGlobalGravityZ_Params;
	memset(&GetGlobalGravityZ_Params, 0, sizeof(GetGlobalGravityZ_Params));

	uFnGetGlobalGravityZ->iNative = 0;
	uFnGetGlobalGravityZ->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetGlobalGravityZ, &GetGlobalGravityZ_Params, nullptr);
	uFnGetGlobalGravityZ->FunctionFlags |= 0x400;
	uFnGetGlobalGravityZ->iNative = 20594;

	return GetGlobalGravityZ_Params.ReturnValue;
};

// Function Engine.WorldInfo.IsMenuLevel
// [0x00026401] (FUNC_Final | FUNC_Native | FUNC_Static | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[21404])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FString                  MapName                        (CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink)

bool AWorldInfo::IsMenuLevel(const class FString& MapName)
{
	static UFunction* uFnIsMenuLevel = nullptr;

	if (!uFnIsMenuLevel)
	{
		uFnIsMenuLevel = UFunction::FindFunction("Function Engine.WorldInfo.IsMenuLevel");
	}

	AWorldInfo_execIsMenuLevel_Params IsMenuLevel_Params;
	memset(&IsMenuLevel_Params, 0, sizeof(IsMenuLevel_Params));
	memcpy_s(&IsMenuLevel_Params.MapName, sizeof(IsMenuLevel_Params.MapName), &MapName, sizeof(MapName));

	uFnIsMenuLevel->iNative = 0;
	uFnIsMenuLevel->FunctionFlags &= ~0x400;
	AWorldInfo::StaticClass()->ProcessEvent(uFnIsMenuLevel, &IsMenuLevel_Params, nullptr);
	uFnIsMenuLevel->FunctionFlags |= 0x400;
	uFnIsMenuLevel->iNative = 21404;

	return IsMenuLevel_Params.ReturnValue;
};

// Function Engine.WorldInfo.AddOnScreenDebugMessage
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[15336])
// Parameter Info:
// int32_t                        Key                            (CPF_Parm)
// float                          TimeToDisplay                  (CPF_Parm)
// struct FColor                  DisplayColor                   (CPF_Parm)
// class FString                  DebugMessage                   (CPF_Parm | CPF_NeedCtorLink)

void AWorldInfo::AddOnScreenDebugMessage(int32_t Key, float TimeToDisplay, const struct FColor& DisplayColor, const class FString& DebugMessage)
{
	static UFunction* uFnAddOnScreenDebugMessage = nullptr;

	if (!uFnAddOnScreenDebugMessage)
	{
		uFnAddOnScreenDebugMessage = UFunction::FindFunction("Function Engine.WorldInfo.AddOnScreenDebugMessage");
	}

	AWorldInfo_execAddOnScreenDebugMessage_Params AddOnScreenDebugMessage_Params;
	memset(&AddOnScreenDebugMessage_Params, 0, sizeof(AddOnScreenDebugMessage_Params));
	memcpy_s(&AddOnScreenDebugMessage_Params.Key, sizeof(AddOnScreenDebugMessage_Params.Key), &Key, sizeof(Key));
	memcpy_s(&AddOnScreenDebugMessage_Params.TimeToDisplay, sizeof(AddOnScreenDebugMessage_Params.TimeToDisplay), &TimeToDisplay, sizeof(TimeToDisplay));
	memcpy_s(&AddOnScreenDebugMessage_Params.DisplayColor, sizeof(AddOnScreenDebugMessage_Params.DisplayColor), &DisplayColor, sizeof(DisplayColor));
	memcpy_s(&AddOnScreenDebugMessage_Params.DebugMessage, sizeof(AddOnScreenDebugMessage_Params.DebugMessage), &DebugMessage, sizeof(DebugMessage));

	uFnAddOnScreenDebugMessage->iNative = 0;
	uFnAddOnScreenDebugMessage->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnAddOnScreenDebugMessage, &AddOnScreenDebugMessage_Params, nullptr);
	uFnAddOnScreenDebugMessage->FunctionFlags |= 0x400;
	uFnAddOnScreenDebugMessage->iNative = 15336;
};

// Function Engine.WorldInfo.GetNavMeshPathGoalEvaluatorFromCache
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20645])
// Parameter Info:
// class UNavMeshPathGoalEvaluator* ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UNavMeshPathGoalEvaluator* GoalEvalClass                  (CPF_Parm)

class UNavMeshPathGoalEvaluator* AWorldInfo::GetNavMeshPathGoalEvaluatorFromCache(class UNavMeshPathGoalEvaluator* GoalEvalClass)
{
	static UFunction* uFnGetNavMeshPathGoalEvaluatorFromCache = nullptr;

	if (!uFnGetNavMeshPathGoalEvaluatorFromCache)
	{
		uFnGetNavMeshPathGoalEvaluatorFromCache = UFunction::FindFunction("Function Engine.WorldInfo.GetNavMeshPathGoalEvaluatorFromCache");
	}

	AWorldInfo_execGetNavMeshPathGoalEvaluatorFromCache_Params GetNavMeshPathGoalEvaluatorFromCache_Params;
	memset(&GetNavMeshPathGoalEvaluatorFromCache_Params, 0, sizeof(GetNavMeshPathGoalEvaluatorFromCache_Params));
	GetNavMeshPathGoalEvaluatorFromCache_Params.GoalEvalClass = GoalEvalClass;

	uFnGetNavMeshPathGoalEvaluatorFromCache->iNative = 0;
	uFnGetNavMeshPathGoalEvaluatorFromCache->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetNavMeshPathGoalEvaluatorFromCache, &GetNavMeshPathGoalEvaluatorFromCache_Params, nullptr);
	uFnGetNavMeshPathGoalEvaluatorFromCache->FunctionFlags |= 0x400;
	uFnGetNavMeshPathGoalEvaluatorFromCache->iNative = 20645;

	return GetNavMeshPathGoalEvaluatorFromCache_Params.ReturnValue;
};

// Function Engine.WorldInfo.GetNavMeshPathConstraintFromCache
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20644])
// Parameter Info:
// class UNavMeshPathConstraint*  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UNavMeshPathConstraint*  ConstraintClass                (CPF_Parm)

class UNavMeshPathConstraint* AWorldInfo::GetNavMeshPathConstraintFromCache(class UNavMeshPathConstraint* ConstraintClass)
{
	static UFunction* uFnGetNavMeshPathConstraintFromCache = nullptr;

	if (!uFnGetNavMeshPathConstraintFromCache)
	{
		uFnGetNavMeshPathConstraintFromCache = UFunction::FindFunction("Function Engine.WorldInfo.GetNavMeshPathConstraintFromCache");
	}

	AWorldInfo_execGetNavMeshPathConstraintFromCache_Params GetNavMeshPathConstraintFromCache_Params;
	memset(&GetNavMeshPathConstraintFromCache_Params, 0, sizeof(GetNavMeshPathConstraintFromCache_Params));
	GetNavMeshPathConstraintFromCache_Params.ConstraintClass = ConstraintClass;

	uFnGetNavMeshPathConstraintFromCache->iNative = 0;
	uFnGetNavMeshPathConstraintFromCache->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetNavMeshPathConstraintFromCache, &GetNavMeshPathConstraintFromCache_Params, nullptr);
	uFnGetNavMeshPathConstraintFromCache->FunctionFlags |= 0x400;
	uFnGetNavMeshPathConstraintFromCache->iNative = 20644;

	return GetNavMeshPathConstraintFromCache_Params.ReturnValue;
};

// Function Engine.WorldInfo.ReleaseCachedConstraintsAndEvaluators
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25045])
// Parameter Info:

void AWorldInfo::ReleaseCachedConstraintsAndEvaluators()
{
	static UFunction* uFnReleaseCachedConstraintsAndEvaluators = nullptr;

	if (!uFnReleaseCachedConstraintsAndEvaluators)
	{
		uFnReleaseCachedConstraintsAndEvaluators = UFunction::FindFunction("Function Engine.WorldInfo.ReleaseCachedConstraintsAndEvaluators");
	}

	AWorldInfo_execReleaseCachedConstraintsAndEvaluators_Params ReleaseCachedConstraintsAndEvaluators_Params;
	memset(&ReleaseCachedConstraintsAndEvaluators_Params, 0, sizeof(ReleaseCachedConstraintsAndEvaluators_Params));

	uFnReleaseCachedConstraintsAndEvaluators->iNative = 0;
	uFnReleaseCachedConstraintsAndEvaluators->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnReleaseCachedConstraintsAndEvaluators, &ReleaseCachedConstraintsAndEvaluators_Params, nullptr);
	uFnReleaseCachedConstraintsAndEvaluators->FunctionFlags |= 0x400;
	uFnReleaseCachedConstraintsAndEvaluators->iNative = 25045;
};

// Function Engine.MatineeActor.CheckPriorityRefresh
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AMatineeActor::CheckPriorityRefresh()
{
	static UFunction* uFnCheckPriorityRefresh = nullptr;

	if (!uFnCheckPriorityRefresh)
	{
		uFnCheckPriorityRefresh = UFunction::FindFunction("Function Engine.MatineeActor.CheckPriorityRefresh");
	}

	AMatineeActor_execCheckPriorityRefresh_Params CheckPriorityRefresh_Params;
	memset(&CheckPriorityRefresh_Params, 0, sizeof(CheckPriorityRefresh_Params));

	this->ProcessEvent(uFnCheckPriorityRefresh, &CheckPriorityRefresh_Params, nullptr);
};

// Function Engine.MatineeActor.Update
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AMatineeActor::eventUpdate()
{
	static UFunction* uFnUpdate = nullptr;

	if (!uFnUpdate)
	{
		uFnUpdate = UFunction::FindFunction("Function Engine.MatineeActor.Update");
	}

	AMatineeActor_eventUpdate_Params Update_Params;
	memset(&Update_Params, 0, sizeof(Update_Params));

	this->ProcessEvent(uFnUpdate, &Update_Params, nullptr);
};

// Function Engine.MatineeActor.AddAIGroupActor
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[15290])
// Parameter Info:
// class UInterpGroupInstAI*      AIGroupInst                    (CPF_Parm)

void AMatineeActor::AddAIGroupActor(class UInterpGroupInstAI* AIGroupInst)
{
	static UFunction* uFnAddAIGroupActor = nullptr;

	if (!uFnAddAIGroupActor)
	{
		uFnAddAIGroupActor = UFunction::FindFunction("Function Engine.MatineeActor.AddAIGroupActor");
	}

	AMatineeActor_execAddAIGroupActor_Params AddAIGroupActor_Params;
	memset(&AddAIGroupActor_Params, 0, sizeof(AddAIGroupActor_Params));
	AddAIGroupActor_Params.AIGroupInst = AIGroupInst;

	uFnAddAIGroupActor->iNative = 0;
	uFnAddAIGroupActor->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnAddAIGroupActor, &AddAIGroupActor_Params, nullptr);
	uFnAddAIGroupActor->FunctionFlags |= 0x400;
	uFnAddAIGroupActor->iNative = 15290;
};

// Function Engine.NavigationPoint.GetDebugAbbrev
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)

class FString ANavigationPoint::eventGetDebugAbbrev()
{
	static UFunction* uFnGetDebugAbbrev = nullptr;

	if (!uFnGetDebugAbbrev)
	{
		uFnGetDebugAbbrev = UFunction::FindFunction("Function Engine.NavigationPoint.GetDebugAbbrev");
	}

	ANavigationPoint_eventGetDebugAbbrev_Params GetDebugAbbrev_Params;
	memset(&GetDebugAbbrev_Params, 0, sizeof(GetDebugAbbrev_Params));

	this->ProcessEvent(uFnGetDebugAbbrev, &GetDebugAbbrev_Params, nullptr);

	return GetDebugAbbrev_Params.ReturnValue;
};

// Function Engine.NavigationPoint.ShutDown
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void ANavigationPoint::eventShutDown()
{
	static UFunction* uFnShutDown = nullptr;

	if (!uFnShutDown)
	{
		uFnShutDown = UFunction::FindFunction("Function Engine.NavigationPoint.ShutDown");
	}

	ANavigationPoint_eventShutDown_Params ShutDown_Params;
	memset(&ShutDown_Params, 0, sizeof(ShutDown_Params));

	this->ProcessEvent(uFnShutDown, &ShutDown_Params, nullptr);
};

// Function Engine.NavigationPoint.OnToggle
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_Toggle*          inAction                       (CPF_Parm)

void ANavigationPoint::OnToggle(class USeqAct_Toggle* inAction)
{
	static UFunction* uFnOnToggle = nullptr;

	if (!uFnOnToggle)
	{
		uFnOnToggle = UFunction::FindFunction("Function Engine.NavigationPoint.OnToggle");
	}

	ANavigationPoint_execOnToggle_Params OnToggle_Params;
	memset(&OnToggle_Params, 0, sizeof(OnToggle_Params));
	OnToggle_Params.inAction = inAction;

	this->ProcessEvent(uFnOnToggle, &OnToggle_Params, nullptr);
};

// Function Engine.NavigationPoint.IsOnDifferentNetwork
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[21410])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class ANavigationPoint*        Nav                            (CPF_Parm)

bool ANavigationPoint::IsOnDifferentNetwork(class ANavigationPoint* Nav)
{
	static UFunction* uFnIsOnDifferentNetwork = nullptr;

	if (!uFnIsOnDifferentNetwork)
	{
		uFnIsOnDifferentNetwork = UFunction::FindFunction("Function Engine.NavigationPoint.IsOnDifferentNetwork");
	}

	ANavigationPoint_execIsOnDifferentNetwork_Params IsOnDifferentNetwork_Params;
	memset(&IsOnDifferentNetwork_Params, 0, sizeof(IsOnDifferentNetwork_Params));
	IsOnDifferentNetwork_Params.Nav = Nav;

	uFnIsOnDifferentNetwork->iNative = 0;
	uFnIsOnDifferentNetwork->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnIsOnDifferentNetwork, &IsOnDifferentNetwork_Params, nullptr);
	uFnIsOnDifferentNetwork->FunctionFlags |= 0x400;
	uFnIsOnDifferentNetwork->iNative = 21410;

	return IsOnDifferentNetwork_Params.ReturnValue;
};

// Function Engine.NavigationPoint.GetAllNavInRadius
// [0x00426401] (FUNC_Final | FUNC_Native | FUNC_Static | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20493])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class AActor*                  ChkActor                       (CPF_Parm)
// struct FVector                 ChkPoint                       (CPF_Parm)
// float                          Radius                         (CPF_Parm)
// uint32_t                       bSkipBlocked                   (CPF_OptionalParm | CPF_Parm)
// int32_t                        inNetworkID                    (CPF_OptionalParm | CPF_Parm)
// struct FCylinder               MinSize                        (CPF_OptionalParm | CPF_Parm)
// class TArray<class ANavigationPoint*> out_NavList                    (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

bool ANavigationPoint::GetAllNavInRadius(class AActor* ChkActor, const struct FVector& ChkPoint, float Radius, bool bSkipBlocked, int32_t inNetworkID, const struct FCylinder& MinSize, class TArray<class ANavigationPoint*>& out_NavList)
{
	static UFunction* uFnGetAllNavInRadius = nullptr;

	if (!uFnGetAllNavInRadius)
	{
		uFnGetAllNavInRadius = UFunction::FindFunction("Function Engine.NavigationPoint.GetAllNavInRadius");
	}

	ANavigationPoint_execGetAllNavInRadius_Params GetAllNavInRadius_Params;
	memset(&GetAllNavInRadius_Params, 0, sizeof(GetAllNavInRadius_Params));
	GetAllNavInRadius_Params.ChkActor = ChkActor;
	memcpy_s(&GetAllNavInRadius_Params.ChkPoint, sizeof(GetAllNavInRadius_Params.ChkPoint), &ChkPoint, sizeof(ChkPoint));
	memcpy_s(&GetAllNavInRadius_Params.Radius, sizeof(GetAllNavInRadius_Params.Radius), &Radius, sizeof(Radius));
	GetAllNavInRadius_Params.bSkipBlocked = bSkipBlocked;
	memcpy_s(&GetAllNavInRadius_Params.inNetworkID, sizeof(GetAllNavInRadius_Params.inNetworkID), &inNetworkID, sizeof(inNetworkID));
	memcpy_s(&GetAllNavInRadius_Params.MinSize, sizeof(GetAllNavInRadius_Params.MinSize), &MinSize, sizeof(MinSize));
	memcpy_s(&GetAllNavInRadius_Params.out_NavList, sizeof(GetAllNavInRadius_Params.out_NavList), &out_NavList, sizeof(out_NavList));

	uFnGetAllNavInRadius->iNative = 0;
	uFnGetAllNavInRadius->FunctionFlags &= ~0x400;
	ANavigationPoint::StaticClass()->ProcessEvent(uFnGetAllNavInRadius, &GetAllNavInRadius_Params, nullptr);
	uFnGetAllNavInRadius->FunctionFlags |= 0x400;
	uFnGetAllNavInRadius->iNative = 20493;

	memcpy_s(&out_NavList, sizeof(out_NavList), &GetAllNavInRadius_Params.out_NavList, sizeof(GetAllNavInRadius_Params.out_NavList));

	return GetAllNavInRadius_Params.ReturnValue;
};

// Function Engine.NavigationPoint.ProceedWithMove
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class APawn*                   Other                          (CPF_Parm)

bool ANavigationPoint::ProceedWithMove(class APawn* Other)
{
	static UFunction* uFnProceedWithMove = nullptr;

	if (!uFnProceedWithMove)
	{
		uFnProceedWithMove = UFunction::FindFunction("Function Engine.NavigationPoint.ProceedWithMove");
	}

	ANavigationPoint_execProceedWithMove_Params ProceedWithMove_Params;
	memset(&ProceedWithMove_Params, 0, sizeof(ProceedWithMove_Params));
	ProceedWithMove_Params.Other = Other;

	this->ProcessEvent(uFnProceedWithMove, &ProceedWithMove_Params, nullptr);

	return ProceedWithMove_Params.ReturnValue;
};

// Function Engine.NavigationPoint.DetourWeight
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class APawn*                   Other                          (CPF_Parm)
// float                          PathWeight                     (CPF_Parm)

float ANavigationPoint::eventDetourWeight(class APawn* Other, float PathWeight)
{
	static UFunction* uFnDetourWeight = nullptr;

	if (!uFnDetourWeight)
	{
		uFnDetourWeight = UFunction::FindFunction("Function Engine.NavigationPoint.DetourWeight");
	}

	ANavigationPoint_eventDetourWeight_Params DetourWeight_Params;
	memset(&DetourWeight_Params, 0, sizeof(DetourWeight_Params));
	DetourWeight_Params.Other = Other;
	memcpy_s(&DetourWeight_Params.PathWeight, sizeof(DetourWeight_Params.PathWeight), &PathWeight, sizeof(PathWeight));

	this->ProcessEvent(uFnDetourWeight, &DetourWeight_Params, nullptr);

	return DetourWeight_Params.ReturnValue;
};

// Function Engine.NavigationPoint.Accept
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class AActor*                  Incoming                       (CPF_Parm)
// class AActor*                  Source                         (CPF_Parm)

bool ANavigationPoint::eventAccept(class AActor* Incoming, class AActor* Source)
{
	static UFunction* uFnAccept = nullptr;

	if (!uFnAccept)
	{
		uFnAccept = UFunction::FindFunction("Function Engine.NavigationPoint.Accept");
	}

	ANavigationPoint_eventAccept_Params Accept_Params;
	memset(&Accept_Params, 0, sizeof(Accept_Params));
	Accept_Params.Incoming = Incoming;
	Accept_Params.Source = Source;

	this->ProcessEvent(uFnAccept, &Accept_Params, nullptr);

	return Accept_Params.ReturnValue;
};

// Function Engine.NavigationPoint.CanTeleport
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[17960])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class AActor*                  A                              (CPF_Parm)

bool ANavigationPoint::CanTeleport(class AActor* A)
{
	static UFunction* uFnCanTeleport = nullptr;

	if (!uFnCanTeleport)
	{
		uFnCanTeleport = UFunction::FindFunction("Function Engine.NavigationPoint.CanTeleport");
	}

	ANavigationPoint_execCanTeleport_Params CanTeleport_Params;
	memset(&CanTeleport_Params, 0, sizeof(CanTeleport_Params));
	CanTeleport_Params.A = A;

	uFnCanTeleport->iNative = 0;
	uFnCanTeleport->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnCanTeleport, &CanTeleport_Params, nullptr);
	uFnCanTeleport->FunctionFlags |= 0x400;
	uFnCanTeleport->iNative = 17960;

	return CanTeleport_Params.ReturnValue;
};

// Function Engine.NavigationPoint.IsUsableAnchorFor
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[21429])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class APawn*                   P                              (CPF_Parm)

bool ANavigationPoint::IsUsableAnchorFor(class APawn* P)
{
	static UFunction* uFnIsUsableAnchorFor = nullptr;

	if (!uFnIsUsableAnchorFor)
	{
		uFnIsUsableAnchorFor = UFunction::FindFunction("Function Engine.NavigationPoint.IsUsableAnchorFor");
	}

	ANavigationPoint_execIsUsableAnchorFor_Params IsUsableAnchorFor_Params;
	memset(&IsUsableAnchorFor_Params, 0, sizeof(IsUsableAnchorFor_Params));
	IsUsableAnchorFor_Params.P = P;

	uFnIsUsableAnchorFor->iNative = 0;
	uFnIsUsableAnchorFor->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnIsUsableAnchorFor, &IsUsableAnchorFor_Params, nullptr);
	uFnIsUsableAnchorFor->FunctionFlags |= 0x400;
	uFnIsUsableAnchorFor->iNative = 21429;

	return IsUsableAnchorFor_Params.ReturnValue;
};

// Function Engine.NavigationPoint.GetBoundingCylinder
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20520])
// Parameter Info:
// float                          CollisionRadius                (CPF_Parm | CPF_OutParm)
// float                          CollisionHeight                (CPF_Parm | CPF_OutParm)

void ANavigationPoint::GetBoundingCylinder(float& CollisionRadius, float& CollisionHeight)
{
	static UFunction* uFnGetBoundingCylinder = nullptr;

	if (!uFnGetBoundingCylinder)
	{
		uFnGetBoundingCylinder = UFunction::FindFunction("Function Engine.NavigationPoint.GetBoundingCylinder");
	}

	ANavigationPoint_execGetBoundingCylinder_Params GetBoundingCylinder_Params;
	memset(&GetBoundingCylinder_Params, 0, sizeof(GetBoundingCylinder_Params));
	memcpy_s(&GetBoundingCylinder_Params.CollisionRadius, sizeof(GetBoundingCylinder_Params.CollisionRadius), &CollisionRadius, sizeof(CollisionRadius));
	memcpy_s(&GetBoundingCylinder_Params.CollisionHeight, sizeof(GetBoundingCylinder_Params.CollisionHeight), &CollisionHeight, sizeof(CollisionHeight));

	uFnGetBoundingCylinder->iNative = 0;
	uFnGetBoundingCylinder->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetBoundingCylinder, &GetBoundingCylinder_Params, nullptr);
	uFnGetBoundingCylinder->FunctionFlags |= 0x400;
	uFnGetBoundingCylinder->iNative = 20520;

	memcpy_s(&CollisionRadius, sizeof(CollisionRadius), &GetBoundingCylinder_Params.CollisionRadius, sizeof(GetBoundingCylinder_Params.CollisionRadius));
	memcpy_s(&CollisionHeight, sizeof(CollisionHeight), &GetBoundingCylinder_Params.CollisionHeight, sizeof(GetBoundingCylinder_Params.CollisionHeight));
};

// Function Engine.PathNode.GetDebugAbbrev
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)

class FString APathNode::eventGetDebugAbbrev()
{
	static UFunction* uFnGetDebugAbbrev = nullptr;

	if (!uFnGetDebugAbbrev)
	{
		uFnGetDebugAbbrev = UFunction::FindFunction("Function Engine.PathNode.GetDebugAbbrev");
	}

	APathNode_eventGetDebugAbbrev_Params GetDebugAbbrev_Params;
	memset(&GetDebugAbbrev_Params, 0, sizeof(GetDebugAbbrev_Params));

	this->ProcessEvent(uFnGetDebugAbbrev, &GetDebugAbbrev_Params, nullptr);

	return GetDebugAbbrev_Params.ReturnValue;
};

// Function Engine.PlayerStart.OnToggle
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_Toggle*          Action                         (CPF_Parm)

void APlayerStart::OnToggle(class USeqAct_Toggle* Action)
{
	static UFunction* uFnOnToggle = nullptr;

	if (!uFnOnToggle)
	{
		uFnOnToggle = UFunction::FindFunction("Function Engine.PlayerStart.OnToggle");
	}

	APlayerStart_execOnToggle_Params OnToggle_Params;
	memset(&OnToggle_Params, 0, sizeof(OnToggle_Params));
	OnToggle_Params.Action = Action;

	this->ProcessEvent(uFnOnToggle, &OnToggle_Params, nullptr);
};

// Function Engine.PortalMarker.CanTeleport
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[17960])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class AActor*                  A                              (CPF_Parm)

bool APortalMarker::CanTeleport(class AActor* A)
{
	static UFunction* uFnCanTeleport = nullptr;

	if (!uFnCanTeleport)
	{
		uFnCanTeleport = UFunction::FindFunction("Function Engine.PortalMarker.CanTeleport");
	}

	APortalMarker_execCanTeleport_Params CanTeleport_Params;
	memset(&CanTeleport_Params, 0, sizeof(CanTeleport_Params));
	CanTeleport_Params.A = A;

	uFnCanTeleport->iNative = 0;
	uFnCanTeleport->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnCanTeleport, &CanTeleport_Params, nullptr);
	uFnCanTeleport->FunctionFlags |= 0x400;
	uFnCanTeleport->iNative = 17960;

	return CanTeleport_Params.ReturnValue;
};

// Function Engine.Pylon.OnToggle
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_Toggle*          Action                         (CPF_Parm)

void APylon::OnToggle(class USeqAct_Toggle* Action)
{
	static UFunction* uFnOnToggle = nullptr;

	if (!uFnOnToggle)
	{
		uFnOnToggle = UFunction::FindFunction("Function Engine.Pylon.OnToggle");
	}

	APylon_execOnToggle_Params OnToggle_Params;
	memset(&OnToggle_Params, 0, sizeof(OnToggle_Params));
	OnToggle_Params.Action = Action;

	this->ProcessEvent(uFnOnToggle, &OnToggle_Params, nullptr);
};

// Function Engine.Pylon.IsEnabled
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool APylon::eventIsEnabled()
{
	static UFunction* uFnIsEnabled = nullptr;

	if (!uFnIsEnabled)
	{
		uFnIsEnabled = UFunction::FindFunction("Function Engine.Pylon.IsEnabled");
	}

	APylon_eventIsEnabled_Params IsEnabled_Params;
	memset(&IsEnabled_Params, 0, sizeof(IsEnabled_Params));

	this->ProcessEvent(uFnIsEnabled, &IsEnabled_Params, nullptr);

	return IsEnabled_Params.ReturnValue;
};

// Function Engine.Pylon.SetEnabled
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bEnabled                       (CPF_Parm)

void APylon::eventSetEnabled(bool bEnabled)
{
	static UFunction* uFnSetEnabled = nullptr;

	if (!uFnSetEnabled)
	{
		uFnSetEnabled = UFunction::FindFunction("Function Engine.Pylon.SetEnabled");
	}

	APylon_eventSetEnabled_Params SetEnabled_Params;
	memset(&SetEnabled_Params, 0, sizeof(SetEnabled_Params));
	SetEnabled_Params.bEnabled = bEnabled;

	this->ProcessEvent(uFnSetEnabled, &SetEnabled_Params, nullptr);
};

// Function Engine.Teleporter.SpecialHandling
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AActor*                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class APawn*                   Other                          (CPF_Parm)

class AActor* ATeleporter::eventSpecialHandling(class APawn* Other)
{
	static UFunction* uFnSpecialHandling = nullptr;

	if (!uFnSpecialHandling)
	{
		uFnSpecialHandling = UFunction::FindFunction("Function Engine.Teleporter.SpecialHandling");
	}

	ATeleporter_eventSpecialHandling_Params SpecialHandling_Params;
	memset(&SpecialHandling_Params, 0, sizeof(SpecialHandling_Params));
	SpecialHandling_Params.Other = Other;

	this->ProcessEvent(uFnSpecialHandling, &SpecialHandling_Params, nullptr);

	return SpecialHandling_Params.ReturnValue;
};

// Function Engine.Teleporter.PostTouch
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AActor*                  Other                          (CPF_Parm)

void ATeleporter::eventPostTouch(class AActor* Other)
{
	static UFunction* uFnPostTouch = nullptr;

	if (!uFnPostTouch)
	{
		uFnPostTouch = UFunction::FindFunction("Function Engine.Teleporter.PostTouch");
	}

	ATeleporter_eventPostTouch_Params PostTouch_Params;
	memset(&PostTouch_Params, 0, sizeof(PostTouch_Params));
	PostTouch_Params.Other = Other;

	this->ProcessEvent(uFnPostTouch, &PostTouch_Params, nullptr);
};

// Function Engine.Teleporter.Accept
// [0x00820902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class AActor*                  Incoming                       (CPF_Parm)
// class AActor*                  Source                         (CPF_Parm)

bool ATeleporter::eventAccept(class AActor* Incoming, class AActor* Source)
{
	static UFunction* uFnAccept = nullptr;

	if (!uFnAccept)
	{
		uFnAccept = UFunction::FindFunction("Function Engine.Teleporter.Accept");
	}

	ATeleporter_eventAccept_Params Accept_Params;
	memset(&Accept_Params, 0, sizeof(Accept_Params));
	Accept_Params.Incoming = Incoming;
	Accept_Params.Source = Source;

	this->ProcessEvent(uFnAccept, &Accept_Params, nullptr);

	return Accept_Params.ReturnValue;
};

// Function Engine.Teleporter.PostBeginPlay
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void ATeleporter::eventPostBeginPlay()
{
	static UFunction* uFnPostBeginPlay = nullptr;

	if (!uFnPostBeginPlay)
	{
		uFnPostBeginPlay = UFunction::FindFunction("Function Engine.Teleporter.PostBeginPlay");
	}

	ATeleporter_eventPostBeginPlay_Params PostBeginPlay_Params;
	memset(&PostBeginPlay_Params, 0, sizeof(PostBeginPlay_Params));

	this->ProcessEvent(uFnPostBeginPlay, &PostBeginPlay_Params, nullptr);
};

// Function Engine.Teleporter.CanTeleport
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[17960])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class AActor*                  A                              (CPF_Parm)

bool ATeleporter::CanTeleport(class AActor* A)
{
	static UFunction* uFnCanTeleport = nullptr;

	if (!uFnCanTeleport)
	{
		uFnCanTeleport = UFunction::FindFunction("Function Engine.Teleporter.CanTeleport");
	}

	ATeleporter_execCanTeleport_Params CanTeleport_Params;
	memset(&CanTeleport_Params, 0, sizeof(CanTeleport_Params));
	CanTeleport_Params.A = A;

	uFnCanTeleport->iNative = 0;
	uFnCanTeleport->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnCanTeleport, &CanTeleport_Params, nullptr);
	uFnCanTeleport->FunctionFlags |= 0x400;
	uFnCanTeleport->iNative = 17960;

	return CanTeleport_Params.ReturnValue;
};

// Function Engine.SceneCaptureActor.OnToggle
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_Toggle*          Action                         (CPF_Parm)

void ASceneCaptureActor::OnToggle(class USeqAct_Toggle* Action)
{
	static UFunction* uFnOnToggle = nullptr;

	if (!uFnOnToggle)
	{
		uFnOnToggle = UFunction::FindFunction("Function Engine.SceneCaptureActor.OnToggle");
	}

	ASceneCaptureActor_execOnToggle_Params OnToggle_Params;
	memset(&OnToggle_Params, 0, sizeof(OnToggle_Params));
	OnToggle_Params.Action = Action;

	this->ProcessEvent(uFnOnToggle, &OnToggle_Params, nullptr);
};

// Function Engine.PortalTeleporter.CreatePortalTexture
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[18450])
// Parameter Info:
// class UTextureRenderTarget2D*  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class UTextureRenderTarget2D* APortalTeleporter::CreatePortalTexture()
{
	static UFunction* uFnCreatePortalTexture = nullptr;

	if (!uFnCreatePortalTexture)
	{
		uFnCreatePortalTexture = UFunction::FindFunction("Function Engine.PortalTeleporter.CreatePortalTexture");
	}

	APortalTeleporter_execCreatePortalTexture_Params CreatePortalTexture_Params;
	memset(&CreatePortalTexture_Params, 0, sizeof(CreatePortalTexture_Params));

	uFnCreatePortalTexture->iNative = 0;
	uFnCreatePortalTexture->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnCreatePortalTexture, &CreatePortalTexture_Params, nullptr);
	uFnCreatePortalTexture->FunctionFlags |= 0x400;
	uFnCreatePortalTexture->iNative = 18450;

	return CreatePortalTexture_Params.ReturnValue;
};

// Function Engine.PortalTeleporter.TransformHitLocation
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[26811])
// Parameter Info:
// struct FVector                 ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FVector                 HitLocation                    (CPF_Parm)

struct FVector APortalTeleporter::TransformHitLocation(const struct FVector& HitLocation)
{
	static UFunction* uFnTransformHitLocation = nullptr;

	if (!uFnTransformHitLocation)
	{
		uFnTransformHitLocation = UFunction::FindFunction("Function Engine.PortalTeleporter.TransformHitLocation");
	}

	APortalTeleporter_execTransformHitLocation_Params TransformHitLocation_Params;
	memset(&TransformHitLocation_Params, 0, sizeof(TransformHitLocation_Params));
	memcpy_s(&TransformHitLocation_Params.HitLocation, sizeof(TransformHitLocation_Params.HitLocation), &HitLocation, sizeof(HitLocation));

	uFnTransformHitLocation->iNative = 0;
	uFnTransformHitLocation->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnTransformHitLocation, &TransformHitLocation_Params, nullptr);
	uFnTransformHitLocation->FunctionFlags |= 0x400;
	uFnTransformHitLocation->iNative = 26811;

	return TransformHitLocation_Params.ReturnValue;
};

// Function Engine.PortalTeleporter.TransformVectorDir
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[26815])
// Parameter Info:
// struct FVector                 ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FVector                 V                              (CPF_Parm)

struct FVector APortalTeleporter::TransformVectorDir(const struct FVector& V)
{
	static UFunction* uFnTransformVectorDir = nullptr;

	if (!uFnTransformVectorDir)
	{
		uFnTransformVectorDir = UFunction::FindFunction("Function Engine.PortalTeleporter.TransformVectorDir");
	}

	APortalTeleporter_execTransformVectorDir_Params TransformVectorDir_Params;
	memset(&TransformVectorDir_Params, 0, sizeof(TransformVectorDir_Params));
	memcpy_s(&TransformVectorDir_Params.V, sizeof(TransformVectorDir_Params.V), &V, sizeof(V));

	uFnTransformVectorDir->iNative = 0;
	uFnTransformVectorDir->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnTransformVectorDir, &TransformVectorDir_Params, nullptr);
	uFnTransformVectorDir->FunctionFlags |= 0x400;
	uFnTransformVectorDir->iNative = 26815;

	return TransformVectorDir_Params.ReturnValue;
};

// Function Engine.PortalTeleporter.TransformActor
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[26809])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class AActor*                  A                              (CPF_Parm)

bool APortalTeleporter::TransformActor(class AActor* A)
{
	static UFunction* uFnTransformActor = nullptr;

	if (!uFnTransformActor)
	{
		uFnTransformActor = UFunction::FindFunction("Function Engine.PortalTeleporter.TransformActor");
	}

	APortalTeleporter_execTransformActor_Params TransformActor_Params;
	memset(&TransformActor_Params, 0, sizeof(TransformActor_Params));
	TransformActor_Params.A = A;

	uFnTransformActor->iNative = 0;
	uFnTransformActor->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnTransformActor, &TransformActor_Params, nullptr);
	uFnTransformActor->FunctionFlags |= 0x400;
	uFnTransformActor->iNative = 26809;

	return TransformActor_Params.ReturnValue;
};

// Function Engine.StaticMeshActor.PreBeginPlay
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AStaticMeshActor::eventPreBeginPlay()
{
	static UFunction* uFnPreBeginPlay = nullptr;

	if (!uFnPreBeginPlay)
	{
		uFnPreBeginPlay = UFunction::FindFunction("Function Engine.StaticMeshActor.PreBeginPlay");
	}

	AStaticMeshActor_eventPreBeginPlay_Params PreBeginPlay_Params;
	memset(&PreBeginPlay_Params, 0, sizeof(PreBeginPlay_Params));

	this->ProcessEvent(uFnPreBeginPlay, &PreBeginPlay_Params, nullptr);
};

// Function Engine.StaticMeshActorBasedOnExtremeContent.SetMaterialBasedOnExtremeContent
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AStaticMeshActorBasedOnExtremeContent::SetMaterialBasedOnExtremeContent()
{
	static UFunction* uFnSetMaterialBasedOnExtremeContent = nullptr;

	if (!uFnSetMaterialBasedOnExtremeContent)
	{
		uFnSetMaterialBasedOnExtremeContent = UFunction::FindFunction("Function Engine.StaticMeshActorBasedOnExtremeContent.SetMaterialBasedOnExtremeContent");
	}

	AStaticMeshActorBasedOnExtremeContent_execSetMaterialBasedOnExtremeContent_Params SetMaterialBasedOnExtremeContent_Params;
	memset(&SetMaterialBasedOnExtremeContent_Params, 0, sizeof(SetMaterialBasedOnExtremeContent_Params));

	this->ProcessEvent(uFnSetMaterialBasedOnExtremeContent, &SetMaterialBasedOnExtremeContent_Params, nullptr);
};

// Function Engine.StaticMeshActorBasedOnExtremeContent.PostBeginPlay
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AStaticMeshActorBasedOnExtremeContent::eventPostBeginPlay()
{
	static UFunction* uFnPostBeginPlay = nullptr;

	if (!uFnPostBeginPlay)
	{
		uFnPostBeginPlay = UFunction::FindFunction("Function Engine.StaticMeshActorBasedOnExtremeContent.PostBeginPlay");
	}

	AStaticMeshActorBasedOnExtremeContent_eventPostBeginPlay_Params PostBeginPlay_Params;
	memset(&PostBeginPlay_Params, 0, sizeof(PostBeginPlay_Params));

	this->ProcessEvent(uFnPostBeginPlay, &PostBeginPlay_Params, nullptr);
};

// Function Engine.Trigger.ApplyCheckpointRecord
// [0x00420002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// struct ATrigger_FCheckpointRecord Record                         (CPF_Const | CPF_Parm | CPF_OutParm)

void ATrigger::ApplyCheckpointRecord(struct ATrigger_FCheckpointRecord& Record)
{
	static UFunction* uFnApplyCheckpointRecord = nullptr;

	if (!uFnApplyCheckpointRecord)
	{
		uFnApplyCheckpointRecord = UFunction::FindFunction("Function Engine.Trigger.ApplyCheckpointRecord");
	}

	ATrigger_execApplyCheckpointRecord_Params ApplyCheckpointRecord_Params;
	memset(&ApplyCheckpointRecord_Params, 0, sizeof(ApplyCheckpointRecord_Params));
	memcpy_s(&ApplyCheckpointRecord_Params.Record, sizeof(ApplyCheckpointRecord_Params.Record), &Record, sizeof(Record));

	this->ProcessEvent(uFnApplyCheckpointRecord, &ApplyCheckpointRecord_Params, nullptr);

	memcpy_s(&Record, sizeof(Record), &ApplyCheckpointRecord_Params.Record, sizeof(ApplyCheckpointRecord_Params.Record));
};

// Function Engine.Trigger.CreateCheckpointRecord
// [0x00420002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// struct ATrigger_FCheckpointRecord Record                         (CPF_Parm | CPF_OutParm)

void ATrigger::CreateCheckpointRecord(struct ATrigger_FCheckpointRecord& Record)
{
	static UFunction* uFnCreateCheckpointRecord = nullptr;

	if (!uFnCreateCheckpointRecord)
	{
		uFnCreateCheckpointRecord = UFunction::FindFunction("Function Engine.Trigger.CreateCheckpointRecord");
	}

	ATrigger_execCreateCheckpointRecord_Params CreateCheckpointRecord_Params;
	memset(&CreateCheckpointRecord_Params, 0, sizeof(CreateCheckpointRecord_Params));
	memcpy_s(&CreateCheckpointRecord_Params.Record, sizeof(CreateCheckpointRecord_Params.Record), &Record, sizeof(Record));

	this->ProcessEvent(uFnCreateCheckpointRecord, &CreateCheckpointRecord_Params, nullptr);

	memcpy_s(&Record, sizeof(Record), &CreateCheckpointRecord_Params.Record, sizeof(CreateCheckpointRecord_Params.Record));
};

// Function Engine.Trigger.ShouldSaveForCheckpoint
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool ATrigger::ShouldSaveForCheckpoint()
{
	static UFunction* uFnShouldSaveForCheckpoint = nullptr;

	if (!uFnShouldSaveForCheckpoint)
	{
		uFnShouldSaveForCheckpoint = UFunction::FindFunction("Function Engine.Trigger.ShouldSaveForCheckpoint");
	}

	ATrigger_execShouldSaveForCheckpoint_Params ShouldSaveForCheckpoint_Params;
	memset(&ShouldSaveForCheckpoint_Params, 0, sizeof(ShouldSaveForCheckpoint_Params));

	this->ProcessEvent(uFnShouldSaveForCheckpoint, &ShouldSaveForCheckpoint_Params, nullptr);

	return ShouldSaveForCheckpoint_Params.ReturnValue;
};

// Function Engine.Trigger.UnTrigger
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void ATrigger::UnTrigger()
{
	static UFunction* uFnUnTrigger = nullptr;

	if (!uFnUnTrigger)
	{
		uFnUnTrigger = UFunction::FindFunction("Function Engine.Trigger.UnTrigger");
	}

	ATrigger_execUnTrigger_Params UnTrigger_Params;
	memset(&UnTrigger_Params, 0, sizeof(UnTrigger_Params));

	this->ProcessEvent(uFnUnTrigger, &UnTrigger_Params, nullptr);
};

// Function Engine.Trigger.NotifyTriggered
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void ATrigger::eventNotifyTriggered()
{
	static UFunction* uFnNotifyTriggered = nullptr;

	if (!uFnNotifyTriggered)
	{
		uFnNotifyTriggered = UFunction::FindFunction("Function Engine.Trigger.NotifyTriggered");
	}

	ATrigger_eventNotifyTriggered_Params NotifyTriggered_Params;
	memset(&NotifyTriggered_Params, 0, sizeof(NotifyTriggered_Params));

	this->ProcessEvent(uFnNotifyTriggered, &NotifyTriggered_Params, nullptr);
};

// Function Engine.ActorComponent.DetachFromAny
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[18925])
// Parameter Info:

void UActorComponent::DetachFromAny()
{
	static UFunction* uFnDetachFromAny = nullptr;

	if (!uFnDetachFromAny)
	{
		uFnDetachFromAny = UFunction::FindFunction("Function Engine.ActorComponent.DetachFromAny");
	}

	UActorComponent_execDetachFromAny_Params DetachFromAny_Params;
	memset(&DetachFromAny_Params, 0, sizeof(DetachFromAny_Params));

	uFnDetachFromAny->iNative = 0;
	uFnDetachFromAny->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnDetachFromAny, &DetachFromAny_Params, nullptr);
	uFnDetachFromAny->FunctionFlags |= 0x400;
	uFnDetachFromAny->iNative = 18925;
};

// Function Engine.ActorComponent.ForceUpdate
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20281])
// Parameter Info:
// uint32_t                       bTransformOnly                 (CPF_Parm)

void UActorComponent::ForceUpdate(bool bTransformOnly)
{
	static UFunction* uFnForceUpdate = nullptr;

	if (!uFnForceUpdate)
	{
		uFnForceUpdate = UFunction::FindFunction("Function Engine.ActorComponent.ForceUpdate");
	}

	UActorComponent_execForceUpdate_Params ForceUpdate_Params;
	memset(&ForceUpdate_Params, 0, sizeof(ForceUpdate_Params));
	ForceUpdate_Params.bTransformOnly = bTransformOnly;

	uFnForceUpdate->iNative = 0;
	uFnForceUpdate->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnForceUpdate, &ForceUpdate_Params, nullptr);
	uFnForceUpdate->FunctionFlags |= 0x400;
	uFnForceUpdate->iNative = 20281;
};

// Function Engine.ActorComponent.SetComponentRBFixed
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25619])
// Parameter Info:
// uint32_t                       bFixed                         (CPF_Parm)

void UActorComponent::SetComponentRBFixed(bool bFixed)
{
	static UFunction* uFnSetComponentRBFixed = nullptr;

	if (!uFnSetComponentRBFixed)
	{
		uFnSetComponentRBFixed = UFunction::FindFunction("Function Engine.ActorComponent.SetComponentRBFixed");
	}

	UActorComponent_execSetComponentRBFixed_Params SetComponentRBFixed_Params;
	memset(&SetComponentRBFixed_Params, 0, sizeof(SetComponentRBFixed_Params));
	SetComponentRBFixed_Params.bFixed = bFixed;

	uFnSetComponentRBFixed->iNative = 0;
	uFnSetComponentRBFixed->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetComponentRBFixed, &SetComponentRBFixed_Params, nullptr);
	uFnSetComponentRBFixed->FunctionFlags |= 0x400;
	uFnSetComponentRBFixed->iNative = 25619;
};

// Function Engine.ActorComponent.SetTickGroup
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25815])
// Parameter Info:
// ETickingGroup                  NewTickGroup                   (CPF_Parm)

void UActorComponent::SetTickGroup(ETickingGroup NewTickGroup)
{
	static UFunction* uFnSetTickGroup = nullptr;

	if (!uFnSetTickGroup)
	{
		uFnSetTickGroup = UFunction::FindFunction("Function Engine.ActorComponent.SetTickGroup");
	}

	UActorComponent_execSetTickGroup_Params SetTickGroup_Params;
	memset(&SetTickGroup_Params, 0, sizeof(SetTickGroup_Params));
	memcpy_s(&SetTickGroup_Params.NewTickGroup, sizeof(SetTickGroup_Params.NewTickGroup), &NewTickGroup, sizeof(NewTickGroup));

	uFnSetTickGroup->iNative = 0;
	uFnSetTickGroup->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetTickGroup, &SetTickGroup_Params, nullptr);
	uFnSetTickGroup->FunctionFlags |= 0x400;
	uFnSetTickGroup->iNative = 25815;
};

// Function Engine.PrimitiveComponent.ClosestPointOnComponentToComponent
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[18226])
// Parameter Info:
// EGJKResult                     ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UPrimitiveComponent*     OtherComponent                 (CPF_Parm | CPF_OutParm | CPF_EditInline)
// struct FVector                 PointOnComponentA              (CPF_Parm | CPF_OutParm)
// struct FVector                 PointOnComponentB              (CPF_Parm | CPF_OutParm)

EGJKResult UPrimitiveComponent::ClosestPointOnComponentToComponent(class UPrimitiveComponent*& OtherComponent, struct FVector& PointOnComponentA, struct FVector& PointOnComponentB)
{
	static UFunction* uFnClosestPointOnComponentToComponent = nullptr;

	if (!uFnClosestPointOnComponentToComponent)
	{
		uFnClosestPointOnComponentToComponent = UFunction::FindFunction("Function Engine.PrimitiveComponent.ClosestPointOnComponentToComponent");
	}

	UPrimitiveComponent_execClosestPointOnComponentToComponent_Params ClosestPointOnComponentToComponent_Params;
	memset(&ClosestPointOnComponentToComponent_Params, 0, sizeof(ClosestPointOnComponentToComponent_Params));
	ClosestPointOnComponentToComponent_Params.OtherComponent = OtherComponent;
	memcpy_s(&ClosestPointOnComponentToComponent_Params.PointOnComponentA, sizeof(ClosestPointOnComponentToComponent_Params.PointOnComponentA), &PointOnComponentA, sizeof(PointOnComponentA));
	memcpy_s(&ClosestPointOnComponentToComponent_Params.PointOnComponentB, sizeof(ClosestPointOnComponentToComponent_Params.PointOnComponentB), &PointOnComponentB, sizeof(PointOnComponentB));

	uFnClosestPointOnComponentToComponent->iNative = 0;
	uFnClosestPointOnComponentToComponent->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnClosestPointOnComponentToComponent, &ClosestPointOnComponentToComponent_Params, nullptr);
	uFnClosestPointOnComponentToComponent->FunctionFlags |= 0x400;
	uFnClosestPointOnComponentToComponent->iNative = 18226;

	OtherComponent = ClosestPointOnComponentToComponent_Params.OtherComponent;
	memcpy_s(&PointOnComponentA, sizeof(PointOnComponentA), &ClosestPointOnComponentToComponent_Params.PointOnComponentA, sizeof(ClosestPointOnComponentToComponent_Params.PointOnComponentA));
	memcpy_s(&PointOnComponentB, sizeof(PointOnComponentB), &ClosestPointOnComponentToComponent_Params.PointOnComponentB, sizeof(ClosestPointOnComponentToComponent_Params.PointOnComponentB));

	return static_cast<EGJKResult>(ClosestPointOnComponentToComponent_Params.ReturnValue);
};

// Function Engine.PrimitiveComponent.ClosestPointOnComponentToPoint
// [0x00420401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[18227])
// Parameter Info:
// EGJKResult                     ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FVector                 POI                            (CPF_Parm | CPF_OutParm)
// struct FVector                 Extent                         (CPF_Parm | CPF_OutParm)
// struct FVector                 OutPointA                      (CPF_Parm | CPF_OutParm)
// struct FVector                 OutPointB                      (CPF_Parm | CPF_OutParm)

EGJKResult UPrimitiveComponent::ClosestPointOnComponentToPoint(struct FVector& POI, struct FVector& Extent, struct FVector& OutPointA, struct FVector& OutPointB)
{
	static UFunction* uFnClosestPointOnComponentToPoint = nullptr;

	if (!uFnClosestPointOnComponentToPoint)
	{
		uFnClosestPointOnComponentToPoint = UFunction::FindFunction("Function Engine.PrimitiveComponent.ClosestPointOnComponentToPoint");
	}

	UPrimitiveComponent_execClosestPointOnComponentToPoint_Params ClosestPointOnComponentToPoint_Params;
	memset(&ClosestPointOnComponentToPoint_Params, 0, sizeof(ClosestPointOnComponentToPoint_Params));
	memcpy_s(&ClosestPointOnComponentToPoint_Params.POI, sizeof(ClosestPointOnComponentToPoint_Params.POI), &POI, sizeof(POI));
	memcpy_s(&ClosestPointOnComponentToPoint_Params.Extent, sizeof(ClosestPointOnComponentToPoint_Params.Extent), &Extent, sizeof(Extent));
	memcpy_s(&ClosestPointOnComponentToPoint_Params.OutPointA, sizeof(ClosestPointOnComponentToPoint_Params.OutPointA), &OutPointA, sizeof(OutPointA));
	memcpy_s(&ClosestPointOnComponentToPoint_Params.OutPointB, sizeof(ClosestPointOnComponentToPoint_Params.OutPointB), &OutPointB, sizeof(OutPointB));

	uFnClosestPointOnComponentToPoint->iNative = 0;
	uFnClosestPointOnComponentToPoint->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnClosestPointOnComponentToPoint, &ClosestPointOnComponentToPoint_Params, nullptr);
	uFnClosestPointOnComponentToPoint->FunctionFlags |= 0x400;
	uFnClosestPointOnComponentToPoint->iNative = 18227;

	memcpy_s(&POI, sizeof(POI), &ClosestPointOnComponentToPoint_Params.POI, sizeof(ClosestPointOnComponentToPoint_Params.POI));
	memcpy_s(&Extent, sizeof(Extent), &ClosestPointOnComponentToPoint_Params.Extent, sizeof(ClosestPointOnComponentToPoint_Params.Extent));
	memcpy_s(&OutPointA, sizeof(OutPointA), &ClosestPointOnComponentToPoint_Params.OutPointA, sizeof(ClosestPointOnComponentToPoint_Params.OutPointA));
	memcpy_s(&OutPointB, sizeof(OutPointB), &ClosestPointOnComponentToPoint_Params.OutPointB, sizeof(ClosestPointOnComponentToPoint_Params.OutPointB));

	return static_cast<EGJKResult>(ClosestPointOnComponentToPoint_Params.ReturnValue);
};

// Function Engine.PrimitiveComponent.GetRotation
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20738])
// Parameter Info:
// struct FRotator                ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

struct FRotator UPrimitiveComponent::GetRotation()
{
	static UFunction* uFnGetRotation = nullptr;

	if (!uFnGetRotation)
	{
		uFnGetRotation = UFunction::FindFunction("Function Engine.PrimitiveComponent.GetRotation");
	}

	UPrimitiveComponent_execGetRotation_Params GetRotation_Params;
	memset(&GetRotation_Params, 0, sizeof(GetRotation_Params));

	uFnGetRotation->iNative = 0;
	uFnGetRotation->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetRotation, &GetRotation_Params, nullptr);
	uFnGetRotation->FunctionFlags |= 0x400;
	uFnGetRotation->iNative = 20738;

	return GetRotation_Params.ReturnValue;
};

// Function Engine.PrimitiveComponent.GetPosition
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20690])
// Parameter Info:
// struct FVector                 ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

struct FVector UPrimitiveComponent::GetPosition()
{
	static UFunction* uFnGetPosition = nullptr;

	if (!uFnGetPosition)
	{
		uFnGetPosition = UFunction::FindFunction("Function Engine.PrimitiveComponent.GetPosition");
	}

	UPrimitiveComponent_execGetPosition_Params GetPosition_Params;
	memset(&GetPosition_Params, 0, sizeof(GetPosition_Params));

	uFnGetPosition->iNative = 0;
	uFnGetPosition->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetPosition, &GetPosition_Params, nullptr);
	uFnGetPosition->FunctionFlags |= 0x400;
	uFnGetPosition->iNative = 20690;

	return GetPosition_Params.ReturnValue;
};

// Function Engine.PrimitiveComponent.SetAbsolute
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[25563])
// Parameter Info:
// uint32_t                       NewAbsoluteTranslation         (CPF_OptionalParm | CPF_Parm)
// uint32_t                       NewAbsoluteRotation            (CPF_OptionalParm | CPF_Parm)
// uint32_t                       NewAbsoluteScale               (CPF_OptionalParm | CPF_Parm)

void UPrimitiveComponent::SetAbsolute(bool NewAbsoluteTranslation, bool NewAbsoluteRotation, bool NewAbsoluteScale)
{
	static UFunction* uFnSetAbsolute = nullptr;

	if (!uFnSetAbsolute)
	{
		uFnSetAbsolute = UFunction::FindFunction("Function Engine.PrimitiveComponent.SetAbsolute");
	}

	UPrimitiveComponent_execSetAbsolute_Params SetAbsolute_Params;
	memset(&SetAbsolute_Params, 0, sizeof(SetAbsolute_Params));
	SetAbsolute_Params.NewAbsoluteTranslation = NewAbsoluteTranslation;
	SetAbsolute_Params.NewAbsoluteRotation = NewAbsoluteRotation;
	SetAbsolute_Params.NewAbsoluteScale = NewAbsoluteScale;

	uFnSetAbsolute->iNative = 0;
	uFnSetAbsolute->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetAbsolute, &SetAbsolute_Params, nullptr);
	uFnSetAbsolute->FunctionFlags |= 0x400;
	uFnSetAbsolute->iNative = 25563;
};

// Function Engine.PrimitiveComponent.SetScale3D
// [0x04020400] (FUNC_Native | FUNC_Public | FUNC_K2Call | FUNC_AllFlags) (iNative[25779])
// Parameter Info:
// struct FVector                 NewScale3D                     (CPF_Parm)

void UPrimitiveComponent::SetScale3D(const struct FVector& NewScale3D)
{
	static UFunction* uFnSetScale3D = nullptr;

	if (!uFnSetScale3D)
	{
		uFnSetScale3D = UFunction::FindFunction("Function Engine.PrimitiveComponent.SetScale3D");
	}

	UPrimitiveComponent_execSetScale3D_Params SetScale3D_Params;
	memset(&SetScale3D_Params, 0, sizeof(SetScale3D_Params));
	memcpy_s(&SetScale3D_Params.NewScale3D, sizeof(SetScale3D_Params.NewScale3D), &NewScale3D, sizeof(NewScale3D));

	uFnSetScale3D->iNative = 0;
	uFnSetScale3D->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetScale3D, &SetScale3D_Params, nullptr);
	uFnSetScale3D->FunctionFlags |= 0x400;
	uFnSetScale3D->iNative = 25779;
};

// Function Engine.PrimitiveComponent.SetScale
// [0x04020400] (FUNC_Native | FUNC_Public | FUNC_K2Call | FUNC_AllFlags) (iNative[25778])
// Parameter Info:
// float                          NewScale                       (CPF_Parm)

void UPrimitiveComponent::SetScale(float NewScale)
{
	static UFunction* uFnSetScale = nullptr;

	if (!uFnSetScale)
	{
		uFnSetScale = UFunction::FindFunction("Function Engine.PrimitiveComponent.SetScale");
	}

	UPrimitiveComponent_execSetScale_Params SetScale_Params;
	memset(&SetScale_Params, 0, sizeof(SetScale_Params));
	memcpy_s(&SetScale_Params.NewScale, sizeof(SetScale_Params.NewScale), &NewScale, sizeof(NewScale));

	uFnSetScale->iNative = 0;
	uFnSetScale->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetScale, &SetScale_Params, nullptr);
	uFnSetScale->FunctionFlags |= 0x400;
	uFnSetScale->iNative = 25778;
};

// Function Engine.PrimitiveComponent.SetRotation
// [0x04020400] (FUNC_Native | FUNC_Public | FUNC_K2Call | FUNC_AllFlags) (iNative[25772])
// Parameter Info:
// struct FRotator                NewRotation                    (CPF_Parm)

void UPrimitiveComponent::SetRotation(const struct FRotator& NewRotation)
{
	static UFunction* uFnSetRotation = nullptr;

	if (!uFnSetRotation)
	{
		uFnSetRotation = UFunction::FindFunction("Function Engine.PrimitiveComponent.SetRotation");
	}

	UPrimitiveComponent_execSetRotation_Params SetRotation_Params;
	memset(&SetRotation_Params, 0, sizeof(SetRotation_Params));
	memcpy_s(&SetRotation_Params.NewRotation, sizeof(SetRotation_Params.NewRotation), &NewRotation, sizeof(NewRotation));

	uFnSetRotation->iNative = 0;
	uFnSetRotation->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetRotation, &SetRotation_Params, nullptr);
	uFnSetRotation->FunctionFlags |= 0x400;
	uFnSetRotation->iNative = 25772;
};

// Function Engine.PrimitiveComponent.SetTranslation
// [0x04020400] (FUNC_Native | FUNC_Public | FUNC_K2Call | FUNC_AllFlags) (iNative[25829])
// Parameter Info:
// struct FVector                 NewTranslation                 (CPF_Parm)

void UPrimitiveComponent::SetTranslation(const struct FVector& NewTranslation)
{
	static UFunction* uFnSetTranslation = nullptr;

	if (!uFnSetTranslation)
	{
		uFnSetTranslation = UFunction::FindFunction("Function Engine.PrimitiveComponent.SetTranslation");
	}

	UPrimitiveComponent_execSetTranslation_Params SetTranslation_Params;
	memset(&SetTranslation_Params, 0, sizeof(SetTranslation_Params));
	memcpy_s(&SetTranslation_Params.NewTranslation, sizeof(SetTranslation_Params.NewTranslation), &NewTranslation, sizeof(NewTranslation));

	uFnSetTranslation->iNative = 0;
	uFnSetTranslation->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetTranslation, &SetTranslation_Params, nullptr);
	uFnSetTranslation->FunctionFlags |= 0x400;
	uFnSetTranslation->iNative = 25829;
};

// Function Engine.PrimitiveComponent.SetActorCollision
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[25569])
// Parameter Info:
// uint32_t                       NewCollideActors               (CPF_Parm)
// uint32_t                       NewBlockActors                 (CPF_Parm)
// uint32_t                       NewAlwaysCheckCollision        (CPF_OptionalParm | CPF_Parm)

void UPrimitiveComponent::SetActorCollision(bool NewCollideActors, bool NewBlockActors, bool NewAlwaysCheckCollision)
{
	static UFunction* uFnSetActorCollision = nullptr;

	if (!uFnSetActorCollision)
	{
		uFnSetActorCollision = UFunction::FindFunction("Function Engine.PrimitiveComponent.SetActorCollision");
	}

	UPrimitiveComponent_execSetActorCollision_Params SetActorCollision_Params;
	memset(&SetActorCollision_Params, 0, sizeof(SetActorCollision_Params));
	SetActorCollision_Params.NewCollideActors = NewCollideActors;
	SetActorCollision_Params.NewBlockActors = NewBlockActors;
	SetActorCollision_Params.NewAlwaysCheckCollision = NewAlwaysCheckCollision;

	uFnSetActorCollision->iNative = 0;
	uFnSetActorCollision->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetActorCollision, &SetActorCollision_Params, nullptr);
	uFnSetActorCollision->FunctionFlags |= 0x400;
	uFnSetActorCollision->iNative = 25569;
};

// Function Engine.PrimitiveComponent.SetTraceBlocking
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25828])
// Parameter Info:
// uint32_t                       NewBlockGameplay               (CPF_Parm)
// uint32_t                       NewBlockMovement               (CPF_Parm)

void UPrimitiveComponent::SetTraceBlocking(bool NewBlockGameplay, bool NewBlockMovement)
{
	static UFunction* uFnSetTraceBlocking = nullptr;

	if (!uFnSetTraceBlocking)
	{
		uFnSetTraceBlocking = UFunction::FindFunction("Function Engine.PrimitiveComponent.SetTraceBlocking");
	}

	UPrimitiveComponent_execSetTraceBlocking_Params SetTraceBlocking_Params;
	memset(&SetTraceBlocking_Params, 0, sizeof(SetTraceBlocking_Params));
	SetTraceBlocking_Params.NewBlockGameplay = NewBlockGameplay;
	SetTraceBlocking_Params.NewBlockMovement = NewBlockMovement;

	uFnSetTraceBlocking->iNative = 0;
	uFnSetTraceBlocking->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetTraceBlocking, &SetTraceBlocking_Params, nullptr);
	uFnSetTraceBlocking->FunctionFlags |= 0x400;
	uFnSetTraceBlocking->iNative = 25828;
};

// Function Engine.PrimitiveComponent.SetViewOwnerDepthPriorityGroup
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25838])
// Parameter Info:
// uint32_t                       bNewUseViewOwnerDepthPriorityGroup (CPF_Parm)
// ESceneDepthPriorityGroup       NewViewOwnerDepthPriorityGroup (CPF_Parm)

void UPrimitiveComponent::SetViewOwnerDepthPriorityGroup(bool bNewUseViewOwnerDepthPriorityGroup, ESceneDepthPriorityGroup NewViewOwnerDepthPriorityGroup)
{
	static UFunction* uFnSetViewOwnerDepthPriorityGroup = nullptr;

	if (!uFnSetViewOwnerDepthPriorityGroup)
	{
		uFnSetViewOwnerDepthPriorityGroup = UFunction::FindFunction("Function Engine.PrimitiveComponent.SetViewOwnerDepthPriorityGroup");
	}

	UPrimitiveComponent_execSetViewOwnerDepthPriorityGroup_Params SetViewOwnerDepthPriorityGroup_Params;
	memset(&SetViewOwnerDepthPriorityGroup_Params, 0, sizeof(SetViewOwnerDepthPriorityGroup_Params));
	SetViewOwnerDepthPriorityGroup_Params.bNewUseViewOwnerDepthPriorityGroup = bNewUseViewOwnerDepthPriorityGroup;
	memcpy_s(&SetViewOwnerDepthPriorityGroup_Params.NewViewOwnerDepthPriorityGroup, sizeof(SetViewOwnerDepthPriorityGroup_Params.NewViewOwnerDepthPriorityGroup), &NewViewOwnerDepthPriorityGroup, sizeof(NewViewOwnerDepthPriorityGroup));

	uFnSetViewOwnerDepthPriorityGroup->iNative = 0;
	uFnSetViewOwnerDepthPriorityGroup->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetViewOwnerDepthPriorityGroup, &SetViewOwnerDepthPriorityGroup_Params, nullptr);
	uFnSetViewOwnerDepthPriorityGroup->FunctionFlags |= 0x400;
	uFnSetViewOwnerDepthPriorityGroup->iNative = 25838;
};

// Function Engine.PrimitiveComponent.SetDepthPriorityGroup
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25638])
// Parameter Info:
// ESceneDepthPriorityGroup       NewDepthPriorityGroup          (CPF_Parm)

void UPrimitiveComponent::SetDepthPriorityGroup(ESceneDepthPriorityGroup NewDepthPriorityGroup)
{
	static UFunction* uFnSetDepthPriorityGroup = nullptr;

	if (!uFnSetDepthPriorityGroup)
	{
		uFnSetDepthPriorityGroup = UFunction::FindFunction("Function Engine.PrimitiveComponent.SetDepthPriorityGroup");
	}

	UPrimitiveComponent_execSetDepthPriorityGroup_Params SetDepthPriorityGroup_Params;
	memset(&SetDepthPriorityGroup_Params, 0, sizeof(SetDepthPriorityGroup_Params));
	memcpy_s(&SetDepthPriorityGroup_Params.NewDepthPriorityGroup, sizeof(SetDepthPriorityGroup_Params.NewDepthPriorityGroup), &NewDepthPriorityGroup, sizeof(NewDepthPriorityGroup));

	uFnSetDepthPriorityGroup->iNative = 0;
	uFnSetDepthPriorityGroup->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetDepthPriorityGroup, &SetDepthPriorityGroup_Params, nullptr);
	uFnSetDepthPriorityGroup->FunctionFlags |= 0x400;
	uFnSetDepthPriorityGroup->iNative = 25638;
};

// Function Engine.PrimitiveComponent.SetLightingChannels
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25694])
// Parameter Info:
// struct FLightingChannelContainer NewLightingChannels            (CPF_Parm)

void UPrimitiveComponent::SetLightingChannels(const struct FLightingChannelContainer& NewLightingChannels)
{
	static UFunction* uFnSetLightingChannels = nullptr;

	if (!uFnSetLightingChannels)
	{
		uFnSetLightingChannels = UFunction::FindFunction("Function Engine.PrimitiveComponent.SetLightingChannels");
	}

	UPrimitiveComponent_execSetLightingChannels_Params SetLightingChannels_Params;
	memset(&SetLightingChannels_Params, 0, sizeof(SetLightingChannels_Params));
	memcpy_s(&SetLightingChannels_Params.NewLightingChannels, sizeof(SetLightingChannels_Params.NewLightingChannels), &NewLightingChannels, sizeof(NewLightingChannels));

	uFnSetLightingChannels->iNative = 0;
	uFnSetLightingChannels->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetLightingChannels, &SetLightingChannels_Params, nullptr);
	uFnSetLightingChannels->FunctionFlags |= 0x400;
	uFnSetLightingChannels->iNative = 25694;
};

// Function Engine.PrimitiveComponent.SetCullDistance
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25624])
// Parameter Info:
// float                          NewCullDistance                (CPF_Parm)

void UPrimitiveComponent::SetCullDistance(float NewCullDistance)
{
	static UFunction* uFnSetCullDistance = nullptr;

	if (!uFnSetCullDistance)
	{
		uFnSetCullDistance = UFunction::FindFunction("Function Engine.PrimitiveComponent.SetCullDistance");
	}

	UPrimitiveComponent_execSetCullDistance_Params SetCullDistance_Params;
	memset(&SetCullDistance_Params, 0, sizeof(SetCullDistance_Params));
	memcpy_s(&SetCullDistance_Params.NewCullDistance, sizeof(SetCullDistance_Params.NewCullDistance), &NewCullDistance, sizeof(NewCullDistance));

	uFnSetCullDistance->iNative = 0;
	uFnSetCullDistance->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetCullDistance, &SetCullDistance_Params, nullptr);
	uFnSetCullDistance->FunctionFlags |= 0x400;
	uFnSetCullDistance->iNative = 25624;
};

// Function Engine.PrimitiveComponent.SetLightEnvironment
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25692])
// Parameter Info:
// class ULightEnvironmentComponent* NewLightEnvironment            (CPF_Parm | CPF_EditInline)

void UPrimitiveComponent::SetLightEnvironment(class ULightEnvironmentComponent* NewLightEnvironment)
{
	static UFunction* uFnSetLightEnvironment = nullptr;

	if (!uFnSetLightEnvironment)
	{
		uFnSetLightEnvironment = UFunction::FindFunction("Function Engine.PrimitiveComponent.SetLightEnvironment");
	}

	UPrimitiveComponent_execSetLightEnvironment_Params SetLightEnvironment_Params;
	memset(&SetLightEnvironment_Params, 0, sizeof(SetLightEnvironment_Params));
	SetLightEnvironment_Params.NewLightEnvironment = NewLightEnvironment;

	uFnSetLightEnvironment->iNative = 0;
	uFnSetLightEnvironment->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetLightEnvironment, &SetLightEnvironment_Params, nullptr);
	uFnSetLightEnvironment->FunctionFlags |= 0x400;
	uFnSetLightEnvironment->iNative = 25692;
};

// Function Engine.PrimitiveComponent.SetShadowParent
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25788])
// Parameter Info:
// class UPrimitiveComponent*     NewShadowParent                (CPF_Parm | CPF_EditInline)

void UPrimitiveComponent::SetShadowParent(class UPrimitiveComponent* NewShadowParent)
{
	static UFunction* uFnSetShadowParent = nullptr;

	if (!uFnSetShadowParent)
	{
		uFnSetShadowParent = UFunction::FindFunction("Function Engine.PrimitiveComponent.SetShadowParent");
	}

	UPrimitiveComponent_execSetShadowParent_Params SetShadowParent_Params;
	memset(&SetShadowParent_Params, 0, sizeof(SetShadowParent_Params));
	SetShadowParent_Params.NewShadowParent = NewShadowParent;

	uFnSetShadowParent->iNative = 0;
	uFnSetShadowParent->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetShadowParent, &SetShadowParent_Params, nullptr);
	uFnSetShadowParent->FunctionFlags |= 0x400;
	uFnSetShadowParent->iNative = 25788;
};

// Function Engine.PrimitiveComponent.SetIgnoreOwnerHidden
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25677])
// Parameter Info:
// uint32_t                       bNewIgnoreOwnerHidden          (CPF_Parm)

void UPrimitiveComponent::SetIgnoreOwnerHidden(bool bNewIgnoreOwnerHidden)
{
	static UFunction* uFnSetIgnoreOwnerHidden = nullptr;

	if (!uFnSetIgnoreOwnerHidden)
	{
		uFnSetIgnoreOwnerHidden = UFunction::FindFunction("Function Engine.PrimitiveComponent.SetIgnoreOwnerHidden");
	}

	UPrimitiveComponent_execSetIgnoreOwnerHidden_Params SetIgnoreOwnerHidden_Params;
	memset(&SetIgnoreOwnerHidden_Params, 0, sizeof(SetIgnoreOwnerHidden_Params));
	SetIgnoreOwnerHidden_Params.bNewIgnoreOwnerHidden = bNewIgnoreOwnerHidden;

	uFnSetIgnoreOwnerHidden->iNative = 0;
	uFnSetIgnoreOwnerHidden->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetIgnoreOwnerHidden, &SetIgnoreOwnerHidden_Params, nullptr);
	uFnSetIgnoreOwnerHidden->FunctionFlags |= 0x400;
	uFnSetIgnoreOwnerHidden->iNative = 25677;
};

// Function Engine.PrimitiveComponent.SetOnlyOwnerSee
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25727])
// Parameter Info:
// uint32_t                       bNewOnlyOwnerSee               (CPF_Parm)

void UPrimitiveComponent::SetOnlyOwnerSee(bool bNewOnlyOwnerSee)
{
	static UFunction* uFnSetOnlyOwnerSee = nullptr;

	if (!uFnSetOnlyOwnerSee)
	{
		uFnSetOnlyOwnerSee = UFunction::FindFunction("Function Engine.PrimitiveComponent.SetOnlyOwnerSee");
	}

	UPrimitiveComponent_execSetOnlyOwnerSee_Params SetOnlyOwnerSee_Params;
	memset(&SetOnlyOwnerSee_Params, 0, sizeof(SetOnlyOwnerSee_Params));
	SetOnlyOwnerSee_Params.bNewOnlyOwnerSee = bNewOnlyOwnerSee;

	uFnSetOnlyOwnerSee->iNative = 0;
	uFnSetOnlyOwnerSee->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetOnlyOwnerSee, &SetOnlyOwnerSee_Params, nullptr);
	uFnSetOnlyOwnerSee->FunctionFlags |= 0x400;
	uFnSetOnlyOwnerSee->iNative = 25727;
};

// Function Engine.PrimitiveComponent.SetOwnerNoSee
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25732])
// Parameter Info:
// uint32_t                       bNewOwnerNoSee                 (CPF_Parm)

void UPrimitiveComponent::SetOwnerNoSee(bool bNewOwnerNoSee)
{
	static UFunction* uFnSetOwnerNoSee = nullptr;

	if (!uFnSetOwnerNoSee)
	{
		uFnSetOwnerNoSee = UFunction::FindFunction("Function Engine.PrimitiveComponent.SetOwnerNoSee");
	}

	UPrimitiveComponent_execSetOwnerNoSee_Params SetOwnerNoSee_Params;
	memset(&SetOwnerNoSee_Params, 0, sizeof(SetOwnerNoSee_Params));
	SetOwnerNoSee_Params.bNewOwnerNoSee = bNewOwnerNoSee;

	uFnSetOwnerNoSee->iNative = 0;
	uFnSetOwnerNoSee->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetOwnerNoSee, &SetOwnerNoSee_Params, nullptr);
	uFnSetOwnerNoSee->FunctionFlags |= 0x400;
	uFnSetOwnerNoSee->iNative = 25732;
};

// Function Engine.PrimitiveComponent.SetHidden
// [0x04020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_K2Call | FUNC_AllFlags) (iNative[25675])
// Parameter Info:
// uint32_t                       NewHidden                      (CPF_Parm)

void UPrimitiveComponent::SetHidden(bool NewHidden)
{
	static UFunction* uFnSetHidden = nullptr;

	if (!uFnSetHidden)
	{
		uFnSetHidden = UFunction::FindFunction("Function Engine.PrimitiveComponent.SetHidden");
	}

	UPrimitiveComponent_execSetHidden_Params SetHidden_Params;
	memset(&SetHidden_Params, 0, sizeof(SetHidden_Params));
	SetHidden_Params.NewHidden = NewHidden;

	uFnSetHidden->iNative = 0;
	uFnSetHidden->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetHidden, &SetHidden_Params, nullptr);
	uFnSetHidden->FunctionFlags |= 0x400;
	uFnSetHidden->iNative = 25675;
};

// Function Engine.PrimitiveComponent.ShouldComponentAddToPrimitiveOctree
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25895])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UPrimitiveComponent::ShouldComponentAddToPrimitiveOctree()
{
	static UFunction* uFnShouldComponentAddToPrimitiveOctree = nullptr;

	if (!uFnShouldComponentAddToPrimitiveOctree)
	{
		uFnShouldComponentAddToPrimitiveOctree = UFunction::FindFunction("Function Engine.PrimitiveComponent.ShouldComponentAddToPrimitiveOctree");
	}

	UPrimitiveComponent_execShouldComponentAddToPrimitiveOctree_Params ShouldComponentAddToPrimitiveOctree_Params;
	memset(&ShouldComponentAddToPrimitiveOctree_Params, 0, sizeof(ShouldComponentAddToPrimitiveOctree_Params));

	uFnShouldComponentAddToPrimitiveOctree->iNative = 0;
	uFnShouldComponentAddToPrimitiveOctree->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnShouldComponentAddToPrimitiveOctree, &ShouldComponentAddToPrimitiveOctree_Params, nullptr);
	uFnShouldComponentAddToPrimitiveOctree->FunctionFlags |= 0x400;
	uFnShouldComponentAddToPrimitiveOctree->iNative = 25895;

	return ShouldComponentAddToPrimitiveOctree_Params.ReturnValue;
};

// Function Engine.PrimitiveComponent.ShouldComponentAddToScene
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25896])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UPrimitiveComponent::ShouldComponentAddToScene()
{
	static UFunction* uFnShouldComponentAddToScene = nullptr;

	if (!uFnShouldComponentAddToScene)
	{
		uFnShouldComponentAddToScene = UFunction::FindFunction("Function Engine.PrimitiveComponent.ShouldComponentAddToScene");
	}

	UPrimitiveComponent_execShouldComponentAddToScene_Params ShouldComponentAddToScene_Params;
	memset(&ShouldComponentAddToScene_Params, 0, sizeof(ShouldComponentAddToScene_Params));

	uFnShouldComponentAddToScene->iNative = 0;
	uFnShouldComponentAddToScene->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnShouldComponentAddToScene, &ShouldComponentAddToScene_Params, nullptr);
	uFnShouldComponentAddToScene->FunctionFlags |= 0x400;
	uFnShouldComponentAddToScene->iNative = 25896;

	return ShouldComponentAddToScene_Params.ReturnValue;
};

// Function Engine.PrimitiveComponent.SetRBDominanceGroup
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25760])
// Parameter Info:
// uint8_t                        InDomGroup                     (CPF_Parm)

void UPrimitiveComponent::SetRBDominanceGroup(uint8_t InDomGroup)
{
	static UFunction* uFnSetRBDominanceGroup = nullptr;

	if (!uFnSetRBDominanceGroup)
	{
		uFnSetRBDominanceGroup = UFunction::FindFunction("Function Engine.PrimitiveComponent.SetRBDominanceGroup");
	}

	UPrimitiveComponent_execSetRBDominanceGroup_Params SetRBDominanceGroup_Params;
	memset(&SetRBDominanceGroup_Params, 0, sizeof(SetRBDominanceGroup_Params));
	memcpy_s(&SetRBDominanceGroup_Params.InDomGroup, sizeof(SetRBDominanceGroup_Params.InDomGroup), &InDomGroup, sizeof(InDomGroup));

	uFnSetRBDominanceGroup->iNative = 0;
	uFnSetRBDominanceGroup->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetRBDominanceGroup, &SetRBDominanceGroup_Params, nullptr);
	uFnSetRBDominanceGroup->FunctionFlags |= 0x400;
	uFnSetRBDominanceGroup->iNative = 25760;
};

// Function Engine.PrimitiveComponent.GetRootBodyInstance
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20737])
// Parameter Info:
// class URB_BodyInstance*        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class URB_BodyInstance* UPrimitiveComponent::GetRootBodyInstance()
{
	static UFunction* uFnGetRootBodyInstance = nullptr;

	if (!uFnGetRootBodyInstance)
	{
		uFnGetRootBodyInstance = UFunction::FindFunction("Function Engine.PrimitiveComponent.GetRootBodyInstance");
	}

	UPrimitiveComponent_execGetRootBodyInstance_Params GetRootBodyInstance_Params;
	memset(&GetRootBodyInstance_Params, 0, sizeof(GetRootBodyInstance_Params));

	uFnGetRootBodyInstance->iNative = 0;
	uFnGetRootBodyInstance->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetRootBodyInstance, &GetRootBodyInstance_Params, nullptr);
	uFnGetRootBodyInstance->FunctionFlags |= 0x400;
	uFnGetRootBodyInstance->iNative = 20737;

	return GetRootBodyInstance_Params.ReturnValue;
};

// Function Engine.PrimitiveComponent.SetPhysMaterialOverride
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25740])
// Parameter Info:
// class UPhysicalMaterial*       NewPhysMaterial                (CPF_Parm)

void UPrimitiveComponent::SetPhysMaterialOverride(class UPhysicalMaterial* NewPhysMaterial)
{
	static UFunction* uFnSetPhysMaterialOverride = nullptr;

	if (!uFnSetPhysMaterialOverride)
	{
		uFnSetPhysMaterialOverride = UFunction::FindFunction("Function Engine.PrimitiveComponent.SetPhysMaterialOverride");
	}

	UPrimitiveComponent_execSetPhysMaterialOverride_Params SetPhysMaterialOverride_Params;
	memset(&SetPhysMaterialOverride_Params, 0, sizeof(SetPhysMaterialOverride_Params));
	SetPhysMaterialOverride_Params.NewPhysMaterial = NewPhysMaterial;

	uFnSetPhysMaterialOverride->iNative = 0;
	uFnSetPhysMaterialOverride->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetPhysMaterialOverride, &SetPhysMaterialOverride_Params, nullptr);
	uFnSetPhysMaterialOverride->FunctionFlags |= 0x400;
	uFnSetPhysMaterialOverride->iNative = 25740;
};

// Function Engine.PrimitiveComponent.InitRBPhys
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[21166])
// Parameter Info:

void UPrimitiveComponent::InitRBPhys()
{
	static UFunction* uFnInitRBPhys = nullptr;

	if (!uFnInitRBPhys)
	{
		uFnInitRBPhys = UFunction::FindFunction("Function Engine.PrimitiveComponent.InitRBPhys");
	}

	UPrimitiveComponent_execInitRBPhys_Params InitRBPhys_Params;
	memset(&InitRBPhys_Params, 0, sizeof(InitRBPhys_Params));

	uFnInitRBPhys->iNative = 0;
	uFnInitRBPhys->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnInitRBPhys, &InitRBPhys_Params, nullptr);
	uFnInitRBPhys->FunctionFlags |= 0x400;
	uFnInitRBPhys->iNative = 21166;
};

// Function Engine.PrimitiveComponent.SetNotifyRigidBodyCollision
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25723])
// Parameter Info:
// uint32_t                       bNewNotifyRigidBodyCollision   (CPF_Parm)

void UPrimitiveComponent::SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision)
{
	static UFunction* uFnSetNotifyRigidBodyCollision = nullptr;

	if (!uFnSetNotifyRigidBodyCollision)
	{
		uFnSetNotifyRigidBodyCollision = UFunction::FindFunction("Function Engine.PrimitiveComponent.SetNotifyRigidBodyCollision");
	}

	UPrimitiveComponent_execSetNotifyRigidBodyCollision_Params SetNotifyRigidBodyCollision_Params;
	memset(&SetNotifyRigidBodyCollision_Params, 0, sizeof(SetNotifyRigidBodyCollision_Params));
	SetNotifyRigidBodyCollision_Params.bNewNotifyRigidBodyCollision = bNewNotifyRigidBodyCollision;

	uFnSetNotifyRigidBodyCollision->iNative = 0;
	uFnSetNotifyRigidBodyCollision->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetNotifyRigidBodyCollision, &SetNotifyRigidBodyCollision_Params, nullptr);
	uFnSetNotifyRigidBodyCollision->FunctionFlags |= 0x400;
	uFnSetNotifyRigidBodyCollision->iNative = 25723;
};

// Function Engine.PrimitiveComponent.SetRBChannel
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25757])
// Parameter Info:
// ERBCollisionChannel            Channel                        (CPF_Parm)

void UPrimitiveComponent::SetRBChannel(ERBCollisionChannel Channel)
{
	static UFunction* uFnSetRBChannel = nullptr;

	if (!uFnSetRBChannel)
	{
		uFnSetRBChannel = UFunction::FindFunction("Function Engine.PrimitiveComponent.SetRBChannel");
	}

	UPrimitiveComponent_execSetRBChannel_Params SetRBChannel_Params;
	memset(&SetRBChannel_Params, 0, sizeof(SetRBChannel_Params));
	memcpy_s(&SetRBChannel_Params.Channel, sizeof(SetRBChannel_Params.Channel), &Channel, sizeof(Channel));

	uFnSetRBChannel->iNative = 0;
	uFnSetRBChannel->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetRBChannel, &SetRBChannel_Params, nullptr);
	uFnSetRBChannel->FunctionFlags |= 0x400;
	uFnSetRBChannel->iNative = 25757;
};

// Function Engine.PrimitiveComponent.SetRBCollisionChannels
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25759])
// Parameter Info:
// struct FRBCollisionChannelContainer Channels                       (CPF_Parm)

void UPrimitiveComponent::SetRBCollisionChannels(const struct FRBCollisionChannelContainer& Channels)
{
	static UFunction* uFnSetRBCollisionChannels = nullptr;

	if (!uFnSetRBCollisionChannels)
	{
		uFnSetRBCollisionChannels = UFunction::FindFunction("Function Engine.PrimitiveComponent.SetRBCollisionChannels");
	}

	UPrimitiveComponent_execSetRBCollisionChannels_Params SetRBCollisionChannels_Params;
	memset(&SetRBCollisionChannels_Params, 0, sizeof(SetRBCollisionChannels_Params));
	memcpy_s(&SetRBCollisionChannels_Params.Channels, sizeof(SetRBCollisionChannels_Params.Channels), &Channels, sizeof(Channels));

	uFnSetRBCollisionChannels->iNative = 0;
	uFnSetRBCollisionChannels->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetRBCollisionChannels, &SetRBCollisionChannels_Params, nullptr);
	uFnSetRBCollisionChannels->FunctionFlags |= 0x400;
	uFnSetRBCollisionChannels->iNative = 25759;
};

// Function Engine.PrimitiveComponent.SetRBCollidesWithChannel
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25758])
// Parameter Info:
// ERBCollisionChannel            Channel                        (CPF_Parm)
// uint32_t                       bNewCollides                   (CPF_Parm)

void UPrimitiveComponent::SetRBCollidesWithChannel(ERBCollisionChannel Channel, bool bNewCollides)
{
	static UFunction* uFnSetRBCollidesWithChannel = nullptr;

	if (!uFnSetRBCollidesWithChannel)
	{
		uFnSetRBCollidesWithChannel = UFunction::FindFunction("Function Engine.PrimitiveComponent.SetRBCollidesWithChannel");
	}

	UPrimitiveComponent_execSetRBCollidesWithChannel_Params SetRBCollidesWithChannel_Params;
	memset(&SetRBCollidesWithChannel_Params, 0, sizeof(SetRBCollidesWithChannel_Params));
	memcpy_s(&SetRBCollidesWithChannel_Params.Channel, sizeof(SetRBCollidesWithChannel_Params.Channel), &Channel, sizeof(Channel));
	SetRBCollidesWithChannel_Params.bNewCollides = bNewCollides;

	uFnSetRBCollidesWithChannel->iNative = 0;
	uFnSetRBCollidesWithChannel->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetRBCollidesWithChannel, &SetRBCollidesWithChannel_Params, nullptr);
	uFnSetRBCollidesWithChannel->FunctionFlags |= 0x400;
	uFnSetRBCollidesWithChannel->iNative = 25758;
};

// Function Engine.PrimitiveComponent.SetBlockRigidBody
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25603])
// Parameter Info:
// uint32_t                       bNewBlockRigidBody             (CPF_Parm)

void UPrimitiveComponent::SetBlockRigidBody(bool bNewBlockRigidBody)
{
	static UFunction* uFnSetBlockRigidBody = nullptr;

	if (!uFnSetBlockRigidBody)
	{
		uFnSetBlockRigidBody = UFunction::FindFunction("Function Engine.PrimitiveComponent.SetBlockRigidBody");
	}

	UPrimitiveComponent_execSetBlockRigidBody_Params SetBlockRigidBody_Params;
	memset(&SetBlockRigidBody_Params, 0, sizeof(SetBlockRigidBody_Params));
	SetBlockRigidBody_Params.bNewBlockRigidBody = bNewBlockRigidBody;

	uFnSetBlockRigidBody->iNative = 0;
	uFnSetBlockRigidBody->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetBlockRigidBody, &SetBlockRigidBody_Params, nullptr);
	uFnSetBlockRigidBody->FunctionFlags |= 0x400;
	uFnSetBlockRigidBody->iNative = 25603;
};

// Function Engine.PrimitiveComponent.RigidBodyIsAwake_Debug
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[25215])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    BoneName                       (CPF_OptionalParm | CPF_Parm)

bool UPrimitiveComponent::RigidBodyIsAwake_Debug(const class FName& BoneName)
{
	static UFunction* uFnRigidBodyIsAwake_Debug = nullptr;

	if (!uFnRigidBodyIsAwake_Debug)
	{
		uFnRigidBodyIsAwake_Debug = UFunction::FindFunction("Function Engine.PrimitiveComponent.RigidBodyIsAwake_Debug");
	}

	UPrimitiveComponent_execRigidBodyIsAwake_Debug_Params RigidBodyIsAwake_Debug_Params;
	memset(&RigidBodyIsAwake_Debug_Params, 0, sizeof(RigidBodyIsAwake_Debug_Params));
	memcpy_s(&RigidBodyIsAwake_Debug_Params.BoneName, sizeof(RigidBodyIsAwake_Debug_Params.BoneName), &BoneName, sizeof(BoneName));

	uFnRigidBodyIsAwake_Debug->iNative = 0;
	uFnRigidBodyIsAwake_Debug->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnRigidBodyIsAwake_Debug, &RigidBodyIsAwake_Debug_Params, nullptr);
	uFnRigidBodyIsAwake_Debug->FunctionFlags |= 0x400;
	uFnRigidBodyIsAwake_Debug->iNative = 25215;

	return RigidBodyIsAwake_Debug_Params.ReturnValue;
};

// Function Engine.PrimitiveComponent.RigidBodyIsAwake
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25214])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UPrimitiveComponent::RigidBodyIsAwake()
{
	static UFunction* uFnRigidBodyIsAwake = nullptr;

	if (!uFnRigidBodyIsAwake)
	{
		uFnRigidBodyIsAwake = UFunction::FindFunction("Function Engine.PrimitiveComponent.RigidBodyIsAwake");
	}

	UPrimitiveComponent_execRigidBodyIsAwake_Params RigidBodyIsAwake_Params;
	memset(&RigidBodyIsAwake_Params, 0, sizeof(RigidBodyIsAwake_Params));

	uFnRigidBodyIsAwake->iNative = 0;
	uFnRigidBodyIsAwake->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnRigidBodyIsAwake, &RigidBodyIsAwake_Params, nullptr);
	uFnRigidBodyIsAwake->FunctionFlags |= 0x400;
	uFnRigidBodyIsAwake->iNative = 25214;

	return RigidBodyIsAwake_Params.ReturnValue;
};

// Function Engine.PrimitiveComponent.PutRigidBodyToSleep_Debug
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[24794])
// Parameter Info:
// class FName                    BoneName                       (CPF_OptionalParm | CPF_Parm)

void UPrimitiveComponent::PutRigidBodyToSleep_Debug(const class FName& BoneName)
{
	static UFunction* uFnPutRigidBodyToSleep_Debug = nullptr;

	if (!uFnPutRigidBodyToSleep_Debug)
	{
		uFnPutRigidBodyToSleep_Debug = UFunction::FindFunction("Function Engine.PrimitiveComponent.PutRigidBodyToSleep_Debug");
	}

	UPrimitiveComponent_execPutRigidBodyToSleep_Debug_Params PutRigidBodyToSleep_Debug_Params;
	memset(&PutRigidBodyToSleep_Debug_Params, 0, sizeof(PutRigidBodyToSleep_Debug_Params));
	memcpy_s(&PutRigidBodyToSleep_Debug_Params.BoneName, sizeof(PutRigidBodyToSleep_Debug_Params.BoneName), &BoneName, sizeof(BoneName));

	uFnPutRigidBodyToSleep_Debug->iNative = 0;
	uFnPutRigidBodyToSleep_Debug->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnPutRigidBodyToSleep_Debug, &PutRigidBodyToSleep_Debug_Params, nullptr);
	uFnPutRigidBodyToSleep_Debug->FunctionFlags |= 0x400;
	uFnPutRigidBodyToSleep_Debug->iNative = 24794;
};

// Function Engine.PrimitiveComponent.PutRigidBodyToSleep
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[24793])
// Parameter Info:

void UPrimitiveComponent::PutRigidBodyToSleep()
{
	static UFunction* uFnPutRigidBodyToSleep = nullptr;

	if (!uFnPutRigidBodyToSleep)
	{
		uFnPutRigidBodyToSleep = UFunction::FindFunction("Function Engine.PrimitiveComponent.PutRigidBodyToSleep");
	}

	UPrimitiveComponent_execPutRigidBodyToSleep_Params PutRigidBodyToSleep_Params;
	memset(&PutRigidBodyToSleep_Params, 0, sizeof(PutRigidBodyToSleep_Params));

	uFnPutRigidBodyToSleep->iNative = 0;
	uFnPutRigidBodyToSleep->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnPutRigidBodyToSleep, &PutRigidBodyToSleep_Params, nullptr);
	uFnPutRigidBodyToSleep->FunctionFlags |= 0x400;
	uFnPutRigidBodyToSleep->iNative = 24793;
};

// Function Engine.PrimitiveComponent.WakeRigidBody
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[27221])
// Parameter Info:
// class FName                    BoneName                       (CPF_OptionalParm | CPF_Parm)

void UPrimitiveComponent::WakeRigidBody(const class FName& BoneName)
{
	static UFunction* uFnWakeRigidBody = nullptr;

	if (!uFnWakeRigidBody)
	{
		uFnWakeRigidBody = UFunction::FindFunction("Function Engine.PrimitiveComponent.WakeRigidBody");
	}

	UPrimitiveComponent_execWakeRigidBody_Params WakeRigidBody_Params;
	memset(&WakeRigidBody_Params, 0, sizeof(WakeRigidBody_Params));
	memcpy_s(&WakeRigidBody_Params.BoneName, sizeof(WakeRigidBody_Params.BoneName), &BoneName, sizeof(BoneName));

	uFnWakeRigidBody->iNative = 0;
	uFnWakeRigidBody->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnWakeRigidBody, &WakeRigidBody_Params, nullptr);
	uFnWakeRigidBody->FunctionFlags |= 0x400;
	uFnWakeRigidBody->iNative = 27221;
};

// Function Engine.PrimitiveComponent.SetRBRotation_Debug
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[25765])
// Parameter Info:
// struct FRotator                NewRot                         (CPF_Parm)
// class FName                    BoneName                       (CPF_OptionalParm | CPF_Parm)

void UPrimitiveComponent::SetRBRotation_Debug(const struct FRotator& NewRot, const class FName& BoneName)
{
	static UFunction* uFnSetRBRotation_Debug = nullptr;

	if (!uFnSetRBRotation_Debug)
	{
		uFnSetRBRotation_Debug = UFunction::FindFunction("Function Engine.PrimitiveComponent.SetRBRotation_Debug");
	}

	UPrimitiveComponent_execSetRBRotation_Debug_Params SetRBRotation_Debug_Params;
	memset(&SetRBRotation_Debug_Params, 0, sizeof(SetRBRotation_Debug_Params));
	memcpy_s(&SetRBRotation_Debug_Params.NewRot, sizeof(SetRBRotation_Debug_Params.NewRot), &NewRot, sizeof(NewRot));
	memcpy_s(&SetRBRotation_Debug_Params.BoneName, sizeof(SetRBRotation_Debug_Params.BoneName), &BoneName, sizeof(BoneName));

	uFnSetRBRotation_Debug->iNative = 0;
	uFnSetRBRotation_Debug->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetRBRotation_Debug, &SetRBRotation_Debug_Params, nullptr);
	uFnSetRBRotation_Debug->FunctionFlags |= 0x400;
	uFnSetRBRotation_Debug->iNative = 25765;
};

// Function Engine.PrimitiveComponent.SetRBRotation
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25764])
// Parameter Info:
// struct FRotator                NewRot                         (CPF_Parm)

void UPrimitiveComponent::SetRBRotation(const struct FRotator& NewRot)
{
	static UFunction* uFnSetRBRotation = nullptr;

	if (!uFnSetRBRotation)
	{
		uFnSetRBRotation = UFunction::FindFunction("Function Engine.PrimitiveComponent.SetRBRotation");
	}

	UPrimitiveComponent_execSetRBRotation_Params SetRBRotation_Params;
	memset(&SetRBRotation_Params, 0, sizeof(SetRBRotation_Params));
	memcpy_s(&SetRBRotation_Params.NewRot, sizeof(SetRBRotation_Params.NewRot), &NewRot, sizeof(NewRot));

	uFnSetRBRotation->iNative = 0;
	uFnSetRBRotation->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetRBRotation, &SetRBRotation_Params, nullptr);
	uFnSetRBRotation->FunctionFlags |= 0x400;
	uFnSetRBRotation->iNative = 25764;
};

// Function Engine.PrimitiveComponent.SetRBPosition_Debug
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[25763])
// Parameter Info:
// struct FVector                 NewPos                         (CPF_Parm)
// class FName                    BoneName                       (CPF_OptionalParm | CPF_Parm)

void UPrimitiveComponent::SetRBPosition_Debug(const struct FVector& NewPos, const class FName& BoneName)
{
	static UFunction* uFnSetRBPosition_Debug = nullptr;

	if (!uFnSetRBPosition_Debug)
	{
		uFnSetRBPosition_Debug = UFunction::FindFunction("Function Engine.PrimitiveComponent.SetRBPosition_Debug");
	}

	UPrimitiveComponent_execSetRBPosition_Debug_Params SetRBPosition_Debug_Params;
	memset(&SetRBPosition_Debug_Params, 0, sizeof(SetRBPosition_Debug_Params));
	memcpy_s(&SetRBPosition_Debug_Params.NewPos, sizeof(SetRBPosition_Debug_Params.NewPos), &NewPos, sizeof(NewPos));
	memcpy_s(&SetRBPosition_Debug_Params.BoneName, sizeof(SetRBPosition_Debug_Params.BoneName), &BoneName, sizeof(BoneName));

	uFnSetRBPosition_Debug->iNative = 0;
	uFnSetRBPosition_Debug->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetRBPosition_Debug, &SetRBPosition_Debug_Params, nullptr);
	uFnSetRBPosition_Debug->FunctionFlags |= 0x400;
	uFnSetRBPosition_Debug->iNative = 25763;
};

// Function Engine.PrimitiveComponent.SetRBPosition
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25762])
// Parameter Info:
// struct FVector                 NewPos                         (CPF_Parm)

void UPrimitiveComponent::SetRBPosition(const struct FVector& NewPos)
{
	static UFunction* uFnSetRBPosition = nullptr;

	if (!uFnSetRBPosition)
	{
		uFnSetRBPosition = UFunction::FindFunction("Function Engine.PrimitiveComponent.SetRBPosition");
	}

	UPrimitiveComponent_execSetRBPosition_Params SetRBPosition_Params;
	memset(&SetRBPosition_Params, 0, sizeof(SetRBPosition_Params));
	memcpy_s(&SetRBPosition_Params.NewPos, sizeof(SetRBPosition_Params.NewPos), &NewPos, sizeof(NewPos));

	uFnSetRBPosition->iNative = 0;
	uFnSetRBPosition->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetRBPosition, &SetRBPosition_Params, nullptr);
	uFnSetRBPosition->FunctionFlags |= 0x400;
	uFnSetRBPosition->iNative = 25762;
};

// Function Engine.PrimitiveComponent.RetardRBLinearVelocity
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25184])
// Parameter Info:
// struct FVector                 RetardDir                      (CPF_Parm)
// float                          VelScale                       (CPF_Parm)

void UPrimitiveComponent::RetardRBLinearVelocity(const struct FVector& RetardDir, float VelScale)
{
	static UFunction* uFnRetardRBLinearVelocity = nullptr;

	if (!uFnRetardRBLinearVelocity)
	{
		uFnRetardRBLinearVelocity = UFunction::FindFunction("Function Engine.PrimitiveComponent.RetardRBLinearVelocity");
	}

	UPrimitiveComponent_execRetardRBLinearVelocity_Params RetardRBLinearVelocity_Params;
	memset(&RetardRBLinearVelocity_Params, 0, sizeof(RetardRBLinearVelocity_Params));
	memcpy_s(&RetardRBLinearVelocity_Params.RetardDir, sizeof(RetardRBLinearVelocity_Params.RetardDir), &RetardDir, sizeof(RetardDir));
	memcpy_s(&RetardRBLinearVelocity_Params.VelScale, sizeof(RetardRBLinearVelocity_Params.VelScale), &VelScale, sizeof(VelScale));

	uFnRetardRBLinearVelocity->iNative = 0;
	uFnRetardRBLinearVelocity->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnRetardRBLinearVelocity, &RetardRBLinearVelocity_Params, nullptr);
	uFnRetardRBLinearVelocity->FunctionFlags |= 0x400;
	uFnRetardRBLinearVelocity->iNative = 25184;
};

// Function Engine.PrimitiveComponent.SetRBAngularVelocity
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[25756])
// Parameter Info:
// struct FVector                 NewAngVel                      (CPF_Parm)
// uint32_t                       bAddToCurrent                  (CPF_OptionalParm | CPF_Parm)

void UPrimitiveComponent::SetRBAngularVelocity(const struct FVector& NewAngVel, bool bAddToCurrent)
{
	static UFunction* uFnSetRBAngularVelocity = nullptr;

	if (!uFnSetRBAngularVelocity)
	{
		uFnSetRBAngularVelocity = UFunction::FindFunction("Function Engine.PrimitiveComponent.SetRBAngularVelocity");
	}

	UPrimitiveComponent_execSetRBAngularVelocity_Params SetRBAngularVelocity_Params;
	memset(&SetRBAngularVelocity_Params, 0, sizeof(SetRBAngularVelocity_Params));
	memcpy_s(&SetRBAngularVelocity_Params.NewAngVel, sizeof(SetRBAngularVelocity_Params.NewAngVel), &NewAngVel, sizeof(NewAngVel));
	SetRBAngularVelocity_Params.bAddToCurrent = bAddToCurrent;

	uFnSetRBAngularVelocity->iNative = 0;
	uFnSetRBAngularVelocity->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetRBAngularVelocity, &SetRBAngularVelocity_Params, nullptr);
	uFnSetRBAngularVelocity->FunctionFlags |= 0x400;
	uFnSetRBAngularVelocity->iNative = 25756;
};

// Function Engine.PrimitiveComponent.SetRBLinearVelocity
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[25761])
// Parameter Info:
// struct FVector                 NewVel                         (CPF_Parm)
// uint32_t                       bAddToCurrent                  (CPF_OptionalParm | CPF_Parm)

void UPrimitiveComponent::SetRBLinearVelocity(const struct FVector& NewVel, bool bAddToCurrent)
{
	static UFunction* uFnSetRBLinearVelocity = nullptr;

	if (!uFnSetRBLinearVelocity)
	{
		uFnSetRBLinearVelocity = UFunction::FindFunction("Function Engine.PrimitiveComponent.SetRBLinearVelocity");
	}

	UPrimitiveComponent_execSetRBLinearVelocity_Params SetRBLinearVelocity_Params;
	memset(&SetRBLinearVelocity_Params, 0, sizeof(SetRBLinearVelocity_Params));
	memcpy_s(&SetRBLinearVelocity_Params.NewVel, sizeof(SetRBLinearVelocity_Params.NewVel), &NewVel, sizeof(NewVel));
	SetRBLinearVelocity_Params.bAddToCurrent = bAddToCurrent;

	uFnSetRBLinearVelocity->iNative = 0;
	uFnSetRBLinearVelocity->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetRBLinearVelocity, &SetRBLinearVelocity_Params, nullptr);
	uFnSetRBLinearVelocity->FunctionFlags |= 0x400;
	uFnSetRBLinearVelocity->iNative = 25761;
};

// Function Engine.PrimitiveComponent.AddTorque
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[15375])
// Parameter Info:
// struct FVector                 Torque                         (CPF_Parm)
// class FName                    BoneName                       (CPF_OptionalParm | CPF_Parm)

void UPrimitiveComponent::AddTorque(const struct FVector& Torque, const class FName& BoneName)
{
	static UFunction* uFnAddTorque = nullptr;

	if (!uFnAddTorque)
	{
		uFnAddTorque = UFunction::FindFunction("Function Engine.PrimitiveComponent.AddTorque");
	}

	UPrimitiveComponent_execAddTorque_Params AddTorque_Params;
	memset(&AddTorque_Params, 0, sizeof(AddTorque_Params));
	memcpy_s(&AddTorque_Params.Torque, sizeof(AddTorque_Params.Torque), &Torque, sizeof(Torque));
	memcpy_s(&AddTorque_Params.BoneName, sizeof(AddTorque_Params.BoneName), &BoneName, sizeof(BoneName));

	uFnAddTorque->iNative = 0;
	uFnAddTorque->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnAddTorque, &AddTorque_Params, nullptr);
	uFnAddTorque->FunctionFlags |= 0x400;
	uFnAddTorque->iNative = 15375;
};

// Function Engine.PrimitiveComponent.AddRadialForce
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[15346])
// Parameter Info:
// struct FVector                 Origin                         (CPF_Parm)
// float                          Radius                         (CPF_Parm)
// float                          Strength                       (CPF_Parm)
// ERadialImpulseFalloff          Falloff                        (CPF_Parm)

void UPrimitiveComponent::AddRadialForce(const struct FVector& Origin, float Radius, float Strength, ERadialImpulseFalloff Falloff)
{
	static UFunction* uFnAddRadialForce = nullptr;

	if (!uFnAddRadialForce)
	{
		uFnAddRadialForce = UFunction::FindFunction("Function Engine.PrimitiveComponent.AddRadialForce");
	}

	UPrimitiveComponent_execAddRadialForce_Params AddRadialForce_Params;
	memset(&AddRadialForce_Params, 0, sizeof(AddRadialForce_Params));
	memcpy_s(&AddRadialForce_Params.Origin, sizeof(AddRadialForce_Params.Origin), &Origin, sizeof(Origin));
	memcpy_s(&AddRadialForce_Params.Radius, sizeof(AddRadialForce_Params.Radius), &Radius, sizeof(Radius));
	memcpy_s(&AddRadialForce_Params.Strength, sizeof(AddRadialForce_Params.Strength), &Strength, sizeof(Strength));
	memcpy_s(&AddRadialForce_Params.Falloff, sizeof(AddRadialForce_Params.Falloff), &Falloff, sizeof(Falloff));

	uFnAddRadialForce->iNative = 0;
	uFnAddRadialForce->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnAddRadialForce, &AddRadialForce_Params, nullptr);
	uFnAddRadialForce->FunctionFlags |= 0x400;
	uFnAddRadialForce->iNative = 15346;
};

// Function Engine.PrimitiveComponent.AddForce
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[15309])
// Parameter Info:
// struct FVector                 Force                          (CPF_Parm)
// struct FVector                 Position                       (CPF_OptionalParm | CPF_Parm)
// class FName                    BoneName                       (CPF_OptionalParm | CPF_Parm)

void UPrimitiveComponent::AddForce(const struct FVector& Force, const struct FVector& Position, const class FName& BoneName)
{
	static UFunction* uFnAddForce = nullptr;

	if (!uFnAddForce)
	{
		uFnAddForce = UFunction::FindFunction("Function Engine.PrimitiveComponent.AddForce");
	}

	UPrimitiveComponent_execAddForce_Params AddForce_Params;
	memset(&AddForce_Params, 0, sizeof(AddForce_Params));
	memcpy_s(&AddForce_Params.Force, sizeof(AddForce_Params.Force), &Force, sizeof(Force));
	memcpy_s(&AddForce_Params.Position, sizeof(AddForce_Params.Position), &Position, sizeof(Position));
	memcpy_s(&AddForce_Params.BoneName, sizeof(AddForce_Params.BoneName), &BoneName, sizeof(BoneName));

	uFnAddForce->iNative = 0;
	uFnAddForce->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnAddForce, &AddForce_Params, nullptr);
	uFnAddForce->FunctionFlags |= 0x400;
	uFnAddForce->iNative = 15309;
};

// Function Engine.PrimitiveComponent.AddRadialImpulse
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[15347])
// Parameter Info:
// struct FVector                 Origin                         (CPF_Parm)
// float                          Radius                         (CPF_Parm)
// float                          Strength                       (CPF_Parm)
// ERadialImpulseFalloff          Falloff                        (CPF_Parm)
// uint32_t                       bVelChange                     (CPF_OptionalParm | CPF_Parm)

void UPrimitiveComponent::AddRadialImpulse(const struct FVector& Origin, float Radius, float Strength, ERadialImpulseFalloff Falloff, bool bVelChange)
{
	static UFunction* uFnAddRadialImpulse = nullptr;

	if (!uFnAddRadialImpulse)
	{
		uFnAddRadialImpulse = UFunction::FindFunction("Function Engine.PrimitiveComponent.AddRadialImpulse");
	}

	UPrimitiveComponent_execAddRadialImpulse_Params AddRadialImpulse_Params;
	memset(&AddRadialImpulse_Params, 0, sizeof(AddRadialImpulse_Params));
	memcpy_s(&AddRadialImpulse_Params.Origin, sizeof(AddRadialImpulse_Params.Origin), &Origin, sizeof(Origin));
	memcpy_s(&AddRadialImpulse_Params.Radius, sizeof(AddRadialImpulse_Params.Radius), &Radius, sizeof(Radius));
	memcpy_s(&AddRadialImpulse_Params.Strength, sizeof(AddRadialImpulse_Params.Strength), &Strength, sizeof(Strength));
	memcpy_s(&AddRadialImpulse_Params.Falloff, sizeof(AddRadialImpulse_Params.Falloff), &Falloff, sizeof(Falloff));
	AddRadialImpulse_Params.bVelChange = bVelChange;

	uFnAddRadialImpulse->iNative = 0;
	uFnAddRadialImpulse->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnAddRadialImpulse, &AddRadialImpulse_Params, nullptr);
	uFnAddRadialImpulse->FunctionFlags |= 0x400;
	uFnAddRadialImpulse->iNative = 15347;
};

// Function Engine.PrimitiveComponent.AddImpulse
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[15311])
// Parameter Info:
// struct FVector                 Impulse                        (CPF_Parm)
// struct FVector                 Position                       (CPF_OptionalParm | CPF_Parm)
// class FName                    BoneName                       (CPF_OptionalParm | CPF_Parm)
// uint32_t                       bVelChange                     (CPF_OptionalParm | CPF_Parm)

void UPrimitiveComponent::AddImpulse(const struct FVector& Impulse, const struct FVector& Position, const class FName& BoneName, bool bVelChange)
{
	static UFunction* uFnAddImpulse = nullptr;

	if (!uFnAddImpulse)
	{
		uFnAddImpulse = UFunction::FindFunction("Function Engine.PrimitiveComponent.AddImpulse");
	}

	UPrimitiveComponent_execAddImpulse_Params AddImpulse_Params;
	memset(&AddImpulse_Params, 0, sizeof(AddImpulse_Params));
	memcpy_s(&AddImpulse_Params.Impulse, sizeof(AddImpulse_Params.Impulse), &Impulse, sizeof(Impulse));
	memcpy_s(&AddImpulse_Params.Position, sizeof(AddImpulse_Params.Position), &Position, sizeof(Position));
	memcpy_s(&AddImpulse_Params.BoneName, sizeof(AddImpulse_Params.BoneName), &BoneName, sizeof(BoneName));
	AddImpulse_Params.bVelChange = bVelChange;

	uFnAddImpulse->iNative = 0;
	uFnAddImpulse->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnAddImpulse, &AddImpulse_Params, nullptr);
	uFnAddImpulse->FunctionFlags |= 0x400;
	uFnAddImpulse->iNative = 15311;
};

// Function Engine.CylinderComponent.SetCylinderSize
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25630])
// Parameter Info:
// float                          NewRadius                      (CPF_Parm)
// float                          NewHeight                      (CPF_Parm)

void UCylinderComponent::SetCylinderSize(float NewRadius, float NewHeight)
{
	static UFunction* uFnSetCylinderSize = nullptr;

	if (!uFnSetCylinderSize)
	{
		uFnSetCylinderSize = UFunction::FindFunction("Function Engine.CylinderComponent.SetCylinderSize");
	}

	UCylinderComponent_execSetCylinderSize_Params SetCylinderSize_Params;
	memset(&SetCylinderSize_Params, 0, sizeof(SetCylinderSize_Params));
	memcpy_s(&SetCylinderSize_Params.NewRadius, sizeof(SetCylinderSize_Params.NewRadius), &NewRadius, sizeof(NewRadius));
	memcpy_s(&SetCylinderSize_Params.NewHeight, sizeof(SetCylinderSize_Params.NewHeight), &NewHeight, sizeof(NewHeight));

	uFnSetCylinderSize->iNative = 0;
	uFnSetCylinderSize->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetCylinderSize, &SetCylinderSize_Params, nullptr);
	uFnSetCylinderSize->FunctionFlags |= 0x400;
	uFnSetCylinderSize->iNative = 25630;
};

// Function Engine.MeshComponent.PrestreamTextures
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[24481])
// Parameter Info:
// float                          Seconds                        (CPF_Parm)
// uint32_t                       bPrioritizeCharacterTextures   (CPF_Parm)
// int32_t                        CinematicTextureGroups         (CPF_OptionalParm | CPF_Parm)

void UMeshComponent::PrestreamTextures(float Seconds, bool bPrioritizeCharacterTextures, int32_t CinematicTextureGroups)
{
	static UFunction* uFnPrestreamTextures = nullptr;

	if (!uFnPrestreamTextures)
	{
		uFnPrestreamTextures = UFunction::FindFunction("Function Engine.MeshComponent.PrestreamTextures");
	}

	UMeshComponent_execPrestreamTextures_Params PrestreamTextures_Params;
	memset(&PrestreamTextures_Params, 0, sizeof(PrestreamTextures_Params));
	memcpy_s(&PrestreamTextures_Params.Seconds, sizeof(PrestreamTextures_Params.Seconds), &Seconds, sizeof(Seconds));
	PrestreamTextures_Params.bPrioritizeCharacterTextures = bPrioritizeCharacterTextures;
	memcpy_s(&PrestreamTextures_Params.CinematicTextureGroups, sizeof(PrestreamTextures_Params.CinematicTextureGroups), &CinematicTextureGroups, sizeof(CinematicTextureGroups));

	uFnPrestreamTextures->iNative = 0;
	uFnPrestreamTextures->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnPrestreamTextures, &PrestreamTextures_Params, nullptr);
	uFnPrestreamTextures->FunctionFlags |= 0x400;
	uFnPrestreamTextures->iNative = 24481;
};

// Function Engine.MeshComponent.GetNumElements
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20654])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t UMeshComponent::GetNumElements()
{
	static UFunction* uFnGetNumElements = nullptr;

	if (!uFnGetNumElements)
	{
		uFnGetNumElements = UFunction::FindFunction("Function Engine.MeshComponent.GetNumElements");
	}

	UMeshComponent_execGetNumElements_Params GetNumElements_Params;
	memset(&GetNumElements_Params, 0, sizeof(GetNumElements_Params));

	uFnGetNumElements->iNative = 0;
	uFnGetNumElements->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetNumElements, &GetNumElements_Params, nullptr);
	uFnGetNumElements->FunctionFlags |= 0x400;
	uFnGetNumElements->iNative = 20654;

	return GetNumElements_Params.ReturnValue;
};

// Function Engine.MeshComponent.SetMaterial
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25709])
// Parameter Info:
// int32_t                        ElementIndex                   (CPF_Parm)
// class UMaterialInterface*      Material                       (CPF_Parm)

void UMeshComponent::SetMaterial(int32_t ElementIndex, class UMaterialInterface* Material)
{
	static UFunction* uFnSetMaterial = nullptr;

	if (!uFnSetMaterial)
	{
		uFnSetMaterial = UFunction::FindFunction("Function Engine.MeshComponent.SetMaterial");
	}

	UMeshComponent_execSetMaterial_Params SetMaterial_Params;
	memset(&SetMaterial_Params, 0, sizeof(SetMaterial_Params));
	memcpy_s(&SetMaterial_Params.ElementIndex, sizeof(SetMaterial_Params.ElementIndex), &ElementIndex, sizeof(ElementIndex));
	SetMaterial_Params.Material = Material;

	uFnSetMaterial->iNative = 0;
	uFnSetMaterial->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetMaterial, &SetMaterial_Params, nullptr);
	uFnSetMaterial->FunctionFlags |= 0x400;
	uFnSetMaterial->iNative = 25709;
};

// Function Engine.MeshComponent.GetMaterial
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20637])
// Parameter Info:
// class UMaterialInterface*      ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        ElementIndex                   (CPF_Parm)

class UMaterialInterface* UMeshComponent::GetMaterial(int32_t ElementIndex)
{
	static UFunction* uFnGetMaterial = nullptr;

	if (!uFnGetMaterial)
	{
		uFnGetMaterial = UFunction::FindFunction("Function Engine.MeshComponent.GetMaterial");
	}

	UMeshComponent_execGetMaterial_Params GetMaterial_Params;
	memset(&GetMaterial_Params, 0, sizeof(GetMaterial_Params));
	memcpy_s(&GetMaterial_Params.ElementIndex, sizeof(GetMaterial_Params.ElementIndex), &ElementIndex, sizeof(ElementIndex));

	uFnGetMaterial->iNative = 0;
	uFnGetMaterial->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetMaterial, &GetMaterial_Params, nullptr);
	uFnGetMaterial->FunctionFlags |= 0x400;
	uFnGetMaterial->iNative = 20637;

	return GetMaterial_Params.ReturnValue;
};

// Function Engine.StaticMeshComponent.CanBecomeDynamic
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[17941])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UStaticMeshComponent::CanBecomeDynamic()
{
	static UFunction* uFnCanBecomeDynamic = nullptr;

	if (!uFnCanBecomeDynamic)
	{
		uFnCanBecomeDynamic = UFunction::FindFunction("Function Engine.StaticMeshComponent.CanBecomeDynamic");
	}

	UStaticMeshComponent_execCanBecomeDynamic_Params CanBecomeDynamic_Params;
	memset(&CanBecomeDynamic_Params, 0, sizeof(CanBecomeDynamic_Params));

	uFnCanBecomeDynamic->iNative = 0;
	uFnCanBecomeDynamic->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnCanBecomeDynamic, &CanBecomeDynamic_Params, nullptr);
	uFnCanBecomeDynamic->FunctionFlags |= 0x400;
	uFnCanBecomeDynamic->iNative = 17941;

	return CanBecomeDynamic_Params.ReturnValue;
};

// Function Engine.StaticMeshComponent.SetForceStaticDecals
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25664])
// Parameter Info:
// uint32_t                       bInForceStaticDecals           (CPF_Parm)

void UStaticMeshComponent::SetForceStaticDecals(bool bInForceStaticDecals)
{
	static UFunction* uFnSetForceStaticDecals = nullptr;

	if (!uFnSetForceStaticDecals)
	{
		uFnSetForceStaticDecals = UFunction::FindFunction("Function Engine.StaticMeshComponent.SetForceStaticDecals");
	}

	UStaticMeshComponent_execSetForceStaticDecals_Params SetForceStaticDecals_Params;
	memset(&SetForceStaticDecals_Params, 0, sizeof(SetForceStaticDecals_Params));
	SetForceStaticDecals_Params.bInForceStaticDecals = bInForceStaticDecals;

	uFnSetForceStaticDecals->iNative = 0;
	uFnSetForceStaticDecals->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetForceStaticDecals, &SetForceStaticDecals_Params, nullptr);
	uFnSetForceStaticDecals->FunctionFlags |= 0x400;
	uFnSetForceStaticDecals->iNative = 25664;
};

// Function Engine.StaticMeshComponent.DisableRBCollisionWithSMC
// [0x00020500] (FUNC_Simulated | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[18951])
// Parameter Info:
// class UPrimitiveComponent*     OtherSMC                       (CPF_Parm | CPF_EditInline)
// uint32_t                       bDisabled                      (CPF_Parm)

void UStaticMeshComponent::DisableRBCollisionWithSMC(class UPrimitiveComponent* OtherSMC, bool bDisabled)
{
	static UFunction* uFnDisableRBCollisionWithSMC = nullptr;

	if (!uFnDisableRBCollisionWithSMC)
	{
		uFnDisableRBCollisionWithSMC = UFunction::FindFunction("Function Engine.StaticMeshComponent.DisableRBCollisionWithSMC");
	}

	UStaticMeshComponent_execDisableRBCollisionWithSMC_Params DisableRBCollisionWithSMC_Params;
	memset(&DisableRBCollisionWithSMC_Params, 0, sizeof(DisableRBCollisionWithSMC_Params));
	DisableRBCollisionWithSMC_Params.OtherSMC = OtherSMC;
	DisableRBCollisionWithSMC_Params.bDisabled = bDisabled;

	uFnDisableRBCollisionWithSMC->iNative = 0;
	uFnDisableRBCollisionWithSMC->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnDisableRBCollisionWithSMC, &DisableRBCollisionWithSMC_Params, nullptr);
	uFnDisableRBCollisionWithSMC->FunctionFlags |= 0x400;
	uFnDisableRBCollisionWithSMC->iNative = 18951;
};

// Function Engine.StaticMeshComponent.SetStaticMesh
// [0x00024500] (FUNC_Simulated | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[25802])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UStaticMesh*             NewMesh                        (CPF_Parm)
// uint32_t                       bForce                         (CPF_OptionalParm | CPF_Parm)
// uint32_t                       bKeepPhysics                   (CPF_OptionalParm | CPF_Parm)

bool UStaticMeshComponent::SetStaticMesh(class UStaticMesh* NewMesh, bool bForce, bool bKeepPhysics)
{
	static UFunction* uFnSetStaticMesh = nullptr;

	if (!uFnSetStaticMesh)
	{
		uFnSetStaticMesh = UFunction::FindFunction("Function Engine.StaticMeshComponent.SetStaticMesh");
	}

	UStaticMeshComponent_execSetStaticMesh_Params SetStaticMesh_Params;
	memset(&SetStaticMesh_Params, 0, sizeof(SetStaticMesh_Params));
	SetStaticMesh_Params.NewMesh = NewMesh;
	SetStaticMesh_Params.bForce = bForce;
	SetStaticMesh_Params.bKeepPhysics = bKeepPhysics;

	uFnSetStaticMesh->iNative = 0;
	uFnSetStaticMesh->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetStaticMesh, &SetStaticMesh_Params, nullptr);
	uFnSetStaticMesh->FunctionFlags |= 0x400;
	uFnSetStaticMesh->iNative = 25802;

	return SetStaticMesh_Params.ReturnValue;
};

// Function Engine.SpriteComponent.SetSpriteAndUV
// [0x00020500] (FUNC_Simulated | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25800])
// Parameter Info:
// class UTexture2D*              NewSprite                      (CPF_Parm)
// int32_t                        NewU                           (CPF_Parm)
// int32_t                        NewUL                          (CPF_Parm)
// int32_t                        NewV                           (CPF_Parm)
// int32_t                        NewVL                          (CPF_Parm)

void USpriteComponent::SetSpriteAndUV(class UTexture2D* NewSprite, int32_t NewU, int32_t NewUL, int32_t NewV, int32_t NewVL)
{
	static UFunction* uFnSetSpriteAndUV = nullptr;

	if (!uFnSetSpriteAndUV)
	{
		uFnSetSpriteAndUV = UFunction::FindFunction("Function Engine.SpriteComponent.SetSpriteAndUV");
	}

	USpriteComponent_execSetSpriteAndUV_Params SetSpriteAndUV_Params;
	memset(&SetSpriteAndUV_Params, 0, sizeof(SetSpriteAndUV_Params));
	SetSpriteAndUV_Params.NewSprite = NewSprite;
	memcpy_s(&SetSpriteAndUV_Params.NewU, sizeof(SetSpriteAndUV_Params.NewU), &NewU, sizeof(NewU));
	memcpy_s(&SetSpriteAndUV_Params.NewUL, sizeof(SetSpriteAndUV_Params.NewUL), &NewUL, sizeof(NewUL));
	memcpy_s(&SetSpriteAndUV_Params.NewV, sizeof(SetSpriteAndUV_Params.NewV), &NewV, sizeof(NewV));
	memcpy_s(&SetSpriteAndUV_Params.NewVL, sizeof(SetSpriteAndUV_Params.NewVL), &NewVL, sizeof(NewVL));

	uFnSetSpriteAndUV->iNative = 0;
	uFnSetSpriteAndUV->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetSpriteAndUV, &SetSpriteAndUV_Params, nullptr);
	uFnSetSpriteAndUV->FunctionFlags |= 0x400;
	uFnSetSpriteAndUV->iNative = 25800;
};

// Function Engine.SpriteComponent.SetUV
// [0x00020500] (FUNC_Simulated | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25832])
// Parameter Info:
// int32_t                        NewU                           (CPF_Parm)
// int32_t                        NewUL                          (CPF_Parm)
// int32_t                        NewV                           (CPF_Parm)
// int32_t                        NewVL                          (CPF_Parm)

void USpriteComponent::SetUV(int32_t NewU, int32_t NewUL, int32_t NewV, int32_t NewVL)
{
	static UFunction* uFnSetUV = nullptr;

	if (!uFnSetUV)
	{
		uFnSetUV = UFunction::FindFunction("Function Engine.SpriteComponent.SetUV");
	}

	USpriteComponent_execSetUV_Params SetUV_Params;
	memset(&SetUV_Params, 0, sizeof(SetUV_Params));
	memcpy_s(&SetUV_Params.NewU, sizeof(SetUV_Params.NewU), &NewU, sizeof(NewU));
	memcpy_s(&SetUV_Params.NewUL, sizeof(SetUV_Params.NewUL), &NewUL, sizeof(NewUL));
	memcpy_s(&SetUV_Params.NewV, sizeof(SetUV_Params.NewV), &NewV, sizeof(NewV));
	memcpy_s(&SetUV_Params.NewVL, sizeof(SetUV_Params.NewVL), &NewVL, sizeof(NewVL));

	uFnSetUV->iNative = 0;
	uFnSetUV->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetUV, &SetUV_Params, nullptr);
	uFnSetUV->FunctionFlags |= 0x400;
	uFnSetUV->iNative = 25832;
};

// Function Engine.SpriteComponent.SetSprite
// [0x00020500] (FUNC_Simulated | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25799])
// Parameter Info:
// class UTexture2D*              NewSprite                      (CPF_Parm)

void USpriteComponent::SetSprite(class UTexture2D* NewSprite)
{
	static UFunction* uFnSetSprite = nullptr;

	if (!uFnSetSprite)
	{
		uFnSetSprite = UFunction::FindFunction("Function Engine.SpriteComponent.SetSprite");
	}

	USpriteComponent_execSetSprite_Params SetSprite_Params;
	memset(&SetSprite_Params, 0, sizeof(SetSprite_Params));
	SetSprite_Params.NewSprite = NewSprite;

	uFnSetSprite->iNative = 0;
	uFnSetSprite->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetSprite, &SetSprite_Params, nullptr);
	uFnSetSprite->FunctionFlags |= 0x400;
	uFnSetSprite->iNative = 25799;
};

// Function Engine.RadialBlurComponent.OnUpdatePropertyBlurOpacity
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void URadialBlurComponent::OnUpdatePropertyBlurOpacity()
{
	static UFunction* uFnOnUpdatePropertyBlurOpacity = nullptr;

	if (!uFnOnUpdatePropertyBlurOpacity)
	{
		uFnOnUpdatePropertyBlurOpacity = UFunction::FindFunction("Function Engine.RadialBlurComponent.OnUpdatePropertyBlurOpacity");
	}

	URadialBlurComponent_execOnUpdatePropertyBlurOpacity_Params OnUpdatePropertyBlurOpacity_Params;
	memset(&OnUpdatePropertyBlurOpacity_Params, 0, sizeof(OnUpdatePropertyBlurOpacity_Params));

	this->ProcessEvent(uFnOnUpdatePropertyBlurOpacity, &OnUpdatePropertyBlurOpacity_Params, nullptr);
};

// Function Engine.RadialBlurComponent.OnUpdatePropertyBlurFalloffExponent
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void URadialBlurComponent::OnUpdatePropertyBlurFalloffExponent()
{
	static UFunction* uFnOnUpdatePropertyBlurFalloffExponent = nullptr;

	if (!uFnOnUpdatePropertyBlurFalloffExponent)
	{
		uFnOnUpdatePropertyBlurFalloffExponent = UFunction::FindFunction("Function Engine.RadialBlurComponent.OnUpdatePropertyBlurFalloffExponent");
	}

	URadialBlurComponent_execOnUpdatePropertyBlurFalloffExponent_Params OnUpdatePropertyBlurFalloffExponent_Params;
	memset(&OnUpdatePropertyBlurFalloffExponent_Params, 0, sizeof(OnUpdatePropertyBlurFalloffExponent_Params));

	this->ProcessEvent(uFnOnUpdatePropertyBlurFalloffExponent, &OnUpdatePropertyBlurFalloffExponent_Params, nullptr);
};

// Function Engine.RadialBlurComponent.OnUpdatePropertyBlurScale
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void URadialBlurComponent::OnUpdatePropertyBlurScale()
{
	static UFunction* uFnOnUpdatePropertyBlurScale = nullptr;

	if (!uFnOnUpdatePropertyBlurScale)
	{
		uFnOnUpdatePropertyBlurScale = UFunction::FindFunction("Function Engine.RadialBlurComponent.OnUpdatePropertyBlurScale");
	}

	URadialBlurComponent_execOnUpdatePropertyBlurScale_Params OnUpdatePropertyBlurScale_Params;
	memset(&OnUpdatePropertyBlurScale_Params, 0, sizeof(OnUpdatePropertyBlurScale_Params));

	this->ProcessEvent(uFnOnUpdatePropertyBlurScale, &OnUpdatePropertyBlurScale_Params, nullptr);
};

// Function Engine.RadialBlurComponent.SetEnabled
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13734])
// Parameter Info:
// uint32_t                       bInEnabled                     (CPF_Parm)

void URadialBlurComponent::SetEnabled(bool bInEnabled)
{
	static UFunction* uFnSetEnabled = nullptr;

	if (!uFnSetEnabled)
	{
		uFnSetEnabled = UFunction::FindFunction("Function Engine.RadialBlurComponent.SetEnabled");
	}

	URadialBlurComponent_execSetEnabled_Params SetEnabled_Params;
	memset(&SetEnabled_Params, 0, sizeof(SetEnabled_Params));
	SetEnabled_Params.bInEnabled = bInEnabled;

	uFnSetEnabled->iNative = 0;
	uFnSetEnabled->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetEnabled, &SetEnabled_Params, nullptr);
	uFnSetEnabled->FunctionFlags |= 0x400;
	uFnSetEnabled->iNative = 13734;
};

// Function Engine.RadialBlurComponent.SetBlurOpacity
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25605])
// Parameter Info:
// float                          InBlurOpacity                  (CPF_Parm)

void URadialBlurComponent::SetBlurOpacity(float InBlurOpacity)
{
	static UFunction* uFnSetBlurOpacity = nullptr;

	if (!uFnSetBlurOpacity)
	{
		uFnSetBlurOpacity = UFunction::FindFunction("Function Engine.RadialBlurComponent.SetBlurOpacity");
	}

	URadialBlurComponent_execSetBlurOpacity_Params SetBlurOpacity_Params;
	memset(&SetBlurOpacity_Params, 0, sizeof(SetBlurOpacity_Params));
	memcpy_s(&SetBlurOpacity_Params.InBlurOpacity, sizeof(SetBlurOpacity_Params.InBlurOpacity), &InBlurOpacity, sizeof(InBlurOpacity));

	uFnSetBlurOpacity->iNative = 0;
	uFnSetBlurOpacity->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetBlurOpacity, &SetBlurOpacity_Params, nullptr);
	uFnSetBlurOpacity->FunctionFlags |= 0x400;
	uFnSetBlurOpacity->iNative = 25605;
};

// Function Engine.RadialBlurComponent.SetBlurFalloffExponent
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25604])
// Parameter Info:
// float                          InBlurFalloffExponent          (CPF_Parm)

void URadialBlurComponent::SetBlurFalloffExponent(float InBlurFalloffExponent)
{
	static UFunction* uFnSetBlurFalloffExponent = nullptr;

	if (!uFnSetBlurFalloffExponent)
	{
		uFnSetBlurFalloffExponent = UFunction::FindFunction("Function Engine.RadialBlurComponent.SetBlurFalloffExponent");
	}

	URadialBlurComponent_execSetBlurFalloffExponent_Params SetBlurFalloffExponent_Params;
	memset(&SetBlurFalloffExponent_Params, 0, sizeof(SetBlurFalloffExponent_Params));
	memcpy_s(&SetBlurFalloffExponent_Params.InBlurFalloffExponent, sizeof(SetBlurFalloffExponent_Params.InBlurFalloffExponent), &InBlurFalloffExponent, sizeof(InBlurFalloffExponent));

	uFnSetBlurFalloffExponent->iNative = 0;
	uFnSetBlurFalloffExponent->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetBlurFalloffExponent, &SetBlurFalloffExponent_Params, nullptr);
	uFnSetBlurFalloffExponent->FunctionFlags |= 0x400;
	uFnSetBlurFalloffExponent->iNative = 25604;
};

// Function Engine.RadialBlurComponent.SetBlurScale
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25606])
// Parameter Info:
// float                          InBlurScale                    (CPF_Parm)

void URadialBlurComponent::SetBlurScale(float InBlurScale)
{
	static UFunction* uFnSetBlurScale = nullptr;

	if (!uFnSetBlurScale)
	{
		uFnSetBlurScale = UFunction::FindFunction("Function Engine.RadialBlurComponent.SetBlurScale");
	}

	URadialBlurComponent_execSetBlurScale_Params SetBlurScale_Params;
	memset(&SetBlurScale_Params, 0, sizeof(SetBlurScale_Params));
	memcpy_s(&SetBlurScale_Params.InBlurScale, sizeof(SetBlurScale_Params.InBlurScale), &InBlurScale, sizeof(InBlurScale));

	uFnSetBlurScale->iNative = 0;
	uFnSetBlurScale->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetBlurScale, &SetBlurScale_Params, nullptr);
	uFnSetBlurScale->FunctionFlags |= 0x400;
	uFnSetBlurScale->iNative = 25606;
};

// Function Engine.RadialBlurComponent.SetMaterial
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25709])
// Parameter Info:
// class UMaterialInterface*      InMaterial                     (CPF_Parm)

void URadialBlurComponent::SetMaterial(class UMaterialInterface* InMaterial)
{
	static UFunction* uFnSetMaterial = nullptr;

	if (!uFnSetMaterial)
	{
		uFnSetMaterial = UFunction::FindFunction("Function Engine.RadialBlurComponent.SetMaterial");
	}

	URadialBlurComponent_execSetMaterial_Params SetMaterial_Params;
	memset(&SetMaterial_Params, 0, sizeof(SetMaterial_Params));
	SetMaterial_Params.InMaterial = InMaterial;

	uFnSetMaterial->iNative = 0;
	uFnSetMaterial->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetMaterial, &SetMaterial_Params, nullptr);
	uFnSetMaterial->FunctionFlags |= 0x400;
	uFnSetMaterial->iNative = 25709;
};

// Function Engine.SceneCaptureComponent.SetEnabled
// [0x00020501] (FUNC_Final | FUNC_Simulated | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13734])
// Parameter Info:
// uint32_t                       bEnable                        (CPF_Parm)

void USceneCaptureComponent::SetEnabled(bool bEnable)
{
	static UFunction* uFnSetEnabled = nullptr;

	if (!uFnSetEnabled)
	{
		uFnSetEnabled = UFunction::FindFunction("Function Engine.SceneCaptureComponent.SetEnabled");
	}

	USceneCaptureComponent_execSetEnabled_Params SetEnabled_Params;
	memset(&SetEnabled_Params, 0, sizeof(SetEnabled_Params));
	SetEnabled_Params.bEnable = bEnable;

	uFnSetEnabled->iNative = 0;
	uFnSetEnabled->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetEnabled, &SetEnabled_Params, nullptr);
	uFnSetEnabled->FunctionFlags |= 0x400;
	uFnSetEnabled->iNative = 13734;
};

// Function Engine.SceneCaptureComponent.SetFrameRate
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25666])
// Parameter Info:
// float                          NewFrameRate                   (CPF_Parm)

void USceneCaptureComponent::SetFrameRate(float NewFrameRate)
{
	static UFunction* uFnSetFrameRate = nullptr;

	if (!uFnSetFrameRate)
	{
		uFnSetFrameRate = UFunction::FindFunction("Function Engine.SceneCaptureComponent.SetFrameRate");
	}

	USceneCaptureComponent_execSetFrameRate_Params SetFrameRate_Params;
	memset(&SetFrameRate_Params, 0, sizeof(SetFrameRate_Params));
	memcpy_s(&SetFrameRate_Params.NewFrameRate, sizeof(SetFrameRate_Params.NewFrameRate), &NewFrameRate, sizeof(NewFrameRate));

	uFnSetFrameRate->iNative = 0;
	uFnSetFrameRate->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetFrameRate, &SetFrameRate_Params, nullptr);
	uFnSetFrameRate->FunctionFlags |= 0x400;
	uFnSetFrameRate->iNative = 25666;
};

// Function Engine.SceneCapture2DComponent.SetView
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25837])
// Parameter Info:
// struct FVector                 NewLocation                    (CPF_Parm)
// struct FRotator                NewRotation                    (CPF_Parm)

void USceneCapture2DComponent::SetView(const struct FVector& NewLocation, const struct FRotator& NewRotation)
{
	static UFunction* uFnSetView = nullptr;

	if (!uFnSetView)
	{
		uFnSetView = UFunction::FindFunction("Function Engine.SceneCapture2DComponent.SetView");
	}

	USceneCapture2DComponent_execSetView_Params SetView_Params;
	memset(&SetView_Params, 0, sizeof(SetView_Params));
	memcpy_s(&SetView_Params.NewLocation, sizeof(SetView_Params.NewLocation), &NewLocation, sizeof(NewLocation));
	memcpy_s(&SetView_Params.NewRotation, sizeof(SetView_Params.NewRotation), &NewRotation, sizeof(NewRotation));

	uFnSetView->iNative = 0;
	uFnSetView->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetView, &SetView_Params, nullptr);
	uFnSetView->FunctionFlags |= 0x400;
	uFnSetView->iNative = 25837;
};

// Function Engine.SceneCapture2DComponent.SetCaptureParameters
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[25610])
// Parameter Info:
// class UTextureRenderTarget2D*  NewTextureTarget               (CPF_OptionalParm | CPF_Parm)
// float                          NewFOV                         (CPF_OptionalParm | CPF_Parm)
// float                          NewNearPlane                   (CPF_OptionalParm | CPF_Parm)
// float                          NewFarPlane                    (CPF_OptionalParm | CPF_Parm)

void USceneCapture2DComponent::SetCaptureParameters(class UTextureRenderTarget2D* NewTextureTarget, float NewFOV, float NewNearPlane, float NewFarPlane)
{
	static UFunction* uFnSetCaptureParameters = nullptr;

	if (!uFnSetCaptureParameters)
	{
		uFnSetCaptureParameters = UFunction::FindFunction("Function Engine.SceneCapture2DComponent.SetCaptureParameters");
	}

	USceneCapture2DComponent_execSetCaptureParameters_Params SetCaptureParameters_Params;
	memset(&SetCaptureParameters_Params, 0, sizeof(SetCaptureParameters_Params));
	SetCaptureParameters_Params.NewTextureTarget = NewTextureTarget;
	memcpy_s(&SetCaptureParameters_Params.NewFOV, sizeof(SetCaptureParameters_Params.NewFOV), &NewFOV, sizeof(NewFOV));
	memcpy_s(&SetCaptureParameters_Params.NewNearPlane, sizeof(SetCaptureParameters_Params.NewNearPlane), &NewNearPlane, sizeof(NewNearPlane));
	memcpy_s(&SetCaptureParameters_Params.NewFarPlane, sizeof(SetCaptureParameters_Params.NewFarPlane), &NewFarPlane, sizeof(NewFarPlane));

	uFnSetCaptureParameters->iNative = 0;
	uFnSetCaptureParameters->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetCaptureParameters, &SetCaptureParameters_Params, nullptr);
	uFnSetCaptureParameters->FunctionFlags |= 0x400;
	uFnSetCaptureParameters->iNative = 25610;
};

// Function Engine.SceneCapture2DHitMaskComponent.SetFadingStartTimeSinceHit
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25651])
// Parameter Info:
// float                          InFadingStartTimeSinceHit      (CPF_Const | CPF_Parm)

void USceneCapture2DHitMaskComponent::SetFadingStartTimeSinceHit(float InFadingStartTimeSinceHit)
{
	static UFunction* uFnSetFadingStartTimeSinceHit = nullptr;

	if (!uFnSetFadingStartTimeSinceHit)
	{
		uFnSetFadingStartTimeSinceHit = UFunction::FindFunction("Function Engine.SceneCapture2DHitMaskComponent.SetFadingStartTimeSinceHit");
	}

	USceneCapture2DHitMaskComponent_execSetFadingStartTimeSinceHit_Params SetFadingStartTimeSinceHit_Params;
	memset(&SetFadingStartTimeSinceHit_Params, 0, sizeof(SetFadingStartTimeSinceHit_Params));
	memcpy_s(&SetFadingStartTimeSinceHit_Params.InFadingStartTimeSinceHit, sizeof(SetFadingStartTimeSinceHit_Params.InFadingStartTimeSinceHit), &InFadingStartTimeSinceHit, sizeof(InFadingStartTimeSinceHit));

	uFnSetFadingStartTimeSinceHit->iNative = 0;
	uFnSetFadingStartTimeSinceHit->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetFadingStartTimeSinceHit, &SetFadingStartTimeSinceHit_Params, nullptr);
	uFnSetFadingStartTimeSinceHit->FunctionFlags |= 0x400;
	uFnSetFadingStartTimeSinceHit->iNative = 25651;
};

// Function Engine.SceneCapture2DHitMaskComponent.SetCaptureParameters
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25610])
// Parameter Info:
// struct FVector                 InMaskPosition                 (CPF_Const | CPF_Parm)
// float                          InMaskRadius                   (CPF_Const | CPF_Parm)
// struct FVector                 InStartupPosition              (CPF_Const | CPF_Parm)
// uint32_t                       bOnlyWhenFacing                (CPF_Const | CPF_Parm)

void USceneCapture2DHitMaskComponent::SetCaptureParameters(const struct FVector& InMaskPosition, float InMaskRadius, const struct FVector& InStartupPosition, bool bOnlyWhenFacing)
{
	static UFunction* uFnSetCaptureParameters = nullptr;

	if (!uFnSetCaptureParameters)
	{
		uFnSetCaptureParameters = UFunction::FindFunction("Function Engine.SceneCapture2DHitMaskComponent.SetCaptureParameters");
	}

	USceneCapture2DHitMaskComponent_execSetCaptureParameters_Params SetCaptureParameters_Params;
	memset(&SetCaptureParameters_Params, 0, sizeof(SetCaptureParameters_Params));
	memcpy_s(&SetCaptureParameters_Params.InMaskPosition, sizeof(SetCaptureParameters_Params.InMaskPosition), &InMaskPosition, sizeof(InMaskPosition));
	memcpy_s(&SetCaptureParameters_Params.InMaskRadius, sizeof(SetCaptureParameters_Params.InMaskRadius), &InMaskRadius, sizeof(InMaskRadius));
	memcpy_s(&SetCaptureParameters_Params.InStartupPosition, sizeof(SetCaptureParameters_Params.InStartupPosition), &InStartupPosition, sizeof(InStartupPosition));
	SetCaptureParameters_Params.bOnlyWhenFacing = bOnlyWhenFacing;

	uFnSetCaptureParameters->iNative = 0;
	uFnSetCaptureParameters->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetCaptureParameters, &SetCaptureParameters_Params, nullptr);
	uFnSetCaptureParameters->FunctionFlags |= 0x400;
	uFnSetCaptureParameters->iNative = 25610;
};

// Function Engine.SceneCapture2DHitMaskComponent.SetCaptureTargetTexture
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25611])
// Parameter Info:
// class UTextureRenderTarget2D*  InTextureTarget                (CPF_Const | CPF_Parm)

void USceneCapture2DHitMaskComponent::SetCaptureTargetTexture(class UTextureRenderTarget2D* InTextureTarget)
{
	static UFunction* uFnSetCaptureTargetTexture = nullptr;

	if (!uFnSetCaptureTargetTexture)
	{
		uFnSetCaptureTargetTexture = UFunction::FindFunction("Function Engine.SceneCapture2DHitMaskComponent.SetCaptureTargetTexture");
	}

	USceneCapture2DHitMaskComponent_execSetCaptureTargetTexture_Params SetCaptureTargetTexture_Params;
	memset(&SetCaptureTargetTexture_Params, 0, sizeof(SetCaptureTargetTexture_Params));
	SetCaptureTargetTexture_Params.InTextureTarget = InTextureTarget;

	uFnSetCaptureTargetTexture->iNative = 0;
	uFnSetCaptureTargetTexture->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetCaptureTargetTexture, &SetCaptureTargetTexture_Params, nullptr);
	uFnSetCaptureTargetTexture->FunctionFlags |= 0x400;
	uFnSetCaptureTargetTexture->iNative = 25611;
};

// Function Engine.SceneCapturePortalComponent.SetCaptureParameters
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[25610])
// Parameter Info:
// class UTextureRenderTarget2D*  NewTextureTarget               (CPF_OptionalParm | CPF_Parm)
// float                          NewScaleFOV                    (CPF_OptionalParm | CPF_Parm)
// class AActor*                  NewViewDest                    (CPF_OptionalParm | CPF_Parm)

void USceneCapturePortalComponent::SetCaptureParameters(class UTextureRenderTarget2D* NewTextureTarget, float NewScaleFOV, class AActor* NewViewDest)
{
	static UFunction* uFnSetCaptureParameters = nullptr;

	if (!uFnSetCaptureParameters)
	{
		uFnSetCaptureParameters = UFunction::FindFunction("Function Engine.SceneCapturePortalComponent.SetCaptureParameters");
	}

	USceneCapturePortalComponent_execSetCaptureParameters_Params SetCaptureParameters_Params;
	memset(&SetCaptureParameters_Params, 0, sizeof(SetCaptureParameters_Params));
	SetCaptureParameters_Params.NewTextureTarget = NewTextureTarget;
	memcpy_s(&SetCaptureParameters_Params.NewScaleFOV, sizeof(SetCaptureParameters_Params.NewScaleFOV), &NewScaleFOV, sizeof(NewScaleFOV));
	SetCaptureParameters_Params.NewViewDest = NewViewDest;

	uFnSetCaptureParameters->iNative = 0;
	uFnSetCaptureParameters->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetCaptureParameters, &SetCaptureParameters_Params, nullptr);
	uFnSetCaptureParameters->FunctionFlags |= 0x400;
	uFnSetCaptureParameters->iNative = 25610;
};

// Function Engine.WorldRainComponent.SetEnabled
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13734])
// Parameter Info:
// uint32_t                       _bSetEnabled                   (CPF_Parm)

void UWorldRainComponent::SetEnabled(bool _bSetEnabled)
{
	static UFunction* uFnSetEnabled = nullptr;

	if (!uFnSetEnabled)
	{
		uFnSetEnabled = UFunction::FindFunction("Function Engine.WorldRainComponent.SetEnabled");
	}

	UWorldRainComponent_execSetEnabled_Params SetEnabled_Params;
	memset(&SetEnabled_Params, 0, sizeof(SetEnabled_Params));
	SetEnabled_Params._bSetEnabled = _bSetEnabled;

	uFnSetEnabled->iNative = 0;
	uFnSetEnabled->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetEnabled, &SetEnabled_Params, nullptr);
	uFnSetEnabled->FunctionFlags |= 0x400;
	uFnSetEnabled->iNative = 13734;
};

// Function Engine.ActorFactory.PostCreateActor
// [0x00020900] (FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AActor*                  NewActor                       (CPF_Parm)

void UActorFactory::eventPostCreateActor(class AActor* NewActor)
{
	static UFunction* uFnPostCreateActor = nullptr;

	if (!uFnPostCreateActor)
	{
		uFnPostCreateActor = UFunction::FindFunction("Function Engine.ActorFactory.PostCreateActor");
	}

	UActorFactory_eventPostCreateActor_Params PostCreateActor_Params;
	memset(&PostCreateActor_Params, 0, sizeof(PostCreateActor_Params));
	PostCreateActor_Params.NewActor = NewActor;

	this->ProcessEvent(uFnPostCreateActor, &PostCreateActor_Params, nullptr);
};

// Function Engine.Canvas.DrawDebugGraph
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  Title                          (CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink)
// float                          ValueX                         (CPF_Parm)
// float                          ValueY                         (CPF_Parm)
// float                          UL_X                           (CPF_Parm)
// float                          UL_Y                           (CPF_Parm)
// float                          W                              (CPF_Parm)
// float                          H                              (CPF_Parm)
// struct FVector2D               RangeX                         (CPF_Parm)
// struct FVector2D               RangeY                         (CPF_Parm)

void UCanvas::DrawDebugGraph(const class FString& Title, float ValueX, float ValueY, float UL_X, float UL_Y, float W, float H, const struct FVector2D& RangeX, const struct FVector2D& RangeY)
{
	static UFunction* uFnDrawDebugGraph = nullptr;

	if (!uFnDrawDebugGraph)
	{
		uFnDrawDebugGraph = UFunction::FindFunction("Function Engine.Canvas.DrawDebugGraph");
	}

	UCanvas_execDrawDebugGraph_Params DrawDebugGraph_Params;
	memset(&DrawDebugGraph_Params, 0, sizeof(DrawDebugGraph_Params));
	memcpy_s(&DrawDebugGraph_Params.Title, sizeof(DrawDebugGraph_Params.Title), &Title, sizeof(Title));
	memcpy_s(&DrawDebugGraph_Params.ValueX, sizeof(DrawDebugGraph_Params.ValueX), &ValueX, sizeof(ValueX));
	memcpy_s(&DrawDebugGraph_Params.ValueY, sizeof(DrawDebugGraph_Params.ValueY), &ValueY, sizeof(ValueY));
	memcpy_s(&DrawDebugGraph_Params.UL_X, sizeof(DrawDebugGraph_Params.UL_X), &UL_X, sizeof(UL_X));
	memcpy_s(&DrawDebugGraph_Params.UL_Y, sizeof(DrawDebugGraph_Params.UL_Y), &UL_Y, sizeof(UL_Y));
	memcpy_s(&DrawDebugGraph_Params.W, sizeof(DrawDebugGraph_Params.W), &W, sizeof(W));
	memcpy_s(&DrawDebugGraph_Params.H, sizeof(DrawDebugGraph_Params.H), &H, sizeof(H));
	memcpy_s(&DrawDebugGraph_Params.RangeX, sizeof(DrawDebugGraph_Params.RangeX), &RangeX, sizeof(RangeX));
	memcpy_s(&DrawDebugGraph_Params.RangeY, sizeof(DrawDebugGraph_Params.RangeY), &RangeY, sizeof(RangeY));

	this->ProcessEvent(uFnDrawDebugGraph, &DrawDebugGraph_Params, nullptr);
};

// Function Engine.Canvas.DrawTextureDoubleLine
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[19206])
// Parameter Info:
// struct FVector                 StartPoint                     (CPF_Parm)
// struct FVector                 EndPoint                       (CPF_Parm)
// float                          Perc                           (CPF_Parm)
// float                          Spacing                        (CPF_Parm)
// float                          Width                          (CPF_Parm)
// struct FColor                  LineColor                      (CPF_Parm)
// struct FColor                  AltLineColor                   (CPF_Parm)
// class UTexture*                Tex                            (CPF_Parm)
// float                          U                              (CPF_Parm)
// float                          V                              (CPF_Parm)
// float                          UL                             (CPF_Parm)
// float                          VL                             (CPF_Parm)

void UCanvas::DrawTextureDoubleLineW(const struct FVector& StartPoint, const struct FVector& EndPoint, float Perc, float Spacing, float Width, const struct FColor& LineColor, const struct FColor& AltLineColor, class UTexture* Tex, float U, float V, float UL, float VL)
{
	static UFunction* uFnDrawTextureDoubleLineW = nullptr;

	if (!uFnDrawTextureDoubleLineW)
	{
		uFnDrawTextureDoubleLineW = UFunction::FindFunction("Function Engine.Canvas.DrawTextureDoubleLine");
	}

	UCanvas_execDrawTextureDoubleLineW_Params DrawTextureDoubleLineW_Params;
	memset(&DrawTextureDoubleLineW_Params, 0, sizeof(DrawTextureDoubleLineW_Params));
	memcpy_s(&DrawTextureDoubleLineW_Params.StartPoint, sizeof(DrawTextureDoubleLineW_Params.StartPoint), &StartPoint, sizeof(StartPoint));
	memcpy_s(&DrawTextureDoubleLineW_Params.EndPoint, sizeof(DrawTextureDoubleLineW_Params.EndPoint), &EndPoint, sizeof(EndPoint));
	memcpy_s(&DrawTextureDoubleLineW_Params.Perc, sizeof(DrawTextureDoubleLineW_Params.Perc), &Perc, sizeof(Perc));
	memcpy_s(&DrawTextureDoubleLineW_Params.Spacing, sizeof(DrawTextureDoubleLineW_Params.Spacing), &Spacing, sizeof(Spacing));
	memcpy_s(&DrawTextureDoubleLineW_Params.Width, sizeof(DrawTextureDoubleLineW_Params.Width), &Width, sizeof(Width));
	memcpy_s(&DrawTextureDoubleLineW_Params.LineColor, sizeof(DrawTextureDoubleLineW_Params.LineColor), &LineColor, sizeof(LineColor));
	memcpy_s(&DrawTextureDoubleLineW_Params.AltLineColor, sizeof(DrawTextureDoubleLineW_Params.AltLineColor), &AltLineColor, sizeof(AltLineColor));
	DrawTextureDoubleLineW_Params.Tex = Tex;
	memcpy_s(&DrawTextureDoubleLineW_Params.U, sizeof(DrawTextureDoubleLineW_Params.U), &U, sizeof(U));
	memcpy_s(&DrawTextureDoubleLineW_Params.V, sizeof(DrawTextureDoubleLineW_Params.V), &V, sizeof(V));
	memcpy_s(&DrawTextureDoubleLineW_Params.UL, sizeof(DrawTextureDoubleLineW_Params.UL), &UL, sizeof(UL));
	memcpy_s(&DrawTextureDoubleLineW_Params.VL, sizeof(DrawTextureDoubleLineW_Params.VL), &VL, sizeof(VL));

	uFnDrawTextureDoubleLineW->iNative = 0;
	uFnDrawTextureDoubleLineW->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnDrawTextureDoubleLineW, &DrawTextureDoubleLineW_Params, nullptr);
	uFnDrawTextureDoubleLineW->FunctionFlags |= 0x400;
	uFnDrawTextureDoubleLineW->iNative = 19206;
};

// Function Engine.Canvas.DrawTextureLine
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[19207])
// Parameter Info:
// struct FVector                 StartPoint                     (CPF_Parm)
// struct FVector                 EndPoint                       (CPF_Parm)
// float                          Perc                           (CPF_Parm)
// float                          Width                          (CPF_Parm)
// struct FColor                  LineColor                      (CPF_Parm)
// class UTexture*                LineTexture                    (CPF_Parm)
// float                          U                              (CPF_Parm)
// float                          V                              (CPF_Parm)
// float                          UL                             (CPF_Parm)
// float                          VL                             (CPF_Parm)

void UCanvas::DrawTextureLineW(const struct FVector& StartPoint, const struct FVector& EndPoint, float Perc, float Width, const struct FColor& LineColor, class UTexture* LineTexture, float U, float V, float UL, float VL)
{
	static UFunction* uFnDrawTextureLineW = nullptr;

	if (!uFnDrawTextureLineW)
	{
		uFnDrawTextureLineW = UFunction::FindFunction("Function Engine.Canvas.DrawTextureLine");
	}

	UCanvas_execDrawTextureLineW_Params DrawTextureLineW_Params;
	memset(&DrawTextureLineW_Params, 0, sizeof(DrawTextureLineW_Params));
	memcpy_s(&DrawTextureLineW_Params.StartPoint, sizeof(DrawTextureLineW_Params.StartPoint), &StartPoint, sizeof(StartPoint));
	memcpy_s(&DrawTextureLineW_Params.EndPoint, sizeof(DrawTextureLineW_Params.EndPoint), &EndPoint, sizeof(EndPoint));
	memcpy_s(&DrawTextureLineW_Params.Perc, sizeof(DrawTextureLineW_Params.Perc), &Perc, sizeof(Perc));
	memcpy_s(&DrawTextureLineW_Params.Width, sizeof(DrawTextureLineW_Params.Width), &Width, sizeof(Width));
	memcpy_s(&DrawTextureLineW_Params.LineColor, sizeof(DrawTextureLineW_Params.LineColor), &LineColor, sizeof(LineColor));
	DrawTextureLineW_Params.LineTexture = LineTexture;
	memcpy_s(&DrawTextureLineW_Params.U, sizeof(DrawTextureLineW_Params.U), &U, sizeof(U));
	memcpy_s(&DrawTextureLineW_Params.V, sizeof(DrawTextureLineW_Params.V), &V, sizeof(V));
	memcpy_s(&DrawTextureLineW_Params.UL, sizeof(DrawTextureLineW_Params.UL), &UL, sizeof(UL));
	memcpy_s(&DrawTextureLineW_Params.VL, sizeof(DrawTextureLineW_Params.VL), &VL, sizeof(VL));

	uFnDrawTextureLineW->iNative = 0;
	uFnDrawTextureLineW->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnDrawTextureLineW, &DrawTextureLineW_Params, nullptr);
	uFnDrawTextureLineW->FunctionFlags |= 0x400;
	uFnDrawTextureLineW->iNative = 19207;
};

// Function Engine.Canvas.Draw2DLine
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[19153])
// Parameter Info:
// float                          X1                             (CPF_Parm)
// float                          Y1                             (CPF_Parm)
// float                          X2                             (CPF_Parm)
// float                          Y2                             (CPF_Parm)
// struct FColor                  LineColor                      (CPF_Parm)

void UCanvas::Draw2DLine(float X1, float Y1, float X2, float Y2, const struct FColor& LineColor)
{
	static UFunction* uFnDraw2DLine = nullptr;

	if (!uFnDraw2DLine)
	{
		uFnDraw2DLine = UFunction::FindFunction("Function Engine.Canvas.Draw2DLine");
	}

	UCanvas_execDraw2DLine_Params Draw2DLine_Params;
	memset(&Draw2DLine_Params, 0, sizeof(Draw2DLine_Params));
	memcpy_s(&Draw2DLine_Params.X1, sizeof(Draw2DLine_Params.X1), &X1, sizeof(X1));
	memcpy_s(&Draw2DLine_Params.Y1, sizeof(Draw2DLine_Params.Y1), &Y1, sizeof(Y1));
	memcpy_s(&Draw2DLine_Params.X2, sizeof(Draw2DLine_Params.X2), &X2, sizeof(X2));
	memcpy_s(&Draw2DLine_Params.Y2, sizeof(Draw2DLine_Params.Y2), &Y2, sizeof(Y2));
	memcpy_s(&Draw2DLine_Params.LineColor, sizeof(Draw2DLine_Params.LineColor), &LineColor, sizeof(LineColor));

	uFnDraw2DLine->iNative = 0;
	uFnDraw2DLine->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnDraw2DLine, &Draw2DLine_Params, nullptr);
	uFnDraw2DLine->FunctionFlags |= 0x400;
	uFnDraw2DLine->iNative = 19153;
};

// Function Engine.Canvas.SetDrawColor
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[25642])
// Parameter Info:
// uint8_t                        R                              (CPF_Parm)
// uint8_t                        G                              (CPF_Parm)
// uint8_t                        B                              (CPF_Parm)
// uint8_t                        A                              (CPF_OptionalParm | CPF_Parm)

void UCanvas::SetDrawColor(uint8_t R, uint8_t G, uint8_t B, uint8_t A)
{
	static UFunction* uFnSetDrawColor = nullptr;

	if (!uFnSetDrawColor)
	{
		uFnSetDrawColor = UFunction::FindFunction("Function Engine.Canvas.SetDrawColor");
	}

	UCanvas_execSetDrawColor_Params SetDrawColor_Params;
	memset(&SetDrawColor_Params, 0, sizeof(SetDrawColor_Params));
	memcpy_s(&SetDrawColor_Params.R, sizeof(SetDrawColor_Params.R), &R, sizeof(R));
	memcpy_s(&SetDrawColor_Params.G, sizeof(SetDrawColor_Params.G), &G, sizeof(G));
	memcpy_s(&SetDrawColor_Params.B, sizeof(SetDrawColor_Params.B), &B, sizeof(B));
	memcpy_s(&SetDrawColor_Params.A, sizeof(SetDrawColor_Params.A), &A, sizeof(A));

	uFnSetDrawColor->iNative = 0;
	uFnSetDrawColor->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetDrawColor, &SetDrawColor_Params, nullptr);
	uFnSetDrawColor->FunctionFlags |= 0x400;
	uFnSetDrawColor->iNative = 25642;
};

// Function Engine.Canvas.DrawBox
// [0x00020103] (FUNC_Final | FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          Width                          (CPF_Parm)
// float                          Height                         (CPF_Parm)

void UCanvas::DrawBox(float Width, float Height)
{
	static UFunction* uFnDrawBox = nullptr;

	if (!uFnDrawBox)
	{
		uFnDrawBox = UFunction::FindFunction("Function Engine.Canvas.DrawBox");
	}

	UCanvas_execDrawBox_Params DrawBox_Params;
	memset(&DrawBox_Params, 0, sizeof(DrawBox_Params));
	memcpy_s(&DrawBox_Params.Width, sizeof(DrawBox_Params.Width), &Width, sizeof(Width));
	memcpy_s(&DrawBox_Params.Height, sizeof(DrawBox_Params.Height), &Height, sizeof(Height));

	this->ProcessEvent(uFnDrawBox, &DrawBox_Params, nullptr);
};

// Function Engine.Canvas.DrawRect
// [0x00024003] (FUNC_Final | FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          RectX                          (CPF_Parm)
// float                          RectY                          (CPF_Parm)
// class UTexture*                Tex                            (CPF_OptionalParm | CPF_Parm)

void UCanvas::DrawRect(float RectX, float RectY, class UTexture* Tex)
{
	static UFunction* uFnDrawRect = nullptr;

	if (!uFnDrawRect)
	{
		uFnDrawRect = UFunction::FindFunction("Function Engine.Canvas.DrawRect");
	}

	UCanvas_execDrawRect_Params DrawRect_Params;
	memset(&DrawRect_Params, 0, sizeof(DrawRect_Params));
	memcpy_s(&DrawRect_Params.RectX, sizeof(DrawRect_Params.RectX), &RectX, sizeof(RectX));
	memcpy_s(&DrawRect_Params.RectY, sizeof(DrawRect_Params.RectY), &RectY, sizeof(RectY));
	DrawRect_Params.Tex = Tex;

	this->ProcessEvent(uFnDrawRect, &DrawRect_Params, nullptr);
};

// Function Engine.Canvas.DrawIcon
// [0x00024003] (FUNC_Final | FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FCanvasIcon             Icon                           (CPF_Parm)
// float                          X                              (CPF_Parm)
// float                          Y                              (CPF_Parm)
// float                          Scale                          (CPF_OptionalParm | CPF_Parm)

void UCanvas::DrawIcon(const struct FCanvasIcon& Icon, float X, float Y, float Scale)
{
	static UFunction* uFnDrawIcon = nullptr;

	if (!uFnDrawIcon)
	{
		uFnDrawIcon = UFunction::FindFunction("Function Engine.Canvas.DrawIcon");
	}

	UCanvas_execDrawIcon_Params DrawIcon_Params;
	memset(&DrawIcon_Params, 0, sizeof(DrawIcon_Params));
	memcpy_s(&DrawIcon_Params.Icon, sizeof(DrawIcon_Params.Icon), &Icon, sizeof(Icon));
	memcpy_s(&DrawIcon_Params.X, sizeof(DrawIcon_Params.X), &X, sizeof(X));
	memcpy_s(&DrawIcon_Params.Y, sizeof(DrawIcon_Params.Y), &Y, sizeof(Y));
	memcpy_s(&DrawIcon_Params.Scale, sizeof(DrawIcon_Params.Scale), &Scale, sizeof(Scale));

	this->ProcessEvent(uFnDrawIcon, &DrawIcon_Params, nullptr);
};

// Function Engine.Canvas.MakeIcon
// [0x00824003] (FUNC_Final | FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// struct FCanvasIcon             ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UTexture*                Texture                        (CPF_Parm)
// float                          U                              (CPF_OptionalParm | CPF_Parm)
// float                          V                              (CPF_OptionalParm | CPF_Parm)
// float                          UL                             (CPF_OptionalParm | CPF_Parm)
// float                          VL                             (CPF_OptionalParm | CPF_Parm)

struct FCanvasIcon UCanvas::MakeIcon(class UTexture* Texture, float U, float V, float UL, float VL)
{
	static UFunction* uFnMakeIcon = nullptr;

	if (!uFnMakeIcon)
	{
		uFnMakeIcon = UFunction::FindFunction("Function Engine.Canvas.MakeIcon");
	}

	UCanvas_execMakeIcon_Params MakeIcon_Params;
	memset(&MakeIcon_Params, 0, sizeof(MakeIcon_Params));
	MakeIcon_Params.Texture = Texture;
	memcpy_s(&MakeIcon_Params.U, sizeof(MakeIcon_Params.U), &U, sizeof(U));
	memcpy_s(&MakeIcon_Params.V, sizeof(MakeIcon_Params.V), &V, sizeof(V));
	memcpy_s(&MakeIcon_Params.UL, sizeof(MakeIcon_Params.UL), &UL, sizeof(UL));
	memcpy_s(&MakeIcon_Params.VL, sizeof(MakeIcon_Params.VL), &VL, sizeof(VL));

	this->ProcessEvent(uFnMakeIcon, &MakeIcon_Params, nullptr);

	return MakeIcon_Params.ReturnValue;
};

// Function Engine.Canvas.DrawTextureBlended
// [0x00820003] (FUNC_Final | FUNC_Defined | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// class UTexture*                Tex                            (CPF_Parm)
// float                          Scale                          (CPF_Parm)
// EBlendMode                     Blend                          (CPF_Parm)

void UCanvas::DrawTextureBlendedW(class UTexture* Tex, float Scale, EBlendMode Blend)
{
	static UFunction* uFnDrawTextureBlendedW = nullptr;

	if (!uFnDrawTextureBlendedW)
	{
		uFnDrawTextureBlendedW = UFunction::FindFunction("Function Engine.Canvas.DrawTextureBlended");
	}

	UCanvas_execDrawTextureBlendedW_Params DrawTextureBlendedW_Params;
	memset(&DrawTextureBlendedW_Params, 0, sizeof(DrawTextureBlendedW_Params));
	DrawTextureBlendedW_Params.Tex = Tex;
	memcpy_s(&DrawTextureBlendedW_Params.Scale, sizeof(DrawTextureBlendedW_Params.Scale), &Scale, sizeof(Scale));
	memcpy_s(&DrawTextureBlendedW_Params.Blend, sizeof(DrawTextureBlendedW_Params.Blend), &Blend, sizeof(Blend));

	this->ProcessEvent(uFnDrawTextureBlendedW, &DrawTextureBlendedW_Params, nullptr);
};

// Function Engine.Canvas.DrawTexture
// [0x00020003] (FUNC_Final | FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UTexture*                Tex                            (CPF_Parm)
// float                          Scale                          (CPF_Parm)

void UCanvas::DrawTextureW(class UTexture* Tex, float Scale)
{
	static UFunction* uFnDrawTextureW = nullptr;

	if (!uFnDrawTextureW)
	{
		uFnDrawTextureW = UFunction::FindFunction("Function Engine.Canvas.DrawTexture");
	}

	UCanvas_execDrawTextureW_Params DrawTextureW_Params;
	memset(&DrawTextureW_Params, 0, sizeof(DrawTextureW_Params));
	DrawTextureW_Params.Tex = Tex;
	memcpy_s(&DrawTextureW_Params.Scale, sizeof(DrawTextureW_Params.Scale), &Scale, sizeof(Scale));

	this->ProcessEvent(uFnDrawTextureW, &DrawTextureW_Params, nullptr);
};

// Function Engine.Canvas.SetClip
// [0x00020003] (FUNC_Final | FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          X                              (CPF_Parm)
// float                          Y                              (CPF_Parm)

void UCanvas::SetClip(float X, float Y)
{
	static UFunction* uFnSetClip = nullptr;

	if (!uFnSetClip)
	{
		uFnSetClip = UFunction::FindFunction("Function Engine.Canvas.SetClip");
	}

	UCanvas_execSetClip_Params SetClip_Params;
	memset(&SetClip_Params, 0, sizeof(SetClip_Params));
	memcpy_s(&SetClip_Params.X, sizeof(SetClip_Params.X), &X, sizeof(X));
	memcpy_s(&SetClip_Params.Y, sizeof(SetClip_Params.Y), &Y, sizeof(Y));

	this->ProcessEvent(uFnSetClip, &SetClip_Params, nullptr);
};

// Function Engine.Canvas.SetOrigin
// [0x00020003] (FUNC_Final | FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          X                              (CPF_Parm)
// float                          Y                              (CPF_Parm)

void UCanvas::SetOrigin(float X, float Y)
{
	static UFunction* uFnSetOrigin = nullptr;

	if (!uFnSetOrigin)
	{
		uFnSetOrigin = UFunction::FindFunction("Function Engine.Canvas.SetOrigin");
	}

	UCanvas_execSetOrigin_Params SetOrigin_Params;
	memset(&SetOrigin_Params, 0, sizeof(SetOrigin_Params));
	memcpy_s(&SetOrigin_Params.X, sizeof(SetOrigin_Params.X), &X, sizeof(X));
	memcpy_s(&SetOrigin_Params.Y, sizeof(SetOrigin_Params.Y), &Y, sizeof(Y));

	this->ProcessEvent(uFnSetOrigin, &SetOrigin_Params, nullptr);
};

// Function Engine.Canvas.SetPos
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[25742])
// Parameter Info:
// float                          PosX                           (CPF_Parm)
// float                          PosY                           (CPF_Parm)
// float                          PosZ                           (CPF_OptionalParm | CPF_Parm)

void UCanvas::SetPos(float PosX, float PosY, float PosZ)
{
	static UFunction* uFnSetPos = nullptr;

	if (!uFnSetPos)
	{
		uFnSetPos = UFunction::FindFunction("Function Engine.Canvas.SetPos");
	}

	UCanvas_execSetPos_Params SetPos_Params;
	memset(&SetPos_Params, 0, sizeof(SetPos_Params));
	memcpy_s(&SetPos_Params.PosX, sizeof(SetPos_Params.PosX), &PosX, sizeof(PosX));
	memcpy_s(&SetPos_Params.PosY, sizeof(SetPos_Params.PosY), &PosY, sizeof(PosY));
	memcpy_s(&SetPos_Params.PosZ, sizeof(SetPos_Params.PosZ), &PosZ, sizeof(PosZ));

	uFnSetPos->iNative = 0;
	uFnSetPos->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetPos, &SetPos_Params, nullptr);
	uFnSetPos->FunctionFlags |= 0x400;
	uFnSetPos->iNative = 25742;
};

// Function Engine.Canvas.Reset
// [0x00024802] (FUNC_Defined | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bKeepOrigin                    (CPF_OptionalParm | CPF_Parm)

void UCanvas::eventReset(bool bKeepOrigin)
{
	static UFunction* uFnReset = nullptr;

	if (!uFnReset)
	{
		uFnReset = UFunction::FindFunction("Function Engine.Canvas.Reset");
	}

	UCanvas_eventReset_Params Reset_Params;
	memset(&Reset_Params, 0, sizeof(Reset_Params));
	Reset_Params.bKeepOrigin = bKeepOrigin;

	this->ProcessEvent(uFnReset, &Reset_Params, nullptr);
};

// Function Engine.Canvas.PopTransform
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[24388])
// Parameter Info:

void UCanvas::PopTransform()
{
	static UFunction* uFnPopTransform = nullptr;

	if (!uFnPopTransform)
	{
		uFnPopTransform = UFunction::FindFunction("Function Engine.Canvas.PopTransform");
	}

	UCanvas_execPopTransform_Params PopTransform_Params;
	memset(&PopTransform_Params, 0, sizeof(PopTransform_Params));

	uFnPopTransform->iNative = 0;
	uFnPopTransform->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnPopTransform, &PopTransform_Params, nullptr);
	uFnPopTransform->FunctionFlags |= 0x400;
	uFnPopTransform->iNative = 24388;
};

// Function Engine.Canvas.PushTranslationMatrix
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[24792])
// Parameter Info:
// struct FVector                 TranslationVector              (CPF_Parm)

void UCanvas::PushTranslationMatrix(const struct FVector& TranslationVector)
{
	static UFunction* uFnPushTranslationMatrix = nullptr;

	if (!uFnPushTranslationMatrix)
	{
		uFnPushTranslationMatrix = UFunction::FindFunction("Function Engine.Canvas.PushTranslationMatrix");
	}

	UCanvas_execPushTranslationMatrix_Params PushTranslationMatrix_Params;
	memset(&PushTranslationMatrix_Params, 0, sizeof(PushTranslationMatrix_Params));
	memcpy_s(&PushTranslationMatrix_Params.TranslationVector, sizeof(PushTranslationMatrix_Params.TranslationVector), &TranslationVector, sizeof(TranslationVector));

	uFnPushTranslationMatrix->iNative = 0;
	uFnPushTranslationMatrix->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnPushTranslationMatrix, &PushTranslationMatrix_Params, nullptr);
	uFnPushTranslationMatrix->FunctionFlags |= 0x400;
	uFnPushTranslationMatrix->iNative = 24792;
};

// Function Engine.Canvas.DeProject
// [0x00420401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[18892])
// Parameter Info:
// struct FVector2D               ScreenPos                      (CPF_Parm)
// struct FVector                 WorldOrigin                    (CPF_Parm | CPF_OutParm)
// struct FVector                 WorldDirection                 (CPF_Parm | CPF_OutParm)

void UCanvas::DeProject(const struct FVector2D& ScreenPos, struct FVector& WorldOrigin, struct FVector& WorldDirection)
{
	static UFunction* uFnDeProject = nullptr;

	if (!uFnDeProject)
	{
		uFnDeProject = UFunction::FindFunction("Function Engine.Canvas.DeProject");
	}

	UCanvas_execDeProject_Params DeProject_Params;
	memset(&DeProject_Params, 0, sizeof(DeProject_Params));
	memcpy_s(&DeProject_Params.ScreenPos, sizeof(DeProject_Params.ScreenPos), &ScreenPos, sizeof(ScreenPos));
	memcpy_s(&DeProject_Params.WorldOrigin, sizeof(DeProject_Params.WorldOrigin), &WorldOrigin, sizeof(WorldOrigin));
	memcpy_s(&DeProject_Params.WorldDirection, sizeof(DeProject_Params.WorldDirection), &WorldDirection, sizeof(WorldDirection));

	uFnDeProject->iNative = 0;
	uFnDeProject->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnDeProject, &DeProject_Params, nullptr);
	uFnDeProject->FunctionFlags |= 0x400;
	uFnDeProject->iNative = 18892;

	memcpy_s(&WorldOrigin, sizeof(WorldOrigin), &DeProject_Params.WorldOrigin, sizeof(DeProject_Params.WorldOrigin));
	memcpy_s(&WorldDirection, sizeof(WorldDirection), &DeProject_Params.WorldDirection, sizeof(DeProject_Params.WorldDirection));
};

// Function Engine.Canvas.Project
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[24578])
// Parameter Info:
// struct FVector                 ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FVector                 Location                       (CPF_Parm)

struct FVector UCanvas::Project(const struct FVector& Location)
{
	static UFunction* uFnProject = nullptr;

	if (!uFnProject)
	{
		uFnProject = UFunction::FindFunction("Function Engine.Canvas.Project");
	}

	UCanvas_execProject_Params Project_Params;
	memset(&Project_Params, 0, sizeof(Project_Params));
	memcpy_s(&Project_Params.Location, sizeof(Project_Params.Location), &Location, sizeof(Location));

	uFnProject->iNative = 0;
	uFnProject->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnProject, &Project_Params, nullptr);
	uFnProject->FunctionFlags |= 0x400;
	uFnProject->iNative = 24578;

	return Project_Params.ReturnValue;
};

// Function Engine.Canvas.DrawText
// [0x00424401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[19202])
// Parameter Info:
// class FString                  Text                           (CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink)
// uint32_t                       CR                             (CPF_OptionalParm | CPF_Parm)
// float                          XScale                         (CPF_OptionalParm | CPF_Parm)
// float                          YScale                         (CPF_OptionalParm | CPF_Parm)
// struct FFontRenderInfo         RenderInfo                     (CPF_Const | CPF_OptionalParm | CPF_Parm | CPF_OutParm)

void UCanvas::DrawTextW(const class FString& Text, bool CR, float XScale, float YScale, struct FFontRenderInfo& RenderInfo)
{
	static UFunction* uFnDrawTextW = nullptr;

	if (!uFnDrawTextW)
	{
		uFnDrawTextW = UFunction::FindFunction("Function Engine.Canvas.DrawText");
	}

	UCanvas_execDrawTextW_Params DrawTextW_Params;
	memset(&DrawTextW_Params, 0, sizeof(DrawTextW_Params));
	memcpy_s(&DrawTextW_Params.Text, sizeof(DrawTextW_Params.Text), &Text, sizeof(Text));
	DrawTextW_Params.CR = CR;
	memcpy_s(&DrawTextW_Params.XScale, sizeof(DrawTextW_Params.XScale), &XScale, sizeof(XScale));
	memcpy_s(&DrawTextW_Params.YScale, sizeof(DrawTextW_Params.YScale), &YScale, sizeof(YScale));
	memcpy_s(&DrawTextW_Params.RenderInfo, sizeof(DrawTextW_Params.RenderInfo), &RenderInfo, sizeof(RenderInfo));

	uFnDrawTextW->iNative = 0;
	uFnDrawTextW->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnDrawTextW, &DrawTextW_Params, nullptr);
	uFnDrawTextW->FunctionFlags |= 0x400;
	uFnDrawTextW->iNative = 19202;

	memcpy_s(&RenderInfo, sizeof(RenderInfo), &DrawTextW_Params.RenderInfo, sizeof(DrawTextW_Params.RenderInfo));
};

// Function Engine.Canvas.TextSize
// [0x00420401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[26579])
// Parameter Info:
// class FString                  String                         (CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink)
// float                          XL                             (CPF_Parm | CPF_OutParm)
// float                          YL                             (CPF_Parm | CPF_OutParm)

void UCanvas::TextSize(const class FString& String, float& XL, float& YL)
{
	static UFunction* uFnTextSize = nullptr;

	if (!uFnTextSize)
	{
		uFnTextSize = UFunction::FindFunction("Function Engine.Canvas.TextSize");
	}

	UCanvas_execTextSize_Params TextSize_Params;
	memset(&TextSize_Params, 0, sizeof(TextSize_Params));
	memcpy_s(&TextSize_Params.String, sizeof(TextSize_Params.String), &String, sizeof(String));
	memcpy_s(&TextSize_Params.XL, sizeof(TextSize_Params.XL), &XL, sizeof(XL));
	memcpy_s(&TextSize_Params.YL, sizeof(TextSize_Params.YL), &YL, sizeof(YL));

	uFnTextSize->iNative = 0;
	uFnTextSize->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnTextSize, &TextSize_Params, nullptr);
	uFnTextSize->FunctionFlags |= 0x400;
	uFnTextSize->iNative = 26579;

	memcpy_s(&XL, sizeof(XL), &TextSize_Params.XL, sizeof(TextSize_Params.XL));
	memcpy_s(&YL, sizeof(YL), &TextSize_Params.YL, sizeof(TextSize_Params.YL));
};

// Function Engine.Canvas.StrLen
// [0x00420401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[26360])
// Parameter Info:
// class FString                  String                         (CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink)
// float                          XL                             (CPF_Parm | CPF_OutParm)
// float                          YL                             (CPF_Parm | CPF_OutParm)

void UCanvas::StrLen(const class FString& String, float& XL, float& YL)
{
	static UFunction* uFnStrLen = nullptr;

	if (!uFnStrLen)
	{
		uFnStrLen = UFunction::FindFunction("Function Engine.Canvas.StrLen");
	}

	UCanvas_execStrLen_Params StrLen_Params;
	memset(&StrLen_Params, 0, sizeof(StrLen_Params));
	memcpy_s(&StrLen_Params.String, sizeof(StrLen_Params.String), &String, sizeof(String));
	memcpy_s(&StrLen_Params.XL, sizeof(StrLen_Params.XL), &XL, sizeof(XL));
	memcpy_s(&StrLen_Params.YL, sizeof(StrLen_Params.YL), &YL, sizeof(YL));

	uFnStrLen->iNative = 0;
	uFnStrLen->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnStrLen, &StrLen_Params, nullptr);
	uFnStrLen->FunctionFlags |= 0x400;
	uFnStrLen->iNative = 26360;

	memcpy_s(&XL, sizeof(XL), &StrLen_Params.XL, sizeof(StrLen_Params.XL));
	memcpy_s(&YL, sizeof(YL), &StrLen_Params.YL, sizeof(StrLen_Params.YL));
};

// Function Engine.Canvas.CreateFontRenderInfo
// [0x00826003] (FUNC_Final | FUNC_Defined | FUNC_Static | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// struct FFontRenderInfo         ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       bClipText                      (CPF_OptionalParm | CPF_Parm)
// uint32_t                       bEnableShadow                  (CPF_OptionalParm | CPF_Parm)
// struct FLinearColor            GlowColor                      (CPF_OptionalParm | CPF_Parm)
// struct FVector2D               GlowOuterRadius                (CPF_OptionalParm | CPF_Parm)
// struct FVector2D               GlowInnerRadius                (CPF_OptionalParm | CPF_Parm)

struct FFontRenderInfo UCanvas::CreateFontRenderInfo(bool bClipText, bool bEnableShadow, const struct FLinearColor& GlowColor, const struct FVector2D& GlowOuterRadius, const struct FVector2D& GlowInnerRadius)
{
	static UFunction* uFnCreateFontRenderInfo = nullptr;

	if (!uFnCreateFontRenderInfo)
	{
		uFnCreateFontRenderInfo = UFunction::FindFunction("Function Engine.Canvas.CreateFontRenderInfo");
	}

	UCanvas_execCreateFontRenderInfo_Params CreateFontRenderInfo_Params;
	memset(&CreateFontRenderInfo_Params, 0, sizeof(CreateFontRenderInfo_Params));
	CreateFontRenderInfo_Params.bClipText = bClipText;
	CreateFontRenderInfo_Params.bEnableShadow = bEnableShadow;
	memcpy_s(&CreateFontRenderInfo_Params.GlowColor, sizeof(CreateFontRenderInfo_Params.GlowColor), &GlowColor, sizeof(GlowColor));
	memcpy_s(&CreateFontRenderInfo_Params.GlowOuterRadius, sizeof(CreateFontRenderInfo_Params.GlowOuterRadius), &GlowOuterRadius, sizeof(GlowOuterRadius));
	memcpy_s(&CreateFontRenderInfo_Params.GlowInnerRadius, sizeof(CreateFontRenderInfo_Params.GlowInnerRadius), &GlowInnerRadius, sizeof(GlowInnerRadius));

	UCanvas::StaticClass()->ProcessEvent(uFnCreateFontRenderInfo, &CreateFontRenderInfo_Params, nullptr);

	return CreateFontRenderInfo_Params.ReturnValue;
};

// Function Engine.Canvas.DrawTris
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[19213])
// Parameter Info:
// class UTexture*                Tex                            (CPF_Parm)
// class TArray<struct FCanvasUVTri> Triangles                      (CPF_Parm | CPF_NeedCtorLink)

void UCanvas::DrawTris(class UTexture* Tex, const class TArray<struct FCanvasUVTri>& Triangles)
{
	static UFunction* uFnDrawTris = nullptr;

	if (!uFnDrawTris)
	{
		uFnDrawTris = UFunction::FindFunction("Function Engine.Canvas.DrawTris");
	}

	UCanvas_execDrawTris_Params DrawTris_Params;
	memset(&DrawTris_Params, 0, sizeof(DrawTris_Params));
	DrawTris_Params.Tex = Tex;
	memcpy_s(&DrawTris_Params.Triangles, sizeof(DrawTris_Params.Triangles), &Triangles, sizeof(Triangles));

	uFnDrawTris->iNative = 0;
	uFnDrawTris->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnDrawTris, &DrawTris_Params, nullptr);
	uFnDrawTris->FunctionFlags |= 0x400;
	uFnDrawTris->iNative = 19213;
};

// Function Engine.Canvas.DrawTileStretched
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[19209])
// Parameter Info:
// class UTexture*                Tex                            (CPF_Parm)
// float                          XL                             (CPF_Parm)
// float                          YL                             (CPF_Parm)
// float                          U                              (CPF_Parm)
// float                          V                              (CPF_Parm)
// float                          UL                             (CPF_Parm)
// float                          VL                             (CPF_Parm)
// struct FLinearColor            LColor                         (CPF_OptionalParm | CPF_Parm)
// uint32_t                       bStretchHorizontally           (CPF_OptionalParm | CPF_Parm)
// uint32_t                       bStretchVertically             (CPF_OptionalParm | CPF_Parm)
// float                          ScalingFactor                  (CPF_OptionalParm | CPF_Parm)

void UCanvas::DrawTileStretched(class UTexture* Tex, float XL, float YL, float U, float V, float UL, float VL, const struct FLinearColor& LColor, bool bStretchHorizontally, bool bStretchVertically, float ScalingFactor)
{
	static UFunction* uFnDrawTileStretched = nullptr;

	if (!uFnDrawTileStretched)
	{
		uFnDrawTileStretched = UFunction::FindFunction("Function Engine.Canvas.DrawTileStretched");
	}

	UCanvas_execDrawTileStretched_Params DrawTileStretched_Params;
	memset(&DrawTileStretched_Params, 0, sizeof(DrawTileStretched_Params));
	DrawTileStretched_Params.Tex = Tex;
	memcpy_s(&DrawTileStretched_Params.XL, sizeof(DrawTileStretched_Params.XL), &XL, sizeof(XL));
	memcpy_s(&DrawTileStretched_Params.YL, sizeof(DrawTileStretched_Params.YL), &YL, sizeof(YL));
	memcpy_s(&DrawTileStretched_Params.U, sizeof(DrawTileStretched_Params.U), &U, sizeof(U));
	memcpy_s(&DrawTileStretched_Params.V, sizeof(DrawTileStretched_Params.V), &V, sizeof(V));
	memcpy_s(&DrawTileStretched_Params.UL, sizeof(DrawTileStretched_Params.UL), &UL, sizeof(UL));
	memcpy_s(&DrawTileStretched_Params.VL, sizeof(DrawTileStretched_Params.VL), &VL, sizeof(VL));
	memcpy_s(&DrawTileStretched_Params.LColor, sizeof(DrawTileStretched_Params.LColor), &LColor, sizeof(LColor));
	DrawTileStretched_Params.bStretchHorizontally = bStretchHorizontally;
	DrawTileStretched_Params.bStretchVertically = bStretchVertically;
	memcpy_s(&DrawTileStretched_Params.ScalingFactor, sizeof(DrawTileStretched_Params.ScalingFactor), &ScalingFactor, sizeof(ScalingFactor));

	uFnDrawTileStretched->iNative = 0;
	uFnDrawTileStretched->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnDrawTileStretched, &DrawTileStretched_Params, nullptr);
	uFnDrawTileStretched->FunctionFlags |= 0x400;
	uFnDrawTileStretched->iNative = 19209;
};

// Function Engine.Canvas.DrawRotatedMaterialTile
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[19195])
// Parameter Info:
// class UMaterialInterface*      Mat                            (CPF_Parm)
// struct FRotator                Rotation                       (CPF_Parm)
// float                          XL                             (CPF_Parm)
// float                          YL                             (CPF_Parm)
// float                          U                              (CPF_OptionalParm | CPF_Parm)
// float                          V                              (CPF_OptionalParm | CPF_Parm)
// float                          UL                             (CPF_OptionalParm | CPF_Parm)
// float                          VL                             (CPF_OptionalParm | CPF_Parm)
// float                          AnchorX                        (CPF_OptionalParm | CPF_Parm)
// float                          AnchorY                        (CPF_OptionalParm | CPF_Parm)

void UCanvas::DrawRotatedMaterialTile(class UMaterialInterface* Mat, const struct FRotator& Rotation, float XL, float YL, float U, float V, float UL, float VL, float AnchorX, float AnchorY)
{
	static UFunction* uFnDrawRotatedMaterialTile = nullptr;

	if (!uFnDrawRotatedMaterialTile)
	{
		uFnDrawRotatedMaterialTile = UFunction::FindFunction("Function Engine.Canvas.DrawRotatedMaterialTile");
	}

	UCanvas_execDrawRotatedMaterialTile_Params DrawRotatedMaterialTile_Params;
	memset(&DrawRotatedMaterialTile_Params, 0, sizeof(DrawRotatedMaterialTile_Params));
	DrawRotatedMaterialTile_Params.Mat = Mat;
	memcpy_s(&DrawRotatedMaterialTile_Params.Rotation, sizeof(DrawRotatedMaterialTile_Params.Rotation), &Rotation, sizeof(Rotation));
	memcpy_s(&DrawRotatedMaterialTile_Params.XL, sizeof(DrawRotatedMaterialTile_Params.XL), &XL, sizeof(XL));
	memcpy_s(&DrawRotatedMaterialTile_Params.YL, sizeof(DrawRotatedMaterialTile_Params.YL), &YL, sizeof(YL));
	memcpy_s(&DrawRotatedMaterialTile_Params.U, sizeof(DrawRotatedMaterialTile_Params.U), &U, sizeof(U));
	memcpy_s(&DrawRotatedMaterialTile_Params.V, sizeof(DrawRotatedMaterialTile_Params.V), &V, sizeof(V));
	memcpy_s(&DrawRotatedMaterialTile_Params.UL, sizeof(DrawRotatedMaterialTile_Params.UL), &UL, sizeof(UL));
	memcpy_s(&DrawRotatedMaterialTile_Params.VL, sizeof(DrawRotatedMaterialTile_Params.VL), &VL, sizeof(VL));
	memcpy_s(&DrawRotatedMaterialTile_Params.AnchorX, sizeof(DrawRotatedMaterialTile_Params.AnchorX), &AnchorX, sizeof(AnchorX));
	memcpy_s(&DrawRotatedMaterialTile_Params.AnchorY, sizeof(DrawRotatedMaterialTile_Params.AnchorY), &AnchorY, sizeof(AnchorY));

	uFnDrawRotatedMaterialTile->iNative = 0;
	uFnDrawRotatedMaterialTile->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnDrawRotatedMaterialTile, &DrawRotatedMaterialTile_Params, nullptr);
	uFnDrawRotatedMaterialTile->FunctionFlags |= 0x400;
	uFnDrawRotatedMaterialTile->iNative = 19195;
};

// Function Engine.Canvas.DrawRotatedTile
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[19196])
// Parameter Info:
// class UTexture*                Tex                            (CPF_Parm)
// struct FRotator                Rotation                       (CPF_Parm)
// float                          XL                             (CPF_Parm)
// float                          YL                             (CPF_Parm)
// float                          U                              (CPF_Parm)
// float                          V                              (CPF_Parm)
// float                          UL                             (CPF_Parm)
// float                          VL                             (CPF_Parm)
// float                          AnchorX                        (CPF_OptionalParm | CPF_Parm)
// float                          AnchorY                        (CPF_OptionalParm | CPF_Parm)

void UCanvas::DrawRotatedTile(class UTexture* Tex, const struct FRotator& Rotation, float XL, float YL, float U, float V, float UL, float VL, float AnchorX, float AnchorY)
{
	static UFunction* uFnDrawRotatedTile = nullptr;

	if (!uFnDrawRotatedTile)
	{
		uFnDrawRotatedTile = UFunction::FindFunction("Function Engine.Canvas.DrawRotatedTile");
	}

	UCanvas_execDrawRotatedTile_Params DrawRotatedTile_Params;
	memset(&DrawRotatedTile_Params, 0, sizeof(DrawRotatedTile_Params));
	DrawRotatedTile_Params.Tex = Tex;
	memcpy_s(&DrawRotatedTile_Params.Rotation, sizeof(DrawRotatedTile_Params.Rotation), &Rotation, sizeof(Rotation));
	memcpy_s(&DrawRotatedTile_Params.XL, sizeof(DrawRotatedTile_Params.XL), &XL, sizeof(XL));
	memcpy_s(&DrawRotatedTile_Params.YL, sizeof(DrawRotatedTile_Params.YL), &YL, sizeof(YL));
	memcpy_s(&DrawRotatedTile_Params.U, sizeof(DrawRotatedTile_Params.U), &U, sizeof(U));
	memcpy_s(&DrawRotatedTile_Params.V, sizeof(DrawRotatedTile_Params.V), &V, sizeof(V));
	memcpy_s(&DrawRotatedTile_Params.UL, sizeof(DrawRotatedTile_Params.UL), &UL, sizeof(UL));
	memcpy_s(&DrawRotatedTile_Params.VL, sizeof(DrawRotatedTile_Params.VL), &VL, sizeof(VL));
	memcpy_s(&DrawRotatedTile_Params.AnchorX, sizeof(DrawRotatedTile_Params.AnchorX), &AnchorX, sizeof(AnchorX));
	memcpy_s(&DrawRotatedTile_Params.AnchorY, sizeof(DrawRotatedTile_Params.AnchorY), &AnchorY, sizeof(AnchorY));

	uFnDrawRotatedTile->iNative = 0;
	uFnDrawRotatedTile->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnDrawRotatedTile, &DrawRotatedTile_Params, nullptr);
	uFnDrawRotatedTile->FunctionFlags |= 0x400;
	uFnDrawRotatedTile->iNative = 19196;
};

// Function Engine.Canvas.DrawMaterialTile
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[19184])
// Parameter Info:
// class UMaterialInterface*      Mat                            (CPF_Parm)
// float                          XL                             (CPF_Parm)
// float                          YL                             (CPF_Parm)
// float                          U                              (CPF_OptionalParm | CPF_Parm)
// float                          V                              (CPF_OptionalParm | CPF_Parm)
// float                          UL                             (CPF_OptionalParm | CPF_Parm)
// float                          VL                             (CPF_OptionalParm | CPF_Parm)
// uint32_t                       bClipTile                      (CPF_OptionalParm | CPF_Parm)

void UCanvas::DrawMaterialTile(class UMaterialInterface* Mat, float XL, float YL, float U, float V, float UL, float VL, bool bClipTile)
{
	static UFunction* uFnDrawMaterialTile = nullptr;

	if (!uFnDrawMaterialTile)
	{
		uFnDrawMaterialTile = UFunction::FindFunction("Function Engine.Canvas.DrawMaterialTile");
	}

	UCanvas_execDrawMaterialTile_Params DrawMaterialTile_Params;
	memset(&DrawMaterialTile_Params, 0, sizeof(DrawMaterialTile_Params));
	DrawMaterialTile_Params.Mat = Mat;
	memcpy_s(&DrawMaterialTile_Params.XL, sizeof(DrawMaterialTile_Params.XL), &XL, sizeof(XL));
	memcpy_s(&DrawMaterialTile_Params.YL, sizeof(DrawMaterialTile_Params.YL), &YL, sizeof(YL));
	memcpy_s(&DrawMaterialTile_Params.U, sizeof(DrawMaterialTile_Params.U), &U, sizeof(U));
	memcpy_s(&DrawMaterialTile_Params.V, sizeof(DrawMaterialTile_Params.V), &V, sizeof(V));
	memcpy_s(&DrawMaterialTile_Params.UL, sizeof(DrawMaterialTile_Params.UL), &UL, sizeof(UL));
	memcpy_s(&DrawMaterialTile_Params.VL, sizeof(DrawMaterialTile_Params.VL), &VL, sizeof(VL));
	DrawMaterialTile_Params.bClipTile = bClipTile;

	uFnDrawMaterialTile->iNative = 0;
	uFnDrawMaterialTile->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnDrawMaterialTile, &DrawMaterialTile_Params, nullptr);
	uFnDrawMaterialTile->FunctionFlags |= 0x400;
	uFnDrawMaterialTile->iNative = 19184;
};

// Function Engine.Canvas.PreOptimizeDrawTiles
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[24471])
// Parameter Info:
// int32_t                        Num                            (CPF_Parm)
// class UTexture*                Tex                            (CPF_Parm)
// EBlendMode                     Blend                          (CPF_OptionalParm | CPF_Parm)

void UCanvas::PreOptimizeDrawTiles(int32_t Num, class UTexture* Tex, EBlendMode Blend)
{
	static UFunction* uFnPreOptimizeDrawTiles = nullptr;

	if (!uFnPreOptimizeDrawTiles)
	{
		uFnPreOptimizeDrawTiles = UFunction::FindFunction("Function Engine.Canvas.PreOptimizeDrawTiles");
	}

	UCanvas_execPreOptimizeDrawTiles_Params PreOptimizeDrawTiles_Params;
	memset(&PreOptimizeDrawTiles_Params, 0, sizeof(PreOptimizeDrawTiles_Params));
	memcpy_s(&PreOptimizeDrawTiles_Params.Num, sizeof(PreOptimizeDrawTiles_Params.Num), &Num, sizeof(Num));
	PreOptimizeDrawTiles_Params.Tex = Tex;
	memcpy_s(&PreOptimizeDrawTiles_Params.Blend, sizeof(PreOptimizeDrawTiles_Params.Blend), &Blend, sizeof(Blend));

	uFnPreOptimizeDrawTiles->iNative = 0;
	uFnPreOptimizeDrawTiles->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnPreOptimizeDrawTiles, &PreOptimizeDrawTiles_Params, nullptr);
	uFnPreOptimizeDrawTiles->FunctionFlags |= 0x400;
	uFnPreOptimizeDrawTiles->iNative = 24471;
};

// Function Engine.Canvas.DrawTile
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[19208])
// Parameter Info:
// class UTexture*                Tex                            (CPF_Parm)
// float                          XL                             (CPF_Parm)
// float                          YL                             (CPF_Parm)
// float                          U                              (CPF_Parm)
// float                          V                              (CPF_Parm)
// float                          UL                             (CPF_Parm)
// float                          VL                             (CPF_Parm)
// struct FLinearColor            LColor                         (CPF_OptionalParm | CPF_Parm)
// uint32_t                       ClipTile                       (CPF_OptionalParm | CPF_Parm)
// EBlendMode                     Blend                          (CPF_OptionalParm | CPF_Parm)

void UCanvas::DrawTile(class UTexture* Tex, float XL, float YL, float U, float V, float UL, float VL, const struct FLinearColor& LColor, bool ClipTile, EBlendMode Blend)
{
	static UFunction* uFnDrawTile = nullptr;

	if (!uFnDrawTile)
	{
		uFnDrawTile = UFunction::FindFunction("Function Engine.Canvas.DrawTile");
	}

	UCanvas_execDrawTile_Params DrawTile_Params;
	memset(&DrawTile_Params, 0, sizeof(DrawTile_Params));
	DrawTile_Params.Tex = Tex;
	memcpy_s(&DrawTile_Params.XL, sizeof(DrawTile_Params.XL), &XL, sizeof(XL));
	memcpy_s(&DrawTile_Params.YL, sizeof(DrawTile_Params.YL), &YL, sizeof(YL));
	memcpy_s(&DrawTile_Params.U, sizeof(DrawTile_Params.U), &U, sizeof(U));
	memcpy_s(&DrawTile_Params.V, sizeof(DrawTile_Params.V), &V, sizeof(V));
	memcpy_s(&DrawTile_Params.UL, sizeof(DrawTile_Params.UL), &UL, sizeof(UL));
	memcpy_s(&DrawTile_Params.VL, sizeof(DrawTile_Params.VL), &VL, sizeof(VL));
	memcpy_s(&DrawTile_Params.LColor, sizeof(DrawTile_Params.LColor), &LColor, sizeof(LColor));
	DrawTile_Params.ClipTile = ClipTile;
	memcpy_s(&DrawTile_Params.Blend, sizeof(DrawTile_Params.Blend), &Blend, sizeof(Blend));

	uFnDrawTile->iNative = 0;
	uFnDrawTile->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnDrawTile, &DrawTile_Params, nullptr);
	uFnDrawTile->FunctionFlags |= 0x400;
	uFnDrawTile->iNative = 19208;
};

// Function Engine.Controller.GeneratePathToLocation
// [0x00024800] (FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FVector                 Goal                           (CPF_Parm)
// float                          WithinDistance                 (CPF_OptionalParm | CPF_Parm)
// uint32_t                       bAllowPartialPath              (CPF_OptionalParm | CPF_Parm)

bool AController::eventGeneratePathToLocation(const struct FVector& Goal, float WithinDistance, bool bAllowPartialPath)
{
	static UFunction* uFnGeneratePathToLocation = nullptr;

	if (!uFnGeneratePathToLocation)
	{
		uFnGeneratePathToLocation = UFunction::FindFunction("Function Engine.Controller.GeneratePathToLocation");
	}

	AController_eventGeneratePathToLocation_Params GeneratePathToLocation_Params;
	memset(&GeneratePathToLocation_Params, 0, sizeof(GeneratePathToLocation_Params));
	memcpy_s(&GeneratePathToLocation_Params.Goal, sizeof(GeneratePathToLocation_Params.Goal), &Goal, sizeof(Goal));
	memcpy_s(&GeneratePathToLocation_Params.WithinDistance, sizeof(GeneratePathToLocation_Params.WithinDistance), &WithinDistance, sizeof(WithinDistance));
	GeneratePathToLocation_Params.bAllowPartialPath = bAllowPartialPath;

	this->ProcessEvent(uFnGeneratePathToLocation, &GeneratePathToLocation_Params, nullptr);

	return GeneratePathToLocation_Params.ReturnValue;
};

// Function Engine.Controller.GeneratePathToActor
// [0x00024800] (FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class AActor*                  Goal                           (CPF_Parm)
// float                          WithinDistance                 (CPF_OptionalParm | CPF_Parm)
// uint32_t                       bAllowPartialPath              (CPF_OptionalParm | CPF_Parm)

bool AController::eventGeneratePathToActor(class AActor* Goal, float WithinDistance, bool bAllowPartialPath)
{
	static UFunction* uFnGeneratePathToActor = nullptr;

	if (!uFnGeneratePathToActor)
	{
		uFnGeneratePathToActor = UFunction::FindFunction("Function Engine.Controller.GeneratePathToActor");
	}

	AController_eventGeneratePathToActor_Params GeneratePathToActor_Params;
	memset(&GeneratePathToActor_Params, 0, sizeof(GeneratePathToActor_Params));
	GeneratePathToActor_Params.Goal = Goal;
	memcpy_s(&GeneratePathToActor_Params.WithinDistance, sizeof(GeneratePathToActor_Params.WithinDistance), &WithinDistance, sizeof(WithinDistance));
	GeneratePathToActor_Params.bAllowPartialPath = bAllowPartialPath;

	this->ProcessEvent(uFnGeneratePathToActor, &GeneratePathToActor_Params, nullptr);

	return GeneratePathToActor_Params.ReturnValue;
};

// Function Engine.Controller.CurrentLevelUnloaded
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AController::eventCurrentLevelUnloaded()
{
	static UFunction* uFnCurrentLevelUnloaded = nullptr;

	if (!uFnCurrentLevelUnloaded)
	{
		uFnCurrentLevelUnloaded = UFunction::FindFunction("Function Engine.Controller.CurrentLevelUnloaded");
	}

	AController_eventCurrentLevelUnloaded_Params CurrentLevelUnloaded_Params;
	memset(&CurrentLevelUnloaded_Params, 0, sizeof(CurrentLevelUnloaded_Params));

	this->ProcessEvent(uFnCurrentLevelUnloaded, &CurrentLevelUnloaded_Params, nullptr);
};

// Function Engine.Controller.IsInCombat
// [0x00024800] (FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       bForceCheck                    (CPF_OptionalParm | CPF_Parm)

bool AController::eventIsInCombat(bool bForceCheck)
{
	static UFunction* uFnIsInCombat = nullptr;

	if (!uFnIsInCombat)
	{
		uFnIsInCombat = UFunction::FindFunction("Function Engine.Controller.IsInCombat");
	}

	AController_eventIsInCombat_Params IsInCombat_Params;
	memset(&IsInCombat_Params, 0, sizeof(IsInCombat_Params));
	IsInCombat_Params.bForceCheck = bForceCheck;

	this->ProcessEvent(uFnIsInCombat, &IsInCombat_Params, nullptr);

	return IsInCombat_Params.ReturnValue;
};

// Function Engine.Controller.IsSpectating
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AController::eventIsSpectating()
{
	static UFunction* uFnIsSpectating = nullptr;

	if (!uFnIsSpectating)
	{
		uFnIsSpectating = UFunction::FindFunction("Function Engine.Controller.IsSpectating");
	}

	AController_eventIsSpectating_Params IsSpectating_Params;
	memset(&IsSpectating_Params, 0, sizeof(IsSpectating_Params));

	this->ProcessEvent(uFnIsSpectating, &IsSpectating_Params, nullptr);

	return IsSpectating_Params.ReturnValue;
};

// Function Engine.Controller.OnToggleHidden
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_ToggleHidden*    Action                         (CPF_Parm)

void AController::OnToggleHidden(class USeqAct_ToggleHidden* Action)
{
	static UFunction* uFnOnToggleHidden = nullptr;

	if (!uFnOnToggleHidden)
	{
		uFnOnToggleHidden = UFunction::FindFunction("Function Engine.Controller.OnToggleHidden");
	}

	AController_execOnToggleHidden_Params OnToggleHidden_Params;
	memset(&OnToggleHidden_Params, 0, sizeof(OnToggleHidden_Params));
	OnToggleHidden_Params.Action = Action;

	this->ProcessEvent(uFnOnToggleHidden, &OnToggleHidden_Params, nullptr);
};

// Function Engine.Controller.OnModifyHealth
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_ModifyHealth*    Action                         (CPF_Parm)

void AController::OnModifyHealth(class USeqAct_ModifyHealth* Action)
{
	static UFunction* uFnOnModifyHealth = nullptr;

	if (!uFnOnModifyHealth)
	{
		uFnOnModifyHealth = UFunction::FindFunction("Function Engine.Controller.OnModifyHealth");
	}

	AController_execOnModifyHealth_Params OnModifyHealth_Params;
	memset(&OnModifyHealth_Params, 0, sizeof(OnModifyHealth_Params));
	OnModifyHealth_Params.Action = Action;

	this->ProcessEvent(uFnOnModifyHealth, &OnModifyHealth_Params, nullptr);
};

// Function Engine.Controller.OnSetVelocity
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_SetVelocity*     Action                         (CPF_Parm)

void AController::OnSetVelocity(class USeqAct_SetVelocity* Action)
{
	static UFunction* uFnOnSetVelocity = nullptr;

	if (!uFnOnSetVelocity)
	{
		uFnOnSetVelocity = UFunction::FindFunction("Function Engine.Controller.OnSetVelocity");
	}

	AController_execOnSetVelocity_Params OnSetVelocity_Params;
	memset(&OnSetVelocity_Params, 0, sizeof(OnSetVelocity_Params));
	OnSetVelocity_Params.Action = Action;

	this->ProcessEvent(uFnOnSetVelocity, &OnSetVelocity_Params, nullptr);
};

// Function Engine.Controller.OnSetPhysics
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_SetPhysics*      Action                         (CPF_Parm)

void AController::OnSetPhysics(class USeqAct_SetPhysics* Action)
{
	static UFunction* uFnOnSetPhysics = nullptr;

	if (!uFnOnSetPhysics)
	{
		uFnOnSetPhysics = UFunction::FindFunction("Function Engine.Controller.OnSetPhysics");
	}

	AController_execOnSetPhysics_Params OnSetPhysics_Params;
	memset(&OnSetPhysics_Params, 0, sizeof(OnSetPhysics_Params));
	OnSetPhysics_Params.Action = Action;

	this->ProcessEvent(uFnOnSetPhysics, &OnSetPhysics_Params, nullptr);
};

// Function Engine.Controller.OnToggleAffectedByHitEffects
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_ToggleAffectedByHitEffects* inAction                       (CPF_Parm)

void AController::OnToggleAffectedByHitEffects(class USeqAct_ToggleAffectedByHitEffects* inAction)
{
	static UFunction* uFnOnToggleAffectedByHitEffects = nullptr;

	if (!uFnOnToggleAffectedByHitEffects)
	{
		uFnOnToggleAffectedByHitEffects = UFunction::FindFunction("Function Engine.Controller.OnToggleAffectedByHitEffects");
	}

	AController_execOnToggleAffectedByHitEffects_Params OnToggleAffectedByHitEffects_Params;
	memset(&OnToggleAffectedByHitEffects_Params, 0, sizeof(OnToggleAffectedByHitEffects_Params));
	OnToggleAffectedByHitEffects_Params.inAction = inAction;

	this->ProcessEvent(uFnOnToggleAffectedByHitEffects, &OnToggleAffectedByHitEffects_Params, nullptr);
};

// Function Engine.Controller.OnToggleGodMode
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_ToggleGodMode*   inAction                       (CPF_Parm)

void AController::OnToggleGodMode(class USeqAct_ToggleGodMode* inAction)
{
	static UFunction* uFnOnToggleGodMode = nullptr;

	if (!uFnOnToggleGodMode)
	{
		uFnOnToggleGodMode = UFunction::FindFunction("Function Engine.Controller.OnToggleGodMode");
	}

	AController_execOnToggleGodMode_Params OnToggleGodMode_Params;
	memset(&OnToggleGodMode_Params, 0, sizeof(OnToggleGodMode_Params));
	OnToggleGodMode_Params.inAction = inAction;

	this->ProcessEvent(uFnOnToggleGodMode, &OnToggleGodMode_Params, nullptr);
};

// Function Engine.Controller.OnTeleport
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_Teleport*        Action                         (CPF_Parm)

void AController::OnTeleport(class USeqAct_Teleport* Action)
{
	static UFunction* uFnOnTeleport = nullptr;

	if (!uFnOnTeleport)
	{
		uFnOnTeleport = UFunction::FindFunction("Function Engine.Controller.OnTeleport");
	}

	AController_execOnTeleport_Params OnTeleport_Params;
	memset(&OnTeleport_Params, 0, sizeof(OnTeleport_Params));
	OnTeleport_Params.Action = Action;

	this->ProcessEvent(uFnOnTeleport, &OnTeleport_Params, nullptr);
};

// Function Engine.Controller.DisplayDebug
// [0x00420100] (FUNC_Simulated | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// class AHUD*                    HUD                            (CPF_Parm)
// float                          out_YL                         (CPF_Parm | CPF_OutParm)
// float                          out_YPos                       (CPF_Parm | CPF_OutParm)

void AController::DisplayDebug(class AHUD* HUD, float& out_YL, float& out_YPos)
{
	static UFunction* uFnDisplayDebug = nullptr;

	if (!uFnDisplayDebug)
	{
		uFnDisplayDebug = UFunction::FindFunction("Function Engine.Controller.DisplayDebug");
	}

	AController_execDisplayDebug_Params DisplayDebug_Params;
	memset(&DisplayDebug_Params, 0, sizeof(DisplayDebug_Params));
	DisplayDebug_Params.HUD = HUD;
	memcpy_s(&DisplayDebug_Params.out_YL, sizeof(DisplayDebug_Params.out_YL), &out_YL, sizeof(out_YL));
	memcpy_s(&DisplayDebug_Params.out_YPos, sizeof(DisplayDebug_Params.out_YPos), &out_YPos, sizeof(out_YPos));

	this->ProcessEvent(uFnDisplayDebug, &DisplayDebug_Params, nullptr);

	memcpy_s(&out_YL, sizeof(out_YL), &DisplayDebug_Params.out_YL, sizeof(DisplayDebug_Params.out_YL));
	memcpy_s(&out_YPos, sizeof(out_YPos), &DisplayDebug_Params.out_YPos, sizeof(DisplayDebug_Params.out_YPos));
};

// Function Engine.Controller.StopLatentExecution
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[26324])
// Parameter Info:

void AController::StopLatentExecution()
{
	static UFunction* uFnStopLatentExecution = nullptr;

	if (!uFnStopLatentExecution)
	{
		uFnStopLatentExecution = UFunction::FindFunction("Function Engine.Controller.StopLatentExecution");
	}

	AController_execStopLatentExecution_Params StopLatentExecution_Params;
	memset(&StopLatentExecution_Params, 0, sizeof(StopLatentExecution_Params));

	uFnStopLatentExecution->iNative = 0;
	uFnStopLatentExecution->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnStopLatentExecution, &StopLatentExecution_Params, nullptr);
	uFnStopLatentExecution->FunctionFlags |= 0x400;
	uFnStopLatentExecution->iNative = 26324;
};

// Function Engine.Controller.InLatentExecution
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[21174])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        LatentActionNumber             (CPF_Parm)

bool AController::InLatentExecution(int32_t LatentActionNumber)
{
	static UFunction* uFnInLatentExecution = nullptr;

	if (!uFnInLatentExecution)
	{
		uFnInLatentExecution = UFunction::FindFunction("Function Engine.Controller.InLatentExecution");
	}

	AController_execInLatentExecution_Params InLatentExecution_Params;
	memset(&InLatentExecution_Params, 0, sizeof(InLatentExecution_Params));
	memcpy_s(&InLatentExecution_Params.LatentActionNumber, sizeof(InLatentExecution_Params.LatentActionNumber), &LatentActionNumber, sizeof(LatentActionNumber));

	uFnInLatentExecution->iNative = 0;
	uFnInLatentExecution->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnInLatentExecution, &InLatentExecution_Params, nullptr);
	uFnInLatentExecution->FunctionFlags |= 0x400;
	uFnInLatentExecution->iNative = 21174;

	return InLatentExecution_Params.ReturnValue;
};

// Function Engine.Controller.NotifyMissedJump
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AController::eventNotifyMissedJump()
{
	static UFunction* uFnNotifyMissedJump = nullptr;

	if (!uFnNotifyMissedJump)
	{
		uFnNotifyMissedJump = UFunction::FindFunction("Function Engine.Controller.NotifyMissedJump");
	}

	AController_eventNotifyMissedJump_Params NotifyMissedJump_Params;
	memset(&NotifyMissedJump_Params, 0, sizeof(NotifyMissedJump_Params));

	this->ProcessEvent(uFnNotifyMissedJump, &NotifyMissedJump_Params, nullptr);
};

// Function Engine.Controller.NotifyJumpApex
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AController::eventNotifyJumpApex()
{
	static UFunction* uFnNotifyJumpApex = nullptr;

	if (!uFnNotifyJumpApex)
	{
		uFnNotifyJumpApex = UFunction::FindFunction("Function Engine.Controller.NotifyJumpApex");
	}

	AController_eventNotifyJumpApex_Params NotifyJumpApex_Params;
	memset(&NotifyJumpApex_Params, 0, sizeof(NotifyJumpApex_Params));

	this->ProcessEvent(uFnNotifyJumpApex, &NotifyJumpApex_Params, nullptr);
};

// Function Engine.Controller.NotifyFallingHitWall
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FVector                 HitNormal                      (CPF_Parm)
// class AActor*                  Wall                           (CPF_Parm)

void AController::eventNotifyFallingHitWall(const struct FVector& HitNormal, class AActor* Wall)
{
	static UFunction* uFnNotifyFallingHitWall = nullptr;

	if (!uFnNotifyFallingHitWall)
	{
		uFnNotifyFallingHitWall = UFunction::FindFunction("Function Engine.Controller.NotifyFallingHitWall");
	}

	AController_eventNotifyFallingHitWall_Params NotifyFallingHitWall_Params;
	memset(&NotifyFallingHitWall_Params, 0, sizeof(NotifyFallingHitWall_Params));
	memcpy_s(&NotifyFallingHitWall_Params.HitNormal, sizeof(NotifyFallingHitWall_Params.HitNormal), &HitNormal, sizeof(HitNormal));
	NotifyFallingHitWall_Params.Wall = Wall;

	this->ProcessEvent(uFnNotifyFallingHitWall, &NotifyFallingHitWall_Params, nullptr);
};

// Function Engine.Controller.NotifyHitWall
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FVector                 HitNormal                      (CPF_Parm)
// class AActor*                  Wall                           (CPF_Parm)

bool AController::eventNotifyHitWall(const struct FVector& HitNormal, class AActor* Wall)
{
	static UFunction* uFnNotifyHitWall = nullptr;

	if (!uFnNotifyHitWall)
	{
		uFnNotifyHitWall = UFunction::FindFunction("Function Engine.Controller.NotifyHitWall");
	}

	AController_eventNotifyHitWall_Params NotifyHitWall_Params;
	memset(&NotifyHitWall_Params, 0, sizeof(NotifyHitWall_Params));
	memcpy_s(&NotifyHitWall_Params.HitNormal, sizeof(NotifyHitWall_Params.HitNormal), &HitNormal, sizeof(HitNormal));
	NotifyHitWall_Params.Wall = Wall;

	this->ProcessEvent(uFnNotifyHitWall, &NotifyHitWall_Params, nullptr);

	return NotifyHitWall_Params.ReturnValue;
};

// Function Engine.Controller.NotifyLanded
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FVector                 HitNormal                      (CPF_Parm)
// class AActor*                  FloorActor                     (CPF_Parm)

bool AController::eventNotifyLanded(const struct FVector& HitNormal, class AActor* FloorActor)
{
	static UFunction* uFnNotifyLanded = nullptr;

	if (!uFnNotifyLanded)
	{
		uFnNotifyLanded = UFunction::FindFunction("Function Engine.Controller.NotifyLanded");
	}

	AController_eventNotifyLanded_Params NotifyLanded_Params;
	memset(&NotifyLanded_Params, 0, sizeof(NotifyLanded_Params));
	memcpy_s(&NotifyLanded_Params.HitNormal, sizeof(NotifyLanded_Params.HitNormal), &HitNormal, sizeof(HitNormal));
	NotifyLanded_Params.FloorActor = FloorActor;

	this->ProcessEvent(uFnNotifyLanded, &NotifyLanded_Params, nullptr);

	return NotifyLanded_Params.ReturnValue;
};

// Function Engine.Controller.NotifyHeadVolumeChange
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class APhysicsVolume*          NewVolume                      (CPF_Parm)

bool AController::eventNotifyHeadVolumeChange(class APhysicsVolume* NewVolume)
{
	static UFunction* uFnNotifyHeadVolumeChange = nullptr;

	if (!uFnNotifyHeadVolumeChange)
	{
		uFnNotifyHeadVolumeChange = UFunction::FindFunction("Function Engine.Controller.NotifyHeadVolumeChange");
	}

	AController_eventNotifyHeadVolumeChange_Params NotifyHeadVolumeChange_Params;
	memset(&NotifyHeadVolumeChange_Params, 0, sizeof(NotifyHeadVolumeChange_Params));
	NotifyHeadVolumeChange_Params.NewVolume = NewVolume;

	this->ProcessEvent(uFnNotifyHeadVolumeChange, &NotifyHeadVolumeChange_Params, nullptr);

	return NotifyHeadVolumeChange_Params.ReturnValue;
};

// Function Engine.Controller.NotifyPhysicsVolumeChange
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class APhysicsVolume*          NewVolume                      (CPF_Parm)

void AController::eventNotifyPhysicsVolumeChange(class APhysicsVolume* NewVolume)
{
	static UFunction* uFnNotifyPhysicsVolumeChange = nullptr;

	if (!uFnNotifyPhysicsVolumeChange)
	{
		uFnNotifyPhysicsVolumeChange = UFunction::FindFunction("Function Engine.Controller.NotifyPhysicsVolumeChange");
	}

	AController_eventNotifyPhysicsVolumeChange_Params NotifyPhysicsVolumeChange_Params;
	memset(&NotifyPhysicsVolumeChange_Params, 0, sizeof(NotifyPhysicsVolumeChange_Params));
	NotifyPhysicsVolumeChange_Params.NewVolume = NewVolume;

	this->ProcessEvent(uFnNotifyPhysicsVolumeChange, &NotifyPhysicsVolumeChange_Params, nullptr);
};

// Function Engine.Controller.IsAimingAt
// [0x00820102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class AActor*                  ATarget                        (CPF_Parm)
// float                          Epsilon                        (CPF_Parm)

bool AController::IsAimingAt(class AActor* ATarget, float Epsilon)
{
	static UFunction* uFnIsAimingAt = nullptr;

	if (!uFnIsAimingAt)
	{
		uFnIsAimingAt = UFunction::FindFunction("Function Engine.Controller.IsAimingAt");
	}

	AController_execIsAimingAt_Params IsAimingAt_Params;
	memset(&IsAimingAt_Params, 0, sizeof(IsAimingAt_Params));
	IsAimingAt_Params.ATarget = ATarget;
	memcpy_s(&IsAimingAt_Params.Epsilon, sizeof(IsAimingAt_Params.Epsilon), &Epsilon, sizeof(Epsilon));

	this->ProcessEvent(uFnIsAimingAt, &IsAimingAt_Params, nullptr);

	return IsAimingAt_Params.ReturnValue;
};

// Function Engine.Controller.GetActorEyesViewPoint
// [0x00420902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// struct FVector                 out_Location                   (CPF_Parm | CPF_OutParm)
// struct FRotator                out_Rotation                   (CPF_Parm | CPF_OutParm)

void AController::eventGetActorEyesViewPoint(struct FVector& out_Location, struct FRotator& out_Rotation)
{
	static UFunction* uFnGetActorEyesViewPoint = nullptr;

	if (!uFnGetActorEyesViewPoint)
	{
		uFnGetActorEyesViewPoint = UFunction::FindFunction("Function Engine.Controller.GetActorEyesViewPoint");
	}

	AController_eventGetActorEyesViewPoint_Params GetActorEyesViewPoint_Params;
	memset(&GetActorEyesViewPoint_Params, 0, sizeof(GetActorEyesViewPoint_Params));
	memcpy_s(&GetActorEyesViewPoint_Params.out_Location, sizeof(GetActorEyesViewPoint_Params.out_Location), &out_Location, sizeof(out_Location));
	memcpy_s(&GetActorEyesViewPoint_Params.out_Rotation, sizeof(GetActorEyesViewPoint_Params.out_Rotation), &out_Rotation, sizeof(out_Rotation));

	this->ProcessEvent(uFnGetActorEyesViewPoint, &GetActorEyesViewPoint_Params, nullptr);

	memcpy_s(&out_Location, sizeof(out_Location), &GetActorEyesViewPoint_Params.out_Location, sizeof(GetActorEyesViewPoint_Params.out_Location));
	memcpy_s(&out_Rotation, sizeof(out_Rotation), &GetActorEyesViewPoint_Params.out_Rotation, sizeof(GetActorEyesViewPoint_Params.out_Rotation));
};

// Function Engine.Controller.GetPlayerViewPoint
// [0x00420500] (FUNC_Simulated | FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20687])
// Parameter Info:
// struct FVector                 out_Location                   (CPF_Parm | CPF_OutParm)
// struct FRotator                out_Rotation                   (CPF_Parm | CPF_OutParm)

void AController::GetPlayerViewPoint(struct FVector& out_Location, struct FRotator& out_Rotation)
{
	static UFunction* uFnGetPlayerViewPoint = nullptr;

	if (!uFnGetPlayerViewPoint)
	{
		uFnGetPlayerViewPoint = UFunction::FindFunction("Function Engine.Controller.GetPlayerViewPoint");
	}

	AController_execGetPlayerViewPoint_Params GetPlayerViewPoint_Params;
	memset(&GetPlayerViewPoint_Params, 0, sizeof(GetPlayerViewPoint_Params));
	memcpy_s(&GetPlayerViewPoint_Params.out_Location, sizeof(GetPlayerViewPoint_Params.out_Location), &out_Location, sizeof(out_Location));
	memcpy_s(&GetPlayerViewPoint_Params.out_Rotation, sizeof(GetPlayerViewPoint_Params.out_Rotation), &out_Rotation, sizeof(out_Rotation));

	uFnGetPlayerViewPoint->iNative = 0;
	uFnGetPlayerViewPoint->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetPlayerViewPoint, &GetPlayerViewPoint_Params, nullptr);
	uFnGetPlayerViewPoint->FunctionFlags |= 0x400;
	uFnGetPlayerViewPoint->iNative = 20687;

	memcpy_s(&out_Location, sizeof(out_Location), &GetPlayerViewPoint_Params.out_Location, sizeof(GetPlayerViewPoint_Params.out_Location));
	memcpy_s(&out_Rotation, sizeof(out_Rotation), &GetPlayerViewPoint_Params.out_Rotation, sizeof(GetPlayerViewPoint_Params.out_Rotation));
};

// Function Engine.Controller.MoverFinished
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AController::eventMoverFinished()
{
	static UFunction* uFnMoverFinished = nullptr;

	if (!uFnMoverFinished)
	{
		uFnMoverFinished = UFunction::FindFunction("Function Engine.Controller.MoverFinished");
	}

	AController_eventMoverFinished_Params MoverFinished_Params;
	memset(&MoverFinished_Params, 0, sizeof(MoverFinished_Params));

	this->ProcessEvent(uFnMoverFinished, &MoverFinished_Params, nullptr);

	return MoverFinished_Params.ReturnValue;
};

// Function Engine.Controller.AllowDetourTo
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class ANavigationPoint*        N                              (CPF_Parm)

bool AController::eventAllowDetourTo(class ANavigationPoint* N)
{
	static UFunction* uFnAllowDetourTo = nullptr;

	if (!uFnAllowDetourTo)
	{
		uFnAllowDetourTo = UFunction::FindFunction("Function Engine.Controller.AllowDetourTo");
	}

	AController_eventAllowDetourTo_Params AllowDetourTo_Params;
	memset(&AllowDetourTo_Params, 0, sizeof(AllowDetourTo_Params));
	AllowDetourTo_Params.N = N;

	this->ProcessEvent(uFnAllowDetourTo, &AllowDetourTo_Params, nullptr);

	return AllowDetourTo_Params.ReturnValue;
};

// Function Engine.Controller.MayFall
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bFloor                         (CPF_Parm)
// struct FVector                 FloorNormal                    (CPF_Parm)

void AController::eventMayFall(bool bFloor, const struct FVector& FloorNormal)
{
	static UFunction* uFnMayFall = nullptr;

	if (!uFnMayFall)
	{
		uFnMayFall = UFunction::FindFunction("Function Engine.Controller.MayFall");
	}

	AController_eventMayFall_Params MayFall_Params;
	memset(&MayFall_Params, 0, sizeof(MayFall_Params));
	MayFall_Params.bFloor = bFloor;
	memcpy_s(&MayFall_Params.FloorNormal, sizeof(MayFall_Params.FloorNormal), &FloorNormal, sizeof(FloorNormal));

	this->ProcessEvent(uFnMayFall, &MayFall_Params, nullptr);
};

// Function Engine.Controller.LongFall
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AController::eventLongFall()
{
	static UFunction* uFnLongFall = nullptr;

	if (!uFnLongFall)
	{
		uFnLongFall = UFunction::FindFunction("Function Engine.Controller.LongFall");
	}

	AController_eventLongFall_Params LongFall_Params;
	memset(&LongFall_Params, 0, sizeof(LongFall_Params));

	this->ProcessEvent(uFnLongFall, &LongFall_Params, nullptr);
};

// Function Engine.Controller.SetupSpecialPathAbilities
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AController::eventSetupSpecialPathAbilities()
{
	static UFunction* uFnSetupSpecialPathAbilities = nullptr;

	if (!uFnSetupSpecialPathAbilities)
	{
		uFnSetupSpecialPathAbilities = UFunction::FindFunction("Function Engine.Controller.SetupSpecialPathAbilities");
	}

	AController_eventSetupSpecialPathAbilities_Params SetupSpecialPathAbilities_Params;
	memset(&SetupSpecialPathAbilities_Params, 0, sizeof(SetupSpecialPathAbilities_Params));

	this->ProcessEvent(uFnSetupSpecialPathAbilities, &SetupSpecialPathAbilities_Params, nullptr);
};

// Function Engine.Controller.EnemyNotVisible
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AController::eventEnemyNotVisible()
{
	static UFunction* uFnEnemyNotVisible = nullptr;

	if (!uFnEnemyNotVisible)
	{
		uFnEnemyNotVisible = UFunction::FindFunction("Function Engine.Controller.EnemyNotVisible");
	}

	AController_eventEnemyNotVisible_Params EnemyNotVisible_Params;
	memset(&EnemyNotVisible_Params, 0, sizeof(EnemyNotVisible_Params));

	this->ProcessEvent(uFnEnemyNotVisible, &EnemyNotVisible_Params, nullptr);
};

// Function Engine.Controller.SeeMonster
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class APawn*                   Seen                           (CPF_Parm)

void AController::eventSeeMonster(class APawn* Seen)
{
	static UFunction* uFnSeeMonster = nullptr;

	if (!uFnSeeMonster)
	{
		uFnSeeMonster = UFunction::FindFunction("Function Engine.Controller.SeeMonster");
	}

	AController_eventSeeMonster_Params SeeMonster_Params;
	memset(&SeeMonster_Params, 0, sizeof(SeeMonster_Params));
	SeeMonster_Params.Seen = Seen;

	this->ProcessEvent(uFnSeeMonster, &SeeMonster_Params, nullptr);
};

// Function Engine.Controller.SeePlayer
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class APawn*                   Seen                           (CPF_Parm)

void AController::eventSeePlayer(class APawn* Seen)
{
	static UFunction* uFnSeePlayer = nullptr;

	if (!uFnSeePlayer)
	{
		uFnSeePlayer = UFunction::FindFunction("Function Engine.Controller.SeePlayer");
	}

	AController_eventSeePlayer_Params SeePlayer_Params;
	memset(&SeePlayer_Params, 0, sizeof(SeePlayer_Params));
	SeePlayer_Params.Seen = Seen;

	this->ProcessEvent(uFnSeePlayer, &SeePlayer_Params, nullptr);
};

// Function Engine.Controller.PickTarget
// [0x21300420401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[24246])
// Parameter Info:
// class APawn*                   ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class APawn*                   TargetClass                    (CPF_Parm)
// struct FVector                 FireDir                        (CPF_Parm)
// struct FVector                 projStart                      (CPF_Parm)
// float                          MaxRange                       (CPF_Parm)
// float                          bestAim                        (CPF_Parm | CPF_OutParm)
// float                          bestDist                       (CPF_Parm | CPF_OutParm)

class APawn* AController::PickTarget(class APawn* TargetClass, const struct FVector& FireDir, const struct FVector& projStart, float MaxRange, float& bestAim, float& bestDist)
{
	static UFunction* uFnPickTarget = nullptr;

	if (!uFnPickTarget)
	{
		uFnPickTarget = UFunction::FindFunction("Function Engine.Controller.PickTarget");
	}

	AController_execPickTarget_Params PickTarget_Params;
	memset(&PickTarget_Params, 0, sizeof(PickTarget_Params));
	PickTarget_Params.TargetClass = TargetClass;
	memcpy_s(&PickTarget_Params.FireDir, sizeof(PickTarget_Params.FireDir), &FireDir, sizeof(FireDir));
	memcpy_s(&PickTarget_Params.projStart, sizeof(PickTarget_Params.projStart), &projStart, sizeof(projStart));
	memcpy_s(&PickTarget_Params.MaxRange, sizeof(PickTarget_Params.MaxRange), &MaxRange, sizeof(MaxRange));
	memcpy_s(&PickTarget_Params.bestAim, sizeof(PickTarget_Params.bestAim), &bestAim, sizeof(bestAim));
	memcpy_s(&PickTarget_Params.bestDist, sizeof(PickTarget_Params.bestDist), &bestDist, sizeof(bestDist));

	uFnPickTarget->iNative = 0;
	uFnPickTarget->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnPickTarget, &PickTarget_Params, nullptr);
	uFnPickTarget->FunctionFlags |= 0x400;
	uFnPickTarget->iNative = 24246;

	memcpy_s(&bestAim, sizeof(bestAim), &PickTarget_Params.bestAim, sizeof(PickTarget_Params.bestAim));
	memcpy_s(&bestDist, sizeof(bestDist), &PickTarget_Params.bestDist, sizeof(PickTarget_Params.bestDist));

	return PickTarget_Params.ReturnValue;
};

// Function Engine.Controller.CanSeeByPoints
// [0x21900020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[17955])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FVector                 ViewLocation                   (CPF_Parm)
// struct FVector                 TestLocation                   (CPF_Parm)
// struct FRotator                ViewRotation                   (CPF_Parm)

bool AController::CanSeeByPoints(const struct FVector& ViewLocation, const struct FVector& TestLocation, const struct FRotator& ViewRotation)
{
	static UFunction* uFnCanSeeByPoints = nullptr;

	if (!uFnCanSeeByPoints)
	{
		uFnCanSeeByPoints = UFunction::FindFunction("Function Engine.Controller.CanSeeByPoints");
	}

	AController_execCanSeeByPoints_Params CanSeeByPoints_Params;
	memset(&CanSeeByPoints_Params, 0, sizeof(CanSeeByPoints_Params));
	memcpy_s(&CanSeeByPoints_Params.ViewLocation, sizeof(CanSeeByPoints_Params.ViewLocation), &ViewLocation, sizeof(ViewLocation));
	memcpy_s(&CanSeeByPoints_Params.TestLocation, sizeof(CanSeeByPoints_Params.TestLocation), &TestLocation, sizeof(TestLocation));
	memcpy_s(&CanSeeByPoints_Params.ViewRotation, sizeof(CanSeeByPoints_Params.ViewRotation), &ViewRotation, sizeof(ViewRotation));

	uFnCanSeeByPoints->iNative = 0;
	uFnCanSeeByPoints->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnCanSeeByPoints, &CanSeeByPoints_Params, nullptr);
	uFnCanSeeByPoints->FunctionFlags |= 0x400;
	uFnCanSeeByPoints->iNative = 17955;

	return CanSeeByPoints_Params.ReturnValue;
};

// Function Engine.Controller.CanSee
// [0x21500020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[17954])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class APawn*                   Other                          (CPF_Parm)

bool AController::CanSee(class APawn* Other)
{
	static UFunction* uFnCanSee = nullptr;

	if (!uFnCanSee)
	{
		uFnCanSee = UFunction::FindFunction("Function Engine.Controller.CanSee");
	}

	AController_execCanSee_Params CanSee_Params;
	memset(&CanSee_Params, 0, sizeof(CanSee_Params));
	CanSee_Params.Other = Other;

	uFnCanSee->iNative = 0;
	uFnCanSee->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnCanSee, &CanSee_Params, nullptr);
	uFnCanSee->FunctionFlags |= 0x400;
	uFnCanSee->iNative = 17954;

	return CanSee_Params.ReturnValue;
};

// Function Engine.Controller.LineOfSightTo
// [0x20200024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[21737])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class AActor*                  Other                          (CPF_Parm)
// struct FVector                 chkLocation                    (CPF_OptionalParm | CPF_Parm)
// uint32_t                       bTryAlternateTargetLoc         (CPF_OptionalParm | CPF_Parm)

bool AController::LineOfSightTo(class AActor* Other, const struct FVector& chkLocation, bool bTryAlternateTargetLoc)
{
	static UFunction* uFnLineOfSightTo = nullptr;

	if (!uFnLineOfSightTo)
	{
		uFnLineOfSightTo = UFunction::FindFunction("Function Engine.Controller.LineOfSightTo");
	}

	AController_execLineOfSightTo_Params LineOfSightTo_Params;
	memset(&LineOfSightTo_Params, 0, sizeof(LineOfSightTo_Params));
	LineOfSightTo_Params.Other = Other;
	memcpy_s(&LineOfSightTo_Params.chkLocation, sizeof(LineOfSightTo_Params.chkLocation), &chkLocation, sizeof(chkLocation));
	LineOfSightTo_Params.bTryAlternateTargetLoc = bTryAlternateTargetLoc;

	uFnLineOfSightTo->iNative = 0;
	uFnLineOfSightTo->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnLineOfSightTo, &LineOfSightTo_Params, nullptr);
	uFnLineOfSightTo->FunctionFlags |= 0x400;
	uFnLineOfSightTo->iNative = 21737;

	return LineOfSightTo_Params.ReturnValue;
};

// Function Engine.Controller.StopFiring
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AController::eventStopFiring()
{
	static UFunction* uFnStopFiring = nullptr;

	if (!uFnStopFiring)
	{
		uFnStopFiring = UFunction::FindFunction("Function Engine.Controller.StopFiring");
	}

	AController_eventStopFiring_Params StopFiring_Params;
	memset(&StopFiring_Params, 0, sizeof(StopFiring_Params));

	this->ProcessEvent(uFnStopFiring, &StopFiring_Params, nullptr);
};

// Function Engine.Controller.NotifyKilled
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AController*             Killer                         (CPF_Parm)
// class AController*             Killed                         (CPF_Parm)
// class APawn*                   KilledPawn                     (CPF_Parm)
// class UDamageType*             damageTyp                      (CPF_Parm)

void AController::NotifyKilled(class AController* Killer, class AController* Killed, class APawn* KilledPawn, class UDamageType* damageTyp)
{
	static UFunction* uFnNotifyKilled = nullptr;

	if (!uFnNotifyKilled)
	{
		uFnNotifyKilled = UFunction::FindFunction("Function Engine.Controller.NotifyKilled");
	}

	AController_execNotifyKilled_Params NotifyKilled_Params;
	memset(&NotifyKilled_Params, 0, sizeof(NotifyKilled_Params));
	NotifyKilled_Params.Killer = Killer;
	NotifyKilled_Params.Killed = Killed;
	NotifyKilled_Params.KilledPawn = KilledPawn;
	NotifyKilled_Params.damageTyp = damageTyp;

	this->ProcessEvent(uFnNotifyKilled, &NotifyKilled_Params, nullptr);
};

// Function Engine.Controller.SetCharacter
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  inCharacter                    (CPF_Parm | CPF_NeedCtorLink)

void AController::SetCharacter(const class FString& inCharacter)
{
	static UFunction* uFnSetCharacter = nullptr;

	if (!uFnSetCharacter)
	{
		uFnSetCharacter = UFunction::FindFunction("Function Engine.Controller.SetCharacter");
	}

	AController_execSetCharacter_Params SetCharacter_Params;
	memset(&SetCharacter_Params, 0, sizeof(SetCharacter_Params));
	memcpy_s(&SetCharacter_Params.inCharacter, sizeof(SetCharacter_Params.inCharacter), &inCharacter, sizeof(inCharacter));

	this->ProcessEvent(uFnSetCharacter, &SetCharacter_Params, nullptr);
};

// Function Engine.Controller.ServerGivePawn
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AController::ServerGivePawn()
{
	static UFunction* uFnServerGivePawn = nullptr;

	if (!uFnServerGivePawn)
	{
		uFnServerGivePawn = UFunction::FindFunction("Function Engine.Controller.ServerGivePawn");
	}

	AController_execServerGivePawn_Params ServerGivePawn_Params;
	memset(&ServerGivePawn_Params, 0, sizeof(ServerGivePawn_Params));

	this->ProcessEvent(uFnServerGivePawn, &ServerGivePawn_Params, nullptr);
};

// Function Engine.Controller.ServerRestartPlayer
// [0xFFFF0000002200C2] (FUNC_Defined | FUNC_Net | FUNC_NetReliable | FUNC_Public | FUNC_NetServer | FUNC_AllFlags)
// Parameter Info:

void AController::ServerRestartPlayer()
{
	static UFunction* uFnServerRestartPlayer = nullptr;

	if (!uFnServerRestartPlayer)
	{
		uFnServerRestartPlayer = UFunction::FindFunction("Function Engine.Controller.ServerRestartPlayer");
	}

	AController_execServerRestartPlayer_Params ServerRestartPlayer_Params;
	memset(&ServerRestartPlayer_Params, 0, sizeof(ServerRestartPlayer_Params));

	this->ProcessEvent(uFnServerRestartPlayer, &ServerRestartPlayer_Params, nullptr);
};

// Function Engine.Controller.GetTeamNum
// [0x00020500] (FUNC_Simulated | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20783])
// Parameter Info:
// uint8_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

uint8_t AController::GetTeamNum()
{
	static UFunction* uFnGetTeamNum = nullptr;

	if (!uFnGetTeamNum)
	{
		uFnGetTeamNum = UFunction::FindFunction("Function Engine.Controller.GetTeamNum");
	}

	AController_execGetTeamNum_Params GetTeamNum_Params;
	memset(&GetTeamNum_Params, 0, sizeof(GetTeamNum_Params));

	uFnGetTeamNum->iNative = 0;
	uFnGetTeamNum->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetTeamNum, &GetTeamNum_Params, nullptr);
	uFnGetTeamNum->FunctionFlags |= 0x400;
	uFnGetTeamNum->iNative = 20783;

	return GetTeamNum_Params.ReturnValue;
};

// Function Engine.Controller.NotifyTakeHit
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AController*             InstigatedBy                   (CPF_Parm)
// struct FVector                 HitLocation                    (CPF_Parm)
// int32_t                        Damage                         (CPF_Parm)
// class UDamageType*             DamageType                     (CPF_Parm)
// struct FVector                 Momentum                       (CPF_Parm)

void AController::NotifyTakeHit(class AController* InstigatedBy, const struct FVector& HitLocation, int32_t Damage, class UDamageType* DamageType, const struct FVector& Momentum)
{
	static UFunction* uFnNotifyTakeHit = nullptr;

	if (!uFnNotifyTakeHit)
	{
		uFnNotifyTakeHit = UFunction::FindFunction("Function Engine.Controller.NotifyTakeHit");
	}

	AController_execNotifyTakeHit_Params NotifyTakeHit_Params;
	memset(&NotifyTakeHit_Params, 0, sizeof(NotifyTakeHit_Params));
	NotifyTakeHit_Params.InstigatedBy = InstigatedBy;
	memcpy_s(&NotifyTakeHit_Params.HitLocation, sizeof(NotifyTakeHit_Params.HitLocation), &HitLocation, sizeof(HitLocation));
	memcpy_s(&NotifyTakeHit_Params.Damage, sizeof(NotifyTakeHit_Params.Damage), &Damage, sizeof(Damage));
	NotifyTakeHit_Params.DamageType = DamageType;
	memcpy_s(&NotifyTakeHit_Params.Momentum, sizeof(NotifyTakeHit_Params.Momentum), &Momentum, sizeof(Momentum));

	this->ProcessEvent(uFnNotifyTakeHit, &NotifyTakeHit_Params, nullptr);
};

// Function Engine.Controller.EnemyJustTeleported
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AController::EnemyJustTeleported()
{
	static UFunction* uFnEnemyJustTeleported = nullptr;

	if (!uFnEnemyJustTeleported)
	{
		uFnEnemyJustTeleported = UFunction::FindFunction("Function Engine.Controller.EnemyJustTeleported");
	}

	AController_execEnemyJustTeleported_Params EnemyJustTeleported_Params;
	memset(&EnemyJustTeleported_Params, 0, sizeof(EnemyJustTeleported_Params));

	this->ProcessEvent(uFnEnemyJustTeleported, &EnemyJustTeleported_Params, nullptr);
};

// Function Engine.Controller.BeyondFogDistance
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[16330])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FVector                 ViewPoint                      (CPF_Parm)
// struct FVector                 OtherPoint                     (CPF_Parm)

bool AController::BeyondFogDistance(const struct FVector& ViewPoint, const struct FVector& OtherPoint)
{
	static UFunction* uFnBeyondFogDistance = nullptr;

	if (!uFnBeyondFogDistance)
	{
		uFnBeyondFogDistance = UFunction::FindFunction("Function Engine.Controller.BeyondFogDistance");
	}

	AController_execBeyondFogDistance_Params BeyondFogDistance_Params;
	memset(&BeyondFogDistance_Params, 0, sizeof(BeyondFogDistance_Params));
	memcpy_s(&BeyondFogDistance_Params.ViewPoint, sizeof(BeyondFogDistance_Params.ViewPoint), &ViewPoint, sizeof(ViewPoint));
	memcpy_s(&BeyondFogDistance_Params.OtherPoint, sizeof(BeyondFogDistance_Params.OtherPoint), &OtherPoint, sizeof(OtherPoint));

	uFnBeyondFogDistance->iNative = 0;
	uFnBeyondFogDistance->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnBeyondFogDistance, &BeyondFogDistance_Params, nullptr);
	uFnBeyondFogDistance->FunctionFlags |= 0x400;
	uFnBeyondFogDistance->iNative = 16330;

	return BeyondFogDistance_Params.ReturnValue;
};

// Function Engine.Controller.Restart
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AController::eventRestart()
{
	static UFunction* uFnRestart = nullptr;

	if (!uFnRestart)
	{
		uFnRestart = UFunction::FindFunction("Function Engine.Controller.Restart");
	}

	AController_eventRestart_Params Restart_Params;
	memset(&Restart_Params, 0, sizeof(Restart_Params));

	this->ProcessEvent(uFnRestart, &Restart_Params, nullptr);
};

// Function Engine.Controller.Destroyed
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AController::eventDestroyed()
{
	static UFunction* uFnDestroyed = nullptr;

	if (!uFnDestroyed)
	{
		uFnDestroyed = UFunction::FindFunction("Function Engine.Controller.Destroyed");
	}

	AController_eventDestroyed_Params Destroyed_Params;
	memset(&Destroyed_Params, 0, sizeof(Destroyed_Params));

	this->ProcessEvent(uFnDestroyed, &Destroyed_Params, nullptr);
};

// Function Engine.Controller.NotifyPostLanded
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AController::eventNotifyPostLanded()
{
	static UFunction* uFnNotifyPostLanded = nullptr;

	if (!uFnNotifyPostLanded)
	{
		uFnNotifyPostLanded = UFunction::FindFunction("Function Engine.Controller.NotifyPostLanded");
	}

	AController_eventNotifyPostLanded_Params NotifyPostLanded_Params;
	memset(&NotifyPostLanded_Params, 0, sizeof(NotifyPostLanded_Params));

	this->ProcessEvent(uFnNotifyPostLanded, &NotifyPostLanded_Params, nullptr);
};

// Function Engine.Controller.GamePlayEndedState
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AController::GamePlayEndedState()
{
	static UFunction* uFnGamePlayEndedState = nullptr;

	if (!uFnGamePlayEndedState)
	{
		uFnGamePlayEndedState = UFunction::FindFunction("Function Engine.Controller.GamePlayEndedState");
	}

	AController_execGamePlayEndedState_Params GamePlayEndedState_Params;
	memset(&GamePlayEndedState_Params, 0, sizeof(GamePlayEndedState_Params));

	this->ProcessEvent(uFnGamePlayEndedState, &GamePlayEndedState_Params, nullptr);

	return GamePlayEndedState_Params.ReturnValue;
};

// Function Engine.Controller.PawnDied
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class APawn*                   inPawn                         (CPF_Parm)

void AController::PawnDied(class APawn* inPawn)
{
	static UFunction* uFnPawnDied = nullptr;

	if (!uFnPawnDied)
	{
		uFnPawnDied = UFunction::FindFunction("Function Engine.Controller.PawnDied");
	}

	AController_execPawnDied_Params PawnDied_Params;
	memset(&PawnDied_Params, 0, sizeof(PawnDied_Params));
	PawnDied_Params.inPawn = inPawn;

	this->ProcessEvent(uFnPawnDied, &PawnDied_Params, nullptr);
};

// Function Engine.Controller.UnPossess
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[26954])
// Parameter Info:

void AController::UnPossess()
{
	static UFunction* uFnUnPossess = nullptr;

	if (!uFnUnPossess)
	{
		uFnUnPossess = UFunction::FindFunction("Function Engine.Controller.UnPossess");
	}

	AController_execUnPossess_Params UnPossess_Params;
	memset(&UnPossess_Params, 0, sizeof(UnPossess_Params));

	uFnUnPossess->iNative = 0;
	uFnUnPossess->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnUnPossess, &UnPossess_Params, nullptr);
	uFnUnPossess->FunctionFlags |= 0x400;
	uFnUnPossess->iNative = 26954;
};

// Function Engine.Controller.Possess
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[24410])
// Parameter Info:
// class APawn*                   inPawn                         (CPF_Parm)

void AController::Possess(class APawn* inPawn)
{
	static UFunction* uFnPossess = nullptr;

	if (!uFnPossess)
	{
		uFnPossess = UFunction::FindFunction("Function Engine.Controller.Possess");
	}

	AController_execPossess_Params Possess_Params;
	memset(&Possess_Params, 0, sizeof(Possess_Params));
	Possess_Params.inPawn = inPawn;

	uFnPossess->iNative = 0;
	uFnPossess->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnPossess, &Possess_Params, nullptr);
	uFnPossess->FunctionFlags |= 0x400;
	uFnPossess->iNative = 24410;
};

// Function Engine.Controller.ClientSetRotation
// [0xFFFF0000010241C2] (FUNC_Defined | FUNC_Net | FUNC_NetReliable | FUNC_Simulated | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_NetClient | FUNC_AllFlags)
// Parameter Info:
// struct FRotator                NewRotation                    (CPF_Parm)
// uint32_t                       bResetCamera                   (CPF_OptionalParm | CPF_Parm)

void AController::ClientSetRotation(const struct FRotator& NewRotation, bool bResetCamera)
{
	static UFunction* uFnClientSetRotation = nullptr;

	if (!uFnClientSetRotation)
	{
		uFnClientSetRotation = UFunction::FindFunction("Function Engine.Controller.ClientSetRotation");
	}

	AController_execClientSetRotation_Params ClientSetRotation_Params;
	memset(&ClientSetRotation_Params, 0, sizeof(ClientSetRotation_Params));
	memcpy_s(&ClientSetRotation_Params.NewRotation, sizeof(ClientSetRotation_Params.NewRotation), &NewRotation, sizeof(NewRotation));
	ClientSetRotation_Params.bResetCamera = bResetCamera;

	this->ProcessEvent(uFnClientSetRotation, &ClientSetRotation_Params, nullptr);
};

// Function Engine.Controller.Reset
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AController::Reset()
{
	static UFunction* uFnReset = nullptr;

	if (!uFnReset)
	{
		uFnReset = UFunction::FindFunction("Function Engine.Controller.Reset");
	}

	AController_execReset_Params Reset_Params;
	memset(&Reset_Params, 0, sizeof(Reset_Params));

	this->ProcessEvent(uFnReset, &Reset_Params, nullptr);
};

// Function Engine.Controller.PostBeginPlay
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AController::eventPostBeginPlay()
{
	static UFunction* uFnPostBeginPlay = nullptr;

	if (!uFnPostBeginPlay)
	{
		uFnPostBeginPlay = UFunction::FindFunction("Function Engine.Controller.PostBeginPlay");
	}

	AController_eventPostBeginPlay_Params PostBeginPlay_Params;
	memset(&PostBeginPlay_Params, 0, sizeof(PostBeginPlay_Params));

	this->ProcessEvent(uFnPostBeginPlay, &PostBeginPlay_Params, nullptr);
};

// Function Engine.Controller.GetAdjustLocation
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20485])
// Parameter Info:
// struct FVector                 ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

struct FVector AController::GetAdjustLocation()
{
	static UFunction* uFnGetAdjustLocation = nullptr;

	if (!uFnGetAdjustLocation)
	{
		uFnGetAdjustLocation = UFunction::FindFunction("Function Engine.Controller.GetAdjustLocation");
	}

	AController_execGetAdjustLocation_Params GetAdjustLocation_Params;
	memset(&GetAdjustLocation_Params, 0, sizeof(GetAdjustLocation_Params));

	uFnGetAdjustLocation->iNative = 0;
	uFnGetAdjustLocation->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetAdjustLocation, &GetAdjustLocation_Params, nullptr);
	uFnGetAdjustLocation->FunctionFlags |= 0x400;
	uFnGetAdjustLocation->iNative = 20485;

	return GetAdjustLocation_Params.ReturnValue;
};

// Function Engine.Controller.SetAdjustLocation
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[25571])
// Parameter Info:
// struct FVector                 NewLoc                         (CPF_Parm)
// uint32_t                       bAdjust                        (CPF_Parm)
// uint32_t                       bOffsetFromBase                (CPF_OptionalParm | CPF_Parm)

void AController::SetAdjustLocation(const struct FVector& NewLoc, bool bAdjust, bool bOffsetFromBase)
{
	static UFunction* uFnSetAdjustLocation = nullptr;

	if (!uFnSetAdjustLocation)
	{
		uFnSetAdjustLocation = UFunction::FindFunction("Function Engine.Controller.SetAdjustLocation");
	}

	AController_execSetAdjustLocation_Params SetAdjustLocation_Params;
	memset(&SetAdjustLocation_Params, 0, sizeof(SetAdjustLocation_Params));
	memcpy_s(&SetAdjustLocation_Params.NewLoc, sizeof(SetAdjustLocation_Params.NewLoc), &NewLoc, sizeof(NewLoc));
	SetAdjustLocation_Params.bAdjust = bAdjust;
	SetAdjustLocation_Params.bOffsetFromBase = bOffsetFromBase;

	uFnSetAdjustLocation->iNative = 0;
	uFnSetAdjustLocation->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetAdjustLocation, &SetAdjustLocation_Params, nullptr);
	uFnSetAdjustLocation->FunctionFlags |= 0x400;
	uFnSetAdjustLocation->iNative = 25571;
};

// Function Engine.Controller.GetFocalPoint
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20582])
// Parameter Info:
// struct FVector                 ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

struct FVector AController::GetFocalPoint()
{
	static UFunction* uFnGetFocalPoint = nullptr;

	if (!uFnGetFocalPoint)
	{
		uFnGetFocalPoint = UFunction::FindFunction("Function Engine.Controller.GetFocalPoint");
	}

	AController_execGetFocalPoint_Params GetFocalPoint_Params;
	memset(&GetFocalPoint_Params, 0, sizeof(GetFocalPoint_Params));

	uFnGetFocalPoint->iNative = 0;
	uFnGetFocalPoint->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetFocalPoint, &GetFocalPoint_Params, nullptr);
	uFnGetFocalPoint->FunctionFlags |= 0x400;
	uFnGetFocalPoint->iNative = 20582;

	return GetFocalPoint_Params.ReturnValue;
};

// Function Engine.Controller.SetFocalPoint
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[25659])
// Parameter Info:
// struct FVector                 FP                             (CPF_Parm)
// uint32_t                       bOffsetFromBase                (CPF_OptionalParm | CPF_Parm)

void AController::SetFocalPoint(const struct FVector& FP, bool bOffsetFromBase)
{
	static UFunction* uFnSetFocalPoint = nullptr;

	if (!uFnSetFocalPoint)
	{
		uFnSetFocalPoint = UFunction::FindFunction("Function Engine.Controller.SetFocalPoint");
	}

	AController_execSetFocalPoint_Params SetFocalPoint_Params;
	memset(&SetFocalPoint_Params, 0, sizeof(SetFocalPoint_Params));
	memcpy_s(&SetFocalPoint_Params.FP, sizeof(SetFocalPoint_Params.FP), &FP, sizeof(FP));
	SetFocalPoint_Params.bOffsetFromBase = bOffsetFromBase;

	uFnSetFocalPoint->iNative = 0;
	uFnSetFocalPoint->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetFocalPoint, &SetFocalPoint_Params, nullptr);
	uFnSetFocalPoint->FunctionFlags |= 0x400;
	uFnSetFocalPoint->iNative = 25659;
};

// Function Engine.Controller.RouteCache_RemoveIndex
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[25286])
// Parameter Info:
// int32_t                        InIndex                        (CPF_Parm)
// int32_t                        Count                          (CPF_OptionalParm | CPF_Parm)

void AController::RouteCache_RemoveIndex(int32_t InIndex, int32_t Count)
{
	static UFunction* uFnRouteCache_RemoveIndex = nullptr;

	if (!uFnRouteCache_RemoveIndex)
	{
		uFnRouteCache_RemoveIndex = UFunction::FindFunction("Function Engine.Controller.RouteCache_RemoveIndex");
	}

	AController_execRouteCache_RemoveIndex_Params RouteCache_RemoveIndex_Params;
	memset(&RouteCache_RemoveIndex_Params, 0, sizeof(RouteCache_RemoveIndex_Params));
	memcpy_s(&RouteCache_RemoveIndex_Params.InIndex, sizeof(RouteCache_RemoveIndex_Params.InIndex), &InIndex, sizeof(InIndex));
	memcpy_s(&RouteCache_RemoveIndex_Params.Count, sizeof(RouteCache_RemoveIndex_Params.Count), &Count, sizeof(Count));

	uFnRouteCache_RemoveIndex->iNative = 0;
	uFnRouteCache_RemoveIndex->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnRouteCache_RemoveIndex, &RouteCache_RemoveIndex_Params, nullptr);
	uFnRouteCache_RemoveIndex->FunctionFlags |= 0x400;
	uFnRouteCache_RemoveIndex->iNative = 25286;
};

// Function Engine.Controller.RouteCache_RemoveItem
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25287])
// Parameter Info:
// class ANavigationPoint*        Nav                            (CPF_Parm)

void AController::RouteCache_RemoveItem(class ANavigationPoint* Nav)
{
	static UFunction* uFnRouteCache_RemoveItem = nullptr;

	if (!uFnRouteCache_RemoveItem)
	{
		uFnRouteCache_RemoveItem = UFunction::FindFunction("Function Engine.Controller.RouteCache_RemoveItem");
	}

	AController_execRouteCache_RemoveItem_Params RouteCache_RemoveItem_Params;
	memset(&RouteCache_RemoveItem_Params, 0, sizeof(RouteCache_RemoveItem_Params));
	RouteCache_RemoveItem_Params.Nav = Nav;

	uFnRouteCache_RemoveItem->iNative = 0;
	uFnRouteCache_RemoveItem->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnRouteCache_RemoveItem, &RouteCache_RemoveItem_Params, nullptr);
	uFnRouteCache_RemoveItem->FunctionFlags |= 0x400;
	uFnRouteCache_RemoveItem->iNative = 25287;
};

// Function Engine.Controller.RouteCache_InsertItem
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[25285])
// Parameter Info:
// class ANavigationPoint*        Nav                            (CPF_Parm)
// int32_t                        idx                            (CPF_OptionalParm | CPF_Parm)

void AController::RouteCache_InsertItem(class ANavigationPoint* Nav, int32_t idx)
{
	static UFunction* uFnRouteCache_InsertItem = nullptr;

	if (!uFnRouteCache_InsertItem)
	{
		uFnRouteCache_InsertItem = UFunction::FindFunction("Function Engine.Controller.RouteCache_InsertItem");
	}

	AController_execRouteCache_InsertItem_Params RouteCache_InsertItem_Params;
	memset(&RouteCache_InsertItem_Params, 0, sizeof(RouteCache_InsertItem_Params));
	RouteCache_InsertItem_Params.Nav = Nav;
	memcpy_s(&RouteCache_InsertItem_Params.idx, sizeof(RouteCache_InsertItem_Params.idx), &idx, sizeof(idx));

	uFnRouteCache_InsertItem->iNative = 0;
	uFnRouteCache_InsertItem->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnRouteCache_InsertItem, &RouteCache_InsertItem_Params, nullptr);
	uFnRouteCache_InsertItem->FunctionFlags |= 0x400;
	uFnRouteCache_InsertItem->iNative = 25285;
};

// Function Engine.Controller.RouteCache_AddItem
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25283])
// Parameter Info:
// class ANavigationPoint*        Nav                            (CPF_Parm)

void AController::RouteCache_AddItem(class ANavigationPoint* Nav)
{
	static UFunction* uFnRouteCache_AddItem = nullptr;

	if (!uFnRouteCache_AddItem)
	{
		uFnRouteCache_AddItem = UFunction::FindFunction("Function Engine.Controller.RouteCache_AddItem");
	}

	AController_execRouteCache_AddItem_Params RouteCache_AddItem_Params;
	memset(&RouteCache_AddItem_Params, 0, sizeof(RouteCache_AddItem_Params));
	RouteCache_AddItem_Params.Nav = Nav;

	uFnRouteCache_AddItem->iNative = 0;
	uFnRouteCache_AddItem->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnRouteCache_AddItem, &RouteCache_AddItem_Params, nullptr);
	uFnRouteCache_AddItem->FunctionFlags |= 0x400;
	uFnRouteCache_AddItem->iNative = 25283;
};

// Function Engine.Controller.RouteCache_Empty
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25284])
// Parameter Info:

void AController::RouteCache_Empty()
{
	static UFunction* uFnRouteCache_Empty = nullptr;

	if (!uFnRouteCache_Empty)
	{
		uFnRouteCache_Empty = UFunction::FindFunction("Function Engine.Controller.RouteCache_Empty");
	}

	AController_execRouteCache_Empty_Params RouteCache_Empty_Params;
	memset(&RouteCache_Empty_Params, 0, sizeof(RouteCache_Empty_Params));

	uFnRouteCache_Empty->iNative = 0;
	uFnRouteCache_Empty->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnRouteCache_Empty, &RouteCache_Empty_Params, nullptr);
	uFnRouteCache_Empty->FunctionFlags |= 0x400;
	uFnRouteCache_Empty->iNative = 25284;
};

// Function Engine.Controller.IsLocalPlayerController
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[21401])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AController::IsLocalPlayerController()
{
	static UFunction* uFnIsLocalPlayerController = nullptr;

	if (!uFnIsLocalPlayerController)
	{
		uFnIsLocalPlayerController = UFunction::FindFunction("Function Engine.Controller.IsLocalPlayerController");
	}

	AController_execIsLocalPlayerController_Params IsLocalPlayerController_Params;
	memset(&IsLocalPlayerController_Params, 0, sizeof(IsLocalPlayerController_Params));

	uFnIsLocalPlayerController->iNative = 0;
	uFnIsLocalPlayerController->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnIsLocalPlayerController, &IsLocalPlayerController_Params, nullptr);
	uFnIsLocalPlayerController->FunctionFlags |= 0x400;
	uFnIsLocalPlayerController->iNative = 21401;

	return IsLocalPlayerController_Params.ReturnValue;
};

// Function Engine.PlayerController.NotifyDisconnect
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FString                  Command                        (CPF_Parm | CPF_NeedCtorLink)

bool APlayerController::eventNotifyDisconnect(const class FString& Command)
{
	static UFunction* uFnNotifyDisconnect = nullptr;

	if (!uFnNotifyDisconnect)
	{
		uFnNotifyDisconnect = UFunction::FindFunction("Function Engine.PlayerController.NotifyDisconnect");
	}

	APlayerController_eventNotifyDisconnect_Params NotifyDisconnect_Params;
	memset(&NotifyDisconnect_Params, 0, sizeof(NotifyDisconnect_Params));
	memcpy_s(&NotifyDisconnect_Params.Command, sizeof(NotifyDisconnect_Params.Command), &Command, sizeof(Command));

	this->ProcessEvent(uFnNotifyDisconnect, &NotifyDisconnect_Params, nullptr);

	return NotifyDisconnect_Params.ReturnValue;
};

// Function Engine.PlayerController.ReceivedGameClass
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AGameInfo*               GameClass                      (CPF_Parm)

void APlayerController::ReceivedGameClass(class AGameInfo* GameClass)
{
	static UFunction* uFnReceivedGameClass = nullptr;

	if (!uFnReceivedGameClass)
	{
		uFnReceivedGameClass = UFunction::FindFunction("Function Engine.PlayerController.ReceivedGameClass");
	}

	APlayerController_execReceivedGameClass_Params ReceivedGameClass_Params;
	memset(&ReceivedGameClass_Params, 0, sizeof(ReceivedGameClass_Params));
	ReceivedGameClass_Params.GameClass = GameClass;

	this->ProcessEvent(uFnReceivedGameClass, &ReceivedGameClass_Params, nullptr);
};

// Function Engine.PlayerController.LogOutBugItAIGoToLogFile
// [0x00040401] (FUNC_Final | FUNC_Native | FUNC_Private | FUNC_AllFlags) (iNative[21850])
// Parameter Info:
// class FString                  InScreenShotDesc               (CPF_Const | CPF_Parm | CPF_NeedCtorLink)
// class FString                  InGoString                     (CPF_Const | CPF_Parm | CPF_NeedCtorLink)
// class FString                  InLocString                    (CPF_Const | CPF_Parm | CPF_NeedCtorLink)

void APlayerController::LogOutBugItAIGoToLogFile(const class FString& InScreenShotDesc, const class FString& InGoString, const class FString& InLocString)
{
	static UFunction* uFnLogOutBugItAIGoToLogFile = nullptr;

	if (!uFnLogOutBugItAIGoToLogFile)
	{
		uFnLogOutBugItAIGoToLogFile = UFunction::FindFunction("Function Engine.PlayerController.LogOutBugItAIGoToLogFile");
	}

	APlayerController_execLogOutBugItAIGoToLogFile_Params LogOutBugItAIGoToLogFile_Params;
	memset(&LogOutBugItAIGoToLogFile_Params, 0, sizeof(LogOutBugItAIGoToLogFile_Params));
	memcpy_s(&LogOutBugItAIGoToLogFile_Params.InScreenShotDesc, sizeof(LogOutBugItAIGoToLogFile_Params.InScreenShotDesc), &InScreenShotDesc, sizeof(InScreenShotDesc));
	memcpy_s(&LogOutBugItAIGoToLogFile_Params.InGoString, sizeof(LogOutBugItAIGoToLogFile_Params.InGoString), &InGoString, sizeof(InGoString));
	memcpy_s(&LogOutBugItAIGoToLogFile_Params.InLocString, sizeof(LogOutBugItAIGoToLogFile_Params.InLocString), &InLocString, sizeof(InLocString));

	uFnLogOutBugItAIGoToLogFile->iNative = 0;
	uFnLogOutBugItAIGoToLogFile->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnLogOutBugItAIGoToLogFile, &LogOutBugItAIGoToLogFile_Params, nullptr);
	uFnLogOutBugItAIGoToLogFile->FunctionFlags |= 0x400;
	uFnLogOutBugItAIGoToLogFile->iNative = 21850;
};

// Function Engine.PlayerController.LogOutBugItGoToLogFile
// [0x00040401] (FUNC_Final | FUNC_Native | FUNC_Private | FUNC_AllFlags) (iNative[21851])
// Parameter Info:
// class FString                  InScreenShotDesc               (CPF_Const | CPF_Parm | CPF_NeedCtorLink)
// class FString                  InGoString                     (CPF_Const | CPF_Parm | CPF_NeedCtorLink)
// class FString                  InLocString                    (CPF_Const | CPF_Parm | CPF_NeedCtorLink)

void APlayerController::LogOutBugItGoToLogFile(const class FString& InScreenShotDesc, const class FString& InGoString, const class FString& InLocString)
{
	static UFunction* uFnLogOutBugItGoToLogFile = nullptr;

	if (!uFnLogOutBugItGoToLogFile)
	{
		uFnLogOutBugItGoToLogFile = UFunction::FindFunction("Function Engine.PlayerController.LogOutBugItGoToLogFile");
	}

	APlayerController_execLogOutBugItGoToLogFile_Params LogOutBugItGoToLogFile_Params;
	memset(&LogOutBugItGoToLogFile_Params, 0, sizeof(LogOutBugItGoToLogFile_Params));
	memcpy_s(&LogOutBugItGoToLogFile_Params.InScreenShotDesc, sizeof(LogOutBugItGoToLogFile_Params.InScreenShotDesc), &InScreenShotDesc, sizeof(InScreenShotDesc));
	memcpy_s(&LogOutBugItGoToLogFile_Params.InGoString, sizeof(LogOutBugItGoToLogFile_Params.InGoString), &InGoString, sizeof(InGoString));
	memcpy_s(&LogOutBugItGoToLogFile_Params.InLocString, sizeof(LogOutBugItGoToLogFile_Params.InLocString), &InLocString, sizeof(InLocString));

	uFnLogOutBugItGoToLogFile->iNative = 0;
	uFnLogOutBugItGoToLogFile->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnLogOutBugItGoToLogFile, &LogOutBugItGoToLogFile_Params, nullptr);
	uFnLogOutBugItGoToLogFile->FunctionFlags |= 0x400;
	uFnLogOutBugItGoToLogFile->iNative = 21851;
};

// Function Engine.PlayerController.DisableDebugAI
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void APlayerController::DisableDebugAI()
{
	static UFunction* uFnDisableDebugAI = nullptr;

	if (!uFnDisableDebugAI)
	{
		uFnDisableDebugAI = UFunction::FindFunction("Function Engine.PlayerController.DisableDebugAI");
	}

	APlayerController_execDisableDebugAI_Params DisableDebugAI_Params;
	memset(&DisableDebugAI_Params, 0, sizeof(DisableDebugAI_Params));

	this->ProcessEvent(uFnDisableDebugAI, &DisableDebugAI_Params, nullptr);
};

// Function Engine.PlayerController.BugItStringCreator
// [0x00420A02] (FUNC_Defined | FUNC_Exec | FUNC_Event | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// struct FVector                 ViewLocation                   (CPF_Const | CPF_Parm | CPF_OutParm)
// struct FRotator                ViewRotation                   (CPF_Const | CPF_Parm | CPF_OutParm)
// class FString                  GoString                       (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)
// class FString                  LocString                      (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void APlayerController::BugItStringCreator(struct FVector& ViewLocation, struct FRotator& ViewRotation, class FString& GoString, class FString& LocString)
{
	static UFunction* uFnBugItStringCreator = nullptr;

	if (!uFnBugItStringCreator)
	{
		uFnBugItStringCreator = UFunction::FindFunction("Function Engine.PlayerController.BugItStringCreator");
	}

	APlayerController_execBugItStringCreator_Params BugItStringCreator_Params;
	memset(&BugItStringCreator_Params, 0, sizeof(BugItStringCreator_Params));
	memcpy_s(&BugItStringCreator_Params.ViewLocation, sizeof(BugItStringCreator_Params.ViewLocation), &ViewLocation, sizeof(ViewLocation));
	memcpy_s(&BugItStringCreator_Params.ViewRotation, sizeof(BugItStringCreator_Params.ViewRotation), &ViewRotation, sizeof(ViewRotation));
	memcpy_s(&BugItStringCreator_Params.GoString, sizeof(BugItStringCreator_Params.GoString), &GoString, sizeof(GoString));
	memcpy_s(&BugItStringCreator_Params.LocString, sizeof(BugItStringCreator_Params.LocString), &LocString, sizeof(LocString));

	this->ProcessEvent(uFnBugItStringCreator, &BugItStringCreator_Params, nullptr);

	memcpy_s(&ViewLocation, sizeof(ViewLocation), &BugItStringCreator_Params.ViewLocation, sizeof(BugItStringCreator_Params.ViewLocation));
	memcpy_s(&ViewRotation, sizeof(ViewRotation), &BugItStringCreator_Params.ViewRotation, sizeof(BugItStringCreator_Params.ViewRotation));
	memcpy_s(&GoString, sizeof(GoString), &BugItStringCreator_Params.GoString, sizeof(BugItStringCreator_Params.GoString));
	memcpy_s(&LocString, sizeof(LocString), &BugItStringCreator_Params.LocString, sizeof(BugItStringCreator_Params.LocString));
};

// Function Engine.PlayerController.BugItAI
// [0x00824A02] (FUNC_Defined | FUNC_Exec | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// class FString                  ScreenShotDescription          (CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink)

void APlayerController::BugItAI(const class FString& ScreenShotDescription)
{
	static UFunction* uFnBugItAI = nullptr;

	if (!uFnBugItAI)
	{
		uFnBugItAI = UFunction::FindFunction("Function Engine.PlayerController.BugItAI");
	}

	APlayerController_execBugItAI_Params BugItAI_Params;
	memset(&BugItAI_Params, 0, sizeof(BugItAI_Params));
	memcpy_s(&BugItAI_Params.ScreenShotDescription, sizeof(BugItAI_Params.ScreenShotDescription), &ScreenShotDescription, sizeof(ScreenShotDescription));

	this->ProcessEvent(uFnBugItAI, &BugItAI_Params, nullptr);
};

// Function Engine.PlayerController.LogLoc
// [0x00820202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:

void APlayerController::LogLoc()
{
	static UFunction* uFnLogLoc = nullptr;

	if (!uFnLogLoc)
	{
		uFnLogLoc = UFunction::FindFunction("Function Engine.PlayerController.LogLoc");
	}

	APlayerController_execLogLoc_Params LogLoc_Params;
	memset(&LogLoc_Params, 0, sizeof(LogLoc_Params));

	this->ProcessEvent(uFnLogLoc, &LogLoc_Params, nullptr);
};

// Function Engine.PlayerController.BugIt
// [0x00824A02] (FUNC_Defined | FUNC_Exec | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// class FString                  ScreenShotDescription          (CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink)

void APlayerController::BugIt(const class FString& ScreenShotDescription)
{
	static UFunction* uFnBugIt = nullptr;

	if (!uFnBugIt)
	{
		uFnBugIt = UFunction::FindFunction("Function Engine.PlayerController.BugIt");
	}

	APlayerController_execBugIt_Params BugIt_Params;
	memset(&BugIt_Params, 0, sizeof(BugIt_Params));
	memcpy_s(&BugIt_Params.ScreenShotDescription, sizeof(BugIt_Params.ScreenShotDescription), &ScreenShotDescription, sizeof(ScreenShotDescription));

	this->ProcessEvent(uFnBugIt, &BugIt_Params, nullptr);
};

// Function Engine.PlayerController.BugItWorker
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FVector                 TheLocation                    (CPF_Parm)
// struct FRotator                TheRotation                    (CPF_Parm)

void APlayerController::BugItWorker(const struct FVector& TheLocation, const struct FRotator& TheRotation)
{
	static UFunction* uFnBugItWorker = nullptr;

	if (!uFnBugItWorker)
	{
		uFnBugItWorker = UFunction::FindFunction("Function Engine.PlayerController.BugItWorker");
	}

	APlayerController_execBugItWorker_Params BugItWorker_Params;
	memset(&BugItWorker_Params, 0, sizeof(BugItWorker_Params));
	memcpy_s(&BugItWorker_Params.TheLocation, sizeof(BugItWorker_Params.TheLocation), &TheLocation, sizeof(TheLocation));
	memcpy_s(&BugItWorker_Params.TheRotation, sizeof(BugItWorker_Params.TheRotation), &TheRotation, sizeof(TheRotation));

	this->ProcessEvent(uFnBugItWorker, &BugItWorker_Params, nullptr);
};

// Function Engine.PlayerController.BugItGo
// [0x00820202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// float                          X                              (CPF_Parm | CPF_CoerceParm)
// float                          Y                              (CPF_Parm | CPF_CoerceParm)
// float                          Z                              (CPF_Parm | CPF_CoerceParm)
// int32_t                        Pitch                          (CPF_Parm | CPF_CoerceParm)
// int32_t                        Yaw                            (CPF_Parm | CPF_CoerceParm)
// int32_t                        Roll                           (CPF_Parm | CPF_CoerceParm)

void APlayerController::BugItGo(float X, float Y, float Z, int32_t Pitch, int32_t Yaw, int32_t Roll)
{
	static UFunction* uFnBugItGo = nullptr;

	if (!uFnBugItGo)
	{
		uFnBugItGo = UFunction::FindFunction("Function Engine.PlayerController.BugItGo");
	}

	APlayerController_execBugItGo_Params BugItGo_Params;
	memset(&BugItGo_Params, 0, sizeof(BugItGo_Params));
	memcpy_s(&BugItGo_Params.X, sizeof(BugItGo_Params.X), &X, sizeof(X));
	memcpy_s(&BugItGo_Params.Y, sizeof(BugItGo_Params.Y), &Y, sizeof(Y));
	memcpy_s(&BugItGo_Params.Z, sizeof(BugItGo_Params.Z), &Z, sizeof(Z));
	memcpy_s(&BugItGo_Params.Pitch, sizeof(BugItGo_Params.Pitch), &Pitch, sizeof(Pitch));
	memcpy_s(&BugItGo_Params.Yaw, sizeof(BugItGo_Params.Yaw), &Yaw, sizeof(Yaw));
	memcpy_s(&BugItGo_Params.Roll, sizeof(BugItGo_Params.Roll), &Roll, sizeof(Roll));

	this->ProcessEvent(uFnBugItGo, &BugItGo_Params, nullptr);
};

// Function Engine.PlayerController.ClientSpawnCameraLensEffect
// [0xFFFF000001020942] (FUNC_Defined | FUNC_Net | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_NetClient | FUNC_AllFlags)
// Parameter Info:
// class AEmitterCameraLensEffectBase* LensEffectEmitterClass         (CPF_Parm)

void APlayerController::eventClientSpawnCameraLensEffect(class AEmitterCameraLensEffectBase* LensEffectEmitterClass)
{
	static UFunction* uFnClientSpawnCameraLensEffect = nullptr;

	if (!uFnClientSpawnCameraLensEffect)
	{
		uFnClientSpawnCameraLensEffect = UFunction::FindFunction("Function Engine.PlayerController.ClientSpawnCameraLensEffect");
	}

	APlayerController_eventClientSpawnCameraLensEffect_Params ClientSpawnCameraLensEffect_Params;
	memset(&ClientSpawnCameraLensEffect_Params, 0, sizeof(ClientSpawnCameraLensEffect_Params));
	ClientSpawnCameraLensEffect_Params.LensEffectEmitterClass = LensEffectEmitterClass;

	this->ProcessEvent(uFnClientSpawnCameraLensEffect, &ClientSpawnCameraLensEffect_Params, nullptr);
};

// Function Engine.PlayerController.InputMatchDelegate
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:

void APlayerController::InputMatchDelegate()
{
	static UFunction* uFnInputMatchDelegate = nullptr;

	if (!uFnInputMatchDelegate)
	{
		uFnInputMatchDelegate = UFunction::FindFunction("Function Engine.PlayerController.InputMatchDelegate");
	}

	APlayerController_execInputMatchDelegate_Params InputMatchDelegate_Params;
	memset(&InputMatchDelegate_Params, 0, sizeof(InputMatchDelegate_Params));

	this->ProcessEvent(uFnInputMatchDelegate, &InputMatchDelegate_Params, nullptr);
};

// Function Engine.PlayerController.Sentinel_TakeScreenshotEnabled
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25471])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool APlayerController::Sentinel_TakeScreenshotEnabled()
{
	static UFunction* uFnSentinel_TakeScreenshotEnabled = nullptr;

	if (!uFnSentinel_TakeScreenshotEnabled)
	{
		uFnSentinel_TakeScreenshotEnabled = UFunction::FindFunction("Function Engine.PlayerController.Sentinel_TakeScreenshotEnabled");
	}

	APlayerController_execSentinel_TakeScreenshotEnabled_Params Sentinel_TakeScreenshotEnabled_Params;
	memset(&Sentinel_TakeScreenshotEnabled_Params, 0, sizeof(Sentinel_TakeScreenshotEnabled_Params));

	uFnSentinel_TakeScreenshotEnabled->iNative = 0;
	uFnSentinel_TakeScreenshotEnabled->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSentinel_TakeScreenshotEnabled, &Sentinel_TakeScreenshotEnabled_Params, nullptr);
	uFnSentinel_TakeScreenshotEnabled->FunctionFlags |= 0x400;
	uFnSentinel_TakeScreenshotEnabled->iNative = 25471;

	return Sentinel_TakeScreenshotEnabled_Params.ReturnValue;
};

// Function Engine.PlayerController.Sentinel_TakeScreenshot
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25470])
// Parameter Info:
// class FString                  _Name                          (CPF_Parm | CPF_NeedCtorLink)

void APlayerController::Sentinel_TakeScreenshot(const class FString& _Name)
{
	static UFunction* uFnSentinel_TakeScreenshot = nullptr;

	if (!uFnSentinel_TakeScreenshot)
	{
		uFnSentinel_TakeScreenshot = UFunction::FindFunction("Function Engine.PlayerController.Sentinel_TakeScreenshot");
	}

	APlayerController_execSentinel_TakeScreenshot_Params Sentinel_TakeScreenshot_Params;
	memset(&Sentinel_TakeScreenshot_Params, 0, sizeof(Sentinel_TakeScreenshot_Params));
	memcpy_s(&Sentinel_TakeScreenshot_Params._Name, sizeof(Sentinel_TakeScreenshot_Params._Name), &_Name, sizeof(_Name));

	uFnSentinel_TakeScreenshot->iNative = 0;
	uFnSentinel_TakeScreenshot->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSentinel_TakeScreenshot, &Sentinel_TakeScreenshot_Params, nullptr);
	uFnSentinel_TakeScreenshot->FunctionFlags |= 0x400;
	uFnSentinel_TakeScreenshot->iNative = 25470;
};

// Function Engine.PlayerController.Sentinel_PostAcquireTravelTheWorldPoints
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void APlayerController::Sentinel_PostAcquireTravelTheWorldPoints()
{
	static UFunction* uFnSentinel_PostAcquireTravelTheWorldPoints = nullptr;

	if (!uFnSentinel_PostAcquireTravelTheWorldPoints)
	{
		uFnSentinel_PostAcquireTravelTheWorldPoints = UFunction::FindFunction("Function Engine.PlayerController.Sentinel_PostAcquireTravelTheWorldPoints");
	}

	APlayerController_execSentinel_PostAcquireTravelTheWorldPoints_Params Sentinel_PostAcquireTravelTheWorldPoints_Params;
	memset(&Sentinel_PostAcquireTravelTheWorldPoints_Params, 0, sizeof(Sentinel_PostAcquireTravelTheWorldPoints_Params));

	this->ProcessEvent(uFnSentinel_PostAcquireTravelTheWorldPoints, &Sentinel_PostAcquireTravelTheWorldPoints_Params, nullptr);
};

// Function Engine.PlayerController.Sentinel_PreAcquireTravelTheWorldPoints
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void APlayerController::Sentinel_PreAcquireTravelTheWorldPoints()
{
	static UFunction* uFnSentinel_PreAcquireTravelTheWorldPoints = nullptr;

	if (!uFnSentinel_PreAcquireTravelTheWorldPoints)
	{
		uFnSentinel_PreAcquireTravelTheWorldPoints = UFunction::FindFunction("Function Engine.PlayerController.Sentinel_PreAcquireTravelTheWorldPoints");
	}

	APlayerController_execSentinel_PreAcquireTravelTheWorldPoints_Params Sentinel_PreAcquireTravelTheWorldPoints_Params;
	memset(&Sentinel_PreAcquireTravelTheWorldPoints_Params, 0, sizeof(Sentinel_PreAcquireTravelTheWorldPoints_Params));

	this->ProcessEvent(uFnSentinel_PreAcquireTravelTheWorldPoints, &Sentinel_PreAcquireTravelTheWorldPoints_Params, nullptr);
};

// Function Engine.PlayerController.Sentinel_SetupForGamebasedTravelTheWorld
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void APlayerController::Sentinel_SetupForGamebasedTravelTheWorld()
{
	static UFunction* uFnSentinel_SetupForGamebasedTravelTheWorld = nullptr;

	if (!uFnSentinel_SetupForGamebasedTravelTheWorld)
	{
		uFnSentinel_SetupForGamebasedTravelTheWorld = UFunction::FindFunction("Function Engine.PlayerController.Sentinel_SetupForGamebasedTravelTheWorld");
	}

	APlayerController_execSentinel_SetupForGamebasedTravelTheWorld_Params Sentinel_SetupForGamebasedTravelTheWorld_Params;
	memset(&Sentinel_SetupForGamebasedTravelTheWorld_Params, 0, sizeof(Sentinel_SetupForGamebasedTravelTheWorld_Params));

	this->ProcessEvent(uFnSentinel_SetupForGamebasedTravelTheWorld, &Sentinel_SetupForGamebasedTravelTheWorld_Params, nullptr);
};

// Function Engine.PlayerController.GetAchievementProgression
// [0x00420800] (FUNC_Event | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        AchievementId                  (CPF_Parm)
// float                          CurrentValue                   (CPF_Parm | CPF_OutParm)
// float                          MaxValue                       (CPF_Parm | CPF_OutParm)

bool APlayerController::eventGetAchievementProgression(int32_t AchievementId, float& CurrentValue, float& MaxValue)
{
	static UFunction* uFnGetAchievementProgression = nullptr;

	if (!uFnGetAchievementProgression)
	{
		uFnGetAchievementProgression = UFunction::FindFunction("Function Engine.PlayerController.GetAchievementProgression");
	}

	APlayerController_eventGetAchievementProgression_Params GetAchievementProgression_Params;
	memset(&GetAchievementProgression_Params, 0, sizeof(GetAchievementProgression_Params));
	memcpy_s(&GetAchievementProgression_Params.AchievementId, sizeof(GetAchievementProgression_Params.AchievementId), &AchievementId, sizeof(AchievementId));
	memcpy_s(&GetAchievementProgression_Params.CurrentValue, sizeof(GetAchievementProgression_Params.CurrentValue), &CurrentValue, sizeof(CurrentValue));
	memcpy_s(&GetAchievementProgression_Params.MaxValue, sizeof(GetAchievementProgression_Params.MaxValue), &MaxValue, sizeof(MaxValue));

	this->ProcessEvent(uFnGetAchievementProgression, &GetAchievementProgression_Params, nullptr);

	memcpy_s(&CurrentValue, sizeof(CurrentValue), &GetAchievementProgression_Params.CurrentValue, sizeof(GetAchievementProgression_Params.CurrentValue));
	memcpy_s(&MaxValue, sizeof(MaxValue), &GetAchievementProgression_Params.MaxValue, sizeof(GetAchievementProgression_Params.MaxValue));

	return GetAchievementProgression_Params.ReturnValue;
};

// Function Engine.PlayerController.GetPartyGameTypeName
// [0x00022000] (FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)

class FString APlayerController::GetPartyGameTypeName()
{
	static UFunction* uFnGetPartyGameTypeName = nullptr;

	if (!uFnGetPartyGameTypeName)
	{
		uFnGetPartyGameTypeName = UFunction::FindFunction("Function Engine.PlayerController.GetPartyGameTypeName");
	}

	APlayerController_execGetPartyGameTypeName_Params GetPartyGameTypeName_Params;
	memset(&GetPartyGameTypeName_Params, 0, sizeof(GetPartyGameTypeName_Params));

	APlayerController::StaticClass()->ProcessEvent(uFnGetPartyGameTypeName, &GetPartyGameTypeName_Params, nullptr);

	return GetPartyGameTypeName_Params.ReturnValue;
};

// Function Engine.PlayerController.GetPartyMapName
// [0x00022000] (FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)

class FString APlayerController::GetPartyMapName()
{
	static UFunction* uFnGetPartyMapName = nullptr;

	if (!uFnGetPartyMapName)
	{
		uFnGetPartyMapName = UFunction::FindFunction("Function Engine.PlayerController.GetPartyMapName");
	}

	APlayerController_execGetPartyMapName_Params GetPartyMapName_Params;
	memset(&GetPartyMapName_Params, 0, sizeof(GetPartyMapName_Params));

	APlayerController::StaticClass()->ProcessEvent(uFnGetPartyMapName, &GetPartyMapName_Params, nullptr);

	return GetPartyMapName_Params.ReturnValue;
};

// Function Engine.PlayerController.ClientPrestreamTextures
// [0xFFFF0000010249C2] (FUNC_Defined | FUNC_Net | FUNC_NetReliable | FUNC_Simulated | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_NetClient | FUNC_AllFlags)
// Parameter Info:
// class AActor*                  ForcedActor                    (CPF_Parm)
// float                          ForceDuration                  (CPF_Parm)
// uint32_t                       bEnableStreaming               (CPF_Parm)
// int32_t                        CinematicTextureGroups         (CPF_OptionalParm | CPF_Parm)

void APlayerController::eventClientPrestreamTextures(class AActor* ForcedActor, float ForceDuration, bool bEnableStreaming, int32_t CinematicTextureGroups)
{
	static UFunction* uFnClientPrestreamTextures = nullptr;

	if (!uFnClientPrestreamTextures)
	{
		uFnClientPrestreamTextures = UFunction::FindFunction("Function Engine.PlayerController.ClientPrestreamTextures");
	}

	APlayerController_eventClientPrestreamTextures_Params ClientPrestreamTextures_Params;
	memset(&ClientPrestreamTextures_Params, 0, sizeof(ClientPrestreamTextures_Params));
	ClientPrestreamTextures_Params.ForcedActor = ForcedActor;
	memcpy_s(&ClientPrestreamTextures_Params.ForceDuration, sizeof(ClientPrestreamTextures_Params.ForceDuration), &ForceDuration, sizeof(ForceDuration));
	ClientPrestreamTextures_Params.bEnableStreaming = bEnableStreaming;
	memcpy_s(&ClientPrestreamTextures_Params.CinematicTextureGroups, sizeof(ClientPrestreamTextures_Params.CinematicTextureGroups), &CinematicTextureGroups, sizeof(CinematicTextureGroups));

	this->ProcessEvent(uFnClientPrestreamTextures, &ClientPrestreamTextures_Params, nullptr);
};

// Function Engine.PlayerController.ClientSetForceMipLevelsToBeResident
// [0xFFFF0000010249C2] (FUNC_Defined | FUNC_Net | FUNC_NetReliable | FUNC_Simulated | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_NetClient | FUNC_AllFlags)
// Parameter Info:
// class UMaterialInterface*      Material                       (CPF_Parm)
// float                          ForceDuration                  (CPF_Parm)
// int32_t                        CinematicTextureGroups         (CPF_OptionalParm | CPF_Parm)

void APlayerController::eventClientSetForceMipLevelsToBeResident(class UMaterialInterface* Material, float ForceDuration, int32_t CinematicTextureGroups)
{
	static UFunction* uFnClientSetForceMipLevelsToBeResident = nullptr;

	if (!uFnClientSetForceMipLevelsToBeResident)
	{
		uFnClientSetForceMipLevelsToBeResident = UFunction::FindFunction("Function Engine.PlayerController.ClientSetForceMipLevelsToBeResident");
	}

	APlayerController_eventClientSetForceMipLevelsToBeResident_Params ClientSetForceMipLevelsToBeResident_Params;
	memset(&ClientSetForceMipLevelsToBeResident_Params, 0, sizeof(ClientSetForceMipLevelsToBeResident_Params));
	ClientSetForceMipLevelsToBeResident_Params.Material = Material;
	memcpy_s(&ClientSetForceMipLevelsToBeResident_Params.ForceDuration, sizeof(ClientSetForceMipLevelsToBeResident_Params.ForceDuration), &ForceDuration, sizeof(ForceDuration));
	memcpy_s(&ClientSetForceMipLevelsToBeResident_Params.CinematicTextureGroups, sizeof(ClientSetForceMipLevelsToBeResident_Params.CinematicTextureGroups), &CinematicTextureGroups, sizeof(CinematicTextureGroups));

	this->ProcessEvent(uFnClientSetForceMipLevelsToBeResident, &ClientSetForceMipLevelsToBeResident_Params, nullptr);
};

// Function Engine.PlayerController.ClientControlMovieTexture
// [0xFFFF0000010201C2] (FUNC_Defined | FUNC_Net | FUNC_NetReliable | FUNC_Simulated | FUNC_Public | FUNC_NetClient | FUNC_AllFlags)
// Parameter Info:
// class UTextureMovie*           MovieTexture                   (CPF_Parm)
// EMovieControlType              Mode                           (CPF_Parm)

void APlayerController::ClientControlMovieTexture(class UTextureMovie* MovieTexture, EMovieControlType Mode)
{
	static UFunction* uFnClientControlMovieTexture = nullptr;

	if (!uFnClientControlMovieTexture)
	{
		uFnClientControlMovieTexture = UFunction::FindFunction("Function Engine.PlayerController.ClientControlMovieTexture");
	}

	APlayerController_execClientControlMovieTexture_Params ClientControlMovieTexture_Params;
	memset(&ClientControlMovieTexture_Params, 0, sizeof(ClientControlMovieTexture_Params));
	ClientControlMovieTexture_Params.MovieTexture = MovieTexture;
	memcpy_s(&ClientControlMovieTexture_Params.Mode, sizeof(ClientControlMovieTexture_Params.Mode), &Mode, sizeof(Mode));

	this->ProcessEvent(uFnClientControlMovieTexture, &ClientControlMovieTexture_Params, nullptr);
};

// Function Engine.PlayerController.IsPrimaryPlayer
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool APlayerController::IsPrimaryPlayer()
{
	static UFunction* uFnIsPrimaryPlayer = nullptr;

	if (!uFnIsPrimaryPlayer)
	{
		uFnIsPrimaryPlayer = UFunction::FindFunction("Function Engine.PlayerController.IsPrimaryPlayer");
	}

	APlayerController_execIsPrimaryPlayer_Params IsPrimaryPlayer_Params;
	memset(&IsPrimaryPlayer_Params, 0, sizeof(IsPrimaryPlayer_Params));

	this->ProcessEvent(uFnIsPrimaryPlayer, &IsPrimaryPlayer_Params, nullptr);

	return IsPrimaryPlayer_Params.ReturnValue;
};

// Function Engine.PlayerController.OnJoinTravelToSessionComplete
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FName                    SessionName                    (CPF_Parm)
// uint32_t                       bWasSuccessful                 (CPF_Parm)

void APlayerController::OnJoinTravelToSessionComplete(const class FName& SessionName, bool bWasSuccessful)
{
	static UFunction* uFnOnJoinTravelToSessionComplete = nullptr;

	if (!uFnOnJoinTravelToSessionComplete)
	{
		uFnOnJoinTravelToSessionComplete = UFunction::FindFunction("Function Engine.PlayerController.OnJoinTravelToSessionComplete");
	}

	APlayerController_execOnJoinTravelToSessionComplete_Params OnJoinTravelToSessionComplete_Params;
	memset(&OnJoinTravelToSessionComplete_Params, 0, sizeof(OnJoinTravelToSessionComplete_Params));
	memcpy_s(&OnJoinTravelToSessionComplete_Params.SessionName, sizeof(OnJoinTravelToSessionComplete_Params.SessionName), &SessionName, sizeof(SessionName));
	OnJoinTravelToSessionComplete_Params.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent(uFnOnJoinTravelToSessionComplete, &OnJoinTravelToSessionComplete_Params, nullptr);
};

// Function Engine.PlayerController.PathClear
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void APlayerController::PathClear()
{
	static UFunction* uFnPathClear = nullptr;

	if (!uFnPathClear)
	{
		uFnPathClear = UFunction::FindFunction("Function Engine.PlayerController.PathClear");
	}

	APlayerController_execPathClear_Params PathClear_Params;
	memset(&PathClear_Params, 0, sizeof(PathClear_Params));

	this->ProcessEvent(uFnPathClear, &PathClear_Params, nullptr);
};

// Function Engine.PlayerController.PathChild
// [0x00024202] (FUNC_Defined | FUNC_Exec | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Cnt                            (CPF_OptionalParm | CPF_Parm)

void APlayerController::PathChild(int32_t Cnt)
{
	static UFunction* uFnPathChild = nullptr;

	if (!uFnPathChild)
	{
		uFnPathChild = UFunction::FindFunction("Function Engine.PlayerController.PathChild");
	}

	APlayerController_execPathChild_Params PathChild_Params;
	memset(&PathChild_Params, 0, sizeof(PathChild_Params));
	memcpy_s(&PathChild_Params.Cnt, sizeof(PathChild_Params.Cnt), &Cnt, sizeof(Cnt));

	this->ProcessEvent(uFnPathChild, &PathChild_Params, nullptr);
};

// Function Engine.PlayerController.PathStep
// [0x00024202] (FUNC_Defined | FUNC_Exec | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Cnt                            (CPF_OptionalParm | CPF_Parm)

void APlayerController::PathStep(int32_t Cnt)
{
	static UFunction* uFnPathStep = nullptr;

	if (!uFnPathStep)
	{
		uFnPathStep = UFunction::FindFunction("Function Engine.PlayerController.PathStep");
	}

	APlayerController_execPathStep_Params PathStep_Params;
	memset(&PathStep_Params, 0, sizeof(PathStep_Params));
	memcpy_s(&PathStep_Params.Cnt, sizeof(PathStep_Params.Cnt), &Cnt, sizeof(Cnt));

	this->ProcessEvent(uFnPathStep, &PathStep_Params, nullptr);
};

// Function Engine.PlayerController.SoakPause
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class APawn*                   P                              (CPF_Parm)

void APlayerController::eventSoakPause(class APawn* P)
{
	static UFunction* uFnSoakPause = nullptr;

	if (!uFnSoakPause)
	{
		uFnSoakPause = UFunction::FindFunction("Function Engine.PlayerController.SoakPause");
	}

	APlayerController_eventSoakPause_Params SoakPause_Params;
	memset(&SoakPause_Params, 0, sizeof(SoakPause_Params));
	SoakPause_Params.P = P;

	this->ProcessEvent(uFnSoakPause, &SoakPause_Params, nullptr);
};

// Function Engine.PlayerController.CanViewUserCreatedContent
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool APlayerController::CanViewUserCreatedContent()
{
	static UFunction* uFnCanViewUserCreatedContent = nullptr;

	if (!uFnCanViewUserCreatedContent)
	{
		uFnCanViewUserCreatedContent = UFunction::FindFunction("Function Engine.PlayerController.CanViewUserCreatedContent");
	}

	APlayerController_execCanViewUserCreatedContent_Params CanViewUserCreatedContent_Params;
	memset(&CanViewUserCreatedContent_Params, 0, sizeof(CanViewUserCreatedContent_Params));

	this->ProcessEvent(uFnCanViewUserCreatedContent, &CanViewUserCreatedContent_Params, nullptr);

	return CanViewUserCreatedContent_Params.ReturnValue;
};

// Function Engine.PlayerController.RemoveAllDebugStrings
// [0xFFFF0000010209C3] (FUNC_Final | FUNC_Defined | FUNC_Net | FUNC_NetReliable | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_NetClient | FUNC_AllFlags)
// Parameter Info:

void APlayerController::eventRemoveAllDebugStrings()
{
	static UFunction* uFnRemoveAllDebugStrings = nullptr;

	if (!uFnRemoveAllDebugStrings)
	{
		uFnRemoveAllDebugStrings = UFunction::FindFunction("Function Engine.PlayerController.RemoveAllDebugStrings");
	}

	APlayerController_eventRemoveAllDebugStrings_Params RemoveAllDebugStrings_Params;
	memset(&RemoveAllDebugStrings_Params, 0, sizeof(RemoveAllDebugStrings_Params));

	this->ProcessEvent(uFnRemoveAllDebugStrings, &RemoveAllDebugStrings_Params, nullptr);
};

// Function Engine.PlayerController.RemoveDebugText
// [0xFFFF0000010209C3] (FUNC_Final | FUNC_Defined | FUNC_Net | FUNC_NetReliable | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_NetClient | FUNC_AllFlags)
// Parameter Info:
// class AActor*                  SrcActor                       (CPF_Parm)

void APlayerController::eventRemoveDebugText(class AActor* SrcActor)
{
	static UFunction* uFnRemoveDebugText = nullptr;

	if (!uFnRemoveDebugText)
	{
		uFnRemoveDebugText = UFunction::FindFunction("Function Engine.PlayerController.RemoveDebugText");
	}

	APlayerController_eventRemoveDebugText_Params RemoveDebugText_Params;
	memset(&RemoveDebugText_Params, 0, sizeof(RemoveDebugText_Params));
	RemoveDebugText_Params.SrcActor = SrcActor;

	this->ProcessEvent(uFnRemoveDebugText, &RemoveDebugText_Params, nullptr);
};

// Function Engine.PlayerController.AddDebugText
// [0xFFFF0000010249C3] (FUNC_Final | FUNC_Defined | FUNC_Net | FUNC_NetReliable | FUNC_Simulated | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_NetClient | FUNC_AllFlags)
// Parameter Info:
// class FString                  DebugText                      (CPF_Parm | CPF_NeedCtorLink)
// class AActor*                  SrcActor                       (CPF_OptionalParm | CPF_Parm)
// float                          Duration                       (CPF_OptionalParm | CPF_Parm)
// struct FVector                 Offset                         (CPF_OptionalParm | CPF_Parm)
// struct FVector                 DesiredOffset                  (CPF_OptionalParm | CPF_Parm)
// struct FColor                  TextColor                      (CPF_OptionalParm | CPF_Parm)
// uint32_t                       bSkipOverwriteCheck            (CPF_OptionalParm | CPF_Parm)
// uint32_t                       bAbsoluteLocation              (CPF_OptionalParm | CPF_Parm)

void APlayerController::eventAddDebugText(const class FString& DebugText, class AActor* SrcActor, float Duration, const struct FVector& Offset, const struct FVector& DesiredOffset, const struct FColor& TextColor, bool bSkipOverwriteCheck, bool bAbsoluteLocation)
{
	static UFunction* uFnAddDebugText = nullptr;

	if (!uFnAddDebugText)
	{
		uFnAddDebugText = UFunction::FindFunction("Function Engine.PlayerController.AddDebugText");
	}

	APlayerController_eventAddDebugText_Params AddDebugText_Params;
	memset(&AddDebugText_Params, 0, sizeof(AddDebugText_Params));
	memcpy_s(&AddDebugText_Params.DebugText, sizeof(AddDebugText_Params.DebugText), &DebugText, sizeof(DebugText));
	AddDebugText_Params.SrcActor = SrcActor;
	memcpy_s(&AddDebugText_Params.Duration, sizeof(AddDebugText_Params.Duration), &Duration, sizeof(Duration));
	memcpy_s(&AddDebugText_Params.Offset, sizeof(AddDebugText_Params.Offset), &Offset, sizeof(Offset));
	memcpy_s(&AddDebugText_Params.DesiredOffset, sizeof(AddDebugText_Params.DesiredOffset), &DesiredOffset, sizeof(DesiredOffset));
	memcpy_s(&AddDebugText_Params.TextColor, sizeof(AddDebugText_Params.TextColor), &TextColor, sizeof(TextColor));
	AddDebugText_Params.bSkipOverwriteCheck = bSkipOverwriteCheck;
	AddDebugText_Params.bAbsoluteLocation = bAbsoluteLocation;

	this->ProcessEvent(uFnAddDebugText, &AddDebugText_Params, nullptr);
};

// Function Engine.PlayerController.DrawDebugTextList
// [0x00820103] (FUNC_Final | FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// class UCanvas*                 Canvas                         (CPF_Parm)
// float                          RenderDelta                    (CPF_Parm)

void APlayerController::DrawDebugTextList(class UCanvas* Canvas, float RenderDelta)
{
	static UFunction* uFnDrawDebugTextList = nullptr;

	if (!uFnDrawDebugTextList)
	{
		uFnDrawDebugTextList = UFunction::FindFunction("Function Engine.PlayerController.DrawDebugTextList");
	}

	APlayerController_execDrawDebugTextList_Params DrawDebugTextList_Params;
	memset(&DrawDebugTextList_Params, 0, sizeof(DrawDebugTextList_Params));
	DrawDebugTextList_Params.Canvas = Canvas;
	memcpy_s(&DrawDebugTextList_Params.RenderDelta, sizeof(DrawDebugTextList_Params.RenderDelta), &RenderDelta, sizeof(RenderDelta));

	this->ProcessEvent(uFnDrawDebugTextList, &DrawDebugTextList_Params, nullptr);
};

// Function Engine.PlayerController.OnDestroy
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_Destroy*         Action                         (CPF_Parm)

void APlayerController::OnDestroy(class USeqAct_Destroy* Action)
{
	static UFunction* uFnOnDestroy = nullptr;

	if (!uFnOnDestroy)
	{
		uFnOnDestroy = UFunction::FindFunction("Function Engine.PlayerController.OnDestroy");
	}

	APlayerController_execOnDestroy_Params OnDestroy_Params;
	memset(&OnDestroy_Params, 0, sizeof(OnDestroy_Params));
	OnDestroy_Params.Action = Action;

	this->ProcessEvent(uFnOnDestroy, &OnDestroy_Params, nullptr);
};

// Function Engine.PlayerController.ClientSetHostUniqueId
// [0xFFFF0000010201C0] (FUNC_Net | FUNC_NetReliable | FUNC_Simulated | FUNC_Public | FUNC_NetClient | FUNC_AllFlags)
// Parameter Info:
// struct FUniqueNetId            InHostId                       (CPF_Parm)

void APlayerController::ClientSetHostUniqueId(const struct FUniqueNetId& InHostId)
{
	static UFunction* uFnClientSetHostUniqueId = nullptr;

	if (!uFnClientSetHostUniqueId)
	{
		uFnClientSetHostUniqueId = UFunction::FindFunction("Function Engine.PlayerController.ClientSetHostUniqueId");
	}

	APlayerController_execClientSetHostUniqueId_Params ClientSetHostUniqueId_Params;
	memset(&ClientSetHostUniqueId_Params, 0, sizeof(ClientSetHostUniqueId_Params));
	memcpy_s(&ClientSetHostUniqueId_Params.InHostId, sizeof(ClientSetHostUniqueId_Params.InHostId), &InHostId, sizeof(InHostId));

	this->ProcessEvent(uFnClientSetHostUniqueId, &ClientSetHostUniqueId_Params, nullptr);
};

// Function Engine.PlayerController.ClientWriteLeaderboardStats
// [0xFFFF0000010201C0] (FUNC_Net | FUNC_NetReliable | FUNC_Simulated | FUNC_Public | FUNC_NetClient | FUNC_AllFlags)
// Parameter Info:
// class UOnlineStatsWrite*       OnlineStatsWriteClass          (CPF_Parm)

void APlayerController::ClientWriteLeaderboardStats(class UOnlineStatsWrite* OnlineStatsWriteClass)
{
	static UFunction* uFnClientWriteLeaderboardStats = nullptr;

	if (!uFnClientWriteLeaderboardStats)
	{
		uFnClientWriteLeaderboardStats = UFunction::FindFunction("Function Engine.PlayerController.ClientWriteLeaderboardStats");
	}

	APlayerController_execClientWriteLeaderboardStats_Params ClientWriteLeaderboardStats_Params;
	memset(&ClientWriteLeaderboardStats_Params, 0, sizeof(ClientWriteLeaderboardStats_Params));
	ClientWriteLeaderboardStats_Params.OnlineStatsWriteClass = OnlineStatsWriteClass;

	this->ProcessEvent(uFnClientWriteLeaderboardStats, &ClientWriteLeaderboardStats_Params, nullptr);
};

// Function Engine.PlayerController.IsShowingSubtitles
// [0x00020500] (FUNC_Simulated | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[21425])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool APlayerController::IsShowingSubtitles()
{
	static UFunction* uFnIsShowingSubtitles = nullptr;

	if (!uFnIsShowingSubtitles)
	{
		uFnIsShowingSubtitles = UFunction::FindFunction("Function Engine.PlayerController.IsShowingSubtitles");
	}

	APlayerController_execIsShowingSubtitles_Params IsShowingSubtitles_Params;
	memset(&IsShowingSubtitles_Params, 0, sizeof(IsShowingSubtitles_Params));

	uFnIsShowingSubtitles->iNative = 0;
	uFnIsShowingSubtitles->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnIsShowingSubtitles, &IsShowingSubtitles_Params, nullptr);
	uFnIsShowingSubtitles->FunctionFlags |= 0x400;
	uFnIsShowingSubtitles->iNative = 21425;

	return IsShowingSubtitles_Params.ReturnValue;
};

// Function Engine.PlayerController.SetShowSubtitles
// [0x00020700] (FUNC_Simulated | FUNC_Exec | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25791])
// Parameter Info:
// uint32_t                       bValue                         (CPF_Parm)

void APlayerController::SetShowSubtitles(bool bValue)
{
	static UFunction* uFnSetShowSubtitles = nullptr;

	if (!uFnSetShowSubtitles)
	{
		uFnSetShowSubtitles = UFunction::FindFunction("Function Engine.PlayerController.SetShowSubtitles");
	}

	APlayerController_execSetShowSubtitles_Params SetShowSubtitles_Params;
	memset(&SetShowSubtitles_Params, 0, sizeof(SetShowSubtitles_Params));
	SetShowSubtitles_Params.bValue = bValue;

	uFnSetShowSubtitles->iNative = 0;
	uFnSetShowSubtitles->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetShowSubtitles, &SetShowSubtitles_Params, nullptr);
	uFnSetShowSubtitles->FunctionFlags |= 0x400;
	uFnSetShowSubtitles->iNative = 25791;
};

// Function Engine.PlayerController.NotifyDirectorControl
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bNowControlling                (CPF_Parm)

void APlayerController::eventNotifyDirectorControl(bool bNowControlling)
{
	static UFunction* uFnNotifyDirectorControl = nullptr;

	if (!uFnNotifyDirectorControl)
	{
		uFnNotifyDirectorControl = UFunction::FindFunction("Function Engine.PlayerController.NotifyDirectorControl");
	}

	APlayerController_eventNotifyDirectorControl_Params NotifyDirectorControl_Params;
	memset(&NotifyDirectorControl_Params, 0, sizeof(NotifyDirectorControl_Params));
	NotifyDirectorControl_Params.bNowControlling = bNowControlling;

	this->ProcessEvent(uFnNotifyDirectorControl, &NotifyDirectorControl_Params, nullptr);
};

// Function Engine.PlayerController.GetPlayerControllerFromNetId
// [0x00022400] (FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags) (iNative[20678])
// Parameter Info:
// class APlayerController*       ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FUniqueNetId            PlayerNetId                    (CPF_Parm)

class APlayerController* APlayerController::GetPlayerControllerFromNetId(const struct FUniqueNetId& PlayerNetId)
{
	static UFunction* uFnGetPlayerControllerFromNetId = nullptr;

	if (!uFnGetPlayerControllerFromNetId)
	{
		uFnGetPlayerControllerFromNetId = UFunction::FindFunction("Function Engine.PlayerController.GetPlayerControllerFromNetId");
	}

	APlayerController_execGetPlayerControllerFromNetId_Params GetPlayerControllerFromNetId_Params;
	memset(&GetPlayerControllerFromNetId_Params, 0, sizeof(GetPlayerControllerFromNetId_Params));
	memcpy_s(&GetPlayerControllerFromNetId_Params.PlayerNetId, sizeof(GetPlayerControllerFromNetId_Params.PlayerNetId), &PlayerNetId, sizeof(PlayerNetId));

	uFnGetPlayerControllerFromNetId->iNative = 0;
	uFnGetPlayerControllerFromNetId->FunctionFlags &= ~0x400;
	APlayerController::StaticClass()->ProcessEvent(uFnGetPlayerControllerFromNetId, &GetPlayerControllerFromNetId_Params, nullptr);
	uFnGetPlayerControllerFromNetId->FunctionFlags |= 0x400;
	uFnGetPlayerControllerFromNetId->iNative = 20678;

	return GetPlayerControllerFromNetId_Params.ReturnValue;
};

// Function Engine.PlayerController.ClientSetOnlineStatus
// [0xFFFF0000010201C0] (FUNC_Net | FUNC_NetReliable | FUNC_Simulated | FUNC_Public | FUNC_NetClient | FUNC_AllFlags)
// Parameter Info:

void APlayerController::ClientSetOnlineStatus()
{
	static UFunction* uFnClientSetOnlineStatus = nullptr;

	if (!uFnClientSetOnlineStatus)
	{
		uFnClientSetOnlineStatus = UFunction::FindFunction("Function Engine.PlayerController.ClientSetOnlineStatus");
	}

	APlayerController_execClientSetOnlineStatus_Params ClientSetOnlineStatus_Params;
	memset(&ClientSetOnlineStatus_Params, 0, sizeof(ClientSetOnlineStatus_Params));

	this->ProcessEvent(uFnClientSetOnlineStatus, &ClientSetOnlineStatus_Params, nullptr);
};

// Function Engine.PlayerController.GetUIController
// [0x00020003] (FUNC_Final | FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UUIInteraction*          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class UUIInteraction* APlayerController::GetUIController()
{
	static UFunction* uFnGetUIController = nullptr;

	if (!uFnGetUIController)
	{
		uFnGetUIController = UFunction::FindFunction("Function Engine.PlayerController.GetUIController");
	}

	APlayerController_execGetUIController_Params GetUIController_Params;
	memset(&GetUIController_Params, 0, sizeof(GetUIController_Params));

	this->ProcessEvent(uFnGetUIController, &GetUIController_Params, nullptr);

	return GetUIController_Params.ReturnValue;
};

// Function Engine.PlayerController.SaveActorConfig
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FName                    actorName                      (CPF_Parm | CPF_CoerceParm)

void APlayerController::SaveActorConfig(const class FName& actorName)
{
	static UFunction* uFnSaveActorConfig = nullptr;

	if (!uFnSaveActorConfig)
	{
		uFnSaveActorConfig = UFunction::FindFunction("Function Engine.PlayerController.SaveActorConfig");
	}

	APlayerController_execSaveActorConfig_Params SaveActorConfig_Params;
	memset(&SaveActorConfig_Params, 0, sizeof(SaveActorConfig_Params));
	memcpy_s(&SaveActorConfig_Params.actorName, sizeof(SaveActorConfig_Params.actorName), &actorName, sizeof(actorName));

	this->ProcessEvent(uFnSaveActorConfig, &SaveActorConfig_Params, nullptr);
};

// Function Engine.PlayerController.SaveClassConfig
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  ClassName                      (CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink)

void APlayerController::SaveClassConfig(const class FString& ClassName)
{
	static UFunction* uFnSaveClassConfig = nullptr;

	if (!uFnSaveClassConfig)
	{
		uFnSaveClassConfig = UFunction::FindFunction("Function Engine.PlayerController.SaveClassConfig");
	}

	APlayerController_execSaveClassConfig_Params SaveClassConfig_Params;
	memset(&SaveClassConfig_Params, 0, sizeof(SaveClassConfig_Params));
	memcpy_s(&SaveClassConfig_Params.ClassName, sizeof(SaveClassConfig_Params.ClassName), &ClassName, sizeof(ClassName));

	this->ProcessEvent(uFnSaveClassConfig, &SaveClassConfig_Params, nullptr);
};

// Function Engine.PlayerController.ClientSetBlockOnAsyncLoading
// [0xFFFF0000010209C2] (FUNC_Defined | FUNC_Net | FUNC_NetReliable | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_NetClient | FUNC_AllFlags)
// Parameter Info:

void APlayerController::eventClientSetBlockOnAsyncLoading()
{
	static UFunction* uFnClientSetBlockOnAsyncLoading = nullptr;

	if (!uFnClientSetBlockOnAsyncLoading)
	{
		uFnClientSetBlockOnAsyncLoading = UFunction::FindFunction("Function Engine.PlayerController.ClientSetBlockOnAsyncLoading");
	}

	APlayerController_eventClientSetBlockOnAsyncLoading_Params ClientSetBlockOnAsyncLoading_Params;
	memset(&ClientSetBlockOnAsyncLoading_Params, 0, sizeof(ClientSetBlockOnAsyncLoading_Params));

	this->ProcessEvent(uFnClientSetBlockOnAsyncLoading, &ClientSetBlockOnAsyncLoading_Params, nullptr);
};

// Function Engine.PlayerController.ClientFlushLevelStreaming
// [0xFFFF000001020DC1] (FUNC_Final | FUNC_Net | FUNC_NetReliable | FUNC_Simulated | FUNC_Native | FUNC_Event | FUNC_Public | FUNC_NetClient | FUNC_AllFlags) (iNative[13493])
// Parameter Info:

void APlayerController::eventClientFlushLevelStreaming()
{
	static UFunction* uFnClientFlushLevelStreaming = nullptr;

	if (!uFnClientFlushLevelStreaming)
	{
		uFnClientFlushLevelStreaming = UFunction::FindFunction("Function Engine.PlayerController.ClientFlushLevelStreaming");
	}

	APlayerController_eventClientFlushLevelStreaming_Params ClientFlushLevelStreaming_Params;
	memset(&ClientFlushLevelStreaming_Params, 0, sizeof(ClientFlushLevelStreaming_Params));

	uFnClientFlushLevelStreaming->iNative = 0;
	uFnClientFlushLevelStreaming->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnClientFlushLevelStreaming, &ClientFlushLevelStreaming_Params, nullptr);
	uFnClientFlushLevelStreaming->FunctionFlags |= 0x400;
	uFnClientFlushLevelStreaming->iNative = 13493;
};

// Function Engine.PlayerController.ClientCancelPendingMapChange
// [0xFFFF0000010209C2] (FUNC_Defined | FUNC_Net | FUNC_NetReliable | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_NetClient | FUNC_AllFlags)
// Parameter Info:

void APlayerController::eventClientCancelPendingMapChange()
{
	static UFunction* uFnClientCancelPendingMapChange = nullptr;

	if (!uFnClientCancelPendingMapChange)
	{
		uFnClientCancelPendingMapChange = UFunction::FindFunction("Function Engine.PlayerController.ClientCancelPendingMapChange");
	}

	APlayerController_eventClientCancelPendingMapChange_Params ClientCancelPendingMapChange_Params;
	memset(&ClientCancelPendingMapChange_Params, 0, sizeof(ClientCancelPendingMapChange_Params));

	this->ProcessEvent(uFnClientCancelPendingMapChange, &ClientCancelPendingMapChange_Params, nullptr);
};

// Function Engine.PlayerController.ClientCommitMapChange
// [0xFFFF0000010209C2] (FUNC_Defined | FUNC_Net | FUNC_NetReliable | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_NetClient | FUNC_AllFlags)
// Parameter Info:

void APlayerController::eventClientCommitMapChange()
{
	static UFunction* uFnClientCommitMapChange = nullptr;

	if (!uFnClientCommitMapChange)
	{
		uFnClientCommitMapChange = UFunction::FindFunction("Function Engine.PlayerController.ClientCommitMapChange");
	}

	APlayerController_eventClientCommitMapChange_Params ClientCommitMapChange_Params;
	memset(&ClientCommitMapChange_Params, 0, sizeof(ClientCommitMapChange_Params));

	this->ProcessEvent(uFnClientCommitMapChange, &ClientCommitMapChange_Params, nullptr);
};

// Function Engine.PlayerController.DelayedPrepareMapChange
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void APlayerController::DelayedPrepareMapChange()
{
	static UFunction* uFnDelayedPrepareMapChange = nullptr;

	if (!uFnDelayedPrepareMapChange)
	{
		uFnDelayedPrepareMapChange = UFunction::FindFunction("Function Engine.PlayerController.DelayedPrepareMapChange");
	}

	APlayerController_execDelayedPrepareMapChange_Params DelayedPrepareMapChange_Params;
	memset(&DelayedPrepareMapChange_Params, 0, sizeof(DelayedPrepareMapChange_Params));

	this->ProcessEvent(uFnDelayedPrepareMapChange, &DelayedPrepareMapChange_Params, nullptr);
};

// Function Engine.PlayerController.ClientPrepareMapChange
// [0xFFFF0000010209C2] (FUNC_Defined | FUNC_Net | FUNC_NetReliable | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_NetClient | FUNC_AllFlags)
// Parameter Info:
// class FName                    LevelName                      (CPF_Parm)
// uint32_t                       bFirst                         (CPF_Parm)
// uint32_t                       bLast                          (CPF_Parm)

void APlayerController::eventClientPrepareMapChange(const class FName& LevelName, bool bFirst, bool bLast)
{
	static UFunction* uFnClientPrepareMapChange = nullptr;

	if (!uFnClientPrepareMapChange)
	{
		uFnClientPrepareMapChange = UFunction::FindFunction("Function Engine.PlayerController.ClientPrepareMapChange");
	}

	APlayerController_eventClientPrepareMapChange_Params ClientPrepareMapChange_Params;
	memset(&ClientPrepareMapChange_Params, 0, sizeof(ClientPrepareMapChange_Params));
	memcpy_s(&ClientPrepareMapChange_Params.LevelName, sizeof(ClientPrepareMapChange_Params.LevelName), &LevelName, sizeof(LevelName));
	ClientPrepareMapChange_Params.bFirst = bFirst;
	ClientPrepareMapChange_Params.bLast = bLast;

	this->ProcessEvent(uFnClientPrepareMapChange, &ClientPrepareMapChange_Params, nullptr);
};

// Function Engine.PlayerController.ClientUpdateLevelStreamingStatus
// [0xFFFF0000010205C0] (FUNC_Net | FUNC_NetReliable | FUNC_Simulated | FUNC_Native | FUNC_Public | FUNC_NetClient | FUNC_AllFlags) (iNative[18212])
// Parameter Info:
// class FName                    PackageName                    (CPF_Parm)
// uint32_t                       bNewShouldBeLoaded             (CPF_Parm)
// uint32_t                       bNewShouldBeVisible            (CPF_Parm)
// uint32_t                       bNewShouldBlockOnLoad          (CPF_Parm)

void APlayerController::ClientUpdateLevelStreamingStatus(const class FName& PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad)
{
	static UFunction* uFnClientUpdateLevelStreamingStatus = nullptr;

	if (!uFnClientUpdateLevelStreamingStatus)
	{
		uFnClientUpdateLevelStreamingStatus = UFunction::FindFunction("Function Engine.PlayerController.ClientUpdateLevelStreamingStatus");
	}

	APlayerController_execClientUpdateLevelStreamingStatus_Params ClientUpdateLevelStreamingStatus_Params;
	memset(&ClientUpdateLevelStreamingStatus_Params, 0, sizeof(ClientUpdateLevelStreamingStatus_Params));
	memcpy_s(&ClientUpdateLevelStreamingStatus_Params.PackageName, sizeof(ClientUpdateLevelStreamingStatus_Params.PackageName), &PackageName, sizeof(PackageName));
	ClientUpdateLevelStreamingStatus_Params.bNewShouldBeLoaded = bNewShouldBeLoaded;
	ClientUpdateLevelStreamingStatus_Params.bNewShouldBeVisible = bNewShouldBeVisible;
	ClientUpdateLevelStreamingStatus_Params.bNewShouldBlockOnLoad = bNewShouldBlockOnLoad;

	uFnClientUpdateLevelStreamingStatus->iNative = 0;
	uFnClientUpdateLevelStreamingStatus->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnClientUpdateLevelStreamingStatus, &ClientUpdateLevelStreamingStatus_Params, nullptr);
	uFnClientUpdateLevelStreamingStatus->FunctionFlags |= 0x400;
	uFnClientUpdateLevelStreamingStatus->iNative = 18212;
};

// Function Engine.PlayerController.CleanUpBeforeLevelTransition
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[18101])
// Parameter Info:

void APlayerController::CleanUpBeforeLevelTransition()
{
	static UFunction* uFnCleanUpBeforeLevelTransition = nullptr;

	if (!uFnCleanUpBeforeLevelTransition)
	{
		uFnCleanUpBeforeLevelTransition = UFunction::FindFunction("Function Engine.PlayerController.CleanUpBeforeLevelTransition");
	}

	APlayerController_execCleanUpBeforeLevelTransition_Params CleanUpBeforeLevelTransition_Params;
	memset(&CleanUpBeforeLevelTransition_Params, 0, sizeof(CleanUpBeforeLevelTransition_Params));

	uFnCleanUpBeforeLevelTransition->iNative = 0;
	uFnCleanUpBeforeLevelTransition->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnCleanUpBeforeLevelTransition, &CleanUpBeforeLevelTransition_Params, nullptr);
	uFnCleanUpBeforeLevelTransition->FunctionFlags |= 0x400;
	uFnCleanUpBeforeLevelTransition->iNative = 18101;
};

// Function Engine.PlayerController.LevelStreamingStatusChanged
// [0x00020803] (FUNC_Final | FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class ULevelStreaming*         LevelObject                    (CPF_Parm)
// uint32_t                       bNewShouldBeLoaded             (CPF_Parm)
// uint32_t                       bNewShouldBeVisible            (CPF_Parm)
// uint32_t                       bNewShouldBlockOnLoad          (CPF_Parm)

void APlayerController::eventLevelStreamingStatusChanged(class ULevelStreaming* LevelObject, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad)
{
	static UFunction* uFnLevelStreamingStatusChanged = nullptr;

	if (!uFnLevelStreamingStatusChanged)
	{
		uFnLevelStreamingStatusChanged = UFunction::FindFunction("Function Engine.PlayerController.LevelStreamingStatusChanged");
	}

	APlayerController_eventLevelStreamingStatusChanged_Params LevelStreamingStatusChanged_Params;
	memset(&LevelStreamingStatusChanged_Params, 0, sizeof(LevelStreamingStatusChanged_Params));
	LevelStreamingStatusChanged_Params.LevelObject = LevelObject;
	LevelStreamingStatusChanged_Params.bNewShouldBeLoaded = bNewShouldBeLoaded;
	LevelStreamingStatusChanged_Params.bNewShouldBeVisible = bNewShouldBeVisible;
	LevelStreamingStatusChanged_Params.bNewShouldBlockOnLoad = bNewShouldBlockOnLoad;

	this->ProcessEvent(uFnLevelStreamingStatusChanged, &LevelStreamingStatusChanged_Params, nullptr);
};

// Function Engine.PlayerController.ClientForceGarbageCollection
// [0xFFFF0000010209C2] (FUNC_Defined | FUNC_Net | FUNC_NetReliable | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_NetClient | FUNC_AllFlags)
// Parameter Info:

void APlayerController::eventClientForceGarbageCollection()
{
	static UFunction* uFnClientForceGarbageCollection = nullptr;

	if (!uFnClientForceGarbageCollection)
	{
		uFnClientForceGarbageCollection = UFunction::FindFunction("Function Engine.PlayerController.ClientForceGarbageCollection");
	}

	APlayerController_eventClientForceGarbageCollection_Params ClientForceGarbageCollection_Params;
	memset(&ClientForceGarbageCollection_Params, 0, sizeof(ClientForceGarbageCollection_Params));

	this->ProcessEvent(uFnClientForceGarbageCollection, &ClientForceGarbageCollection_Params, nullptr);
};

// Function Engine.PlayerController.OnConsoleCommand
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_ConsoleCommand*  inAction                       (CPF_Parm)

void APlayerController::OnConsoleCommand(class USeqAct_ConsoleCommand* inAction)
{
	static UFunction* uFnOnConsoleCommand = nullptr;

	if (!uFnOnConsoleCommand)
	{
		uFnOnConsoleCommand = UFunction::FindFunction("Function Engine.PlayerController.OnConsoleCommand");
	}

	APlayerController_execOnConsoleCommand_Params OnConsoleCommand_Params;
	memset(&OnConsoleCommand_Params, 0, sizeof(OnConsoleCommand_Params));
	OnConsoleCommand_Params.inAction = inAction;

	this->ProcessEvent(uFnOnConsoleCommand, &OnConsoleCommand_Params, nullptr);
};

// Function Engine.PlayerController.ResetPlayerMovementInput
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void APlayerController::ResetPlayerMovementInput()
{
	static UFunction* uFnResetPlayerMovementInput = nullptr;

	if (!uFnResetPlayerMovementInput)
	{
		uFnResetPlayerMovementInput = UFunction::FindFunction("Function Engine.PlayerController.ResetPlayerMovementInput");
	}

	APlayerController_execResetPlayerMovementInput_Params ResetPlayerMovementInput_Params;
	memset(&ResetPlayerMovementInput_Params, 0, sizeof(ResetPlayerMovementInput_Params));

	this->ProcessEvent(uFnResetPlayerMovementInput, &ResetPlayerMovementInput_Params, nullptr);
};

// Function Engine.PlayerController.IsLookInputIgnored
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[21402])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool APlayerController::IsLookInputIgnored()
{
	static UFunction* uFnIsLookInputIgnored = nullptr;

	if (!uFnIsLookInputIgnored)
	{
		uFnIsLookInputIgnored = UFunction::FindFunction("Function Engine.PlayerController.IsLookInputIgnored");
	}

	APlayerController_execIsLookInputIgnored_Params IsLookInputIgnored_Params;
	memset(&IsLookInputIgnored_Params, 0, sizeof(IsLookInputIgnored_Params));

	uFnIsLookInputIgnored->iNative = 0;
	uFnIsLookInputIgnored->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnIsLookInputIgnored, &IsLookInputIgnored_Params, nullptr);
	uFnIsLookInputIgnored->FunctionFlags |= 0x400;
	uFnIsLookInputIgnored->iNative = 21402;

	return IsLookInputIgnored_Params.ReturnValue;
};

// Function Engine.PlayerController.IgnoreLookInput
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bNewLookInput                  (CPF_Parm)

void APlayerController::IgnoreLookInput(bool bNewLookInput)
{
	static UFunction* uFnIgnoreLookInput = nullptr;

	if (!uFnIgnoreLookInput)
	{
		uFnIgnoreLookInput = UFunction::FindFunction("Function Engine.PlayerController.IgnoreLookInput");
	}

	APlayerController_execIgnoreLookInput_Params IgnoreLookInput_Params;
	memset(&IgnoreLookInput_Params, 0, sizeof(IgnoreLookInput_Params));
	IgnoreLookInput_Params.bNewLookInput = bNewLookInput;

	this->ProcessEvent(uFnIgnoreLookInput, &IgnoreLookInput_Params, nullptr);
};

// Function Engine.PlayerController.IsMoveInputIgnored
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[21406])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool APlayerController::IsMoveInputIgnored()
{
	static UFunction* uFnIsMoveInputIgnored = nullptr;

	if (!uFnIsMoveInputIgnored)
	{
		uFnIsMoveInputIgnored = UFunction::FindFunction("Function Engine.PlayerController.IsMoveInputIgnored");
	}

	APlayerController_execIsMoveInputIgnored_Params IsMoveInputIgnored_Params;
	memset(&IsMoveInputIgnored_Params, 0, sizeof(IsMoveInputIgnored_Params));

	uFnIsMoveInputIgnored->iNative = 0;
	uFnIsMoveInputIgnored->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnIsMoveInputIgnored, &IsMoveInputIgnored_Params, nullptr);
	uFnIsMoveInputIgnored->FunctionFlags |= 0x400;
	uFnIsMoveInputIgnored->iNative = 21406;

	return IsMoveInputIgnored_Params.ReturnValue;
};

// Function Engine.PlayerController.IgnoreMoveInput
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bNewMoveInput                  (CPF_Parm)

void APlayerController::IgnoreMoveInput(bool bNewMoveInput)
{
	static UFunction* uFnIgnoreMoveInput = nullptr;

	if (!uFnIgnoreMoveInput)
	{
		uFnIgnoreMoveInput = UFunction::FindFunction("Function Engine.PlayerController.IgnoreMoveInput");
	}

	APlayerController_execIgnoreMoveInput_Params IgnoreMoveInput_Params;
	memset(&IgnoreMoveInput_Params, 0, sizeof(IgnoreMoveInput_Params));
	IgnoreMoveInput_Params.bNewMoveInput = bNewMoveInput;

	this->ProcessEvent(uFnIgnoreMoveInput, &IgnoreMoveInput_Params, nullptr);
};

// Function Engine.PlayerController.ClientSetCinematicMode
// [0xFFFF0000010201C2] (FUNC_Defined | FUNC_Net | FUNC_NetReliable | FUNC_Simulated | FUNC_Public | FUNC_NetClient | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bInCinematicMode               (CPF_Parm)
// uint32_t                       bAffectsMovement               (CPF_Parm)
// uint32_t                       bAffectsTurning                (CPF_Parm)
// uint32_t                       bAffectsHUD                    (CPF_Parm)

void APlayerController::ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD)
{
	static UFunction* uFnClientSetCinematicMode = nullptr;

	if (!uFnClientSetCinematicMode)
	{
		uFnClientSetCinematicMode = UFunction::FindFunction("Function Engine.PlayerController.ClientSetCinematicMode");
	}

	APlayerController_execClientSetCinematicMode_Params ClientSetCinematicMode_Params;
	memset(&ClientSetCinematicMode_Params, 0, sizeof(ClientSetCinematicMode_Params));
	ClientSetCinematicMode_Params.bInCinematicMode = bInCinematicMode;
	ClientSetCinematicMode_Params.bAffectsMovement = bAffectsMovement;
	ClientSetCinematicMode_Params.bAffectsTurning = bAffectsTurning;
	ClientSetCinematicMode_Params.bAffectsHUD = bAffectsHUD;

	this->ProcessEvent(uFnClientSetCinematicMode, &ClientSetCinematicMode_Params, nullptr);
};

// Function Engine.PlayerController.SetCinematicMode
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bInCinematicMode               (CPF_Parm)
// uint32_t                       bHidePlayer                    (CPF_Parm)
// uint32_t                       bAffectsHUD                    (CPF_Parm)
// uint32_t                       bAffectsMovement               (CPF_Parm)
// uint32_t                       bAffectsTurning                (CPF_Parm)
// uint32_t                       bAffectsButtons                (CPF_Parm)
// uint32_t                       bHideLetterbox                 (CPF_Parm)

void APlayerController::SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsButtons, bool bHideLetterbox)
{
	static UFunction* uFnSetCinematicMode = nullptr;

	if (!uFnSetCinematicMode)
	{
		uFnSetCinematicMode = UFunction::FindFunction("Function Engine.PlayerController.SetCinematicMode");
	}

	APlayerController_execSetCinematicMode_Params SetCinematicMode_Params;
	memset(&SetCinematicMode_Params, 0, sizeof(SetCinematicMode_Params));
	SetCinematicMode_Params.bInCinematicMode = bInCinematicMode;
	SetCinematicMode_Params.bHidePlayer = bHidePlayer;
	SetCinematicMode_Params.bAffectsHUD = bAffectsHUD;
	SetCinematicMode_Params.bAffectsMovement = bAffectsMovement;
	SetCinematicMode_Params.bAffectsTurning = bAffectsTurning;
	SetCinematicMode_Params.bAffectsButtons = bAffectsButtons;
	SetCinematicMode_Params.bHideLetterbox = bHideLetterbox;

	this->ProcessEvent(uFnSetCinematicMode, &SetCinematicMode_Params, nullptr);
};

// Function Engine.PlayerController.OnToggleCinematicMode
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_ToggleCinematicMode* Action                         (CPF_Parm)

void APlayerController::OnToggleCinematicMode(class USeqAct_ToggleCinematicMode* Action)
{
	static UFunction* uFnOnToggleCinematicMode = nullptr;

	if (!uFnOnToggleCinematicMode)
	{
		uFnOnToggleCinematicMode = UFunction::FindFunction("Function Engine.PlayerController.OnToggleCinematicMode");
	}

	APlayerController_execOnToggleCinematicMode_Params OnToggleCinematicMode_Params;
	memset(&OnToggleCinematicMode_Params, 0, sizeof(OnToggleCinematicMode_Params));
	OnToggleCinematicMode_Params.Action = Action;

	this->ProcessEvent(uFnOnToggleCinematicMode, &OnToggleCinematicMode_Params, nullptr);
};

// Function Engine.PlayerController.IsForceFeedbackAllowed
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool APlayerController::IsForceFeedbackAllowed()
{
	static UFunction* uFnIsForceFeedbackAllowed = nullptr;

	if (!uFnIsForceFeedbackAllowed)
	{
		uFnIsForceFeedbackAllowed = UFunction::FindFunction("Function Engine.PlayerController.IsForceFeedbackAllowed");
	}

	APlayerController_execIsForceFeedbackAllowed_Params IsForceFeedbackAllowed_Params;
	memset(&IsForceFeedbackAllowed_Params, 0, sizeof(IsForceFeedbackAllowed_Params));

	this->ProcessEvent(uFnIsForceFeedbackAllowed, &IsForceFeedbackAllowed_Params, nullptr);

	return IsForceFeedbackAllowed_Params.ReturnValue;
};

// Function Engine.PlayerController.ClientStopForceFeedbackWaveform
// [0xFFFF0000010249C3] (FUNC_Final | FUNC_Defined | FUNC_Net | FUNC_NetReliable | FUNC_Simulated | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_NetClient | FUNC_AllFlags)
// Parameter Info:
// class UForceFeedbackWaveform*  FFWaveform                     (CPF_OptionalParm | CPF_Parm)

void APlayerController::eventClientStopForceFeedbackWaveform(class UForceFeedbackWaveform* FFWaveform)
{
	static UFunction* uFnClientStopForceFeedbackWaveform = nullptr;

	if (!uFnClientStopForceFeedbackWaveform)
	{
		uFnClientStopForceFeedbackWaveform = UFunction::FindFunction("Function Engine.PlayerController.ClientStopForceFeedbackWaveform");
	}

	APlayerController_eventClientStopForceFeedbackWaveform_Params ClientStopForceFeedbackWaveform_Params;
	memset(&ClientStopForceFeedbackWaveform_Params, 0, sizeof(ClientStopForceFeedbackWaveform_Params));
	ClientStopForceFeedbackWaveform_Params.FFWaveform = FFWaveform;

	this->ProcessEvent(uFnClientStopForceFeedbackWaveform, &ClientStopForceFeedbackWaveform_Params, nullptr);
};

// Function Engine.PlayerController.ClientPlayForceFeedbackWaveform
// [0xFFFF0000010249C2] (FUNC_Defined | FUNC_Net | FUNC_NetReliable | FUNC_Simulated | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_NetClient | FUNC_AllFlags)
// Parameter Info:
// class UForceFeedbackWaveform*  FFWaveform                     (CPF_Parm)
// class AActor*                  FFWaveformInstigator           (CPF_OptionalParm | CPF_Parm)

void APlayerController::eventClientPlayForceFeedbackWaveform(class UForceFeedbackWaveform* FFWaveform, class AActor* FFWaveformInstigator)
{
	static UFunction* uFnClientPlayForceFeedbackWaveform = nullptr;

	if (!uFnClientPlayForceFeedbackWaveform)
	{
		uFnClientPlayForceFeedbackWaveform = UFunction::FindFunction("Function Engine.PlayerController.ClientPlayForceFeedbackWaveform");
	}

	APlayerController_eventClientPlayForceFeedbackWaveform_Params ClientPlayForceFeedbackWaveform_Params;
	memset(&ClientPlayForceFeedbackWaveform_Params, 0, sizeof(ClientPlayForceFeedbackWaveform_Params));
	ClientPlayForceFeedbackWaveform_Params.FFWaveform = FFWaveform;
	ClientPlayForceFeedbackWaveform_Params.FFWaveformInstigator = FFWaveformInstigator;

	this->ProcessEvent(uFnClientPlayForceFeedbackWaveform, &ClientPlayForceFeedbackWaveform_Params, nullptr);
};

// Function Engine.PlayerController.PlayRumble
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UAnimNotify_Rumble*      TheAnimNotify                  (CPF_Const | CPF_Parm)

void APlayerController::eventPlayRumble(class UAnimNotify_Rumble* TheAnimNotify)
{
	static UFunction* uFnPlayRumble = nullptr;

	if (!uFnPlayRumble)
	{
		uFnPlayRumble = UFunction::FindFunction("Function Engine.PlayerController.PlayRumble");
	}

	APlayerController_eventPlayRumble_Params PlayRumble_Params;
	memset(&PlayRumble_Params, 0, sizeof(PlayRumble_Params));
	PlayRumble_Params.TheAnimNotify = TheAnimNotify;

	this->ProcessEvent(uFnPlayRumble, &PlayRumble_Params, nullptr);
};

// Function Engine.PlayerController.OnForceFeedback
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_ForceFeedback*   Action                         (CPF_Parm)

void APlayerController::OnForceFeedback(class USeqAct_ForceFeedback* Action)
{
	static UFunction* uFnOnForceFeedback = nullptr;

	if (!uFnOnForceFeedback)
	{
		uFnOnForceFeedback = UFunction::FindFunction("Function Engine.PlayerController.OnForceFeedback");
	}

	APlayerController_execOnForceFeedback_Params OnForceFeedback_Params;
	memset(&OnForceFeedback_Params, 0, sizeof(OnForceFeedback_Params));
	OnForceFeedback_Params.Action = Action;

	this->ProcessEvent(uFnOnForceFeedback, &OnForceFeedback_Params, nullptr);
};

// Function Engine.PlayerController.NotifyTakeHit
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AController*             InstigatedBy                   (CPF_Parm)
// struct FVector                 HitLocation                    (CPF_Parm)
// int32_t                        Damage                         (CPF_Parm)
// class UDamageType*             DamageType                     (CPF_Parm)
// struct FVector                 Momentum                       (CPF_Parm)

void APlayerController::NotifyTakeHit(class AController* InstigatedBy, const struct FVector& HitLocation, int32_t Damage, class UDamageType* DamageType, const struct FVector& Momentum)
{
	static UFunction* uFnNotifyTakeHit = nullptr;

	if (!uFnNotifyTakeHit)
	{
		uFnNotifyTakeHit = UFunction::FindFunction("Function Engine.PlayerController.NotifyTakeHit");
	}

	APlayerController_execNotifyTakeHit_Params NotifyTakeHit_Params;
	memset(&NotifyTakeHit_Params, 0, sizeof(NotifyTakeHit_Params));
	NotifyTakeHit_Params.InstigatedBy = InstigatedBy;
	memcpy_s(&NotifyTakeHit_Params.HitLocation, sizeof(NotifyTakeHit_Params.HitLocation), &HitLocation, sizeof(HitLocation));
	memcpy_s(&NotifyTakeHit_Params.Damage, sizeof(NotifyTakeHit_Params.Damage), &Damage, sizeof(Damage));
	NotifyTakeHit_Params.DamageType = DamageType;
	memcpy_s(&NotifyTakeHit_Params.Momentum, sizeof(NotifyTakeHit_Params.Momentum), &Momentum, sizeof(Momentum));

	this->ProcessEvent(uFnNotifyTakeHit, &NotifyTakeHit_Params, nullptr);
};

// Function Engine.PlayerController.ShowGameState
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void APlayerController::ShowGameState()
{
	static UFunction* uFnShowGameState = nullptr;

	if (!uFnShowGameState)
	{
		uFnShowGameState = UFunction::FindFunction("Function Engine.PlayerController.ShowGameState");
	}

	APlayerController_execShowGameState_Params ShowGameState_Params;
	memset(&ShowGameState_Params, 0, sizeof(ShowGameState_Params));

	this->ProcessEvent(uFnShowGameState, &ShowGameState_Params, nullptr);
};

// Function Engine.PlayerController.ShowPlayerState
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void APlayerController::ShowPlayerState()
{
	static UFunction* uFnShowPlayerState = nullptr;

	if (!uFnShowPlayerState)
	{
		uFnShowPlayerState = UFunction::FindFunction("Function Engine.PlayerController.ShowPlayerState");
	}

	APlayerController_execShowPlayerState_Params ShowPlayerState_Params;
	memset(&ShowPlayerState_Params, 0, sizeof(ShowPlayerState_Params));

	this->ProcessEvent(uFnShowPlayerState, &ShowPlayerState_Params, nullptr);
};

// Function Engine.PlayerController.ServerRemoteEvent
// [0xFFFF000000220042] (FUNC_Defined | FUNC_Net | FUNC_Public | FUNC_NetServer | FUNC_AllFlags)
// Parameter Info:
// class FName                    EventName                      (CPF_Parm)

void APlayerController::ServerRemoteEvent(const class FName& EventName)
{
	static UFunction* uFnServerRemoteEvent = nullptr;

	if (!uFnServerRemoteEvent)
	{
		uFnServerRemoteEvent = UFunction::FindFunction("Function Engine.PlayerController.ServerRemoteEvent");
	}

	APlayerController_execServerRemoteEvent_Params ServerRemoteEvent_Params;
	memset(&ServerRemoteEvent_Params, 0, sizeof(ServerRemoteEvent_Params));
	memcpy_s(&ServerRemoteEvent_Params.EventName, sizeof(ServerRemoteEvent_Params.EventName), &EventName, sizeof(EventName));

	this->ProcessEvent(uFnServerRemoteEvent, &ServerRemoteEvent_Params, nullptr);
};

// Function Engine.PlayerController.RE
// [0x00024202] (FUNC_Defined | FUNC_Exec | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FName                    EventName                      (CPF_OptionalParm | CPF_Parm)

void APlayerController::RE(const class FName& EventName)
{
	static UFunction* uFnRE = nullptr;

	if (!uFnRE)
	{
		uFnRE = UFunction::FindFunction("Function Engine.PlayerController.RE");
	}

	APlayerController_execRE_Params RE_Params;
	memset(&RE_Params, 0, sizeof(RE_Params));
	memcpy_s(&RE_Params.EventName, sizeof(RE_Params.EventName), &EventName, sizeof(EventName));

	this->ProcessEvent(uFnRE, &RE_Params, nullptr);
};

// Function Engine.PlayerController.RemoteEvent
// [0x00024202] (FUNC_Defined | FUNC_Exec | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FName                    EventName                      (CPF_OptionalParm | CPF_Parm)

void APlayerController::RemoteEvent(const class FName& EventName)
{
	static UFunction* uFnRemoteEvent = nullptr;

	if (!uFnRemoteEvent)
	{
		uFnRemoteEvent = UFunction::FindFunction("Function Engine.PlayerController.RemoteEvent");
	}

	APlayerController_execRemoteEvent_Params RemoteEvent_Params;
	memset(&RemoteEvent_Params, 0, sizeof(RemoteEvent_Params));
	memcpy_s(&RemoteEvent_Params.EventName, sizeof(RemoteEvent_Params.EventName), &EventName, sizeof(EventName));

	this->ProcessEvent(uFnRemoteEvent, &RemoteEvent_Params, nullptr);
};

// Function Engine.PlayerController.ListCE
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void APlayerController::ListCE()
{
	static UFunction* uFnListCE = nullptr;

	if (!uFnListCE)
	{
		uFnListCE = UFunction::FindFunction("Function Engine.PlayerController.ListCE");
	}

	APlayerController_execListCE_Params ListCE_Params;
	memset(&ListCE_Params, 0, sizeof(ListCE_Params));

	this->ProcessEvent(uFnListCE, &ListCE_Params, nullptr);
};

// Function Engine.PlayerController.ListConsoleEvents
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void APlayerController::ListConsoleEvents()
{
	static UFunction* uFnListConsoleEvents = nullptr;

	if (!uFnListConsoleEvents)
	{
		uFnListConsoleEvents = UFunction::FindFunction("Function Engine.PlayerController.ListConsoleEvents");
	}

	APlayerController_execListConsoleEvents_Params ListConsoleEvents_Params;
	memset(&ListConsoleEvents_Params, 0, sizeof(ListConsoleEvents_Params));

	this->ProcessEvent(uFnListConsoleEvents, &ListConsoleEvents_Params, nullptr);
};

// Function Engine.PlayerController.CE
// [0x00024202] (FUNC_Defined | FUNC_Exec | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FName                    EventName                      (CPF_OptionalParm | CPF_Parm)

void APlayerController::CE(const class FName& EventName)
{
	static UFunction* uFnCE = nullptr;

	if (!uFnCE)
	{
		uFnCE = UFunction::FindFunction("Function Engine.PlayerController.CE");
	}

	APlayerController_execCE_Params CE_Params;
	memset(&CE_Params, 0, sizeof(CE_Params));
	memcpy_s(&CE_Params.EventName, sizeof(CE_Params.EventName), &EventName, sizeof(EventName));

	this->ProcessEvent(uFnCE, &CE_Params, nullptr);
};

// Function Engine.PlayerController.CauseEvent
// [0x00024202] (FUNC_Defined | FUNC_Exec | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FName                    EventName                      (CPF_OptionalParm | CPF_Parm)

void APlayerController::CauseEvent(const class FName& EventName)
{
	static UFunction* uFnCauseEvent = nullptr;

	if (!uFnCauseEvent)
	{
		uFnCauseEvent = UFunction::FindFunction("Function Engine.PlayerController.CauseEvent");
	}

	APlayerController_execCauseEvent_Params CauseEvent_Params;
	memset(&CauseEvent_Params, 0, sizeof(CauseEvent_Params));
	memcpy_s(&CauseEvent_Params.EventName, sizeof(CauseEvent_Params.EventName), &EventName, sizeof(EventName));

	this->ProcessEvent(uFnCauseEvent, &CauseEvent_Params, nullptr);
};

// Function Engine.PlayerController.ServerCauseEvent
// [0xFFFF000000220042] (FUNC_Defined | FUNC_Net | FUNC_Public | FUNC_NetServer | FUNC_AllFlags)
// Parameter Info:
// class FName                    EventName                      (CPF_Parm)

void APlayerController::ServerCauseEvent(const class FName& EventName)
{
	static UFunction* uFnServerCauseEvent = nullptr;

	if (!uFnServerCauseEvent)
	{
		uFnServerCauseEvent = UFunction::FindFunction("Function Engine.PlayerController.ServerCauseEvent");
	}

	APlayerController_execServerCauseEvent_Params ServerCauseEvent_Params;
	memset(&ServerCauseEvent_Params, 0, sizeof(ServerCauseEvent_Params));
	memcpy_s(&ServerCauseEvent_Params.EventName, sizeof(ServerCauseEvent_Params.EventName), &EventName, sizeof(EventName));

	this->ProcessEvent(uFnServerCauseEvent, &ServerCauseEvent_Params, nullptr);
};

// Function Engine.PlayerController.OnToggleHUD
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_ToggleHUD*       inAction                       (CPF_Parm)

void APlayerController::OnToggleHUD(class USeqAct_ToggleHUD* inAction)
{
	static UFunction* uFnOnToggleHUD = nullptr;

	if (!uFnOnToggleHUD)
	{
		uFnOnToggleHUD = UFunction::FindFunction("Function Engine.PlayerController.OnToggleHUD");
	}

	APlayerController_execOnToggleHUD_Params OnToggleHUD_Params;
	memset(&OnToggleHUD_Params, 0, sizeof(OnToggleHUD_Params));
	OnToggleHUD_Params.inAction = inAction;

	this->ProcessEvent(uFnOnToggleHUD, &OnToggleHUD_Params, nullptr);
};

// Function Engine.PlayerController.OnSetCameraTarget
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_SetCameraTarget* inAction                       (CPF_Parm)

void APlayerController::OnSetCameraTarget(class USeqAct_SetCameraTarget* inAction)
{
	static UFunction* uFnOnSetCameraTarget = nullptr;

	if (!uFnOnSetCameraTarget)
	{
		uFnOnSetCameraTarget = UFunction::FindFunction("Function Engine.PlayerController.OnSetCameraTarget");
	}

	APlayerController_execOnSetCameraTarget_Params OnSetCameraTarget_Params;
	memset(&OnSetCameraTarget_Params, 0, sizeof(OnSetCameraTarget_Params));
	OnSetCameraTarget_Params.inAction = inAction;

	this->ProcessEvent(uFnOnSetCameraTarget, &OnSetCameraTarget_Params, nullptr);
};

// Function Engine.PlayerController.ClientClearKismetText
// [0xFFFF0000010201C3] (FUNC_Final | FUNC_Defined | FUNC_Net | FUNC_NetReliable | FUNC_Simulated | FUNC_Public | FUNC_NetClient | FUNC_AllFlags)
// Parameter Info:
// struct FVector2D               MessageOffset                  (CPF_Parm)

void APlayerController::ClientClearKismetText(const struct FVector2D& MessageOffset)
{
	static UFunction* uFnClientClearKismetText = nullptr;

	if (!uFnClientClearKismetText)
	{
		uFnClientClearKismetText = UFunction::FindFunction("Function Engine.PlayerController.ClientClearKismetText");
	}

	APlayerController_execClientClearKismetText_Params ClientClearKismetText_Params;
	memset(&ClientClearKismetText_Params, 0, sizeof(ClientClearKismetText_Params));
	memcpy_s(&ClientClearKismetText_Params.MessageOffset, sizeof(ClientClearKismetText_Params.MessageOffset), &MessageOffset, sizeof(MessageOffset));

	this->ProcessEvent(uFnClientClearKismetText, &ClientClearKismetText_Params, nullptr);
};

// Function Engine.PlayerController.ClientDrawKismetText
// [0xFFFF0000010201C3] (FUNC_Final | FUNC_Defined | FUNC_Net | FUNC_NetReliable | FUNC_Simulated | FUNC_Public | FUNC_NetClient | FUNC_AllFlags)
// Parameter Info:
// struct FKismetDrawTextInfo     DrawTextInfo                   (CPF_Parm | CPF_NeedCtorLink)
// float                          DisplayTime                    (CPF_Parm)

void APlayerController::ClientDrawKismetText(const struct FKismetDrawTextInfo& DrawTextInfo, float DisplayTime)
{
	static UFunction* uFnClientDrawKismetText = nullptr;

	if (!uFnClientDrawKismetText)
	{
		uFnClientDrawKismetText = UFunction::FindFunction("Function Engine.PlayerController.ClientDrawKismetText");
	}

	APlayerController_execClientDrawKismetText_Params ClientDrawKismetText_Params;
	memset(&ClientDrawKismetText_Params, 0, sizeof(ClientDrawKismetText_Params));
	memcpy_s(&ClientDrawKismetText_Params.DrawTextInfo, sizeof(ClientDrawKismetText_Params.DrawTextInfo), &DrawTextInfo, sizeof(DrawTextInfo));
	memcpy_s(&ClientDrawKismetText_Params.DisplayTime, sizeof(ClientDrawKismetText_Params.DisplayTime), &DisplayTime, sizeof(DisplayTime));

	this->ProcessEvent(uFnClientDrawKismetText, &ClientDrawKismetText_Params, nullptr);
};

// Function Engine.PlayerController.OnDrawText
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_DrawText*        inAction                       (CPF_Parm)

void APlayerController::OnDrawTextW(class USeqAct_DrawText* inAction)
{
	static UFunction* uFnOnDrawTextW = nullptr;

	if (!uFnOnDrawTextW)
	{
		uFnOnDrawTextW = UFunction::FindFunction("Function Engine.PlayerController.OnDrawText");
	}

	APlayerController_execOnDrawTextW_Params OnDrawTextW_Params;
	memset(&OnDrawTextW_Params, 0, sizeof(OnDrawTextW_Params));
	OnDrawTextW_Params.inAction = inAction;

	this->ProcessEvent(uFnOnDrawTextW, &OnDrawTextW_Params, nullptr);
};

// Function Engine.PlayerController.DisplayDebug
// [0x00420102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// class AHUD*                    HUD                            (CPF_Parm)
// float                          out_YL                         (CPF_Parm | CPF_OutParm)
// float                          out_YPos                       (CPF_Parm | CPF_OutParm)

void APlayerController::DisplayDebug(class AHUD* HUD, float& out_YL, float& out_YPos)
{
	static UFunction* uFnDisplayDebug = nullptr;

	if (!uFnDisplayDebug)
	{
		uFnDisplayDebug = UFunction::FindFunction("Function Engine.PlayerController.DisplayDebug");
	}

	APlayerController_execDisplayDebug_Params DisplayDebug_Params;
	memset(&DisplayDebug_Params, 0, sizeof(DisplayDebug_Params));
	DisplayDebug_Params.HUD = HUD;
	memcpy_s(&DisplayDebug_Params.out_YL, sizeof(DisplayDebug_Params.out_YL), &out_YL, sizeof(out_YL));
	memcpy_s(&DisplayDebug_Params.out_YPos, sizeof(DisplayDebug_Params.out_YPos), &out_YPos, sizeof(out_YPos));

	this->ProcessEvent(uFnDisplayDebug, &DisplayDebug_Params, nullptr);

	memcpy_s(&out_YL, sizeof(out_YL), &DisplayDebug_Params.out_YL, sizeof(DisplayDebug_Params.out_YL));
	memcpy_s(&out_YPos, sizeof(out_YPos), &DisplayDebug_Params.out_YPos, sizeof(DisplayDebug_Params.out_YPos));
};

// Function Engine.PlayerController.ClientIgnoreLookInput
// [0xFFFF0000010201C2] (FUNC_Defined | FUNC_Net | FUNC_NetReliable | FUNC_Simulated | FUNC_Public | FUNC_NetClient | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bIgnore                        (CPF_Parm)

void APlayerController::ClientIgnoreLookInput(bool bIgnore)
{
	static UFunction* uFnClientIgnoreLookInput = nullptr;

	if (!uFnClientIgnoreLookInput)
	{
		uFnClientIgnoreLookInput = UFunction::FindFunction("Function Engine.PlayerController.ClientIgnoreLookInput");
	}

	APlayerController_execClientIgnoreLookInput_Params ClientIgnoreLookInput_Params;
	memset(&ClientIgnoreLookInput_Params, 0, sizeof(ClientIgnoreLookInput_Params));
	ClientIgnoreLookInput_Params.bIgnore = bIgnore;

	this->ProcessEvent(uFnClientIgnoreLookInput, &ClientIgnoreLookInput_Params, nullptr);
};

// Function Engine.PlayerController.ClientIgnoreMoveInput
// [0xFFFF0000010201C2] (FUNC_Defined | FUNC_Net | FUNC_NetReliable | FUNC_Simulated | FUNC_Public | FUNC_NetClient | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bIgnore                        (CPF_Parm)

void APlayerController::ClientIgnoreMoveInput(bool bIgnore)
{
	static UFunction* uFnClientIgnoreMoveInput = nullptr;

	if (!uFnClientIgnoreMoveInput)
	{
		uFnClientIgnoreMoveInput = UFunction::FindFunction("Function Engine.PlayerController.ClientIgnoreMoveInput");
	}

	APlayerController_execClientIgnoreMoveInput_Params ClientIgnoreMoveInput_Params;
	memset(&ClientIgnoreMoveInput_Params, 0, sizeof(ClientIgnoreMoveInput_Params));
	ClientIgnoreMoveInput_Params.bIgnore = bIgnore;

	this->ProcessEvent(uFnClientIgnoreMoveInput, &ClientIgnoreMoveInput_Params, nullptr);
};

// Function Engine.PlayerController.OnToggleInput
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_ToggleInput*     inAction                       (CPF_Parm)

void APlayerController::OnToggleInput(class USeqAct_ToggleInput* inAction)
{
	static UFunction* uFnOnToggleInput = nullptr;

	if (!uFnOnToggleInput)
	{
		uFnOnToggleInput = UFunction::FindFunction("Function Engine.PlayerController.OnToggleInput");
	}

	APlayerController_execOnToggleInput_Params OnToggleInput_Params;
	memset(&OnToggleInput_Params, 0, sizeof(OnToggleInput_Params));
	OnToggleInput_Params.inAction = inAction;

	this->ProcessEvent(uFnOnToggleInput, &OnToggleInput_Params, nullptr);
};

// Function Engine.PlayerController.DrawHUD
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AHUD*                    H                              (CPF_Parm)

void APlayerController::DrawHUD(class AHUD* H)
{
	static UFunction* uFnDrawHUD = nullptr;

	if (!uFnDrawHUD)
	{
		uFnDrawHUD = UFunction::FindFunction("Function Engine.PlayerController.DrawHUD");
	}

	APlayerController_execDrawHUD_Params DrawHUD_Params;
	memset(&DrawHUD_Params, 0, sizeof(DrawHUD_Params));
	DrawHUD_Params.H = H;

	this->ProcessEvent(uFnDrawHUD, &DrawHUD_Params, nullptr);
};

// Function Engine.PlayerController.CanRestartPlayer
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool APlayerController::CanRestartPlayer()
{
	static UFunction* uFnCanRestartPlayer = nullptr;

	if (!uFnCanRestartPlayer)
	{
		uFnCanRestartPlayer = UFunction::FindFunction("Function Engine.PlayerController.CanRestartPlayer");
	}

	APlayerController_execCanRestartPlayer_Params CanRestartPlayer_Params;
	memset(&CanRestartPlayer_Params, 0, sizeof(CanRestartPlayer_Params));

	this->ProcessEvent(uFnCanRestartPlayer, &CanRestartPlayer_Params, nullptr);

	return CanRestartPlayer_Params.ReturnValue;
};

// Function Engine.PlayerController.ServerViewSelf
// [0xFFFF000000224042] (FUNC_Defined | FUNC_Net | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_NetServer | FUNC_AllFlags)
// Parameter Info:
// struct FViewTargetTransitionParams TransitionParams               (CPF_OptionalParm | CPF_Parm)

void APlayerController::ServerViewSelf(const struct FViewTargetTransitionParams& TransitionParams)
{
	static UFunction* uFnServerViewSelf = nullptr;

	if (!uFnServerViewSelf)
	{
		uFnServerViewSelf = UFunction::FindFunction("Function Engine.PlayerController.ServerViewSelf");
	}

	APlayerController_execServerViewSelf_Params ServerViewSelf_Params;
	memset(&ServerViewSelf_Params, 0, sizeof(ServerViewSelf_Params));
	memcpy_s(&ServerViewSelf_Params.TransitionParams, sizeof(ServerViewSelf_Params.TransitionParams), &TransitionParams, sizeof(TransitionParams));

	this->ProcessEvent(uFnServerViewSelf, &ServerViewSelf_Params, nullptr);
};

// Function Engine.PlayerController.ServerSetSpectatorLocation
// [0xFFFF000000220042] (FUNC_Defined | FUNC_Net | FUNC_Public | FUNC_NetServer | FUNC_AllFlags)
// Parameter Info:
// struct FVector                 NewLoc                         (CPF_Parm)

void APlayerController::ServerSetSpectatorLocation(const struct FVector& NewLoc)
{
	static UFunction* uFnServerSetSpectatorLocation = nullptr;

	if (!uFnServerSetSpectatorLocation)
	{
		uFnServerSetSpectatorLocation = UFunction::FindFunction("Function Engine.PlayerController.ServerSetSpectatorLocation");
	}

	APlayerController_execServerSetSpectatorLocation_Params ServerSetSpectatorLocation_Params;
	memset(&ServerSetSpectatorLocation_Params, 0, sizeof(ServerSetSpectatorLocation_Params));
	memcpy_s(&ServerSetSpectatorLocation_Params.NewLoc, sizeof(ServerSetSpectatorLocation_Params.NewLoc), &NewLoc, sizeof(NewLoc));

	this->ProcessEvent(uFnServerSetSpectatorLocation, &ServerSetSpectatorLocation_Params, nullptr);
};

// Function Engine.PlayerController.IsSpectating
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool APlayerController::IsSpectating()
{
	static UFunction* uFnIsSpectating = nullptr;

	if (!uFnIsSpectating)
	{
		uFnIsSpectating = UFunction::FindFunction("Function Engine.PlayerController.IsSpectating");
	}

	APlayerController_execIsSpectating_Params IsSpectating_Params;
	memset(&IsSpectating_Params, 0, sizeof(IsSpectating_Params));

	this->ProcessEvent(uFnIsSpectating, &IsSpectating_Params, nullptr);

	return IsSpectating_Params.ReturnValue;
};

// Function Engine.PlayerController.CalcPlayerSwimAccelRate
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

float APlayerController::CalcPlayerSwimAccelRate()
{
	static UFunction* uFnCalcPlayerSwimAccelRate = nullptr;

	if (!uFnCalcPlayerSwimAccelRate)
	{
		uFnCalcPlayerSwimAccelRate = UFunction::FindFunction("Function Engine.PlayerController.CalcPlayerSwimAccelRate");
	}

	APlayerController_execCalcPlayerSwimAccelRate_Params CalcPlayerSwimAccelRate_Params;
	memset(&CalcPlayerSwimAccelRate_Params, 0, sizeof(CalcPlayerSwimAccelRate_Params));

	this->ProcessEvent(uFnCalcPlayerSwimAccelRate, &CalcPlayerSwimAccelRate_Params, nullptr);

	return CalcPlayerSwimAccelRate_Params.ReturnValue;
};

// Function Engine.PlayerController.PlayerMove_Walking
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[24307])
// Parameter Info:
// float                          _fDeltaTime                    (CPF_Parm)

void APlayerController::PlayerMove_Walking(float _fDeltaTime)
{
	static UFunction* uFnPlayerMove_Walking = nullptr;

	if (!uFnPlayerMove_Walking)
	{
		uFnPlayerMove_Walking = UFunction::FindFunction("Function Engine.PlayerController.PlayerMove_Walking");
	}

	APlayerController_execPlayerMove_Walking_Params PlayerMove_Walking_Params;
	memset(&PlayerMove_Walking_Params, 0, sizeof(PlayerMove_Walking_Params));
	memcpy_s(&PlayerMove_Walking_Params._fDeltaTime, sizeof(PlayerMove_Walking_Params._fDeltaTime), &_fDeltaTime, sizeof(_fDeltaTime));

	uFnPlayerMove_Walking->iNative = 0;
	uFnPlayerMove_Walking->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnPlayerMove_Walking, &PlayerMove_Walking_Params, nullptr);
	uFnPlayerMove_Walking->FunctionFlags |= 0x400;
	uFnPlayerMove_Walking->iNative = 24307;
};

// Function Engine.PlayerController.LimitViewRotation
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[21706])
// Parameter Info:
// struct FRotator                ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FRotator                ViewRotation                   (CPF_Parm)
// int32_t                        ViewPitchMin                   (CPF_Parm)
// int32_t                        ViewPitchMax                   (CPF_Parm)

struct FRotator APlayerController::LimitViewRotation(const struct FRotator& ViewRotation, int32_t ViewPitchMin, int32_t ViewPitchMax)
{
	static UFunction* uFnLimitViewRotation = nullptr;

	if (!uFnLimitViewRotation)
	{
		uFnLimitViewRotation = UFunction::FindFunction("Function Engine.PlayerController.LimitViewRotation");
	}

	APlayerController_execLimitViewRotation_Params LimitViewRotation_Params;
	memset(&LimitViewRotation_Params, 0, sizeof(LimitViewRotation_Params));
	memcpy_s(&LimitViewRotation_Params.ViewRotation, sizeof(LimitViewRotation_Params.ViewRotation), &ViewRotation, sizeof(ViewRotation));
	memcpy_s(&LimitViewRotation_Params.ViewPitchMin, sizeof(LimitViewRotation_Params.ViewPitchMin), &ViewPitchMin, sizeof(ViewPitchMin));
	memcpy_s(&LimitViewRotation_Params.ViewPitchMax, sizeof(LimitViewRotation_Params.ViewPitchMax), &ViewPitchMax, sizeof(ViewPitchMax));

	uFnLimitViewRotation->iNative = 0;
	uFnLimitViewRotation->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnLimitViewRotation, &LimitViewRotation_Params, nullptr);
	uFnLimitViewRotation->FunctionFlags |= 0x400;
	uFnLimitViewRotation->iNative = 21706;

	return LimitViewRotation_Params.ReturnValue;
};

// Function Engine.PlayerController.ProcessViewRotation
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[13700])
// Parameter Info:
// float                          DeltaTime                      (CPF_Parm)
// struct FRotator                DeltaRot                       (CPF_Parm)
// struct FRotator                out_ViewRotation               (CPF_Parm | CPF_OutParm)

void APlayerController::ProcessViewRotation(float DeltaTime, const struct FRotator& DeltaRot, struct FRotator& out_ViewRotation)
{
	static UFunction* uFnProcessViewRotation = nullptr;

	if (!uFnProcessViewRotation)
	{
		uFnProcessViewRotation = UFunction::FindFunction("Function Engine.PlayerController.ProcessViewRotation");
	}

	APlayerController_execProcessViewRotation_Params ProcessViewRotation_Params;
	memset(&ProcessViewRotation_Params, 0, sizeof(ProcessViewRotation_Params));
	memcpy_s(&ProcessViewRotation_Params.DeltaTime, sizeof(ProcessViewRotation_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));
	memcpy_s(&ProcessViewRotation_Params.DeltaRot, sizeof(ProcessViewRotation_Params.DeltaRot), &DeltaRot, sizeof(DeltaRot));
	memcpy_s(&ProcessViewRotation_Params.out_ViewRotation, sizeof(ProcessViewRotation_Params.out_ViewRotation), &out_ViewRotation, sizeof(out_ViewRotation));

	uFnProcessViewRotation->iNative = 0;
	uFnProcessViewRotation->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnProcessViewRotation, &ProcessViewRotation_Params, nullptr);
	uFnProcessViewRotation->FunctionFlags |= 0x400;
	uFnProcessViewRotation->iNative = 13700;

	memcpy_s(&out_ViewRotation, sizeof(out_ViewRotation), &ProcessViewRotation_Params.out_ViewRotation, sizeof(ProcessViewRotation_Params.out_ViewRotation));
};

// Function Engine.PlayerController.UpdateRotation
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[26998])
// Parameter Info:
// float                          DeltaTime                      (CPF_Parm)

void APlayerController::UpdateRotation(float DeltaTime)
{
	static UFunction* uFnUpdateRotation = nullptr;

	if (!uFnUpdateRotation)
	{
		uFnUpdateRotation = UFunction::FindFunction("Function Engine.PlayerController.UpdateRotation");
	}

	APlayerController_execUpdateRotation_Params UpdateRotation_Params;
	memset(&UpdateRotation_Params, 0, sizeof(UpdateRotation_Params));
	memcpy_s(&UpdateRotation_Params.DeltaTime, sizeof(UpdateRotation_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));

	uFnUpdateRotation->iNative = 0;
	uFnUpdateRotation->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnUpdateRotation, &UpdateRotation_Params, nullptr);
	uFnUpdateRotation->FunctionFlags |= 0x400;
	uFnUpdateRotation->iNative = 26998;
};

// Function Engine.PlayerController.GetPlayerViewPoint
// [0x00420500] (FUNC_Simulated | FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20687])
// Parameter Info:
// struct FVector                 out_Location                   (CPF_Parm | CPF_OutParm)
// struct FRotator                out_Rotation                   (CPF_Parm | CPF_OutParm)

void APlayerController::GetPlayerViewPoint(struct FVector& out_Location, struct FRotator& out_Rotation)
{
	static UFunction* uFnGetPlayerViewPoint = nullptr;

	if (!uFnGetPlayerViewPoint)
	{
		uFnGetPlayerViewPoint = UFunction::FindFunction("Function Engine.PlayerController.GetPlayerViewPoint");
	}

	APlayerController_execGetPlayerViewPoint_Params GetPlayerViewPoint_Params;
	memset(&GetPlayerViewPoint_Params, 0, sizeof(GetPlayerViewPoint_Params));
	memcpy_s(&GetPlayerViewPoint_Params.out_Location, sizeof(GetPlayerViewPoint_Params.out_Location), &out_Location, sizeof(out_Location));
	memcpy_s(&GetPlayerViewPoint_Params.out_Rotation, sizeof(GetPlayerViewPoint_Params.out_Rotation), &out_Rotation, sizeof(out_Rotation));

	uFnGetPlayerViewPoint->iNative = 0;
	uFnGetPlayerViewPoint->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetPlayerViewPoint, &GetPlayerViewPoint_Params, nullptr);
	uFnGetPlayerViewPoint->FunctionFlags |= 0x400;
	uFnGetPlayerViewPoint->iNative = 20687;

	memcpy_s(&out_Location, sizeof(out_Location), &GetPlayerViewPoint_Params.out_Location, sizeof(GetPlayerViewPoint_Params.out_Location));
	memcpy_s(&out_Rotation, sizeof(out_Rotation), &GetPlayerViewPoint_Params.out_Rotation, sizeof(GetPlayerViewPoint_Params.out_Rotation));
};

// Function Engine.PlayerController.SpawnPlayerCamera
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void APlayerController::eventSpawnPlayerCamera()
{
	static UFunction* uFnSpawnPlayerCamera = nullptr;

	if (!uFnSpawnPlayerCamera)
	{
		uFnSpawnPlayerCamera = UFunction::FindFunction("Function Engine.PlayerController.SpawnPlayerCamera");
	}

	APlayerController_eventSpawnPlayerCamera_Params SpawnPlayerCamera_Params;
	memset(&SpawnPlayerCamera_Params, 0, sizeof(SpawnPlayerCamera_Params));

	this->ProcessEvent(uFnSpawnPlayerCamera, &SpawnPlayerCamera_Params, nullptr);
};

// Function Engine.PlayerController.ServerVerifyViewTarget
// [0xFFFF0000002200C2] (FUNC_Defined | FUNC_Net | FUNC_NetReliable | FUNC_Public | FUNC_NetServer | FUNC_AllFlags)
// Parameter Info:

void APlayerController::ServerVerifyViewTarget()
{
	static UFunction* uFnServerVerifyViewTarget = nullptr;

	if (!uFnServerVerifyViewTarget)
	{
		uFnServerVerifyViewTarget = UFunction::FindFunction("Function Engine.PlayerController.ServerVerifyViewTarget");
	}

	APlayerController_execServerVerifyViewTarget_Params ServerVerifyViewTarget_Params;
	memset(&ServerVerifyViewTarget_Params, 0, sizeof(ServerVerifyViewTarget_Params));

	this->ProcessEvent(uFnServerVerifyViewTarget, &ServerVerifyViewTarget_Params, nullptr);
};

// Function Engine.PlayerController.GetViewTarget
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20819])
// Parameter Info:
// class AActor*                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class AActor* APlayerController::GetViewTarget()
{
	static UFunction* uFnGetViewTarget = nullptr;

	if (!uFnGetViewTarget)
	{
		uFnGetViewTarget = UFunction::FindFunction("Function Engine.PlayerController.GetViewTarget");
	}

	APlayerController_execGetViewTarget_Params GetViewTarget_Params;
	memset(&GetViewTarget_Params, 0, sizeof(GetViewTarget_Params));

	uFnGetViewTarget->iNative = 0;
	uFnGetViewTarget->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetViewTarget, &GetViewTarget_Params, nullptr);
	uFnGetViewTarget->FunctionFlags |= 0x400;
	uFnGetViewTarget->iNative = 20819;

	return GetViewTarget_Params.ReturnValue;
};

// Function Engine.PlayerController.ClientSetViewTarget
// [0xFFFF0000010249C2] (FUNC_Defined | FUNC_Net | FUNC_NetReliable | FUNC_Simulated | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_NetClient | FUNC_AllFlags)
// Parameter Info:
// class AActor*                  A                              (CPF_Parm)
// struct FViewTargetTransitionParams TransitionParams               (CPF_OptionalParm | CPF_Parm)

void APlayerController::eventClientSetViewTarget(class AActor* A, const struct FViewTargetTransitionParams& TransitionParams)
{
	static UFunction* uFnClientSetViewTarget = nullptr;

	if (!uFnClientSetViewTarget)
	{
		uFnClientSetViewTarget = UFunction::FindFunction("Function Engine.PlayerController.ClientSetViewTarget");
	}

	APlayerController_eventClientSetViewTarget_Params ClientSetViewTarget_Params;
	memset(&ClientSetViewTarget_Params, 0, sizeof(ClientSetViewTarget_Params));
	ClientSetViewTarget_Params.A = A;
	memcpy_s(&ClientSetViewTarget_Params.TransitionParams, sizeof(ClientSetViewTarget_Params.TransitionParams), &TransitionParams, sizeof(TransitionParams));

	this->ProcessEvent(uFnClientSetViewTarget, &ClientSetViewTarget_Params, nullptr);
};

// Function Engine.PlayerController.SetViewTarget
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[25840])
// Parameter Info:
// class AActor*                  NewViewTarget                  (CPF_Parm)
// struct FViewTargetTransitionParams TransitionParams               (CPF_OptionalParm | CPF_Parm)

void APlayerController::SetViewTarget(class AActor* NewViewTarget, const struct FViewTargetTransitionParams& TransitionParams)
{
	static UFunction* uFnSetViewTarget = nullptr;

	if (!uFnSetViewTarget)
	{
		uFnSetViewTarget = UFunction::FindFunction("Function Engine.PlayerController.SetViewTarget");
	}

	APlayerController_execSetViewTarget_Params SetViewTarget_Params;
	memset(&SetViewTarget_Params, 0, sizeof(SetViewTarget_Params));
	SetViewTarget_Params.NewViewTarget = NewViewTarget;
	memcpy_s(&SetViewTarget_Params.TransitionParams, sizeof(SetViewTarget_Params.TransitionParams), &TransitionParams, sizeof(TransitionParams));

	uFnSetViewTarget->iNative = 0;
	uFnSetViewTarget->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetViewTarget, &SetViewTarget_Params, nullptr);
	uFnSetViewTarget->FunctionFlags |= 0x400;
	uFnSetViewTarget->iNative = 25840;
};

// Function Engine.PlayerController.IsLocalPlayerController
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[21401])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool APlayerController::IsLocalPlayerController()
{
	static UFunction* uFnIsLocalPlayerController = nullptr;

	if (!uFnIsLocalPlayerController)
	{
		uFnIsLocalPlayerController = UFunction::FindFunction("Function Engine.PlayerController.IsLocalPlayerController");
	}

	APlayerController_execIsLocalPlayerController_Params IsLocalPlayerController_Params;
	memset(&IsLocalPlayerController_Params, 0, sizeof(IsLocalPlayerController_Params));

	uFnIsLocalPlayerController->iNative = 0;
	uFnIsLocalPlayerController->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnIsLocalPlayerController, &IsLocalPlayerController_Params, nullptr);
	uFnIsLocalPlayerController->FunctionFlags |= 0x400;
	uFnIsLocalPlayerController->iNative = 21401;

	return IsLocalPlayerController_Params.ReturnValue;
};

// Function Engine.PlayerController.GetFOVAngle
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20586])
// Parameter Info:
// float                          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

float APlayerController::GetFOVAngle()
{
	static UFunction* uFnGetFOVAngle = nullptr;

	if (!uFnGetFOVAngle)
	{
		uFnGetFOVAngle = UFunction::FindFunction("Function Engine.PlayerController.GetFOVAngle");
	}

	APlayerController_execGetFOVAngle_Params GetFOVAngle_Params;
	memset(&GetFOVAngle_Params, 0, sizeof(GetFOVAngle_Params));

	uFnGetFOVAngle->iNative = 0;
	uFnGetFOVAngle->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetFOVAngle, &GetFOVAngle_Params, nullptr);
	uFnGetFOVAngle->FunctionFlags |= 0x400;
	uFnGetFOVAngle->iNative = 20586;

	return GetFOVAngle_Params.ReturnValue;
};

// Function Engine.PlayerController.NotifyLanded
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FVector                 HitNormal                      (CPF_Parm)
// class AActor*                  FloorActor                     (CPF_Parm)

bool APlayerController::eventNotifyLanded(const struct FVector& HitNormal, class AActor* FloorActor)
{
	static UFunction* uFnNotifyLanded = nullptr;

	if (!uFnNotifyLanded)
	{
		uFnNotifyLanded = UFunction::FindFunction("Function Engine.PlayerController.NotifyLanded");
	}

	APlayerController_eventNotifyLanded_Params NotifyLanded_Params;
	memset(&NotifyLanded_Params, 0, sizeof(NotifyLanded_Params));
	memcpy_s(&NotifyLanded_Params.HitNormal, sizeof(NotifyLanded_Params.HitNormal), &HitNormal, sizeof(HitNormal));
	NotifyLanded_Params.FloorActor = FloorActor;

	this->ProcessEvent(uFnNotifyLanded, &NotifyLanded_Params, nullptr);

	return NotifyLanded_Params.ReturnValue;
};

// Function Engine.PlayerController.CameraLookAtFinished
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_CameraLookAt*    Action                         (CPF_Parm)

void APlayerController::eventCameraLookAtFinished(class USeqAct_CameraLookAt* Action)
{
	static UFunction* uFnCameraLookAtFinished = nullptr;

	if (!uFnCameraLookAtFinished)
	{
		uFnCameraLookAtFinished = UFunction::FindFunction("Function Engine.PlayerController.CameraLookAtFinished");
	}

	APlayerController_eventCameraLookAtFinished_Params CameraLookAtFinished_Params;
	memset(&CameraLookAtFinished_Params, 0, sizeof(CameraLookAtFinished_Params));
	CameraLookAtFinished_Params.Action = Action;

	this->ProcessEvent(uFnCameraLookAtFinished, &CameraLookAtFinished_Params, nullptr);
};

// Function Engine.PlayerController.PlayerMove
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          DeltaTime                      (CPF_Parm)

void APlayerController::eventPlayerMove(float DeltaTime)
{
	static UFunction* uFnPlayerMove = nullptr;

	if (!uFnPlayerMove)
	{
		uFnPlayerMove = UFunction::FindFunction("Function Engine.PlayerController.PlayerMove");
	}

	APlayerController_eventPlayerMove_Params PlayerMove_Params;
	memset(&PlayerMove_Params, 0, sizeof(PlayerMove_Params));
	memcpy_s(&PlayerMove_Params.DeltaTime, sizeof(PlayerMove_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));

	this->ProcessEvent(uFnPlayerMove, &PlayerMove_Params, nullptr);
};

// Function Engine.PlayerController.ClientGameEnded
// [0xFFFF0000010201C2] (FUNC_Defined | FUNC_Net | FUNC_NetReliable | FUNC_Simulated | FUNC_Public | FUNC_NetClient | FUNC_AllFlags)
// Parameter Info:
// class AActor*                  EndGameFocus                   (CPF_Parm)
// uint32_t                       bIsWinner                      (CPF_Parm)

void APlayerController::ClientGameEnded(class AActor* EndGameFocus, bool bIsWinner)
{
	static UFunction* uFnClientGameEnded = nullptr;

	if (!uFnClientGameEnded)
	{
		uFnClientGameEnded = UFunction::FindFunction("Function Engine.PlayerController.ClientGameEnded");
	}

	APlayerController_execClientGameEnded_Params ClientGameEnded_Params;
	memset(&ClientGameEnded_Params, 0, sizeof(ClientGameEnded_Params));
	ClientGameEnded_Params.EndGameFocus = EndGameFocus;
	ClientGameEnded_Params.bIsWinner = bIsWinner;

	this->ProcessEvent(uFnClientGameEnded, &ClientGameEnded_Params, nullptr);
};

// Function Engine.PlayerController.GameHasEnded
// [0x00024002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AActor*                  EndGameFocus                   (CPF_OptionalParm | CPF_Parm)
// uint32_t                       bIsWinner                      (CPF_OptionalParm | CPF_Parm)

void APlayerController::GameHasEnded(class AActor* EndGameFocus, bool bIsWinner)
{
	static UFunction* uFnGameHasEnded = nullptr;

	if (!uFnGameHasEnded)
	{
		uFnGameHasEnded = UFunction::FindFunction("Function Engine.PlayerController.GameHasEnded");
	}

	APlayerController_execGameHasEnded_Params GameHasEnded_Params;
	memset(&GameHasEnded_Params, 0, sizeof(GameHasEnded_Params));
	GameHasEnded_Params.EndGameFocus = EndGameFocus;
	GameHasEnded_Params.bIsWinner = bIsWinner;

	this->ProcessEvent(uFnGameHasEnded, &GameHasEnded_Params, nullptr);
};

// Function Engine.PlayerController.ClientRestart
// [0xFFFF0000010201C2] (FUNC_Defined | FUNC_Net | FUNC_NetReliable | FUNC_Simulated | FUNC_Public | FUNC_NetClient | FUNC_AllFlags)
// Parameter Info:
// class APawn*                   NewPawn                        (CPF_Parm)

void APlayerController::ClientRestart(class APawn* NewPawn)
{
	static UFunction* uFnClientRestart = nullptr;

	if (!uFnClientRestart)
	{
		uFnClientRestart = UFunction::FindFunction("Function Engine.PlayerController.ClientRestart");
	}

	APlayerController_execClientRestart_Params ClientRestart_Params;
	memset(&ClientRestart_Params, 0, sizeof(ClientRestart_Params));
	ClientRestart_Params.NewPawn = NewPawn;

	this->ProcessEvent(uFnClientRestart, &ClientRestart_Params, nullptr);
};

// Function Engine.PlayerController.EnterStartState
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void APlayerController::EnterStartState()
{
	static UFunction* uFnEnterStartState = nullptr;

	if (!uFnEnterStartState)
	{
		uFnEnterStartState = UFunction::FindFunction("Function Engine.PlayerController.EnterStartState");
	}

	APlayerController_execEnterStartState_Params EnterStartState_Params;
	memset(&EnterStartState_Params, 0, sizeof(EnterStartState_Params));

	this->ProcessEvent(uFnEnterStartState, &EnterStartState_Params, nullptr);
};

// Function Engine.PlayerController.HasClientLoadedCurrentWorld
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20903])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool APlayerController::HasClientLoadedCurrentWorld()
{
	static UFunction* uFnHasClientLoadedCurrentWorld = nullptr;

	if (!uFnHasClientLoadedCurrentWorld)
	{
		uFnHasClientLoadedCurrentWorld = UFunction::FindFunction("Function Engine.PlayerController.HasClientLoadedCurrentWorld");
	}

	APlayerController_execHasClientLoadedCurrentWorld_Params HasClientLoadedCurrentWorld_Params;
	memset(&HasClientLoadedCurrentWorld_Params, 0, sizeof(HasClientLoadedCurrentWorld_Params));

	uFnHasClientLoadedCurrentWorld->iNative = 0;
	uFnHasClientLoadedCurrentWorld->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnHasClientLoadedCurrentWorld, &HasClientLoadedCurrentWorld_Params, nullptr);
	uFnHasClientLoadedCurrentWorld->FunctionFlags |= 0x400;
	uFnHasClientLoadedCurrentWorld->iNative = 20903;

	return HasClientLoadedCurrentWorld_Params.ReturnValue;
};

// Function Engine.PlayerController.NotifyLoadedWorld
// [0x00820802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// class FName                    WorldPackageName               (CPF_Parm)
// uint32_t                       bFinalDest                     (CPF_Parm)

void APlayerController::eventNotifyLoadedWorld(const class FName& WorldPackageName, bool bFinalDest)
{
	static UFunction* uFnNotifyLoadedWorld = nullptr;

	if (!uFnNotifyLoadedWorld)
	{
		uFnNotifyLoadedWorld = UFunction::FindFunction("Function Engine.PlayerController.NotifyLoadedWorld");
	}

	APlayerController_eventNotifyLoadedWorld_Params NotifyLoadedWorld_Params;
	memset(&NotifyLoadedWorld_Params, 0, sizeof(NotifyLoadedWorld_Params));
	memcpy_s(&NotifyLoadedWorld_Params.WorldPackageName, sizeof(NotifyLoadedWorld_Params.WorldPackageName), &WorldPackageName, sizeof(WorldPackageName));
	NotifyLoadedWorld_Params.bFinalDest = bFinalDest;

	this->ProcessEvent(uFnNotifyLoadedWorld, &NotifyLoadedWorld_Params, nullptr);
};

// Function Engine.PlayerController.Restart
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void APlayerController::eventRestart()
{
	static UFunction* uFnRestart = nullptr;

	if (!uFnRestart)
	{
		uFnRestart = UFunction::FindFunction("Function Engine.PlayerController.Restart");
	}

	APlayerController_eventRestart_Params Restart_Params;
	memset(&Restart_Params, 0, sizeof(Restart_Params));

	this->ProcessEvent(uFnRestart, &Restart_Params, nullptr);
};

// Function Engine.PlayerController.ClientSetProgressMessage
// [0xFFFF0000010249C2] (FUNC_Defined | FUNC_Net | FUNC_NetReliable | FUNC_Simulated | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_NetClient | FUNC_AllFlags)
// Parameter Info:
// EProgressMessageType           MessageType                    (CPF_Parm)
// class FString                  Message                        (CPF_Parm | CPF_NeedCtorLink)
// class FString                  Title                          (CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink)
// uint32_t                       bIgnoreFutureNetworkMessages   (CPF_OptionalParm | CPF_Parm)

void APlayerController::eventClientSetProgressMessage(EProgressMessageType MessageType, const class FString& Message, const class FString& Title, bool bIgnoreFutureNetworkMessages)
{
	static UFunction* uFnClientSetProgressMessage = nullptr;

	if (!uFnClientSetProgressMessage)
	{
		uFnClientSetProgressMessage = UFunction::FindFunction("Function Engine.PlayerController.ClientSetProgressMessage");
	}

	APlayerController_eventClientSetProgressMessage_Params ClientSetProgressMessage_Params;
	memset(&ClientSetProgressMessage_Params, 0, sizeof(ClientSetProgressMessage_Params));
	memcpy_s(&ClientSetProgressMessage_Params.MessageType, sizeof(ClientSetProgressMessage_Params.MessageType), &MessageType, sizeof(MessageType));
	memcpy_s(&ClientSetProgressMessage_Params.Message, sizeof(ClientSetProgressMessage_Params.Message), &Message, sizeof(Message));
	memcpy_s(&ClientSetProgressMessage_Params.Title, sizeof(ClientSetProgressMessage_Params.Title), &Title, sizeof(Title));
	ClientSetProgressMessage_Params.bIgnoreFutureNetworkMessages = bIgnoreFutureNetworkMessages;

	this->ProcessEvent(uFnClientSetProgressMessage, &ClientSetProgressMessage_Params, nullptr);
};

// Function Engine.PlayerController.SwitchLevel
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  URL                            (CPF_Parm | CPF_NeedCtorLink)

void APlayerController::SwitchLevel(const class FString& URL)
{
	static UFunction* uFnSwitchLevel = nullptr;

	if (!uFnSwitchLevel)
	{
		uFnSwitchLevel = UFunction::FindFunction("Function Engine.PlayerController.SwitchLevel");
	}

	APlayerController_execSwitchLevel_Params SwitchLevel_Params;
	memset(&SwitchLevel_Params, 0, sizeof(SwitchLevel_Params));
	memcpy_s(&SwitchLevel_Params.URL, sizeof(SwitchLevel_Params.URL), &URL, sizeof(URL));

	this->ProcessEvent(uFnSwitchLevel, &SwitchLevel_Params, nullptr);
};

// Function Engine.PlayerController.ServerChangeTeam
// [0xFFFF0000002200C2] (FUNC_Defined | FUNC_Net | FUNC_NetReliable | FUNC_Public | FUNC_NetServer | FUNC_AllFlags)
// Parameter Info:
// int32_t                        N                              (CPF_Parm)

void APlayerController::ServerChangeTeam(int32_t N)
{
	static UFunction* uFnServerChangeTeam = nullptr;

	if (!uFnServerChangeTeam)
	{
		uFnServerChangeTeam = UFunction::FindFunction("Function Engine.PlayerController.ServerChangeTeam");
	}

	APlayerController_execServerChangeTeam_Params ServerChangeTeam_Params;
	memset(&ServerChangeTeam_Params, 0, sizeof(ServerChangeTeam_Params));
	memcpy_s(&ServerChangeTeam_Params.N, sizeof(ServerChangeTeam_Params.N), &N, sizeof(N));

	this->ProcessEvent(uFnServerChangeTeam, &ServerChangeTeam_Params, nullptr);
};

// Function Engine.PlayerController.ChangeTeam
// [0x00024202] (FUNC_Defined | FUNC_Exec | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  TeamName                       (CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink)

void APlayerController::ChangeTeam(const class FString& TeamName)
{
	static UFunction* uFnChangeTeam = nullptr;

	if (!uFnChangeTeam)
	{
		uFnChangeTeam = UFunction::FindFunction("Function Engine.PlayerController.ChangeTeam");
	}

	APlayerController_execChangeTeam_Params ChangeTeam_Params;
	memset(&ChangeTeam_Params, 0, sizeof(ChangeTeam_Params));
	memcpy_s(&ChangeTeam_Params.TeamName, sizeof(ChangeTeam_Params.TeamName), &TeamName, sizeof(TeamName));

	this->ProcessEvent(uFnChangeTeam, &ChangeTeam_Params, nullptr);
};

// Function Engine.PlayerController.SwitchTeam
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void APlayerController::SwitchTeam()
{
	static UFunction* uFnSwitchTeam = nullptr;

	if (!uFnSwitchTeam)
	{
		uFnSwitchTeam = UFunction::FindFunction("Function Engine.PlayerController.SwitchTeam");
	}

	APlayerController_execSwitchTeam_Params SwitchTeam_Params;
	memset(&SwitchTeam_Params, 0, sizeof(SwitchTeam_Params));

	this->ProcessEvent(uFnSwitchTeam, &SwitchTeam_Params, nullptr);
};

// Function Engine.PlayerController.ServerChangeName
// [0xFFFF0000002200C2] (FUNC_Defined | FUNC_Net | FUNC_NetReliable | FUNC_Public | FUNC_NetServer | FUNC_AllFlags)
// Parameter Info:
// class FString                  S                              (CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink)

void APlayerController::ServerChangeName(const class FString& S)
{
	static UFunction* uFnServerChangeName = nullptr;

	if (!uFnServerChangeName)
	{
		uFnServerChangeName = UFunction::FindFunction("Function Engine.PlayerController.ServerChangeName");
	}

	APlayerController_execServerChangeName_Params ServerChangeName_Params;
	memset(&ServerChangeName_Params, 0, sizeof(ServerChangeName_Params));
	memcpy_s(&ServerChangeName_Params.S, sizeof(ServerChangeName_Params.S), &S, sizeof(S));

	this->ProcessEvent(uFnServerChangeName, &ServerChangeName_Params, nullptr);
};

// Function Engine.PlayerController.SetName
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  S                              (CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink)

void APlayerController::SetName(const class FString& S)
{
	static UFunction* uFnSetName = nullptr;

	if (!uFnSetName)
	{
		uFnSetName = UFunction::FindFunction("Function Engine.PlayerController.SetName");
	}

	APlayerController_execSetName_Params SetName_Params;
	memset(&SetName_Params, 0, sizeof(SetName_Params));
	memcpy_s(&SetName_Params.S, sizeof(SetName_Params.S), &S, sizeof(S));

	this->ProcessEvent(uFnSetName, &SetName_Params, nullptr);
};

// Function Engine.PlayerController.ServerSuicide
// [0xFFFF0000002200C2] (FUNC_Defined | FUNC_Net | FUNC_NetReliable | FUNC_Public | FUNC_NetServer | FUNC_AllFlags)
// Parameter Info:

void APlayerController::ServerSuicide()
{
	static UFunction* uFnServerSuicide = nullptr;

	if (!uFnServerSuicide)
	{
		uFnServerSuicide = UFunction::FindFunction("Function Engine.PlayerController.ServerSuicide");
	}

	APlayerController_execServerSuicide_Params ServerSuicide_Params;
	memset(&ServerSuicide_Params, 0, sizeof(ServerSuicide_Params));

	this->ProcessEvent(uFnServerSuicide, &ServerSuicide_Params, nullptr);
};

// Function Engine.PlayerController.Suicide
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void APlayerController::Suicide()
{
	static UFunction* uFnSuicide = nullptr;

	if (!uFnSuicide)
	{
		uFnSuicide = UFunction::FindFunction("Function Engine.PlayerController.Suicide");
	}

	APlayerController_execSuicide_Params Suicide_Params;
	memset(&Suicide_Params, 0, sizeof(Suicide_Params));

	this->ProcessEvent(uFnSuicide, &Suicide_Params, nullptr);
};

// Function Engine.PlayerController.TriggerInteracted
// [0x00820002] (FUNC_Defined | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool APlayerController::TriggerInteracted()
{
	static UFunction* uFnTriggerInteracted = nullptr;

	if (!uFnTriggerInteracted)
	{
		uFnTriggerInteracted = UFunction::FindFunction("Function Engine.PlayerController.TriggerInteracted");
	}

	APlayerController_execTriggerInteracted_Params TriggerInteracted_Params;
	memset(&TriggerInteracted_Params, 0, sizeof(TriggerInteracted_Params));

	this->ProcessEvent(uFnTriggerInteracted, &TriggerInteracted_Params, nullptr);

	return TriggerInteracted_Params.ReturnValue;
};

// Function Engine.PlayerController.PerformedUseAction
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool APlayerController::PerformedUseAction()
{
	static UFunction* uFnPerformedUseAction = nullptr;

	if (!uFnPerformedUseAction)
	{
		uFnPerformedUseAction = UFunction::FindFunction("Function Engine.PlayerController.PerformedUseAction");
	}

	APlayerController_execPerformedUseAction_Params PerformedUseAction_Params;
	memset(&PerformedUseAction_Params, 0, sizeof(PerformedUseAction_Params));

	this->ProcessEvent(uFnPerformedUseAction, &PerformedUseAction_Params, nullptr);

	return PerformedUseAction_Params.ReturnValue;
};

// Function Engine.PlayerController.ServerUse
// [0xFFFF000000220042] (FUNC_Defined | FUNC_Net | FUNC_Public | FUNC_NetServer | FUNC_AllFlags)
// Parameter Info:

void APlayerController::ServerUse()
{
	static UFunction* uFnServerUse = nullptr;

	if (!uFnServerUse)
	{
		uFnServerUse = UFunction::FindFunction("Function Engine.PlayerController.ServerUse");
	}

	APlayerController_execServerUse_Params ServerUse_Params;
	memset(&ServerUse_Params, 0, sizeof(ServerUse_Params));

	this->ProcessEvent(uFnServerUse, &ServerUse_Params, nullptr);
};

// Function Engine.PlayerController.Use
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void APlayerController::Use()
{
	static UFunction* uFnUse = nullptr;

	if (!uFnUse)
	{
		uFnUse = UFunction::FindFunction("Function Engine.PlayerController.Use");
	}

	APlayerController_execUse_Params Use_Params;
	memset(&Use_Params, 0, sizeof(Use_Params));

	this->ProcessEvent(uFnUse, &Use_Params, nullptr);
};

// Function Engine.PlayerController.GetTriggerUseList
// [0x00C20002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// float                          interactDistanceToCheck        (CPF_Parm)
// float                          crosshairDist                  (CPF_Parm)
// float                          minDot                         (CPF_Parm)
// uint32_t                       bUsuableOnly                   (CPF_Parm)
// class TArray<class ATrigger*>  out_useList                    (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void APlayerController::GetTriggerUseList(float interactDistanceToCheck, float crosshairDist, float minDot, bool bUsuableOnly, class TArray<class ATrigger*>& out_useList)
{
	static UFunction* uFnGetTriggerUseList = nullptr;

	if (!uFnGetTriggerUseList)
	{
		uFnGetTriggerUseList = UFunction::FindFunction("Function Engine.PlayerController.GetTriggerUseList");
	}

	APlayerController_execGetTriggerUseList_Params GetTriggerUseList_Params;
	memset(&GetTriggerUseList_Params, 0, sizeof(GetTriggerUseList_Params));
	memcpy_s(&GetTriggerUseList_Params.interactDistanceToCheck, sizeof(GetTriggerUseList_Params.interactDistanceToCheck), &interactDistanceToCheck, sizeof(interactDistanceToCheck));
	memcpy_s(&GetTriggerUseList_Params.crosshairDist, sizeof(GetTriggerUseList_Params.crosshairDist), &crosshairDist, sizeof(crosshairDist));
	memcpy_s(&GetTriggerUseList_Params.minDot, sizeof(GetTriggerUseList_Params.minDot), &minDot, sizeof(minDot));
	GetTriggerUseList_Params.bUsuableOnly = bUsuableOnly;
	memcpy_s(&GetTriggerUseList_Params.out_useList, sizeof(GetTriggerUseList_Params.out_useList), &out_useList, sizeof(out_useList));

	this->ProcessEvent(uFnGetTriggerUseList, &GetTriggerUseList_Params, nullptr);

	memcpy_s(&out_useList, sizeof(out_useList), &GetTriggerUseList_Params.out_useList, sizeof(GetTriggerUseList_Params.out_useList));
};

// Function Engine.PlayerController.StopAltFire
// [0x00024202] (FUNC_Defined | FUNC_Exec | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint8_t                        FireModeNum                    (CPF_OptionalParm | CPF_Parm)

void APlayerController::StopAltFire(uint8_t FireModeNum)
{
	static UFunction* uFnStopAltFire = nullptr;

	if (!uFnStopAltFire)
	{
		uFnStopAltFire = UFunction::FindFunction("Function Engine.PlayerController.StopAltFire");
	}

	APlayerController_execStopAltFire_Params StopAltFire_Params;
	memset(&StopAltFire_Params, 0, sizeof(StopAltFire_Params));
	memcpy_s(&StopAltFire_Params.FireModeNum, sizeof(StopAltFire_Params.FireModeNum), &FireModeNum, sizeof(FireModeNum));

	this->ProcessEvent(uFnStopAltFire, &StopAltFire_Params, nullptr);
};

// Function Engine.PlayerController.StartAltFire
// [0x00024202] (FUNC_Defined | FUNC_Exec | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint8_t                        FireModeNum                    (CPF_OptionalParm | CPF_Parm)

void APlayerController::StartAltFire(uint8_t FireModeNum)
{
	static UFunction* uFnStartAltFire = nullptr;

	if (!uFnStartAltFire)
	{
		uFnStartAltFire = UFunction::FindFunction("Function Engine.PlayerController.StartAltFire");
	}

	APlayerController_execStartAltFire_Params StartAltFire_Params;
	memset(&StartAltFire_Params, 0, sizeof(StartAltFire_Params));
	memcpy_s(&StartAltFire_Params.FireModeNum, sizeof(StartAltFire_Params.FireModeNum), &FireModeNum, sizeof(FireModeNum));

	this->ProcessEvent(uFnStartAltFire, &StartAltFire_Params, nullptr);
};

// Function Engine.PlayerController.StopFire
// [0x00024202] (FUNC_Defined | FUNC_Exec | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint8_t                        FireModeNum                    (CPF_OptionalParm | CPF_Parm)

void APlayerController::StopFire(uint8_t FireModeNum)
{
	static UFunction* uFnStopFire = nullptr;

	if (!uFnStopFire)
	{
		uFnStopFire = UFunction::FindFunction("Function Engine.PlayerController.StopFire");
	}

	APlayerController_execStopFire_Params StopFire_Params;
	memset(&StopFire_Params, 0, sizeof(StopFire_Params));
	memcpy_s(&StopFire_Params.FireModeNum, sizeof(StopFire_Params.FireModeNum), &FireModeNum, sizeof(FireModeNum));

	this->ProcessEvent(uFnStopFire, &StopFire_Params, nullptr);
};

// Function Engine.PlayerController.StartFire
// [0x00024202] (FUNC_Defined | FUNC_Exec | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint8_t                        FireModeNum                    (CPF_OptionalParm | CPF_Parm)

void APlayerController::StartFire(uint8_t FireModeNum)
{
	static UFunction* uFnStartFire = nullptr;

	if (!uFnStartFire)
	{
		uFnStartFire = UFunction::FindFunction("Function Engine.PlayerController.StartFire");
	}

	APlayerController_execStartFire_Params StartFire_Params;
	memset(&StartFire_Params, 0, sizeof(StartFire_Params));
	memcpy_s(&StartFire_Params.FireModeNum, sizeof(StartFire_Params.FireModeNum), &FireModeNum, sizeof(FireModeNum));

	this->ProcessEvent(uFnStartFire, &StartFire_Params, nullptr);
};

// Function Engine.PlayerController.NextWeapon
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void APlayerController::NextWeapon()
{
	static UFunction* uFnNextWeapon = nullptr;

	if (!uFnNextWeapon)
	{
		uFnNextWeapon = UFunction::FindFunction("Function Engine.PlayerController.NextWeapon");
	}

	APlayerController_execNextWeapon_Params NextWeapon_Params;
	memset(&NextWeapon_Params, 0, sizeof(NextWeapon_Params));

	this->ProcessEvent(uFnNextWeapon, &NextWeapon_Params, nullptr);
};

// Function Engine.PlayerController.PrevWeapon
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void APlayerController::PrevWeapon()
{
	static UFunction* uFnPrevWeapon = nullptr;

	if (!uFnPrevWeapon)
	{
		uFnPrevWeapon = UFunction::FindFunction("Function Engine.PlayerController.PrevWeapon");
	}

	APlayerController_execPrevWeapon_Params PrevWeapon_Params;
	memset(&PrevWeapon_Params, 0, sizeof(PrevWeapon_Params));

	this->ProcessEvent(uFnPrevWeapon, &PrevWeapon_Params, nullptr);
};

// Function Engine.PlayerController.ServerThrowWeapon
// [0xFFFF0000002200C2] (FUNC_Defined | FUNC_Net | FUNC_NetReliable | FUNC_Public | FUNC_NetServer | FUNC_AllFlags)
// Parameter Info:

void APlayerController::ServerThrowWeapon()
{
	static UFunction* uFnServerThrowWeapon = nullptr;

	if (!uFnServerThrowWeapon)
	{
		uFnServerThrowWeapon = UFunction::FindFunction("Function Engine.PlayerController.ServerThrowWeapon");
	}

	APlayerController_execServerThrowWeapon_Params ServerThrowWeapon_Params;
	memset(&ServerThrowWeapon_Params, 0, sizeof(ServerThrowWeapon_Params));

	this->ProcessEvent(uFnServerThrowWeapon, &ServerThrowWeapon_Params, nullptr);
};

// Function Engine.PlayerController.ThrowWeapon
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void APlayerController::ThrowWeapon()
{
	static UFunction* uFnThrowWeapon = nullptr;

	if (!uFnThrowWeapon)
	{
		uFnThrowWeapon = UFunction::FindFunction("Function Engine.PlayerController.ThrowWeapon");
	}

	APlayerController_execThrowWeapon_Params ThrowWeapon_Params;
	memset(&ThrowWeapon_Params, 0, sizeof(ThrowWeapon_Params));

	this->ProcessEvent(uFnThrowWeapon, &ThrowWeapon_Params, nullptr);
};

// Function Engine.PlayerController.UTrace
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void APlayerController::UTrace()
{
	static UFunction* uFnUTrace = nullptr;

	if (!uFnUTrace)
	{
		uFnUTrace = UFunction::FindFunction("Function Engine.PlayerController.UTrace");
	}

	APlayerController_execUTrace_Params UTrace_Params;
	memset(&UTrace_Params, 0, sizeof(UTrace_Params));

	this->ProcessEvent(uFnUTrace, &UTrace_Params, nullptr);
};

// Function Engine.PlayerController.ServerUTrace
// [0xFFFF0000002200C2] (FUNC_Defined | FUNC_Net | FUNC_NetReliable | FUNC_Public | FUNC_NetServer | FUNC_AllFlags)
// Parameter Info:

void APlayerController::ServerUTrace()
{
	static UFunction* uFnServerUTrace = nullptr;

	if (!uFnServerUTrace)
	{
		uFnServerUTrace = UFunction::FindFunction("Function Engine.PlayerController.ServerUTrace");
	}

	APlayerController_execServerUTrace_Params ServerUTrace_Params;
	memset(&ServerUTrace_Params, 0, sizeof(ServerUTrace_Params));

	this->ProcessEvent(uFnServerUTrace, &ServerUTrace_Params, nullptr);
};

// Function Engine.PlayerController.ConditionalPause
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bDesiredPauseState             (CPF_Parm)

void APlayerController::eventConditionalPause(bool bDesiredPauseState)
{
	static UFunction* uFnConditionalPause = nullptr;

	if (!uFnConditionalPause)
	{
		uFnConditionalPause = UFunction::FindFunction("Function Engine.PlayerController.ConditionalPause");
	}

	APlayerController_eventConditionalPause_Params ConditionalPause_Params;
	memset(&ConditionalPause_Params, 0, sizeof(ConditionalPause_Params));
	ConditionalPause_Params.bDesiredPauseState = bDesiredPauseState;

	this->ProcessEvent(uFnConditionalPause, &ConditionalPause_Params, nullptr);
};

// Function Engine.PlayerController.ServerPause
// [0xFFFF0000002200C2] (FUNC_Defined | FUNC_Net | FUNC_NetReliable | FUNC_Public | FUNC_NetServer | FUNC_AllFlags)
// Parameter Info:

void APlayerController::ServerPause()
{
	static UFunction* uFnServerPause = nullptr;

	if (!uFnServerPause)
	{
		uFnServerPause = UFunction::FindFunction("Function Engine.PlayerController.ServerPause");
	}

	APlayerController_execServerPause_Params ServerPause_Params;
	memset(&ServerPause_Params, 0, sizeof(ServerPause_Params));

	this->ProcessEvent(uFnServerPause, &ServerPause_Params, nullptr);
};

// Function Engine.PlayerController.Pause
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void APlayerController::Pause()
{
	static UFunction* uFnPause = nullptr;

	if (!uFnPause)
	{
		uFnPause = UFunction::FindFunction("Function Engine.PlayerController.Pause");
	}

	APlayerController_execPause_Params Pause_Params;
	memset(&Pause_Params, 0, sizeof(Pause_Params));

	this->ProcessEvent(uFnPause, &Pause_Params, nullptr);
};

// Function Engine.PlayerController.IsPaused
// [0x00020103] (FUNC_Final | FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool APlayerController::IsPaused()
{
	static UFunction* uFnIsPaused = nullptr;

	if (!uFnIsPaused)
	{
		uFnIsPaused = UFunction::FindFunction("Function Engine.PlayerController.IsPaused");
	}

	APlayerController_execIsPaused_Params IsPaused_Params;
	memset(&IsPaused_Params, 0, sizeof(IsPaused_Params));

	this->ProcessEvent(uFnIsPaused, &IsPaused_Params, nullptr);

	return IsPaused_Params.ReturnValue;
};

// Function Engine.PlayerController.SetPause
// [0x00024002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       bPause                         (CPF_Parm)
// struct FScriptDelegate         CanUnpauseDelegate             (CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink)

bool APlayerController::SetPause(bool bPause, const struct FScriptDelegate& CanUnpauseDelegate)
{
	static UFunction* uFnSetPause = nullptr;

	if (!uFnSetPause)
	{
		uFnSetPause = UFunction::FindFunction("Function Engine.PlayerController.SetPause");
	}

	APlayerController_execSetPause_Params SetPause_Params;
	memset(&SetPause_Params, 0, sizeof(SetPause_Params));
	SetPause_Params.bPause = bPause;
	memcpy_s(&SetPause_Params.CanUnpauseDelegate, sizeof(SetPause_Params.CanUnpauseDelegate), &CanUnpauseDelegate, sizeof(CanUnpauseDelegate));

	this->ProcessEvent(uFnSetPause, &SetPause_Params, nullptr);

	return SetPause_Params.ReturnValue;
};

// Function Engine.PlayerController.CanUnpause
// [0x00120002] (FUNC_Defined | FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool APlayerController::CanUnpause()
{
	static UFunction* uFnCanUnpause = nullptr;

	if (!uFnCanUnpause)
	{
		uFnCanUnpause = UFunction::FindFunction("Function Engine.PlayerController.CanUnpause");
	}

	APlayerController_execCanUnpause_Params CanUnpause_Params;
	memset(&CanUnpause_Params, 0, sizeof(CanUnpause_Params));

	this->ProcessEvent(uFnCanUnpause, &CanUnpause_Params, nullptr);

	return CanUnpause_Params.ReturnValue;
};

// Function Engine.PlayerController.PauseRumbleForAllPlayers
// [0x00024002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bShouldPauseRumble             (CPF_OptionalParm | CPF_Parm)

void APlayerController::PauseRumbleForAllPlayers(bool bShouldPauseRumble)
{
	static UFunction* uFnPauseRumbleForAllPlayers = nullptr;

	if (!uFnPauseRumbleForAllPlayers)
	{
		uFnPauseRumbleForAllPlayers = UFunction::FindFunction("Function Engine.PlayerController.PauseRumbleForAllPlayers");
	}

	APlayerController_execPauseRumbleForAllPlayers_Params PauseRumbleForAllPlayers_Params;
	memset(&PauseRumbleForAllPlayers_Params, 0, sizeof(PauseRumbleForAllPlayers_Params));
	PauseRumbleForAllPlayers_Params.bShouldPauseRumble = bShouldPauseRumble;

	this->ProcessEvent(uFnPauseRumbleForAllPlayers, &PauseRumbleForAllPlayers_Params, nullptr);
};

// Function Engine.PlayerController.LocalTravel
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  URL                            (CPF_Parm | CPF_NeedCtorLink)

void APlayerController::LocalTravel(const class FString& URL)
{
	static UFunction* uFnLocalTravel = nullptr;

	if (!uFnLocalTravel)
	{
		uFnLocalTravel = UFunction::FindFunction("Function Engine.PlayerController.LocalTravel");
	}

	APlayerController_execLocalTravel_Params LocalTravel_Params;
	memset(&LocalTravel_Params, 0, sizeof(LocalTravel_Params));
	memcpy_s(&LocalTravel_Params.URL, sizeof(LocalTravel_Params.URL), &URL, sizeof(URL));

	this->ProcessEvent(uFnLocalTravel, &LocalTravel_Params, nullptr);
};

// Function Engine.PlayerController.RestartLevel
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void APlayerController::RestartLevel()
{
	static UFunction* uFnRestartLevel = nullptr;

	if (!uFnRestartLevel)
	{
		uFnRestartLevel = UFunction::FindFunction("Function Engine.PlayerController.RestartLevel");
	}

	APlayerController_execRestartLevel_Params RestartLevel_Params;
	memset(&RestartLevel_Params, 0, sizeof(RestartLevel_Params));

	this->ProcessEvent(uFnRestartLevel, &RestartLevel_Params, nullptr);
};

// Function Engine.PlayerController.ServerSpeech
// [0xFFFF0000002200C0] (FUNC_Net | FUNC_NetReliable | FUNC_Public | FUNC_NetServer | FUNC_AllFlags)
// Parameter Info:
// class FName                    Type                           (CPF_Parm)
// int32_t                        Index                          (CPF_Parm)
// class FString                  Callsign                       (CPF_Parm | CPF_NeedCtorLink)

void APlayerController::ServerSpeech(const class FName& Type, int32_t Index, const class FString& Callsign)
{
	static UFunction* uFnServerSpeech = nullptr;

	if (!uFnServerSpeech)
	{
		uFnServerSpeech = UFunction::FindFunction("Function Engine.PlayerController.ServerSpeech");
	}

	APlayerController_execServerSpeech_Params ServerSpeech_Params;
	memset(&ServerSpeech_Params, 0, sizeof(ServerSpeech_Params));
	memcpy_s(&ServerSpeech_Params.Type, sizeof(ServerSpeech_Params.Type), &Type, sizeof(Type));
	memcpy_s(&ServerSpeech_Params.Index, sizeof(ServerSpeech_Params.Index), &Index, sizeof(Index));
	memcpy_s(&ServerSpeech_Params.Callsign, sizeof(ServerSpeech_Params.Callsign), &Callsign, sizeof(Callsign));

	this->ProcessEvent(uFnServerSpeech, &ServerSpeech_Params, nullptr);
};

// Function Engine.PlayerController.Speech
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FName                    Type                           (CPF_Parm)
// int32_t                        Index                          (CPF_Parm)
// class FString                  Callsign                       (CPF_Parm | CPF_NeedCtorLink)

void APlayerController::Speech(const class FName& Type, int32_t Index, const class FString& Callsign)
{
	static UFunction* uFnSpeech = nullptr;

	if (!uFnSpeech)
	{
		uFnSpeech = UFunction::FindFunction("Function Engine.PlayerController.Speech");
	}

	APlayerController_execSpeech_Params Speech_Params;
	memset(&Speech_Params, 0, sizeof(Speech_Params));
	memcpy_s(&Speech_Params.Type, sizeof(Speech_Params.Type), &Type, sizeof(Type));
	memcpy_s(&Speech_Params.Index, sizeof(Speech_Params.Index), &Index, sizeof(Index));
	memcpy_s(&Speech_Params.Callsign, sizeof(Speech_Params.Callsign), &Callsign, sizeof(Callsign));

	this->ProcessEvent(uFnSpeech, &Speech_Params, nullptr);
};

// Function Engine.PlayerController.ServerRestartGame
// [0xFFFF0000002200C0] (FUNC_Net | FUNC_NetReliable | FUNC_Public | FUNC_NetServer | FUNC_AllFlags)
// Parameter Info:

void APlayerController::ServerRestartGame()
{
	static UFunction* uFnServerRestartGame = nullptr;

	if (!uFnServerRestartGame)
	{
		uFnServerRestartGame = UFunction::FindFunction("Function Engine.PlayerController.ServerRestartGame");
	}

	APlayerController_execServerRestartGame_Params ServerRestartGame_Params;
	memset(&ServerRestartGame_Params, 0, sizeof(ServerRestartGame_Params));

	this->ProcessEvent(uFnServerRestartGame, &ServerRestartGame_Params, nullptr);
};

// Function Engine.PlayerController.HandleWalking
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20898])
// Parameter Info:
// float                          DeltaTime                      (CPF_Parm)

void APlayerController::HandleWalking(float DeltaTime)
{
	static UFunction* uFnHandleWalking = nullptr;

	if (!uFnHandleWalking)
	{
		uFnHandleWalking = UFunction::FindFunction("Function Engine.PlayerController.HandleWalking");
	}

	APlayerController_execHandleWalking_Params HandleWalking_Params;
	memset(&HandleWalking_Params, 0, sizeof(HandleWalking_Params));
	memcpy_s(&HandleWalking_Params.DeltaTime, sizeof(HandleWalking_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));

	uFnHandleWalking->iNative = 0;
	uFnHandleWalking->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnHandleWalking, &HandleWalking_Params, nullptr);
	uFnHandleWalking->FunctionFlags |= 0x400;
	uFnHandleWalking->iNative = 20898;
};

// Function Engine.PlayerController.CallServerMove
// [0x00820002] (FUNC_Defined | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// class USavedMove*              NewMove                        (CPF_Parm)
// struct FVector                 ClientLoc                      (CPF_Parm)
// uint8_t                        ClientRoll                     (CPF_Parm)
// int32_t                        View                           (CPF_Parm)
// class USavedMove*              OldMove                        (CPF_Parm)

void APlayerController::CallServerMove(class USavedMove* NewMove, const struct FVector& ClientLoc, uint8_t ClientRoll, int32_t View, class USavedMove* OldMove)
{
	static UFunction* uFnCallServerMove = nullptr;

	if (!uFnCallServerMove)
	{
		uFnCallServerMove = UFunction::FindFunction("Function Engine.PlayerController.CallServerMove");
	}

	APlayerController_execCallServerMove_Params CallServerMove_Params;
	memset(&CallServerMove_Params, 0, sizeof(CallServerMove_Params));
	CallServerMove_Params.NewMove = NewMove;
	memcpy_s(&CallServerMove_Params.ClientLoc, sizeof(CallServerMove_Params.ClientLoc), &ClientLoc, sizeof(ClientLoc));
	memcpy_s(&CallServerMove_Params.ClientRoll, sizeof(CallServerMove_Params.ClientRoll), &ClientRoll, sizeof(ClientRoll));
	memcpy_s(&CallServerMove_Params.View, sizeof(CallServerMove_Params.View), &View, sizeof(View));
	CallServerMove_Params.OldMove = OldMove;

	this->ProcessEvent(uFnCallServerMove, &CallServerMove_Params, nullptr);
};

// Function Engine.PlayerController.ReplicateMove
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          DeltaTime                      (CPF_Parm)
// struct FVector                 newAccel                       (CPF_Parm)
// EDoubleClickDir                DoubleClickMove                (CPF_Parm)
// struct FRotator                DeltaRot                       (CPF_Parm)

void APlayerController::ReplicateMove(float DeltaTime, const struct FVector& newAccel, EDoubleClickDir DoubleClickMove, const struct FRotator& DeltaRot)
{
	static UFunction* uFnReplicateMove = nullptr;

	if (!uFnReplicateMove)
	{
		uFnReplicateMove = UFunction::FindFunction("Function Engine.PlayerController.ReplicateMove");
	}

	APlayerController_execReplicateMove_Params ReplicateMove_Params;
	memset(&ReplicateMove_Params, 0, sizeof(ReplicateMove_Params));
	memcpy_s(&ReplicateMove_Params.DeltaTime, sizeof(ReplicateMove_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));
	memcpy_s(&ReplicateMove_Params.newAccel, sizeof(ReplicateMove_Params.newAccel), &newAccel, sizeof(newAccel));
	memcpy_s(&ReplicateMove_Params.DoubleClickMove, sizeof(ReplicateMove_Params.DoubleClickMove), &DoubleClickMove, sizeof(DoubleClickMove));
	memcpy_s(&ReplicateMove_Params.DeltaRot, sizeof(ReplicateMove_Params.DeltaRot), &DeltaRot, sizeof(DeltaRot));

	this->ProcessEvent(uFnReplicateMove, &ReplicateMove_Params, nullptr);
};

// Function Engine.PlayerController.CompressAccel
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        C                              (CPF_Parm)

int32_t APlayerController::CompressAccel(int32_t C)
{
	static UFunction* uFnCompressAccel = nullptr;

	if (!uFnCompressAccel)
	{
		uFnCompressAccel = UFunction::FindFunction("Function Engine.PlayerController.CompressAccel");
	}

	APlayerController_execCompressAccel_Params CompressAccel_Params;
	memset(&CompressAccel_Params, 0, sizeof(CompressAccel_Params));
	memcpy_s(&CompressAccel_Params.C, sizeof(CompressAccel_Params.C), &C, sizeof(C));

	this->ProcessEvent(uFnCompressAccel, &CompressAccel_Params, nullptr);

	return CompressAccel_Params.ReturnValue;
};

// Function Engine.PlayerController.GetFreeMove
// [0x00020003] (FUNC_Final | FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USavedMove*              ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class USavedMove* APlayerController::GetFreeMove()
{
	static UFunction* uFnGetFreeMove = nullptr;

	if (!uFnGetFreeMove)
	{
		uFnGetFreeMove = UFunction::FindFunction("Function Engine.PlayerController.GetFreeMove");
	}

	APlayerController_execGetFreeMove_Params GetFreeMove_Params;
	memset(&GetFreeMove_Params, 0, sizeof(GetFreeMove_Params));

	this->ProcessEvent(uFnGetFreeMove, &GetFreeMove_Params, nullptr);

	return GetFreeMove_Params.ReturnValue;
};

// Function Engine.PlayerController.ClientUpdatePosition
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void APlayerController::eventClientUpdatePosition()
{
	static UFunction* uFnClientUpdatePosition = nullptr;

	if (!uFnClientUpdatePosition)
	{
		uFnClientUpdatePosition = UFunction::FindFunction("Function Engine.PlayerController.ClientUpdatePosition");
	}

	APlayerController_eventClientUpdatePosition_Params ClientUpdatePosition_Params;
	memset(&ClientUpdatePosition_Params, 0, sizeof(ClientUpdatePosition_Params));

	this->ProcessEvent(uFnClientUpdatePosition, &ClientUpdatePosition_Params, nullptr);
};

// Function Engine.PlayerController.ClearAckedMoves
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void APlayerController::ClearAckedMoves()
{
	static UFunction* uFnClearAckedMoves = nullptr;

	if (!uFnClearAckedMoves)
	{
		uFnClearAckedMoves = UFunction::FindFunction("Function Engine.PlayerController.ClearAckedMoves");
	}

	APlayerController_execClearAckedMoves_Params ClearAckedMoves_Params;
	memset(&ClearAckedMoves_Params, 0, sizeof(ClearAckedMoves_Params));

	this->ProcessEvent(uFnClearAckedMoves, &ClearAckedMoves_Params, nullptr);
};

// Function Engine.PlayerController.ServerUpdatePing
// [0xFFFF000000220042] (FUNC_Defined | FUNC_Net | FUNC_Public | FUNC_NetServer | FUNC_AllFlags)
// Parameter Info:
// int32_t                        NewPing                        (CPF_Parm)

void APlayerController::ServerUpdatePing(int32_t NewPing)
{
	static UFunction* uFnServerUpdatePing = nullptr;

	if (!uFnServerUpdatePing)
	{
		uFnServerUpdatePing = UFunction::FindFunction("Function Engine.PlayerController.ServerUpdatePing");
	}

	APlayerController_execServerUpdatePing_Params ServerUpdatePing_Params;
	memset(&ServerUpdatePing_Params, 0, sizeof(ServerUpdatePing_Params));
	memcpy_s(&ServerUpdatePing_Params.NewPing, sizeof(ServerUpdatePing_Params.NewPing), &NewPing, sizeof(NewPing));

	this->ProcessEvent(uFnServerUpdatePing, &ServerUpdatePing_Params, nullptr);
};

// Function Engine.PlayerController.UpdateStateFromAdjustment
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FName                    NewState                       (CPF_Parm)

void APlayerController::UpdateStateFromAdjustment(const class FName& NewState)
{
	static UFunction* uFnUpdateStateFromAdjustment = nullptr;

	if (!uFnUpdateStateFromAdjustment)
	{
		uFnUpdateStateFromAdjustment = UFunction::FindFunction("Function Engine.PlayerController.UpdateStateFromAdjustment");
	}

	APlayerController_execUpdateStateFromAdjustment_Params UpdateStateFromAdjustment_Params;
	memset(&UpdateStateFromAdjustment_Params, 0, sizeof(UpdateStateFromAdjustment_Params));
	memcpy_s(&UpdateStateFromAdjustment_Params.NewState, sizeof(UpdateStateFromAdjustment_Params.NewState), &NewState, sizeof(NewState));

	this->ProcessEvent(uFnUpdateStateFromAdjustment, &UpdateStateFromAdjustment_Params, nullptr);
};

// Function Engine.PlayerController.LongClientAdjustPosition
// [0xFFFF000001820142] (FUNC_Defined | FUNC_Net | FUNC_Simulated | FUNC_Public | FUNC_HasDefaults | FUNC_NetClient | FUNC_AllFlags)
// Parameter Info:
// float                          TimeStamp                      (CPF_Parm)
// class FName                    NewState                       (CPF_Parm)
// EPhysics                       newPhysics                     (CPF_Parm)
// float                          NewLocX                        (CPF_Parm)
// float                          NewLocY                        (CPF_Parm)
// float                          NewLocZ                        (CPF_Parm)
// float                          NewVelX                        (CPF_Parm)
// float                          NewVelY                        (CPF_Parm)
// float                          NewVelZ                        (CPF_Parm)
// class AActor*                  NewBase                        (CPF_Parm)
// float                          NewFloorX                      (CPF_Parm)
// float                          NewFloorY                      (CPF_Parm)
// float                          NewFloorZ                      (CPF_Parm)

void APlayerController::LongClientAdjustPosition(float TimeStamp, const class FName& NewState, EPhysics newPhysics, float NewLocX, float NewLocY, float NewLocZ, float NewVelX, float NewVelY, float NewVelZ, class AActor* NewBase, float NewFloorX, float NewFloorY, float NewFloorZ)
{
	static UFunction* uFnLongClientAdjustPosition = nullptr;

	if (!uFnLongClientAdjustPosition)
	{
		uFnLongClientAdjustPosition = UFunction::FindFunction("Function Engine.PlayerController.LongClientAdjustPosition");
	}

	APlayerController_execLongClientAdjustPosition_Params LongClientAdjustPosition_Params;
	memset(&LongClientAdjustPosition_Params, 0, sizeof(LongClientAdjustPosition_Params));
	memcpy_s(&LongClientAdjustPosition_Params.TimeStamp, sizeof(LongClientAdjustPosition_Params.TimeStamp), &TimeStamp, sizeof(TimeStamp));
	memcpy_s(&LongClientAdjustPosition_Params.NewState, sizeof(LongClientAdjustPosition_Params.NewState), &NewState, sizeof(NewState));
	memcpy_s(&LongClientAdjustPosition_Params.newPhysics, sizeof(LongClientAdjustPosition_Params.newPhysics), &newPhysics, sizeof(newPhysics));
	memcpy_s(&LongClientAdjustPosition_Params.NewLocX, sizeof(LongClientAdjustPosition_Params.NewLocX), &NewLocX, sizeof(NewLocX));
	memcpy_s(&LongClientAdjustPosition_Params.NewLocY, sizeof(LongClientAdjustPosition_Params.NewLocY), &NewLocY, sizeof(NewLocY));
	memcpy_s(&LongClientAdjustPosition_Params.NewLocZ, sizeof(LongClientAdjustPosition_Params.NewLocZ), &NewLocZ, sizeof(NewLocZ));
	memcpy_s(&LongClientAdjustPosition_Params.NewVelX, sizeof(LongClientAdjustPosition_Params.NewVelX), &NewVelX, sizeof(NewVelX));
	memcpy_s(&LongClientAdjustPosition_Params.NewVelY, sizeof(LongClientAdjustPosition_Params.NewVelY), &NewVelY, sizeof(NewVelY));
	memcpy_s(&LongClientAdjustPosition_Params.NewVelZ, sizeof(LongClientAdjustPosition_Params.NewVelZ), &NewVelZ, sizeof(NewVelZ));
	LongClientAdjustPosition_Params.NewBase = NewBase;
	memcpy_s(&LongClientAdjustPosition_Params.NewFloorX, sizeof(LongClientAdjustPosition_Params.NewFloorX), &NewFloorX, sizeof(NewFloorX));
	memcpy_s(&LongClientAdjustPosition_Params.NewFloorY, sizeof(LongClientAdjustPosition_Params.NewFloorY), &NewFloorY, sizeof(NewFloorY));
	memcpy_s(&LongClientAdjustPosition_Params.NewFloorZ, sizeof(LongClientAdjustPosition_Params.NewFloorZ), &NewFloorZ, sizeof(NewFloorZ));

	this->ProcessEvent(uFnLongClientAdjustPosition, &LongClientAdjustPosition_Params, nullptr);
};

// Function Engine.PlayerController.UpdatePing
// [0x00020003] (FUNC_Final | FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          TimeStamp                      (CPF_Parm)

void APlayerController::UpdatePing(float TimeStamp)
{
	static UFunction* uFnUpdatePing = nullptr;

	if (!uFnUpdatePing)
	{
		uFnUpdatePing = UFunction::FindFunction("Function Engine.PlayerController.UpdatePing");
	}

	APlayerController_execUpdatePing_Params UpdatePing_Params;
	memset(&UpdatePing_Params, 0, sizeof(UpdatePing_Params));
	memcpy_s(&UpdatePing_Params.TimeStamp, sizeof(UpdatePing_Params.TimeStamp), &TimeStamp, sizeof(TimeStamp));

	this->ProcessEvent(uFnUpdatePing, &UpdatePing_Params, nullptr);
};

// Function Engine.PlayerController.ClientAdjustPosition
// [0xFFFF000001820142] (FUNC_Defined | FUNC_Net | FUNC_Simulated | FUNC_Public | FUNC_HasDefaults | FUNC_NetClient | FUNC_AllFlags)
// Parameter Info:
// float                          TimeStamp                      (CPF_Parm)
// class FName                    NewState                       (CPF_Parm)
// EPhysics                       newPhysics                     (CPF_Parm)
// float                          NewLocX                        (CPF_Parm)
// float                          NewLocY                        (CPF_Parm)
// float                          NewLocZ                        (CPF_Parm)
// float                          NewVelX                        (CPF_Parm)
// float                          NewVelY                        (CPF_Parm)
// float                          NewVelZ                        (CPF_Parm)
// class AActor*                  NewBase                        (CPF_Parm)

void APlayerController::ClientAdjustPosition(float TimeStamp, const class FName& NewState, EPhysics newPhysics, float NewLocX, float NewLocY, float NewLocZ, float NewVelX, float NewVelY, float NewVelZ, class AActor* NewBase)
{
	static UFunction* uFnClientAdjustPosition = nullptr;

	if (!uFnClientAdjustPosition)
	{
		uFnClientAdjustPosition = UFunction::FindFunction("Function Engine.PlayerController.ClientAdjustPosition");
	}

	APlayerController_execClientAdjustPosition_Params ClientAdjustPosition_Params;
	memset(&ClientAdjustPosition_Params, 0, sizeof(ClientAdjustPosition_Params));
	memcpy_s(&ClientAdjustPosition_Params.TimeStamp, sizeof(ClientAdjustPosition_Params.TimeStamp), &TimeStamp, sizeof(TimeStamp));
	memcpy_s(&ClientAdjustPosition_Params.NewState, sizeof(ClientAdjustPosition_Params.NewState), &NewState, sizeof(NewState));
	memcpy_s(&ClientAdjustPosition_Params.newPhysics, sizeof(ClientAdjustPosition_Params.newPhysics), &newPhysics, sizeof(newPhysics));
	memcpy_s(&ClientAdjustPosition_Params.NewLocX, sizeof(ClientAdjustPosition_Params.NewLocX), &NewLocX, sizeof(NewLocX));
	memcpy_s(&ClientAdjustPosition_Params.NewLocY, sizeof(ClientAdjustPosition_Params.NewLocY), &NewLocY, sizeof(NewLocY));
	memcpy_s(&ClientAdjustPosition_Params.NewLocZ, sizeof(ClientAdjustPosition_Params.NewLocZ), &NewLocZ, sizeof(NewLocZ));
	memcpy_s(&ClientAdjustPosition_Params.NewVelX, sizeof(ClientAdjustPosition_Params.NewVelX), &NewVelX, sizeof(NewVelX));
	memcpy_s(&ClientAdjustPosition_Params.NewVelY, sizeof(ClientAdjustPosition_Params.NewVelY), &NewVelY, sizeof(NewVelY));
	memcpy_s(&ClientAdjustPosition_Params.NewVelZ, sizeof(ClientAdjustPosition_Params.NewVelZ), &NewVelZ, sizeof(NewVelZ));
	ClientAdjustPosition_Params.NewBase = NewBase;

	this->ProcessEvent(uFnClientAdjustPosition, &ClientAdjustPosition_Params, nullptr);
};

// Function Engine.PlayerController.ClientAckGoodMove
// [0xFFFF000001020142] (FUNC_Defined | FUNC_Net | FUNC_Simulated | FUNC_Public | FUNC_NetClient | FUNC_AllFlags)
// Parameter Info:
// float                          TimeStamp                      (CPF_Parm)

void APlayerController::ClientAckGoodMove(float TimeStamp)
{
	static UFunction* uFnClientAckGoodMove = nullptr;

	if (!uFnClientAckGoodMove)
	{
		uFnClientAckGoodMove = UFunction::FindFunction("Function Engine.PlayerController.ClientAckGoodMove");
	}

	APlayerController_execClientAckGoodMove_Params ClientAckGoodMove_Params;
	memset(&ClientAckGoodMove_Params, 0, sizeof(ClientAckGoodMove_Params));
	memcpy_s(&ClientAckGoodMove_Params.TimeStamp, sizeof(ClientAckGoodMove_Params.TimeStamp), &TimeStamp, sizeof(TimeStamp));

	this->ProcessEvent(uFnClientAckGoodMove, &ClientAckGoodMove_Params, nullptr);
};

// Function Engine.PlayerController.ShortClientAdjustPosition
// [0xFFFF000001820142] (FUNC_Defined | FUNC_Net | FUNC_Simulated | FUNC_Public | FUNC_HasDefaults | FUNC_NetClient | FUNC_AllFlags)
// Parameter Info:
// float                          TimeStamp                      (CPF_Parm)
// class FName                    NewState                       (CPF_Parm)
// EPhysics                       newPhysics                     (CPF_Parm)
// float                          NewLocX                        (CPF_Parm)
// float                          NewLocY                        (CPF_Parm)
// float                          NewLocZ                        (CPF_Parm)
// class AActor*                  NewBase                        (CPF_Parm)

void APlayerController::ShortClientAdjustPosition(float TimeStamp, const class FName& NewState, EPhysics newPhysics, float NewLocX, float NewLocY, float NewLocZ, class AActor* NewBase)
{
	static UFunction* uFnShortClientAdjustPosition = nullptr;

	if (!uFnShortClientAdjustPosition)
	{
		uFnShortClientAdjustPosition = UFunction::FindFunction("Function Engine.PlayerController.ShortClientAdjustPosition");
	}

	APlayerController_execShortClientAdjustPosition_Params ShortClientAdjustPosition_Params;
	memset(&ShortClientAdjustPosition_Params, 0, sizeof(ShortClientAdjustPosition_Params));
	memcpy_s(&ShortClientAdjustPosition_Params.TimeStamp, sizeof(ShortClientAdjustPosition_Params.TimeStamp), &TimeStamp, sizeof(TimeStamp));
	memcpy_s(&ShortClientAdjustPosition_Params.NewState, sizeof(ShortClientAdjustPosition_Params.NewState), &NewState, sizeof(NewState));
	memcpy_s(&ShortClientAdjustPosition_Params.newPhysics, sizeof(ShortClientAdjustPosition_Params.newPhysics), &newPhysics, sizeof(newPhysics));
	memcpy_s(&ShortClientAdjustPosition_Params.NewLocX, sizeof(ShortClientAdjustPosition_Params.NewLocX), &NewLocX, sizeof(NewLocX));
	memcpy_s(&ShortClientAdjustPosition_Params.NewLocY, sizeof(ShortClientAdjustPosition_Params.NewLocY), &NewLocY, sizeof(NewLocY));
	memcpy_s(&ShortClientAdjustPosition_Params.NewLocZ, sizeof(ShortClientAdjustPosition_Params.NewLocZ), &NewLocZ, sizeof(NewLocZ));
	ShortClientAdjustPosition_Params.NewBase = NewBase;

	this->ProcessEvent(uFnShortClientAdjustPosition, &ShortClientAdjustPosition_Params, nullptr);
};

// Function Engine.PlayerController.VeryShortClientAdjustPosition
// [0xFFFF000001820142] (FUNC_Defined | FUNC_Net | FUNC_Simulated | FUNC_Public | FUNC_HasDefaults | FUNC_NetClient | FUNC_AllFlags)
// Parameter Info:
// float                          TimeStamp                      (CPF_Parm)
// float                          NewLocX                        (CPF_Parm)
// float                          NewLocY                        (CPF_Parm)
// float                          NewLocZ                        (CPF_Parm)
// class AActor*                  NewBase                        (CPF_Parm)

void APlayerController::VeryShortClientAdjustPosition(float TimeStamp, float NewLocX, float NewLocY, float NewLocZ, class AActor* NewBase)
{
	static UFunction* uFnVeryShortClientAdjustPosition = nullptr;

	if (!uFnVeryShortClientAdjustPosition)
	{
		uFnVeryShortClientAdjustPosition = UFunction::FindFunction("Function Engine.PlayerController.VeryShortClientAdjustPosition");
	}

	APlayerController_execVeryShortClientAdjustPosition_Params VeryShortClientAdjustPosition_Params;
	memset(&VeryShortClientAdjustPosition_Params, 0, sizeof(VeryShortClientAdjustPosition_Params));
	memcpy_s(&VeryShortClientAdjustPosition_Params.TimeStamp, sizeof(VeryShortClientAdjustPosition_Params.TimeStamp), &TimeStamp, sizeof(TimeStamp));
	memcpy_s(&VeryShortClientAdjustPosition_Params.NewLocX, sizeof(VeryShortClientAdjustPosition_Params.NewLocX), &NewLocX, sizeof(NewLocX));
	memcpy_s(&VeryShortClientAdjustPosition_Params.NewLocY, sizeof(VeryShortClientAdjustPosition_Params.NewLocY), &NewLocY, sizeof(NewLocY));
	memcpy_s(&VeryShortClientAdjustPosition_Params.NewLocZ, sizeof(VeryShortClientAdjustPosition_Params.NewLocZ), &NewLocZ, sizeof(NewLocZ));
	VeryShortClientAdjustPosition_Params.NewBase = NewBase;

	this->ProcessEvent(uFnVeryShortClientAdjustPosition, &VeryShortClientAdjustPosition_Params, nullptr);
};

// Function Engine.PlayerController.MoveAutonomous
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          DeltaTime                      (CPF_Parm)
// uint8_t                        CompressedFlags                (CPF_Parm)
// struct FVector                 newAccel                       (CPF_Parm)
// struct FRotator                DeltaRot                       (CPF_Parm)

void APlayerController::MoveAutonomous(float DeltaTime, uint8_t CompressedFlags, const struct FVector& newAccel, const struct FRotator& DeltaRot)
{
	static UFunction* uFnMoveAutonomous = nullptr;

	if (!uFnMoveAutonomous)
	{
		uFnMoveAutonomous = UFunction::FindFunction("Function Engine.PlayerController.MoveAutonomous");
	}

	APlayerController_execMoveAutonomous_Params MoveAutonomous_Params;
	memset(&MoveAutonomous_Params, 0, sizeof(MoveAutonomous_Params));
	memcpy_s(&MoveAutonomous_Params.DeltaTime, sizeof(MoveAutonomous_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));
	memcpy_s(&MoveAutonomous_Params.CompressedFlags, sizeof(MoveAutonomous_Params.CompressedFlags), &CompressedFlags, sizeof(CompressedFlags));
	memcpy_s(&MoveAutonomous_Params.newAccel, sizeof(MoveAutonomous_Params.newAccel), &newAccel, sizeof(newAccel));
	memcpy_s(&MoveAutonomous_Params.DeltaRot, sizeof(MoveAutonomous_Params.DeltaRot), &DeltaRot, sizeof(DeltaRot));

	this->ProcessEvent(uFnMoveAutonomous, &MoveAutonomous_Params, nullptr);
};

// Function Engine.PlayerController.ProcessMove
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          DeltaTime                      (CPF_Parm)
// struct FVector                 newAccel                       (CPF_Parm)
// EDoubleClickDir                DoubleClickMove                (CPF_Parm)
// struct FRotator                DeltaRot                       (CPF_Parm)

void APlayerController::ProcessMove(float DeltaTime, const struct FVector& newAccel, EDoubleClickDir DoubleClickMove, const struct FRotator& DeltaRot)
{
	static UFunction* uFnProcessMove = nullptr;

	if (!uFnProcessMove)
	{
		uFnProcessMove = UFunction::FindFunction("Function Engine.PlayerController.ProcessMove");
	}

	APlayerController_execProcessMove_Params ProcessMove_Params;
	memset(&ProcessMove_Params, 0, sizeof(ProcessMove_Params));
	memcpy_s(&ProcessMove_Params.DeltaTime, sizeof(ProcessMove_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));
	memcpy_s(&ProcessMove_Params.newAccel, sizeof(ProcessMove_Params.newAccel), &newAccel, sizeof(newAccel));
	memcpy_s(&ProcessMove_Params.DoubleClickMove, sizeof(ProcessMove_Params.DoubleClickMove), &DoubleClickMove, sizeof(DoubleClickMove));
	memcpy_s(&ProcessMove_Params.DeltaRot, sizeof(ProcessMove_Params.DeltaRot), &DeltaRot, sizeof(DeltaRot));

	this->ProcessEvent(uFnProcessMove, &ProcessMove_Params, nullptr);
};

// Function Engine.PlayerController.SendClientAdjustment
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void APlayerController::eventSendClientAdjustment()
{
	static UFunction* uFnSendClientAdjustment = nullptr;

	if (!uFnSendClientAdjustment)
	{
		uFnSendClientAdjustment = UFunction::FindFunction("Function Engine.PlayerController.SendClientAdjustment");
	}

	APlayerController_eventSendClientAdjustment_Params SendClientAdjustment_Params;
	memset(&SendClientAdjustment_Params, 0, sizeof(SendClientAdjustment_Params));

	this->ProcessEvent(uFnSendClientAdjustment, &SendClientAdjustment_Params, nullptr);
};

// Function Engine.PlayerController.ServerMove
// [0xFFFF000000220042] (FUNC_Defined | FUNC_Net | FUNC_Public | FUNC_NetServer | FUNC_AllFlags)
// Parameter Info:
// float                          TimeStamp                      (CPF_Parm)
// struct FVector                 InAccel                        (CPF_Parm)
// struct FVector                 ClientLoc                      (CPF_Parm)
// uint8_t                        MoveFlags                      (CPF_Parm)
// uint8_t                        ClientRoll                     (CPF_Parm)
// int32_t                        View                           (CPF_Parm)

void APlayerController::ServerMove(float TimeStamp, const struct FVector& InAccel, const struct FVector& ClientLoc, uint8_t MoveFlags, uint8_t ClientRoll, int32_t View)
{
	static UFunction* uFnServerMove = nullptr;

	if (!uFnServerMove)
	{
		uFnServerMove = UFunction::FindFunction("Function Engine.PlayerController.ServerMove");
	}

	APlayerController_execServerMove_Params ServerMove_Params;
	memset(&ServerMove_Params, 0, sizeof(ServerMove_Params));
	memcpy_s(&ServerMove_Params.TimeStamp, sizeof(ServerMove_Params.TimeStamp), &TimeStamp, sizeof(TimeStamp));
	memcpy_s(&ServerMove_Params.InAccel, sizeof(ServerMove_Params.InAccel), &InAccel, sizeof(InAccel));
	memcpy_s(&ServerMove_Params.ClientLoc, sizeof(ServerMove_Params.ClientLoc), &ClientLoc, sizeof(ClientLoc));
	memcpy_s(&ServerMove_Params.MoveFlags, sizeof(ServerMove_Params.MoveFlags), &MoveFlags, sizeof(MoveFlags));
	memcpy_s(&ServerMove_Params.ClientRoll, sizeof(ServerMove_Params.ClientRoll), &ClientRoll, sizeof(ClientRoll));
	memcpy_s(&ServerMove_Params.View, sizeof(ServerMove_Params.View), &View, sizeof(View));

	this->ProcessEvent(uFnServerMove, &ServerMove_Params, nullptr);
};

// Function Engine.PlayerController.ServerMoveHandleClientError
// [0x00820002] (FUNC_Defined | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// float                          TimeStamp                      (CPF_Parm)
// struct FVector                 Accel                          (CPF_Parm)
// struct FVector                 ClientLoc                      (CPF_Parm)

void APlayerController::ServerMoveHandleClientError(float TimeStamp, const struct FVector& Accel, const struct FVector& ClientLoc)
{
	static UFunction* uFnServerMoveHandleClientError = nullptr;

	if (!uFnServerMoveHandleClientError)
	{
		uFnServerMoveHandleClientError = UFunction::FindFunction("Function Engine.PlayerController.ServerMoveHandleClientError");
	}

	APlayerController_execServerMoveHandleClientError_Params ServerMoveHandleClientError_Params;
	memset(&ServerMoveHandleClientError_Params, 0, sizeof(ServerMoveHandleClientError_Params));
	memcpy_s(&ServerMoveHandleClientError_Params.TimeStamp, sizeof(ServerMoveHandleClientError_Params.TimeStamp), &TimeStamp, sizeof(TimeStamp));
	memcpy_s(&ServerMoveHandleClientError_Params.Accel, sizeof(ServerMoveHandleClientError_Params.Accel), &Accel, sizeof(Accel));
	memcpy_s(&ServerMoveHandleClientError_Params.ClientLoc, sizeof(ServerMoveHandleClientError_Params.ClientLoc), &ClientLoc, sizeof(ClientLoc));

	this->ProcessEvent(uFnServerMoveHandleClientError, &ServerMoveHandleClientError_Params, nullptr);
};

// Function Engine.PlayerController.GetServerMoveDeltaTime
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// float                          TimeStamp                      (CPF_Parm)

float APlayerController::GetServerMoveDeltaTime(float TimeStamp)
{
	static UFunction* uFnGetServerMoveDeltaTime = nullptr;

	if (!uFnGetServerMoveDeltaTime)
	{
		uFnGetServerMoveDeltaTime = UFunction::FindFunction("Function Engine.PlayerController.GetServerMoveDeltaTime");
	}

	APlayerController_execGetServerMoveDeltaTime_Params GetServerMoveDeltaTime_Params;
	memset(&GetServerMoveDeltaTime_Params, 0, sizeof(GetServerMoveDeltaTime_Params));
	memcpy_s(&GetServerMoveDeltaTime_Params.TimeStamp, sizeof(GetServerMoveDeltaTime_Params.TimeStamp), &TimeStamp, sizeof(TimeStamp));

	this->ProcessEvent(uFnGetServerMoveDeltaTime, &GetServerMoveDeltaTime_Params, nullptr);

	return GetServerMoveDeltaTime_Params.ReturnValue;
};

// Function Engine.PlayerController.OldServerMove
// [0xFFFF000000A20042] (FUNC_Defined | FUNC_Net | FUNC_Public | FUNC_NetServer | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// float                          OldTimeStamp                   (CPF_Parm)
// uint8_t                        OldAccelX                      (CPF_Parm)
// uint8_t                        OldAccelY                      (CPF_Parm)
// uint8_t                        OldAccelZ                      (CPF_Parm)
// uint8_t                        OldMoveFlags                   (CPF_Parm)

void APlayerController::OldServerMove(float OldTimeStamp, uint8_t OldAccelX, uint8_t OldAccelY, uint8_t OldAccelZ, uint8_t OldMoveFlags)
{
	static UFunction* uFnOldServerMove = nullptr;

	if (!uFnOldServerMove)
	{
		uFnOldServerMove = UFunction::FindFunction("Function Engine.PlayerController.OldServerMove");
	}

	APlayerController_execOldServerMove_Params OldServerMove_Params;
	memset(&OldServerMove_Params, 0, sizeof(OldServerMove_Params));
	memcpy_s(&OldServerMove_Params.OldTimeStamp, sizeof(OldServerMove_Params.OldTimeStamp), &OldTimeStamp, sizeof(OldTimeStamp));
	memcpy_s(&OldServerMove_Params.OldAccelX, sizeof(OldServerMove_Params.OldAccelX), &OldAccelX, sizeof(OldAccelX));
	memcpy_s(&OldServerMove_Params.OldAccelY, sizeof(OldServerMove_Params.OldAccelY), &OldAccelY, sizeof(OldAccelY));
	memcpy_s(&OldServerMove_Params.OldAccelZ, sizeof(OldServerMove_Params.OldAccelZ), &OldAccelZ, sizeof(OldAccelZ));
	memcpy_s(&OldServerMove_Params.OldMoveFlags, sizeof(OldServerMove_Params.OldMoveFlags), &OldMoveFlags, sizeof(OldMoveFlags));

	this->ProcessEvent(uFnOldServerMove, &OldServerMove_Params, nullptr);
};

// Function Engine.PlayerController.DualServerMove
// [0xFFFF000000220042] (FUNC_Defined | FUNC_Net | FUNC_Public | FUNC_NetServer | FUNC_AllFlags)
// Parameter Info:
// float                          TimeStamp0                     (CPF_Parm)
// struct FVector                 InAccel0                       (CPF_Parm)
// uint8_t                        PendingFlags                   (CPF_Parm)
// int32_t                        View0                          (CPF_Parm)
// float                          TimeStamp                      (CPF_Parm)
// struct FVector                 InAccel                        (CPF_Parm)
// struct FVector                 ClientLoc                      (CPF_Parm)
// uint8_t                        NewFlags                       (CPF_Parm)
// uint8_t                        ClientRoll                     (CPF_Parm)
// int32_t                        View                           (CPF_Parm)

void APlayerController::DualServerMove(float TimeStamp0, const struct FVector& InAccel0, uint8_t PendingFlags, int32_t View0, float TimeStamp, const struct FVector& InAccel, const struct FVector& ClientLoc, uint8_t NewFlags, uint8_t ClientRoll, int32_t View)
{
	static UFunction* uFnDualServerMove = nullptr;

	if (!uFnDualServerMove)
	{
		uFnDualServerMove = UFunction::FindFunction("Function Engine.PlayerController.DualServerMove");
	}

	APlayerController_execDualServerMove_Params DualServerMove_Params;
	memset(&DualServerMove_Params, 0, sizeof(DualServerMove_Params));
	memcpy_s(&DualServerMove_Params.TimeStamp0, sizeof(DualServerMove_Params.TimeStamp0), &TimeStamp0, sizeof(TimeStamp0));
	memcpy_s(&DualServerMove_Params.InAccel0, sizeof(DualServerMove_Params.InAccel0), &InAccel0, sizeof(InAccel0));
	memcpy_s(&DualServerMove_Params.PendingFlags, sizeof(DualServerMove_Params.PendingFlags), &PendingFlags, sizeof(PendingFlags));
	memcpy_s(&DualServerMove_Params.View0, sizeof(DualServerMove_Params.View0), &View0, sizeof(View0));
	memcpy_s(&DualServerMove_Params.TimeStamp, sizeof(DualServerMove_Params.TimeStamp), &TimeStamp, sizeof(TimeStamp));
	memcpy_s(&DualServerMove_Params.InAccel, sizeof(DualServerMove_Params.InAccel), &InAccel, sizeof(InAccel));
	memcpy_s(&DualServerMove_Params.ClientLoc, sizeof(DualServerMove_Params.ClientLoc), &ClientLoc, sizeof(ClientLoc));
	memcpy_s(&DualServerMove_Params.NewFlags, sizeof(DualServerMove_Params.NewFlags), &NewFlags, sizeof(NewFlags));
	memcpy_s(&DualServerMove_Params.ClientRoll, sizeof(DualServerMove_Params.ClientRoll), &ClientRoll, sizeof(ClientRoll));
	memcpy_s(&DualServerMove_Params.View, sizeof(DualServerMove_Params.View), &View, sizeof(View));

	this->ProcessEvent(uFnDualServerMove, &DualServerMove_Params, nullptr);
};

// Function Engine.PlayerController.ForceDeathUpdate
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void APlayerController::ForceDeathUpdate()
{
	static UFunction* uFnForceDeathUpdate = nullptr;

	if (!uFnForceDeathUpdate)
	{
		uFnForceDeathUpdate = UFunction::FindFunction("Function Engine.PlayerController.ForceDeathUpdate");
	}

	APlayerController_execForceDeathUpdate_Params ForceDeathUpdate_Params;
	memset(&ForceDeathUpdate_Params, 0, sizeof(ForceDeathUpdate_Params));

	this->ProcessEvent(uFnForceDeathUpdate, &ForceDeathUpdate_Params, nullptr);
};

// Function Engine.PlayerController.ClientSetCameraFade
// [0xFFFF0000010249C2] (FUNC_Defined | FUNC_Net | FUNC_NetReliable | FUNC_Simulated | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_NetClient | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bEnableFading                  (CPF_Parm)
// struct FColor                  FadeColor                      (CPF_OptionalParm | CPF_Parm)
// struct FVector2D               FadeAlpha                      (CPF_OptionalParm | CPF_Parm)
// float                          FadeTime                       (CPF_OptionalParm | CPF_Parm)

void APlayerController::eventClientSetCameraFade(bool bEnableFading, const struct FColor& FadeColor, const struct FVector2D& FadeAlpha, float FadeTime)
{
	static UFunction* uFnClientSetCameraFade = nullptr;

	if (!uFnClientSetCameraFade)
	{
		uFnClientSetCameraFade = UFunction::FindFunction("Function Engine.PlayerController.ClientSetCameraFade");
	}

	APlayerController_eventClientSetCameraFade_Params ClientSetCameraFade_Params;
	memset(&ClientSetCameraFade_Params, 0, sizeof(ClientSetCameraFade_Params));
	ClientSetCameraFade_Params.bEnableFading = bEnableFading;
	memcpy_s(&ClientSetCameraFade_Params.FadeColor, sizeof(ClientSetCameraFade_Params.FadeColor), &FadeColor, sizeof(FadeColor));
	memcpy_s(&ClientSetCameraFade_Params.FadeAlpha, sizeof(ClientSetCameraFade_Params.FadeAlpha), &FadeAlpha, sizeof(FadeAlpha));
	memcpy_s(&ClientSetCameraFade_Params.FadeTime, sizeof(ClientSetCameraFade_Params.FadeTime), &FadeTime, sizeof(FadeTime));

	this->ProcessEvent(uFnClientSetCameraFade, &ClientSetCameraFade_Params, nullptr);
};

// Function Engine.PlayerController.ResetCameraMode
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void APlayerController::eventResetCameraMode()
{
	static UFunction* uFnResetCameraMode = nullptr;

	if (!uFnResetCameraMode)
	{
		uFnResetCameraMode = UFunction::FindFunction("Function Engine.PlayerController.ResetCameraMode");
	}

	APlayerController_eventResetCameraMode_Params ResetCameraMode_Params;
	memset(&ResetCameraMode_Params, 0, sizeof(ResetCameraMode_Params));

	this->ProcessEvent(uFnResetCameraMode, &ResetCameraMode_Params, nullptr);
};

// Function Engine.PlayerController.SetCameraMode
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FName                    NewCamMode                     (CPF_Parm)

void APlayerController::SetCameraMode(const class FName& NewCamMode)
{
	static UFunction* uFnSetCameraMode = nullptr;

	if (!uFnSetCameraMode)
	{
		uFnSetCameraMode = UFunction::FindFunction("Function Engine.PlayerController.SetCameraMode");
	}

	APlayerController_execSetCameraMode_Params SetCameraMode_Params;
	memset(&SetCameraMode_Params, 0, sizeof(SetCameraMode_Params));
	memcpy_s(&SetCameraMode_Params.NewCamMode, sizeof(SetCameraMode_Params.NewCamMode), &NewCamMode, sizeof(NewCamMode));

	this->ProcessEvent(uFnSetCameraMode, &SetCameraMode_Params, nullptr);
};

// Function Engine.PlayerController.ClientSetCameraMode
// [0xFFFF0000010201C2] (FUNC_Defined | FUNC_Net | FUNC_NetReliable | FUNC_Simulated | FUNC_Public | FUNC_NetClient | FUNC_AllFlags)
// Parameter Info:
// class FName                    NewCamMode                     (CPF_Parm)

void APlayerController::ClientSetCameraMode(const class FName& NewCamMode)
{
	static UFunction* uFnClientSetCameraMode = nullptr;

	if (!uFnClientSetCameraMode)
	{
		uFnClientSetCameraMode = UFunction::FindFunction("Function Engine.PlayerController.ClientSetCameraMode");
	}

	APlayerController_execClientSetCameraMode_Params ClientSetCameraMode_Params;
	memset(&ClientSetCameraMode_Params, 0, sizeof(ClientSetCameraMode_Params));
	memcpy_s(&ClientSetCameraMode_Params.NewCamMode, sizeof(ClientSetCameraMode_Params.NewCamMode), &NewCamMode, sizeof(NewCamMode));

	this->ProcessEvent(uFnClientSetCameraMode, &ClientSetCameraMode_Params, nullptr);
};

// Function Engine.PlayerController.ServerCamera
// [0xFFFF0000002200C2] (FUNC_Defined | FUNC_Net | FUNC_NetReliable | FUNC_Public | FUNC_NetServer | FUNC_AllFlags)
// Parameter Info:
// class FName                    NewMode                        (CPF_Parm)

void APlayerController::ServerCamera(const class FName& NewMode)
{
	static UFunction* uFnServerCamera = nullptr;

	if (!uFnServerCamera)
	{
		uFnServerCamera = UFunction::FindFunction("Function Engine.PlayerController.ServerCamera");
	}

	APlayerController_execServerCamera_Params ServerCamera_Params;
	memset(&ServerCamera_Params, 0, sizeof(ServerCamera_Params));
	memcpy_s(&ServerCamera_Params.NewMode, sizeof(ServerCamera_Params.NewMode), &NewMode, sizeof(NewMode));

	this->ProcessEvent(uFnServerCamera, &ServerCamera_Params, nullptr);
};

// Function Engine.PlayerController.Camera
// [0x00020200] (FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FName                    NewMode                        (CPF_Parm)

void APlayerController::Camera(const class FName& NewMode)
{
	static UFunction* uFnCamera = nullptr;

	if (!uFnCamera)
	{
		uFnCamera = UFunction::FindFunction("Function Engine.PlayerController.Camera");
	}

	APlayerController_execCamera_Params Camera_Params;
	memset(&Camera_Params, 0, sizeof(Camera_Params));
	memcpy_s(&Camera_Params.NewMode, sizeof(Camera_Params.NewMode), &NewMode, sizeof(NewMode));

	this->ProcessEvent(uFnCamera, &Camera_Params, nullptr);
};

// Function Engine.PlayerController.PreClientTravel
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  PendingURL                     (CPF_Parm | CPF_NeedCtorLink)
// ETravelType                    TravelType                     (CPF_Parm)
// uint32_t                       bIsSeamlessTravel              (CPF_Parm)

void APlayerController::eventPreClientTravel(const class FString& PendingURL, ETravelType TravelType, bool bIsSeamlessTravel)
{
	static UFunction* uFnPreClientTravel = nullptr;

	if (!uFnPreClientTravel)
	{
		uFnPreClientTravel = UFunction::FindFunction("Function Engine.PlayerController.PreClientTravel");
	}

	APlayerController_eventPreClientTravel_Params PreClientTravel_Params;
	memset(&PreClientTravel_Params, 0, sizeof(PreClientTravel_Params));
	memcpy_s(&PreClientTravel_Params.PendingURL, sizeof(PreClientTravel_Params.PendingURL), &PendingURL, sizeof(PendingURL));
	memcpy_s(&PreClientTravel_Params.TravelType, sizeof(PreClientTravel_Params.TravelType), &TravelType, sizeof(TravelType));
	PreClientTravel_Params.bIsSeamlessTravel = bIsSeamlessTravel;

	this->ProcessEvent(uFnPreClientTravel, &PreClientTravel_Params, nullptr);
};

// Function Engine.PlayerController.ServerTeamSay
// [0xFFFF000000220042] (FUNC_Defined | FUNC_Net | FUNC_Public | FUNC_NetServer | FUNC_AllFlags)
// Parameter Info:
// class FString                  Msg                            (CPF_Parm | CPF_NeedCtorLink)

void APlayerController::ServerTeamSay(const class FString& Msg)
{
	static UFunction* uFnServerTeamSay = nullptr;

	if (!uFnServerTeamSay)
	{
		uFnServerTeamSay = UFunction::FindFunction("Function Engine.PlayerController.ServerTeamSay");
	}

	APlayerController_execServerTeamSay_Params ServerTeamSay_Params;
	memset(&ServerTeamSay_Params, 0, sizeof(ServerTeamSay_Params));
	memcpy_s(&ServerTeamSay_Params.Msg, sizeof(ServerTeamSay_Params.Msg), &Msg, sizeof(Msg));

	this->ProcessEvent(uFnServerTeamSay, &ServerTeamSay_Params, nullptr);
};

// Function Engine.PlayerController.TeamSay
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  Msg                            (CPF_Parm | CPF_NeedCtorLink)

void APlayerController::TeamSay(const class FString& Msg)
{
	static UFunction* uFnTeamSay = nullptr;

	if (!uFnTeamSay)
	{
		uFnTeamSay = UFunction::FindFunction("Function Engine.PlayerController.TeamSay");
	}

	APlayerController_execTeamSay_Params TeamSay_Params;
	memset(&TeamSay_Params, 0, sizeof(TeamSay_Params));
	memcpy_s(&TeamSay_Params.Msg, sizeof(TeamSay_Params.Msg), &Msg, sizeof(Msg));

	this->ProcessEvent(uFnTeamSay, &TeamSay_Params, nullptr);
};

// Function Engine.PlayerController.ClientAdminMessage
// [0xFFFF0000010201C2] (FUNC_Defined | FUNC_Net | FUNC_NetReliable | FUNC_Simulated | FUNC_Public | FUNC_NetClient | FUNC_AllFlags)
// Parameter Info:
// class FString                  Msg                            (CPF_Parm | CPF_NeedCtorLink)

void APlayerController::ClientAdminMessage(const class FString& Msg)
{
	static UFunction* uFnClientAdminMessage = nullptr;

	if (!uFnClientAdminMessage)
	{
		uFnClientAdminMessage = UFunction::FindFunction("Function Engine.PlayerController.ClientAdminMessage");
	}

	APlayerController_execClientAdminMessage_Params ClientAdminMessage_Params;
	memset(&ClientAdminMessage_Params, 0, sizeof(ClientAdminMessage_Params));
	memcpy_s(&ClientAdminMessage_Params.Msg, sizeof(ClientAdminMessage_Params.Msg), &Msg, sizeof(Msg));

	this->ProcessEvent(uFnClientAdminMessage, &ClientAdminMessage_Params, nullptr);
};

// Function Engine.PlayerController.ServerSay
// [0xFFFF000000220042] (FUNC_Defined | FUNC_Net | FUNC_Public | FUNC_NetServer | FUNC_AllFlags)
// Parameter Info:
// class FString                  Msg                            (CPF_Parm | CPF_NeedCtorLink)

void APlayerController::ServerSay(const class FString& Msg)
{
	static UFunction* uFnServerSay = nullptr;

	if (!uFnServerSay)
	{
		uFnServerSay = UFunction::FindFunction("Function Engine.PlayerController.ServerSay");
	}

	APlayerController_execServerSay_Params ServerSay_Params;
	memset(&ServerSay_Params, 0, sizeof(ServerSay_Params));
	memcpy_s(&ServerSay_Params.Msg, sizeof(ServerSay_Params.Msg), &Msg, sizeof(Msg));

	this->ProcessEvent(uFnServerSay, &ServerSay_Params, nullptr);
};

// Function Engine.PlayerController.Say
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  Msg                            (CPF_Parm | CPF_NeedCtorLink)

void APlayerController::Say(const class FString& Msg)
{
	static UFunction* uFnSay = nullptr;

	if (!uFnSay)
	{
		uFnSay = UFunction::FindFunction("Function Engine.PlayerController.Say");
	}

	APlayerController_execSay_Params Say_Params;
	memset(&Say_Params, 0, sizeof(Say_Params));
	memcpy_s(&Say_Params.Msg, sizeof(Say_Params.Msg), &Msg, sizeof(Msg));

	this->ProcessEvent(uFnSay, &Say_Params, nullptr);
};

// Function Engine.PlayerController.AllowTextMessage
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FString                  Msg                            (CPF_Parm | CPF_NeedCtorLink)

bool APlayerController::AllowTextMessage(const class FString& Msg)
{
	static UFunction* uFnAllowTextMessage = nullptr;

	if (!uFnAllowTextMessage)
	{
		uFnAllowTextMessage = UFunction::FindFunction("Function Engine.PlayerController.AllowTextMessage");
	}

	APlayerController_execAllowTextMessage_Params AllowTextMessage_Params;
	memset(&AllowTextMessage_Params, 0, sizeof(AllowTextMessage_Params));
	memcpy_s(&AllowTextMessage_Params.Msg, sizeof(AllowTextMessage_Params.Msg), &Msg, sizeof(Msg));

	this->ProcessEvent(uFnAllowTextMessage, &AllowTextMessage_Params, nullptr);

	return AllowTextMessage_Params.ReturnValue;
};

// Function Engine.PlayerController.ServerMutate
// [0xFFFF0000002200C2] (FUNC_Defined | FUNC_Net | FUNC_NetReliable | FUNC_Public | FUNC_NetServer | FUNC_AllFlags)
// Parameter Info:
// class FString                  MutateString                   (CPF_Parm | CPF_NeedCtorLink)

void APlayerController::ServerMutate(const class FString& MutateString)
{
	static UFunction* uFnServerMutate = nullptr;

	if (!uFnServerMutate)
	{
		uFnServerMutate = UFunction::FindFunction("Function Engine.PlayerController.ServerMutate");
	}

	APlayerController_execServerMutate_Params ServerMutate_Params;
	memset(&ServerMutate_Params, 0, sizeof(ServerMutate_Params));
	memcpy_s(&ServerMutate_Params.MutateString, sizeof(ServerMutate_Params.MutateString), &MutateString, sizeof(MutateString));

	this->ProcessEvent(uFnServerMutate, &ServerMutate_Params, nullptr);
};

// Function Engine.PlayerController.Mutate
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  MutateString                   (CPF_Parm | CPF_NeedCtorLink)

void APlayerController::Mutate(const class FString& MutateString)
{
	static UFunction* uFnMutate = nullptr;

	if (!uFnMutate)
	{
		uFnMutate = UFunction::FindFunction("Function Engine.PlayerController.Mutate");
	}

	APlayerController_execMutate_Params Mutate_Params;
	memset(&Mutate_Params, 0, sizeof(Mutate_Params));
	memcpy_s(&Mutate_Params.MutateString, sizeof(Mutate_Params.MutateString), &MutateString, sizeof(MutateString));

	this->ProcessEvent(uFnMutate, &Mutate_Params, nullptr);
};

// Function Engine.PlayerController.FOV
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          F                              (CPF_Parm)

void APlayerController::FOV(float F)
{
	static UFunction* uFnFOV = nullptr;

	if (!uFnFOV)
	{
		uFnFOV = UFunction::FindFunction("Function Engine.PlayerController.FOV");
	}

	APlayerController_execFOV_Params FOV_Params;
	memset(&FOV_Params, 0, sizeof(FOV_Params));
	memcpy_s(&FOV_Params.F, sizeof(FOV_Params.F), &F, sizeof(F));

	this->ProcessEvent(uFnFOV, &FOV_Params, nullptr);
};

// Function Engine.PlayerController.FixFOV
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void APlayerController::FixFOV()
{
	static UFunction* uFnFixFOV = nullptr;

	if (!uFnFixFOV)
	{
		uFnFixFOV = UFunction::FindFunction("Function Engine.PlayerController.FixFOV");
	}

	APlayerController_execFixFOV_Params FixFOV_Params;
	memset(&FixFOV_Params, 0, sizeof(FixFOV_Params));

	this->ProcessEvent(uFnFixFOV, &FixFOV_Params, nullptr);
};

// Function Engine.PlayerController.Destroyed
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void APlayerController::eventDestroyed()
{
	static UFunction* uFnDestroyed = nullptr;

	if (!uFnDestroyed)
	{
		uFnDestroyed = UFunction::FindFunction("Function Engine.PlayerController.Destroyed");
	}

	APlayerController_eventDestroyed_Params Destroyed_Params;
	memset(&Destroyed_Params, 0, sizeof(Destroyed_Params));

	this->ProcessEvent(uFnDestroyed, &Destroyed_Params, nullptr);
};

// Function Engine.PlayerController.CleanupPawn
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void APlayerController::CleanupPawn()
{
	static UFunction* uFnCleanupPawn = nullptr;

	if (!uFnCleanupPawn)
	{
		uFnCleanupPawn = UFunction::FindFunction("Function Engine.PlayerController.CleanupPawn");
	}

	APlayerController_execCleanupPawn_Params CleanupPawn_Params;
	memset(&CleanupPawn_Params, 0, sizeof(CleanupPawn_Params));

	this->ProcessEvent(uFnCleanupPawn, &CleanupPawn_Params, nullptr);
};

// Function Engine.PlayerController.ClearOnlineDelegates
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void APlayerController::eventClearOnlineDelegates()
{
	static UFunction* uFnClearOnlineDelegates = nullptr;

	if (!uFnClearOnlineDelegates)
	{
		uFnClearOnlineDelegates = UFunction::FindFunction("Function Engine.PlayerController.ClearOnlineDelegates");
	}

	APlayerController_eventClearOnlineDelegates_Params ClearOnlineDelegates_Params;
	memset(&ClearOnlineDelegates_Params, 0, sizeof(ClearOnlineDelegates_Params));

	this->ProcessEvent(uFnClearOnlineDelegates, &ClearOnlineDelegates_Params, nullptr);
};

// Function Engine.PlayerController.OnPartyMembersInfoChanged
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  playerName                     (CPF_Parm | CPF_NeedCtorLink)
// struct FUniqueNetId            PlayerID                       (CPF_Parm)
// int32_t                        CustomData1                    (CPF_Parm)
// int32_t                        CustomData2                    (CPF_Parm)
// int32_t                        CustomData3                    (CPF_Parm)
// int32_t                        CustomData4                    (CPF_Parm)

void APlayerController::OnPartyMembersInfoChanged(const class FString& playerName, const struct FUniqueNetId& PlayerID, int32_t CustomData1, int32_t CustomData2, int32_t CustomData3, int32_t CustomData4)
{
	static UFunction* uFnOnPartyMembersInfoChanged = nullptr;

	if (!uFnOnPartyMembersInfoChanged)
	{
		uFnOnPartyMembersInfoChanged = UFunction::FindFunction("Function Engine.PlayerController.OnPartyMembersInfoChanged");
	}

	APlayerController_execOnPartyMembersInfoChanged_Params OnPartyMembersInfoChanged_Params;
	memset(&OnPartyMembersInfoChanged_Params, 0, sizeof(OnPartyMembersInfoChanged_Params));
	memcpy_s(&OnPartyMembersInfoChanged_Params.playerName, sizeof(OnPartyMembersInfoChanged_Params.playerName), &playerName, sizeof(playerName));
	memcpy_s(&OnPartyMembersInfoChanged_Params.PlayerID, sizeof(OnPartyMembersInfoChanged_Params.PlayerID), &PlayerID, sizeof(PlayerID));
	memcpy_s(&OnPartyMembersInfoChanged_Params.CustomData1, sizeof(OnPartyMembersInfoChanged_Params.CustomData1), &CustomData1, sizeof(CustomData1));
	memcpy_s(&OnPartyMembersInfoChanged_Params.CustomData2, sizeof(OnPartyMembersInfoChanged_Params.CustomData2), &CustomData2, sizeof(CustomData2));
	memcpy_s(&OnPartyMembersInfoChanged_Params.CustomData3, sizeof(OnPartyMembersInfoChanged_Params.CustomData3), &CustomData3, sizeof(CustomData3));
	memcpy_s(&OnPartyMembersInfoChanged_Params.CustomData4, sizeof(OnPartyMembersInfoChanged_Params.CustomData4), &CustomData4, sizeof(CustomData4));

	this->ProcessEvent(uFnOnPartyMembersInfoChanged, &OnPartyMembersInfoChanged_Params, nullptr);
};

// Function Engine.PlayerController.OnPartyMemberListChanged
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bJoinedOrLeft                  (CPF_Parm)
// class FString                  playerName                     (CPF_Parm | CPF_NeedCtorLink)
// struct FUniqueNetId            PlayerID                       (CPF_Parm)

void APlayerController::OnPartyMemberListChanged(bool bJoinedOrLeft, const class FString& playerName, const struct FUniqueNetId& PlayerID)
{
	static UFunction* uFnOnPartyMemberListChanged = nullptr;

	if (!uFnOnPartyMemberListChanged)
	{
		uFnOnPartyMemberListChanged = UFunction::FindFunction("Function Engine.PlayerController.OnPartyMemberListChanged");
	}

	APlayerController_execOnPartyMemberListChanged_Params OnPartyMemberListChanged_Params;
	memset(&OnPartyMemberListChanged_Params, 0, sizeof(OnPartyMemberListChanged_Params));
	OnPartyMemberListChanged_Params.bJoinedOrLeft = bJoinedOrLeft;
	memcpy_s(&OnPartyMemberListChanged_Params.playerName, sizeof(OnPartyMemberListChanged_Params.playerName), &playerName, sizeof(playerName));
	memcpy_s(&OnPartyMemberListChanged_Params.PlayerID, sizeof(OnPartyMemberListChanged_Params.PlayerID), &PlayerID, sizeof(PlayerID));

	this->ProcessEvent(uFnOnPartyMemberListChanged, &OnPartyMemberListChanged_Params, nullptr);
};

// Function Engine.PlayerController.RegisterOnlineDelegates
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void APlayerController::RegisterOnlineDelegates()
{
	static UFunction* uFnRegisterOnlineDelegates = nullptr;

	if (!uFnRegisterOnlineDelegates)
	{
		uFnRegisterOnlineDelegates = UFunction::FindFunction("Function Engine.PlayerController.RegisterOnlineDelegates");
	}

	APlayerController_execRegisterOnlineDelegates_Params RegisterOnlineDelegates_Params;
	memset(&RegisterOnlineDelegates_Params, 0, sizeof(RegisterOnlineDelegates_Params));

	this->ProcessEvent(uFnRegisterOnlineDelegates, &RegisterOnlineDelegates_Params, nullptr);
};

// Function Engine.PlayerController.PlayBeepSound
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void APlayerController::PlayBeepSound()
{
	static UFunction* uFnPlayBeepSound = nullptr;

	if (!uFnPlayBeepSound)
	{
		uFnPlayBeepSound = UFunction::FindFunction("Function Engine.PlayerController.PlayBeepSound");
	}

	APlayerController_execPlayBeepSound_Params PlayBeepSound_Params;
	memset(&PlayBeepSound_Params, 0, sizeof(PlayBeepSound_Params));

	this->ProcessEvent(uFnPlayBeepSound, &PlayBeepSound_Params, nullptr);
};

// Function Engine.PlayerController.TeamMessage
// [0xFFFF0000010249C2] (FUNC_Defined | FUNC_Net | FUNC_NetReliable | FUNC_Simulated | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_NetClient | FUNC_AllFlags)
// Parameter Info:
// class FString                  S                              (CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink)
// class FName                    Type                           (CPF_Parm)
// float                          MsgLifeTime                    (CPF_OptionalParm | CPF_Parm)

void APlayerController::eventTeamMessage(const class FString& S, const class FName& Type, float MsgLifeTime)
{
	static UFunction* uFnTeamMessage = nullptr;

	if (!uFnTeamMessage)
	{
		uFnTeamMessage = UFunction::FindFunction("Function Engine.PlayerController.TeamMessage");
	}

	APlayerController_eventTeamMessage_Params TeamMessage_Params;
	memset(&TeamMessage_Params, 0, sizeof(TeamMessage_Params));
	memcpy_s(&TeamMessage_Params.S, sizeof(TeamMessage_Params.S), &S, sizeof(S));
	memcpy_s(&TeamMessage_Params.Type, sizeof(TeamMessage_Params.Type), &Type, sizeof(Type));
	memcpy_s(&TeamMessage_Params.MsgLifeTime, sizeof(TeamMessage_Params.MsgLifeTime), &MsgLifeTime, sizeof(MsgLifeTime));

	this->ProcessEvent(uFnTeamMessage, &TeamMessage_Params, nullptr);
};

// Function Engine.PlayerController.CanCommunicate
// [0x00040103] (FUNC_Final | FUNC_Defined | FUNC_Simulated | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool APlayerController::CanCommunicate()
{
	static UFunction* uFnCanCommunicate = nullptr;

	if (!uFnCanCommunicate)
	{
		uFnCanCommunicate = UFunction::FindFunction("Function Engine.PlayerController.CanCommunicate");
	}

	APlayerController_execCanCommunicate_Params CanCommunicate_Params;
	memset(&CanCommunicate_Params, 0, sizeof(CanCommunicate_Params));

	this->ProcessEvent(uFnCanCommunicate, &CanCommunicate_Params, nullptr);

	return CanCommunicate_Params.ReturnValue;
};

// Function Engine.PlayerController.ClientMessage
// [0xFFFF0000010249C2] (FUNC_Defined | FUNC_Net | FUNC_NetReliable | FUNC_Simulated | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_NetClient | FUNC_AllFlags)
// Parameter Info:
// class FString                  S                              (CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink)
// class FName                    Type                           (CPF_OptionalParm | CPF_Parm)
// float                          MsgLifeTime                    (CPF_OptionalParm | CPF_Parm)

void APlayerController::eventClientMessage(const class FString& S, const class FName& Type, float MsgLifeTime)
{
	static UFunction* uFnClientMessage = nullptr;

	if (!uFnClientMessage)
	{
		uFnClientMessage = UFunction::FindFunction("Function Engine.PlayerController.ClientMessage");
	}

	APlayerController_eventClientMessage_Params ClientMessage_Params;
	memset(&ClientMessage_Params, 0, sizeof(ClientMessage_Params));
	memcpy_s(&ClientMessage_Params.S, sizeof(ClientMessage_Params.S), &S, sizeof(S));
	memcpy_s(&ClientMessage_Params.Type, sizeof(ClientMessage_Params.Type), &Type, sizeof(Type));
	memcpy_s(&ClientMessage_Params.MsgLifeTime, sizeof(ClientMessage_Params.MsgLifeTime), &MsgLifeTime, sizeof(MsgLifeTime));

	this->ProcessEvent(uFnClientMessage, &ClientMessage_Params, nullptr);
};

// Function Engine.PlayerController.ClientPlayActorFaceFXAnim
// [0xFFFF0000010201C2] (FUNC_Defined | FUNC_Net | FUNC_NetReliable | FUNC_Simulated | FUNC_Public | FUNC_NetClient | FUNC_AllFlags)
// Parameter Info:
// class AActor*                  SourceActor                    (CPF_Parm)
// class UFaceFXAnimSet*          AnimSet                        (CPF_Parm)
// class FString                  GroupName                      (CPF_Parm | CPF_NeedCtorLink)
// class FString                  SeqName                        (CPF_Parm | CPF_NeedCtorLink)
// class UAkEvent*                AkEventToPlay                  (CPF_Parm)

void APlayerController::ClientPlayActorFaceFXAnim(class AActor* SourceActor, class UFaceFXAnimSet* AnimSet, const class FString& GroupName, const class FString& SeqName, class UAkEvent* AkEventToPlay)
{
	static UFunction* uFnClientPlayActorFaceFXAnim = nullptr;

	if (!uFnClientPlayActorFaceFXAnim)
	{
		uFnClientPlayActorFaceFXAnim = UFunction::FindFunction("Function Engine.PlayerController.ClientPlayActorFaceFXAnim");
	}

	APlayerController_execClientPlayActorFaceFXAnim_Params ClientPlayActorFaceFXAnim_Params;
	memset(&ClientPlayActorFaceFXAnim_Params, 0, sizeof(ClientPlayActorFaceFXAnim_Params));
	ClientPlayActorFaceFXAnim_Params.SourceActor = SourceActor;
	ClientPlayActorFaceFXAnim_Params.AnimSet = AnimSet;
	memcpy_s(&ClientPlayActorFaceFXAnim_Params.GroupName, sizeof(ClientPlayActorFaceFXAnim_Params.GroupName), &GroupName, sizeof(GroupName));
	memcpy_s(&ClientPlayActorFaceFXAnim_Params.SeqName, sizeof(ClientPlayActorFaceFXAnim_Params.SeqName), &SeqName, sizeof(SeqName));
	ClientPlayActorFaceFXAnim_Params.AkEventToPlay = AkEventToPlay;

	this->ProcessEvent(uFnClientPlayActorFaceFXAnim, &ClientPlayActorFaceFXAnim_Params, nullptr);
};

// Function Engine.PlayerController.ReceiveLocalizedMessage
// [0xFFFF0000010249C2] (FUNC_Defined | FUNC_Net | FUNC_NetReliable | FUNC_Simulated | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_NetClient | FUNC_AllFlags)
// Parameter Info:
// class ULocalMessage*           Message                        (CPF_Parm)
// int32_t                        Switch                         (CPF_OptionalParm | CPF_Parm)
// class UObject*                 OptionalObject                 (CPF_OptionalParm | CPF_Parm)

void APlayerController::eventReceiveLocalizedMessage(class ULocalMessage* Message, int32_t Switch, class UObject* OptionalObject)
{
	static UFunction* uFnReceiveLocalizedMessage = nullptr;

	if (!uFnReceiveLocalizedMessage)
	{
		uFnReceiveLocalizedMessage = UFunction::FindFunction("Function Engine.PlayerController.ReceiveLocalizedMessage");
	}

	APlayerController_eventReceiveLocalizedMessage_Params ReceiveLocalizedMessage_Params;
	memset(&ReceiveLocalizedMessage_Params, 0, sizeof(ReceiveLocalizedMessage_Params));
	ReceiveLocalizedMessage_Params.Message = Message;
	memcpy_s(&ReceiveLocalizedMessage_Params.Switch, sizeof(ReceiveLocalizedMessage_Params.Switch), &Switch, sizeof(Switch));
	ReceiveLocalizedMessage_Params.OptionalObject = OptionalObject;

	this->ProcessEvent(uFnReceiveLocalizedMessage, &ReceiveLocalizedMessage_Params, nullptr);
};

// Function Engine.PlayerController.ClientSetHUD
// [0xFFFF0000010201C2] (FUNC_Defined | FUNC_Net | FUNC_NetReliable | FUNC_Simulated | FUNC_Public | FUNC_NetClient | FUNC_AllFlags)
// Parameter Info:
// class AHUD*                    newHUDType                     (CPF_Parm)

void APlayerController::ClientSetHUD(class AHUD* newHUDType)
{
	static UFunction* uFnClientSetHUD = nullptr;

	if (!uFnClientSetHUD)
	{
		uFnClientSetHUD = UFunction::FindFunction("Function Engine.PlayerController.ClientSetHUD");
	}

	APlayerController_execClientSetHUD_Params ClientSetHUD_Params;
	memset(&ClientSetHUD_Params, 0, sizeof(ClientSetHUD_Params));
	ClientSetHUD_Params.newHUDType = newHUDType;

	this->ProcessEvent(uFnClientSetHUD, &ClientSetHUD_Params, nullptr);
};

// Function Engine.PlayerController.PawnDied
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class APawn*                   P                              (CPF_Parm)

void APlayerController::PawnDied(class APawn* P)
{
	static UFunction* uFnPawnDied = nullptr;

	if (!uFnPawnDied)
	{
		uFnPawnDied = UFunction::FindFunction("Function Engine.PlayerController.PawnDied");
	}

	APlayerController_execPawnDied_Params PawnDied_Params;
	memset(&PawnDied_Params, 0, sizeof(PawnDied_Params));
	PawnDied_Params.P = P;

	this->ProcessEvent(uFnPawnDied, &PawnDied_Params, nullptr);
};

// Function Engine.PlayerController.ServerAcknowledgePossession
// [0xFFFF0000002200C2] (FUNC_Defined | FUNC_Net | FUNC_NetReliable | FUNC_Public | FUNC_NetServer | FUNC_AllFlags)
// Parameter Info:
// class APawn*                   P                              (CPF_Parm)

void APlayerController::ServerAcknowledgePossession(class APawn* P)
{
	static UFunction* uFnServerAcknowledgePossession = nullptr;

	if (!uFnServerAcknowledgePossession)
	{
		uFnServerAcknowledgePossession = UFunction::FindFunction("Function Engine.PlayerController.ServerAcknowledgePossession");
	}

	APlayerController_execServerAcknowledgePossession_Params ServerAcknowledgePossession_Params;
	memset(&ServerAcknowledgePossession_Params, 0, sizeof(ServerAcknowledgePossession_Params));
	ServerAcknowledgePossession_Params.P = P;

	this->ProcessEvent(uFnServerAcknowledgePossession, &ServerAcknowledgePossession_Params, nullptr);
};

// Function Engine.PlayerController.AcknowledgePossession
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class APawn*                   P                              (CPF_Parm)

void APlayerController::eventAcknowledgePossession(class APawn* P)
{
	static UFunction* uFnAcknowledgePossession = nullptr;

	if (!uFnAcknowledgePossession)
	{
		uFnAcknowledgePossession = UFunction::FindFunction("Function Engine.PlayerController.AcknowledgePossession");
	}

	APlayerController_eventAcknowledgePossession_Params AcknowledgePossession_Params;
	memset(&AcknowledgePossession_Params, 0, sizeof(AcknowledgePossession_Params));
	AcknowledgePossession_Params.P = P;

	this->ProcessEvent(uFnAcknowledgePossession, &AcknowledgePossession_Params, nullptr);
};

// Function Engine.PlayerController.GivePawn
// [0xFFFF0000010201C2] (FUNC_Defined | FUNC_Net | FUNC_NetReliable | FUNC_Simulated | FUNC_Public | FUNC_NetClient | FUNC_AllFlags)
// Parameter Info:
// class APawn*                   NewPawn                        (CPF_Parm)

void APlayerController::GivePawn(class APawn* NewPawn)
{
	static UFunction* uFnGivePawn = nullptr;

	if (!uFnGivePawn)
	{
		uFnGivePawn = UFunction::FindFunction("Function Engine.PlayerController.GivePawn");
	}

	APlayerController_execGivePawn_Params GivePawn_Params;
	memset(&GivePawn_Params, 0, sizeof(GivePawn_Params));
	GivePawn_Params.NewPawn = NewPawn;

	this->ProcessEvent(uFnGivePawn, &GivePawn_Params, nullptr);
};

// Function Engine.PlayerController.AskForPawn
// [0xFFFF0000002200C2] (FUNC_Defined | FUNC_Net | FUNC_NetReliable | FUNC_Public | FUNC_NetServer | FUNC_AllFlags)
// Parameter Info:

void APlayerController::AskForPawn()
{
	static UFunction* uFnAskForPawn = nullptr;

	if (!uFnAskForPawn)
	{
		uFnAskForPawn = UFunction::FindFunction("Function Engine.PlayerController.AskForPawn");
	}

	APlayerController_execAskForPawn_Params AskForPawn_Params;
	memset(&AskForPawn_Params, 0, sizeof(AskForPawn_Params));

	this->ProcessEvent(uFnAskForPawn, &AskForPawn_Params, nullptr);
};

// Function Engine.PlayerController.ClientGotoState
// [0xFFFF0000010241C2] (FUNC_Defined | FUNC_Net | FUNC_NetReliable | FUNC_Simulated | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_NetClient | FUNC_AllFlags)
// Parameter Info:
// class FName                    NewState                       (CPF_Parm)
// class FName                    NewLabel                       (CPF_OptionalParm | CPF_Parm)

void APlayerController::ClientGotoState(const class FName& NewState, const class FName& NewLabel)
{
	static UFunction* uFnClientGotoState = nullptr;

	if (!uFnClientGotoState)
	{
		uFnClientGotoState = UFunction::FindFunction("Function Engine.PlayerController.ClientGotoState");
	}

	APlayerController_execClientGotoState_Params ClientGotoState_Params;
	memset(&ClientGotoState_Params, 0, sizeof(ClientGotoState_Params));
	memcpy_s(&ClientGotoState_Params.NewState, sizeof(ClientGotoState_Params.NewState), &NewState, sizeof(NewState));
	memcpy_s(&ClientGotoState_Params.NewLabel, sizeof(ClientGotoState_Params.NewLabel), &NewLabel, sizeof(NewLabel));

	this->ProcessEvent(uFnClientGotoState, &ClientGotoState_Params, nullptr);
};

// Function Engine.PlayerController.IsMouseAvailable
// [0x00020500] (FUNC_Simulated | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[21405])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool APlayerController::IsMouseAvailable()
{
	static UFunction* uFnIsMouseAvailable = nullptr;

	if (!uFnIsMouseAvailable)
	{
		uFnIsMouseAvailable = UFunction::FindFunction("Function Engine.PlayerController.IsMouseAvailable");
	}

	APlayerController_execIsMouseAvailable_Params IsMouseAvailable_Params;
	memset(&IsMouseAvailable_Params, 0, sizeof(IsMouseAvailable_Params));

	uFnIsMouseAvailable->iNative = 0;
	uFnIsMouseAvailable->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnIsMouseAvailable, &IsMouseAvailable_Params, nullptr);
	uFnIsMouseAvailable->FunctionFlags |= 0x400;
	uFnIsMouseAvailable->iNative = 21405;

	return IsMouseAvailable_Params.ReturnValue;
};

// Function Engine.PlayerController.IsKeyboardAvailable
// [0x00020500] (FUNC_Simulated | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[21398])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool APlayerController::IsKeyboardAvailable()
{
	static UFunction* uFnIsKeyboardAvailable = nullptr;

	if (!uFnIsKeyboardAvailable)
	{
		uFnIsKeyboardAvailable = UFunction::FindFunction("Function Engine.PlayerController.IsKeyboardAvailable");
	}

	APlayerController_execIsKeyboardAvailable_Params IsKeyboardAvailable_Params;
	memset(&IsKeyboardAvailable_Params, 0, sizeof(IsKeyboardAvailable_Params));

	uFnIsKeyboardAvailable->iNative = 0;
	uFnIsKeyboardAvailable->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnIsKeyboardAvailable, &IsKeyboardAvailable_Params, nullptr);
	uFnIsKeyboardAvailable->FunctionFlags |= 0x400;
	uFnIsKeyboardAvailable->iNative = 21398;

	return IsKeyboardAvailable_Params.ReturnValue;
};

// Function Engine.PlayerController.SetUseTiltForwardAndBack
// [0x00020500] (FUNC_Simulated | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25831])
// Parameter Info:
// uint32_t                       bActive                        (CPF_Parm)

void APlayerController::SetUseTiltForwardAndBack(bool bActive)
{
	static UFunction* uFnSetUseTiltForwardAndBack = nullptr;

	if (!uFnSetUseTiltForwardAndBack)
	{
		uFnSetUseTiltForwardAndBack = UFunction::FindFunction("Function Engine.PlayerController.SetUseTiltForwardAndBack");
	}

	APlayerController_execSetUseTiltForwardAndBack_Params SetUseTiltForwardAndBack_Params;
	memset(&SetUseTiltForwardAndBack_Params, 0, sizeof(SetUseTiltForwardAndBack_Params));
	SetUseTiltForwardAndBack_Params.bActive = bActive;

	uFnSetUseTiltForwardAndBack->iNative = 0;
	uFnSetUseTiltForwardAndBack->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetUseTiltForwardAndBack, &SetUseTiltForwardAndBack_Params, nullptr);
	uFnSetUseTiltForwardAndBack->FunctionFlags |= 0x400;
	uFnSetUseTiltForwardAndBack->iNative = 25831;
};

// Function Engine.PlayerController.SetOnlyUseControllerTiltInput
// [0x00020500] (FUNC_Simulated | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25728])
// Parameter Info:
// uint32_t                       bActive                        (CPF_Parm)

void APlayerController::SetOnlyUseControllerTiltInput(bool bActive)
{
	static UFunction* uFnSetOnlyUseControllerTiltInput = nullptr;

	if (!uFnSetOnlyUseControllerTiltInput)
	{
		uFnSetOnlyUseControllerTiltInput = UFunction::FindFunction("Function Engine.PlayerController.SetOnlyUseControllerTiltInput");
	}

	APlayerController_execSetOnlyUseControllerTiltInput_Params SetOnlyUseControllerTiltInput_Params;
	memset(&SetOnlyUseControllerTiltInput_Params, 0, sizeof(SetOnlyUseControllerTiltInput_Params));
	SetOnlyUseControllerTiltInput_Params.bActive = bActive;

	uFnSetOnlyUseControllerTiltInput->iNative = 0;
	uFnSetOnlyUseControllerTiltInput->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetOnlyUseControllerTiltInput, &SetOnlyUseControllerTiltInput_Params, nullptr);
	uFnSetOnlyUseControllerTiltInput->FunctionFlags |= 0x400;
	uFnSetOnlyUseControllerTiltInput->iNative = 25728;
};

// Function Engine.PlayerController.SetControllerTiltActive
// [0x00020500] (FUNC_Simulated | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25622])
// Parameter Info:
// uint32_t                       bActive                        (CPF_Parm)

void APlayerController::SetControllerTiltActive(bool bActive)
{
	static UFunction* uFnSetControllerTiltActive = nullptr;

	if (!uFnSetControllerTiltActive)
	{
		uFnSetControllerTiltActive = UFunction::FindFunction("Function Engine.PlayerController.SetControllerTiltActive");
	}

	APlayerController_execSetControllerTiltActive_Params SetControllerTiltActive_Params;
	memset(&SetControllerTiltActive_Params, 0, sizeof(SetControllerTiltActive_Params));
	SetControllerTiltActive_Params.bActive = bActive;

	uFnSetControllerTiltActive->iNative = 0;
	uFnSetControllerTiltActive->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetControllerTiltActive, &SetControllerTiltActive_Params, nullptr);
	uFnSetControllerTiltActive->FunctionFlags |= 0x400;
	uFnSetControllerTiltActive->iNative = 25622;
};

// Function Engine.PlayerController.SetControllerTiltDesiredIfAvailable
// [0x00020500] (FUNC_Simulated | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25623])
// Parameter Info:
// uint32_t                       bActive                        (CPF_Parm)

void APlayerController::SetControllerTiltDesiredIfAvailable(bool bActive)
{
	static UFunction* uFnSetControllerTiltDesiredIfAvailable = nullptr;

	if (!uFnSetControllerTiltDesiredIfAvailable)
	{
		uFnSetControllerTiltDesiredIfAvailable = UFunction::FindFunction("Function Engine.PlayerController.SetControllerTiltDesiredIfAvailable");
	}

	APlayerController_execSetControllerTiltDesiredIfAvailable_Params SetControllerTiltDesiredIfAvailable_Params;
	memset(&SetControllerTiltDesiredIfAvailable_Params, 0, sizeof(SetControllerTiltDesiredIfAvailable_Params));
	SetControllerTiltDesiredIfAvailable_Params.bActive = bActive;

	uFnSetControllerTiltDesiredIfAvailable->iNative = 0;
	uFnSetControllerTiltDesiredIfAvailable->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetControllerTiltDesiredIfAvailable, &SetControllerTiltDesiredIfAvailable_Params, nullptr);
	uFnSetControllerTiltDesiredIfAvailable->FunctionFlags |= 0x400;
	uFnSetControllerTiltDesiredIfAvailable->iNative = 25623;
};

// Function Engine.PlayerController.IsControllerTiltActive
// [0x00020500] (FUNC_Simulated | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[21369])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool APlayerController::IsControllerTiltActive()
{
	static UFunction* uFnIsControllerTiltActive = nullptr;

	if (!uFnIsControllerTiltActive)
	{
		uFnIsControllerTiltActive = UFunction::FindFunction("Function Engine.PlayerController.IsControllerTiltActive");
	}

	APlayerController_execIsControllerTiltActive_Params IsControllerTiltActive_Params;
	memset(&IsControllerTiltActive_Params, 0, sizeof(IsControllerTiltActive_Params));

	uFnIsControllerTiltActive->iNative = 0;
	uFnIsControllerTiltActive->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnIsControllerTiltActive, &IsControllerTiltActive_Params, nullptr);
	uFnIsControllerTiltActive->FunctionFlags |= 0x400;
	uFnIsControllerTiltActive->iNative = 21369;

	return IsControllerTiltActive_Params.ReturnValue;
};

// Function Engine.PlayerController.ReloadProfileSettings
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void APlayerController::ReloadProfileSettings()
{
	static UFunction* uFnReloadProfileSettings = nullptr;

	if (!uFnReloadProfileSettings)
	{
		uFnReloadProfileSettings = UFunction::FindFunction("Function Engine.PlayerController.ReloadProfileSettings");
	}

	APlayerController_execReloadProfileSettings_Params ReloadProfileSettings_Params;
	memset(&ReloadProfileSettings_Params, 0, sizeof(ReloadProfileSettings_Params));

	this->ProcessEvent(uFnReloadProfileSettings, &ReloadProfileSettings_Params, nullptr);
};

// Function Engine.PlayerController.UnregisterStandardPlayerDataStores
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void APlayerController::UnregisterStandardPlayerDataStores()
{
	static UFunction* uFnUnregisterStandardPlayerDataStores = nullptr;

	if (!uFnUnregisterStandardPlayerDataStores)
	{
		uFnUnregisterStandardPlayerDataStores = UFunction::FindFunction("Function Engine.PlayerController.UnregisterStandardPlayerDataStores");
	}

	APlayerController_execUnregisterStandardPlayerDataStores_Params UnregisterStandardPlayerDataStores_Params;
	memset(&UnregisterStandardPlayerDataStores_Params, 0, sizeof(UnregisterStandardPlayerDataStores_Params));

	this->ProcessEvent(uFnUnregisterStandardPlayerDataStores, &UnregisterStandardPlayerDataStores_Params, nullptr);
};

// Function Engine.PlayerController.UnregisterPlayerDataStores
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void APlayerController::UnregisterPlayerDataStores()
{
	static UFunction* uFnUnregisterPlayerDataStores = nullptr;

	if (!uFnUnregisterPlayerDataStores)
	{
		uFnUnregisterPlayerDataStores = UFunction::FindFunction("Function Engine.PlayerController.UnregisterPlayerDataStores");
	}

	APlayerController_execUnregisterPlayerDataStores_Params UnregisterPlayerDataStores_Params;
	memset(&UnregisterPlayerDataStores_Params, 0, sizeof(UnregisterPlayerDataStores_Params));

	this->ProcessEvent(uFnUnregisterPlayerDataStores, &UnregisterPlayerDataStores_Params, nullptr);
};

// Function Engine.PlayerController.RegisterStandardPlayerDataStores
// [0x00080102] (FUNC_Defined | FUNC_Simulated | FUNC_Protected | FUNC_AllFlags)
// Parameter Info:

void APlayerController::RegisterStandardPlayerDataStores()
{
	static UFunction* uFnRegisterStandardPlayerDataStores = nullptr;

	if (!uFnRegisterStandardPlayerDataStores)
	{
		uFnRegisterStandardPlayerDataStores = UFunction::FindFunction("Function Engine.PlayerController.RegisterStandardPlayerDataStores");
	}

	APlayerController_execRegisterStandardPlayerDataStores_Params RegisterStandardPlayerDataStores_Params;
	memset(&RegisterStandardPlayerDataStores_Params, 0, sizeof(RegisterStandardPlayerDataStores_Params));

	this->ProcessEvent(uFnRegisterStandardPlayerDataStores, &RegisterStandardPlayerDataStores_Params, nullptr);
};

// Function Engine.PlayerController.RegisterCustomPlayerDataStores
// [0x00080102] (FUNC_Defined | FUNC_Simulated | FUNC_Protected | FUNC_AllFlags)
// Parameter Info:

void APlayerController::RegisterCustomPlayerDataStores()
{
	static UFunction* uFnRegisterCustomPlayerDataStores = nullptr;

	if (!uFnRegisterCustomPlayerDataStores)
	{
		uFnRegisterCustomPlayerDataStores = UFunction::FindFunction("Function Engine.PlayerController.RegisterCustomPlayerDataStores");
	}

	APlayerController_execRegisterCustomPlayerDataStores_Params RegisterCustomPlayerDataStores_Params;
	memset(&RegisterCustomPlayerDataStores_Params, 0, sizeof(RegisterCustomPlayerDataStores_Params));

	this->ProcessEvent(uFnRegisterCustomPlayerDataStores, &RegisterCustomPlayerDataStores_Params, nullptr);
};

// Function Engine.PlayerController.RegisterPlayerDataStores
// [0x00020103] (FUNC_Final | FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void APlayerController::RegisterPlayerDataStores()
{
	static UFunction* uFnRegisterPlayerDataStores = nullptr;

	if (!uFnRegisterPlayerDataStores)
	{
		uFnRegisterPlayerDataStores = UFunction::FindFunction("Function Engine.PlayerController.RegisterPlayerDataStores");
	}

	APlayerController_execRegisterPlayerDataStores_Params RegisterPlayerDataStores_Params;
	memset(&RegisterPlayerDataStores_Params, 0, sizeof(RegisterPlayerDataStores_Params));

	this->ProcessEvent(uFnRegisterPlayerDataStores, &RegisterPlayerDataStores_Params, nullptr);
};

// Function Engine.PlayerController.ClientInitializeDataStores
// [0xFFFF0000010201C2] (FUNC_Defined | FUNC_Net | FUNC_NetReliable | FUNC_Simulated | FUNC_Public | FUNC_NetClient | FUNC_AllFlags)
// Parameter Info:

void APlayerController::ClientInitializeDataStores()
{
	static UFunction* uFnClientInitializeDataStores = nullptr;

	if (!uFnClientInitializeDataStores)
	{
		uFnClientInitializeDataStores = UFunction::FindFunction("Function Engine.PlayerController.ClientInitializeDataStores");
	}

	APlayerController_execClientInitializeDataStores_Params ClientInitializeDataStores_Params;
	memset(&ClientInitializeDataStores_Params, 0, sizeof(ClientInitializeDataStores_Params));

	this->ProcessEvent(uFnClientInitializeDataStores, &ClientInitializeDataStores_Params, nullptr);
};

// Function Engine.PlayerController.InitInputSystem
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void APlayerController::eventInitInputSystem()
{
	static UFunction* uFnInitInputSystem = nullptr;

	if (!uFnInitInputSystem)
	{
		uFnInitInputSystem = UFunction::FindFunction("Function Engine.PlayerController.InitInputSystem");
	}

	APlayerController_eventInitInputSystem_Params InitInputSystem_Params;
	memset(&InitInputSystem_Params, 0, sizeof(InitInputSystem_Params));

	this->ProcessEvent(uFnInitInputSystem, &InitInputSystem_Params, nullptr);
};

// Function Engine.PlayerController.PostControllerIdChange
// [0x00820002] (FUNC_Defined | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:

void APlayerController::PostControllerIdChange()
{
	static UFunction* uFnPostControllerIdChange = nullptr;

	if (!uFnPostControllerIdChange)
	{
		uFnPostControllerIdChange = UFunction::FindFunction("Function Engine.PlayerController.PostControllerIdChange");
	}

	APlayerController_execPostControllerIdChange_Params PostControllerIdChange_Params;
	memset(&PostControllerIdChange_Params, 0, sizeof(PostControllerIdChange_Params));

	this->ProcessEvent(uFnPostControllerIdChange, &PostControllerIdChange_Params, nullptr);
};

// Function Engine.PlayerController.PreControllerIdChange
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void APlayerController::PreControllerIdChange()
{
	static UFunction* uFnPreControllerIdChange = nullptr;

	if (!uFnPreControllerIdChange)
	{
		uFnPreControllerIdChange = UFunction::FindFunction("Function Engine.PlayerController.PreControllerIdChange");
	}

	APlayerController_execPreControllerIdChange_Params PreControllerIdChange_Params;
	memset(&PreControllerIdChange_Params, 0, sizeof(PreControllerIdChange_Params));

	this->ProcessEvent(uFnPreControllerIdChange, &PreControllerIdChange_Params, nullptr);
};

// Function Engine.PlayerController.CleanOutSavedMoves
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[18098])
// Parameter Info:

void APlayerController::CleanOutSavedMoves()
{
	static UFunction* uFnCleanOutSavedMoves = nullptr;

	if (!uFnCleanOutSavedMoves)
	{
		uFnCleanOutSavedMoves = UFunction::FindFunction("Function Engine.PlayerController.CleanOutSavedMoves");
	}

	APlayerController_execCleanOutSavedMoves_Params CleanOutSavedMoves_Params;
	memset(&CleanOutSavedMoves_Params, 0, sizeof(CleanOutSavedMoves_Params));

	uFnCleanOutSavedMoves->iNative = 0;
	uFnCleanOutSavedMoves->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnCleanOutSavedMoves, &CleanOutSavedMoves_Params, nullptr);
	uFnCleanOutSavedMoves->FunctionFlags |= 0x400;
	uFnCleanOutSavedMoves->iNative = 18098;
};

// Function Engine.PlayerController.ClientReset
// [0xFFFF0000010201C2] (FUNC_Defined | FUNC_Net | FUNC_NetReliable | FUNC_Simulated | FUNC_Public | FUNC_NetClient | FUNC_AllFlags)
// Parameter Info:

void APlayerController::ClientReset()
{
	static UFunction* uFnClientReset = nullptr;

	if (!uFnClientReset)
	{
		uFnClientReset = UFunction::FindFunction("Function Engine.PlayerController.ClientReset");
	}

	APlayerController_execClientReset_Params ClientReset_Params;
	memset(&ClientReset_Params, 0, sizeof(ClientReset_Params));

	this->ProcessEvent(uFnClientReset, &ClientReset_Params, nullptr);
};

// Function Engine.PlayerController.Reset
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void APlayerController::Reset()
{
	static UFunction* uFnReset = nullptr;

	if (!uFnReset)
	{
		uFnReset = UFunction::FindFunction("Function Engine.PlayerController.Reset");
	}

	APlayerController_execReset_Params Reset_Params;
	memset(&Reset_Params, 0, sizeof(Reset_Params));

	this->ProcessEvent(uFnReset, &Reset_Params, nullptr);
};

// Function Engine.PlayerController.SpawnDefaultHUD
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void APlayerController::SpawnDefaultHUD()
{
	static UFunction* uFnSpawnDefaultHUD = nullptr;

	if (!uFnSpawnDefaultHUD)
	{
		uFnSpawnDefaultHUD = UFunction::FindFunction("Function Engine.PlayerController.SpawnDefaultHUD");
	}

	APlayerController_execSpawnDefaultHUD_Params SpawnDefaultHUD_Params;
	memset(&SpawnDefaultHUD_Params, 0, sizeof(SpawnDefaultHUD_Params));

	this->ProcessEvent(uFnSpawnDefaultHUD, &SpawnDefaultHUD_Params, nullptr);
};

// Function Engine.PlayerController.EnableCheats
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void APlayerController::EnableCheats()
{
	static UFunction* uFnEnableCheats = nullptr;

	if (!uFnEnableCheats)
	{
		uFnEnableCheats = UFunction::FindFunction("Function Engine.PlayerController.EnableCheats");
	}

	APlayerController_execEnableCheats_Params EnableCheats_Params;
	memset(&EnableCheats_Params, 0, sizeof(EnableCheats_Params));

	this->ProcessEvent(uFnEnableCheats, &EnableCheats_Params, nullptr);
};

// Function Engine.PlayerController.AddCheats
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void APlayerController::eventAddCheats()
{
	static UFunction* uFnAddCheats = nullptr;

	if (!uFnAddCheats)
	{
		uFnAddCheats = UFunction::FindFunction("Function Engine.PlayerController.AddCheats");
	}

	APlayerController_eventAddCheats_Params AddCheats_Params;
	memset(&AddCheats_Params, 0, sizeof(AddCheats_Params));

	this->ProcessEvent(uFnAddCheats, &AddCheats_Params, nullptr);
};

// Function Engine.PlayerController.KickWarning
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void APlayerController::eventKickWarning()
{
	static UFunction* uFnKickWarning = nullptr;

	if (!uFnKickWarning)
	{
		uFnKickWarning = UFunction::FindFunction("Function Engine.PlayerController.KickWarning");
	}

	APlayerController_eventKickWarning_Params KickWarning_Params;
	memset(&KickWarning_Params, 0, sizeof(KickWarning_Params));

	this->ProcessEvent(uFnKickWarning, &KickWarning_Params, nullptr);
};

// Function Engine.PlayerController.ServerGivePawn
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void APlayerController::ServerGivePawn()
{
	static UFunction* uFnServerGivePawn = nullptr;

	if (!uFnServerGivePawn)
	{
		uFnServerGivePawn = UFunction::FindFunction("Function Engine.PlayerController.ServerGivePawn");
	}

	APlayerController_execServerGivePawn_Params ServerGivePawn_Params;
	memset(&ServerGivePawn_Params, 0, sizeof(ServerGivePawn_Params));

	this->ProcessEvent(uFnServerGivePawn, &ServerGivePawn_Params, nullptr);
};

// Function Engine.PlayerController.ResetTimeMargin
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25159])
// Parameter Info:

void APlayerController::ResetTimeMargin()
{
	static UFunction* uFnResetTimeMargin = nullptr;

	if (!uFnResetTimeMargin)
	{
		uFnResetTimeMargin = UFunction::FindFunction("Function Engine.PlayerController.ResetTimeMargin");
	}

	APlayerController_execResetTimeMargin_Params ResetTimeMargin_Params;
	memset(&ResetTimeMargin_Params, 0, sizeof(ResetTimeMargin_Params));

	uFnResetTimeMargin->iNative = 0;
	uFnResetTimeMargin->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnResetTimeMargin, &ResetTimeMargin_Params, nullptr);
	uFnResetTimeMargin->FunctionFlags |= 0x400;
	uFnResetTimeMargin->iNative = 25159;
};

// Function Engine.PlayerController.ReceivedPlayer
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void APlayerController::eventReceivedPlayer()
{
	static UFunction* uFnReceivedPlayer = nullptr;

	if (!uFnReceivedPlayer)
	{
		uFnReceivedPlayer = UFunction::FindFunction("Function Engine.PlayerController.ReceivedPlayer");
	}

	APlayerController_eventReceivedPlayer_Params ReceivedPlayer_Params;
	memset(&ReceivedPlayer_Params, 0, sizeof(ReceivedPlayer_Params));

	this->ProcessEvent(uFnReceivedPlayer, &ReceivedPlayer_Params, nullptr);
};

// Function Engine.PlayerController.PostBeginPlay
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void APlayerController::eventPostBeginPlay()
{
	static UFunction* uFnPostBeginPlay = nullptr;

	if (!uFnPostBeginPlay)
	{
		uFnPostBeginPlay = UFunction::FindFunction("Function Engine.PlayerController.PostBeginPlay");
	}

	APlayerController_eventPostBeginPlay_Params PostBeginPlay_Params;
	memset(&PostBeginPlay_Params, 0, sizeof(PostBeginPlay_Params));

	this->ProcessEvent(uFnPostBeginPlay, &PostBeginPlay_Params, nullptr);
};

// Function Engine.PlayerController.CanUnpauseControllerConnected
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool APlayerController::CanUnpauseControllerConnected()
{
	static UFunction* uFnCanUnpauseControllerConnected = nullptr;

	if (!uFnCanUnpauseControllerConnected)
	{
		uFnCanUnpauseControllerConnected = UFunction::FindFunction("Function Engine.PlayerController.CanUnpauseControllerConnected");
	}

	APlayerController_execCanUnpauseControllerConnected_Params CanUnpauseControllerConnected_Params;
	memset(&CanUnpauseControllerConnected_Params, 0, sizeof(CanUnpauseControllerConnected_Params));

	this->ProcessEvent(uFnCanUnpauseControllerConnected, &CanUnpauseControllerConnected_Params, nullptr);

	return CanUnpauseControllerConnected_Params.ReturnValue;
};

// Function Engine.PlayerController.OnControllerChanged
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ControllerId                   (CPF_Parm)
// uint32_t                       bIsConnected                   (CPF_Parm)

void APlayerController::OnControllerChanged(int32_t ControllerId, bool bIsConnected)
{
	static UFunction* uFnOnControllerChanged = nullptr;

	if (!uFnOnControllerChanged)
	{
		uFnOnControllerChanged = UFunction::FindFunction("Function Engine.PlayerController.OnControllerChanged");
	}

	APlayerController_execOnControllerChanged_Params OnControllerChanged_Params;
	memset(&OnControllerChanged_Params, 0, sizeof(OnControllerChanged_Params));
	memcpy_s(&OnControllerChanged_Params.ControllerId, sizeof(OnControllerChanged_Params.ControllerId), &ControllerId, sizeof(ControllerId));
	OnControllerChanged_Params.bIsConnected = bIsConnected;

	this->ProcessEvent(uFnOnControllerChanged, &OnControllerChanged_Params, nullptr);
};

// Function Engine.PlayerController.CanUnpauseExternalUI
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool APlayerController::CanUnpauseExternalUI()
{
	static UFunction* uFnCanUnpauseExternalUI = nullptr;

	if (!uFnCanUnpauseExternalUI)
	{
		uFnCanUnpauseExternalUI = UFunction::FindFunction("Function Engine.PlayerController.CanUnpauseExternalUI");
	}

	APlayerController_execCanUnpauseExternalUI_Params CanUnpauseExternalUI_Params;
	memset(&CanUnpauseExternalUI_Params, 0, sizeof(CanUnpauseExternalUI_Params));

	this->ProcessEvent(uFnCanUnpauseExternalUI, &CanUnpauseExternalUI_Params, nullptr);

	return CanUnpauseExternalUI_Params.ReturnValue;
};

// Function Engine.PlayerController.OnExternalUIChanged
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bIsOpening                     (CPF_Parm)

void APlayerController::OnExternalUIChanged(bool bIsOpening)
{
	static UFunction* uFnOnExternalUIChanged = nullptr;

	if (!uFnOnExternalUIChanged)
	{
		uFnOnExternalUIChanged = UFunction::FindFunction("Function Engine.PlayerController.OnExternalUIChanged");
	}

	APlayerController_execOnExternalUIChanged_Params OnExternalUIChanged_Params;
	memset(&OnExternalUIChanged_Params, 0, sizeof(OnExternalUIChanged_Params));
	OnExternalUIChanged_Params.bIsOpening = bIsOpening;

	this->ProcessEvent(uFnOnExternalUIChanged, &OnExternalUIChanged_Params, nullptr);
};

// Function Engine.PlayerController.ForceClearUnpauseDelegates
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void APlayerController::ForceClearUnpauseDelegates()
{
	static UFunction* uFnForceClearUnpauseDelegates = nullptr;

	if (!uFnForceClearUnpauseDelegates)
	{
		uFnForceClearUnpauseDelegates = UFunction::FindFunction("Function Engine.PlayerController.ForceClearUnpauseDelegates");
	}

	APlayerController_execForceClearUnpauseDelegates_Params ForceClearUnpauseDelegates_Params;
	memset(&ForceClearUnpauseDelegates_Params, 0, sizeof(ForceClearUnpauseDelegates_Params));

	this->ProcessEvent(uFnForceClearUnpauseDelegates, &ForceClearUnpauseDelegates_Params, nullptr);
};

// Function Engine.PlayerController.FellOutOfWorld
// [0x00020900] (FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UDamageType*             dmgType                        (CPF_Parm)

void APlayerController::eventFellOutOfWorld(class UDamageType* dmgType)
{
	static UFunction* uFnFellOutOfWorld = nullptr;

	if (!uFnFellOutOfWorld)
	{
		uFnFellOutOfWorld = UFunction::FindFunction("Function Engine.PlayerController.FellOutOfWorld");
	}

	APlayerController_eventFellOutOfWorld_Params FellOutOfWorld_Params;
	memset(&FellOutOfWorld_Params, 0, sizeof(FellOutOfWorld_Params));
	FellOutOfWorld_Params.dmgType = dmgType;

	this->ProcessEvent(uFnFellOutOfWorld, &FellOutOfWorld_Params, nullptr);
};

// Function Engine.PlayerController.CleanUpAudioComponents
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[18100])
// Parameter Info:

void APlayerController::CleanUpAudioComponents()
{
	static UFunction* uFnCleanUpAudioComponents = nullptr;

	if (!uFnCleanUpAudioComponents)
	{
		uFnCleanUpAudioComponents = UFunction::FindFunction("Function Engine.PlayerController.CleanUpAudioComponents");
	}

	APlayerController_execCleanUpAudioComponents_Params CleanUpAudioComponents_Params;
	memset(&CleanUpAudioComponents_Params, 0, sizeof(CleanUpAudioComponents_Params));

	uFnCleanUpAudioComponents->iNative = 0;
	uFnCleanUpAudioComponents->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnCleanUpAudioComponents, &CleanUpAudioComponents_Params, nullptr);
	uFnCleanUpAudioComponents->FunctionFlags |= 0x400;
	uFnCleanUpAudioComponents->iNative = 18100;
};

// Function Engine.PlayerController.FindStairRotation
// [0x20C00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20124])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// float                          DeltaTime                      (CPF_Parm)

int32_t APlayerController::FindStairRotation(float DeltaTime)
{
	static UFunction* uFnFindStairRotation = nullptr;

	if (!uFnFindStairRotation)
	{
		uFnFindStairRotation = UFunction::FindFunction("Function Engine.PlayerController.FindStairRotation");
	}

	APlayerController_execFindStairRotation_Params FindStairRotation_Params;
	memset(&FindStairRotation_Params, 0, sizeof(FindStairRotation_Params));
	memcpy_s(&FindStairRotation_Params.DeltaTime, sizeof(FindStairRotation_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));

	uFnFindStairRotation->iNative = 0;
	uFnFindStairRotation->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnFindStairRotation, &FindStairRotation_Params, nullptr);
	uFnFindStairRotation->FunctionFlags |= 0x400;
	uFnFindStairRotation->iNative = 20124;

	return FindStairRotation_Params.ReturnValue;
};

// Function Engine.PlayerController.CheckSpeedHack
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[18065])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// float                          DeltaTime                      (CPF_Parm)

bool APlayerController::CheckSpeedHack(float DeltaTime)
{
	static UFunction* uFnCheckSpeedHack = nullptr;

	if (!uFnCheckSpeedHack)
	{
		uFnCheckSpeedHack = UFunction::FindFunction("Function Engine.PlayerController.CheckSpeedHack");
	}

	APlayerController_execCheckSpeedHack_Params CheckSpeedHack_Params;
	memset(&CheckSpeedHack_Params, 0, sizeof(CheckSpeedHack_Params));
	memcpy_s(&CheckSpeedHack_Params.DeltaTime, sizeof(CheckSpeedHack_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));

	uFnCheckSpeedHack->iNative = 0;
	uFnCheckSpeedHack->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnCheckSpeedHack, &CheckSpeedHack_Params, nullptr);
	uFnCheckSpeedHack->FunctionFlags |= 0x400;
	uFnCheckSpeedHack->iNative = 18065;

	return CheckSpeedHack_Params.ReturnValue;
};

// Function Engine.PlayerController.ServerProcessConvolve
// [0xFFFF000000240CC1] (FUNC_Final | FUNC_Net | FUNC_NetReliable | FUNC_Native | FUNC_Event | FUNC_Private | FUNC_NetServer | FUNC_AllFlags) (iNative[13730])
// Parameter Info:
// class FString                  C                              (CPF_Parm | CPF_NeedCtorLink)
// int32_t                        H                              (CPF_Parm)

void APlayerController::eventServerProcessConvolve(const class FString& C, int32_t H)
{
	static UFunction* uFnServerProcessConvolve = nullptr;

	if (!uFnServerProcessConvolve)
	{
		uFnServerProcessConvolve = UFunction::FindFunction("Function Engine.PlayerController.ServerProcessConvolve");
	}

	APlayerController_eventServerProcessConvolve_Params ServerProcessConvolve_Params;
	memset(&ServerProcessConvolve_Params, 0, sizeof(ServerProcessConvolve_Params));
	memcpy_s(&ServerProcessConvolve_Params.C, sizeof(ServerProcessConvolve_Params.C), &C, sizeof(C));
	memcpy_s(&ServerProcessConvolve_Params.H, sizeof(ServerProcessConvolve_Params.H), &H, sizeof(H));

	uFnServerProcessConvolve->iNative = 0;
	uFnServerProcessConvolve->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnServerProcessConvolve, &ServerProcessConvolve_Params, nullptr);
	uFnServerProcessConvolve->FunctionFlags |= 0x400;
	uFnServerProcessConvolve->iNative = 13730;
};

// Function Engine.PlayerController.ClientConvolve
// [0xFFFF000001040DC1] (FUNC_Final | FUNC_Net | FUNC_NetReliable | FUNC_Simulated | FUNC_Native | FUNC_Event | FUNC_Private | FUNC_NetClient | FUNC_AllFlags) (iNative[13492])
// Parameter Info:
// class FString                  C                              (CPF_Parm | CPF_NeedCtorLink)
// int32_t                        H                              (CPF_Parm)

void APlayerController::eventClientConvolve(const class FString& C, int32_t H)
{
	static UFunction* uFnClientConvolve = nullptr;

	if (!uFnClientConvolve)
	{
		uFnClientConvolve = UFunction::FindFunction("Function Engine.PlayerController.ClientConvolve");
	}

	APlayerController_eventClientConvolve_Params ClientConvolve_Params;
	memset(&ClientConvolve_Params, 0, sizeof(ClientConvolve_Params));
	memcpy_s(&ClientConvolve_Params.C, sizeof(ClientConvolve_Params.C), &C, sizeof(C));
	memcpy_s(&ClientConvolve_Params.H, sizeof(ClientConvolve_Params.H), &H, sizeof(H));

	uFnClientConvolve->iNative = 0;
	uFnClientConvolve->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnClientConvolve, &ClientConvolve_Params, nullptr);
	uFnClientConvolve->FunctionFlags |= 0x400;
	uFnClientConvolve->iNative = 13492;
};

// Function Engine.PlayerController.SetAllowMatureLanguage
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25576])
// Parameter Info:
// uint32_t                       bAllowMatureLanguge            (CPF_Parm)

void APlayerController::SetAllowMatureLanguage(bool bAllowMatureLanguge)
{
	static UFunction* uFnSetAllowMatureLanguage = nullptr;

	if (!uFnSetAllowMatureLanguage)
	{
		uFnSetAllowMatureLanguage = UFunction::FindFunction("Function Engine.PlayerController.SetAllowMatureLanguage");
	}

	APlayerController_execSetAllowMatureLanguage_Params SetAllowMatureLanguage_Params;
	memset(&SetAllowMatureLanguage_Params, 0, sizeof(SetAllowMatureLanguage_Params));
	SetAllowMatureLanguage_Params.bAllowMatureLanguge = bAllowMatureLanguge;

	uFnSetAllowMatureLanguage->iNative = 0;
	uFnSetAllowMatureLanguage->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetAllowMatureLanguage, &SetAllowMatureLanguage_Params, nullptr);
	uFnSetAllowMatureLanguage->FunctionFlags |= 0x400;
	uFnSetAllowMatureLanguage->iNative = 25576;
};

// Function Engine.PlayerController.PasteFromClipboard
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[23973])
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)

class FString APlayerController::PasteFromClipboard()
{
	static UFunction* uFnPasteFromClipboard = nullptr;

	if (!uFnPasteFromClipboard)
	{
		uFnPasteFromClipboard = UFunction::FindFunction("Function Engine.PlayerController.PasteFromClipboard");
	}

	APlayerController_execPasteFromClipboard_Params PasteFromClipboard_Params;
	memset(&PasteFromClipboard_Params, 0, sizeof(PasteFromClipboard_Params));

	uFnPasteFromClipboard->iNative = 0;
	uFnPasteFromClipboard->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnPasteFromClipboard, &PasteFromClipboard_Params, nullptr);
	uFnPasteFromClipboard->FunctionFlags |= 0x400;
	uFnPasteFromClipboard->iNative = 23973;

	return PasteFromClipboard_Params.ReturnValue;
};

// Function Engine.PlayerController.CopyToClipboard
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[4399])
// Parameter Info:
// class FString                  Text                           (CPF_Parm | CPF_NeedCtorLink)

void APlayerController::CopyToClipboard(const class FString& Text)
{
	static UFunction* uFnCopyToClipboard = nullptr;

	if (!uFnCopyToClipboard)
	{
		uFnCopyToClipboard = UFunction::FindFunction("Function Engine.PlayerController.CopyToClipboard");
	}

	APlayerController_execCopyToClipboard_Params CopyToClipboard_Params;
	memset(&CopyToClipboard_Params, 0, sizeof(CopyToClipboard_Params));
	memcpy_s(&CopyToClipboard_Params.Text, sizeof(CopyToClipboard_Params.Text), &Text, sizeof(Text));

	uFnCopyToClipboard->iNative = 0;
	uFnCopyToClipboard->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnCopyToClipboard, &CopyToClipboard_Params, nullptr);
	uFnCopyToClipboard->FunctionFlags |= 0x400;
	uFnCopyToClipboard->iNative = 4399;
};

// Function Engine.PlayerController.GetDefaultURL
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20564])
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)
// class FString                  Option                         (CPF_Parm | CPF_NeedCtorLink)

class FString APlayerController::GetDefaultURL(const class FString& Option)
{
	static UFunction* uFnGetDefaultURL = nullptr;

	if (!uFnGetDefaultURL)
	{
		uFnGetDefaultURL = UFunction::FindFunction("Function Engine.PlayerController.GetDefaultURL");
	}

	APlayerController_execGetDefaultURL_Params GetDefaultURL_Params;
	memset(&GetDefaultURL_Params, 0, sizeof(GetDefaultURL_Params));
	memcpy_s(&GetDefaultURL_Params.Option, sizeof(GetDefaultURL_Params.Option), &Option, sizeof(Option));

	uFnGetDefaultURL->iNative = 0;
	uFnGetDefaultURL->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetDefaultURL, &GetDefaultURL_Params, nullptr);
	uFnGetDefaultURL->FunctionFlags |= 0x400;
	uFnGetDefaultURL->iNative = 20564;

	return GetDefaultURL_Params.ReturnValue;
};

// Function Engine.PlayerController.UpdateURL
// [0x22200020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[27009])
// Parameter Info:
// class FString                  NewOption                      (CPF_Parm | CPF_NeedCtorLink)
// class FString                  NewValue                       (CPF_Parm | CPF_NeedCtorLink)
// uint32_t                       bSave1Default                  (CPF_Parm)

void APlayerController::UpdateURL(const class FString& NewOption, const class FString& NewValue, bool bSave1Default)
{
	static UFunction* uFnUpdateURL = nullptr;

	if (!uFnUpdateURL)
	{
		uFnUpdateURL = UFunction::FindFunction("Function Engine.PlayerController.UpdateURL");
	}

	APlayerController_execUpdateURL_Params UpdateURL_Params;
	memset(&UpdateURL_Params, 0, sizeof(UpdateURL_Params));
	memcpy_s(&UpdateURL_Params.NewOption, sizeof(UpdateURL_Params.NewOption), &NewOption, sizeof(NewOption));
	memcpy_s(&UpdateURL_Params.NewValue, sizeof(UpdateURL_Params.NewValue), &NewValue, sizeof(NewValue));
	UpdateURL_Params.bSave1Default = bSave1Default;

	uFnUpdateURL->iNative = 0;
	uFnUpdateURL->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnUpdateURL, &UpdateURL_Params, nullptr);
	uFnUpdateURL->FunctionFlags |= 0x400;
	uFnUpdateURL->iNative = 27009;
};

// Function Engine.PlayerController.ClientTravel
// [0xFFFF000001024DC0] (FUNC_Net | FUNC_NetReliable | FUNC_Simulated | FUNC_Native | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_NetClient | FUNC_AllFlags) (iNative[13506])
// Parameter Info:
// class FString                  URL                            (CPF_Parm | CPF_NeedCtorLink)
// ETravelType                    TravelType                     (CPF_Parm)
// uint32_t                       bSeamless                      (CPF_OptionalParm | CPF_Parm)
// struct FGuid                   MapPackageGuid                 (CPF_OptionalParm | CPF_Parm)

void APlayerController::eventClientTravel(const class FString& URL, ETravelType TravelType, bool bSeamless, const struct FGuid& MapPackageGuid)
{
	static UFunction* uFnClientTravel = nullptr;

	if (!uFnClientTravel)
	{
		uFnClientTravel = UFunction::FindFunction("Function Engine.PlayerController.ClientTravel");
	}

	APlayerController_eventClientTravel_Params ClientTravel_Params;
	memset(&ClientTravel_Params, 0, sizeof(ClientTravel_Params));
	memcpy_s(&ClientTravel_Params.URL, sizeof(ClientTravel_Params.URL), &URL, sizeof(URL));
	memcpy_s(&ClientTravel_Params.TravelType, sizeof(ClientTravel_Params.TravelType), &TravelType, sizeof(TravelType));
	ClientTravel_Params.bSeamless = bSeamless;
	memcpy_s(&ClientTravel_Params.MapPackageGuid, sizeof(ClientTravel_Params.MapPackageGuid), &MapPackageGuid, sizeof(MapPackageGuid));

	uFnClientTravel->iNative = 0;
	uFnClientTravel->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnClientTravel, &ClientTravel_Params, nullptr);
	uFnClientTravel->FunctionFlags |= 0x400;
	uFnClientTravel->iNative = 13506;
};

// Function Engine.PlayerController.ConsoleCommand
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[18363])
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)
// class FString                  Command                        (CPF_Parm | CPF_NeedCtorLink)
// uint32_t                       bWriteToLog                    (CPF_OptionalParm | CPF_Parm)

class FString APlayerController::ConsoleCommand(const class FString& Command, bool bWriteToLog)
{
	static UFunction* uFnConsoleCommand = nullptr;

	if (!uFnConsoleCommand)
	{
		uFnConsoleCommand = UFunction::FindFunction("Function Engine.PlayerController.ConsoleCommand");
	}

	APlayerController_execConsoleCommand_Params ConsoleCommand_Params;
	memset(&ConsoleCommand_Params, 0, sizeof(ConsoleCommand_Params));
	memcpy_s(&ConsoleCommand_Params.Command, sizeof(ConsoleCommand_Params.Command), &Command, sizeof(Command));
	ConsoleCommand_Params.bWriteToLog = bWriteToLog;

	uFnConsoleCommand->iNative = 0;
	uFnConsoleCommand->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnConsoleCommand, &ConsoleCommand_Params, nullptr);
	uFnConsoleCommand->FunctionFlags |= 0x400;
	uFnConsoleCommand->iNative = 18363;

	return ConsoleCommand_Params.ReturnValue;
};

// Function Engine.CheatManager.ToggleAILogging
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UCheatManager::ToggleAILogging()
{
	static UFunction* uFnToggleAILogging = nullptr;

	if (!uFnToggleAILogging)
	{
		uFnToggleAILogging = UFunction::FindFunction("Function Engine.CheatManager.ToggleAILogging");
	}

	UCheatManager_execToggleAILogging_Params ToggleAILogging_Params;
	memset(&ToggleAILogging_Params, 0, sizeof(ToggleAILogging_Params));

	this->ProcessEvent(uFnToggleAILogging, &ToggleAILogging_Params, nullptr);
};

// Function Engine.CheatManager.NavMeshVerification
// [0x00024202] (FUNC_Defined | FUNC_Exec | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          interval                       (CPF_OptionalParm | CPF_Parm)

void UCheatManager::NavMeshVerification(float interval)
{
	static UFunction* uFnNavMeshVerification = nullptr;

	if (!uFnNavMeshVerification)
	{
		uFnNavMeshVerification = UFunction::FindFunction("Function Engine.CheatManager.NavMeshVerification");
	}

	UCheatManager_execNavMeshVerification_Params NavMeshVerification_Params;
	memset(&NavMeshVerification_Params, 0, sizeof(NavMeshVerification_Params));
	memcpy_s(&NavMeshVerification_Params.interval, sizeof(NavMeshVerification_Params.interval), &interval, sizeof(interval));

	this->ProcessEvent(uFnNavMeshVerification, &NavMeshVerification_Params, nullptr);
};

// Function Engine.CheatManager.DrawUnsupportingEdges
// [0x00020600] (FUNC_Exec | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[19214])
// Parameter Info:
// class FString                  PawnClassName                  (CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink)

void UCheatManager::DrawUnsupportingEdges(const class FString& PawnClassName)
{
	static UFunction* uFnDrawUnsupportingEdges = nullptr;

	if (!uFnDrawUnsupportingEdges)
	{
		uFnDrawUnsupportingEdges = UFunction::FindFunction("Function Engine.CheatManager.DrawUnsupportingEdges");
	}

	UCheatManager_execDrawUnsupportingEdges_Params DrawUnsupportingEdges_Params;
	memset(&DrawUnsupportingEdges_Params, 0, sizeof(DrawUnsupportingEdges_Params));
	memcpy_s(&DrawUnsupportingEdges_Params.PawnClassName, sizeof(DrawUnsupportingEdges_Params.PawnClassName), &PawnClassName, sizeof(PawnClassName));

	uFnDrawUnsupportingEdges->iNative = 0;
	uFnDrawUnsupportingEdges->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnDrawUnsupportingEdges, &DrawUnsupportingEdges_Params, nullptr);
	uFnDrawUnsupportingEdges->FunctionFlags |= 0x400;
	uFnDrawUnsupportingEdges->iNative = 19214;
};

// Function Engine.CheatManager.VerifyNavMeshObjects
// [0x00020600] (FUNC_Exec | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[27107])
// Parameter Info:

void UCheatManager::VerifyNavMeshObjects()
{
	static UFunction* uFnVerifyNavMeshObjects = nullptr;

	if (!uFnVerifyNavMeshObjects)
	{
		uFnVerifyNavMeshObjects = UFunction::FindFunction("Function Engine.CheatManager.VerifyNavMeshObjects");
	}

	UCheatManager_execVerifyNavMeshObjects_Params VerifyNavMeshObjects_Params;
	memset(&VerifyNavMeshObjects_Params, 0, sizeof(VerifyNavMeshObjects_Params));

	uFnVerifyNavMeshObjects->iNative = 0;
	uFnVerifyNavMeshObjects->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnVerifyNavMeshObjects, &VerifyNavMeshObjects_Params, nullptr);
	uFnVerifyNavMeshObjects->FunctionFlags |= 0x400;
	uFnVerifyNavMeshObjects->iNative = 27107;
};

// Function Engine.CheatManager.LogParticleActivateSystemCalls
// [0x00020600] (FUNC_Exec | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[21853])
// Parameter Info:
// uint32_t                       bShouldLog                     (CPF_Parm)

void UCheatManager::LogParticleActivateSystemCalls(bool bShouldLog)
{
	static UFunction* uFnLogParticleActivateSystemCalls = nullptr;

	if (!uFnLogParticleActivateSystemCalls)
	{
		uFnLogParticleActivateSystemCalls = UFunction::FindFunction("Function Engine.CheatManager.LogParticleActivateSystemCalls");
	}

	UCheatManager_execLogParticleActivateSystemCalls_Params LogParticleActivateSystemCalls_Params;
	memset(&LogParticleActivateSystemCalls_Params, 0, sizeof(LogParticleActivateSystemCalls_Params));
	LogParticleActivateSystemCalls_Params.bShouldLog = bShouldLog;

	uFnLogParticleActivateSystemCalls->iNative = 0;
	uFnLogParticleActivateSystemCalls->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnLogParticleActivateSystemCalls, &LogParticleActivateSystemCalls_Params, nullptr);
	uFnLogParticleActivateSystemCalls->FunctionFlags |= 0x400;
	uFnLogParticleActivateSystemCalls->iNative = 21853;
};

// Function Engine.CheatManager.LogPlaySoundCalls
// [0x00020600] (FUNC_Exec | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[21854])
// Parameter Info:
// uint32_t                       bShouldLog                     (CPF_Parm)

void UCheatManager::LogPlaySoundCalls(bool bShouldLog)
{
	static UFunction* uFnLogPlaySoundCalls = nullptr;

	if (!uFnLogPlaySoundCalls)
	{
		uFnLogPlaySoundCalls = UFunction::FindFunction("Function Engine.CheatManager.LogPlaySoundCalls");
	}

	UCheatManager_execLogPlaySoundCalls_Params LogPlaySoundCalls_Params;
	memset(&LogPlaySoundCalls_Params, 0, sizeof(LogPlaySoundCalls_Params));
	LogPlaySoundCalls_Params.bShouldLog = bShouldLog;

	uFnLogPlaySoundCalls->iNative = 0;
	uFnLogPlaySoundCalls->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnLogPlaySoundCalls, &LogPlaySoundCalls_Params, nullptr);
	uFnLogPlaySoundCalls->FunctionFlags |= 0x400;
	uFnLogPlaySoundCalls->iNative = 21854;
};

// Function Engine.CheatManager.InitCheatManager
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UCheatManager::InitCheatManager()
{
	static UFunction* uFnInitCheatManager = nullptr;

	if (!uFnInitCheatManager)
	{
		uFnInitCheatManager = UFunction::FindFunction("Function Engine.CheatManager.InitCheatManager");
	}

	UCheatManager_execInitCheatManager_Params InitCheatManager_Params;
	memset(&InitCheatManager_Params, 0, sizeof(InitCheatManager_Params));

	this->ProcessEvent(uFnInitCheatManager, &InitCheatManager_Params, nullptr);
};

// Function Engine.CheatManager.VerbosePathDebug
// [0x00820202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:

void UCheatManager::VerbosePathDebug()
{
	static UFunction* uFnVerbosePathDebug = nullptr;

	if (!uFnVerbosePathDebug)
	{
		uFnVerbosePathDebug = UFunction::FindFunction("Function Engine.CheatManager.VerbosePathDebug");
	}

	UCheatManager_execVerbosePathDebug_Params VerbosePathDebug_Params;
	memset(&VerbosePathDebug_Params, 0, sizeof(VerbosePathDebug_Params));

	this->ProcessEvent(uFnVerbosePathDebug, &VerbosePathDebug_Params, nullptr);
};

// Function Engine.CheatManager.SetOnlineDebugLevel
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        DebugLevel                     (CPF_Parm)

void UCheatManager::SetOnlineDebugLevel(int32_t DebugLevel)
{
	static UFunction* uFnSetOnlineDebugLevel = nullptr;

	if (!uFnSetOnlineDebugLevel)
	{
		uFnSetOnlineDebugLevel = UFunction::FindFunction("Function Engine.CheatManager.SetOnlineDebugLevel");
	}

	UCheatManager_execSetOnlineDebugLevel_Params SetOnlineDebugLevel_Params;
	memset(&SetOnlineDebugLevel_Params, 0, sizeof(SetOnlineDebugLevel_Params));
	memcpy_s(&SetOnlineDebugLevel_Params.DebugLevel, sizeof(SetOnlineDebugLevel_Params.DebugLevel), &DebugLevel, sizeof(DebugLevel));

	this->ProcessEvent(uFnSetOnlineDebugLevel, &SetOnlineDebugLevel_Params, nullptr);
};

// Function Engine.CheatManager.TestLevel
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UCheatManager::TestLevel()
{
	static UFunction* uFnTestLevel = nullptr;

	if (!uFnTestLevel)
	{
		uFnTestLevel = UFunction::FindFunction("Function Engine.CheatManager.TestLevel");
	}

	UCheatManager_execTestLevel_Params TestLevel_Params;
	memset(&TestLevel_Params, 0, sizeof(TestLevel_Params));

	this->ProcessEvent(uFnTestLevel, &TestLevel_Params, nullptr);
};

// Function Engine.CheatManager.EnableDebugCamera
// [0x00820002] (FUNC_Defined | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:

void UCheatManager::EnableDebugCamera()
{
	static UFunction* uFnEnableDebugCamera = nullptr;

	if (!uFnEnableDebugCamera)
	{
		uFnEnableDebugCamera = UFunction::FindFunction("Function Engine.CheatManager.EnableDebugCamera");
	}

	UCheatManager_execEnableDebugCamera_Params EnableDebugCamera_Params;
	memset(&EnableDebugCamera_Params, 0, sizeof(EnableDebugCamera_Params));

	this->ProcessEvent(uFnEnableDebugCamera, &EnableDebugCamera_Params, nullptr);
};

// Function Engine.CheatManager.ToggleDebugCamera
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UCheatManager::ToggleDebugCamera()
{
	static UFunction* uFnToggleDebugCamera = nullptr;

	if (!uFnToggleDebugCamera)
	{
		uFnToggleDebugCamera = UFunction::FindFunction("Function Engine.CheatManager.ToggleDebugCamera");
	}

	UCheatManager_execToggleDebugCamera_Params ToggleDebugCamera_Params;
	memset(&ToggleDebugCamera_Params, 0, sizeof(ToggleDebugCamera_Params));

	this->ProcessEvent(uFnToggleDebugCamera, &ToggleDebugCamera_Params, nullptr);
};

// Function Engine.CheatManager.StreamLevelOut
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FName                    PackageName                    (CPF_Parm)

void UCheatManager::StreamLevelOut(const class FName& PackageName)
{
	static UFunction* uFnStreamLevelOut = nullptr;

	if (!uFnStreamLevelOut)
	{
		uFnStreamLevelOut = UFunction::FindFunction("Function Engine.CheatManager.StreamLevelOut");
	}

	UCheatManager_execStreamLevelOut_Params StreamLevelOut_Params;
	memset(&StreamLevelOut_Params, 0, sizeof(StreamLevelOut_Params));
	memcpy_s(&StreamLevelOut_Params.PackageName, sizeof(StreamLevelOut_Params.PackageName), &PackageName, sizeof(PackageName));

	this->ProcessEvent(uFnStreamLevelOut, &StreamLevelOut_Params, nullptr);
};

// Function Engine.CheatManager.OnlyLoadLevel
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FName                    PackageName                    (CPF_Parm)

void UCheatManager::OnlyLoadLevel(const class FName& PackageName)
{
	static UFunction* uFnOnlyLoadLevel = nullptr;

	if (!uFnOnlyLoadLevel)
	{
		uFnOnlyLoadLevel = UFunction::FindFunction("Function Engine.CheatManager.OnlyLoadLevel");
	}

	UCheatManager_execOnlyLoadLevel_Params OnlyLoadLevel_Params;
	memset(&OnlyLoadLevel_Params, 0, sizeof(OnlyLoadLevel_Params));
	memcpy_s(&OnlyLoadLevel_Params.PackageName, sizeof(OnlyLoadLevel_Params.PackageName), &PackageName, sizeof(PackageName));

	this->ProcessEvent(uFnOnlyLoadLevel, &OnlyLoadLevel_Params, nullptr);
};

// Function Engine.CheatManager.StreamLevelIn
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FName                    PackageName                    (CPF_Parm)

void UCheatManager::StreamLevelIn(const class FName& PackageName)
{
	static UFunction* uFnStreamLevelIn = nullptr;

	if (!uFnStreamLevelIn)
	{
		uFnStreamLevelIn = UFunction::FindFunction("Function Engine.CheatManager.StreamLevelIn");
	}

	UCheatManager_execStreamLevelIn_Params StreamLevelIn_Params;
	memset(&StreamLevelIn_Params, 0, sizeof(StreamLevelIn_Params));
	memcpy_s(&StreamLevelIn_Params.PackageName, sizeof(StreamLevelIn_Params.PackageName), &PackageName, sizeof(PackageName));

	this->ProcessEvent(uFnStreamLevelIn, &StreamLevelIn_Params, nullptr);
};

// Function Engine.CheatManager.SetLevelStreamingStatus
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FName                    PackageName                    (CPF_Parm)
// uint32_t                       bShouldBeLoaded                (CPF_Parm)
// uint32_t                       bShouldBeVisible               (CPF_Parm)

void UCheatManager::SetLevelStreamingStatus(const class FName& PackageName, bool bShouldBeLoaded, bool bShouldBeVisible)
{
	static UFunction* uFnSetLevelStreamingStatus = nullptr;

	if (!uFnSetLevelStreamingStatus)
	{
		uFnSetLevelStreamingStatus = UFunction::FindFunction("Function Engine.CheatManager.SetLevelStreamingStatus");
	}

	UCheatManager_execSetLevelStreamingStatus_Params SetLevelStreamingStatus_Params;
	memset(&SetLevelStreamingStatus_Params, 0, sizeof(SetLevelStreamingStatus_Params));
	memcpy_s(&SetLevelStreamingStatus_Params.PackageName, sizeof(SetLevelStreamingStatus_Params.PackageName), &PackageName, sizeof(PackageName));
	SetLevelStreamingStatus_Params.bShouldBeLoaded = bShouldBeLoaded;
	SetLevelStreamingStatus_Params.bShouldBeVisible = bShouldBeVisible;

	this->ProcessEvent(uFnSetLevelStreamingStatus, &SetLevelStreamingStatus_Params, nullptr);
};

// Function Engine.CheatManager.AllWeapons
// [0x00020200] (FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UCheatManager::AllWeapons()
{
	static UFunction* uFnAllWeapons = nullptr;

	if (!uFnAllWeapons)
	{
		uFnAllWeapons = UFunction::FindFunction("Function Engine.CheatManager.AllWeapons");
	}

	UCheatManager_execAllWeapons_Params AllWeapons_Params;
	memset(&AllWeapons_Params, 0, sizeof(AllWeapons_Params));

	this->ProcessEvent(uFnAllWeapons, &AllWeapons_Params, nullptr);
};

// Function Engine.CheatManager.Loaded
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UCheatManager::Loaded()
{
	static UFunction* uFnLoaded = nullptr;

	if (!uFnLoaded)
	{
		uFnLoaded = UFunction::FindFunction("Function Engine.CheatManager.Loaded");
	}

	UCheatManager_execLoaded_Params Loaded_Params;
	memset(&Loaded_Params, 0, sizeof(Loaded_Params));

	this->ProcessEvent(uFnLoaded, &Loaded_Params, nullptr);
};

// Function Engine.CheatManager.SetTargetedActor
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25810])
// Parameter Info:
// class AActor*                  _pTarget                       (CPF_Parm)

void UCheatManager::SetTargetedActor(class AActor* _pTarget)
{
	static UFunction* uFnSetTargetedActor = nullptr;

	if (!uFnSetTargetedActor)
	{
		uFnSetTargetedActor = UFunction::FindFunction("Function Engine.CheatManager.SetTargetedActor");
	}

	UCheatManager_execSetTargetedActor_Params SetTargetedActor_Params;
	memset(&SetTargetedActor_Params, 0, sizeof(SetTargetedActor_Params));
	SetTargetedActor_Params._pTarget = _pTarget;

	uFnSetTargetedActor->iNative = 0;
	uFnSetTargetedActor->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetTargetedActor, &SetTargetedActor_Params, nullptr);
	uFnSetTargetedActor->FunctionFlags |= 0x400;
	uFnSetTargetedActor->iNative = 25810;
};

// Function Engine.CheatManager.ShowActor
// [0x00020601] (FUNC_Final | FUNC_Exec | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25906])
// Parameter Info:
// class FName                    actorName                      (CPF_Parm)

void UCheatManager::ShowActor(const class FName& actorName)
{
	static UFunction* uFnShowActor = nullptr;

	if (!uFnShowActor)
	{
		uFnShowActor = UFunction::FindFunction("Function Engine.CheatManager.ShowActor");
	}

	UCheatManager_execShowActor_Params ShowActor_Params;
	memset(&ShowActor_Params, 0, sizeof(ShowActor_Params));
	memcpy_s(&ShowActor_Params.actorName, sizeof(ShowActor_Params.actorName), &actorName, sizeof(actorName));

	uFnShowActor->iNative = 0;
	uFnShowActor->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnShowActor, &ShowActor_Params, nullptr);
	uFnShowActor->FunctionFlags |= 0x400;
	uFnShowActor->iNative = 25906;
};

// Function Engine.CheatManager.ViewClass
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AActor*                  aClass                         (CPF_Parm)

void UCheatManager::ViewClass(class AActor* aClass)
{
	static UFunction* uFnViewClass = nullptr;

	if (!uFnViewClass)
	{
		uFnViewClass = UFunction::FindFunction("Function Engine.CheatManager.ViewClass");
	}

	UCheatManager_execViewClass_Params ViewClass_Params;
	memset(&ViewClass_Params, 0, sizeof(ViewClass_Params));
	ViewClass_Params.aClass = aClass;

	this->ProcessEvent(uFnViewClass, &ViewClass_Params, nullptr);
};

// Function Engine.CheatManager.ViewActor
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FName                    actorName                      (CPF_Parm)

void UCheatManager::ViewActor(const class FName& actorName)
{
	static UFunction* uFnViewActor = nullptr;

	if (!uFnViewActor)
	{
		uFnViewActor = UFunction::FindFunction("Function Engine.CheatManager.ViewActor");
	}

	UCheatManager_execViewActor_Params ViewActor_Params;
	memset(&ViewActor_Params, 0, sizeof(ViewActor_Params));
	memcpy_s(&ViewActor_Params.actorName, sizeof(ViewActor_Params.actorName), &actorName, sizeof(actorName));

	this->ProcessEvent(uFnViewActor, &ViewActor_Params, nullptr);
};

// Function Engine.CheatManager.ViewPlayer
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  S                              (CPF_Parm | CPF_NeedCtorLink)

void UCheatManager::ViewPlayer(const class FString& S)
{
	static UFunction* uFnViewPlayer = nullptr;

	if (!uFnViewPlayer)
	{
		uFnViewPlayer = UFunction::FindFunction("Function Engine.CheatManager.ViewPlayer");
	}

	UCheatManager_execViewPlayer_Params ViewPlayer_Params;
	memset(&ViewPlayer_Params, 0, sizeof(ViewPlayer_Params));
	memcpy_s(&ViewPlayer_Params.S, sizeof(ViewPlayer_Params.S), &S, sizeof(S));

	this->ProcessEvent(uFnViewPlayer, &ViewPlayer_Params, nullptr);
};

// Function Engine.CheatManager.ViewSelf
// [0x00024202] (FUNC_Defined | FUNC_Exec | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bQuiet                         (CPF_OptionalParm | CPF_Parm)

void UCheatManager::ViewSelf(bool bQuiet)
{
	static UFunction* uFnViewSelf = nullptr;

	if (!uFnViewSelf)
	{
		uFnViewSelf = UFunction::FindFunction("Function Engine.CheatManager.ViewSelf");
	}

	UCheatManager_execViewSelf_Params ViewSelf_Params;
	memset(&ViewSelf_Params, 0, sizeof(ViewSelf_Params));
	ViewSelf_Params.bQuiet = bQuiet;

	this->ProcessEvent(uFnViewSelf, &ViewSelf_Params, nullptr);
};

// Function Engine.CheatManager.PlayersOnly
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UCheatManager::PlayersOnly()
{
	static UFunction* uFnPlayersOnly = nullptr;

	if (!uFnPlayersOnly)
	{
		uFnPlayersOnly = UFunction::FindFunction("Function Engine.CheatManager.PlayersOnly");
	}

	UCheatManager_execPlayersOnly_Params PlayersOnly_Params;
	memset(&PlayersOnly_Params, 0, sizeof(PlayersOnly_Params));

	this->ProcessEvent(uFnPlayersOnly, &PlayersOnly_Params, nullptr);
};

// Function Engine.CheatManager.Summon
// [0x00820202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// class FString                  ClassName                      (CPF_Parm | CPF_NeedCtorLink)

void UCheatManager::Summon(const class FString& ClassName)
{
	static UFunction* uFnSummon = nullptr;

	if (!uFnSummon)
	{
		uFnSummon = UFunction::FindFunction("Function Engine.CheatManager.Summon");
	}

	UCheatManager_execSummon_Params Summon_Params;
	memset(&Summon_Params, 0, sizeof(Summon_Params));
	memcpy_s(&Summon_Params.ClassName, sizeof(Summon_Params.ClassName), &ClassName, sizeof(ClassName));

	this->ProcessEvent(uFnSummon, &Summon_Params, nullptr);
};

// Function Engine.CheatManager.Avatar
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FName                    ClassName                      (CPF_Parm)

void UCheatManager::Avatar(const class FName& ClassName)
{
	static UFunction* uFnAvatar = nullptr;

	if (!uFnAvatar)
	{
		uFnAvatar = UFunction::FindFunction("Function Engine.CheatManager.Avatar");
	}

	UCheatManager_execAvatar_Params Avatar_Params;
	memset(&Avatar_Params, 0, sizeof(Avatar_Params));
	memcpy_s(&Avatar_Params.ClassName, sizeof(Avatar_Params.ClassName), &ClassName, sizeof(ClassName));

	this->ProcessEvent(uFnAvatar, &Avatar_Params, nullptr);
};

// Function Engine.CheatManager.KillPawns
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UCheatManager::KillPawns()
{
	static UFunction* uFnKillPawns = nullptr;

	if (!uFnKillPawns)
	{
		uFnKillPawns = UFunction::FindFunction("Function Engine.CheatManager.KillPawns");
	}

	UCheatManager_execKillPawns_Params KillPawns_Params;
	memset(&KillPawns_Params, 0, sizeof(KillPawns_Params));

	this->ProcessEvent(uFnKillPawns, &KillPawns_Params, nullptr);
};

// Function Engine.CheatManager.KillAllPawns
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class APawn*                   aClass                         (CPF_Parm)

void UCheatManager::KillAllPawns(class APawn* aClass)
{
	static UFunction* uFnKillAllPawns = nullptr;

	if (!uFnKillAllPawns)
	{
		uFnKillAllPawns = UFunction::FindFunction("Function Engine.CheatManager.KillAllPawns");
	}

	UCheatManager_execKillAllPawns_Params KillAllPawns_Params;
	memset(&KillAllPawns_Params, 0, sizeof(KillAllPawns_Params));
	KillAllPawns_Params.aClass = aClass;

	this->ProcessEvent(uFnKillAllPawns, &KillAllPawns_Params, nullptr);
};

// Function Engine.CheatManager.KillAll
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AActor*                  aClass                         (CPF_Parm)

void UCheatManager::KillAll(class AActor* aClass)
{
	static UFunction* uFnKillAll = nullptr;

	if (!uFnKillAll)
	{
		uFnKillAll = UFunction::FindFunction("Function Engine.CheatManager.KillAll");
	}

	UCheatManager_execKillAll_Params KillAll_Params;
	memset(&KillAll_Params, 0, sizeof(KillAll_Params));
	KillAll_Params.aClass = aClass;

	this->ProcessEvent(uFnKillAll, &KillAll_Params, nullptr);
};

// Function Engine.CheatManager.SetSpeed
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          F                              (CPF_Parm)

void UCheatManager::SetSpeed(float F)
{
	static UFunction* uFnSetSpeed = nullptr;

	if (!uFnSetSpeed)
	{
		uFnSetSpeed = UFunction::FindFunction("Function Engine.CheatManager.SetSpeed");
	}

	UCheatManager_execSetSpeed_Params SetSpeed_Params;
	memset(&SetSpeed_Params, 0, sizeof(SetSpeed_Params));
	memcpy_s(&SetSpeed_Params.F, sizeof(SetSpeed_Params.F), &F, sizeof(F));

	this->ProcessEvent(uFnSetSpeed, &SetSpeed_Params, nullptr);
};

// Function Engine.CheatManager.SetGravity
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          F                              (CPF_Parm)

void UCheatManager::SetGravity(float F)
{
	static UFunction* uFnSetGravity = nullptr;

	if (!uFnSetGravity)
	{
		uFnSetGravity = UFunction::FindFunction("Function Engine.CheatManager.SetGravity");
	}

	UCheatManager_execSetGravity_Params SetGravity_Params;
	memset(&SetGravity_Params, 0, sizeof(SetGravity_Params));
	memcpy_s(&SetGravity_Params.F, sizeof(SetGravity_Params.F), &F, sizeof(F));

	this->ProcessEvent(uFnSetGravity, &SetGravity_Params, nullptr);
};

// Function Engine.CheatManager.SetJumpZ
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          F                              (CPF_Parm)

void UCheatManager::SetJumpZ(float F)
{
	static UFunction* uFnSetJumpZ = nullptr;

	if (!uFnSetJumpZ)
	{
		uFnSetJumpZ = UFunction::FindFunction("Function Engine.CheatManager.SetJumpZ");
	}

	UCheatManager_execSetJumpZ_Params SetJumpZ_Params;
	memset(&SetJumpZ_Params, 0, sizeof(SetJumpZ_Params));
	memcpy_s(&SetJumpZ_Params.F, sizeof(SetJumpZ_Params.F), &F, sizeof(F));

	this->ProcessEvent(uFnSetJumpZ, &SetJumpZ_Params, nullptr);
};

// Function Engine.CheatManager.Slomo
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          T                              (CPF_Parm)

void UCheatManager::Slomo(float T)
{
	static UFunction* uFnSlomo = nullptr;

	if (!uFnSlomo)
	{
		uFnSlomo = UFunction::FindFunction("Function Engine.CheatManager.Slomo");
	}

	UCheatManager_execSlomo_Params Slomo_Params;
	memset(&Slomo_Params, 0, sizeof(Slomo_Params));
	memcpy_s(&Slomo_Params.T, sizeof(Slomo_Params.T), &T, sizeof(T));

	this->ProcessEvent(uFnSlomo, &Slomo_Params, nullptr);
};

// Function Engine.CheatManager.AffectedByHitEffects
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UCheatManager::AffectedByHitEffects()
{
	static UFunction* uFnAffectedByHitEffects = nullptr;

	if (!uFnAffectedByHitEffects)
	{
		uFnAffectedByHitEffects = UFunction::FindFunction("Function Engine.CheatManager.AffectedByHitEffects");
	}

	UCheatManager_execAffectedByHitEffects_Params AffectedByHitEffects_Params;
	memset(&AffectedByHitEffects_Params, 0, sizeof(AffectedByHitEffects_Params));

	this->ProcessEvent(uFnAffectedByHitEffects, &AffectedByHitEffects_Params, nullptr);
};

// Function Engine.CheatManager.God
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UCheatManager::God()
{
	static UFunction* uFnGod = nullptr;

	if (!uFnGod)
	{
		uFnGod = UFunction::FindFunction("Function Engine.CheatManager.God");
	}

	UCheatManager_execGod_Params God_Params;
	memset(&God_Params, 0, sizeof(God_Params));

	this->ProcessEvent(uFnGod, &God_Params, nullptr);
};

// Function Engine.CheatManager.AllAmmo
// [0x00020200] (FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UCheatManager::AllAmmo()
{
	static UFunction* uFnAllAmmo = nullptr;

	if (!uFnAllAmmo)
	{
		uFnAllAmmo = UFunction::FindFunction("Function Engine.CheatManager.AllAmmo");
	}

	UCheatManager_execAllAmmo_Params AllAmmo_Params;
	memset(&AllAmmo_Params, 0, sizeof(AllAmmo_Params));

	this->ProcessEvent(uFnAllAmmo, &AllAmmo_Params, nullptr);
};

// Function Engine.CheatManager.Ghost
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UCheatManager::Ghost()
{
	static UFunction* uFnGhost = nullptr;

	if (!uFnGhost)
	{
		uFnGhost = UFunction::FindFunction("Function Engine.CheatManager.Ghost");
	}

	UCheatManager_execGhost_Params Ghost_Params;
	memset(&Ghost_Params, 0, sizeof(Ghost_Params));

	this->ProcessEvent(uFnGhost, &Ghost_Params, nullptr);
};

// Function Engine.CheatManager.Walk
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UCheatManager::Walk()
{
	static UFunction* uFnWalk = nullptr;

	if (!uFnWalk)
	{
		uFnWalk = UFunction::FindFunction("Function Engine.CheatManager.Walk");
	}

	UCheatManager_execWalk_Params Walk_Params;
	memset(&Walk_Params, 0, sizeof(Walk_Params));

	this->ProcessEvent(uFnWalk, &Walk_Params, nullptr);
};

// Function Engine.CheatManager.Fly
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UCheatManager::Fly()
{
	static UFunction* uFnFly = nullptr;

	if (!uFnFly)
	{
		uFnFly = UFunction::FindFunction("Function Engine.CheatManager.Fly");
	}

	UCheatManager_execFly_Params Fly_Params;
	memset(&Fly_Params, 0, sizeof(Fly_Params));

	this->ProcessEvent(uFnFly, &Fly_Params, nullptr);
};

// Function Engine.CheatManager.Amphibious
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UCheatManager::Amphibious()
{
	static UFunction* uFnAmphibious = nullptr;

	if (!uFnAmphibious)
	{
		uFnAmphibious = UFunction::FindFunction("Function Engine.CheatManager.Amphibious");
	}

	UCheatManager_execAmphibious_Params Amphibious_Params;
	memset(&Amphibious_Params, 0, sizeof(Amphibious_Params));

	this->ProcessEvent(uFnAmphibious, &Amphibious_Params, nullptr);
};

// Function Engine.CheatManager.EndPath
// [0x00020200] (FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UCheatManager::EndPath()
{
	static UFunction* uFnEndPath = nullptr;

	if (!uFnEndPath)
	{
		uFnEndPath = UFunction::FindFunction("Function Engine.CheatManager.EndPath");
	}

	UCheatManager_execEndPath_Params EndPath_Params;
	memset(&EndPath_Params, 0, sizeof(EndPath_Params));

	this->ProcessEvent(uFnEndPath, &EndPath_Params, nullptr);
};

// Function Engine.CheatManager.ChangeSize
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          F                              (CPF_Parm)

void UCheatManager::ChangeSize(float F)
{
	static UFunction* uFnChangeSize = nullptr;

	if (!uFnChangeSize)
	{
		uFnChangeSize = UFunction::FindFunction("Function Engine.CheatManager.ChangeSize");
	}

	UCheatManager_execChangeSize_Params ChangeSize_Params;
	memset(&ChangeSize_Params, 0, sizeof(ChangeSize_Params));
	memcpy_s(&ChangeSize_Params.F, sizeof(ChangeSize_Params.F), &F, sizeof(F));

	this->ProcessEvent(uFnChangeSize, &ChangeSize_Params, nullptr);
};

// Function Engine.CheatManager.Teleport
// [0x00820202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:

void UCheatManager::Teleport()
{
	static UFunction* uFnTeleport = nullptr;

	if (!uFnTeleport)
	{
		uFnTeleport = UFunction::FindFunction("Function Engine.CheatManager.Teleport");
	}

	UCheatManager_execTeleport_Params Teleport_Params;
	memset(&Teleport_Params, 0, sizeof(Teleport_Params));

	this->ProcessEvent(uFnTeleport, &Teleport_Params, nullptr);
};

// Function Engine.CheatManager.KillViewedActor
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UCheatManager::KillViewedActor()
{
	static UFunction* uFnKillViewedActor = nullptr;

	if (!uFnKillViewedActor)
	{
		uFnKillViewedActor = UFunction::FindFunction("Function Engine.CheatManager.KillViewedActor");
	}

	UCheatManager_execKillViewedActor_Params KillViewedActor_Params;
	memset(&KillViewedActor_Params, 0, sizeof(KillViewedActor_Params));

	this->ProcessEvent(uFnKillViewedActor, &KillViewedActor_Params, nullptr);
};

// Function Engine.CheatManager.WriteToLog
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  Param                          (CPF_Parm | CPF_NeedCtorLink)

void UCheatManager::WriteToLog(const class FString& Param)
{
	static UFunction* uFnWriteToLog = nullptr;

	if (!uFnWriteToLog)
	{
		uFnWriteToLog = UFunction::FindFunction("Function Engine.CheatManager.WriteToLog");
	}

	UCheatManager_execWriteToLog_Params WriteToLog_Params;
	memset(&WriteToLog_Params, 0, sizeof(WriteToLog_Params));
	memcpy_s(&WriteToLog_Params.Param, sizeof(WriteToLog_Params.Param), &Param, sizeof(Param));

	this->ProcessEvent(uFnWriteToLog, &WriteToLog_Params, nullptr);
};

// Function Engine.CheatManager.FreezeFrame
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          Delay                          (CPF_Parm)

void UCheatManager::FreezeFrame(float Delay)
{
	static UFunction* uFnFreezeFrame = nullptr;

	if (!uFnFreezeFrame)
	{
		uFnFreezeFrame = UFunction::FindFunction("Function Engine.CheatManager.FreezeFrame");
	}

	UCheatManager_execFreezeFrame_Params FreezeFrame_Params;
	memset(&FreezeFrame_Params, 0, sizeof(FreezeFrame_Params));
	memcpy_s(&FreezeFrame_Params.Delay, sizeof(FreezeFrame_Params.Delay), &Delay, sizeof(Delay));

	this->ProcessEvent(uFnFreezeFrame, &FreezeFrame_Params, nullptr);
};

// Function Engine.CheatManager.ListDynamicActors
// [0x00020200] (FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UCheatManager::ListDynamicActors()
{
	static UFunction* uFnListDynamicActors = nullptr;

	if (!uFnListDynamicActors)
	{
		uFnListDynamicActors = UFunction::FindFunction("Function Engine.CheatManager.ListDynamicActors");
	}

	UCheatManager_execListDynamicActors_Params ListDynamicActors_Params;
	memset(&ListDynamicActors_Params, 0, sizeof(ListDynamicActors_Params));

	this->ProcessEvent(uFnListDynamicActors, &ListDynamicActors_Params, nullptr);
};

// Function Engine.CheatManager.DebugPause
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UCheatManager::DebugPause()
{
	static UFunction* uFnDebugPause = nullptr;

	if (!uFnDebugPause)
	{
		uFnDebugPause = UFunction::FindFunction("Function Engine.CheatManager.DebugPause");
	}

	UCheatManager_execDebugPause_Params DebugPause_Params;
	memset(&DebugPause_Params, 0, sizeof(DebugPause_Params));

	this->ProcessEvent(uFnDebugPause, &DebugPause_Params, nullptr);
};

// Function Engine.CheatManager.DebugAI
// [0x00024200] (FUNC_Exec | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FName                    Category                       (CPF_OptionalParm | CPF_Parm | CPF_CoerceParm)

void UCheatManager::DebugAI(const class FName& Category)
{
	static UFunction* uFnDebugAI = nullptr;

	if (!uFnDebugAI)
	{
		uFnDebugAI = UFunction::FindFunction("Function Engine.CheatManager.DebugAI");
	}

	UCheatManager_execDebugAI_Params DebugAI_Params;
	memset(&DebugAI_Params, 0, sizeof(DebugAI_Params));
	memcpy_s(&DebugAI_Params.Category, sizeof(DebugAI_Params.Category), &Category, sizeof(Category));

	this->ProcessEvent(uFnDebugAI, &DebugAI_Params, nullptr);
};

// Function Engine.CheatManager.FXStop
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class APawn*                   aClass                         (CPF_Parm)

void UCheatManager::FXStop(class APawn* aClass)
{
	static UFunction* uFnFXStop = nullptr;

	if (!uFnFXStop)
	{
		uFnFXStop = UFunction::FindFunction("Function Engine.CheatManager.FXStop");
	}

	UCheatManager_execFXStop_Params FXStop_Params;
	memset(&FXStop_Params, 0, sizeof(FXStop_Params));
	FXStop_Params.aClass = aClass;

	this->ProcessEvent(uFnFXStop, &FXStop_Params, nullptr);
};

// Function Engine.CheatManager.FXPlay
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class APawn*                   aClass                         (CPF_Parm)
// class FString                  FXAnimPath                     (CPF_Parm | CPF_NeedCtorLink)

void UCheatManager::FXPlay(class APawn* aClass, const class FString& FXAnimPath)
{
	static UFunction* uFnFXPlay = nullptr;

	if (!uFnFXPlay)
	{
		uFnFXPlay = UFunction::FindFunction("Function Engine.CheatManager.FXPlay");
	}

	UCheatManager_execFXPlay_Params FXPlay_Params;
	memset(&FXPlay_Params, 0, sizeof(FXPlay_Params));
	FXPlay_Params.aClass = aClass;
	memcpy_s(&FXPlay_Params.FXAnimPath, sizeof(FXPlay_Params.FXAnimPath), &FXAnimPath, sizeof(FXAnimPath));

	this->ProcessEvent(uFnFXPlay, &FXPlay_Params, nullptr);
};

// Function Engine.FaceFXAsset.UnmountFaceFXAnimSet
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[26950])
// Parameter Info:
// class UFaceFXAnimSet*          AnimSet                        (CPF_Parm)

void UFaceFXAsset::UnmountFaceFXAnimSet(class UFaceFXAnimSet* AnimSet)
{
	static UFunction* uFnUnmountFaceFXAnimSet = nullptr;

	if (!uFnUnmountFaceFXAnimSet)
	{
		uFnUnmountFaceFXAnimSet = UFunction::FindFunction("Function Engine.FaceFXAsset.UnmountFaceFXAnimSet");
	}

	UFaceFXAsset_execUnmountFaceFXAnimSet_Params UnmountFaceFXAnimSet_Params;
	memset(&UnmountFaceFXAnimSet_Params, 0, sizeof(UnmountFaceFXAnimSet_Params));
	UnmountFaceFXAnimSet_Params.AnimSet = AnimSet;

	uFnUnmountFaceFXAnimSet->iNative = 0;
	uFnUnmountFaceFXAnimSet->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnUnmountFaceFXAnimSet, &UnmountFaceFXAnimSet_Params, nullptr);
	uFnUnmountFaceFXAnimSet->FunctionFlags |= 0x400;
	uFnUnmountFaceFXAnimSet->iNative = 26950;
};

// Function Engine.FaceFXAsset.MountFaceFXAnimSet
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[22964])
// Parameter Info:
// class UFaceFXAnimSet*          AnimSet                        (CPF_Parm)

void UFaceFXAsset::MountFaceFXAnimSet(class UFaceFXAnimSet* AnimSet)
{
	static UFunction* uFnMountFaceFXAnimSet = nullptr;

	if (!uFnMountFaceFXAnimSet)
	{
		uFnMountFaceFXAnimSet = UFunction::FindFunction("Function Engine.FaceFXAsset.MountFaceFXAnimSet");
	}

	UFaceFXAsset_execMountFaceFXAnimSet_Params MountFaceFXAnimSet_Params;
	memset(&MountFaceFXAnimSet_Params, 0, sizeof(MountFaceFXAnimSet_Params));
	MountFaceFXAnimSet_Params.AnimSet = AnimSet;

	uFnMountFaceFXAnimSet->iNative = 0;
	uFnMountFaceFXAnimSet->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnMountFaceFXAnimSet, &MountFaceFXAnimSet_Params, nullptr);
	uFnMountFaceFXAnimSet->FunctionFlags |= 0x400;
	uFnMountFaceFXAnimSet->iNative = 22964;
};

// Function Engine.Font.GetStringHeightAndWidth
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20764])
// Parameter Info:
// class FString                  InString                       (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)
// int32_t                        Height                         (CPF_Parm | CPF_OutParm)
// int32_t                        Width                          (CPF_Parm | CPF_OutParm)

void UFont::GetStringHeightAndWidth(class FString& InString, int32_t& Height, int32_t& Width)
{
	static UFunction* uFnGetStringHeightAndWidth = nullptr;

	if (!uFnGetStringHeightAndWidth)
	{
		uFnGetStringHeightAndWidth = UFunction::FindFunction("Function Engine.Font.GetStringHeightAndWidth");
	}

	UFont_execGetStringHeightAndWidth_Params GetStringHeightAndWidth_Params;
	memset(&GetStringHeightAndWidth_Params, 0, sizeof(GetStringHeightAndWidth_Params));
	memcpy_s(&GetStringHeightAndWidth_Params.InString, sizeof(GetStringHeightAndWidth_Params.InString), &InString, sizeof(InString));
	memcpy_s(&GetStringHeightAndWidth_Params.Height, sizeof(GetStringHeightAndWidth_Params.Height), &Height, sizeof(Height));
	memcpy_s(&GetStringHeightAndWidth_Params.Width, sizeof(GetStringHeightAndWidth_Params.Width), &Width, sizeof(Width));

	uFnGetStringHeightAndWidth->iNative = 0;
	uFnGetStringHeightAndWidth->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetStringHeightAndWidth, &GetStringHeightAndWidth_Params, nullptr);
	uFnGetStringHeightAndWidth->FunctionFlags |= 0x400;
	uFnGetStringHeightAndWidth->iNative = 20764;

	memcpy_s(&InString, sizeof(InString), &GetStringHeightAndWidth_Params.InString, sizeof(GetStringHeightAndWidth_Params.InString));
	memcpy_s(&Height, sizeof(Height), &GetStringHeightAndWidth_Params.Height, sizeof(GetStringHeightAndWidth_Params.Height));
	memcpy_s(&Width, sizeof(Width), &GetStringHeightAndWidth_Params.Width, sizeof(GetStringHeightAndWidth_Params.Width));
};

// Function Engine.Font.GetMaxCharHeight
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20639])
// Parameter Info:
// float                          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

float UFont::GetMaxCharHeight()
{
	static UFunction* uFnGetMaxCharHeight = nullptr;

	if (!uFnGetMaxCharHeight)
	{
		uFnGetMaxCharHeight = UFunction::FindFunction("Function Engine.Font.GetMaxCharHeight");
	}

	UFont_execGetMaxCharHeight_Params GetMaxCharHeight_Params;
	memset(&GetMaxCharHeight_Params, 0, sizeof(GetMaxCharHeight_Params));

	uFnGetMaxCharHeight->iNative = 0;
	uFnGetMaxCharHeight->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetMaxCharHeight, &GetMaxCharHeight_Params, nullptr);
	uFnGetMaxCharHeight->FunctionFlags |= 0x400;
	uFnGetMaxCharHeight->iNative = 20639;

	return GetMaxCharHeight_Params.ReturnValue;
};

// Function Engine.Font.GetAuthoredViewportHeight
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20500])
// Parameter Info:
// float                          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// float                          ViewportHeight                 (CPF_Parm)

float UFont::GetAuthoredViewportHeight(float ViewportHeight)
{
	static UFunction* uFnGetAuthoredViewportHeight = nullptr;

	if (!uFnGetAuthoredViewportHeight)
	{
		uFnGetAuthoredViewportHeight = UFunction::FindFunction("Function Engine.Font.GetAuthoredViewportHeight");
	}

	UFont_execGetAuthoredViewportHeight_Params GetAuthoredViewportHeight_Params;
	memset(&GetAuthoredViewportHeight_Params, 0, sizeof(GetAuthoredViewportHeight_Params));
	memcpy_s(&GetAuthoredViewportHeight_Params.ViewportHeight, sizeof(GetAuthoredViewportHeight_Params.ViewportHeight), &ViewportHeight, sizeof(ViewportHeight));

	uFnGetAuthoredViewportHeight->iNative = 0;
	uFnGetAuthoredViewportHeight->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetAuthoredViewportHeight, &GetAuthoredViewportHeight_Params, nullptr);
	uFnGetAuthoredViewportHeight->FunctionFlags |= 0x400;
	uFnGetAuthoredViewportHeight->iNative = 20500;

	return GetAuthoredViewportHeight_Params.ReturnValue;
};

// Function Engine.Font.GetScalingFactor
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20742])
// Parameter Info:
// float                          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// float                          HeightTest                     (CPF_Parm)

float UFont::GetScalingFactor(float HeightTest)
{
	static UFunction* uFnGetScalingFactor = nullptr;

	if (!uFnGetScalingFactor)
	{
		uFnGetScalingFactor = UFunction::FindFunction("Function Engine.Font.GetScalingFactor");
	}

	UFont_execGetScalingFactor_Params GetScalingFactor_Params;
	memset(&GetScalingFactor_Params, 0, sizeof(GetScalingFactor_Params));
	memcpy_s(&GetScalingFactor_Params.HeightTest, sizeof(GetScalingFactor_Params.HeightTest), &HeightTest, sizeof(HeightTest));

	uFnGetScalingFactor->iNative = 0;
	uFnGetScalingFactor->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetScalingFactor, &GetScalingFactor_Params, nullptr);
	uFnGetScalingFactor->FunctionFlags |= 0x400;
	uFnGetScalingFactor->iNative = 20742;

	return GetScalingFactor_Params.ReturnValue;
};

// Function Engine.Font.GetResolutionPageIndex
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20733])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// float                          HeightTest                     (CPF_Parm)

int32_t UFont::GetResolutionPageIndex(float HeightTest)
{
	static UFunction* uFnGetResolutionPageIndex = nullptr;

	if (!uFnGetResolutionPageIndex)
	{
		uFnGetResolutionPageIndex = UFunction::FindFunction("Function Engine.Font.GetResolutionPageIndex");
	}

	UFont_execGetResolutionPageIndex_Params GetResolutionPageIndex_Params;
	memset(&GetResolutionPageIndex_Params, 0, sizeof(GetResolutionPageIndex_Params));
	memcpy_s(&GetResolutionPageIndex_Params.HeightTest, sizeof(GetResolutionPageIndex_Params.HeightTest), &HeightTest, sizeof(HeightTest));

	uFnGetResolutionPageIndex->iNative = 0;
	uFnGetResolutionPageIndex->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetResolutionPageIndex, &GetResolutionPageIndex_Params, nullptr);
	uFnGetResolutionPageIndex->FunctionFlags |= 0x400;
	uFnGetResolutionPageIndex->iNative = 20733;

	return GetResolutionPageIndex_Params.ReturnValue;
};

// Function Engine.MultiFont.GetResolutionTestTableIndex
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20734])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// float                          HeightTest                     (CPF_Parm)

int32_t UMultiFont::GetResolutionTestTableIndex(float HeightTest)
{
	static UFunction* uFnGetResolutionTestTableIndex = nullptr;

	if (!uFnGetResolutionTestTableIndex)
	{
		uFnGetResolutionTestTableIndex = UFunction::FindFunction("Function Engine.MultiFont.GetResolutionTestTableIndex");
	}

	UMultiFont_execGetResolutionTestTableIndex_Params GetResolutionTestTableIndex_Params;
	memset(&GetResolutionTestTableIndex_Params, 0, sizeof(GetResolutionTestTableIndex_Params));
	memcpy_s(&GetResolutionTestTableIndex_Params.HeightTest, sizeof(GetResolutionTestTableIndex_Params.HeightTest), &HeightTest, sizeof(HeightTest));

	uFnGetResolutionTestTableIndex->iNative = 0;
	uFnGetResolutionTestTableIndex->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetResolutionTestTableIndex, &GetResolutionTestTableIndex_Params, nullptr);
	uFnGetResolutionTestTableIndex->FunctionFlags |= 0x400;
	uFnGetResolutionTestTableIndex->iNative = 20734;

	return GetResolutionTestTableIndex_Params.ReturnValue;
};

// Function Engine.ForceFeedbackManager.PauseWaveform
// [0x00024102] (FUNC_Defined | FUNC_Simulated | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bPause                         (CPF_OptionalParm | CPF_Parm)

void UForceFeedbackManager::PauseWaveform(bool bPause)
{
	static UFunction* uFnPauseWaveform = nullptr;

	if (!uFnPauseWaveform)
	{
		uFnPauseWaveform = UFunction::FindFunction("Function Engine.ForceFeedbackManager.PauseWaveform");
	}

	UForceFeedbackManager_execPauseWaveform_Params PauseWaveform_Params;
	memset(&PauseWaveform_Params, 0, sizeof(PauseWaveform_Params));
	PauseWaveform_Params.bPause = bPause;

	this->ProcessEvent(uFnPauseWaveform, &PauseWaveform_Params, nullptr);
};

// Function Engine.ForceFeedbackManager.StopForceFeedbackWaveform
// [0x00024102] (FUNC_Defined | FUNC_Simulated | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UForceFeedbackWaveform*  WaveForm                       (CPF_OptionalParm | CPF_Parm)

void UForceFeedbackManager::StopForceFeedbackWaveform(class UForceFeedbackWaveform* WaveForm)
{
	static UFunction* uFnStopForceFeedbackWaveform = nullptr;

	if (!uFnStopForceFeedbackWaveform)
	{
		uFnStopForceFeedbackWaveform = UFunction::FindFunction("Function Engine.ForceFeedbackManager.StopForceFeedbackWaveform");
	}

	UForceFeedbackManager_execStopForceFeedbackWaveform_Params StopForceFeedbackWaveform_Params;
	memset(&StopForceFeedbackWaveform_Params, 0, sizeof(StopForceFeedbackWaveform_Params));
	StopForceFeedbackWaveform_Params.WaveForm = WaveForm;

	this->ProcessEvent(uFnStopForceFeedbackWaveform, &StopForceFeedbackWaveform_Params, nullptr);
};

// Function Engine.ForceFeedbackManager.PlayForceFeedbackWaveform
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UForceFeedbackWaveform*  WaveForm                       (CPF_Parm)
// class AActor*                  WaveInstigator                 (CPF_Parm)

void UForceFeedbackManager::PlayForceFeedbackWaveform(class UForceFeedbackWaveform* WaveForm, class AActor* WaveInstigator)
{
	static UFunction* uFnPlayForceFeedbackWaveform = nullptr;

	if (!uFnPlayForceFeedbackWaveform)
	{
		uFnPlayForceFeedbackWaveform = UFunction::FindFunction("Function Engine.ForceFeedbackManager.PlayForceFeedbackWaveform");
	}

	UForceFeedbackManager_execPlayForceFeedbackWaveform_Params PlayForceFeedbackWaveform_Params;
	memset(&PlayForceFeedbackWaveform_Params, 0, sizeof(PlayForceFeedbackWaveform_Params));
	PlayForceFeedbackWaveform_Params.WaveForm = WaveForm;
	PlayForceFeedbackWaveform_Params.WaveInstigator = WaveInstigator;

	this->ProcessEvent(uFnPlayForceFeedbackWaveform, &PlayForceFeedbackWaveform_Params, nullptr);
};

// Function Engine.GameViewportClient.DebugSetUISystemEnabled
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[18634])
// Parameter Info:
// uint32_t                       bOldUISystemActive             (CPF_Parm)
// uint32_t                       bGFxUISystemActive             (CPF_Parm)

void UGameViewportClient::DebugSetUISystemEnabled(bool bOldUISystemActive, bool bGFxUISystemActive)
{
	static UFunction* uFnDebugSetUISystemEnabled = nullptr;

	if (!uFnDebugSetUISystemEnabled)
	{
		uFnDebugSetUISystemEnabled = UFunction::FindFunction("Function Engine.GameViewportClient.DebugSetUISystemEnabled");
	}

	UGameViewportClient_execDebugSetUISystemEnabled_Params DebugSetUISystemEnabled_Params;
	memset(&DebugSetUISystemEnabled_Params, 0, sizeof(DebugSetUISystemEnabled_Params));
	DebugSetUISystemEnabled_Params.bOldUISystemActive = bOldUISystemActive;
	DebugSetUISystemEnabled_Params.bGFxUISystemActive = bGFxUISystemActive;

	uFnDebugSetUISystemEnabled->iNative = 0;
	uFnDebugSetUISystemEnabled->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnDebugSetUISystemEnabled, &DebugSetUISystemEnabled_Params, nullptr);
	uFnDebugSetUISystemEnabled->FunctionFlags |= 0x400;
	uFnDebugSetUISystemEnabled->iNative = 18634;
};

// Function Engine.GameViewportClient.BecomePrimaryPlayer
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        PlayerIndex                    (CPF_Parm)

void UGameViewportClient::BecomePrimaryPlayer(int32_t PlayerIndex)
{
	static UFunction* uFnBecomePrimaryPlayer = nullptr;

	if (!uFnBecomePrimaryPlayer)
	{
		uFnBecomePrimaryPlayer = UFunction::FindFunction("Function Engine.GameViewportClient.BecomePrimaryPlayer");
	}

	UGameViewportClient_execBecomePrimaryPlayer_Params BecomePrimaryPlayer_Params;
	memset(&BecomePrimaryPlayer_Params, 0, sizeof(BecomePrimaryPlayer_Params));
	memcpy_s(&BecomePrimaryPlayer_Params.PlayerIndex, sizeof(BecomePrimaryPlayer_Params.PlayerIndex), &PlayerIndex, sizeof(PlayerIndex));

	this->ProcessEvent(uFnBecomePrimaryPlayer, &BecomePrimaryPlayer_Params, nullptr);
};

// Function Engine.GameViewportClient.FixupOwnerReferences
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20160])
// Parameter Info:

void UGameViewportClient::FixupOwnerReferences()
{
	static UFunction* uFnFixupOwnerReferences = nullptr;

	if (!uFnFixupOwnerReferences)
	{
		uFnFixupOwnerReferences = UFunction::FindFunction("Function Engine.GameViewportClient.FixupOwnerReferences");
	}

	UGameViewportClient_execFixupOwnerReferences_Params FixupOwnerReferences_Params;
	memset(&FixupOwnerReferences_Params, 0, sizeof(FixupOwnerReferences_Params));

	uFnFixupOwnerReferences->iNative = 0;
	uFnFixupOwnerReferences->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnFixupOwnerReferences, &FixupOwnerReferences_Params, nullptr);
	uFnFixupOwnerReferences->FunctionFlags |= 0x400;
	uFnFixupOwnerReferences->iNative = 20160;
};

// Function Engine.GameViewportClient.GetPlayerOwner
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20684])
// Parameter Info:
// class ULocalPlayer*            ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        PlayerIndex                    (CPF_Parm)

class ULocalPlayer* UGameViewportClient::GetPlayerOwner(int32_t PlayerIndex)
{
	static UFunction* uFnGetPlayerOwner = nullptr;

	if (!uFnGetPlayerOwner)
	{
		uFnGetPlayerOwner = UFunction::FindFunction("Function Engine.GameViewportClient.GetPlayerOwner");
	}

	UGameViewportClient_execGetPlayerOwner_Params GetPlayerOwner_Params;
	memset(&GetPlayerOwner_Params, 0, sizeof(GetPlayerOwner_Params));
	memcpy_s(&GetPlayerOwner_Params.PlayerIndex, sizeof(GetPlayerOwner_Params.PlayerIndex), &PlayerIndex, sizeof(PlayerIndex));

	uFnGetPlayerOwner->iNative = 0;
	uFnGetPlayerOwner->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetPlayerOwner, &GetPlayerOwner_Params, nullptr);
	uFnGetPlayerOwner->FunctionFlags |= 0x400;
	uFnGetPlayerOwner->iNative = 20684;

	return GetPlayerOwner_Params.ReturnValue;
};

// Function Engine.GameViewportClient.ClearProgressMessages
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UGameViewportClient::ClearProgressMessages()
{
	static UFunction* uFnClearProgressMessages = nullptr;

	if (!uFnClearProgressMessages)
	{
		uFnClearProgressMessages = UFunction::FindFunction("Function Engine.GameViewportClient.ClearProgressMessages");
	}

	UGameViewportClient_execClearProgressMessages_Params ClearProgressMessages_Params;
	memset(&ClearProgressMessages_Params, 0, sizeof(ClearProgressMessages_Params));

	this->ProcessEvent(uFnClearProgressMessages, &ClearProgressMessages_Params, nullptr);
};

// Function Engine.GameViewportClient.SetProgressTime
// [0x00020A02] (FUNC_Defined | FUNC_Exec | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          T                              (CPF_Parm)

void UGameViewportClient::SetProgressTime(float T)
{
	static UFunction* uFnSetProgressTime = nullptr;

	if (!uFnSetProgressTime)
	{
		uFnSetProgressTime = UFunction::FindFunction("Function Engine.GameViewportClient.SetProgressTime");
	}

	UGameViewportClient_execSetProgressTime_Params SetProgressTime_Params;
	memset(&SetProgressTime_Params, 0, sizeof(SetProgressTime_Params));
	memcpy_s(&SetProgressTime_Params.T, sizeof(SetProgressTime_Params.T), &T, sizeof(T));

	this->ProcessEvent(uFnSetProgressTime, &SetProgressTime_Params, nullptr);
};

// Function Engine.GameViewportClient.NotifyConnectionError
// [0x00024002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  Message                        (CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink)
// class FString                  Title                          (CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink)

void UGameViewportClient::NotifyConnectionError(const class FString& Message, const class FString& Title)
{
	static UFunction* uFnNotifyConnectionError = nullptr;

	if (!uFnNotifyConnectionError)
	{
		uFnNotifyConnectionError = UFunction::FindFunction("Function Engine.GameViewportClient.NotifyConnectionError");
	}

	UGameViewportClient_execNotifyConnectionError_Params NotifyConnectionError_Params;
	memset(&NotifyConnectionError_Params, 0, sizeof(NotifyConnectionError_Params));
	memcpy_s(&NotifyConnectionError_Params.Message, sizeof(NotifyConnectionError_Params.Message), &Message, sizeof(Message));
	memcpy_s(&NotifyConnectionError_Params.Title, sizeof(NotifyConnectionError_Params.Title), &Title, sizeof(Title));

	this->ProcessEvent(uFnNotifyConnectionError, &NotifyConnectionError_Params, nullptr);
};

// Function Engine.GameViewportClient.SetProgressMessage
// [0x00024802] (FUNC_Defined | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EProgressMessageType           MessageType                    (CPF_Parm)
// class FString                  Message                        (CPF_Parm | CPF_NeedCtorLink)
// class FString                  Title                          (CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink)
// uint32_t                       bIgnoreFutureNetworkMessages   (CPF_OptionalParm | CPF_Parm)

void UGameViewportClient::eventSetProgressMessage(EProgressMessageType MessageType, const class FString& Message, const class FString& Title, bool bIgnoreFutureNetworkMessages)
{
	static UFunction* uFnSetProgressMessage = nullptr;

	if (!uFnSetProgressMessage)
	{
		uFnSetProgressMessage = UFunction::FindFunction("Function Engine.GameViewportClient.SetProgressMessage");
	}

	UGameViewportClient_eventSetProgressMessage_Params SetProgressMessage_Params;
	memset(&SetProgressMessage_Params, 0, sizeof(SetProgressMessage_Params));
	memcpy_s(&SetProgressMessage_Params.MessageType, sizeof(SetProgressMessage_Params.MessageType), &MessageType, sizeof(MessageType));
	memcpy_s(&SetProgressMessage_Params.Message, sizeof(SetProgressMessage_Params.Message), &Message, sizeof(Message));
	memcpy_s(&SetProgressMessage_Params.Title, sizeof(SetProgressMessage_Params.Title), &Title, sizeof(Title));
	SetProgressMessage_Params.bIgnoreFutureNetworkMessages = bIgnoreFutureNetworkMessages;

	this->ProcessEvent(uFnSetProgressMessage, &SetProgressMessage_Params, nullptr);
};

// Function Engine.GameViewportClient.RemoveLocalPlayer
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class ULocalPlayer*            ExistingPlayer                 (CPF_Parm)

int32_t UGameViewportClient::RemoveLocalPlayer(class ULocalPlayer* ExistingPlayer)
{
	static UFunction* uFnRemoveLocalPlayer = nullptr;

	if (!uFnRemoveLocalPlayer)
	{
		uFnRemoveLocalPlayer = UFunction::FindFunction("Function Engine.GameViewportClient.RemoveLocalPlayer");
	}

	UGameViewportClient_execRemoveLocalPlayer_Params RemoveLocalPlayer_Params;
	memset(&RemoveLocalPlayer_Params, 0, sizeof(RemoveLocalPlayer_Params));
	RemoveLocalPlayer_Params.ExistingPlayer = ExistingPlayer;

	this->ProcessEvent(uFnRemoveLocalPlayer, &RemoveLocalPlayer_Params, nullptr);

	return RemoveLocalPlayer_Params.ReturnValue;
};

// Function Engine.GameViewportClient.AddLocalPlayer
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class ULocalPlayer*            NewPlayer                      (CPF_Parm)

int32_t UGameViewportClient::AddLocalPlayer(class ULocalPlayer* NewPlayer)
{
	static UFunction* uFnAddLocalPlayer = nullptr;

	if (!uFnAddLocalPlayer)
	{
		uFnAddLocalPlayer = UFunction::FindFunction("Function Engine.GameViewportClient.AddLocalPlayer");
	}

	UGameViewportClient_execAddLocalPlayer_Params AddLocalPlayer_Params;
	memset(&AddLocalPlayer_Params, 0, sizeof(AddLocalPlayer_Params));
	AddLocalPlayer_Params.NewPlayer = NewPlayer;

	this->ProcessEvent(uFnAddLocalPlayer, &AddLocalPlayer_Params, nullptr);

	return AddLocalPlayer_Params.ReturnValue;
};

// Function Engine.GameViewportClient.NotifyPlayerRemoved
// [0x00020003] (FUNC_Final | FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        PlayerIndex                    (CPF_Parm)
// class ULocalPlayer*            RemovedPlayer                  (CPF_Parm)

void UGameViewportClient::NotifyPlayerRemoved(int32_t PlayerIndex, class ULocalPlayer* RemovedPlayer)
{
	static UFunction* uFnNotifyPlayerRemoved = nullptr;

	if (!uFnNotifyPlayerRemoved)
	{
		uFnNotifyPlayerRemoved = UFunction::FindFunction("Function Engine.GameViewportClient.NotifyPlayerRemoved");
	}

	UGameViewportClient_execNotifyPlayerRemoved_Params NotifyPlayerRemoved_Params;
	memset(&NotifyPlayerRemoved_Params, 0, sizeof(NotifyPlayerRemoved_Params));
	memcpy_s(&NotifyPlayerRemoved_Params.PlayerIndex, sizeof(NotifyPlayerRemoved_Params.PlayerIndex), &PlayerIndex, sizeof(PlayerIndex));
	NotifyPlayerRemoved_Params.RemovedPlayer = RemovedPlayer;

	this->ProcessEvent(uFnNotifyPlayerRemoved, &NotifyPlayerRemoved_Params, nullptr);
};

// Function Engine.GameViewportClient.NotifyPlayerAdded
// [0x00020003] (FUNC_Final | FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        PlayerIndex                    (CPF_Parm)
// class ULocalPlayer*            AddedPlayer                    (CPF_Parm)

void UGameViewportClient::NotifyPlayerAdded(int32_t PlayerIndex, class ULocalPlayer* AddedPlayer)
{
	static UFunction* uFnNotifyPlayerAdded = nullptr;

	if (!uFnNotifyPlayerAdded)
	{
		uFnNotifyPlayerAdded = UFunction::FindFunction("Function Engine.GameViewportClient.NotifyPlayerAdded");
	}

	UGameViewportClient_execNotifyPlayerAdded_Params NotifyPlayerAdded_Params;
	memset(&NotifyPlayerAdded_Params, 0, sizeof(NotifyPlayerAdded_Params));
	memcpy_s(&NotifyPlayerAdded_Params.PlayerIndex, sizeof(NotifyPlayerAdded_Params.PlayerIndex), &PlayerIndex, sizeof(PlayerIndex));
	NotifyPlayerAdded_Params.AddedPlayer = AddedPlayer;

	this->ProcessEvent(uFnNotifyPlayerAdded, &NotifyPlayerAdded_Params, nullptr);
};

// Function Engine.GameViewportClient.DrawTransitionMessage
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UCanvas*                 Canvas                         (CPF_Parm)
// class FString                  Message                        (CPF_Parm | CPF_NeedCtorLink)

void UGameViewportClient::DrawTransitionMessage(class UCanvas* Canvas, const class FString& Message)
{
	static UFunction* uFnDrawTransitionMessage = nullptr;

	if (!uFnDrawTransitionMessage)
	{
		uFnDrawTransitionMessage = UFunction::FindFunction("Function Engine.GameViewportClient.DrawTransitionMessage");
	}

	UGameViewportClient_execDrawTransitionMessage_Params DrawTransitionMessage_Params;
	memset(&DrawTransitionMessage_Params, 0, sizeof(DrawTransitionMessage_Params));
	DrawTransitionMessage_Params.Canvas = Canvas;
	memcpy_s(&DrawTransitionMessage_Params.Message, sizeof(DrawTransitionMessage_Params.Message), &Message, sizeof(Message));

	this->ProcessEvent(uFnDrawTransitionMessage, &DrawTransitionMessage_Params, nullptr);
};

// Function Engine.GameViewportClient.DrawTransition
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UCanvas*                 Canvas                         (CPF_Parm)

void UGameViewportClient::DrawTransition(class UCanvas* Canvas)
{
	static UFunction* uFnDrawTransition = nullptr;

	if (!uFnDrawTransition)
	{
		uFnDrawTransition = UFunction::FindFunction("Function Engine.GameViewportClient.DrawTransition");
	}

	UGameViewportClient_execDrawTransition_Params DrawTransition_Params;
	memset(&DrawTransition_Params, 0, sizeof(DrawTransition_Params));
	DrawTransition_Params.Canvas = Canvas;

	this->ProcessEvent(uFnDrawTransition, &DrawTransition_Params, nullptr);
};

// Function Engine.GameViewportClient.DisplayProgressMessage
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UCanvas*                 Canvas                         (CPF_Parm)

void UGameViewportClient::DisplayProgressMessage(class UCanvas* Canvas)
{
	static UFunction* uFnDisplayProgressMessage = nullptr;

	if (!uFnDisplayProgressMessage)
	{
		uFnDisplayProgressMessage = UFunction::FindFunction("Function Engine.GameViewportClient.DisplayProgressMessage");
	}

	UGameViewportClient_execDisplayProgressMessage_Params DisplayProgressMessage_Params;
	memset(&DisplayProgressMessage_Params, 0, sizeof(DisplayProgressMessage_Params));
	DisplayProgressMessage_Params.Canvas = Canvas;

	this->ProcessEvent(uFnDisplayProgressMessage, &DisplayProgressMessage_Params, nullptr);
};

// Function Engine.GameViewportClient.PostRender
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UCanvas*                 Canvas                         (CPF_Parm)

void UGameViewportClient::eventPostRender(class UCanvas* Canvas)
{
	static UFunction* uFnPostRender = nullptr;

	if (!uFnPostRender)
	{
		uFnPostRender = UFunction::FindFunction("Function Engine.GameViewportClient.PostRender");
	}

	UGameViewportClient_eventPostRender_Params PostRender_Params;
	memset(&PostRender_Params, 0, sizeof(PostRender_Params));
	PostRender_Params.Canvas = Canvas;

	this->ProcessEvent(uFnPostRender, &PostRender_Params, nullptr);
};

// Function Engine.GameViewportClient.DrawTitleSafeArea
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UCanvas*                 Canvas                         (CPF_Parm)

void UGameViewportClient::DrawTitleSafeArea(class UCanvas* Canvas)
{
	static UFunction* uFnDrawTitleSafeArea = nullptr;

	if (!uFnDrawTitleSafeArea)
	{
		uFnDrawTitleSafeArea = UFunction::FindFunction("Function Engine.GameViewportClient.DrawTitleSafeArea");
	}

	UGameViewportClient_execDrawTitleSafeArea_Params DrawTitleSafeArea_Params;
	memset(&DrawTitleSafeArea_Params, 0, sizeof(DrawTitleSafeArea_Params));
	DrawTitleSafeArea_Params.Canvas = Canvas;

	this->ProcessEvent(uFnDrawTitleSafeArea, &DrawTitleSafeArea_Params, nullptr);
};

// Function Engine.GameViewportClient.Tick
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          DeltaTime                      (CPF_Parm)

void UGameViewportClient::eventTick(float DeltaTime)
{
	static UFunction* uFnTick = nullptr;

	if (!uFnTick)
	{
		uFnTick = UFunction::FindFunction("Function Engine.GameViewportClient.Tick");
	}

	UGameViewportClient_eventTick_Params Tick_Params;
	memset(&Tick_Params, 0, sizeof(Tick_Params));
	memcpy_s(&Tick_Params.DeltaTime, sizeof(Tick_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));

	this->ProcessEvent(uFnTick, &Tick_Params, nullptr);
};

// Function Engine.GameViewportClient.CalculatePixelCenter
// [0x00424003] (FUNC_Final | FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// class ULocalPlayer*            LPlayer                        (CPF_Parm)
// class UCanvas*                 Canvas                         (CPF_Parm)
// uint32_t                       bUseMaxPercent                 (CPF_OptionalParm | CPF_Parm)
// float                          out_CenterX                    (CPF_Parm | CPF_OutParm)
// float                          out_CenterY                    (CPF_Parm | CPF_OutParm)

void UGameViewportClient::CalculatePixelCenter(class ULocalPlayer* LPlayer, class UCanvas* Canvas, bool bUseMaxPercent, float& out_CenterX, float& out_CenterY)
{
	static UFunction* uFnCalculatePixelCenter = nullptr;

	if (!uFnCalculatePixelCenter)
	{
		uFnCalculatePixelCenter = UFunction::FindFunction("Function Engine.GameViewportClient.CalculatePixelCenter");
	}

	UGameViewportClient_execCalculatePixelCenter_Params CalculatePixelCenter_Params;
	memset(&CalculatePixelCenter_Params, 0, sizeof(CalculatePixelCenter_Params));
	CalculatePixelCenter_Params.LPlayer = LPlayer;
	CalculatePixelCenter_Params.Canvas = Canvas;
	CalculatePixelCenter_Params.bUseMaxPercent = bUseMaxPercent;
	memcpy_s(&CalculatePixelCenter_Params.out_CenterX, sizeof(CalculatePixelCenter_Params.out_CenterX), &out_CenterX, sizeof(out_CenterX));
	memcpy_s(&CalculatePixelCenter_Params.out_CenterY, sizeof(CalculatePixelCenter_Params.out_CenterY), &out_CenterY, sizeof(out_CenterY));

	this->ProcessEvent(uFnCalculatePixelCenter, &CalculatePixelCenter_Params, nullptr);

	memcpy_s(&out_CenterX, sizeof(out_CenterX), &CalculatePixelCenter_Params.out_CenterX, sizeof(CalculatePixelCenter_Params.out_CenterX));
	memcpy_s(&out_CenterY, sizeof(out_CenterY), &CalculatePixelCenter_Params.out_CenterY, sizeof(CalculatePixelCenter_Params.out_CenterY));
};

// Function Engine.GameViewportClient.CalculateDeadZoneForAllSides
// [0x00424003] (FUNC_Final | FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class ULocalPlayer*            LPlayer                        (CPF_Parm)
// class UCanvas*                 Canvas                         (CPF_Parm)
// uint32_t                       bUseMaxPercent                 (CPF_OptionalParm | CPF_Parm)
// float                          fTopSafeZone                   (CPF_Parm | CPF_OutParm)
// float                          fBottomSafeZone                (CPF_Parm | CPF_OutParm)
// float                          fLeftSafeZone                  (CPF_Parm | CPF_OutParm)
// float                          fRightSafeZone                 (CPF_Parm | CPF_OutParm)

bool UGameViewportClient::CalculateDeadZoneForAllSides(class ULocalPlayer* LPlayer, class UCanvas* Canvas, bool bUseMaxPercent, float& fTopSafeZone, float& fBottomSafeZone, float& fLeftSafeZone, float& fRightSafeZone)
{
	static UFunction* uFnCalculateDeadZoneForAllSides = nullptr;

	if (!uFnCalculateDeadZoneForAllSides)
	{
		uFnCalculateDeadZoneForAllSides = UFunction::FindFunction("Function Engine.GameViewportClient.CalculateDeadZoneForAllSides");
	}

	UGameViewportClient_execCalculateDeadZoneForAllSides_Params CalculateDeadZoneForAllSides_Params;
	memset(&CalculateDeadZoneForAllSides_Params, 0, sizeof(CalculateDeadZoneForAllSides_Params));
	CalculateDeadZoneForAllSides_Params.LPlayer = LPlayer;
	CalculateDeadZoneForAllSides_Params.Canvas = Canvas;
	CalculateDeadZoneForAllSides_Params.bUseMaxPercent = bUseMaxPercent;
	memcpy_s(&CalculateDeadZoneForAllSides_Params.fTopSafeZone, sizeof(CalculateDeadZoneForAllSides_Params.fTopSafeZone), &fTopSafeZone, sizeof(fTopSafeZone));
	memcpy_s(&CalculateDeadZoneForAllSides_Params.fBottomSafeZone, sizeof(CalculateDeadZoneForAllSides_Params.fBottomSafeZone), &fBottomSafeZone, sizeof(fBottomSafeZone));
	memcpy_s(&CalculateDeadZoneForAllSides_Params.fLeftSafeZone, sizeof(CalculateDeadZoneForAllSides_Params.fLeftSafeZone), &fLeftSafeZone, sizeof(fLeftSafeZone));
	memcpy_s(&CalculateDeadZoneForAllSides_Params.fRightSafeZone, sizeof(CalculateDeadZoneForAllSides_Params.fRightSafeZone), &fRightSafeZone, sizeof(fRightSafeZone));

	this->ProcessEvent(uFnCalculateDeadZoneForAllSides, &CalculateDeadZoneForAllSides_Params, nullptr);

	memcpy_s(&fTopSafeZone, sizeof(fTopSafeZone), &CalculateDeadZoneForAllSides_Params.fTopSafeZone, sizeof(CalculateDeadZoneForAllSides_Params.fTopSafeZone));
	memcpy_s(&fBottomSafeZone, sizeof(fBottomSafeZone), &CalculateDeadZoneForAllSides_Params.fBottomSafeZone, sizeof(CalculateDeadZoneForAllSides_Params.fBottomSafeZone));
	memcpy_s(&fLeftSafeZone, sizeof(fLeftSafeZone), &CalculateDeadZoneForAllSides_Params.fLeftSafeZone, sizeof(CalculateDeadZoneForAllSides_Params.fLeftSafeZone));
	memcpy_s(&fRightSafeZone, sizeof(fRightSafeZone), &CalculateDeadZoneForAllSides_Params.fRightSafeZone, sizeof(CalculateDeadZoneForAllSides_Params.fRightSafeZone));

	return CalculateDeadZoneForAllSides_Params.ReturnValue;
};

// Function Engine.GameViewportClient.CalculateDeadZone
// [0x00024003] (FUNC_Final | FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class ULocalPlayer*            LPlayer                        (CPF_Parm)
// ESafeZoneType                  SZType                         (CPF_Parm)
// class UCanvas*                 Canvas                         (CPF_Parm)
// uint32_t                       bUseMaxPercent                 (CPF_OptionalParm | CPF_Parm)

float UGameViewportClient::CalculateDeadZone(class ULocalPlayer* LPlayer, ESafeZoneType SZType, class UCanvas* Canvas, bool bUseMaxPercent)
{
	static UFunction* uFnCalculateDeadZone = nullptr;

	if (!uFnCalculateDeadZone)
	{
		uFnCalculateDeadZone = UFunction::FindFunction("Function Engine.GameViewportClient.CalculateDeadZone");
	}

	UGameViewportClient_execCalculateDeadZone_Params CalculateDeadZone_Params;
	memset(&CalculateDeadZone_Params, 0, sizeof(CalculateDeadZone_Params));
	CalculateDeadZone_Params.LPlayer = LPlayer;
	memcpy_s(&CalculateDeadZone_Params.SZType, sizeof(CalculateDeadZone_Params.SZType), &SZType, sizeof(SZType));
	CalculateDeadZone_Params.Canvas = Canvas;
	CalculateDeadZone_Params.bUseMaxPercent = bUseMaxPercent;

	this->ProcessEvent(uFnCalculateDeadZone, &CalculateDeadZone_Params, nullptr);

	return CalculateDeadZone_Params.ReturnValue;
};

// Function Engine.GameViewportClient.CalculateSafeZoneValues
// [0x00420003] (FUNC_Final | FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// class UCanvas*                 Canvas                         (CPF_Parm)
// int32_t                        LocalPlayerIndex               (CPF_Parm)
// uint32_t                       bUseMaxPercent                 (CPF_Parm)
// float                          out_Horizontal                 (CPF_Parm | CPF_OutParm)
// float                          out_Vertical                   (CPF_Parm | CPF_OutParm)

void UGameViewportClient::CalculateSafeZoneValues(class UCanvas* Canvas, int32_t LocalPlayerIndex, bool bUseMaxPercent, float& out_Horizontal, float& out_Vertical)
{
	static UFunction* uFnCalculateSafeZoneValues = nullptr;

	if (!uFnCalculateSafeZoneValues)
	{
		uFnCalculateSafeZoneValues = UFunction::FindFunction("Function Engine.GameViewportClient.CalculateSafeZoneValues");
	}

	UGameViewportClient_execCalculateSafeZoneValues_Params CalculateSafeZoneValues_Params;
	memset(&CalculateSafeZoneValues_Params, 0, sizeof(CalculateSafeZoneValues_Params));
	CalculateSafeZoneValues_Params.Canvas = Canvas;
	memcpy_s(&CalculateSafeZoneValues_Params.LocalPlayerIndex, sizeof(CalculateSafeZoneValues_Params.LocalPlayerIndex), &LocalPlayerIndex, sizeof(LocalPlayerIndex));
	CalculateSafeZoneValues_Params.bUseMaxPercent = bUseMaxPercent;
	memcpy_s(&CalculateSafeZoneValues_Params.out_Horizontal, sizeof(CalculateSafeZoneValues_Params.out_Horizontal), &out_Horizontal, sizeof(out_Horizontal));
	memcpy_s(&CalculateSafeZoneValues_Params.out_Vertical, sizeof(CalculateSafeZoneValues_Params.out_Vertical), &out_Vertical, sizeof(out_Vertical));

	this->ProcessEvent(uFnCalculateSafeZoneValues, &CalculateSafeZoneValues_Params, nullptr);

	memcpy_s(&out_Horizontal, sizeof(out_Horizontal), &CalculateSafeZoneValues_Params.out_Horizontal, sizeof(CalculateSafeZoneValues_Params.out_Horizontal));
	memcpy_s(&out_Vertical, sizeof(out_Vertical), &CalculateSafeZoneValues_Params.out_Vertical, sizeof(CalculateSafeZoneValues_Params.out_Vertical));
};

// Function Engine.GameViewportClient.GetPixelSizeOfScreen
// [0x00420003] (FUNC_Final | FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// class UCanvas*                 Canvas                         (CPF_Parm)
// int32_t                        LocalPlayerIndex               (CPF_Parm)
// float                          out_Width                      (CPF_Parm | CPF_OutParm)
// float                          out_Height                     (CPF_Parm | CPF_OutParm)

void UGameViewportClient::GetPixelSizeOfScreen(class UCanvas* Canvas, int32_t LocalPlayerIndex, float& out_Width, float& out_Height)
{
	static UFunction* uFnGetPixelSizeOfScreen = nullptr;

	if (!uFnGetPixelSizeOfScreen)
	{
		uFnGetPixelSizeOfScreen = UFunction::FindFunction("Function Engine.GameViewportClient.GetPixelSizeOfScreen");
	}

	UGameViewportClient_execGetPixelSizeOfScreen_Params GetPixelSizeOfScreen_Params;
	memset(&GetPixelSizeOfScreen_Params, 0, sizeof(GetPixelSizeOfScreen_Params));
	GetPixelSizeOfScreen_Params.Canvas = Canvas;
	memcpy_s(&GetPixelSizeOfScreen_Params.LocalPlayerIndex, sizeof(GetPixelSizeOfScreen_Params.LocalPlayerIndex), &LocalPlayerIndex, sizeof(LocalPlayerIndex));
	memcpy_s(&GetPixelSizeOfScreen_Params.out_Width, sizeof(GetPixelSizeOfScreen_Params.out_Width), &out_Width, sizeof(out_Width));
	memcpy_s(&GetPixelSizeOfScreen_Params.out_Height, sizeof(GetPixelSizeOfScreen_Params.out_Height), &out_Height, sizeof(out_Height));

	this->ProcessEvent(uFnGetPixelSizeOfScreen, &GetPixelSizeOfScreen_Params, nullptr);

	memcpy_s(&out_Width, sizeof(out_Width), &GetPixelSizeOfScreen_Params.out_Width, sizeof(GetPixelSizeOfScreen_Params.out_Width));
	memcpy_s(&out_Height, sizeof(out_Height), &GetPixelSizeOfScreen_Params.out_Height, sizeof(GetPixelSizeOfScreen_Params.out_Height));
};

// Function Engine.GameViewportClient.HasRightSafeZone
// [0x00020003] (FUNC_Final | FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        LocalPlayerIndex               (CPF_Parm)

bool UGameViewportClient::HasRightSafeZone(int32_t LocalPlayerIndex)
{
	static UFunction* uFnHasRightSafeZone = nullptr;

	if (!uFnHasRightSafeZone)
	{
		uFnHasRightSafeZone = UFunction::FindFunction("Function Engine.GameViewportClient.HasRightSafeZone");
	}

	UGameViewportClient_execHasRightSafeZone_Params HasRightSafeZone_Params;
	memset(&HasRightSafeZone_Params, 0, sizeof(HasRightSafeZone_Params));
	memcpy_s(&HasRightSafeZone_Params.LocalPlayerIndex, sizeof(HasRightSafeZone_Params.LocalPlayerIndex), &LocalPlayerIndex, sizeof(LocalPlayerIndex));

	this->ProcessEvent(uFnHasRightSafeZone, &HasRightSafeZone_Params, nullptr);

	return HasRightSafeZone_Params.ReturnValue;
};

// Function Engine.GameViewportClient.HasLeftSafeZone
// [0x00020003] (FUNC_Final | FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        LocalPlayerIndex               (CPF_Parm)

bool UGameViewportClient::HasLeftSafeZone(int32_t LocalPlayerIndex)
{
	static UFunction* uFnHasLeftSafeZone = nullptr;

	if (!uFnHasLeftSafeZone)
	{
		uFnHasLeftSafeZone = UFunction::FindFunction("Function Engine.GameViewportClient.HasLeftSafeZone");
	}

	UGameViewportClient_execHasLeftSafeZone_Params HasLeftSafeZone_Params;
	memset(&HasLeftSafeZone_Params, 0, sizeof(HasLeftSafeZone_Params));
	memcpy_s(&HasLeftSafeZone_Params.LocalPlayerIndex, sizeof(HasLeftSafeZone_Params.LocalPlayerIndex), &LocalPlayerIndex, sizeof(LocalPlayerIndex));

	this->ProcessEvent(uFnHasLeftSafeZone, &HasLeftSafeZone_Params, nullptr);

	return HasLeftSafeZone_Params.ReturnValue;
};

// Function Engine.GameViewportClient.HasBottomSafeZone
// [0x00020003] (FUNC_Final | FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        LocalPlayerIndex               (CPF_Parm)

bool UGameViewportClient::HasBottomSafeZone(int32_t LocalPlayerIndex)
{
	static UFunction* uFnHasBottomSafeZone = nullptr;

	if (!uFnHasBottomSafeZone)
	{
		uFnHasBottomSafeZone = UFunction::FindFunction("Function Engine.GameViewportClient.HasBottomSafeZone");
	}

	UGameViewportClient_execHasBottomSafeZone_Params HasBottomSafeZone_Params;
	memset(&HasBottomSafeZone_Params, 0, sizeof(HasBottomSafeZone_Params));
	memcpy_s(&HasBottomSafeZone_Params.LocalPlayerIndex, sizeof(HasBottomSafeZone_Params.LocalPlayerIndex), &LocalPlayerIndex, sizeof(LocalPlayerIndex));

	this->ProcessEvent(uFnHasBottomSafeZone, &HasBottomSafeZone_Params, nullptr);

	return HasBottomSafeZone_Params.ReturnValue;
};

// Function Engine.GameViewportClient.HasTopSafeZone
// [0x00020003] (FUNC_Final | FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        LocalPlayerIndex               (CPF_Parm)

bool UGameViewportClient::HasTopSafeZone(int32_t LocalPlayerIndex)
{
	static UFunction* uFnHasTopSafeZone = nullptr;

	if (!uFnHasTopSafeZone)
	{
		uFnHasTopSafeZone = UFunction::FindFunction("Function Engine.GameViewportClient.HasTopSafeZone");
	}

	UGameViewportClient_execHasTopSafeZone_Params HasTopSafeZone_Params;
	memset(&HasTopSafeZone_Params, 0, sizeof(HasTopSafeZone_Params));
	memcpy_s(&HasTopSafeZone_Params.LocalPlayerIndex, sizeof(HasTopSafeZone_Params.LocalPlayerIndex), &LocalPlayerIndex, sizeof(LocalPlayerIndex));

	this->ProcessEvent(uFnHasTopSafeZone, &HasTopSafeZone_Params, nullptr);

	return HasTopSafeZone_Params.ReturnValue;
};

// Function Engine.GameViewportClient.ConvertLocalPlayerToGamePlayerIndex
// [0x00020003] (FUNC_Final | FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class ULocalPlayer*            LPlayer                        (CPF_Parm)

int32_t UGameViewportClient::ConvertLocalPlayerToGamePlayerIndex(class ULocalPlayer* LPlayer)
{
	static UFunction* uFnConvertLocalPlayerToGamePlayerIndex = nullptr;

	if (!uFnConvertLocalPlayerToGamePlayerIndex)
	{
		uFnConvertLocalPlayerToGamePlayerIndex = UFunction::FindFunction("Function Engine.GameViewportClient.ConvertLocalPlayerToGamePlayerIndex");
	}

	UGameViewportClient_execConvertLocalPlayerToGamePlayerIndex_Params ConvertLocalPlayerToGamePlayerIndex_Params;
	memset(&ConvertLocalPlayerToGamePlayerIndex_Params, 0, sizeof(ConvertLocalPlayerToGamePlayerIndex_Params));
	ConvertLocalPlayerToGamePlayerIndex_Params.LPlayer = LPlayer;

	this->ProcessEvent(uFnConvertLocalPlayerToGamePlayerIndex, &ConvertLocalPlayerToGamePlayerIndex_Params, nullptr);

	return ConvertLocalPlayerToGamePlayerIndex_Params.ReturnValue;
};

// Function Engine.GameViewportClient.GetSubtitleRegion
// [0x00420802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// struct FVector2D               MinPos                         (CPF_Parm | CPF_OutParm)
// struct FVector2D               MaxPos                         (CPF_Parm | CPF_OutParm)

void UGameViewportClient::eventGetSubtitleRegion(struct FVector2D& MinPos, struct FVector2D& MaxPos)
{
	static UFunction* uFnGetSubtitleRegion = nullptr;

	if (!uFnGetSubtitleRegion)
	{
		uFnGetSubtitleRegion = UFunction::FindFunction("Function Engine.GameViewportClient.GetSubtitleRegion");
	}

	UGameViewportClient_eventGetSubtitleRegion_Params GetSubtitleRegion_Params;
	memset(&GetSubtitleRegion_Params, 0, sizeof(GetSubtitleRegion_Params));
	memcpy_s(&GetSubtitleRegion_Params.MinPos, sizeof(GetSubtitleRegion_Params.MinPos), &MinPos, sizeof(MinPos));
	memcpy_s(&GetSubtitleRegion_Params.MaxPos, sizeof(GetSubtitleRegion_Params.MaxPos), &MaxPos, sizeof(MaxPos));

	this->ProcessEvent(uFnGetSubtitleRegion, &GetSubtitleRegion_Params, nullptr);

	memcpy_s(&MinPos, sizeof(MinPos), &GetSubtitleRegion_Params.MinPos, sizeof(GetSubtitleRegion_Params.MinPos));
	memcpy_s(&MaxPos, sizeof(MaxPos), &GetSubtitleRegion_Params.MaxPos, sizeof(GetSubtitleRegion_Params.MaxPos));
};

// Function Engine.GameViewportClient.LayoutPlayers
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UGameViewportClient::eventLayoutPlayers()
{
	static UFunction* uFnLayoutPlayers = nullptr;

	if (!uFnLayoutPlayers)
	{
		uFnLayoutPlayers = UFunction::FindFunction("Function Engine.GameViewportClient.LayoutPlayers");
	}

	UGameViewportClient_eventLayoutPlayers_Params LayoutPlayers_Params;
	memset(&LayoutPlayers_Params, 0, sizeof(LayoutPlayers_Params));

	this->ProcessEvent(uFnLayoutPlayers, &LayoutPlayers_Params, nullptr);
};

// Function Engine.GameViewportClient.UpdateActiveSplitscreenType
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UGameViewportClient::UpdateActiveSplitscreenType()
{
	static UFunction* uFnUpdateActiveSplitscreenType = nullptr;

	if (!uFnUpdateActiveSplitscreenType)
	{
		uFnUpdateActiveSplitscreenType = UFunction::FindFunction("Function Engine.GameViewportClient.UpdateActiveSplitscreenType");
	}

	UGameViewportClient_execUpdateActiveSplitscreenType_Params UpdateActiveSplitscreenType_Params;
	memset(&UpdateActiveSplitscreenType_Params, 0, sizeof(UpdateActiveSplitscreenType_Params));

	this->ProcessEvent(uFnUpdateActiveSplitscreenType, &UpdateActiveSplitscreenType_Params, nullptr);
};

// Function Engine.GameViewportClient.GetSplitscreenConfiguration
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// ESplitScreenType               ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

ESplitScreenType UGameViewportClient::GetSplitscreenConfiguration()
{
	static UFunction* uFnGetSplitscreenConfiguration = nullptr;

	if (!uFnGetSplitscreenConfiguration)
	{
		uFnGetSplitscreenConfiguration = UFunction::FindFunction("Function Engine.GameViewportClient.GetSplitscreenConfiguration");
	}

	UGameViewportClient_execGetSplitscreenConfiguration_Params GetSplitscreenConfiguration_Params;
	memset(&GetSplitscreenConfiguration_Params, 0, sizeof(GetSplitscreenConfiguration_Params));

	this->ProcessEvent(uFnGetSplitscreenConfiguration, &GetSplitscreenConfiguration_Params, nullptr);

	return static_cast<ESplitScreenType>(GetSplitscreenConfiguration_Params.ReturnValue);
};

// Function Engine.GameViewportClient.SetSplitscreenConfiguration
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// ESplitScreenType               SplitType                      (CPF_Parm)

void UGameViewportClient::SetSplitscreenConfiguration(ESplitScreenType SplitType)
{
	static UFunction* uFnSetSplitscreenConfiguration = nullptr;

	if (!uFnSetSplitscreenConfiguration)
	{
		uFnSetSplitscreenConfiguration = UFunction::FindFunction("Function Engine.GameViewportClient.SetSplitscreenConfiguration");
	}

	UGameViewportClient_execSetSplitscreenConfiguration_Params SetSplitscreenConfiguration_Params;
	memset(&SetSplitscreenConfiguration_Params, 0, sizeof(SetSplitscreenConfiguration_Params));
	memcpy_s(&SetSplitscreenConfiguration_Params.SplitType, sizeof(SetSplitscreenConfiguration_Params.SplitType), &SplitType, sizeof(SplitType));

	this->ProcessEvent(uFnSetSplitscreenConfiguration, &SetSplitscreenConfiguration_Params, nullptr);
};

// Function Engine.GameViewportClient.GameSessionEnded
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UGameViewportClient::eventGameSessionEnded()
{
	static UFunction* uFnGameSessionEnded = nullptr;

	if (!uFnGameSessionEnded)
	{
		uFnGameSessionEnded = UFunction::FindFunction("Function Engine.GameViewportClient.GameSessionEnded");
	}

	UGameViewportClient_eventGameSessionEnded_Params GameSessionEnded_Params;
	memset(&GameSessionEnded_Params, 0, sizeof(GameSessionEnded_Params));

	this->ProcessEvent(uFnGameSessionEnded, &GameSessionEnded_Params, nullptr);
};

// Function Engine.GameViewportClient.InsertInteraction
// [0x00024802] (FUNC_Defined | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UInteraction*            NewInteraction                 (CPF_Parm)
// int32_t                        InIndex                        (CPF_OptionalParm | CPF_Parm)

int32_t UGameViewportClient::eventInsertInteraction(class UInteraction* NewInteraction, int32_t InIndex)
{
	static UFunction* uFnInsertInteraction = nullptr;

	if (!uFnInsertInteraction)
	{
		uFnInsertInteraction = UFunction::FindFunction("Function Engine.GameViewportClient.InsertInteraction");
	}

	UGameViewportClient_eventInsertInteraction_Params InsertInteraction_Params;
	memset(&InsertInteraction_Params, 0, sizeof(InsertInteraction_Params));
	InsertInteraction_Params.NewInteraction = NewInteraction;
	memcpy_s(&InsertInteraction_Params.InIndex, sizeof(InsertInteraction_Params.InIndex), &InIndex, sizeof(InIndex));

	this->ProcessEvent(uFnInsertInteraction, &InsertInteraction_Params, nullptr);

	return InsertInteraction_Params.ReturnValue;
};

// Function Engine.GameViewportClient.CreateInitialPlayer
// [0x00420002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FString                  OutError                       (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

bool UGameViewportClient::CreateInitialPlayer(class FString& OutError)
{
	static UFunction* uFnCreateInitialPlayer = nullptr;

	if (!uFnCreateInitialPlayer)
	{
		uFnCreateInitialPlayer = UFunction::FindFunction("Function Engine.GameViewportClient.CreateInitialPlayer");
	}

	UGameViewportClient_execCreateInitialPlayer_Params CreateInitialPlayer_Params;
	memset(&CreateInitialPlayer_Params, 0, sizeof(CreateInitialPlayer_Params));
	memcpy_s(&CreateInitialPlayer_Params.OutError, sizeof(CreateInitialPlayer_Params.OutError), &OutError, sizeof(OutError));

	this->ProcessEvent(uFnCreateInitialPlayer, &CreateInitialPlayer_Params, nullptr);

	memcpy_s(&OutError, sizeof(OutError), &CreateInitialPlayer_Params.OutError, sizeof(CreateInitialPlayer_Params.OutError));

	return CreateInitialPlayer_Params.ReturnValue;
};

// Function Engine.GameViewportClient.Init
// [0x00420802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FString                  OutError                       (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

bool UGameViewportClient::eventInit(class FString& OutError)
{
	static UFunction* uFnInit = nullptr;

	if (!uFnInit)
	{
		uFnInit = UFunction::FindFunction("Function Engine.GameViewportClient.Init");
	}

	UGameViewportClient_eventInit_Params Init_Params;
	memset(&Init_Params, 0, sizeof(Init_Params));
	memcpy_s(&Init_Params.OutError, sizeof(Init_Params.OutError), &OutError, sizeof(OutError));

	this->ProcessEvent(uFnInit, &Init_Params, nullptr);

	memcpy_s(&OutError, sizeof(OutError), &Init_Params.OutError, sizeof(Init_Params.OutError));

	return Init_Params.ReturnValue;
};

// Function Engine.GameViewportClient.FindPlayerByControllerId
// [0x00020803] (FUNC_Final | FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class ULocalPlayer*            ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        ControllerId                   (CPF_Parm)

class ULocalPlayer* UGameViewportClient::eventFindPlayerByControllerId(int32_t ControllerId)
{
	static UFunction* uFnFindPlayerByControllerId = nullptr;

	if (!uFnFindPlayerByControllerId)
	{
		uFnFindPlayerByControllerId = UFunction::FindFunction("Function Engine.GameViewportClient.FindPlayerByControllerId");
	}

	UGameViewportClient_eventFindPlayerByControllerId_Params FindPlayerByControllerId_Params;
	memset(&FindPlayerByControllerId_Params, 0, sizeof(FindPlayerByControllerId_Params));
	memcpy_s(&FindPlayerByControllerId_Params.ControllerId, sizeof(FindPlayerByControllerId_Params.ControllerId), &ControllerId, sizeof(ControllerId));

	this->ProcessEvent(uFnFindPlayerByControllerId, &FindPlayerByControllerId_Params, nullptr);

	return FindPlayerByControllerId_Params.ReturnValue;
};

// Function Engine.GameViewportClient.RemovePlayer
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class ULocalPlayer*            ExPlayer                       (CPF_Parm)

bool UGameViewportClient::eventRemovePlayer(class ULocalPlayer* ExPlayer)
{
	static UFunction* uFnRemovePlayer = nullptr;

	if (!uFnRemovePlayer)
	{
		uFnRemovePlayer = UFunction::FindFunction("Function Engine.GameViewportClient.RemovePlayer");
	}

	UGameViewportClient_eventRemovePlayer_Params RemovePlayer_Params;
	memset(&RemovePlayer_Params, 0, sizeof(RemovePlayer_Params));
	RemovePlayer_Params.ExPlayer = ExPlayer;

	this->ProcessEvent(uFnRemovePlayer, &RemovePlayer_Params, nullptr);

	return RemovePlayer_Params.ReturnValue;
};

// Function Engine.GameViewportClient.CreatePlayer
// [0x00420802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// class ULocalPlayer*            ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        ControllerId                   (CPF_Parm)
// uint32_t                       bSpawnActor                    (CPF_Parm)
// class FString                  OutError                       (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

class ULocalPlayer* UGameViewportClient::eventCreatePlayer(int32_t ControllerId, bool bSpawnActor, class FString& OutError)
{
	static UFunction* uFnCreatePlayer = nullptr;

	if (!uFnCreatePlayer)
	{
		uFnCreatePlayer = UFunction::FindFunction("Function Engine.GameViewportClient.CreatePlayer");
	}

	UGameViewportClient_eventCreatePlayer_Params CreatePlayer_Params;
	memset(&CreatePlayer_Params, 0, sizeof(CreatePlayer_Params));
	memcpy_s(&CreatePlayer_Params.ControllerId, sizeof(CreatePlayer_Params.ControllerId), &ControllerId, sizeof(ControllerId));
	CreatePlayer_Params.bSpawnActor = bSpawnActor;
	memcpy_s(&CreatePlayer_Params.OutError, sizeof(CreatePlayer_Params.OutError), &OutError, sizeof(OutError));

	this->ProcessEvent(uFnCreatePlayer, &CreatePlayer_Params, nullptr);

	memcpy_s(&OutError, sizeof(OutError), &CreatePlayer_Params.OutError, sizeof(CreatePlayer_Params.OutError));

	return CreatePlayer_Params.ReturnValue;
};

// Function Engine.GameViewportClient.SetCustomInteractionObject
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25629])
// Parameter Info:
// class UInteraction*            InInteraction                  (CPF_Parm)

void UGameViewportClient::SetCustomInteractionObject(class UInteraction* InInteraction)
{
	static UFunction* uFnSetCustomInteractionObject = nullptr;

	if (!uFnSetCustomInteractionObject)
	{
		uFnSetCustomInteractionObject = UFunction::FindFunction("Function Engine.GameViewportClient.SetCustomInteractionObject");
	}

	UGameViewportClient_execSetCustomInteractionObject_Params SetCustomInteractionObject_Params;
	memset(&SetCustomInteractionObject_Params, 0, sizeof(SetCustomInteractionObject_Params));
	SetCustomInteractionObject_Params.InInteraction = InInteraction;

	uFnSetCustomInteractionObject->iNative = 0;
	uFnSetCustomInteractionObject->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetCustomInteractionObject, &SetCustomInteractionObject_Params, nullptr);
	uFnSetCustomInteractionObject->FunctionFlags |= 0x400;
	uFnSetCustomInteractionObject->iNative = 25629;
};

// Function Engine.GameViewportClient.GetCustomInteractionClass
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20551])
// Parameter Info:
// class UUIInteraction*          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        InIndex                        (CPF_Parm)

class UUIInteraction* UGameViewportClient::GetCustomInteractionClass(int32_t InIndex)
{
	static UFunction* uFnGetCustomInteractionClass = nullptr;

	if (!uFnGetCustomInteractionClass)
	{
		uFnGetCustomInteractionClass = UFunction::FindFunction("Function Engine.GameViewportClient.GetCustomInteractionClass");
	}

	UGameViewportClient_execGetCustomInteractionClass_Params GetCustomInteractionClass_Params;
	memset(&GetCustomInteractionClass_Params, 0, sizeof(GetCustomInteractionClass_Params));
	memcpy_s(&GetCustomInteractionClass_Params.InIndex, sizeof(GetCustomInteractionClass_Params.InIndex), &InIndex, sizeof(InIndex));

	uFnGetCustomInteractionClass->iNative = 0;
	uFnGetCustomInteractionClass->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetCustomInteractionClass, &GetCustomInteractionClass_Params, nullptr);
	uFnGetCustomInteractionClass->FunctionFlags |= 0x400;
	uFnGetCustomInteractionClass->iNative = 20551;

	return GetCustomInteractionClass_Params.ReturnValue;
};

// Function Engine.GameViewportClient.GetNumCustomInteractions
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20653])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t UGameViewportClient::GetNumCustomInteractions()
{
	static UFunction* uFnGetNumCustomInteractions = nullptr;

	if (!uFnGetNumCustomInteractions)
	{
		uFnGetNumCustomInteractions = UFunction::FindFunction("Function Engine.GameViewportClient.GetNumCustomInteractions");
	}

	UGameViewportClient_execGetNumCustomInteractions_Params GetNumCustomInteractions_Params;
	memset(&GetNumCustomInteractions_Params, 0, sizeof(GetNumCustomInteractions_Params));

	uFnGetNumCustomInteractions->iNative = 0;
	uFnGetNumCustomInteractions->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetNumCustomInteractions, &GetNumCustomInteractions_Params, nullptr);
	uFnGetNumCustomInteractions->FunctionFlags |= 0x400;
	uFnGetNumCustomInteractions->iNative = 20653;

	return GetNumCustomInteractions_Params.ReturnValue;
};

// Function Engine.GameViewportClient.ShouldForceFullscreenViewport
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25901])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UGameViewportClient::ShouldForceFullscreenViewport()
{
	static UFunction* uFnShouldForceFullscreenViewport = nullptr;

	if (!uFnShouldForceFullscreenViewport)
	{
		uFnShouldForceFullscreenViewport = UFunction::FindFunction("Function Engine.GameViewportClient.ShouldForceFullscreenViewport");
	}

	UGameViewportClient_execShouldForceFullscreenViewport_Params ShouldForceFullscreenViewport_Params;
	memset(&ShouldForceFullscreenViewport_Params, 0, sizeof(ShouldForceFullscreenViewport_Params));

	uFnShouldForceFullscreenViewport->iNative = 0;
	uFnShouldForceFullscreenViewport->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnShouldForceFullscreenViewport, &ShouldForceFullscreenViewport_Params, nullptr);
	uFnShouldForceFullscreenViewport->FunctionFlags |= 0x400;
	uFnShouldForceFullscreenViewport->iNative = 25901;

	return ShouldForceFullscreenViewport_Params.ReturnValue;
};

// Function Engine.GameViewportClient.IsFullScreenViewport
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[21383])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UGameViewportClient::IsFullScreenViewport()
{
	static UFunction* uFnIsFullScreenViewport = nullptr;

	if (!uFnIsFullScreenViewport)
	{
		uFnIsFullScreenViewport = UFunction::FindFunction("Function Engine.GameViewportClient.IsFullScreenViewport");
	}

	UGameViewportClient_execIsFullScreenViewport_Params IsFullScreenViewport_Params;
	memset(&IsFullScreenViewport_Params, 0, sizeof(IsFullScreenViewport_Params));

	uFnIsFullScreenViewport->iNative = 0;
	uFnIsFullScreenViewport->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnIsFullScreenViewport, &IsFullScreenViewport_Params, nullptr);
	uFnIsFullScreenViewport->FunctionFlags |= 0x400;
	uFnIsFullScreenViewport->iNative = 21383;

	return IsFullScreenViewport_Params.ReturnValue;
};

// Function Engine.GameViewportClient.GetViewportSize
// [0x00420401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20817])
// Parameter Info:
// struct FVector2D               out_ViewportSize               (CPF_Parm | CPF_OutParm)

void UGameViewportClient::GetViewportSize(struct FVector2D& out_ViewportSize)
{
	static UFunction* uFnGetViewportSize = nullptr;

	if (!uFnGetViewportSize)
	{
		uFnGetViewportSize = UFunction::FindFunction("Function Engine.GameViewportClient.GetViewportSize");
	}

	UGameViewportClient_execGetViewportSize_Params GetViewportSize_Params;
	memset(&GetViewportSize_Params, 0, sizeof(GetViewportSize_Params));
	memcpy_s(&GetViewportSize_Params.out_ViewportSize, sizeof(GetViewportSize_Params.out_ViewportSize), &out_ViewportSize, sizeof(out_ViewportSize));

	uFnGetViewportSize->iNative = 0;
	uFnGetViewportSize->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetViewportSize, &GetViewportSize_Params, nullptr);
	uFnGetViewportSize->FunctionFlags |= 0x400;
	uFnGetViewportSize->iNative = 20817;

	memcpy_s(&out_ViewportSize, sizeof(out_ViewportSize), &GetViewportSize_Params.out_ViewportSize, sizeof(GetViewportSize_Params.out_ViewportSize));
};

// Function Engine.GameViewportClient.ConsoleCommand
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[18363])
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)
// class FString                  Command                        (CPF_Parm | CPF_NeedCtorLink)

class FString UGameViewportClient::ConsoleCommand(const class FString& Command)
{
	static UFunction* uFnConsoleCommand = nullptr;

	if (!uFnConsoleCommand)
	{
		uFnConsoleCommand = UFunction::FindFunction("Function Engine.GameViewportClient.ConsoleCommand");
	}

	UGameViewportClient_execConsoleCommand_Params ConsoleCommand_Params;
	memset(&ConsoleCommand_Params, 0, sizeof(ConsoleCommand_Params));
	memcpy_s(&ConsoleCommand_Params.Command, sizeof(ConsoleCommand_Params.Command), &Command, sizeof(Command));

	uFnConsoleCommand->iNative = 0;
	uFnConsoleCommand->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnConsoleCommand, &ConsoleCommand_Params, nullptr);
	uFnConsoleCommand->FunctionFlags |= 0x400;
	uFnConsoleCommand->iNative = 18363;

	return ConsoleCommand_Params.ReturnValue;
};

// Function Engine.GameViewportClient.HandleInputChar
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        ControllerId                   (CPF_Parm)
// class FString                  Unicode                        (CPF_Parm | CPF_NeedCtorLink)

bool UGameViewportClient::HandleInputChar(int32_t ControllerId, const class FString& Unicode)
{
	static UFunction* uFnHandleInputChar = nullptr;

	if (!uFnHandleInputChar)
	{
		uFnHandleInputChar = UFunction::FindFunction("Function Engine.GameViewportClient.HandleInputChar");
	}

	UGameViewportClient_execHandleInputChar_Params HandleInputChar_Params;
	memset(&HandleInputChar_Params, 0, sizeof(HandleInputChar_Params));
	memcpy_s(&HandleInputChar_Params.ControllerId, sizeof(HandleInputChar_Params.ControllerId), &ControllerId, sizeof(ControllerId));
	memcpy_s(&HandleInputChar_Params.Unicode, sizeof(HandleInputChar_Params.Unicode), &Unicode, sizeof(Unicode));

	this->ProcessEvent(uFnHandleInputChar, &HandleInputChar_Params, nullptr);

	return HandleInputChar_Params.ReturnValue;
};

// Function Engine.GameViewportClient.HandleInputAxis
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        ControllerId                   (CPF_Parm)
// class FName                    Key                            (CPF_Parm)
// float                          Delta                          (CPF_Parm)
// float                          DeltaTime                      (CPF_Parm)
// uint32_t                       bGamepad                       (CPF_Parm)

bool UGameViewportClient::HandleInputAxis(int32_t ControllerId, const class FName& Key, float Delta, float DeltaTime, bool bGamepad)
{
	static UFunction* uFnHandleInputAxis = nullptr;

	if (!uFnHandleInputAxis)
	{
		uFnHandleInputAxis = UFunction::FindFunction("Function Engine.GameViewportClient.HandleInputAxis");
	}

	UGameViewportClient_execHandleInputAxis_Params HandleInputAxis_Params;
	memset(&HandleInputAxis_Params, 0, sizeof(HandleInputAxis_Params));
	memcpy_s(&HandleInputAxis_Params.ControllerId, sizeof(HandleInputAxis_Params.ControllerId), &ControllerId, sizeof(ControllerId));
	memcpy_s(&HandleInputAxis_Params.Key, sizeof(HandleInputAxis_Params.Key), &Key, sizeof(Key));
	memcpy_s(&HandleInputAxis_Params.Delta, sizeof(HandleInputAxis_Params.Delta), &Delta, sizeof(Delta));
	memcpy_s(&HandleInputAxis_Params.DeltaTime, sizeof(HandleInputAxis_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));
	HandleInputAxis_Params.bGamepad = bGamepad;

	this->ProcessEvent(uFnHandleInputAxis, &HandleInputAxis_Params, nullptr);

	return HandleInputAxis_Params.ReturnValue;
};

// Function Engine.GameViewportClient.HandleInputKey
// [0x00124000] (FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        ControllerId                   (CPF_Parm)
// class FName                    Key                            (CPF_Parm)
// EInputEvent                    EventType                      (CPF_Parm)
// float                          AmountDepressed                (CPF_Parm)
// uint32_t                       bGamepad                       (CPF_OptionalParm | CPF_Parm)

bool UGameViewportClient::HandleInputKey(int32_t ControllerId, const class FName& Key, EInputEvent EventType, float AmountDepressed, bool bGamepad)
{
	static UFunction* uFnHandleInputKey = nullptr;

	if (!uFnHandleInputKey)
	{
		uFnHandleInputKey = UFunction::FindFunction("Function Engine.GameViewportClient.HandleInputKey");
	}

	UGameViewportClient_execHandleInputKey_Params HandleInputKey_Params;
	memset(&HandleInputKey_Params, 0, sizeof(HandleInputKey_Params));
	memcpy_s(&HandleInputKey_Params.ControllerId, sizeof(HandleInputKey_Params.ControllerId), &ControllerId, sizeof(ControllerId));
	memcpy_s(&HandleInputKey_Params.Key, sizeof(HandleInputKey_Params.Key), &Key, sizeof(Key));
	memcpy_s(&HandleInputKey_Params.EventType, sizeof(HandleInputKey_Params.EventType), &EventType, sizeof(EventType));
	memcpy_s(&HandleInputKey_Params.AmountDepressed, sizeof(HandleInputKey_Params.AmountDepressed), &AmountDepressed, sizeof(AmountDepressed));
	HandleInputKey_Params.bGamepad = bGamepad;

	this->ProcessEvent(uFnHandleInputKey, &HandleInputKey_Params, nullptr);

	return HandleInputKey_Params.ReturnValue;
};

// Function Engine.IniLocPatcher.ClearCachedFiles
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UIniLocPatcher::ClearCachedFiles()
{
	static UFunction* uFnClearCachedFiles = nullptr;

	if (!uFnClearCachedFiles)
	{
		uFnClearCachedFiles = UFunction::FindFunction("Function Engine.IniLocPatcher.ClearCachedFiles");
	}

	UIniLocPatcher_execClearCachedFiles_Params ClearCachedFiles_Params;
	memset(&ClearCachedFiles_Params, 0, sizeof(ClearCachedFiles_Params));

	this->ProcessEvent(uFnClearCachedFiles, &ClearCachedFiles_Params, nullptr);
};

// Function Engine.IniLocPatcher.ClearReadFileDelegate
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FScriptDelegate         ReadTitleFileCompleteDelegate  (CPF_Parm | CPF_NeedCtorLink)

void UIniLocPatcher::ClearReadFileDelegate(const struct FScriptDelegate& ReadTitleFileCompleteDelegate)
{
	static UFunction* uFnClearReadFileDelegate = nullptr;

	if (!uFnClearReadFileDelegate)
	{
		uFnClearReadFileDelegate = UFunction::FindFunction("Function Engine.IniLocPatcher.ClearReadFileDelegate");
	}

	UIniLocPatcher_execClearReadFileDelegate_Params ClearReadFileDelegate_Params;
	memset(&ClearReadFileDelegate_Params, 0, sizeof(ClearReadFileDelegate_Params));
	memcpy_s(&ClearReadFileDelegate_Params.ReadTitleFileCompleteDelegate, sizeof(ClearReadFileDelegate_Params.ReadTitleFileCompleteDelegate), &ReadTitleFileCompleteDelegate, sizeof(ReadTitleFileCompleteDelegate));

	this->ProcessEvent(uFnClearReadFileDelegate, &ClearReadFileDelegate_Params, nullptr);
};

// Function Engine.IniLocPatcher.AddReadFileDelegate
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FScriptDelegate         ReadTitleFileCompleteDelegate  (CPF_Parm | CPF_NeedCtorLink)

void UIniLocPatcher::AddReadFileDelegate(const struct FScriptDelegate& ReadTitleFileCompleteDelegate)
{
	static UFunction* uFnAddReadFileDelegate = nullptr;

	if (!uFnAddReadFileDelegate)
	{
		uFnAddReadFileDelegate = UFunction::FindFunction("Function Engine.IniLocPatcher.AddReadFileDelegate");
	}

	UIniLocPatcher_execAddReadFileDelegate_Params AddReadFileDelegate_Params;
	memset(&AddReadFileDelegate_Params, 0, sizeof(AddReadFileDelegate_Params));
	memcpy_s(&AddReadFileDelegate_Params.ReadTitleFileCompleteDelegate, sizeof(AddReadFileDelegate_Params.ReadTitleFileCompleteDelegate), &ReadTitleFileCompleteDelegate, sizeof(ReadTitleFileCompleteDelegate));

	this->ProcessEvent(uFnAddReadFileDelegate, &AddReadFileDelegate_Params, nullptr);
};

// Function Engine.IniLocPatcher.AddFileToDownload
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  Filename                       (CPF_Parm | CPF_NeedCtorLink)

void UIniLocPatcher::AddFileToDownload(const class FString& Filename)
{
	static UFunction* uFnAddFileToDownload = nullptr;

	if (!uFnAddFileToDownload)
	{
		uFnAddFileToDownload = UFunction::FindFunction("Function Engine.IniLocPatcher.AddFileToDownload");
	}

	UIniLocPatcher_execAddFileToDownload_Params AddFileToDownload_Params;
	memset(&AddFileToDownload_Params, 0, sizeof(AddFileToDownload_Params));
	memcpy_s(&AddFileToDownload_Params.Filename, sizeof(AddFileToDownload_Params.Filename), &Filename, sizeof(Filename));

	this->ProcessEvent(uFnAddFileToDownload, &AddFileToDownload_Params, nullptr);
};

// Function Engine.IniLocPatcher.ProcessIniLocFile
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[24550])
// Parameter Info:
// class FString                  Filename                       (CPF_Parm | CPF_NeedCtorLink)
// class TArray<uint8_t>          FileData                       (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void UIniLocPatcher::ProcessIniLocFile(const class FString& Filename, class TArray<uint8_t>& FileData)
{
	static UFunction* uFnProcessIniLocFile = nullptr;

	if (!uFnProcessIniLocFile)
	{
		uFnProcessIniLocFile = UFunction::FindFunction("Function Engine.IniLocPatcher.ProcessIniLocFile");
	}

	UIniLocPatcher_execProcessIniLocFile_Params ProcessIniLocFile_Params;
	memset(&ProcessIniLocFile_Params, 0, sizeof(ProcessIniLocFile_Params));
	memcpy_s(&ProcessIniLocFile_Params.Filename, sizeof(ProcessIniLocFile_Params.Filename), &Filename, sizeof(Filename));
	memcpy_s(&ProcessIniLocFile_Params.FileData, sizeof(ProcessIniLocFile_Params.FileData), &FileData, sizeof(FileData));

	uFnProcessIniLocFile->iNative = 0;
	uFnProcessIniLocFile->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnProcessIniLocFile, &ProcessIniLocFile_Params, nullptr);
	uFnProcessIniLocFile->FunctionFlags |= 0x400;
	uFnProcessIniLocFile->iNative = 24550;

	memcpy_s(&FileData, sizeof(FileData), &ProcessIniLocFile_Params.FileData, sizeof(ProcessIniLocFile_Params.FileData));
};

// Function Engine.IniLocPatcher.OnReadFileComplete
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bWasSuccessful                 (CPF_Parm)
// class FString                  Filename                       (CPF_Parm | CPF_NeedCtorLink)

void UIniLocPatcher::OnReadFileComplete(bool bWasSuccessful, const class FString& Filename)
{
	static UFunction* uFnOnReadFileComplete = nullptr;

	if (!uFnOnReadFileComplete)
	{
		uFnOnReadFileComplete = UFunction::FindFunction("Function Engine.IniLocPatcher.OnReadFileComplete");
	}

	UIniLocPatcher_execOnReadFileComplete_Params OnReadFileComplete_Params;
	memset(&OnReadFileComplete_Params, 0, sizeof(OnReadFileComplete_Params));
	OnReadFileComplete_Params.bWasSuccessful = bWasSuccessful;
	memcpy_s(&OnReadFileComplete_Params.Filename, sizeof(OnReadFileComplete_Params.Filename), &Filename, sizeof(Filename));

	this->ProcessEvent(uFnOnReadFileComplete, &OnReadFileComplete_Params, nullptr);
};

// Function Engine.IniLocPatcher.DownloadFiles
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UIniLocPatcher::DownloadFiles()
{
	static UFunction* uFnDownloadFiles = nullptr;

	if (!uFnDownloadFiles)
	{
		uFnDownloadFiles = UFunction::FindFunction("Function Engine.IniLocPatcher.DownloadFiles");
	}

	UIniLocPatcher_execDownloadFiles_Params DownloadFiles_Params;
	memset(&DownloadFiles_Params, 0, sizeof(DownloadFiles_Params));

	this->ProcessEvent(uFnDownloadFiles, &DownloadFiles_Params, nullptr);
};

// Function Engine.IniLocPatcher.Init
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UIniLocPatcher::Init()
{
	static UFunction* uFnInit = nullptr;

	if (!uFnInit)
	{
		uFnInit = UFunction::FindFunction("Function Engine.IniLocPatcher.Init");
	}

	UIniLocPatcher_execInit_Params Init_Params;
	memset(&Init_Params, 0, sizeof(Init_Params));

	this->ProcessEvent(uFnInit, &Init_Params, nullptr);
};

// Function Engine.IniLocPatcher.OnReadTitleFileComplete
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bWasSuccessful                 (CPF_Parm)
// class FString                  Filename                       (CPF_Parm | CPF_NeedCtorLink)

void UIniLocPatcher::OnReadTitleFileComplete(bool bWasSuccessful, const class FString& Filename)
{
	static UFunction* uFnOnReadTitleFileComplete = nullptr;

	if (!uFnOnReadTitleFileComplete)
	{
		uFnOnReadTitleFileComplete = UFunction::FindFunction("Function Engine.IniLocPatcher.OnReadTitleFileComplete");
	}

	UIniLocPatcher_execOnReadTitleFileComplete_Params OnReadTitleFileComplete_Params;
	memset(&OnReadTitleFileComplete_Params, 0, sizeof(OnReadTitleFileComplete_Params));
	OnReadTitleFileComplete_Params.bWasSuccessful = bWasSuccessful;
	memcpy_s(&OnReadTitleFileComplete_Params.Filename, sizeof(OnReadTitleFileComplete_Params.Filename), &Filename, sizeof(Filename));

	this->ProcessEvent(uFnOnReadTitleFileComplete, &OnReadTitleFileComplete_Params, nullptr);
};

// Function Engine.Interface_NavigationHandle.NotifyPathChanged
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UInterface_NavigationHandle::eventNotifyPathChanged()
{
	static UFunction* uFnNotifyPathChanged = nullptr;

	if (!uFnNotifyPathChanged)
	{
		uFnNotifyPathChanged = UFunction::FindFunction("Function Engine.Interface_NavigationHandle.NotifyPathChanged");
	}

	UInterface_NavigationHandle_eventNotifyPathChanged_Params NotifyPathChanged_Params;
	memset(&NotifyPathChanged_Params, 0, sizeof(NotifyPathChanged_Params));

	this->ProcessEvent(uFnNotifyPathChanged, &NotifyPathChanged_Params, nullptr);
};

// Function Engine.Surface.GetSurfaceHeight
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20778])
// Parameter Info:
// float                          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

float USurface::GetSurfaceHeight()
{
	static UFunction* uFnGetSurfaceHeight = nullptr;

	if (!uFnGetSurfaceHeight)
	{
		uFnGetSurfaceHeight = UFunction::FindFunction("Function Engine.Surface.GetSurfaceHeight");
	}

	USurface_execGetSurfaceHeight_Params GetSurfaceHeight_Params;
	memset(&GetSurfaceHeight_Params, 0, sizeof(GetSurfaceHeight_Params));

	uFnGetSurfaceHeight->iNative = 0;
	uFnGetSurfaceHeight->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetSurfaceHeight, &GetSurfaceHeight_Params, nullptr);
	uFnGetSurfaceHeight->FunctionFlags |= 0x400;
	uFnGetSurfaceHeight->iNative = 20778;

	return GetSurfaceHeight_Params.ReturnValue;
};

// Function Engine.Surface.GetSurfaceWidth
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20779])
// Parameter Info:
// float                          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

float USurface::GetSurfaceWidth()
{
	static UFunction* uFnGetSurfaceWidth = nullptr;

	if (!uFnGetSurfaceWidth)
	{
		uFnGetSurfaceWidth = UFunction::FindFunction("Function Engine.Surface.GetSurfaceWidth");
	}

	USurface_execGetSurfaceWidth_Params GetSurfaceWidth_Params;
	memset(&GetSurfaceWidth_Params, 0, sizeof(GetSurfaceWidth_Params));

	uFnGetSurfaceWidth->iNative = 0;
	uFnGetSurfaceWidth->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetSurfaceWidth, &GetSurfaceWidth_Params, nullptr);
	uFnGetSurfaceWidth->FunctionFlags |= 0x400;
	uFnGetSurfaceWidth->iNative = 20779;

	return GetSurfaceWidth_Params.ReturnValue;
};

// Function Engine.MaterialInterface.SetForceMipLevelsToBeResident
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[25662])
// Parameter Info:
// uint32_t                       OverrideForceMiplevelsToBeResident (CPF_Parm)
// uint32_t                       bForceMiplevelsToBeResidentValue (CPF_Parm)
// float                          ForceDuration                  (CPF_Parm)
// int32_t                        CinematicTextureGroups         (CPF_OptionalParm | CPF_Parm)

void UMaterialInterface::SetForceMipLevelsToBeResident(bool OverrideForceMiplevelsToBeResident, bool bForceMiplevelsToBeResidentValue, float ForceDuration, int32_t CinematicTextureGroups)
{
	static UFunction* uFnSetForceMipLevelsToBeResident = nullptr;

	if (!uFnSetForceMipLevelsToBeResident)
	{
		uFnSetForceMipLevelsToBeResident = UFunction::FindFunction("Function Engine.MaterialInterface.SetForceMipLevelsToBeResident");
	}

	UMaterialInterface_execSetForceMipLevelsToBeResident_Params SetForceMipLevelsToBeResident_Params;
	memset(&SetForceMipLevelsToBeResident_Params, 0, sizeof(SetForceMipLevelsToBeResident_Params));
	SetForceMipLevelsToBeResident_Params.OverrideForceMiplevelsToBeResident = OverrideForceMiplevelsToBeResident;
	SetForceMipLevelsToBeResident_Params.bForceMiplevelsToBeResidentValue = bForceMiplevelsToBeResidentValue;
	memcpy_s(&SetForceMipLevelsToBeResident_Params.ForceDuration, sizeof(SetForceMipLevelsToBeResident_Params.ForceDuration), &ForceDuration, sizeof(ForceDuration));
	memcpy_s(&SetForceMipLevelsToBeResident_Params.CinematicTextureGroups, sizeof(SetForceMipLevelsToBeResident_Params.CinematicTextureGroups), &CinematicTextureGroups, sizeof(CinematicTextureGroups));

	uFnSetForceMipLevelsToBeResident->iNative = 0;
	uFnSetForceMipLevelsToBeResident->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetForceMipLevelsToBeResident, &SetForceMipLevelsToBeResident_Params, nullptr);
	uFnSetForceMipLevelsToBeResident->FunctionFlags |= 0x400;
	uFnSetForceMipLevelsToBeResident->iNative = 25662;
};

// Function Engine.MaterialInterface.GetVectorCurveParameterValue
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20807])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    ParameterName                  (CPF_Parm)
// struct FInterpCurveVector      OutValue                       (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

bool UMaterialInterface::GetVectorCurveParameterValue(const class FName& ParameterName, struct FInterpCurveVector& OutValue)
{
	static UFunction* uFnGetVectorCurveParameterValue = nullptr;

	if (!uFnGetVectorCurveParameterValue)
	{
		uFnGetVectorCurveParameterValue = UFunction::FindFunction("Function Engine.MaterialInterface.GetVectorCurveParameterValue");
	}

	UMaterialInterface_execGetVectorCurveParameterValue_Params GetVectorCurveParameterValue_Params;
	memset(&GetVectorCurveParameterValue_Params, 0, sizeof(GetVectorCurveParameterValue_Params));
	memcpy_s(&GetVectorCurveParameterValue_Params.ParameterName, sizeof(GetVectorCurveParameterValue_Params.ParameterName), &ParameterName, sizeof(ParameterName));
	memcpy_s(&GetVectorCurveParameterValue_Params.OutValue, sizeof(GetVectorCurveParameterValue_Params.OutValue), &OutValue, sizeof(OutValue));

	uFnGetVectorCurveParameterValue->iNative = 0;
	uFnGetVectorCurveParameterValue->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetVectorCurveParameterValue, &GetVectorCurveParameterValue_Params, nullptr);
	uFnGetVectorCurveParameterValue->FunctionFlags |= 0x400;
	uFnGetVectorCurveParameterValue->iNative = 20807;

	memcpy_s(&OutValue, sizeof(OutValue), &GetVectorCurveParameterValue_Params.OutValue, sizeof(GetVectorCurveParameterValue_Params.OutValue));

	return GetVectorCurveParameterValue_Params.ReturnValue;
};

// Function Engine.MaterialInterface.GetVectorParameterValue
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20809])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    ParameterName                  (CPF_Parm)
// struct FLinearColor            OutValue                       (CPF_Parm | CPF_OutParm)

bool UMaterialInterface::GetVectorParameterValue(const class FName& ParameterName, struct FLinearColor& OutValue)
{
	static UFunction* uFnGetVectorParameterValue = nullptr;

	if (!uFnGetVectorParameterValue)
	{
		uFnGetVectorParameterValue = UFunction::FindFunction("Function Engine.MaterialInterface.GetVectorParameterValue");
	}

	UMaterialInterface_execGetVectorParameterValue_Params GetVectorParameterValue_Params;
	memset(&GetVectorParameterValue_Params, 0, sizeof(GetVectorParameterValue_Params));
	memcpy_s(&GetVectorParameterValue_Params.ParameterName, sizeof(GetVectorParameterValue_Params.ParameterName), &ParameterName, sizeof(ParameterName));
	memcpy_s(&GetVectorParameterValue_Params.OutValue, sizeof(GetVectorParameterValue_Params.OutValue), &OutValue, sizeof(OutValue));

	uFnGetVectorParameterValue->iNative = 0;
	uFnGetVectorParameterValue->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetVectorParameterValue, &GetVectorParameterValue_Params, nullptr);
	uFnGetVectorParameterValue->FunctionFlags |= 0x400;
	uFnGetVectorParameterValue->iNative = 20809;

	memcpy_s(&OutValue, sizeof(OutValue), &GetVectorParameterValue_Params.OutValue, sizeof(GetVectorParameterValue_Params.OutValue));

	return GetVectorParameterValue_Params.ReturnValue;
};

// Function Engine.MaterialInterface.GetTextureParameterValue
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20785])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    ParameterName                  (CPF_Parm)
// class UTexture*                OutValue                       (CPF_Parm | CPF_OutParm)

bool UMaterialInterface::GetTextureParameterValue(const class FName& ParameterName, class UTexture*& OutValue)
{
	static UFunction* uFnGetTextureParameterValue = nullptr;

	if (!uFnGetTextureParameterValue)
	{
		uFnGetTextureParameterValue = UFunction::FindFunction("Function Engine.MaterialInterface.GetTextureParameterValue");
	}

	UMaterialInterface_execGetTextureParameterValue_Params GetTextureParameterValue_Params;
	memset(&GetTextureParameterValue_Params, 0, sizeof(GetTextureParameterValue_Params));
	memcpy_s(&GetTextureParameterValue_Params.ParameterName, sizeof(GetTextureParameterValue_Params.ParameterName), &ParameterName, sizeof(ParameterName));
	GetTextureParameterValue_Params.OutValue = OutValue;

	uFnGetTextureParameterValue->iNative = 0;
	uFnGetTextureParameterValue->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetTextureParameterValue, &GetTextureParameterValue_Params, nullptr);
	uFnGetTextureParameterValue->FunctionFlags |= 0x400;
	uFnGetTextureParameterValue->iNative = 20785;

	OutValue = GetTextureParameterValue_Params.OutValue;

	return GetTextureParameterValue_Params.ReturnValue;
};

// Function Engine.MaterialInterface.GetScalarCurveParameterValue
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20740])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    ParameterName                  (CPF_Parm)
// struct FInterpCurveFloat       OutValue                       (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

bool UMaterialInterface::GetScalarCurveParameterValue(const class FName& ParameterName, struct FInterpCurveFloat& OutValue)
{
	static UFunction* uFnGetScalarCurveParameterValue = nullptr;

	if (!uFnGetScalarCurveParameterValue)
	{
		uFnGetScalarCurveParameterValue = UFunction::FindFunction("Function Engine.MaterialInterface.GetScalarCurveParameterValue");
	}

	UMaterialInterface_execGetScalarCurveParameterValue_Params GetScalarCurveParameterValue_Params;
	memset(&GetScalarCurveParameterValue_Params, 0, sizeof(GetScalarCurveParameterValue_Params));
	memcpy_s(&GetScalarCurveParameterValue_Params.ParameterName, sizeof(GetScalarCurveParameterValue_Params.ParameterName), &ParameterName, sizeof(ParameterName));
	memcpy_s(&GetScalarCurveParameterValue_Params.OutValue, sizeof(GetScalarCurveParameterValue_Params.OutValue), &OutValue, sizeof(OutValue));

	uFnGetScalarCurveParameterValue->iNative = 0;
	uFnGetScalarCurveParameterValue->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetScalarCurveParameterValue, &GetScalarCurveParameterValue_Params, nullptr);
	uFnGetScalarCurveParameterValue->FunctionFlags |= 0x400;
	uFnGetScalarCurveParameterValue->iNative = 20740;

	memcpy_s(&OutValue, sizeof(OutValue), &GetScalarCurveParameterValue_Params.OutValue, sizeof(GetScalarCurveParameterValue_Params.OutValue));

	return GetScalarCurveParameterValue_Params.ReturnValue;
};

// Function Engine.MaterialInterface.GetScalarParameterValue
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20741])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    ParameterName                  (CPF_Parm)
// float                          OutValue                       (CPF_Parm | CPF_OutParm)

bool UMaterialInterface::GetScalarParameterValue(const class FName& ParameterName, float& OutValue)
{
	static UFunction* uFnGetScalarParameterValue = nullptr;

	if (!uFnGetScalarParameterValue)
	{
		uFnGetScalarParameterValue = UFunction::FindFunction("Function Engine.MaterialInterface.GetScalarParameterValue");
	}

	UMaterialInterface_execGetScalarParameterValue_Params GetScalarParameterValue_Params;
	memset(&GetScalarParameterValue_Params, 0, sizeof(GetScalarParameterValue_Params));
	memcpy_s(&GetScalarParameterValue_Params.ParameterName, sizeof(GetScalarParameterValue_Params.ParameterName), &ParameterName, sizeof(ParameterName));
	memcpy_s(&GetScalarParameterValue_Params.OutValue, sizeof(GetScalarParameterValue_Params.OutValue), &OutValue, sizeof(OutValue));

	uFnGetScalarParameterValue->iNative = 0;
	uFnGetScalarParameterValue->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetScalarParameterValue, &GetScalarParameterValue_Params, nullptr);
	uFnGetScalarParameterValue->FunctionFlags |= 0x400;
	uFnGetScalarParameterValue->iNative = 20741;

	memcpy_s(&OutValue, sizeof(OutValue), &GetScalarParameterValue_Params.OutValue, sizeof(GetScalarParameterValue_Params.OutValue));

	return GetScalarParameterValue_Params.ReturnValue;
};

// Function Engine.MaterialInterface.GetFontParameterValue
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20583])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    ParameterName                  (CPF_Parm)
// class UFont*                   OutFontValue                   (CPF_Parm | CPF_OutParm)
// int32_t                        OutFontPage                    (CPF_Parm | CPF_OutParm)

bool UMaterialInterface::GetFontParameterValue(const class FName& ParameterName, class UFont*& OutFontValue, int32_t& OutFontPage)
{
	static UFunction* uFnGetFontParameterValue = nullptr;

	if (!uFnGetFontParameterValue)
	{
		uFnGetFontParameterValue = UFunction::FindFunction("Function Engine.MaterialInterface.GetFontParameterValue");
	}

	UMaterialInterface_execGetFontParameterValue_Params GetFontParameterValue_Params;
	memset(&GetFontParameterValue_Params, 0, sizeof(GetFontParameterValue_Params));
	memcpy_s(&GetFontParameterValue_Params.ParameterName, sizeof(GetFontParameterValue_Params.ParameterName), &ParameterName, sizeof(ParameterName));
	GetFontParameterValue_Params.OutFontValue = OutFontValue;
	memcpy_s(&GetFontParameterValue_Params.OutFontPage, sizeof(GetFontParameterValue_Params.OutFontPage), &OutFontPage, sizeof(OutFontPage));

	uFnGetFontParameterValue->iNative = 0;
	uFnGetFontParameterValue->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetFontParameterValue, &GetFontParameterValue_Params, nullptr);
	uFnGetFontParameterValue->FunctionFlags |= 0x400;
	uFnGetFontParameterValue->iNative = 20583;

	OutFontValue = GetFontParameterValue_Params.OutFontValue;
	memcpy_s(&OutFontPage, sizeof(OutFontPage), &GetFontParameterValue_Params.OutFontPage, sizeof(GetFontParameterValue_Params.OutFontPage));

	return GetFontParameterValue_Params.ReturnValue;
};

// Function Engine.MaterialInterface.GetPhysicalMaterial
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20672])
// Parameter Info:
// class UPhysicalMaterial*       ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class UPhysicalMaterial* UMaterialInterface::GetPhysicalMaterial()
{
	static UFunction* uFnGetPhysicalMaterial = nullptr;

	if (!uFnGetPhysicalMaterial)
	{
		uFnGetPhysicalMaterial = UFunction::FindFunction("Function Engine.MaterialInterface.GetPhysicalMaterial");
	}

	UMaterialInterface_execGetPhysicalMaterial_Params GetPhysicalMaterial_Params;
	memset(&GetPhysicalMaterial_Params, 0, sizeof(GetPhysicalMaterial_Params));

	uFnGetPhysicalMaterial->iNative = 0;
	uFnGetPhysicalMaterial->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetPhysicalMaterial, &GetPhysicalMaterial_Params, nullptr);
	uFnGetPhysicalMaterial->FunctionFlags |= 0x400;
	uFnGetPhysicalMaterial->iNative = 20672;

	return GetPhysicalMaterial_Params.ReturnValue;
};

// Function Engine.MaterialInterface.GetMaterial
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20637])
// Parameter Info:
// class UMaterial*               ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class UMaterial* UMaterialInterface::GetMaterial()
{
	static UFunction* uFnGetMaterial = nullptr;

	if (!uFnGetMaterial)
	{
		uFnGetMaterial = UFunction::FindFunction("Function Engine.MaterialInterface.GetMaterial");
	}

	UMaterialInterface_execGetMaterial_Params GetMaterial_Params;
	memset(&GetMaterial_Params, 0, sizeof(GetMaterial_Params));

	uFnGetMaterial->iNative = 0;
	uFnGetMaterial->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetMaterial, &GetMaterial_Params, nullptr);
	uFnGetMaterial->FunctionFlags |= 0x400;
	uFnGetMaterial->iNative = 20637;

	return GetMaterial_Params.ReturnValue;
};

// Function Engine.OnlinePlayerStorage.SetDefaultVersionNumber
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25637])
// Parameter Info:

void UOnlinePlayerStorage::SetDefaultVersionNumber()
{
	static UFunction* uFnSetDefaultVersionNumber = nullptr;

	if (!uFnSetDefaultVersionNumber)
	{
		uFnSetDefaultVersionNumber = UFunction::FindFunction("Function Engine.OnlinePlayerStorage.SetDefaultVersionNumber");
	}

	UOnlinePlayerStorage_execSetDefaultVersionNumber_Params SetDefaultVersionNumber_Params;
	memset(&SetDefaultVersionNumber_Params, 0, sizeof(SetDefaultVersionNumber_Params));

	uFnSetDefaultVersionNumber->iNative = 0;
	uFnSetDefaultVersionNumber->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetDefaultVersionNumber, &SetDefaultVersionNumber_Params, nullptr);
	uFnSetDefaultVersionNumber->FunctionFlags |= 0x400;
	uFnSetDefaultVersionNumber->iNative = 25637;
};

// Function Engine.OnlinePlayerStorage.GetVersionNumber
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20810])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t UOnlinePlayerStorage::GetVersionNumber()
{
	static UFunction* uFnGetVersionNumber = nullptr;

	if (!uFnGetVersionNumber)
	{
		uFnGetVersionNumber = UFunction::FindFunction("Function Engine.OnlinePlayerStorage.GetVersionNumber");
	}

	UOnlinePlayerStorage_execGetVersionNumber_Params GetVersionNumber_Params;
	memset(&GetVersionNumber_Params, 0, sizeof(GetVersionNumber_Params));

	uFnGetVersionNumber->iNative = 0;
	uFnGetVersionNumber->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetVersionNumber, &GetVersionNumber_Params, nullptr);
	uFnGetVersionNumber->FunctionFlags |= 0x400;
	uFnGetVersionNumber->iNative = 20810;

	return GetVersionNumber_Params.ReturnValue;
};

// Function Engine.OnlinePlayerStorage.AppendVersionToSettings
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[15628])
// Parameter Info:

void UOnlinePlayerStorage::AppendVersionToSettings()
{
	static UFunction* uFnAppendVersionToSettings = nullptr;

	if (!uFnAppendVersionToSettings)
	{
		uFnAppendVersionToSettings = UFunction::FindFunction("Function Engine.OnlinePlayerStorage.AppendVersionToSettings");
	}

	UOnlinePlayerStorage_execAppendVersionToSettings_Params AppendVersionToSettings_Params;
	memset(&AppendVersionToSettings_Params, 0, sizeof(AppendVersionToSettings_Params));

	uFnAppendVersionToSettings->iNative = 0;
	uFnAppendVersionToSettings->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnAppendVersionToSettings, &AppendVersionToSettings_Params, nullptr);
	uFnAppendVersionToSettings->FunctionFlags |= 0x400;
	uFnAppendVersionToSettings->iNative = 15628;
};

// Function Engine.OnlinePlayerStorage.SetToDefaults
// [0x00020C00] (FUNC_Native | FUNC_Event | FUNC_Public | FUNC_AllFlags) (iNative[13747])
// Parameter Info:

void UOnlinePlayerStorage::eventSetToDefaults()
{
	static UFunction* uFnSetToDefaults = nullptr;

	if (!uFnSetToDefaults)
	{
		uFnSetToDefaults = UFunction::FindFunction("Function Engine.OnlinePlayerStorage.SetToDefaults");
	}

	UOnlinePlayerStorage_eventSetToDefaults_Params SetToDefaults_Params;
	memset(&SetToDefaults_Params, 0, sizeof(SetToDefaults_Params));

	uFnSetToDefaults->iNative = 0;
	uFnSetToDefaults->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetToDefaults, &SetToDefaults_Params, nullptr);
	uFnSetToDefaults->FunctionFlags |= 0x400;
	uFnSetToDefaults->iNative = 13747;
};

// Function Engine.OnlinePlayerStorage.AddSettingFloat
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[15369])
// Parameter Info:
// int32_t                        SettingId                      (CPF_Parm)

void UOnlinePlayerStorage::AddSettingFloat(int32_t SettingId)
{
	static UFunction* uFnAddSettingFloat = nullptr;

	if (!uFnAddSettingFloat)
	{
		uFnAddSettingFloat = UFunction::FindFunction("Function Engine.OnlinePlayerStorage.AddSettingFloat");
	}

	UOnlinePlayerStorage_execAddSettingFloat_Params AddSettingFloat_Params;
	memset(&AddSettingFloat_Params, 0, sizeof(AddSettingFloat_Params));
	memcpy_s(&AddSettingFloat_Params.SettingId, sizeof(AddSettingFloat_Params.SettingId), &SettingId, sizeof(SettingId));

	uFnAddSettingFloat->iNative = 0;
	uFnAddSettingFloat->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnAddSettingFloat, &AddSettingFloat_Params, nullptr);
	uFnAddSettingFloat->FunctionFlags |= 0x400;
	uFnAddSettingFloat->iNative = 15369;
};

// Function Engine.OnlinePlayerStorage.AddSettingInt
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[15370])
// Parameter Info:
// int32_t                        SettingId                      (CPF_Parm)

void UOnlinePlayerStorage::AddSettingInt(int32_t SettingId)
{
	static UFunction* uFnAddSettingInt = nullptr;

	if (!uFnAddSettingInt)
	{
		uFnAddSettingInt = UFunction::FindFunction("Function Engine.OnlinePlayerStorage.AddSettingInt");
	}

	UOnlinePlayerStorage_execAddSettingInt_Params AddSettingInt_Params;
	memset(&AddSettingInt_Params, 0, sizeof(AddSettingInt_Params));
	memcpy_s(&AddSettingInt_Params.SettingId, sizeof(AddSettingInt_Params.SettingId), &SettingId, sizeof(SettingId));

	uFnAddSettingInt->iNative = 0;
	uFnAddSettingInt->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnAddSettingInt, &AddSettingInt_Params, nullptr);
	uFnAddSettingInt->FunctionFlags |= 0x400;
	uFnAddSettingInt->iNative = 15370;
};

// Function Engine.OnlinePlayerStorage.GetRangedProfileSettingValueInt
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20728])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        PropertyId                     (CPF_Parm)
// int32_t                        OutValue                       (CPF_Parm | CPF_OutParm)

bool UOnlinePlayerStorage::GetRangedProfileSettingValueInt(int32_t PropertyId, int32_t& OutValue)
{
	static UFunction* uFnGetRangedProfileSettingValueInt = nullptr;

	if (!uFnGetRangedProfileSettingValueInt)
	{
		uFnGetRangedProfileSettingValueInt = UFunction::FindFunction("Function Engine.OnlinePlayerStorage.GetRangedProfileSettingValueInt");
	}

	UOnlinePlayerStorage_execGetRangedProfileSettingValueInt_Params GetRangedProfileSettingValueInt_Params;
	memset(&GetRangedProfileSettingValueInt_Params, 0, sizeof(GetRangedProfileSettingValueInt_Params));
	memcpy_s(&GetRangedProfileSettingValueInt_Params.PropertyId, sizeof(GetRangedProfileSettingValueInt_Params.PropertyId), &PropertyId, sizeof(PropertyId));
	memcpy_s(&GetRangedProfileSettingValueInt_Params.OutValue, sizeof(GetRangedProfileSettingValueInt_Params.OutValue), &OutValue, sizeof(OutValue));

	uFnGetRangedProfileSettingValueInt->iNative = 0;
	uFnGetRangedProfileSettingValueInt->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetRangedProfileSettingValueInt, &GetRangedProfileSettingValueInt_Params, nullptr);
	uFnGetRangedProfileSettingValueInt->FunctionFlags |= 0x400;
	uFnGetRangedProfileSettingValueInt->iNative = 20728;

	memcpy_s(&OutValue, sizeof(OutValue), &GetRangedProfileSettingValueInt_Params.OutValue, sizeof(GetRangedProfileSettingValueInt_Params.OutValue));

	return GetRangedProfileSettingValueInt_Params.ReturnValue;
};

// Function Engine.OnlinePlayerStorage.GetRangedProfileSettingValueFloat
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20727])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        PropertyId                     (CPF_Parm)
// float                          OutValue                       (CPF_Parm | CPF_OutParm)

bool UOnlinePlayerStorage::GetRangedProfileSettingValueFloat(int32_t PropertyId, float& OutValue)
{
	static UFunction* uFnGetRangedProfileSettingValueFloat = nullptr;

	if (!uFnGetRangedProfileSettingValueFloat)
	{
		uFnGetRangedProfileSettingValueFloat = UFunction::FindFunction("Function Engine.OnlinePlayerStorage.GetRangedProfileSettingValueFloat");
	}

	UOnlinePlayerStorage_execGetRangedProfileSettingValueFloat_Params GetRangedProfileSettingValueFloat_Params;
	memset(&GetRangedProfileSettingValueFloat_Params, 0, sizeof(GetRangedProfileSettingValueFloat_Params));
	memcpy_s(&GetRangedProfileSettingValueFloat_Params.PropertyId, sizeof(GetRangedProfileSettingValueFloat_Params.PropertyId), &PropertyId, sizeof(PropertyId));
	memcpy_s(&GetRangedProfileSettingValueFloat_Params.OutValue, sizeof(GetRangedProfileSettingValueFloat_Params.OutValue), &OutValue, sizeof(OutValue));

	uFnGetRangedProfileSettingValueFloat->iNative = 0;
	uFnGetRangedProfileSettingValueFloat->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetRangedProfileSettingValueFloat, &GetRangedProfileSettingValueFloat_Params, nullptr);
	uFnGetRangedProfileSettingValueFloat->FunctionFlags |= 0x400;
	uFnGetRangedProfileSettingValueFloat->iNative = 20727;

	memcpy_s(&OutValue, sizeof(OutValue), &GetRangedProfileSettingValueFloat_Params.OutValue, sizeof(GetRangedProfileSettingValueFloat_Params.OutValue));

	return GetRangedProfileSettingValueFloat_Params.ReturnValue;
};

// Function Engine.OnlinePlayerStorage.GetRangedProfileSettingValue
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20726])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        ProfileId                      (CPF_Parm)
// float                          OutValue                       (CPF_Parm | CPF_OutParm)

bool UOnlinePlayerStorage::GetRangedProfileSettingValue(int32_t ProfileId, float& OutValue)
{
	static UFunction* uFnGetRangedProfileSettingValue = nullptr;

	if (!uFnGetRangedProfileSettingValue)
	{
		uFnGetRangedProfileSettingValue = UFunction::FindFunction("Function Engine.OnlinePlayerStorage.GetRangedProfileSettingValue");
	}

	UOnlinePlayerStorage_execGetRangedProfileSettingValue_Params GetRangedProfileSettingValue_Params;
	memset(&GetRangedProfileSettingValue_Params, 0, sizeof(GetRangedProfileSettingValue_Params));
	memcpy_s(&GetRangedProfileSettingValue_Params.ProfileId, sizeof(GetRangedProfileSettingValue_Params.ProfileId), &ProfileId, sizeof(ProfileId));
	memcpy_s(&GetRangedProfileSettingValue_Params.OutValue, sizeof(GetRangedProfileSettingValue_Params.OutValue), &OutValue, sizeof(OutValue));

	uFnGetRangedProfileSettingValue->iNative = 0;
	uFnGetRangedProfileSettingValue->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetRangedProfileSettingValue, &GetRangedProfileSettingValue_Params, nullptr);
	uFnGetRangedProfileSettingValue->FunctionFlags |= 0x400;
	uFnGetRangedProfileSettingValue->iNative = 20726;

	memcpy_s(&OutValue, sizeof(OutValue), &GetRangedProfileSettingValue_Params.OutValue, sizeof(GetRangedProfileSettingValue_Params.OutValue));

	return GetRangedProfileSettingValue_Params.ReturnValue;
};

// Function Engine.OnlinePlayerStorage.SetRangedProfileSettingValueInt
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25754])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        PropertyId                     (CPF_Parm)
// int32_t                        NewValue                       (CPF_Parm)

bool UOnlinePlayerStorage::SetRangedProfileSettingValueInt(int32_t PropertyId, int32_t NewValue)
{
	static UFunction* uFnSetRangedProfileSettingValueInt = nullptr;

	if (!uFnSetRangedProfileSettingValueInt)
	{
		uFnSetRangedProfileSettingValueInt = UFunction::FindFunction("Function Engine.OnlinePlayerStorage.SetRangedProfileSettingValueInt");
	}

	UOnlinePlayerStorage_execSetRangedProfileSettingValueInt_Params SetRangedProfileSettingValueInt_Params;
	memset(&SetRangedProfileSettingValueInt_Params, 0, sizeof(SetRangedProfileSettingValueInt_Params));
	memcpy_s(&SetRangedProfileSettingValueInt_Params.PropertyId, sizeof(SetRangedProfileSettingValueInt_Params.PropertyId), &PropertyId, sizeof(PropertyId));
	memcpy_s(&SetRangedProfileSettingValueInt_Params.NewValue, sizeof(SetRangedProfileSettingValueInt_Params.NewValue), &NewValue, sizeof(NewValue));

	uFnSetRangedProfileSettingValueInt->iNative = 0;
	uFnSetRangedProfileSettingValueInt->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetRangedProfileSettingValueInt, &SetRangedProfileSettingValueInt_Params, nullptr);
	uFnSetRangedProfileSettingValueInt->FunctionFlags |= 0x400;
	uFnSetRangedProfileSettingValueInt->iNative = 25754;

	return SetRangedProfileSettingValueInt_Params.ReturnValue;
};

// Function Engine.OnlinePlayerStorage.SetRangedProfileSettingValueFloat
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25753])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        PropertyId                     (CPF_Parm)
// float                          NewValue                       (CPF_Parm)

bool UOnlinePlayerStorage::SetRangedProfileSettingValueFloat(int32_t PropertyId, float NewValue)
{
	static UFunction* uFnSetRangedProfileSettingValueFloat = nullptr;

	if (!uFnSetRangedProfileSettingValueFloat)
	{
		uFnSetRangedProfileSettingValueFloat = UFunction::FindFunction("Function Engine.OnlinePlayerStorage.SetRangedProfileSettingValueFloat");
	}

	UOnlinePlayerStorage_execSetRangedProfileSettingValueFloat_Params SetRangedProfileSettingValueFloat_Params;
	memset(&SetRangedProfileSettingValueFloat_Params, 0, sizeof(SetRangedProfileSettingValueFloat_Params));
	memcpy_s(&SetRangedProfileSettingValueFloat_Params.PropertyId, sizeof(SetRangedProfileSettingValueFloat_Params.PropertyId), &PropertyId, sizeof(PropertyId));
	memcpy_s(&SetRangedProfileSettingValueFloat_Params.NewValue, sizeof(SetRangedProfileSettingValueFloat_Params.NewValue), &NewValue, sizeof(NewValue));

	uFnSetRangedProfileSettingValueFloat->iNative = 0;
	uFnSetRangedProfileSettingValueFloat->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetRangedProfileSettingValueFloat, &SetRangedProfileSettingValueFloat_Params, nullptr);
	uFnSetRangedProfileSettingValueFloat->FunctionFlags |= 0x400;
	uFnSetRangedProfileSettingValueFloat->iNative = 25753;

	return SetRangedProfileSettingValueFloat_Params.ReturnValue;
};

// Function Engine.OnlinePlayerStorage.SetRangedProfileSettingValue
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25752])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        ProfileId                      (CPF_Parm)
// float                          NewValue                       (CPF_Parm)

bool UOnlinePlayerStorage::SetRangedProfileSettingValue(int32_t ProfileId, float NewValue)
{
	static UFunction* uFnSetRangedProfileSettingValue = nullptr;

	if (!uFnSetRangedProfileSettingValue)
	{
		uFnSetRangedProfileSettingValue = UFunction::FindFunction("Function Engine.OnlinePlayerStorage.SetRangedProfileSettingValue");
	}

	UOnlinePlayerStorage_execSetRangedProfileSettingValue_Params SetRangedProfileSettingValue_Params;
	memset(&SetRangedProfileSettingValue_Params, 0, sizeof(SetRangedProfileSettingValue_Params));
	memcpy_s(&SetRangedProfileSettingValue_Params.ProfileId, sizeof(SetRangedProfileSettingValue_Params.ProfileId), &ProfileId, sizeof(ProfileId));
	memcpy_s(&SetRangedProfileSettingValue_Params.NewValue, sizeof(SetRangedProfileSettingValue_Params.NewValue), &NewValue, sizeof(NewValue));

	uFnSetRangedProfileSettingValue->iNative = 0;
	uFnSetRangedProfileSettingValue->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetRangedProfileSettingValue, &SetRangedProfileSettingValue_Params, nullptr);
	uFnSetRangedProfileSettingValue->FunctionFlags |= 0x400;
	uFnSetRangedProfileSettingValue->iNative = 25752;

	return SetRangedProfileSettingValue_Params.ReturnValue;
};

// Function Engine.OnlinePlayerStorage.GetProfileSettingRange
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20701])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        ProfileId                      (CPF_Parm)
// float                          OutMinValue                    (CPF_Parm | CPF_OutParm)
// float                          OutMaxValue                    (CPF_Parm | CPF_OutParm)
// float                          RangeIncrement                 (CPF_Parm | CPF_OutParm)
// uint8_t                        bFormatAsInt                   (CPF_Parm | CPF_OutParm)

bool UOnlinePlayerStorage::GetProfileSettingRange(int32_t ProfileId, float& OutMinValue, float& OutMaxValue, float& RangeIncrement, uint8_t& bFormatAsInt)
{
	static UFunction* uFnGetProfileSettingRange = nullptr;

	if (!uFnGetProfileSettingRange)
	{
		uFnGetProfileSettingRange = UFunction::FindFunction("Function Engine.OnlinePlayerStorage.GetProfileSettingRange");
	}

	UOnlinePlayerStorage_execGetProfileSettingRange_Params GetProfileSettingRange_Params;
	memset(&GetProfileSettingRange_Params, 0, sizeof(GetProfileSettingRange_Params));
	memcpy_s(&GetProfileSettingRange_Params.ProfileId, sizeof(GetProfileSettingRange_Params.ProfileId), &ProfileId, sizeof(ProfileId));
	memcpy_s(&GetProfileSettingRange_Params.OutMinValue, sizeof(GetProfileSettingRange_Params.OutMinValue), &OutMinValue, sizeof(OutMinValue));
	memcpy_s(&GetProfileSettingRange_Params.OutMaxValue, sizeof(GetProfileSettingRange_Params.OutMaxValue), &OutMaxValue, sizeof(OutMaxValue));
	memcpy_s(&GetProfileSettingRange_Params.RangeIncrement, sizeof(GetProfileSettingRange_Params.RangeIncrement), &RangeIncrement, sizeof(RangeIncrement));
	memcpy_s(&GetProfileSettingRange_Params.bFormatAsInt, sizeof(GetProfileSettingRange_Params.bFormatAsInt), &bFormatAsInt, sizeof(bFormatAsInt));

	uFnGetProfileSettingRange->iNative = 0;
	uFnGetProfileSettingRange->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetProfileSettingRange, &GetProfileSettingRange_Params, nullptr);
	uFnGetProfileSettingRange->FunctionFlags |= 0x400;
	uFnGetProfileSettingRange->iNative = 20701;

	memcpy_s(&OutMinValue, sizeof(OutMinValue), &GetProfileSettingRange_Params.OutMinValue, sizeof(GetProfileSettingRange_Params.OutMinValue));
	memcpy_s(&OutMaxValue, sizeof(OutMaxValue), &GetProfileSettingRange_Params.OutMaxValue, sizeof(GetProfileSettingRange_Params.OutMaxValue));
	memcpy_s(&RangeIncrement, sizeof(RangeIncrement), &GetProfileSettingRange_Params.RangeIncrement, sizeof(GetProfileSettingRange_Params.RangeIncrement));
	memcpy_s(&bFormatAsInt, sizeof(bFormatAsInt), &GetProfileSettingRange_Params.bFormatAsInt, sizeof(GetProfileSettingRange_Params.bFormatAsInt));

	return GetProfileSettingRange_Params.ReturnValue;
};

// Function Engine.OnlinePlayerStorage.GetProfileSettingMappingIds
// [0x00422400] (FUNC_Native | FUNC_Static | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20698])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        ProfileId                      (CPF_Parm)
// class TArray<int32_t>          Ids                            (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

bool UOnlinePlayerStorage::GetProfileSettingMappingIds(int32_t ProfileId, class TArray<int32_t>& Ids)
{
	static UFunction* uFnGetProfileSettingMappingIds = nullptr;

	if (!uFnGetProfileSettingMappingIds)
	{
		uFnGetProfileSettingMappingIds = UFunction::FindFunction("Function Engine.OnlinePlayerStorage.GetProfileSettingMappingIds");
	}

	UOnlinePlayerStorage_execGetProfileSettingMappingIds_Params GetProfileSettingMappingIds_Params;
	memset(&GetProfileSettingMappingIds_Params, 0, sizeof(GetProfileSettingMappingIds_Params));
	memcpy_s(&GetProfileSettingMappingIds_Params.ProfileId, sizeof(GetProfileSettingMappingIds_Params.ProfileId), &ProfileId, sizeof(ProfileId));
	memcpy_s(&GetProfileSettingMappingIds_Params.Ids, sizeof(GetProfileSettingMappingIds_Params.Ids), &Ids, sizeof(Ids));

	uFnGetProfileSettingMappingIds->iNative = 0;
	uFnGetProfileSettingMappingIds->FunctionFlags &= ~0x400;
	UOnlinePlayerStorage::StaticClass()->ProcessEvent(uFnGetProfileSettingMappingIds, &GetProfileSettingMappingIds_Params, nullptr);
	uFnGetProfileSettingMappingIds->FunctionFlags |= 0x400;
	uFnGetProfileSettingMappingIds->iNative = 20698;

	memcpy_s(&Ids, sizeof(Ids), &GetProfileSettingMappingIds_Params.Ids, sizeof(GetProfileSettingMappingIds_Params.Ids));

	return GetProfileSettingMappingIds_Params.ReturnValue;
};

// Function Engine.OnlinePlayerStorage.GetProfileSettingMappingType
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20699])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        ProfileId                      (CPF_Parm)
// EPropertyValueMappingType      OutType                        (CPF_Parm | CPF_OutParm)

bool UOnlinePlayerStorage::GetProfileSettingMappingType(int32_t ProfileId, EPropertyValueMappingType& OutType)
{
	static UFunction* uFnGetProfileSettingMappingType = nullptr;

	if (!uFnGetProfileSettingMappingType)
	{
		uFnGetProfileSettingMappingType = UFunction::FindFunction("Function Engine.OnlinePlayerStorage.GetProfileSettingMappingType");
	}

	UOnlinePlayerStorage_execGetProfileSettingMappingType_Params GetProfileSettingMappingType_Params;
	memset(&GetProfileSettingMappingType_Params, 0, sizeof(GetProfileSettingMappingType_Params));
	memcpy_s(&GetProfileSettingMappingType_Params.ProfileId, sizeof(GetProfileSettingMappingType_Params.ProfileId), &ProfileId, sizeof(ProfileId));
	memcpy_s(&GetProfileSettingMappingType_Params.OutType, sizeof(GetProfileSettingMappingType_Params.OutType), &OutType, sizeof(OutType));

	uFnGetProfileSettingMappingType->iNative = 0;
	uFnGetProfileSettingMappingType->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetProfileSettingMappingType, &GetProfileSettingMappingType_Params, nullptr);
	uFnGetProfileSettingMappingType->FunctionFlags |= 0x400;
	uFnGetProfileSettingMappingType->iNative = 20699;

	memcpy_s(&OutType, sizeof(OutType), &GetProfileSettingMappingType_Params.OutType, sizeof(GetProfileSettingMappingType_Params.OutType));

	return GetProfileSettingMappingType_Params.ReturnValue;
};

// Function Engine.OnlinePlayerStorage.SetProfileSettingValueFloat
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25746])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        ProfileSettingId               (CPF_Parm)
// float                          Value                          (CPF_Parm)

bool UOnlinePlayerStorage::SetProfileSettingValueFloat(int32_t ProfileSettingId, float Value)
{
	static UFunction* uFnSetProfileSettingValueFloat = nullptr;

	if (!uFnSetProfileSettingValueFloat)
	{
		uFnSetProfileSettingValueFloat = UFunction::FindFunction("Function Engine.OnlinePlayerStorage.SetProfileSettingValueFloat");
	}

	UOnlinePlayerStorage_execSetProfileSettingValueFloat_Params SetProfileSettingValueFloat_Params;
	memset(&SetProfileSettingValueFloat_Params, 0, sizeof(SetProfileSettingValueFloat_Params));
	memcpy_s(&SetProfileSettingValueFloat_Params.ProfileSettingId, sizeof(SetProfileSettingValueFloat_Params.ProfileSettingId), &ProfileSettingId, sizeof(ProfileSettingId));
	memcpy_s(&SetProfileSettingValueFloat_Params.Value, sizeof(SetProfileSettingValueFloat_Params.Value), &Value, sizeof(Value));

	uFnSetProfileSettingValueFloat->iNative = 0;
	uFnSetProfileSettingValueFloat->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetProfileSettingValueFloat, &SetProfileSettingValueFloat_Params, nullptr);
	uFnSetProfileSettingValueFloat->FunctionFlags |= 0x400;
	uFnSetProfileSettingValueFloat->iNative = 25746;

	return SetProfileSettingValueFloat_Params.ReturnValue;
};

// Function Engine.OnlinePlayerStorage.SetProfileSettingValueInt
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25748])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        ProfileSettingId               (CPF_Parm)
// int32_t                        Value                          (CPF_Parm)

bool UOnlinePlayerStorage::SetProfileSettingValueInt(int32_t ProfileSettingId, int32_t Value)
{
	static UFunction* uFnSetProfileSettingValueInt = nullptr;

	if (!uFnSetProfileSettingValueInt)
	{
		uFnSetProfileSettingValueInt = UFunction::FindFunction("Function Engine.OnlinePlayerStorage.SetProfileSettingValueInt");
	}

	UOnlinePlayerStorage_execSetProfileSettingValueInt_Params SetProfileSettingValueInt_Params;
	memset(&SetProfileSettingValueInt_Params, 0, sizeof(SetProfileSettingValueInt_Params));
	memcpy_s(&SetProfileSettingValueInt_Params.ProfileSettingId, sizeof(SetProfileSettingValueInt_Params.ProfileSettingId), &ProfileSettingId, sizeof(ProfileSettingId));
	memcpy_s(&SetProfileSettingValueInt_Params.Value, sizeof(SetProfileSettingValueInt_Params.Value), &Value, sizeof(Value));

	uFnSetProfileSettingValueInt->iNative = 0;
	uFnSetProfileSettingValueInt->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetProfileSettingValueInt, &SetProfileSettingValueInt_Params, nullptr);
	uFnSetProfileSettingValueInt->FunctionFlags |= 0x400;
	uFnSetProfileSettingValueInt->iNative = 25748;

	return SetProfileSettingValueInt_Params.ReturnValue;
};

// Function Engine.OnlinePlayerStorage.SetProfileSettingValueId
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25747])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        ProfileSettingId               (CPF_Parm)
// int32_t                        Value                          (CPF_Parm)

bool UOnlinePlayerStorage::SetProfileSettingValueId(int32_t ProfileSettingId, int32_t Value)
{
	static UFunction* uFnSetProfileSettingValueId = nullptr;

	if (!uFnSetProfileSettingValueId)
	{
		uFnSetProfileSettingValueId = UFunction::FindFunction("Function Engine.OnlinePlayerStorage.SetProfileSettingValueId");
	}

	UOnlinePlayerStorage_execSetProfileSettingValueId_Params SetProfileSettingValueId_Params;
	memset(&SetProfileSettingValueId_Params, 0, sizeof(SetProfileSettingValueId_Params));
	memcpy_s(&SetProfileSettingValueId_Params.ProfileSettingId, sizeof(SetProfileSettingValueId_Params.ProfileSettingId), &ProfileSettingId, sizeof(ProfileSettingId));
	memcpy_s(&SetProfileSettingValueId_Params.Value, sizeof(SetProfileSettingValueId_Params.Value), &Value, sizeof(Value));

	uFnSetProfileSettingValueId->iNative = 0;
	uFnSetProfileSettingValueId->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetProfileSettingValueId, &SetProfileSettingValueId_Params, nullptr);
	uFnSetProfileSettingValueId->FunctionFlags |= 0x400;
	uFnSetProfileSettingValueId->iNative = 25747;

	return SetProfileSettingValueId_Params.ReturnValue;
};

// Function Engine.OnlinePlayerStorage.GetProfileSettingValueFloat
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20705])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        ProfileSettingId               (CPF_Parm)
// float                          Value                          (CPF_Parm | CPF_OutParm)

bool UOnlinePlayerStorage::GetProfileSettingValueFloat(int32_t ProfileSettingId, float& Value)
{
	static UFunction* uFnGetProfileSettingValueFloat = nullptr;

	if (!uFnGetProfileSettingValueFloat)
	{
		uFnGetProfileSettingValueFloat = UFunction::FindFunction("Function Engine.OnlinePlayerStorage.GetProfileSettingValueFloat");
	}

	UOnlinePlayerStorage_execGetProfileSettingValueFloat_Params GetProfileSettingValueFloat_Params;
	memset(&GetProfileSettingValueFloat_Params, 0, sizeof(GetProfileSettingValueFloat_Params));
	memcpy_s(&GetProfileSettingValueFloat_Params.ProfileSettingId, sizeof(GetProfileSettingValueFloat_Params.ProfileSettingId), &ProfileSettingId, sizeof(ProfileSettingId));
	memcpy_s(&GetProfileSettingValueFloat_Params.Value, sizeof(GetProfileSettingValueFloat_Params.Value), &Value, sizeof(Value));

	uFnGetProfileSettingValueFloat->iNative = 0;
	uFnGetProfileSettingValueFloat->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetProfileSettingValueFloat, &GetProfileSettingValueFloat_Params, nullptr);
	uFnGetProfileSettingValueFloat->FunctionFlags |= 0x400;
	uFnGetProfileSettingValueFloat->iNative = 20705;

	memcpy_s(&Value, sizeof(Value), &GetProfileSettingValueFloat_Params.Value, sizeof(GetProfileSettingValueFloat_Params.Value));

	return GetProfileSettingValueFloat_Params.ReturnValue;
};

// Function Engine.OnlinePlayerStorage.GetProfileSettingValueInt
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20708])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        ProfileSettingId               (CPF_Parm)
// int32_t                        Value                          (CPF_Parm | CPF_OutParm)

bool UOnlinePlayerStorage::GetProfileSettingValueInt(int32_t ProfileSettingId, int32_t& Value)
{
	static UFunction* uFnGetProfileSettingValueInt = nullptr;

	if (!uFnGetProfileSettingValueInt)
	{
		uFnGetProfileSettingValueInt = UFunction::FindFunction("Function Engine.OnlinePlayerStorage.GetProfileSettingValueInt");
	}

	UOnlinePlayerStorage_execGetProfileSettingValueInt_Params GetProfileSettingValueInt_Params;
	memset(&GetProfileSettingValueInt_Params, 0, sizeof(GetProfileSettingValueInt_Params));
	memcpy_s(&GetProfileSettingValueInt_Params.ProfileSettingId, sizeof(GetProfileSettingValueInt_Params.ProfileSettingId), &ProfileSettingId, sizeof(ProfileSettingId));
	memcpy_s(&GetProfileSettingValueInt_Params.Value, sizeof(GetProfileSettingValueInt_Params.Value), &Value, sizeof(Value));

	uFnGetProfileSettingValueInt->iNative = 0;
	uFnGetProfileSettingValueInt->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetProfileSettingValueInt, &GetProfileSettingValueInt_Params, nullptr);
	uFnGetProfileSettingValueInt->FunctionFlags |= 0x400;
	uFnGetProfileSettingValueInt->iNative = 20708;

	memcpy_s(&Value, sizeof(Value), &GetProfileSettingValueInt_Params.Value, sizeof(GetProfileSettingValueInt_Params.Value));

	return GetProfileSettingValueInt_Params.ReturnValue;
};

// Function Engine.OnlinePlayerStorage.GetProfileSettingValueFromListIndex
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20706])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        ProfileSettingId               (CPF_Parm)
// int32_t                        ListIndex                      (CPF_Parm)
// int32_t                        Value                          (CPF_Parm | CPF_OutParm)

bool UOnlinePlayerStorage::GetProfileSettingValueFromListIndex(int32_t ProfileSettingId, int32_t ListIndex, int32_t& Value)
{
	static UFunction* uFnGetProfileSettingValueFromListIndex = nullptr;

	if (!uFnGetProfileSettingValueFromListIndex)
	{
		uFnGetProfileSettingValueFromListIndex = UFunction::FindFunction("Function Engine.OnlinePlayerStorage.GetProfileSettingValueFromListIndex");
	}

	UOnlinePlayerStorage_execGetProfileSettingValueFromListIndex_Params GetProfileSettingValueFromListIndex_Params;
	memset(&GetProfileSettingValueFromListIndex_Params, 0, sizeof(GetProfileSettingValueFromListIndex_Params));
	memcpy_s(&GetProfileSettingValueFromListIndex_Params.ProfileSettingId, sizeof(GetProfileSettingValueFromListIndex_Params.ProfileSettingId), &ProfileSettingId, sizeof(ProfileSettingId));
	memcpy_s(&GetProfileSettingValueFromListIndex_Params.ListIndex, sizeof(GetProfileSettingValueFromListIndex_Params.ListIndex), &ListIndex, sizeof(ListIndex));
	memcpy_s(&GetProfileSettingValueFromListIndex_Params.Value, sizeof(GetProfileSettingValueFromListIndex_Params.Value), &Value, sizeof(Value));

	uFnGetProfileSettingValueFromListIndex->iNative = 0;
	uFnGetProfileSettingValueFromListIndex->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetProfileSettingValueFromListIndex, &GetProfileSettingValueFromListIndex_Params, nullptr);
	uFnGetProfileSettingValueFromListIndex->FunctionFlags |= 0x400;
	uFnGetProfileSettingValueFromListIndex->iNative = 20706;

	memcpy_s(&Value, sizeof(Value), &GetProfileSettingValueFromListIndex_Params.Value, sizeof(GetProfileSettingValueFromListIndex_Params.Value));

	return GetProfileSettingValueFromListIndex_Params.ReturnValue;
};

// Function Engine.OnlinePlayerStorage.GetProfileSettingValueId
// [0x00424400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20707])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        ProfileSettingId               (CPF_Parm)
// int32_t                        ValueId                        (CPF_Parm | CPF_OutParm)
// int32_t                        ListIndex                      (CPF_OptionalParm | CPF_Parm | CPF_OutParm)

bool UOnlinePlayerStorage::GetProfileSettingValueId(int32_t ProfileSettingId, int32_t& ValueId, int32_t& ListIndex)
{
	static UFunction* uFnGetProfileSettingValueId = nullptr;

	if (!uFnGetProfileSettingValueId)
	{
		uFnGetProfileSettingValueId = UFunction::FindFunction("Function Engine.OnlinePlayerStorage.GetProfileSettingValueId");
	}

	UOnlinePlayerStorage_execGetProfileSettingValueId_Params GetProfileSettingValueId_Params;
	memset(&GetProfileSettingValueId_Params, 0, sizeof(GetProfileSettingValueId_Params));
	memcpy_s(&GetProfileSettingValueId_Params.ProfileSettingId, sizeof(GetProfileSettingValueId_Params.ProfileSettingId), &ProfileSettingId, sizeof(ProfileSettingId));
	memcpy_s(&GetProfileSettingValueId_Params.ValueId, sizeof(GetProfileSettingValueId_Params.ValueId), &ValueId, sizeof(ValueId));
	memcpy_s(&GetProfileSettingValueId_Params.ListIndex, sizeof(GetProfileSettingValueId_Params.ListIndex), &ListIndex, sizeof(ListIndex));

	uFnGetProfileSettingValueId->iNative = 0;
	uFnGetProfileSettingValueId->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetProfileSettingValueId, &GetProfileSettingValueId_Params, nullptr);
	uFnGetProfileSettingValueId->FunctionFlags |= 0x400;
	uFnGetProfileSettingValueId->iNative = 20707;

	memcpy_s(&ValueId, sizeof(ValueId), &GetProfileSettingValueId_Params.ValueId, sizeof(GetProfileSettingValueId_Params.ValueId));
	memcpy_s(&ListIndex, sizeof(ListIndex), &GetProfileSettingValueId_Params.ListIndex, sizeof(GetProfileSettingValueId_Params.ListIndex));

	return GetProfileSettingValueId_Params.ReturnValue;
};

// Function Engine.OnlinePlayerStorage.SetProfileSettingValue
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[25744])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        ProfileSettingId               (CPF_Parm)
// class FString                  NewValue                       (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

bool UOnlinePlayerStorage::SetProfileSettingValue(int32_t ProfileSettingId, class FString& NewValue)
{
	static UFunction* uFnSetProfileSettingValue = nullptr;

	if (!uFnSetProfileSettingValue)
	{
		uFnSetProfileSettingValue = UFunction::FindFunction("Function Engine.OnlinePlayerStorage.SetProfileSettingValue");
	}

	UOnlinePlayerStorage_execSetProfileSettingValue_Params SetProfileSettingValue_Params;
	memset(&SetProfileSettingValue_Params, 0, sizeof(SetProfileSettingValue_Params));
	memcpy_s(&SetProfileSettingValue_Params.ProfileSettingId, sizeof(SetProfileSettingValue_Params.ProfileSettingId), &ProfileSettingId, sizeof(ProfileSettingId));
	memcpy_s(&SetProfileSettingValue_Params.NewValue, sizeof(SetProfileSettingValue_Params.NewValue), &NewValue, sizeof(NewValue));

	uFnSetProfileSettingValue->iNative = 0;
	uFnSetProfileSettingValue->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetProfileSettingValue, &SetProfileSettingValue_Params, nullptr);
	uFnSetProfileSettingValue->FunctionFlags |= 0x400;
	uFnSetProfileSettingValue->iNative = 25744;

	memcpy_s(&NewValue, sizeof(NewValue), &SetProfileSettingValue_Params.NewValue, sizeof(SetProfileSettingValue_Params.NewValue));

	return SetProfileSettingValue_Params.ReturnValue;
};

// Function Engine.OnlinePlayerStorage.SetProfileSettingValueByName
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[25745])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    ProfileSettingName             (CPF_Parm)
// class FString                  NewValue                       (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

bool UOnlinePlayerStorage::SetProfileSettingValueByName(const class FName& ProfileSettingName, class FString& NewValue)
{
	static UFunction* uFnSetProfileSettingValueByName = nullptr;

	if (!uFnSetProfileSettingValueByName)
	{
		uFnSetProfileSettingValueByName = UFunction::FindFunction("Function Engine.OnlinePlayerStorage.SetProfileSettingValueByName");
	}

	UOnlinePlayerStorage_execSetProfileSettingValueByName_Params SetProfileSettingValueByName_Params;
	memset(&SetProfileSettingValueByName_Params, 0, sizeof(SetProfileSettingValueByName_Params));
	memcpy_s(&SetProfileSettingValueByName_Params.ProfileSettingName, sizeof(SetProfileSettingValueByName_Params.ProfileSettingName), &ProfileSettingName, sizeof(ProfileSettingName));
	memcpy_s(&SetProfileSettingValueByName_Params.NewValue, sizeof(SetProfileSettingValueByName_Params.NewValue), &NewValue, sizeof(NewValue));

	uFnSetProfileSettingValueByName->iNative = 0;
	uFnSetProfileSettingValueByName->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetProfileSettingValueByName, &SetProfileSettingValueByName_Params, nullptr);
	uFnSetProfileSettingValueByName->FunctionFlags |= 0x400;
	uFnSetProfileSettingValueByName->iNative = 25745;

	memcpy_s(&NewValue, sizeof(NewValue), &SetProfileSettingValueByName_Params.NewValue, sizeof(SetProfileSettingValueByName_Params.NewValue));

	return SetProfileSettingValueByName_Params.ReturnValue;
};

// Function Engine.OnlinePlayerStorage.GetProfileSettingValueByName
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20704])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    ProfileSettingName             (CPF_Parm)
// class FString                  Value                          (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

bool UOnlinePlayerStorage::GetProfileSettingValueByName(const class FName& ProfileSettingName, class FString& Value)
{
	static UFunction* uFnGetProfileSettingValueByName = nullptr;

	if (!uFnGetProfileSettingValueByName)
	{
		uFnGetProfileSettingValueByName = UFunction::FindFunction("Function Engine.OnlinePlayerStorage.GetProfileSettingValueByName");
	}

	UOnlinePlayerStorage_execGetProfileSettingValueByName_Params GetProfileSettingValueByName_Params;
	memset(&GetProfileSettingValueByName_Params, 0, sizeof(GetProfileSettingValueByName_Params));
	memcpy_s(&GetProfileSettingValueByName_Params.ProfileSettingName, sizeof(GetProfileSettingValueByName_Params.ProfileSettingName), &ProfileSettingName, sizeof(ProfileSettingName));
	memcpy_s(&GetProfileSettingValueByName_Params.Value, sizeof(GetProfileSettingValueByName_Params.Value), &Value, sizeof(Value));

	uFnGetProfileSettingValueByName->iNative = 0;
	uFnGetProfileSettingValueByName->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetProfileSettingValueByName, &GetProfileSettingValueByName_Params, nullptr);
	uFnGetProfileSettingValueByName->FunctionFlags |= 0x400;
	uFnGetProfileSettingValueByName->iNative = 20704;

	memcpy_s(&Value, sizeof(Value), &GetProfileSettingValueByName_Params.Value, sizeof(GetProfileSettingValueByName_Params.Value));

	return GetProfileSettingValueByName_Params.ReturnValue;
};

// Function Engine.OnlinePlayerStorage.GetProfileSettingValues
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20710])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        ProfileSettingId               (CPF_Parm)
// class TArray<class FName>      Values                         (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

bool UOnlinePlayerStorage::GetProfileSettingValues(int32_t ProfileSettingId, class TArray<class FName>& Values)
{
	static UFunction* uFnGetProfileSettingValues = nullptr;

	if (!uFnGetProfileSettingValues)
	{
		uFnGetProfileSettingValues = UFunction::FindFunction("Function Engine.OnlinePlayerStorage.GetProfileSettingValues");
	}

	UOnlinePlayerStorage_execGetProfileSettingValues_Params GetProfileSettingValues_Params;
	memset(&GetProfileSettingValues_Params, 0, sizeof(GetProfileSettingValues_Params));
	memcpy_s(&GetProfileSettingValues_Params.ProfileSettingId, sizeof(GetProfileSettingValues_Params.ProfileSettingId), &ProfileSettingId, sizeof(ProfileSettingId));
	memcpy_s(&GetProfileSettingValues_Params.Values, sizeof(GetProfileSettingValues_Params.Values), &Values, sizeof(Values));

	uFnGetProfileSettingValues->iNative = 0;
	uFnGetProfileSettingValues->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetProfileSettingValues, &GetProfileSettingValues_Params, nullptr);
	uFnGetProfileSettingValues->FunctionFlags |= 0x400;
	uFnGetProfileSettingValues->iNative = 20710;

	memcpy_s(&Values, sizeof(Values), &GetProfileSettingValues_Params.Values, sizeof(GetProfileSettingValues_Params.Values));

	return GetProfileSettingValues_Params.ReturnValue;
};

// Function Engine.OnlinePlayerStorage.GetProfileSettingValueName
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20709])
// Parameter Info:
// class FName                    ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        ProfileSettingId               (CPF_Parm)

class FName UOnlinePlayerStorage::GetProfileSettingValueName(int32_t ProfileSettingId)
{
	static UFunction* uFnGetProfileSettingValueName = nullptr;

	if (!uFnGetProfileSettingValueName)
	{
		uFnGetProfileSettingValueName = UFunction::FindFunction("Function Engine.OnlinePlayerStorage.GetProfileSettingValueName");
	}

	UOnlinePlayerStorage_execGetProfileSettingValueName_Params GetProfileSettingValueName_Params;
	memset(&GetProfileSettingValueName_Params, 0, sizeof(GetProfileSettingValueName_Params));
	memcpy_s(&GetProfileSettingValueName_Params.ProfileSettingId, sizeof(GetProfileSettingValueName_Params.ProfileSettingId), &ProfileSettingId, sizeof(ProfileSettingId));

	uFnGetProfileSettingValueName->iNative = 0;
	uFnGetProfileSettingValueName->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetProfileSettingValueName, &GetProfileSettingValueName_Params, nullptr);
	uFnGetProfileSettingValueName->FunctionFlags |= 0x400;
	uFnGetProfileSettingValueName->iNative = 20709;

	return GetProfileSettingValueName_Params.ReturnValue;
};

// Function Engine.OnlinePlayerStorage.GetProfileSettingValue
// [0x00424400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20703])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        ProfileSettingId               (CPF_Parm)
// int32_t                        ValueMapID                     (CPF_OptionalParm | CPF_Parm)
// class FString                  Value                          (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

bool UOnlinePlayerStorage::GetProfileSettingValue(int32_t ProfileSettingId, int32_t ValueMapID, class FString& Value)
{
	static UFunction* uFnGetProfileSettingValue = nullptr;

	if (!uFnGetProfileSettingValue)
	{
		uFnGetProfileSettingValue = UFunction::FindFunction("Function Engine.OnlinePlayerStorage.GetProfileSettingValue");
	}

	UOnlinePlayerStorage_execGetProfileSettingValue_Params GetProfileSettingValue_Params;
	memset(&GetProfileSettingValue_Params, 0, sizeof(GetProfileSettingValue_Params));
	memcpy_s(&GetProfileSettingValue_Params.ProfileSettingId, sizeof(GetProfileSettingValue_Params.ProfileSettingId), &ProfileSettingId, sizeof(ProfileSettingId));
	memcpy_s(&GetProfileSettingValue_Params.ValueMapID, sizeof(GetProfileSettingValue_Params.ValueMapID), &ValueMapID, sizeof(ValueMapID));
	memcpy_s(&GetProfileSettingValue_Params.Value, sizeof(GetProfileSettingValue_Params.Value), &Value, sizeof(Value));

	uFnGetProfileSettingValue->iNative = 0;
	uFnGetProfileSettingValue->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetProfileSettingValue, &GetProfileSettingValue_Params, nullptr);
	uFnGetProfileSettingValue->FunctionFlags |= 0x400;
	uFnGetProfileSettingValue->iNative = 20703;

	memcpy_s(&Value, sizeof(Value), &GetProfileSettingValue_Params.Value, sizeof(GetProfileSettingValue_Params.Value));

	return GetProfileSettingValue_Params.ReturnValue;
};

// Function Engine.OnlinePlayerStorage.IsProfileSettingIdMapped
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[21420])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        ProfileSettingId               (CPF_Parm)

bool UOnlinePlayerStorage::IsProfileSettingIdMapped(int32_t ProfileSettingId)
{
	static UFunction* uFnIsProfileSettingIdMapped = nullptr;

	if (!uFnIsProfileSettingIdMapped)
	{
		uFnIsProfileSettingIdMapped = UFunction::FindFunction("Function Engine.OnlinePlayerStorage.IsProfileSettingIdMapped");
	}

	UOnlinePlayerStorage_execIsProfileSettingIdMapped_Params IsProfileSettingIdMapped_Params;
	memset(&IsProfileSettingIdMapped_Params, 0, sizeof(IsProfileSettingIdMapped_Params));
	memcpy_s(&IsProfileSettingIdMapped_Params.ProfileSettingId, sizeof(IsProfileSettingIdMapped_Params.ProfileSettingId), &ProfileSettingId, sizeof(ProfileSettingId));

	uFnIsProfileSettingIdMapped->iNative = 0;
	uFnIsProfileSettingIdMapped->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnIsProfileSettingIdMapped, &IsProfileSettingIdMapped_Params, nullptr);
	uFnIsProfileSettingIdMapped->FunctionFlags |= 0x400;
	uFnIsProfileSettingIdMapped->iNative = 21420;

	return IsProfileSettingIdMapped_Params.ReturnValue;
};

// Function Engine.OnlinePlayerStorage.FindDefaultProfileMappingIndexByName
// [0x00022401] (FUNC_Final | FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags) (iNative[20097])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    ProfileSettingName             (CPF_Parm)

int32_t UOnlinePlayerStorage::FindDefaultProfileMappingIndexByName(const class FName& ProfileSettingName)
{
	static UFunction* uFnFindDefaultProfileMappingIndexByName = nullptr;

	if (!uFnFindDefaultProfileMappingIndexByName)
	{
		uFnFindDefaultProfileMappingIndexByName = UFunction::FindFunction("Function Engine.OnlinePlayerStorage.FindDefaultProfileMappingIndexByName");
	}

	UOnlinePlayerStorage_execFindDefaultProfileMappingIndexByName_Params FindDefaultProfileMappingIndexByName_Params;
	memset(&FindDefaultProfileMappingIndexByName_Params, 0, sizeof(FindDefaultProfileMappingIndexByName_Params));
	memcpy_s(&FindDefaultProfileMappingIndexByName_Params.ProfileSettingName, sizeof(FindDefaultProfileMappingIndexByName_Params.ProfileSettingName), &ProfileSettingName, sizeof(ProfileSettingName));

	uFnFindDefaultProfileMappingIndexByName->iNative = 0;
	uFnFindDefaultProfileMappingIndexByName->FunctionFlags &= ~0x400;
	UOnlinePlayerStorage::StaticClass()->ProcessEvent(uFnFindDefaultProfileMappingIndexByName, &FindDefaultProfileMappingIndexByName_Params, nullptr);
	uFnFindDefaultProfileMappingIndexByName->FunctionFlags |= 0x400;
	uFnFindDefaultProfileMappingIndexByName->iNative = 20097;

	return FindDefaultProfileMappingIndexByName_Params.ReturnValue;
};

// Function Engine.OnlinePlayerStorage.FindProfileMappingIndexByName
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20114])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    ProfileSettingName             (CPF_Parm)

int32_t UOnlinePlayerStorage::FindProfileMappingIndexByName(const class FName& ProfileSettingName)
{
	static UFunction* uFnFindProfileMappingIndexByName = nullptr;

	if (!uFnFindProfileMappingIndexByName)
	{
		uFnFindProfileMappingIndexByName = UFunction::FindFunction("Function Engine.OnlinePlayerStorage.FindProfileMappingIndexByName");
	}

	UOnlinePlayerStorage_execFindProfileMappingIndexByName_Params FindProfileMappingIndexByName_Params;
	memset(&FindProfileMappingIndexByName_Params, 0, sizeof(FindProfileMappingIndexByName_Params));
	memcpy_s(&FindProfileMappingIndexByName_Params.ProfileSettingName, sizeof(FindProfileMappingIndexByName_Params.ProfileSettingName), &ProfileSettingName, sizeof(ProfileSettingName));

	uFnFindProfileMappingIndexByName->iNative = 0;
	uFnFindProfileMappingIndexByName->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnFindProfileMappingIndexByName, &FindProfileMappingIndexByName_Params, nullptr);
	uFnFindProfileMappingIndexByName->FunctionFlags |= 0x400;
	uFnFindProfileMappingIndexByName->iNative = 20114;

	return FindProfileMappingIndexByName_Params.ReturnValue;
};

// Function Engine.OnlinePlayerStorage.FindProfileMappingIndex
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20113])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        ProfileSettingId               (CPF_Parm)

int32_t UOnlinePlayerStorage::FindProfileMappingIndex(int32_t ProfileSettingId)
{
	static UFunction* uFnFindProfileMappingIndex = nullptr;

	if (!uFnFindProfileMappingIndex)
	{
		uFnFindProfileMappingIndex = UFunction::FindFunction("Function Engine.OnlinePlayerStorage.FindProfileMappingIndex");
	}

	UOnlinePlayerStorage_execFindProfileMappingIndex_Params FindProfileMappingIndex_Params;
	memset(&FindProfileMappingIndex_Params, 0, sizeof(FindProfileMappingIndex_Params));
	memcpy_s(&FindProfileMappingIndex_Params.ProfileSettingId, sizeof(FindProfileMappingIndex_Params.ProfileSettingId), &ProfileSettingId, sizeof(ProfileSettingId));

	uFnFindProfileMappingIndex->iNative = 0;
	uFnFindProfileMappingIndex->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnFindProfileMappingIndex, &FindProfileMappingIndex_Params, nullptr);
	uFnFindProfileMappingIndex->FunctionFlags |= 0x400;
	uFnFindProfileMappingIndex->iNative = 20113;

	return FindProfileMappingIndex_Params.ReturnValue;
};

// Function Engine.OnlinePlayerStorage.FindProfileSettingIndex
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20115])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        ProfileSettingId               (CPF_Parm)

int32_t UOnlinePlayerStorage::FindProfileSettingIndex(int32_t ProfileSettingId)
{
	static UFunction* uFnFindProfileSettingIndex = nullptr;

	if (!uFnFindProfileSettingIndex)
	{
		uFnFindProfileSettingIndex = UFunction::FindFunction("Function Engine.OnlinePlayerStorage.FindProfileSettingIndex");
	}

	UOnlinePlayerStorage_execFindProfileSettingIndex_Params FindProfileSettingIndex_Params;
	memset(&FindProfileSettingIndex_Params, 0, sizeof(FindProfileSettingIndex_Params));
	memcpy_s(&FindProfileSettingIndex_Params.ProfileSettingId, sizeof(FindProfileSettingIndex_Params.ProfileSettingId), &ProfileSettingId, sizeof(ProfileSettingId));

	uFnFindProfileSettingIndex->iNative = 0;
	uFnFindProfileSettingIndex->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnFindProfileSettingIndex, &FindProfileSettingIndex_Params, nullptr);
	uFnFindProfileSettingIndex->FunctionFlags |= 0x400;
	uFnFindProfileSettingIndex->iNative = 20115;

	return FindProfileSettingIndex_Params.ReturnValue;
};

// Function Engine.OnlinePlayerStorage.GetProfileSettingColumnHeader
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20693])
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)
// int32_t                        ProfileSettingId               (CPF_Parm)

class FString UOnlinePlayerStorage::GetProfileSettingColumnHeader(int32_t ProfileSettingId)
{
	static UFunction* uFnGetProfileSettingColumnHeader = nullptr;

	if (!uFnGetProfileSettingColumnHeader)
	{
		uFnGetProfileSettingColumnHeader = UFunction::FindFunction("Function Engine.OnlinePlayerStorage.GetProfileSettingColumnHeader");
	}

	UOnlinePlayerStorage_execGetProfileSettingColumnHeader_Params GetProfileSettingColumnHeader_Params;
	memset(&GetProfileSettingColumnHeader_Params, 0, sizeof(GetProfileSettingColumnHeader_Params));
	memcpy_s(&GetProfileSettingColumnHeader_Params.ProfileSettingId, sizeof(GetProfileSettingColumnHeader_Params.ProfileSettingId), &ProfileSettingId, sizeof(ProfileSettingId));

	uFnGetProfileSettingColumnHeader->iNative = 0;
	uFnGetProfileSettingColumnHeader->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetProfileSettingColumnHeader, &GetProfileSettingColumnHeader_Params, nullptr);
	uFnGetProfileSettingColumnHeader->FunctionFlags |= 0x400;
	uFnGetProfileSettingColumnHeader->iNative = 20693;

	return GetProfileSettingColumnHeader_Params.ReturnValue;
};

// Function Engine.OnlinePlayerStorage.GetProfileSettingName
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20700])
// Parameter Info:
// class FName                    ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        ProfileSettingId               (CPF_Parm)

class FName UOnlinePlayerStorage::GetProfileSettingName(int32_t ProfileSettingId)
{
	static UFunction* uFnGetProfileSettingName = nullptr;

	if (!uFnGetProfileSettingName)
	{
		uFnGetProfileSettingName = UFunction::FindFunction("Function Engine.OnlinePlayerStorage.GetProfileSettingName");
	}

	UOnlinePlayerStorage_execGetProfileSettingName_Params GetProfileSettingName_Params;
	memset(&GetProfileSettingName_Params, 0, sizeof(GetProfileSettingName_Params));
	memcpy_s(&GetProfileSettingName_Params.ProfileSettingId, sizeof(GetProfileSettingName_Params.ProfileSettingId), &ProfileSettingId, sizeof(ProfileSettingId));

	uFnGetProfileSettingName->iNative = 0;
	uFnGetProfileSettingName->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetProfileSettingName, &GetProfileSettingName_Params, nullptr);
	uFnGetProfileSettingName->FunctionFlags |= 0x400;
	uFnGetProfileSettingName->iNative = 20700;

	return GetProfileSettingName_Params.ReturnValue;
};

// Function Engine.OnlinePlayerStorage.GetProfileSettingId
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20697])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    ProfileSettingName             (CPF_Parm)
// int32_t                        ProfileSettingId               (CPF_Parm | CPF_OutParm)

bool UOnlinePlayerStorage::GetProfileSettingId(const class FName& ProfileSettingName, int32_t& ProfileSettingId)
{
	static UFunction* uFnGetProfileSettingId = nullptr;

	if (!uFnGetProfileSettingId)
	{
		uFnGetProfileSettingId = UFunction::FindFunction("Function Engine.OnlinePlayerStorage.GetProfileSettingId");
	}

	UOnlinePlayerStorage_execGetProfileSettingId_Params GetProfileSettingId_Params;
	memset(&GetProfileSettingId_Params, 0, sizeof(GetProfileSettingId_Params));
	memcpy_s(&GetProfileSettingId_Params.ProfileSettingName, sizeof(GetProfileSettingId_Params.ProfileSettingName), &ProfileSettingName, sizeof(ProfileSettingName));
	memcpy_s(&GetProfileSettingId_Params.ProfileSettingId, sizeof(GetProfileSettingId_Params.ProfileSettingId), &ProfileSettingId, sizeof(ProfileSettingId));

	uFnGetProfileSettingId->iNative = 0;
	uFnGetProfileSettingId->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetProfileSettingId, &GetProfileSettingId_Params, nullptr);
	uFnGetProfileSettingId->FunctionFlags |= 0x400;
	uFnGetProfileSettingId->iNative = 20697;

	memcpy_s(&ProfileSettingId, sizeof(ProfileSettingId), &GetProfileSettingId_Params.ProfileSettingId, sizeof(GetProfileSettingId_Params.ProfileSettingId));

	return GetProfileSettingId_Params.ReturnValue;
};

// Function Engine.OnlineProfileSettings.ModifyAvailableProfileSettings
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOnlineProfileSettings::eventModifyAvailableProfileSettings()
{
	static UFunction* uFnModifyAvailableProfileSettings = nullptr;

	if (!uFnModifyAvailableProfileSettings)
	{
		uFnModifyAvailableProfileSettings = UFunction::FindFunction("Function Engine.OnlineProfileSettings.ModifyAvailableProfileSettings");
	}

	UOnlineProfileSettings_eventModifyAvailableProfileSettings_Params ModifyAvailableProfileSettings_Params;
	memset(&ModifyAvailableProfileSettings_Params, 0, sizeof(ModifyAvailableProfileSettings_Params));

	this->ProcessEvent(uFnModifyAvailableProfileSettings, &ModifyAvailableProfileSettings_Params, nullptr);
};

// Function Engine.OnlineProfileSettings.AppendVersionToReadIds
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[15627])
// Parameter Info:

void UOnlineProfileSettings::AppendVersionToReadIds()
{
	static UFunction* uFnAppendVersionToReadIds = nullptr;

	if (!uFnAppendVersionToReadIds)
	{
		uFnAppendVersionToReadIds = UFunction::FindFunction("Function Engine.OnlineProfileSettings.AppendVersionToReadIds");
	}

	UOnlineProfileSettings_execAppendVersionToReadIds_Params AppendVersionToReadIds_Params;
	memset(&AppendVersionToReadIds_Params, 0, sizeof(AppendVersionToReadIds_Params));

	uFnAppendVersionToReadIds->iNative = 0;
	uFnAppendVersionToReadIds->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnAppendVersionToReadIds, &AppendVersionToReadIds_Params, nullptr);
	uFnAppendVersionToReadIds->FunctionFlags |= 0x400;
	uFnAppendVersionToReadIds->iNative = 15627;
};

// Function Engine.OnlineProfileSettings.SetToDefaults
// [0x00020C00] (FUNC_Native | FUNC_Event | FUNC_Public | FUNC_AllFlags) (iNative[13747])
// Parameter Info:

void UOnlineProfileSettings::eventSetToDefaults()
{
	static UFunction* uFnSetToDefaults = nullptr;

	if (!uFnSetToDefaults)
	{
		uFnSetToDefaults = UFunction::FindFunction("Function Engine.OnlineProfileSettings.SetToDefaults");
	}

	UOnlineProfileSettings_eventSetToDefaults_Params SetToDefaults_Params;
	memset(&SetToDefaults_Params, 0, sizeof(SetToDefaults_Params));

	uFnSetToDefaults->iNative = 0;
	uFnSetToDefaults->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetToDefaults, &SetToDefaults_Params, nullptr);
	uFnSetToDefaults->FunctionFlags |= 0x400;
	uFnSetToDefaults->iNative = 13747;
};

// Function Engine.OnlineProfileSettings.GetProfileSettingDefaultFloat
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20694])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        ProfileSettingId               (CPF_Parm)
// float                          DefaultFloat                   (CPF_Parm | CPF_OutParm)

bool UOnlineProfileSettings::GetProfileSettingDefaultFloat(int32_t ProfileSettingId, float& DefaultFloat)
{
	static UFunction* uFnGetProfileSettingDefaultFloat = nullptr;

	if (!uFnGetProfileSettingDefaultFloat)
	{
		uFnGetProfileSettingDefaultFloat = UFunction::FindFunction("Function Engine.OnlineProfileSettings.GetProfileSettingDefaultFloat");
	}

	UOnlineProfileSettings_execGetProfileSettingDefaultFloat_Params GetProfileSettingDefaultFloat_Params;
	memset(&GetProfileSettingDefaultFloat_Params, 0, sizeof(GetProfileSettingDefaultFloat_Params));
	memcpy_s(&GetProfileSettingDefaultFloat_Params.ProfileSettingId, sizeof(GetProfileSettingDefaultFloat_Params.ProfileSettingId), &ProfileSettingId, sizeof(ProfileSettingId));
	memcpy_s(&GetProfileSettingDefaultFloat_Params.DefaultFloat, sizeof(GetProfileSettingDefaultFloat_Params.DefaultFloat), &DefaultFloat, sizeof(DefaultFloat));

	uFnGetProfileSettingDefaultFloat->iNative = 0;
	uFnGetProfileSettingDefaultFloat->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetProfileSettingDefaultFloat, &GetProfileSettingDefaultFloat_Params, nullptr);
	uFnGetProfileSettingDefaultFloat->FunctionFlags |= 0x400;
	uFnGetProfileSettingDefaultFloat->iNative = 20694;

	memcpy_s(&DefaultFloat, sizeof(DefaultFloat), &GetProfileSettingDefaultFloat_Params.DefaultFloat, sizeof(GetProfileSettingDefaultFloat_Params.DefaultFloat));

	return GetProfileSettingDefaultFloat_Params.ReturnValue;
};

// Function Engine.OnlineProfileSettings.GetProfileSettingDefaultInt
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20696])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        ProfileSettingId               (CPF_Parm)
// int32_t                        DefaultInt                     (CPF_Parm | CPF_OutParm)

bool UOnlineProfileSettings::GetProfileSettingDefaultInt(int32_t ProfileSettingId, int32_t& DefaultInt)
{
	static UFunction* uFnGetProfileSettingDefaultInt = nullptr;

	if (!uFnGetProfileSettingDefaultInt)
	{
		uFnGetProfileSettingDefaultInt = UFunction::FindFunction("Function Engine.OnlineProfileSettings.GetProfileSettingDefaultInt");
	}

	UOnlineProfileSettings_execGetProfileSettingDefaultInt_Params GetProfileSettingDefaultInt_Params;
	memset(&GetProfileSettingDefaultInt_Params, 0, sizeof(GetProfileSettingDefaultInt_Params));
	memcpy_s(&GetProfileSettingDefaultInt_Params.ProfileSettingId, sizeof(GetProfileSettingDefaultInt_Params.ProfileSettingId), &ProfileSettingId, sizeof(ProfileSettingId));
	memcpy_s(&GetProfileSettingDefaultInt_Params.DefaultInt, sizeof(GetProfileSettingDefaultInt_Params.DefaultInt), &DefaultInt, sizeof(DefaultInt));

	uFnGetProfileSettingDefaultInt->iNative = 0;
	uFnGetProfileSettingDefaultInt->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetProfileSettingDefaultInt, &GetProfileSettingDefaultInt_Params, nullptr);
	uFnGetProfileSettingDefaultInt->FunctionFlags |= 0x400;
	uFnGetProfileSettingDefaultInt->iNative = 20696;

	memcpy_s(&DefaultInt, sizeof(DefaultInt), &GetProfileSettingDefaultInt_Params.DefaultInt, sizeof(GetProfileSettingDefaultInt_Params.DefaultInt));

	return GetProfileSettingDefaultInt_Params.ReturnValue;
};

// Function Engine.OnlineProfileSettings.GetProfileSettingDefaultId
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20695])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        ProfileSettingId               (CPF_Parm)
// int32_t                        DefaultId                      (CPF_Parm | CPF_OutParm)
// int32_t                        ListIndex                      (CPF_Parm | CPF_OutParm)

bool UOnlineProfileSettings::GetProfileSettingDefaultId(int32_t ProfileSettingId, int32_t& DefaultId, int32_t& ListIndex)
{
	static UFunction* uFnGetProfileSettingDefaultId = nullptr;

	if (!uFnGetProfileSettingDefaultId)
	{
		uFnGetProfileSettingDefaultId = UFunction::FindFunction("Function Engine.OnlineProfileSettings.GetProfileSettingDefaultId");
	}

	UOnlineProfileSettings_execGetProfileSettingDefaultId_Params GetProfileSettingDefaultId_Params;
	memset(&GetProfileSettingDefaultId_Params, 0, sizeof(GetProfileSettingDefaultId_Params));
	memcpy_s(&GetProfileSettingDefaultId_Params.ProfileSettingId, sizeof(GetProfileSettingDefaultId_Params.ProfileSettingId), &ProfileSettingId, sizeof(ProfileSettingId));
	memcpy_s(&GetProfileSettingDefaultId_Params.DefaultId, sizeof(GetProfileSettingDefaultId_Params.DefaultId), &DefaultId, sizeof(DefaultId));
	memcpy_s(&GetProfileSettingDefaultId_Params.ListIndex, sizeof(GetProfileSettingDefaultId_Params.ListIndex), &ListIndex, sizeof(ListIndex));

	uFnGetProfileSettingDefaultId->iNative = 0;
	uFnGetProfileSettingDefaultId->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetProfileSettingDefaultId, &GetProfileSettingDefaultId_Params, nullptr);
	uFnGetProfileSettingDefaultId->FunctionFlags |= 0x400;
	uFnGetProfileSettingDefaultId->iNative = 20695;

	memcpy_s(&DefaultId, sizeof(DefaultId), &GetProfileSettingDefaultId_Params.DefaultId, sizeof(GetProfileSettingDefaultId_Params.DefaultId));
	memcpy_s(&ListIndex, sizeof(ListIndex), &GetProfileSettingDefaultId_Params.ListIndex, sizeof(GetProfileSettingDefaultId_Params.ListIndex));

	return GetProfileSettingDefaultId_Params.ReturnValue;
};

// Function Engine.ArkProfileSettings.SetToDefaults
// [0x00020C00] (FUNC_Native | FUNC_Event | FUNC_Public | FUNC_AllFlags) (iNative[13747])
// Parameter Info:

void UArkProfileSettings::eventSetToDefaults()
{
	static UFunction* uFnSetToDefaults = nullptr;

	if (!uFnSetToDefaults)
	{
		uFnSetToDefaults = UFunction::FindFunction("Function Engine.ArkProfileSettings.SetToDefaults");
	}

	UArkProfileSettings_eventSetToDefaults_Params SetToDefaults_Params;
	memset(&SetToDefaults_Params, 0, sizeof(SetToDefaults_Params));

	uFnSetToDefaults->iNative = 0;
	uFnSetToDefaults->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetToDefaults, &SetToDefaults_Params, nullptr);
	uFnSetToDefaults->FunctionFlags |= 0x400;
	uFnSetToDefaults->iNative = 13747;
};

// Function Engine.OnlineStats.GetViewName
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20812])
// Parameter Info:
// class FName                    ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        ViewId                         (CPF_Parm)

class FName UOnlineStats::GetViewName(int32_t ViewId)
{
	static UFunction* uFnGetViewName = nullptr;

	if (!uFnGetViewName)
	{
		uFnGetViewName = UFunction::FindFunction("Function Engine.OnlineStats.GetViewName");
	}

	UOnlineStats_execGetViewName_Params GetViewName_Params;
	memset(&GetViewName_Params, 0, sizeof(GetViewName_Params));
	memcpy_s(&GetViewName_Params.ViewId, sizeof(GetViewName_Params.ViewId), &ViewId, sizeof(ViewId));

	uFnGetViewName->iNative = 0;
	uFnGetViewName->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetViewName, &GetViewName_Params, nullptr);
	uFnGetViewName->FunctionFlags |= 0x400;
	uFnGetViewName->iNative = 20812;

	return GetViewName_Params.ReturnValue;
};

// Function Engine.OnlineStats.GetViewId
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20811])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    ViewName                       (CPF_Parm)
// int32_t                        ViewId                         (CPF_Parm | CPF_OutParm)

bool UOnlineStats::GetViewId(const class FName& ViewName, int32_t& ViewId)
{
	static UFunction* uFnGetViewId = nullptr;

	if (!uFnGetViewId)
	{
		uFnGetViewId = UFunction::FindFunction("Function Engine.OnlineStats.GetViewId");
	}

	UOnlineStats_execGetViewId_Params GetViewId_Params;
	memset(&GetViewId_Params, 0, sizeof(GetViewId_Params));
	memcpy_s(&GetViewId_Params.ViewName, sizeof(GetViewId_Params.ViewName), &ViewName, sizeof(ViewName));
	memcpy_s(&GetViewId_Params.ViewId, sizeof(GetViewId_Params.ViewId), &ViewId, sizeof(ViewId));

	uFnGetViewId->iNative = 0;
	uFnGetViewId->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetViewId, &GetViewId_Params, nullptr);
	uFnGetViewId->FunctionFlags |= 0x400;
	uFnGetViewId->iNative = 20811;

	memcpy_s(&ViewId, sizeof(ViewId), &GetViewId_Params.ViewId, sizeof(GetViewId_Params.ViewId));

	return GetViewId_Params.ReturnValue;
};

// Function Engine.OnlineStatsRead.GetRankForPlayer
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20730])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FUniqueNetId            PlayerID                       (CPF_Parm)

int32_t UOnlineStatsRead::GetRankForPlayer(const struct FUniqueNetId& PlayerID)
{
	static UFunction* uFnGetRankForPlayer = nullptr;

	if (!uFnGetRankForPlayer)
	{
		uFnGetRankForPlayer = UFunction::FindFunction("Function Engine.OnlineStatsRead.GetRankForPlayer");
	}

	UOnlineStatsRead_execGetRankForPlayer_Params GetRankForPlayer_Params;
	memset(&GetRankForPlayer_Params, 0, sizeof(GetRankForPlayer_Params));
	memcpy_s(&GetRankForPlayer_Params.PlayerID, sizeof(GetRankForPlayer_Params.PlayerID), &PlayerID, sizeof(PlayerID));

	uFnGetRankForPlayer->iNative = 0;
	uFnGetRankForPlayer->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetRankForPlayer, &GetRankForPlayer_Params, nullptr);
	uFnGetRankForPlayer->FunctionFlags |= 0x400;
	uFnGetRankForPlayer->iNative = 20730;

	return GetRankForPlayer_Params.ReturnValue;
};

// Function Engine.OnlineStatsRead.AddPlayer
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[15340])
// Parameter Info:
// class FString                  playerName                     (CPF_Parm | CPF_NeedCtorLink)
// struct FUniqueNetId            PlayerID                       (CPF_Parm)

void UOnlineStatsRead::AddPlayer(const class FString& playerName, const struct FUniqueNetId& PlayerID)
{
	static UFunction* uFnAddPlayer = nullptr;

	if (!uFnAddPlayer)
	{
		uFnAddPlayer = UFunction::FindFunction("Function Engine.OnlineStatsRead.AddPlayer");
	}

	UOnlineStatsRead_execAddPlayer_Params AddPlayer_Params;
	memset(&AddPlayer_Params, 0, sizeof(AddPlayer_Params));
	memcpy_s(&AddPlayer_Params.playerName, sizeof(AddPlayer_Params.playerName), &playerName, sizeof(playerName));
	memcpy_s(&AddPlayer_Params.PlayerID, sizeof(AddPlayer_Params.PlayerID), &PlayerID, sizeof(PlayerID));

	uFnAddPlayer->iNative = 0;
	uFnAddPlayer->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnAddPlayer, &AddPlayer_Params, nullptr);
	uFnAddPlayer->FunctionFlags |= 0x400;
	uFnAddPlayer->iNative = 15340;
};

// Function Engine.OnlineStatsRead.SetFloatStatValueForPlayer
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25658])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FUniqueNetId            PlayerID                       (CPF_Parm)
// int32_t                        StatColumnNo                   (CPF_Parm)
// float                          StatValue                      (CPF_Parm)

bool UOnlineStatsRead::SetFloatStatValueForPlayer(const struct FUniqueNetId& PlayerID, int32_t StatColumnNo, float StatValue)
{
	static UFunction* uFnSetFloatStatValueForPlayer = nullptr;

	if (!uFnSetFloatStatValueForPlayer)
	{
		uFnSetFloatStatValueForPlayer = UFunction::FindFunction("Function Engine.OnlineStatsRead.SetFloatStatValueForPlayer");
	}

	UOnlineStatsRead_execSetFloatStatValueForPlayer_Params SetFloatStatValueForPlayer_Params;
	memset(&SetFloatStatValueForPlayer_Params, 0, sizeof(SetFloatStatValueForPlayer_Params));
	memcpy_s(&SetFloatStatValueForPlayer_Params.PlayerID, sizeof(SetFloatStatValueForPlayer_Params.PlayerID), &PlayerID, sizeof(PlayerID));
	memcpy_s(&SetFloatStatValueForPlayer_Params.StatColumnNo, sizeof(SetFloatStatValueForPlayer_Params.StatColumnNo), &StatColumnNo, sizeof(StatColumnNo));
	memcpy_s(&SetFloatStatValueForPlayer_Params.StatValue, sizeof(SetFloatStatValueForPlayer_Params.StatValue), &StatValue, sizeof(StatValue));

	uFnSetFloatStatValueForPlayer->iNative = 0;
	uFnSetFloatStatValueForPlayer->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetFloatStatValueForPlayer, &SetFloatStatValueForPlayer_Params, nullptr);
	uFnSetFloatStatValueForPlayer->FunctionFlags |= 0x400;
	uFnSetFloatStatValueForPlayer->iNative = 25658;

	return SetFloatStatValueForPlayer_Params.ReturnValue;
};

// Function Engine.OnlineStatsRead.GetFloatStatValueForPlayer
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20581])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FUniqueNetId            PlayerID                       (CPF_Parm)
// int32_t                        StatColumnNo                   (CPF_Parm)
// float                          StatValue                      (CPF_Parm | CPF_OutParm)

bool UOnlineStatsRead::GetFloatStatValueForPlayer(const struct FUniqueNetId& PlayerID, int32_t StatColumnNo, float& StatValue)
{
	static UFunction* uFnGetFloatStatValueForPlayer = nullptr;

	if (!uFnGetFloatStatValueForPlayer)
	{
		uFnGetFloatStatValueForPlayer = UFunction::FindFunction("Function Engine.OnlineStatsRead.GetFloatStatValueForPlayer");
	}

	UOnlineStatsRead_execGetFloatStatValueForPlayer_Params GetFloatStatValueForPlayer_Params;
	memset(&GetFloatStatValueForPlayer_Params, 0, sizeof(GetFloatStatValueForPlayer_Params));
	memcpy_s(&GetFloatStatValueForPlayer_Params.PlayerID, sizeof(GetFloatStatValueForPlayer_Params.PlayerID), &PlayerID, sizeof(PlayerID));
	memcpy_s(&GetFloatStatValueForPlayer_Params.StatColumnNo, sizeof(GetFloatStatValueForPlayer_Params.StatColumnNo), &StatColumnNo, sizeof(StatColumnNo));
	memcpy_s(&GetFloatStatValueForPlayer_Params.StatValue, sizeof(GetFloatStatValueForPlayer_Params.StatValue), &StatValue, sizeof(StatValue));

	uFnGetFloatStatValueForPlayer->iNative = 0;
	uFnGetFloatStatValueForPlayer->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetFloatStatValueForPlayer, &GetFloatStatValueForPlayer_Params, nullptr);
	uFnGetFloatStatValueForPlayer->FunctionFlags |= 0x400;
	uFnGetFloatStatValueForPlayer->iNative = 20581;

	memcpy_s(&StatValue, sizeof(StatValue), &GetFloatStatValueForPlayer_Params.StatValue, sizeof(GetFloatStatValueForPlayer_Params.StatValue));

	return GetFloatStatValueForPlayer_Params.ReturnValue;
};

// Function Engine.OnlineStatsRead.SetIntStatValueForPlayer
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25684])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FUniqueNetId            PlayerID                       (CPF_Parm)
// int32_t                        StatColumnNo                   (CPF_Parm)
// int32_t                        StatValue                      (CPF_Parm)

bool UOnlineStatsRead::SetIntStatValueForPlayer(const struct FUniqueNetId& PlayerID, int32_t StatColumnNo, int32_t StatValue)
{
	static UFunction* uFnSetIntStatValueForPlayer = nullptr;

	if (!uFnSetIntStatValueForPlayer)
	{
		uFnSetIntStatValueForPlayer = UFunction::FindFunction("Function Engine.OnlineStatsRead.SetIntStatValueForPlayer");
	}

	UOnlineStatsRead_execSetIntStatValueForPlayer_Params SetIntStatValueForPlayer_Params;
	memset(&SetIntStatValueForPlayer_Params, 0, sizeof(SetIntStatValueForPlayer_Params));
	memcpy_s(&SetIntStatValueForPlayer_Params.PlayerID, sizeof(SetIntStatValueForPlayer_Params.PlayerID), &PlayerID, sizeof(PlayerID));
	memcpy_s(&SetIntStatValueForPlayer_Params.StatColumnNo, sizeof(SetIntStatValueForPlayer_Params.StatColumnNo), &StatColumnNo, sizeof(StatColumnNo));
	memcpy_s(&SetIntStatValueForPlayer_Params.StatValue, sizeof(SetIntStatValueForPlayer_Params.StatValue), &StatValue, sizeof(StatValue));

	uFnSetIntStatValueForPlayer->iNative = 0;
	uFnSetIntStatValueForPlayer->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetIntStatValueForPlayer, &SetIntStatValueForPlayer_Params, nullptr);
	uFnSetIntStatValueForPlayer->FunctionFlags |= 0x400;
	uFnSetIntStatValueForPlayer->iNative = 25684;

	return SetIntStatValueForPlayer_Params.ReturnValue;
};

// Function Engine.OnlineStatsRead.GetIntStatValueForPlayer
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20611])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FUniqueNetId            PlayerID                       (CPF_Parm)
// int32_t                        StatColumnNo                   (CPF_Parm)
// int32_t                        StatValue                      (CPF_Parm | CPF_OutParm)

bool UOnlineStatsRead::GetIntStatValueForPlayer(const struct FUniqueNetId& PlayerID, int32_t StatColumnNo, int32_t& StatValue)
{
	static UFunction* uFnGetIntStatValueForPlayer = nullptr;

	if (!uFnGetIntStatValueForPlayer)
	{
		uFnGetIntStatValueForPlayer = UFunction::FindFunction("Function Engine.OnlineStatsRead.GetIntStatValueForPlayer");
	}

	UOnlineStatsRead_execGetIntStatValueForPlayer_Params GetIntStatValueForPlayer_Params;
	memset(&GetIntStatValueForPlayer_Params, 0, sizeof(GetIntStatValueForPlayer_Params));
	memcpy_s(&GetIntStatValueForPlayer_Params.PlayerID, sizeof(GetIntStatValueForPlayer_Params.PlayerID), &PlayerID, sizeof(PlayerID));
	memcpy_s(&GetIntStatValueForPlayer_Params.StatColumnNo, sizeof(GetIntStatValueForPlayer_Params.StatColumnNo), &StatColumnNo, sizeof(StatColumnNo));
	memcpy_s(&GetIntStatValueForPlayer_Params.StatValue, sizeof(GetIntStatValueForPlayer_Params.StatValue), &StatValue, sizeof(StatValue));

	uFnGetIntStatValueForPlayer->iNative = 0;
	uFnGetIntStatValueForPlayer->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetIntStatValueForPlayer, &GetIntStatValueForPlayer_Params, nullptr);
	uFnGetIntStatValueForPlayer->FunctionFlags |= 0x400;
	uFnGetIntStatValueForPlayer->iNative = 20611;

	memcpy_s(&StatValue, sizeof(StatValue), &GetIntStatValueForPlayer_Params.StatValue, sizeof(GetIntStatValueForPlayer_Params.StatValue));

	return GetIntStatValueForPlayer_Params.ReturnValue;
};

// Function Engine.OnlineStatsRead.OnReadComplete
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOnlineStatsRead::eventOnReadComplete()
{
	static UFunction* uFnOnReadComplete = nullptr;

	if (!uFnOnReadComplete)
	{
		uFnOnReadComplete = UFunction::FindFunction("Function Engine.OnlineStatsRead.OnReadComplete");
	}

	UOnlineStatsRead_eventOnReadComplete_Params OnReadComplete_Params;
	memset(&OnReadComplete_Params, 0, sizeof(OnReadComplete_Params));

	this->ProcessEvent(uFnOnReadComplete, &OnReadComplete_Params, nullptr);
};

// Function Engine.OnlineStatsWrite.DecrementIntStat
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[18666])
// Parameter Info:
// int32_t                        StatId                         (CPF_Parm)
// int32_t                        DecBy                          (CPF_OptionalParm | CPF_Parm)

void UOnlineStatsWrite::DecrementIntStat(int32_t StatId, int32_t DecBy)
{
	static UFunction* uFnDecrementIntStat = nullptr;

	if (!uFnDecrementIntStat)
	{
		uFnDecrementIntStat = UFunction::FindFunction("Function Engine.OnlineStatsWrite.DecrementIntStat");
	}

	UOnlineStatsWrite_execDecrementIntStat_Params DecrementIntStat_Params;
	memset(&DecrementIntStat_Params, 0, sizeof(DecrementIntStat_Params));
	memcpy_s(&DecrementIntStat_Params.StatId, sizeof(DecrementIntStat_Params.StatId), &StatId, sizeof(StatId));
	memcpy_s(&DecrementIntStat_Params.DecBy, sizeof(DecrementIntStat_Params.DecBy), &DecBy, sizeof(DecBy));

	uFnDecrementIntStat->iNative = 0;
	uFnDecrementIntStat->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnDecrementIntStat, &DecrementIntStat_Params, nullptr);
	uFnDecrementIntStat->FunctionFlags |= 0x400;
	uFnDecrementIntStat->iNative = 18666;
};

// Function Engine.OnlineStatsWrite.DecrementFloatStat
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[18665])
// Parameter Info:
// int32_t                        StatId                         (CPF_Parm)
// float                          DecBy                          (CPF_OptionalParm | CPF_Parm)

void UOnlineStatsWrite::DecrementFloatStat(int32_t StatId, float DecBy)
{
	static UFunction* uFnDecrementFloatStat = nullptr;

	if (!uFnDecrementFloatStat)
	{
		uFnDecrementFloatStat = UFunction::FindFunction("Function Engine.OnlineStatsWrite.DecrementFloatStat");
	}

	UOnlineStatsWrite_execDecrementFloatStat_Params DecrementFloatStat_Params;
	memset(&DecrementFloatStat_Params, 0, sizeof(DecrementFloatStat_Params));
	memcpy_s(&DecrementFloatStat_Params.StatId, sizeof(DecrementFloatStat_Params.StatId), &StatId, sizeof(StatId));
	memcpy_s(&DecrementFloatStat_Params.DecBy, sizeof(DecrementFloatStat_Params.DecBy), &DecBy, sizeof(DecBy));

	uFnDecrementFloatStat->iNative = 0;
	uFnDecrementFloatStat->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnDecrementFloatStat, &DecrementFloatStat_Params, nullptr);
	uFnDecrementFloatStat->FunctionFlags |= 0x400;
	uFnDecrementFloatStat->iNative = 18665;
};

// Function Engine.OnlineStatsWrite.IncrementIntStat
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[21073])
// Parameter Info:
// int32_t                        StatId                         (CPF_Parm)
// int32_t                        IncBy                          (CPF_OptionalParm | CPF_Parm)

void UOnlineStatsWrite::IncrementIntStat(int32_t StatId, int32_t IncBy)
{
	static UFunction* uFnIncrementIntStat = nullptr;

	if (!uFnIncrementIntStat)
	{
		uFnIncrementIntStat = UFunction::FindFunction("Function Engine.OnlineStatsWrite.IncrementIntStat");
	}

	UOnlineStatsWrite_execIncrementIntStat_Params IncrementIntStat_Params;
	memset(&IncrementIntStat_Params, 0, sizeof(IncrementIntStat_Params));
	memcpy_s(&IncrementIntStat_Params.StatId, sizeof(IncrementIntStat_Params.StatId), &StatId, sizeof(StatId));
	memcpy_s(&IncrementIntStat_Params.IncBy, sizeof(IncrementIntStat_Params.IncBy), &IncBy, sizeof(IncBy));

	uFnIncrementIntStat->iNative = 0;
	uFnIncrementIntStat->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnIncrementIntStat, &IncrementIntStat_Params, nullptr);
	uFnIncrementIntStat->FunctionFlags |= 0x400;
	uFnIncrementIntStat->iNative = 21073;
};

// Function Engine.OnlineStatsWrite.IncrementFloatStat
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[21072])
// Parameter Info:
// int32_t                        StatId                         (CPF_Parm)
// float                          IncBy                          (CPF_OptionalParm | CPF_Parm)

void UOnlineStatsWrite::IncrementFloatStat(int32_t StatId, float IncBy)
{
	static UFunction* uFnIncrementFloatStat = nullptr;

	if (!uFnIncrementFloatStat)
	{
		uFnIncrementFloatStat = UFunction::FindFunction("Function Engine.OnlineStatsWrite.IncrementFloatStat");
	}

	UOnlineStatsWrite_execIncrementFloatStat_Params IncrementFloatStat_Params;
	memset(&IncrementFloatStat_Params, 0, sizeof(IncrementFloatStat_Params));
	memcpy_s(&IncrementFloatStat_Params.StatId, sizeof(IncrementFloatStat_Params.StatId), &StatId, sizeof(StatId));
	memcpy_s(&IncrementFloatStat_Params.IncBy, sizeof(IncrementFloatStat_Params.IncBy), &IncBy, sizeof(IncBy));

	uFnIncrementFloatStat->iNative = 0;
	uFnIncrementFloatStat->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnIncrementFloatStat, &IncrementFloatStat_Params, nullptr);
	uFnIncrementFloatStat->FunctionFlags |= 0x400;
	uFnIncrementFloatStat->iNative = 21072;
};

// Function Engine.OnlineStatsWrite.SetIntStat
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25683])
// Parameter Info:
// int32_t                        StatId                         (CPF_Parm)
// int32_t                        Value                          (CPF_Parm)

void UOnlineStatsWrite::SetIntStat(int32_t StatId, int32_t Value)
{
	static UFunction* uFnSetIntStat = nullptr;

	if (!uFnSetIntStat)
	{
		uFnSetIntStat = UFunction::FindFunction("Function Engine.OnlineStatsWrite.SetIntStat");
	}

	UOnlineStatsWrite_execSetIntStat_Params SetIntStat_Params;
	memset(&SetIntStat_Params, 0, sizeof(SetIntStat_Params));
	memcpy_s(&SetIntStat_Params.StatId, sizeof(SetIntStat_Params.StatId), &StatId, sizeof(StatId));
	memcpy_s(&SetIntStat_Params.Value, sizeof(SetIntStat_Params.Value), &Value, sizeof(Value));

	uFnSetIntStat->iNative = 0;
	uFnSetIntStat->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetIntStat, &SetIntStat_Params, nullptr);
	uFnSetIntStat->FunctionFlags |= 0x400;
	uFnSetIntStat->iNative = 25683;
};

// Function Engine.OnlineStatsWrite.SetFloatStat
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25657])
// Parameter Info:
// int32_t                        StatId                         (CPF_Parm)
// float                          Value                          (CPF_Parm)

void UOnlineStatsWrite::SetFloatStat(int32_t StatId, float Value)
{
	static UFunction* uFnSetFloatStat = nullptr;

	if (!uFnSetFloatStat)
	{
		uFnSetFloatStat = UFunction::FindFunction("Function Engine.OnlineStatsWrite.SetFloatStat");
	}

	UOnlineStatsWrite_execSetFloatStat_Params SetFloatStat_Params;
	memset(&SetFloatStat_Params, 0, sizeof(SetFloatStat_Params));
	memcpy_s(&SetFloatStat_Params.StatId, sizeof(SetFloatStat_Params.StatId), &StatId, sizeof(StatId));
	memcpy_s(&SetFloatStat_Params.Value, sizeof(SetFloatStat_Params.Value), &Value, sizeof(Value));

	uFnSetFloatStat->iNative = 0;
	uFnSetFloatStat->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetFloatStat, &SetFloatStat_Params, nullptr);
	uFnSetFloatStat->FunctionFlags |= 0x400;
	uFnSetFloatStat->iNative = 25657;
};

// Function Engine.OnlineStatsWrite.GetStatName
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20762])
// Parameter Info:
// class FName                    ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        StatId                         (CPF_Parm)

class FName UOnlineStatsWrite::GetStatName(int32_t StatId)
{
	static UFunction* uFnGetStatName = nullptr;

	if (!uFnGetStatName)
	{
		uFnGetStatName = UFunction::FindFunction("Function Engine.OnlineStatsWrite.GetStatName");
	}

	UOnlineStatsWrite_execGetStatName_Params GetStatName_Params;
	memset(&GetStatName_Params, 0, sizeof(GetStatName_Params));
	memcpy_s(&GetStatName_Params.StatId, sizeof(GetStatName_Params.StatId), &StatId, sizeof(StatId));

	uFnGetStatName->iNative = 0;
	uFnGetStatName->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetStatName, &GetStatName_Params, nullptr);
	uFnGetStatName->FunctionFlags |= 0x400;
	uFnGetStatName->iNative = 20762;

	return GetStatName_Params.ReturnValue;
};

// Function Engine.OnlineStatsWrite.GetStatId
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20761])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    StatName                       (CPF_Parm)
// int32_t                        StatId                         (CPF_Parm | CPF_OutParm)

bool UOnlineStatsWrite::GetStatId(const class FName& StatName, int32_t& StatId)
{
	static UFunction* uFnGetStatId = nullptr;

	if (!uFnGetStatId)
	{
		uFnGetStatId = UFunction::FindFunction("Function Engine.OnlineStatsWrite.GetStatId");
	}

	UOnlineStatsWrite_execGetStatId_Params GetStatId_Params;
	memset(&GetStatId_Params, 0, sizeof(GetStatId_Params));
	memcpy_s(&GetStatId_Params.StatName, sizeof(GetStatId_Params.StatName), &StatName, sizeof(StatName));
	memcpy_s(&GetStatId_Params.StatId, sizeof(GetStatId_Params.StatId), &StatId, sizeof(StatId));

	uFnGetStatId->iNative = 0;
	uFnGetStatId->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetStatId, &GetStatId_Params, nullptr);
	uFnGetStatId->FunctionFlags |= 0x400;
	uFnGetStatId->iNative = 20761;

	memcpy_s(&StatId, sizeof(StatId), &GetStatId_Params.StatId, sizeof(GetStatId_Params.StatId));

	return GetStatId_Params.ReturnValue;
};

// Function Engine.OnlineStatsWrite.OnStatsWriteComplete
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:

void UOnlineStatsWrite::OnStatsWriteComplete()
{
	static UFunction* uFnOnStatsWriteComplete = nullptr;

	if (!uFnOnStatsWriteComplete)
	{
		uFnOnStatsWriteComplete = UFunction::FindFunction("Function Engine.OnlineStatsWrite.OnStatsWriteComplete");
	}

	UOnlineStatsWrite_execOnStatsWriteComplete_Params OnStatsWriteComplete_Params;
	memset(&OnStatsWriteComplete_Params, 0, sizeof(OnStatsWriteComplete_Params));

	this->ProcessEvent(uFnOnStatsWriteComplete, &OnStatsWriteComplete_Params, nullptr);
};

// Function Engine.OnlineSubsystem.SetDebugSpewLevel
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        DebugSpewLevel                 (CPF_Parm)

void UOnlineSubsystem::SetDebugSpewLevel(int32_t DebugSpewLevel)
{
	static UFunction* uFnSetDebugSpewLevel = nullptr;

	if (!uFnSetDebugSpewLevel)
	{
		uFnSetDebugSpewLevel = UFunction::FindFunction("Function Engine.OnlineSubsystem.SetDebugSpewLevel");
	}

	UOnlineSubsystem_execSetDebugSpewLevel_Params SetDebugSpewLevel_Params;
	memset(&SetDebugSpewLevel_Params, 0, sizeof(SetDebugSpewLevel_Params));
	memcpy_s(&SetDebugSpewLevel_Params.DebugSpewLevel, sizeof(SetDebugSpewLevel_Params.DebugSpewLevel), &DebugSpewLevel, sizeof(DebugSpewLevel));

	this->ProcessEvent(uFnSetDebugSpewLevel, &SetDebugSpewLevel_Params, nullptr);
};

// Function Engine.OnlineSubsystem.DumpVoiceRegistration
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOnlineSubsystem::DumpVoiceRegistration()
{
	static UFunction* uFnDumpVoiceRegistration = nullptr;

	if (!uFnDumpVoiceRegistration)
	{
		uFnDumpVoiceRegistration = UFunction::FindFunction("Function Engine.OnlineSubsystem.DumpVoiceRegistration");
	}

	UOnlineSubsystem_execDumpVoiceRegistration_Params DumpVoiceRegistration_Params;
	memset(&DumpVoiceRegistration_Params, 0, sizeof(DumpVoiceRegistration_Params));

	this->ProcessEvent(uFnDumpVoiceRegistration, &DumpVoiceRegistration_Params, nullptr);
};

// Function Engine.OnlineSubsystem.GetNumSupportedLogins
// [0x00022401] (FUNC_Final | FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags) (iNative[20658])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t UOnlineSubsystem::GetNumSupportedLogins()
{
	static UFunction* uFnGetNumSupportedLogins = nullptr;

	if (!uFnGetNumSupportedLogins)
	{
		uFnGetNumSupportedLogins = UFunction::FindFunction("Function Engine.OnlineSubsystem.GetNumSupportedLogins");
	}

	UOnlineSubsystem_execGetNumSupportedLogins_Params GetNumSupportedLogins_Params;
	memset(&GetNumSupportedLogins_Params, 0, sizeof(GetNumSupportedLogins_Params));

	uFnGetNumSupportedLogins->iNative = 0;
	uFnGetNumSupportedLogins->FunctionFlags &= ~0x400;
	UOnlineSubsystem::StaticClass()->ProcessEvent(uFnGetNumSupportedLogins, &GetNumSupportedLogins_Params, nullptr);
	uFnGetNumSupportedLogins->FunctionFlags |= 0x400;
	uFnGetNumSupportedLogins->iNative = 20658;

	return GetNumSupportedLogins_Params.ReturnValue;
};

// Function Engine.OnlineSubsystem.GetBuildUniqueId
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20522])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t UOnlineSubsystem::GetBuildUniqueId()
{
	static UFunction* uFnGetBuildUniqueId = nullptr;

	if (!uFnGetBuildUniqueId)
	{
		uFnGetBuildUniqueId = UFunction::FindFunction("Function Engine.OnlineSubsystem.GetBuildUniqueId");
	}

	UOnlineSubsystem_execGetBuildUniqueId_Params GetBuildUniqueId_Params;
	memset(&GetBuildUniqueId_Params, 0, sizeof(GetBuildUniqueId_Params));

	uFnGetBuildUniqueId->iNative = 0;
	uFnGetBuildUniqueId->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetBuildUniqueId, &GetBuildUniqueId_Params, nullptr);
	uFnGetBuildUniqueId->FunctionFlags |= 0x400;
	uFnGetBuildUniqueId->iNative = 20522;

	return GetBuildUniqueId_Params.ReturnValue;
};

// Function Engine.OnlineSubsystem.GetPlayerUniqueNetIdFromIndex
// [0x00820802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// struct FUniqueNetId            ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        UserIndex                      (CPF_Parm)

struct FUniqueNetId UOnlineSubsystem::eventGetPlayerUniqueNetIdFromIndex(int32_t UserIndex)
{
	static UFunction* uFnGetPlayerUniqueNetIdFromIndex = nullptr;

	if (!uFnGetPlayerUniqueNetIdFromIndex)
	{
		uFnGetPlayerUniqueNetIdFromIndex = UFunction::FindFunction("Function Engine.OnlineSubsystem.GetPlayerUniqueNetIdFromIndex");
	}

	UOnlineSubsystem_eventGetPlayerUniqueNetIdFromIndex_Params GetPlayerUniqueNetIdFromIndex_Params;
	memset(&GetPlayerUniqueNetIdFromIndex_Params, 0, sizeof(GetPlayerUniqueNetIdFromIndex_Params));
	memcpy_s(&GetPlayerUniqueNetIdFromIndex_Params.UserIndex, sizeof(GetPlayerUniqueNetIdFromIndex_Params.UserIndex), &UserIndex, sizeof(UserIndex));

	this->ProcessEvent(uFnGetPlayerUniqueNetIdFromIndex, &GetPlayerUniqueNetIdFromIndex_Params, nullptr);

	return GetPlayerUniqueNetIdFromIndex_Params.ReturnValue;
};

// Function Engine.OnlineSubsystem.StringToUniqueNetId
// [0x00422401] (FUNC_Final | FUNC_Native | FUNC_Static | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[26358])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FString                  UniqueNetIdString              (CPF_Parm | CPF_NeedCtorLink)
// struct FUniqueNetId            out_UniqueId                   (CPF_Parm | CPF_OutParm)

bool UOnlineSubsystem::StringToUniqueNetId(const class FString& UniqueNetIdString, struct FUniqueNetId& out_UniqueId)
{
	static UFunction* uFnStringToUniqueNetId = nullptr;

	if (!uFnStringToUniqueNetId)
	{
		uFnStringToUniqueNetId = UFunction::FindFunction("Function Engine.OnlineSubsystem.StringToUniqueNetId");
	}

	UOnlineSubsystem_execStringToUniqueNetId_Params StringToUniqueNetId_Params;
	memset(&StringToUniqueNetId_Params, 0, sizeof(StringToUniqueNetId_Params));
	memcpy_s(&StringToUniqueNetId_Params.UniqueNetIdString, sizeof(StringToUniqueNetId_Params.UniqueNetIdString), &UniqueNetIdString, sizeof(UniqueNetIdString));
	memcpy_s(&StringToUniqueNetId_Params.out_UniqueId, sizeof(StringToUniqueNetId_Params.out_UniqueId), &out_UniqueId, sizeof(out_UniqueId));

	uFnStringToUniqueNetId->iNative = 0;
	uFnStringToUniqueNetId->FunctionFlags &= ~0x400;
	UOnlineSubsystem::StaticClass()->ProcessEvent(uFnStringToUniqueNetId, &StringToUniqueNetId_Params, nullptr);
	uFnStringToUniqueNetId->FunctionFlags |= 0x400;
	uFnStringToUniqueNetId->iNative = 26358;

	memcpy_s(&out_UniqueId, sizeof(out_UniqueId), &StringToUniqueNetId_Params.out_UniqueId, sizeof(StringToUniqueNetId_Params.out_UniqueId));

	return StringToUniqueNetId_Params.ReturnValue;
};

// Function Engine.OnlineSubsystem.UniqueNetIdToString
// [0x00422401] (FUNC_Final | FUNC_Native | FUNC_Static | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[26941])
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)
// struct FUniqueNetId            IdToConvert                    (CPF_Const | CPF_Parm | CPF_OutParm)

class FString UOnlineSubsystem::UniqueNetIdToString(struct FUniqueNetId& IdToConvert)
{
	static UFunction* uFnUniqueNetIdToString = nullptr;

	if (!uFnUniqueNetIdToString)
	{
		uFnUniqueNetIdToString = UFunction::FindFunction("Function Engine.OnlineSubsystem.UniqueNetIdToString");
	}

	UOnlineSubsystem_execUniqueNetIdToString_Params UniqueNetIdToString_Params;
	memset(&UniqueNetIdToString_Params, 0, sizeof(UniqueNetIdToString_Params));
	memcpy_s(&UniqueNetIdToString_Params.IdToConvert, sizeof(UniqueNetIdToString_Params.IdToConvert), &IdToConvert, sizeof(IdToConvert));

	uFnUniqueNetIdToString->iNative = 0;
	uFnUniqueNetIdToString->FunctionFlags &= ~0x400;
	UOnlineSubsystem::StaticClass()->ProcessEvent(uFnUniqueNetIdToString, &UniqueNetIdToString_Params, nullptr);
	uFnUniqueNetIdToString->FunctionFlags |= 0x400;
	uFnUniqueNetIdToString->iNative = 26941;

	memcpy_s(&IdToConvert, sizeof(IdToConvert), &UniqueNetIdToString_Params.IdToConvert, sizeof(UniqueNetIdToString_Params.IdToConvert));

	return UniqueNetIdToString_Params.ReturnValue;
};

// Function Engine.OnlineSubsystem.GetNamedInterface
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UObject*                 ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    InterfaceName                  (CPF_Parm)

class UObject* UOnlineSubsystem::eventGetNamedInterface(const class FName& InterfaceName)
{
	static UFunction* uFnGetNamedInterface = nullptr;

	if (!uFnGetNamedInterface)
	{
		uFnGetNamedInterface = UFunction::FindFunction("Function Engine.OnlineSubsystem.GetNamedInterface");
	}

	UOnlineSubsystem_eventGetNamedInterface_Params GetNamedInterface_Params;
	memset(&GetNamedInterface_Params, 0, sizeof(GetNamedInterface_Params));
	memcpy_s(&GetNamedInterface_Params.InterfaceName, sizeof(GetNamedInterface_Params.InterfaceName), &InterfaceName, sizeof(InterfaceName));

	this->ProcessEvent(uFnGetNamedInterface, &GetNamedInterface_Params, nullptr);

	return GetNamedInterface_Params.ReturnValue;
};

// Function Engine.OnlineSubsystem.SetNamedInterface
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FName                    InterfaceName                  (CPF_Parm)
// class UObject*                 NewInterface                   (CPF_Parm)

void UOnlineSubsystem::eventSetNamedInterface(const class FName& InterfaceName, class UObject* NewInterface)
{
	static UFunction* uFnSetNamedInterface = nullptr;

	if (!uFnSetNamedInterface)
	{
		uFnSetNamedInterface = UFunction::FindFunction("Function Engine.OnlineSubsystem.SetNamedInterface");
	}

	UOnlineSubsystem_eventSetNamedInterface_Params SetNamedInterface_Params;
	memset(&SetNamedInterface_Params, 0, sizeof(SetNamedInterface_Params));
	memcpy_s(&SetNamedInterface_Params.InterfaceName, sizeof(SetNamedInterface_Params.InterfaceName), &InterfaceName, sizeof(InterfaceName));
	SetNamedInterface_Params.NewInterface = NewInterface;

	this->ProcessEvent(uFnSetNamedInterface, &SetNamedInterface_Params, nullptr);
};

// Function Engine.OnlineSubsystem.SetTitleFileInterface
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UObject*                 NewInterface                   (CPF_Parm)

bool UOnlineSubsystem::eventSetTitleFileInterface(class UObject* NewInterface)
{
	static UFunction* uFnSetTitleFileInterface = nullptr;

	if (!uFnSetTitleFileInterface)
	{
		uFnSetTitleFileInterface = UFunction::FindFunction("Function Engine.OnlineSubsystem.SetTitleFileInterface");
	}

	UOnlineSubsystem_eventSetTitleFileInterface_Params SetTitleFileInterface_Params;
	memset(&SetTitleFileInterface_Params, 0, sizeof(SetTitleFileInterface_Params));
	SetTitleFileInterface_Params.NewInterface = NewInterface;

	this->ProcessEvent(uFnSetTitleFileInterface, &SetTitleFileInterface_Params, nullptr);

	return SetTitleFileInterface_Params.ReturnValue;
};

// Function Engine.OnlineSubsystem.SetStatsInterface
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UObject*                 NewInterface                   (CPF_Parm)

bool UOnlineSubsystem::eventSetStatsInterface(class UObject* NewInterface)
{
	static UFunction* uFnSetStatsInterface = nullptr;

	if (!uFnSetStatsInterface)
	{
		uFnSetStatsInterface = UFunction::FindFunction("Function Engine.OnlineSubsystem.SetStatsInterface");
	}

	UOnlineSubsystem_eventSetStatsInterface_Params SetStatsInterface_Params;
	memset(&SetStatsInterface_Params, 0, sizeof(SetStatsInterface_Params));
	SetStatsInterface_Params.NewInterface = NewInterface;

	this->ProcessEvent(uFnSetStatsInterface, &SetStatsInterface_Params, nullptr);

	return SetStatsInterface_Params.ReturnValue;
};

// Function Engine.OnlineSubsystem.SetContentInterface
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UObject*                 NewInterface                   (CPF_Parm)

bool UOnlineSubsystem::eventSetContentInterface(class UObject* NewInterface)
{
	static UFunction* uFnSetContentInterface = nullptr;

	if (!uFnSetContentInterface)
	{
		uFnSetContentInterface = UFunction::FindFunction("Function Engine.OnlineSubsystem.SetContentInterface");
	}

	UOnlineSubsystem_eventSetContentInterface_Params SetContentInterface_Params;
	memset(&SetContentInterface_Params, 0, sizeof(SetContentInterface_Params));
	SetContentInterface_Params.NewInterface = NewInterface;

	this->ProcessEvent(uFnSetContentInterface, &SetContentInterface_Params, nullptr);

	return SetContentInterface_Params.ReturnValue;
};

// Function Engine.OnlineSubsystem.SetSystemInterface
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UObject*                 NewInterface                   (CPF_Parm)

bool UOnlineSubsystem::eventSetSystemInterface(class UObject* NewInterface)
{
	static UFunction* uFnSetSystemInterface = nullptr;

	if (!uFnSetSystemInterface)
	{
		uFnSetSystemInterface = UFunction::FindFunction("Function Engine.OnlineSubsystem.SetSystemInterface");
	}

	UOnlineSubsystem_eventSetSystemInterface_Params SetSystemInterface_Params;
	memset(&SetSystemInterface_Params, 0, sizeof(SetSystemInterface_Params));
	SetSystemInterface_Params.NewInterface = NewInterface;

	this->ProcessEvent(uFnSetSystemInterface, &SetSystemInterface_Params, nullptr);

	return SetSystemInterface_Params.ReturnValue;
};

// Function Engine.OnlineSubsystem.SetPlayerInterfaceEx
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UObject*                 NewInterface                   (CPF_Parm)

bool UOnlineSubsystem::eventSetPlayerInterfaceEx(class UObject* NewInterface)
{
	static UFunction* uFnSetPlayerInterfaceEx = nullptr;

	if (!uFnSetPlayerInterfaceEx)
	{
		uFnSetPlayerInterfaceEx = UFunction::FindFunction("Function Engine.OnlineSubsystem.SetPlayerInterfaceEx");
	}

	UOnlineSubsystem_eventSetPlayerInterfaceEx_Params SetPlayerInterfaceEx_Params;
	memset(&SetPlayerInterfaceEx_Params, 0, sizeof(SetPlayerInterfaceEx_Params));
	SetPlayerInterfaceEx_Params.NewInterface = NewInterface;

	this->ProcessEvent(uFnSetPlayerInterfaceEx, &SetPlayerInterfaceEx_Params, nullptr);

	return SetPlayerInterfaceEx_Params.ReturnValue;
};

// Function Engine.OnlineSubsystem.SetPlayerInterface
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UObject*                 NewInterface                   (CPF_Parm)

bool UOnlineSubsystem::eventSetPlayerInterface(class UObject* NewInterface)
{
	static UFunction* uFnSetPlayerInterface = nullptr;

	if (!uFnSetPlayerInterface)
	{
		uFnSetPlayerInterface = UFunction::FindFunction("Function Engine.OnlineSubsystem.SetPlayerInterface");
	}

	UOnlineSubsystem_eventSetPlayerInterface_Params SetPlayerInterface_Params;
	memset(&SetPlayerInterface_Params, 0, sizeof(SetPlayerInterface_Params));
	SetPlayerInterface_Params.NewInterface = NewInterface;

	this->ProcessEvent(uFnSetPlayerInterface, &SetPlayerInterface_Params, nullptr);

	return SetPlayerInterface_Params.ReturnValue;
};

// Function Engine.OnlineSubsystem.SetAccountInterface
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UObject*                 NewInterface                   (CPF_Parm)

bool UOnlineSubsystem::eventSetAccountInterface(class UObject* NewInterface)
{
	static UFunction* uFnSetAccountInterface = nullptr;

	if (!uFnSetAccountInterface)
	{
		uFnSetAccountInterface = UFunction::FindFunction("Function Engine.OnlineSubsystem.SetAccountInterface");
	}

	UOnlineSubsystem_eventSetAccountInterface_Params SetAccountInterface_Params;
	memset(&SetAccountInterface_Params, 0, sizeof(SetAccountInterface_Params));
	SetAccountInterface_Params.NewInterface = NewInterface;

	this->ProcessEvent(uFnSetAccountInterface, &SetAccountInterface_Params, nullptr);

	return SetAccountInterface_Params.ReturnValue;
};

// Function Engine.OnlineSubsystem.Exit
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOnlineSubsystem::eventExit()
{
	static UFunction* uFnExit = nullptr;

	if (!uFnExit)
	{
		uFnExit = UFunction::FindFunction("Function Engine.OnlineSubsystem.Exit");
	}

	UOnlineSubsystem_eventExit_Params Exit_Params;
	memset(&Exit_Params, 0, sizeof(Exit_Params));

	this->ProcessEvent(uFnExit, &Exit_Params, nullptr);
};

// Function Engine.OnlineSubsystem.PostInit
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UOnlineSubsystem::eventPostInit()
{
	static UFunction* uFnPostInit = nullptr;

	if (!uFnPostInit)
	{
		uFnPostInit = UFunction::FindFunction("Function Engine.OnlineSubsystem.PostInit");
	}

	UOnlineSubsystem_eventPostInit_Params PostInit_Params;
	memset(&PostInit_Params, 0, sizeof(PostInit_Params));

	this->ProcessEvent(uFnPostInit, &PostInit_Params, nullptr);

	return PostInit_Params.ReturnValue;
};

// Function Engine.OnlineSubsystem.Init
// [0x00020C00] (FUNC_Native | FUNC_Event | FUNC_Public | FUNC_AllFlags) (iNative[762])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UOnlineSubsystem::eventInit()
{
	static UFunction* uFnInit = nullptr;

	if (!uFnInit)
	{
		uFnInit = UFunction::FindFunction("Function Engine.OnlineSubsystem.Init");
	}

	UOnlineSubsystem_eventInit_Params Init_Params;
	memset(&Init_Params, 0, sizeof(Init_Params));

	uFnInit->iNative = 0;
	uFnInit->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnInit, &Init_Params, nullptr);
	uFnInit->FunctionFlags |= 0x400;
	uFnInit->iNative = 762;

	return Init_Params.ReturnValue;
};

// Function Engine.Player.SwitchController
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[26422])
// Parameter Info:
// class APlayerController*       PC                             (CPF_Parm)

void UPlayer::SwitchController(class APlayerController* PC)
{
	static UFunction* uFnSwitchController = nullptr;

	if (!uFnSwitchController)
	{
		uFnSwitchController = UFunction::FindFunction("Function Engine.Player.SwitchController");
	}

	UPlayer_execSwitchController_Params SwitchController_Params;
	memset(&SwitchController_Params, 0, sizeof(SwitchController_Params));
	SwitchController_Params.PC = PC;

	uFnSwitchController->iNative = 0;
	uFnSwitchController->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSwitchController, &SwitchController_Params, nullptr);
	uFnSwitchController->FunctionFlags |= 0x400;
	uFnSwitchController->iNative = 26422;
};

// Function Engine.LocalPlayer.Cleanup
// [0x00024002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bExit                          (CPF_OptionalParm | CPF_Parm)

void ULocalPlayer::Cleanup(bool bExit)
{
	static UFunction* uFnCleanup = nullptr;

	if (!uFnCleanup)
	{
		uFnCleanup = UFunction::FindFunction("Function Engine.LocalPlayer.Cleanup");
	}

	ULocalPlayer_execCleanup_Params Cleanup_Params;
	memset(&Cleanup_Params, 0, sizeof(Cleanup_Params));
	Cleanup_Params.bExit = bExit;

	this->ProcessEvent(uFnCleanup, &Cleanup_Params, nullptr);
};

// Function Engine.LocalPlayer.Exit
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void ULocalPlayer::eventExit()
{
	static UFunction* uFnExit = nullptr;

	if (!uFnExit)
	{
		uFnExit = UFunction::FindFunction("Function Engine.LocalPlayer.Exit");
	}

	ULocalPlayer_eventExit_Params Exit_Params;
	memset(&Exit_Params, 0, sizeof(Exit_Params));

	this->ProcessEvent(uFnExit, &Exit_Params, nullptr);
};

// Function Engine.LocalPlayer.NotifyServerConnectionClose
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void ULocalPlayer::eventNotifyServerConnectionClose()
{
	static UFunction* uFnNotifyServerConnectionClose = nullptr;

	if (!uFnNotifyServerConnectionClose)
	{
		uFnNotifyServerConnectionClose = UFunction::FindFunction("Function Engine.LocalPlayer.NotifyServerConnectionClose");
	}

	ULocalPlayer_eventNotifyServerConnectionClose_Params NotifyServerConnectionClose_Params;
	memset(&NotifyServerConnectionClose_Params, 0, sizeof(NotifyServerConnectionClose_Params));

	this->ProcessEvent(uFnNotifyServerConnectionClose, &NotifyServerConnectionClose_Params, nullptr);
};

// Function Engine.LocalPlayer.ViewportClosed
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void ULocalPlayer::eventViewportClosed()
{
	static UFunction* uFnViewportClosed = nullptr;

	if (!uFnViewportClosed)
	{
		uFnViewportClosed = UFunction::FindFunction("Function Engine.LocalPlayer.ViewportClosed");
	}

	ULocalPlayer_eventViewportClosed_Params ViewportClosed_Params;
	memset(&ViewportClosed_Params, 0, sizeof(ViewportClosed_Params));

	this->ProcessEvent(uFnViewportClosed, &ViewportClosed_Params, nullptr);
};

// Function Engine.LocalPlayer.StaticOnServerConnectionClose
// [0x00022003] (FUNC_Final | FUNC_Defined | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UPlayer*                 ServerConnection               (CPF_Parm)

void ULocalPlayer::StaticOnServerConnectionClose(class UPlayer* ServerConnection)
{
	static UFunction* uFnStaticOnServerConnectionClose = nullptr;

	if (!uFnStaticOnServerConnectionClose)
	{
		uFnStaticOnServerConnectionClose = UFunction::FindFunction("Function Engine.LocalPlayer.StaticOnServerConnectionClose");
	}

	ULocalPlayer_execStaticOnServerConnectionClose_Params StaticOnServerConnectionClose_Params;
	memset(&StaticOnServerConnectionClose_Params, 0, sizeof(StaticOnServerConnectionClose_Params));
	StaticOnServerConnectionClose_Params.ServerConnection = ServerConnection;

	ULocalPlayer::StaticClass()->ProcessEvent(uFnStaticOnServerConnectionClose, &StaticOnServerConnectionClose_Params, nullptr);
};

// Function Engine.LocalPlayer.OnServerConnectionClose
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UPlayer*                 ServerConnection               (CPF_Parm)

void ULocalPlayer::OnServerConnectionClose(class UPlayer* ServerConnection)
{
	static UFunction* uFnOnServerConnectionClose = nullptr;

	if (!uFnOnServerConnectionClose)
	{
		uFnOnServerConnectionClose = UFunction::FindFunction("Function Engine.LocalPlayer.OnServerConnectionClose");
	}

	ULocalPlayer_execOnServerConnectionClose_Params OnServerConnectionClose_Params;
	memset(&OnServerConnectionClose_Params, 0, sizeof(OnServerConnectionClose_Params));
	OnServerConnectionClose_Params.ServerConnection = ServerConnection;

	this->ProcessEvent(uFnOnServerConnectionClose, &OnServerConnectionClose_Params, nullptr);
};

// Function Engine.LocalPlayer.ServerAuthFailure
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void ULocalPlayer::ServerAuthFailure()
{
	static UFunction* uFnServerAuthFailure = nullptr;

	if (!uFnServerAuthFailure)
	{
		uFnServerAuthFailure = UFunction::FindFunction("Function Engine.LocalPlayer.ServerAuthFailure");
	}

	ULocalPlayer_execServerAuthFailure_Params ServerAuthFailure_Params;
	memset(&ServerAuthFailure_Params, 0, sizeof(ServerAuthFailure_Params));

	this->ProcessEvent(uFnServerAuthFailure, &ServerAuthFailure_Params, nullptr);
};

// Function Engine.LocalPlayer.ServerAuthTimedOut
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void ULocalPlayer::eventServerAuthTimedOut()
{
	static UFunction* uFnServerAuthTimedOut = nullptr;

	if (!uFnServerAuthTimedOut)
	{
		uFnServerAuthTimedOut = UFunction::FindFunction("Function Engine.LocalPlayer.ServerAuthTimedOut");
	}

	ULocalPlayer_eventServerAuthTimedOut_Params ServerAuthTimedOut_Params;
	memset(&ServerAuthTimedOut_Params, 0, sizeof(ServerAuthTimedOut_Params));

	this->ProcessEvent(uFnServerAuthTimedOut, &ServerAuthTimedOut_Params, nullptr);
};

// Function Engine.LocalPlayer.OnServerAuthComplete
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bSuccess                       (CPF_Parm)
// struct FUniqueNetId            ServerUID                      (CPF_Parm)
// class UPlayer*                 ServerConnection               (CPF_Parm)
// class FString                  ExtraInfo                      (CPF_Parm | CPF_NeedCtorLink)

void ULocalPlayer::OnServerAuthComplete(bool bSuccess, const struct FUniqueNetId& ServerUID, class UPlayer* ServerConnection, const class FString& ExtraInfo)
{
	static UFunction* uFnOnServerAuthComplete = nullptr;

	if (!uFnOnServerAuthComplete)
	{
		uFnOnServerAuthComplete = UFunction::FindFunction("Function Engine.LocalPlayer.OnServerAuthComplete");
	}

	ULocalPlayer_execOnServerAuthComplete_Params OnServerAuthComplete_Params;
	memset(&OnServerAuthComplete_Params, 0, sizeof(OnServerAuthComplete_Params));
	OnServerAuthComplete_Params.bSuccess = bSuccess;
	memcpy_s(&OnServerAuthComplete_Params.ServerUID, sizeof(OnServerAuthComplete_Params.ServerUID), &ServerUID, sizeof(ServerUID));
	OnServerAuthComplete_Params.ServerConnection = ServerConnection;
	memcpy_s(&OnServerAuthComplete_Params.ExtraInfo, sizeof(OnServerAuthComplete_Params.ExtraInfo), &ExtraInfo, sizeof(ExtraInfo));

	this->ProcessEvent(uFnOnServerAuthComplete, &OnServerAuthComplete_Params, nullptr);
};

// Function Engine.LocalPlayer.ProcessServerAuthResponse
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FUniqueNetId            ServerUID                      (CPF_Parm)
// int32_t                        ServerIP                       (CPF_Parm)
// int32_t                        AuthTicketUID                  (CPF_Parm)

void ULocalPlayer::ProcessServerAuthResponse(const struct FUniqueNetId& ServerUID, int32_t ServerIP, int32_t AuthTicketUID)
{
	static UFunction* uFnProcessServerAuthResponse = nullptr;

	if (!uFnProcessServerAuthResponse)
	{
		uFnProcessServerAuthResponse = UFunction::FindFunction("Function Engine.LocalPlayer.ProcessServerAuthResponse");
	}

	ULocalPlayer_execProcessServerAuthResponse_Params ProcessServerAuthResponse_Params;
	memset(&ProcessServerAuthResponse_Params, 0, sizeof(ProcessServerAuthResponse_Params));
	memcpy_s(&ProcessServerAuthResponse_Params.ServerUID, sizeof(ProcessServerAuthResponse_Params.ServerUID), &ServerUID, sizeof(ServerUID));
	memcpy_s(&ProcessServerAuthResponse_Params.ServerIP, sizeof(ProcessServerAuthResponse_Params.ServerIP), &ServerIP, sizeof(ServerIP));
	memcpy_s(&ProcessServerAuthResponse_Params.AuthTicketUID, sizeof(ProcessServerAuthResponse_Params.AuthTicketUID), &AuthTicketUID, sizeof(AuthTicketUID));

	this->ProcessEvent(uFnProcessServerAuthResponse, &ProcessServerAuthResponse_Params, nullptr);
};

// Function Engine.LocalPlayer.ProcessClientAuthRequest
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FUniqueNetId            ServerUID                      (CPF_Parm)
// int32_t                        ServerIP                       (CPF_Parm)
// int32_t                        ServerPort                     (CPF_Parm)
// uint32_t                       bSecure                        (CPF_Parm)

void ULocalPlayer::ProcessClientAuthRequest(const struct FUniqueNetId& ServerUID, int32_t ServerIP, int32_t ServerPort, bool bSecure)
{
	static UFunction* uFnProcessClientAuthRequest = nullptr;

	if (!uFnProcessClientAuthRequest)
	{
		uFnProcessClientAuthRequest = UFunction::FindFunction("Function Engine.LocalPlayer.ProcessClientAuthRequest");
	}

	ULocalPlayer_execProcessClientAuthRequest_Params ProcessClientAuthRequest_Params;
	memset(&ProcessClientAuthRequest_Params, 0, sizeof(ProcessClientAuthRequest_Params));
	memcpy_s(&ProcessClientAuthRequest_Params.ServerUID, sizeof(ProcessClientAuthRequest_Params.ServerUID), &ServerUID, sizeof(ServerUID));
	memcpy_s(&ProcessClientAuthRequest_Params.ServerIP, sizeof(ProcessClientAuthRequest_Params.ServerIP), &ServerIP, sizeof(ServerIP));
	memcpy_s(&ProcessClientAuthRequest_Params.ServerPort, sizeof(ProcessClientAuthRequest_Params.ServerPort), &ServerPort, sizeof(ServerPort));
	ProcessClientAuthRequest_Params.bSecure = bSecure;

	this->ProcessEvent(uFnProcessClientAuthRequest, &ProcessClientAuthRequest_Params, nullptr);
};

// Function Engine.LocalPlayer.GetNickname
// [0x00020803] (FUNC_Final | FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)

class FString ULocalPlayer::eventGetNickname()
{
	static UFunction* uFnGetNickname = nullptr;

	if (!uFnGetNickname)
	{
		uFnGetNickname = UFunction::FindFunction("Function Engine.LocalPlayer.GetNickname");
	}

	ULocalPlayer_eventGetNickname_Params GetNickname_Params;
	memset(&GetNickname_Params, 0, sizeof(GetNickname_Params));

	this->ProcessEvent(uFnGetNickname, &GetNickname_Params, nullptr);

	return GetNickname_Params.ReturnValue;
};

// Function Engine.LocalPlayer.GetUniqueNetId
// [0x00820803] (FUNC_Final | FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// struct FUniqueNetId            ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

struct FUniqueNetId ULocalPlayer::eventGetUniqueNetId()
{
	static UFunction* uFnGetUniqueNetId = nullptr;

	if (!uFnGetUniqueNetId)
	{
		uFnGetUniqueNetId = UFunction::FindFunction("Function Engine.LocalPlayer.GetUniqueNetId");
	}

	ULocalPlayer_eventGetUniqueNetId_Params GetUniqueNetId_Params;
	memset(&GetUniqueNetId_Params, 0, sizeof(GetUniqueNetId_Params));

	this->ProcessEvent(uFnGetUniqueNetId, &GetUniqueNetId_Params, nullptr);

	return GetUniqueNetId_Params.ReturnValue;
};

// Function Engine.LocalPlayer.DeProject
// [0x00420401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[18892])
// Parameter Info:
// struct FVector2D               RelativeScreenPos              (CPF_Parm)
// struct FVector                 WorldOrigin                    (CPF_Parm | CPF_OutParm)
// struct FVector                 WorldDirection                 (CPF_Parm | CPF_OutParm)

void ULocalPlayer::DeProject(const struct FVector2D& RelativeScreenPos, struct FVector& WorldOrigin, struct FVector& WorldDirection)
{
	static UFunction* uFnDeProject = nullptr;

	if (!uFnDeProject)
	{
		uFnDeProject = UFunction::FindFunction("Function Engine.LocalPlayer.DeProject");
	}

	ULocalPlayer_execDeProject_Params DeProject_Params;
	memset(&DeProject_Params, 0, sizeof(DeProject_Params));
	memcpy_s(&DeProject_Params.RelativeScreenPos, sizeof(DeProject_Params.RelativeScreenPos), &RelativeScreenPos, sizeof(RelativeScreenPos));
	memcpy_s(&DeProject_Params.WorldOrigin, sizeof(DeProject_Params.WorldOrigin), &WorldOrigin, sizeof(WorldOrigin));
	memcpy_s(&DeProject_Params.WorldDirection, sizeof(DeProject_Params.WorldDirection), &WorldDirection, sizeof(WorldDirection));

	uFnDeProject->iNative = 0;
	uFnDeProject->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnDeProject, &DeProject_Params, nullptr);
	uFnDeProject->FunctionFlags |= 0x400;
	uFnDeProject->iNative = 18892;

	memcpy_s(&WorldOrigin, sizeof(WorldOrigin), &DeProject_Params.WorldOrigin, sizeof(DeProject_Params.WorldOrigin));
	memcpy_s(&WorldDirection, sizeof(WorldDirection), &DeProject_Params.WorldDirection, sizeof(DeProject_Params.WorldDirection));
};

// Function Engine.LocalPlayer.TouchPlayerPostProcessChain
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[26770])
// Parameter Info:

void ULocalPlayer::TouchPlayerPostProcessChain()
{
	static UFunction* uFnTouchPlayerPostProcessChain = nullptr;

	if (!uFnTouchPlayerPostProcessChain)
	{
		uFnTouchPlayerPostProcessChain = UFunction::FindFunction("Function Engine.LocalPlayer.TouchPlayerPostProcessChain");
	}

	ULocalPlayer_execTouchPlayerPostProcessChain_Params TouchPlayerPostProcessChain_Params;
	memset(&TouchPlayerPostProcessChain_Params, 0, sizeof(TouchPlayerPostProcessChain_Params));

	uFnTouchPlayerPostProcessChain->iNative = 0;
	uFnTouchPlayerPostProcessChain->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnTouchPlayerPostProcessChain, &TouchPlayerPostProcessChain_Params, nullptr);
	uFnTouchPlayerPostProcessChain->FunctionFlags |= 0x400;
	uFnTouchPlayerPostProcessChain->iNative = 26770;
};

// Function Engine.LocalPlayer.GetPostProcessChain
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20692])
// Parameter Info:
// class UPostProcessChain*       ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        InIndex                        (CPF_Parm)

class UPostProcessChain* ULocalPlayer::GetPostProcessChain(int32_t InIndex)
{
	static UFunction* uFnGetPostProcessChain = nullptr;

	if (!uFnGetPostProcessChain)
	{
		uFnGetPostProcessChain = UFunction::FindFunction("Function Engine.LocalPlayer.GetPostProcessChain");
	}

	ULocalPlayer_execGetPostProcessChain_Params GetPostProcessChain_Params;
	memset(&GetPostProcessChain_Params, 0, sizeof(GetPostProcessChain_Params));
	memcpy_s(&GetPostProcessChain_Params.InIndex, sizeof(GetPostProcessChain_Params.InIndex), &InIndex, sizeof(InIndex));

	uFnGetPostProcessChain->iNative = 0;
	uFnGetPostProcessChain->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetPostProcessChain, &GetPostProcessChain_Params, nullptr);
	uFnGetPostProcessChain->FunctionFlags |= 0x400;
	uFnGetPostProcessChain->iNative = 20692;

	return GetPostProcessChain_Params.ReturnValue;
};

// Function Engine.LocalPlayer.RemoveAllPostProcessingChains
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25062])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool ULocalPlayer::RemoveAllPostProcessingChains()
{
	static UFunction* uFnRemoveAllPostProcessingChains = nullptr;

	if (!uFnRemoveAllPostProcessingChains)
	{
		uFnRemoveAllPostProcessingChains = UFunction::FindFunction("Function Engine.LocalPlayer.RemoveAllPostProcessingChains");
	}

	ULocalPlayer_execRemoveAllPostProcessingChains_Params RemoveAllPostProcessingChains_Params;
	memset(&RemoveAllPostProcessingChains_Params, 0, sizeof(RemoveAllPostProcessingChains_Params));

	uFnRemoveAllPostProcessingChains->iNative = 0;
	uFnRemoveAllPostProcessingChains->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnRemoveAllPostProcessingChains, &RemoveAllPostProcessingChains_Params, nullptr);
	uFnRemoveAllPostProcessingChains->FunctionFlags |= 0x400;
	uFnRemoveAllPostProcessingChains->iNative = 25062;

	return RemoveAllPostProcessingChains_Params.ReturnValue;
};

// Function Engine.LocalPlayer.RemovePostProcessingChain
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25078])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        InIndex                        (CPF_Parm)

bool ULocalPlayer::RemovePostProcessingChain(int32_t InIndex)
{
	static UFunction* uFnRemovePostProcessingChain = nullptr;

	if (!uFnRemovePostProcessingChain)
	{
		uFnRemovePostProcessingChain = UFunction::FindFunction("Function Engine.LocalPlayer.RemovePostProcessingChain");
	}

	ULocalPlayer_execRemovePostProcessingChain_Params RemovePostProcessingChain_Params;
	memset(&RemovePostProcessingChain_Params, 0, sizeof(RemovePostProcessingChain_Params));
	memcpy_s(&RemovePostProcessingChain_Params.InIndex, sizeof(RemovePostProcessingChain_Params.InIndex), &InIndex, sizeof(InIndex));

	uFnRemovePostProcessingChain->iNative = 0;
	uFnRemovePostProcessingChain->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnRemovePostProcessingChain, &RemovePostProcessingChain_Params, nullptr);
	uFnRemovePostProcessingChain->FunctionFlags |= 0x400;
	uFnRemovePostProcessingChain->iNative = 25078;

	return RemovePostProcessingChain_Params.ReturnValue;
};

// Function Engine.LocalPlayer.InsertPostProcessingChain
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[21238])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UPostProcessChain*       InChain                        (CPF_Parm)
// int32_t                        InIndex                        (CPF_Parm)
// uint32_t                       bInClone                       (CPF_Parm)

bool ULocalPlayer::InsertPostProcessingChain(class UPostProcessChain* InChain, int32_t InIndex, bool bInClone)
{
	static UFunction* uFnInsertPostProcessingChain = nullptr;

	if (!uFnInsertPostProcessingChain)
	{
		uFnInsertPostProcessingChain = UFunction::FindFunction("Function Engine.LocalPlayer.InsertPostProcessingChain");
	}

	ULocalPlayer_execInsertPostProcessingChain_Params InsertPostProcessingChain_Params;
	memset(&InsertPostProcessingChain_Params, 0, sizeof(InsertPostProcessingChain_Params));
	InsertPostProcessingChain_Params.InChain = InChain;
	memcpy_s(&InsertPostProcessingChain_Params.InIndex, sizeof(InsertPostProcessingChain_Params.InIndex), &InIndex, sizeof(InIndex));
	InsertPostProcessingChain_Params.bInClone = bInClone;

	uFnInsertPostProcessingChain->iNative = 0;
	uFnInsertPostProcessingChain->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnInsertPostProcessingChain, &InsertPostProcessingChain_Params, nullptr);
	uFnInsertPostProcessingChain->FunctionFlags |= 0x400;
	uFnInsertPostProcessingChain->iNative = 21238;

	return InsertPostProcessingChain_Params.ReturnValue;
};

// Function Engine.LocalPlayer.GetTranslationContext
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20795])
// Parameter Info:
// class UTranslationContext*     ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class UTranslationContext* ULocalPlayer::GetTranslationContext()
{
	static UFunction* uFnGetTranslationContext = nullptr;

	if (!uFnGetTranslationContext)
	{
		uFnGetTranslationContext = UFunction::FindFunction("Function Engine.LocalPlayer.GetTranslationContext");
	}

	ULocalPlayer_execGetTranslationContext_Params GetTranslationContext_Params;
	memset(&GetTranslationContext_Params, 0, sizeof(GetTranslationContext_Params));

	uFnGetTranslationContext->iNative = 0;
	uFnGetTranslationContext->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetTranslationContext, &GetTranslationContext_Params, nullptr);
	uFnGetTranslationContext->FunctionFlags |= 0x400;
	uFnGetTranslationContext->iNative = 20795;

	return GetTranslationContext_Params.ReturnValue;
};

// Function Engine.LocalPlayer.SetControllerId
// [0x00020003] (FUNC_Final | FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        NewControllerId                (CPF_Parm)

void ULocalPlayer::SetControllerId(int32_t NewControllerId)
{
	static UFunction* uFnSetControllerId = nullptr;

	if (!uFnSetControllerId)
	{
		uFnSetControllerId = UFunction::FindFunction("Function Engine.LocalPlayer.SetControllerId");
	}

	ULocalPlayer_execSetControllerId_Params SetControllerId_Params;
	memset(&SetControllerId_Params, 0, sizeof(SetControllerId_Params));
	memcpy_s(&SetControllerId_Params.NewControllerId, sizeof(SetControllerId_Params.NewControllerId), &NewControllerId, sizeof(NewControllerId));

	this->ProcessEvent(uFnSetControllerId, &SetControllerId_Params, nullptr);
};

// Function Engine.LocalPlayer.ClearPostProcessSettingsOverride
// [0x00024102] (FUNC_Defined | FUNC_Simulated | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          RecoveryTime                   (CPF_OptionalParm | CPF_Parm)

void ULocalPlayer::ClearPostProcessSettingsOverride(float RecoveryTime)
{
	static UFunction* uFnClearPostProcessSettingsOverride = nullptr;

	if (!uFnClearPostProcessSettingsOverride)
	{
		uFnClearPostProcessSettingsOverride = UFunction::FindFunction("Function Engine.LocalPlayer.ClearPostProcessSettingsOverride");
	}

	ULocalPlayer_execClearPostProcessSettingsOverride_Params ClearPostProcessSettingsOverride_Params;
	memset(&ClearPostProcessSettingsOverride_Params, 0, sizeof(ClearPostProcessSettingsOverride_Params));
	memcpy_s(&ClearPostProcessSettingsOverride_Params.RecoveryTime, sizeof(ClearPostProcessSettingsOverride_Params.RecoveryTime), &RecoveryTime, sizeof(RecoveryTime));

	this->ProcessEvent(uFnClearPostProcessSettingsOverride, &ClearPostProcessSettingsOverride_Params, nullptr);
};

// Function Engine.LocalPlayer.UpdateOverridePostProcessSettings
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FArkPpConfig            OverrideSettings               (CPF_Parm)

void ULocalPlayer::UpdateOverridePostProcessSettings(const struct FArkPpConfig& OverrideSettings)
{
	static UFunction* uFnUpdateOverridePostProcessSettings = nullptr;

	if (!uFnUpdateOverridePostProcessSettings)
	{
		uFnUpdateOverridePostProcessSettings = UFunction::FindFunction("Function Engine.LocalPlayer.UpdateOverridePostProcessSettings");
	}

	ULocalPlayer_execUpdateOverridePostProcessSettings_Params UpdateOverridePostProcessSettings_Params;
	memset(&UpdateOverridePostProcessSettings_Params, 0, sizeof(UpdateOverridePostProcessSettings_Params));
	memcpy_s(&UpdateOverridePostProcessSettings_Params.OverrideSettings, sizeof(UpdateOverridePostProcessSettings_Params.OverrideSettings), &OverrideSettings, sizeof(OverrideSettings));

	this->ProcessEvent(uFnUpdateOverridePostProcessSettings, &UpdateOverridePostProcessSettings_Params, nullptr);
};

// Function Engine.LocalPlayer.OverridePostProcessSettings
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FArkPpConfig            OverrideSettings               (CPF_Parm)
// float                          StartBlendTime                 (CPF_Parm)

void ULocalPlayer::OverridePostProcessSettings(const struct FArkPpConfig& OverrideSettings, float StartBlendTime)
{
	static UFunction* uFnOverridePostProcessSettings = nullptr;

	if (!uFnOverridePostProcessSettings)
	{
		uFnOverridePostProcessSettings = UFunction::FindFunction("Function Engine.LocalPlayer.OverridePostProcessSettings");
	}

	ULocalPlayer_execOverridePostProcessSettings_Params OverridePostProcessSettings_Params;
	memset(&OverridePostProcessSettings_Params, 0, sizeof(OverridePostProcessSettings_Params));
	memcpy_s(&OverridePostProcessSettings_Params.OverrideSettings, sizeof(OverridePostProcessSettings_Params.OverrideSettings), &OverrideSettings, sizeof(OverrideSettings));
	memcpy_s(&OverridePostProcessSettings_Params.StartBlendTime, sizeof(OverridePostProcessSettings_Params.StartBlendTime), &StartBlendTime, sizeof(StartBlendTime));

	this->ProcessEvent(uFnOverridePostProcessSettings, &OverridePostProcessSettings_Params, nullptr);
};

// Function Engine.LocalPlayer.ZeroOverridePPDeltaSettings
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[27357])
// Parameter Info:

void ULocalPlayer::ZeroOverridePPDeltaSettings()
{
	static UFunction* uFnZeroOverridePPDeltaSettings = nullptr;

	if (!uFnZeroOverridePPDeltaSettings)
	{
		uFnZeroOverridePPDeltaSettings = UFunction::FindFunction("Function Engine.LocalPlayer.ZeroOverridePPDeltaSettings");
	}

	ULocalPlayer_execZeroOverridePPDeltaSettings_Params ZeroOverridePPDeltaSettings_Params;
	memset(&ZeroOverridePPDeltaSettings_Params, 0, sizeof(ZeroOverridePPDeltaSettings_Params));

	uFnZeroOverridePPDeltaSettings->iNative = 0;
	uFnZeroOverridePPDeltaSettings->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnZeroOverridePPDeltaSettings, &ZeroOverridePPDeltaSettings_Params, nullptr);
	uFnZeroOverridePPDeltaSettings->FunctionFlags |= 0x400;
	uFnZeroOverridePPDeltaSettings->iNative = 27357;
};

// Function Engine.LocalPlayer.GetActorVisibility
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20482])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class AActor*                  TestActor                      (CPF_Parm)

bool ULocalPlayer::GetActorVisibility(class AActor* TestActor)
{
	static UFunction* uFnGetActorVisibility = nullptr;

	if (!uFnGetActorVisibility)
	{
		uFnGetActorVisibility = UFunction::FindFunction("Function Engine.LocalPlayer.GetActorVisibility");
	}

	ULocalPlayer_execGetActorVisibility_Params GetActorVisibility_Params;
	memset(&GetActorVisibility_Params, 0, sizeof(GetActorVisibility_Params));
	GetActorVisibility_Params.TestActor = TestActor;

	uFnGetActorVisibility->iNative = 0;
	uFnGetActorVisibility->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetActorVisibility, &GetActorVisibility_Params, nullptr);
	uFnGetActorVisibility->FunctionFlags |= 0x400;
	uFnGetActorVisibility->iNative = 20482;

	return GetActorVisibility_Params.ReturnValue;
};

// Function Engine.LocalPlayer.SpawnPlayActor
// [0x00420401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[26112])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FString                  URL                            (CPF_Parm | CPF_NeedCtorLink)
// class FString                  OutError                       (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

bool ULocalPlayer::SpawnPlayActor(const class FString& URL, class FString& OutError)
{
	static UFunction* uFnSpawnPlayActor = nullptr;

	if (!uFnSpawnPlayActor)
	{
		uFnSpawnPlayActor = UFunction::FindFunction("Function Engine.LocalPlayer.SpawnPlayActor");
	}

	ULocalPlayer_execSpawnPlayActor_Params SpawnPlayActor_Params;
	memset(&SpawnPlayActor_Params, 0, sizeof(SpawnPlayActor_Params));
	memcpy_s(&SpawnPlayActor_Params.URL, sizeof(SpawnPlayActor_Params.URL), &URL, sizeof(URL));
	memcpy_s(&SpawnPlayActor_Params.OutError, sizeof(SpawnPlayActor_Params.OutError), &OutError, sizeof(OutError));

	uFnSpawnPlayActor->iNative = 0;
	uFnSpawnPlayActor->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSpawnPlayActor, &SpawnPlayActor_Params, nullptr);
	uFnSpawnPlayActor->FunctionFlags |= 0x400;
	uFnSpawnPlayActor->iNative = 26112;

	memcpy_s(&OutError, sizeof(OutError), &SpawnPlayActor_Params.OutError, sizeof(SpawnPlayActor_Params.OutError));

	return SpawnPlayActor_Params.ReturnValue;
};

// Function Engine.SavedMove.GetDebugString
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)

class FString USavedMove::GetDebugString()
{
	static UFunction* uFnGetDebugString = nullptr;

	if (!uFnGetDebugString)
	{
		uFnGetDebugString = UFunction::FindFunction("Function Engine.SavedMove.GetDebugString");
	}

	USavedMove_execGetDebugString_Params GetDebugString_Params;
	memset(&GetDebugString_Params, 0, sizeof(GetDebugString_Params));

	this->ProcessEvent(uFnGetDebugString, &GetDebugString_Params, nullptr);

	return GetDebugString_Params.ReturnValue;
};

// Function Engine.SavedMove.SetFlags
// [0x00022002] (FUNC_Defined | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EDoubleClickDir                ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint8_t                        Flags                          (CPF_Parm)
// class APlayerController*       PC                             (CPF_Parm)

EDoubleClickDir USavedMove::SetFlags(uint8_t Flags, class APlayerController* PC)
{
	static UFunction* uFnSetFlags = nullptr;

	if (!uFnSetFlags)
	{
		uFnSetFlags = UFunction::FindFunction("Function Engine.SavedMove.SetFlags");
	}

	USavedMove_execSetFlags_Params SetFlags_Params;
	memset(&SetFlags_Params, 0, sizeof(SetFlags_Params));
	memcpy_s(&SetFlags_Params.Flags, sizeof(SetFlags_Params.Flags), &Flags, sizeof(Flags));
	SetFlags_Params.PC = PC;

	USavedMove::StaticClass()->ProcessEvent(uFnSetFlags, &SetFlags_Params, nullptr);

	return static_cast<EDoubleClickDir>(SetFlags_Params.ReturnValue);
};

// Function Engine.SavedMove.CompressedFlags
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint8_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

uint8_t USavedMove::CompressedFlags()
{
	static UFunction* uFnCompressedFlags = nullptr;

	if (!uFnCompressedFlags)
	{
		uFnCompressedFlags = UFunction::FindFunction("Function Engine.SavedMove.CompressedFlags");
	}

	USavedMove_execCompressedFlags_Params CompressedFlags_Params;
	memset(&CompressedFlags_Params, 0, sizeof(CompressedFlags_Params));

	this->ProcessEvent(uFnCompressedFlags, &CompressedFlags_Params, nullptr);

	return CompressedFlags_Params.ReturnValue;
};

// Function Engine.SavedMove.ResetMoveFor
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class APawn*                   P                              (CPF_Parm)

void USavedMove::ResetMoveFor(class APawn* P)
{
	static UFunction* uFnResetMoveFor = nullptr;

	if (!uFnResetMoveFor)
	{
		uFnResetMoveFor = UFunction::FindFunction("Function Engine.SavedMove.ResetMoveFor");
	}

	USavedMove_execResetMoveFor_Params ResetMoveFor_Params;
	memset(&ResetMoveFor_Params, 0, sizeof(ResetMoveFor_Params));
	ResetMoveFor_Params.P = P;

	this->ProcessEvent(uFnResetMoveFor, &ResetMoveFor_Params, nullptr);
};

// Function Engine.SavedMove.PrepMoveFor
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class APawn*                   P                              (CPF_Parm)

void USavedMove::PrepMoveFor(class APawn* P)
{
	static UFunction* uFnPrepMoveFor = nullptr;

	if (!uFnPrepMoveFor)
	{
		uFnPrepMoveFor = UFunction::FindFunction("Function Engine.SavedMove.PrepMoveFor");
	}

	USavedMove_execPrepMoveFor_Params PrepMoveFor_Params;
	memset(&PrepMoveFor_Params, 0, sizeof(PrepMoveFor_Params));
	PrepMoveFor_Params.P = P;

	this->ProcessEvent(uFnPrepMoveFor, &PrepMoveFor_Params, nullptr);
};

// Function Engine.SavedMove.SetMoveFor
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class APlayerController*       P                              (CPF_Parm)
// float                          DeltaTime                      (CPF_Parm)
// struct FVector                 newAccel                       (CPF_Parm)
// EDoubleClickDir                InDoubleClick                  (CPF_Parm)

void USavedMove::SetMoveFor(class APlayerController* P, float DeltaTime, const struct FVector& newAccel, EDoubleClickDir InDoubleClick)
{
	static UFunction* uFnSetMoveFor = nullptr;

	if (!uFnSetMoveFor)
	{
		uFnSetMoveFor = UFunction::FindFunction("Function Engine.SavedMove.SetMoveFor");
	}

	USavedMove_execSetMoveFor_Params SetMoveFor_Params;
	memset(&SetMoveFor_Params, 0, sizeof(SetMoveFor_Params));
	SetMoveFor_Params.P = P;
	memcpy_s(&SetMoveFor_Params.DeltaTime, sizeof(SetMoveFor_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));
	memcpy_s(&SetMoveFor_Params.newAccel, sizeof(SetMoveFor_Params.newAccel), &newAccel, sizeof(newAccel));
	memcpy_s(&SetMoveFor_Params.InDoubleClick, sizeof(SetMoveFor_Params.InDoubleClick), &InDoubleClick, sizeof(InDoubleClick));

	this->ProcessEvent(uFnSetMoveFor, &SetMoveFor_Params, nullptr);
};

// Function Engine.SavedMove.CanCombineWith
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class USavedMove*              NewMove                        (CPF_Parm)
// class APawn*                   inPawn                         (CPF_Parm)
// float                          MaxDelta                       (CPF_Parm)

bool USavedMove::CanCombineWith(class USavedMove* NewMove, class APawn* inPawn, float MaxDelta)
{
	static UFunction* uFnCanCombineWith = nullptr;

	if (!uFnCanCombineWith)
	{
		uFnCanCombineWith = UFunction::FindFunction("Function Engine.SavedMove.CanCombineWith");
	}

	USavedMove_execCanCombineWith_Params CanCombineWith_Params;
	memset(&CanCombineWith_Params, 0, sizeof(CanCombineWith_Params));
	CanCombineWith_Params.NewMove = NewMove;
	CanCombineWith_Params.inPawn = inPawn;
	memcpy_s(&CanCombineWith_Params.MaxDelta, sizeof(CanCombineWith_Params.MaxDelta), &MaxDelta, sizeof(MaxDelta));

	this->ProcessEvent(uFnCanCombineWith, &CanCombineWith_Params, nullptr);

	return CanCombineWith_Params.ReturnValue;
};

// Function Engine.SavedMove.SetInitialPosition
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class APawn*                   P                              (CPF_Parm)

void USavedMove::SetInitialPosition(class APawn* P)
{
	static UFunction* uFnSetInitialPosition = nullptr;

	if (!uFnSetInitialPosition)
	{
		uFnSetInitialPosition = UFunction::FindFunction("Function Engine.SavedMove.SetInitialPosition");
	}

	USavedMove_execSetInitialPosition_Params SetInitialPosition_Params;
	memset(&SetInitialPosition_Params, 0, sizeof(SetInitialPosition_Params));
	SetInitialPosition_Params.P = P;

	this->ProcessEvent(uFnSetInitialPosition, &SetInitialPosition_Params, nullptr);
};

// Function Engine.SavedMove.GetStartLocation
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FVector                 ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

struct FVector USavedMove::GetStartLocation()
{
	static UFunction* uFnGetStartLocation = nullptr;

	if (!uFnGetStartLocation)
	{
		uFnGetStartLocation = UFunction::FindFunction("Function Engine.SavedMove.GetStartLocation");
	}

	USavedMove_execGetStartLocation_Params GetStartLocation_Params;
	memset(&GetStartLocation_Params, 0, sizeof(GetStartLocation_Params));

	this->ProcessEvent(uFnGetStartLocation, &GetStartLocation_Params, nullptr);

	return GetStartLocation_Params.ReturnValue;
};

// Function Engine.SavedMove.IsImportantMove
// [0x00820002] (FUNC_Defined | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FVector                 CompareAccel                   (CPF_Parm)

bool USavedMove::IsImportantMove(const struct FVector& CompareAccel)
{
	static UFunction* uFnIsImportantMove = nullptr;

	if (!uFnIsImportantMove)
	{
		uFnIsImportantMove = UFunction::FindFunction("Function Engine.SavedMove.IsImportantMove");
	}

	USavedMove_execIsImportantMove_Params IsImportantMove_Params;
	memset(&IsImportantMove_Params, 0, sizeof(IsImportantMove_Params));
	memcpy_s(&IsImportantMove_Params.CompareAccel, sizeof(IsImportantMove_Params.CompareAccel), &CompareAccel, sizeof(CompareAccel));

	this->ProcessEvent(uFnIsImportantMove, &IsImportantMove_Params, nullptr);

	return IsImportantMove_Params.ReturnValue;
};

// Function Engine.SavedMove.PostUpdate
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class APlayerController*       P                              (CPF_Parm)

void USavedMove::PostUpdate(class APlayerController* P)
{
	static UFunction* uFnPostUpdate = nullptr;

	if (!uFnPostUpdate)
	{
		uFnPostUpdate = UFunction::FindFunction("Function Engine.SavedMove.PostUpdate");
	}

	USavedMove_execPostUpdate_Params PostUpdate_Params;
	memset(&PostUpdate_Params, 0, sizeof(PostUpdate_Params));
	PostUpdate_Params.P = P;

	this->ProcessEvent(uFnPostUpdate, &PostUpdate_Params, nullptr);
};

// Function Engine.SavedMove.Clear
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void USavedMove::Clear()
{
	static UFunction* uFnClear = nullptr;

	if (!uFnClear)
	{
		uFnClear = UFunction::FindFunction("Function Engine.SavedMove.Clear");
	}

	USavedMove_execClear_Params Clear_Params;
	memset(&Clear_Params, 0, sizeof(Clear_Params));

	this->ProcessEvent(uFnClear, &Clear_Params, nullptr);
};

// Function Engine.Settings.UpdateFromURL
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[26981])
// Parameter Info:
// class AGameInfo*               Game                           (CPF_Parm)
// class FString                  URL                            (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void USettings::UpdateFromURL(class AGameInfo* Game, class FString& URL)
{
	static UFunction* uFnUpdateFromURL = nullptr;

	if (!uFnUpdateFromURL)
	{
		uFnUpdateFromURL = UFunction::FindFunction("Function Engine.Settings.UpdateFromURL");
	}

	USettings_execUpdateFromURL_Params UpdateFromURL_Params;
	memset(&UpdateFromURL_Params, 0, sizeof(UpdateFromURL_Params));
	UpdateFromURL_Params.Game = Game;
	memcpy_s(&UpdateFromURL_Params.URL, sizeof(UpdateFromURL_Params.URL), &URL, sizeof(URL));

	uFnUpdateFromURL->iNative = 0;
	uFnUpdateFromURL->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnUpdateFromURL, &UpdateFromURL_Params, nullptr);
	uFnUpdateFromURL->FunctionFlags |= 0x400;
	uFnUpdateFromURL->iNative = 26981;

	memcpy_s(&URL, sizeof(URL), &UpdateFromURL_Params.URL, sizeof(UpdateFromURL_Params.URL));
};

// Function Engine.Settings.BuildURL
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[17640])
// Parameter Info:
// class FString                  URL                            (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void USettings::BuildURL(class FString& URL)
{
	static UFunction* uFnBuildURL = nullptr;

	if (!uFnBuildURL)
	{
		uFnBuildURL = UFunction::FindFunction("Function Engine.Settings.BuildURL");
	}

	USettings_execBuildURL_Params BuildURL_Params;
	memset(&BuildURL_Params, 0, sizeof(BuildURL_Params));
	memcpy_s(&BuildURL_Params.URL, sizeof(BuildURL_Params.URL), &URL, sizeof(URL));

	uFnBuildURL->iNative = 0;
	uFnBuildURL->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnBuildURL, &BuildURL_Params, nullptr);
	uFnBuildURL->FunctionFlags |= 0x400;
	uFnBuildURL->iNative = 17640;

	memcpy_s(&URL, sizeof(URL), &BuildURL_Params.URL, sizeof(BuildURL_Params.URL));
};

// Function Engine.Settings.AppendContextsToURL
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[15622])
// Parameter Info:
// class FString                  URL                            (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void USettings::AppendContextsToURL(class FString& URL)
{
	static UFunction* uFnAppendContextsToURL = nullptr;

	if (!uFnAppendContextsToURL)
	{
		uFnAppendContextsToURL = UFunction::FindFunction("Function Engine.Settings.AppendContextsToURL");
	}

	USettings_execAppendContextsToURL_Params AppendContextsToURL_Params;
	memset(&AppendContextsToURL_Params, 0, sizeof(AppendContextsToURL_Params));
	memcpy_s(&AppendContextsToURL_Params.URL, sizeof(AppendContextsToURL_Params.URL), &URL, sizeof(URL));

	uFnAppendContextsToURL->iNative = 0;
	uFnAppendContextsToURL->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnAppendContextsToURL, &AppendContextsToURL_Params, nullptr);
	uFnAppendContextsToURL->FunctionFlags |= 0x400;
	uFnAppendContextsToURL->iNative = 15622;

	memcpy_s(&URL, sizeof(URL), &AppendContextsToURL_Params.URL, sizeof(AppendContextsToURL_Params.URL));
};

// Function Engine.Settings.AppendPropertiesToURL
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[15625])
// Parameter Info:
// class FString                  URL                            (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void USettings::AppendPropertiesToURL(class FString& URL)
{
	static UFunction* uFnAppendPropertiesToURL = nullptr;

	if (!uFnAppendPropertiesToURL)
	{
		uFnAppendPropertiesToURL = UFunction::FindFunction("Function Engine.Settings.AppendPropertiesToURL");
	}

	USettings_execAppendPropertiesToURL_Params AppendPropertiesToURL_Params;
	memset(&AppendPropertiesToURL_Params, 0, sizeof(AppendPropertiesToURL_Params));
	memcpy_s(&AppendPropertiesToURL_Params.URL, sizeof(AppendPropertiesToURL_Params.URL), &URL, sizeof(URL));

	uFnAppendPropertiesToURL->iNative = 0;
	uFnAppendPropertiesToURL->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnAppendPropertiesToURL, &AppendPropertiesToURL_Params, nullptr);
	uFnAppendPropertiesToURL->FunctionFlags |= 0x400;
	uFnAppendPropertiesToURL->iNative = 15625;

	memcpy_s(&URL, sizeof(URL), &AppendPropertiesToURL_Params.URL, sizeof(AppendPropertiesToURL_Params.URL));
};

// Function Engine.Settings.AppendDataBindingsToURL
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[15623])
// Parameter Info:
// class FString                  URL                            (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void USettings::AppendDataBindingsToURL(class FString& URL)
{
	static UFunction* uFnAppendDataBindingsToURL = nullptr;

	if (!uFnAppendDataBindingsToURL)
	{
		uFnAppendDataBindingsToURL = UFunction::FindFunction("Function Engine.Settings.AppendDataBindingsToURL");
	}

	USettings_execAppendDataBindingsToURL_Params AppendDataBindingsToURL_Params;
	memset(&AppendDataBindingsToURL_Params, 0, sizeof(AppendDataBindingsToURL_Params));
	memcpy_s(&AppendDataBindingsToURL_Params.URL, sizeof(AppendDataBindingsToURL_Params.URL), &URL, sizeof(URL));

	uFnAppendDataBindingsToURL->iNative = 0;
	uFnAppendDataBindingsToURL->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnAppendDataBindingsToURL, &AppendDataBindingsToURL_Params, nullptr);
	uFnAppendDataBindingsToURL->FunctionFlags |= 0x400;
	uFnAppendDataBindingsToURL->iNative = 15623;

	memcpy_s(&URL, sizeof(URL), &AppendDataBindingsToURL_Params.URL, sizeof(AppendDataBindingsToURL_Params.URL));
};

// Function Engine.Settings.GetQoSAdvertisedStringSettings
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20724])
// Parameter Info:
// class TArray<struct FLocalizedStringSetting> QoSSettings                    (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void USettings::GetQoSAdvertisedStringSettings(class TArray<struct FLocalizedStringSetting>& QoSSettings)
{
	static UFunction* uFnGetQoSAdvertisedStringSettings = nullptr;

	if (!uFnGetQoSAdvertisedStringSettings)
	{
		uFnGetQoSAdvertisedStringSettings = UFunction::FindFunction("Function Engine.Settings.GetQoSAdvertisedStringSettings");
	}

	USettings_execGetQoSAdvertisedStringSettings_Params GetQoSAdvertisedStringSettings_Params;
	memset(&GetQoSAdvertisedStringSettings_Params, 0, sizeof(GetQoSAdvertisedStringSettings_Params));
	memcpy_s(&GetQoSAdvertisedStringSettings_Params.QoSSettings, sizeof(GetQoSAdvertisedStringSettings_Params.QoSSettings), &QoSSettings, sizeof(QoSSettings));

	uFnGetQoSAdvertisedStringSettings->iNative = 0;
	uFnGetQoSAdvertisedStringSettings->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetQoSAdvertisedStringSettings, &GetQoSAdvertisedStringSettings_Params, nullptr);
	uFnGetQoSAdvertisedStringSettings->FunctionFlags |= 0x400;
	uFnGetQoSAdvertisedStringSettings->iNative = 20724;

	memcpy_s(&QoSSettings, sizeof(QoSSettings), &GetQoSAdvertisedStringSettings_Params.QoSSettings, sizeof(GetQoSAdvertisedStringSettings_Params.QoSSettings));
};

// Function Engine.Settings.GetQoSAdvertisedProperties
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20723])
// Parameter Info:
// class TArray<struct FSettingsProperty> QoSProps                       (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void USettings::GetQoSAdvertisedProperties(class TArray<struct FSettingsProperty>& QoSProps)
{
	static UFunction* uFnGetQoSAdvertisedProperties = nullptr;

	if (!uFnGetQoSAdvertisedProperties)
	{
		uFnGetQoSAdvertisedProperties = UFunction::FindFunction("Function Engine.Settings.GetQoSAdvertisedProperties");
	}

	USettings_execGetQoSAdvertisedProperties_Params GetQoSAdvertisedProperties_Params;
	memset(&GetQoSAdvertisedProperties_Params, 0, sizeof(GetQoSAdvertisedProperties_Params));
	memcpy_s(&GetQoSAdvertisedProperties_Params.QoSProps, sizeof(GetQoSAdvertisedProperties_Params.QoSProps), &QoSProps, sizeof(QoSProps));

	uFnGetQoSAdvertisedProperties->iNative = 0;
	uFnGetQoSAdvertisedProperties->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetQoSAdvertisedProperties, &GetQoSAdvertisedProperties_Params, nullptr);
	uFnGetQoSAdvertisedProperties->FunctionFlags |= 0x400;
	uFnGetQoSAdvertisedProperties->iNative = 20723;

	memcpy_s(&QoSProps, sizeof(QoSProps), &GetQoSAdvertisedProperties_Params.QoSProps, sizeof(GetQoSAdvertisedProperties_Params.QoSProps));
};

// Function Engine.Settings.GetRangedPropertyValue
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20729])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        PropertyId                     (CPF_Parm)
// float                          OutValue                       (CPF_Parm | CPF_OutParm)

bool USettings::GetRangedPropertyValue(int32_t PropertyId, float& OutValue)
{
	static UFunction* uFnGetRangedPropertyValue = nullptr;

	if (!uFnGetRangedPropertyValue)
	{
		uFnGetRangedPropertyValue = UFunction::FindFunction("Function Engine.Settings.GetRangedPropertyValue");
	}

	USettings_execGetRangedPropertyValue_Params GetRangedPropertyValue_Params;
	memset(&GetRangedPropertyValue_Params, 0, sizeof(GetRangedPropertyValue_Params));
	memcpy_s(&GetRangedPropertyValue_Params.PropertyId, sizeof(GetRangedPropertyValue_Params.PropertyId), &PropertyId, sizeof(PropertyId));
	memcpy_s(&GetRangedPropertyValue_Params.OutValue, sizeof(GetRangedPropertyValue_Params.OutValue), &OutValue, sizeof(OutValue));

	uFnGetRangedPropertyValue->iNative = 0;
	uFnGetRangedPropertyValue->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetRangedPropertyValue, &GetRangedPropertyValue_Params, nullptr);
	uFnGetRangedPropertyValue->FunctionFlags |= 0x400;
	uFnGetRangedPropertyValue->iNative = 20729;

	memcpy_s(&OutValue, sizeof(OutValue), &GetRangedPropertyValue_Params.OutValue, sizeof(GetRangedPropertyValue_Params.OutValue));

	return GetRangedPropertyValue_Params.ReturnValue;
};

// Function Engine.Settings.SetRangedPropertyValue
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25755])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        PropertyId                     (CPF_Parm)
// float                          NewValue                       (CPF_Parm)

bool USettings::SetRangedPropertyValue(int32_t PropertyId, float NewValue)
{
	static UFunction* uFnSetRangedPropertyValue = nullptr;

	if (!uFnSetRangedPropertyValue)
	{
		uFnSetRangedPropertyValue = UFunction::FindFunction("Function Engine.Settings.SetRangedPropertyValue");
	}

	USettings_execSetRangedPropertyValue_Params SetRangedPropertyValue_Params;
	memset(&SetRangedPropertyValue_Params, 0, sizeof(SetRangedPropertyValue_Params));
	memcpy_s(&SetRangedPropertyValue_Params.PropertyId, sizeof(SetRangedPropertyValue_Params.PropertyId), &PropertyId, sizeof(PropertyId));
	memcpy_s(&SetRangedPropertyValue_Params.NewValue, sizeof(SetRangedPropertyValue_Params.NewValue), &NewValue, sizeof(NewValue));

	uFnSetRangedPropertyValue->iNative = 0;
	uFnSetRangedPropertyValue->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetRangedPropertyValue, &SetRangedPropertyValue_Params, nullptr);
	uFnSetRangedPropertyValue->FunctionFlags |= 0x400;
	uFnSetRangedPropertyValue->iNative = 25755;

	return SetRangedPropertyValue_Params.ReturnValue;
};

// Function Engine.Settings.GetPropertyRange
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20717])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        PropertyId                     (CPF_Parm)
// float                          OutMinValue                    (CPF_Parm | CPF_OutParm)
// float                          OutMaxValue                    (CPF_Parm | CPF_OutParm)
// float                          RangeIncrement                 (CPF_Parm | CPF_OutParm)
// uint8_t                        bFormatAsInt                   (CPF_Parm | CPF_OutParm)

bool USettings::GetPropertyRange(int32_t PropertyId, float& OutMinValue, float& OutMaxValue, float& RangeIncrement, uint8_t& bFormatAsInt)
{
	static UFunction* uFnGetPropertyRange = nullptr;

	if (!uFnGetPropertyRange)
	{
		uFnGetPropertyRange = UFunction::FindFunction("Function Engine.Settings.GetPropertyRange");
	}

	USettings_execGetPropertyRange_Params GetPropertyRange_Params;
	memset(&GetPropertyRange_Params, 0, sizeof(GetPropertyRange_Params));
	memcpy_s(&GetPropertyRange_Params.PropertyId, sizeof(GetPropertyRange_Params.PropertyId), &PropertyId, sizeof(PropertyId));
	memcpy_s(&GetPropertyRange_Params.OutMinValue, sizeof(GetPropertyRange_Params.OutMinValue), &OutMinValue, sizeof(OutMinValue));
	memcpy_s(&GetPropertyRange_Params.OutMaxValue, sizeof(GetPropertyRange_Params.OutMaxValue), &OutMaxValue, sizeof(OutMaxValue));
	memcpy_s(&GetPropertyRange_Params.RangeIncrement, sizeof(GetPropertyRange_Params.RangeIncrement), &RangeIncrement, sizeof(RangeIncrement));
	memcpy_s(&GetPropertyRange_Params.bFormatAsInt, sizeof(GetPropertyRange_Params.bFormatAsInt), &bFormatAsInt, sizeof(bFormatAsInt));

	uFnGetPropertyRange->iNative = 0;
	uFnGetPropertyRange->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetPropertyRange, &GetPropertyRange_Params, nullptr);
	uFnGetPropertyRange->FunctionFlags |= 0x400;
	uFnGetPropertyRange->iNative = 20717;

	memcpy_s(&OutMinValue, sizeof(OutMinValue), &GetPropertyRange_Params.OutMinValue, sizeof(GetPropertyRange_Params.OutMinValue));
	memcpy_s(&OutMaxValue, sizeof(OutMaxValue), &GetPropertyRange_Params.OutMaxValue, sizeof(GetPropertyRange_Params.OutMaxValue));
	memcpy_s(&RangeIncrement, sizeof(RangeIncrement), &GetPropertyRange_Params.RangeIncrement, sizeof(GetPropertyRange_Params.RangeIncrement));
	memcpy_s(&bFormatAsInt, sizeof(bFormatAsInt), &GetPropertyRange_Params.bFormatAsInt, sizeof(GetPropertyRange_Params.bFormatAsInt));

	return GetPropertyRange_Params.ReturnValue;
};

// Function Engine.Settings.GetPropertyMappingType
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20715])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        PropertyId                     (CPF_Parm)
// EPropertyValueMappingType      OutType                        (CPF_Parm | CPF_OutParm)

bool USettings::GetPropertyMappingType(int32_t PropertyId, EPropertyValueMappingType& OutType)
{
	static UFunction* uFnGetPropertyMappingType = nullptr;

	if (!uFnGetPropertyMappingType)
	{
		uFnGetPropertyMappingType = UFunction::FindFunction("Function Engine.Settings.GetPropertyMappingType");
	}

	USettings_execGetPropertyMappingType_Params GetPropertyMappingType_Params;
	memset(&GetPropertyMappingType_Params, 0, sizeof(GetPropertyMappingType_Params));
	memcpy_s(&GetPropertyMappingType_Params.PropertyId, sizeof(GetPropertyMappingType_Params.PropertyId), &PropertyId, sizeof(PropertyId));
	memcpy_s(&GetPropertyMappingType_Params.OutType, sizeof(GetPropertyMappingType_Params.OutType), &OutType, sizeof(OutType));

	uFnGetPropertyMappingType->iNative = 0;
	uFnGetPropertyMappingType->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetPropertyMappingType, &GetPropertyMappingType_Params, nullptr);
	uFnGetPropertyMappingType->FunctionFlags |= 0x400;
	uFnGetPropertyMappingType->iNative = 20715;

	memcpy_s(&OutType, sizeof(OutType), &GetPropertyMappingType_Params.OutType, sizeof(GetPropertyMappingType_Params.OutType));

	return GetPropertyMappingType_Params.ReturnValue;
};

// Function Engine.Settings.HasStringSetting
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20909])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        SettingId                      (CPF_Parm)

bool USettings::HasStringSetting(int32_t SettingId)
{
	static UFunction* uFnHasStringSetting = nullptr;

	if (!uFnHasStringSetting)
	{
		uFnHasStringSetting = UFunction::FindFunction("Function Engine.Settings.HasStringSetting");
	}

	USettings_execHasStringSetting_Params HasStringSetting_Params;
	memset(&HasStringSetting_Params, 0, sizeof(HasStringSetting_Params));
	memcpy_s(&HasStringSetting_Params.SettingId, sizeof(HasStringSetting_Params.SettingId), &SettingId, sizeof(SettingId));

	uFnHasStringSetting->iNative = 0;
	uFnHasStringSetting->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnHasStringSetting, &HasStringSetting_Params, nullptr);
	uFnHasStringSetting->FunctionFlags |= 0x400;
	uFnHasStringSetting->iNative = 20909;

	return HasStringSetting_Params.ReturnValue;
};

// Function Engine.Settings.HasProperty
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20907])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        PropertyId                     (CPF_Parm)

bool USettings::HasProperty(int32_t PropertyId)
{
	static UFunction* uFnHasProperty = nullptr;

	if (!uFnHasProperty)
	{
		uFnHasProperty = UFunction::FindFunction("Function Engine.Settings.HasProperty");
	}

	USettings_execHasProperty_Params HasProperty_Params;
	memset(&HasProperty_Params, 0, sizeof(HasProperty_Params));
	memcpy_s(&HasProperty_Params.PropertyId, sizeof(HasProperty_Params.PropertyId), &PropertyId, sizeof(PropertyId));

	uFnHasProperty->iNative = 0;
	uFnHasProperty->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnHasProperty, &HasProperty_Params, nullptr);
	uFnHasProperty->FunctionFlags |= 0x400;
	uFnHasProperty->iNative = 20907;

	return HasProperty_Params.ReturnValue;
};

// Function Engine.Settings.UpdateProperties
// [0x00424400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[26996])
// Parameter Info:
// uint32_t                       bShouldAddIfMissing            (CPF_OptionalParm | CPF_Parm)
// class TArray<struct FSettingsProperty> Props                          (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void USettings::UpdateProperties(bool bShouldAddIfMissing, class TArray<struct FSettingsProperty>& Props)
{
	static UFunction* uFnUpdateProperties = nullptr;

	if (!uFnUpdateProperties)
	{
		uFnUpdateProperties = UFunction::FindFunction("Function Engine.Settings.UpdateProperties");
	}

	USettings_execUpdateProperties_Params UpdateProperties_Params;
	memset(&UpdateProperties_Params, 0, sizeof(UpdateProperties_Params));
	UpdateProperties_Params.bShouldAddIfMissing = bShouldAddIfMissing;
	memcpy_s(&UpdateProperties_Params.Props, sizeof(UpdateProperties_Params.Props), &Props, sizeof(Props));

	uFnUpdateProperties->iNative = 0;
	uFnUpdateProperties->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnUpdateProperties, &UpdateProperties_Params, nullptr);
	uFnUpdateProperties->FunctionFlags |= 0x400;
	uFnUpdateProperties->iNative = 26996;

	memcpy_s(&Props, sizeof(Props), &UpdateProperties_Params.Props, sizeof(UpdateProperties_Params.Props));
};

// Function Engine.Settings.UpdateStringSettings
// [0x00424400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[27006])
// Parameter Info:
// uint32_t                       bShouldAddIfMissing            (CPF_OptionalParm | CPF_Parm)
// class TArray<struct FLocalizedStringSetting> Settings                       (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void USettings::UpdateStringSettings(bool bShouldAddIfMissing, class TArray<struct FLocalizedStringSetting>& Settings)
{
	static UFunction* uFnUpdateStringSettings = nullptr;

	if (!uFnUpdateStringSettings)
	{
		uFnUpdateStringSettings = UFunction::FindFunction("Function Engine.Settings.UpdateStringSettings");
	}

	USettings_execUpdateStringSettings_Params UpdateStringSettings_Params;
	memset(&UpdateStringSettings_Params, 0, sizeof(UpdateStringSettings_Params));
	UpdateStringSettings_Params.bShouldAddIfMissing = bShouldAddIfMissing;
	memcpy_s(&UpdateStringSettings_Params.Settings, sizeof(UpdateStringSettings_Params.Settings), &Settings, sizeof(Settings));

	uFnUpdateStringSettings->iNative = 0;
	uFnUpdateStringSettings->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnUpdateStringSettings, &UpdateStringSettings_Params, nullptr);
	uFnUpdateStringSettings->FunctionFlags |= 0x400;
	uFnUpdateStringSettings->iNative = 27006;

	memcpy_s(&Settings, sizeof(Settings), &UpdateStringSettings_Params.Settings, sizeof(UpdateStringSettings_Params.Settings));
};

// Function Engine.Settings.GetPropertyType
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20718])
// Parameter Info:
// ESettingsDataType              ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        PropertyId                     (CPF_Parm)

ESettingsDataType USettings::GetPropertyType(int32_t PropertyId)
{
	static UFunction* uFnGetPropertyType = nullptr;

	if (!uFnGetPropertyType)
	{
		uFnGetPropertyType = UFunction::FindFunction("Function Engine.Settings.GetPropertyType");
	}

	USettings_execGetPropertyType_Params GetPropertyType_Params;
	memset(&GetPropertyType_Params, 0, sizeof(GetPropertyType_Params));
	memcpy_s(&GetPropertyType_Params.PropertyId, sizeof(GetPropertyType_Params.PropertyId), &PropertyId, sizeof(PropertyId));

	uFnGetPropertyType->iNative = 0;
	uFnGetPropertyType->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetPropertyType, &GetPropertyType_Params, nullptr);
	uFnGetPropertyType->FunctionFlags |= 0x400;
	uFnGetPropertyType->iNative = 20718;

	return static_cast<ESettingsDataType>(GetPropertyType_Params.ReturnValue);
};

// Function Engine.Settings.GetPropertyValueId
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20719])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        PropertyId                     (CPF_Parm)
// int32_t                        ValueId                        (CPF_Parm | CPF_OutParm)

bool USettings::GetPropertyValueId(int32_t PropertyId, int32_t& ValueId)
{
	static UFunction* uFnGetPropertyValueId = nullptr;

	if (!uFnGetPropertyValueId)
	{
		uFnGetPropertyValueId = UFunction::FindFunction("Function Engine.Settings.GetPropertyValueId");
	}

	USettings_execGetPropertyValueId_Params GetPropertyValueId_Params;
	memset(&GetPropertyValueId_Params, 0, sizeof(GetPropertyValueId_Params));
	memcpy_s(&GetPropertyValueId_Params.PropertyId, sizeof(GetPropertyValueId_Params.PropertyId), &PropertyId, sizeof(PropertyId));
	memcpy_s(&GetPropertyValueId_Params.ValueId, sizeof(GetPropertyValueId_Params.ValueId), &ValueId, sizeof(ValueId));

	uFnGetPropertyValueId->iNative = 0;
	uFnGetPropertyValueId->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetPropertyValueId, &GetPropertyValueId_Params, nullptr);
	uFnGetPropertyValueId->FunctionFlags |= 0x400;
	uFnGetPropertyValueId->iNative = 20719;

	memcpy_s(&ValueId, sizeof(ValueId), &GetPropertyValueId_Params.ValueId, sizeof(GetPropertyValueId_Params.ValueId));

	return GetPropertyValueId_Params.ReturnValue;
};

// Function Engine.Settings.SetPropertyValueId
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25750])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        PropertyId                     (CPF_Parm)
// int32_t                        ValueId                        (CPF_Parm)

bool USettings::SetPropertyValueId(int32_t PropertyId, int32_t ValueId)
{
	static UFunction* uFnSetPropertyValueId = nullptr;

	if (!uFnSetPropertyValueId)
	{
		uFnSetPropertyValueId = UFunction::FindFunction("Function Engine.Settings.SetPropertyValueId");
	}

	USettings_execSetPropertyValueId_Params SetPropertyValueId_Params;
	memset(&SetPropertyValueId_Params, 0, sizeof(SetPropertyValueId_Params));
	memcpy_s(&SetPropertyValueId_Params.PropertyId, sizeof(SetPropertyValueId_Params.PropertyId), &PropertyId, sizeof(PropertyId));
	memcpy_s(&SetPropertyValueId_Params.ValueId, sizeof(SetPropertyValueId_Params.ValueId), &ValueId, sizeof(ValueId));

	uFnSetPropertyValueId->iNative = 0;
	uFnSetPropertyValueId->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetPropertyValueId, &SetPropertyValueId_Params, nullptr);
	uFnSetPropertyValueId->FunctionFlags |= 0x400;
	uFnSetPropertyValueId->iNative = 25750;

	return SetPropertyValueId_Params.ReturnValue;
};

// Function Engine.Settings.GetStringProperty
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20765])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        PropertyId                     (CPF_Parm)
// class FString                  Value                          (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

bool USettings::GetStringProperty(int32_t PropertyId, class FString& Value)
{
	static UFunction* uFnGetStringProperty = nullptr;

	if (!uFnGetStringProperty)
	{
		uFnGetStringProperty = UFunction::FindFunction("Function Engine.Settings.GetStringProperty");
	}

	USettings_execGetStringProperty_Params GetStringProperty_Params;
	memset(&GetStringProperty_Params, 0, sizeof(GetStringProperty_Params));
	memcpy_s(&GetStringProperty_Params.PropertyId, sizeof(GetStringProperty_Params.PropertyId), &PropertyId, sizeof(PropertyId));
	memcpy_s(&GetStringProperty_Params.Value, sizeof(GetStringProperty_Params.Value), &Value, sizeof(Value));

	uFnGetStringProperty->iNative = 0;
	uFnGetStringProperty->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetStringProperty, &GetStringProperty_Params, nullptr);
	uFnGetStringProperty->FunctionFlags |= 0x400;
	uFnGetStringProperty->iNative = 20765;

	memcpy_s(&Value, sizeof(Value), &GetStringProperty_Params.Value, sizeof(GetStringProperty_Params.Value));

	return GetStringProperty_Params.ReturnValue;
};

// Function Engine.Settings.SetStringProperty
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25805])
// Parameter Info:
// int32_t                        PropertyId                     (CPF_Parm)
// class FString                  Value                          (CPF_Parm | CPF_NeedCtorLink)

void USettings::SetStringProperty(int32_t PropertyId, const class FString& Value)
{
	static UFunction* uFnSetStringProperty = nullptr;

	if (!uFnSetStringProperty)
	{
		uFnSetStringProperty = UFunction::FindFunction("Function Engine.Settings.SetStringProperty");
	}

	USettings_execSetStringProperty_Params SetStringProperty_Params;
	memset(&SetStringProperty_Params, 0, sizeof(SetStringProperty_Params));
	memcpy_s(&SetStringProperty_Params.PropertyId, sizeof(SetStringProperty_Params.PropertyId), &PropertyId, sizeof(PropertyId));
	memcpy_s(&SetStringProperty_Params.Value, sizeof(SetStringProperty_Params.Value), &Value, sizeof(Value));

	uFnSetStringProperty->iNative = 0;
	uFnSetStringProperty->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetStringProperty, &SetStringProperty_Params, nullptr);
	uFnSetStringProperty->FunctionFlags |= 0x400;
	uFnSetStringProperty->iNative = 25805;
};

// Function Engine.Settings.GetIntProperty
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20610])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        PropertyId                     (CPF_Parm)
// int32_t                        Value                          (CPF_Parm | CPF_OutParm)

bool USettings::GetIntProperty(int32_t PropertyId, int32_t& Value)
{
	static UFunction* uFnGetIntProperty = nullptr;

	if (!uFnGetIntProperty)
	{
		uFnGetIntProperty = UFunction::FindFunction("Function Engine.Settings.GetIntProperty");
	}

	USettings_execGetIntProperty_Params GetIntProperty_Params;
	memset(&GetIntProperty_Params, 0, sizeof(GetIntProperty_Params));
	memcpy_s(&GetIntProperty_Params.PropertyId, sizeof(GetIntProperty_Params.PropertyId), &PropertyId, sizeof(PropertyId));
	memcpy_s(&GetIntProperty_Params.Value, sizeof(GetIntProperty_Params.Value), &Value, sizeof(Value));

	uFnGetIntProperty->iNative = 0;
	uFnGetIntProperty->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetIntProperty, &GetIntProperty_Params, nullptr);
	uFnGetIntProperty->FunctionFlags |= 0x400;
	uFnGetIntProperty->iNative = 20610;

	memcpy_s(&Value, sizeof(Value), &GetIntProperty_Params.Value, sizeof(GetIntProperty_Params.Value));

	return GetIntProperty_Params.ReturnValue;
};

// Function Engine.Settings.SetIntProperty
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25682])
// Parameter Info:
// int32_t                        PropertyId                     (CPF_Parm)
// int32_t                        Value                          (CPF_Parm)

void USettings::SetIntProperty(int32_t PropertyId, int32_t Value)
{
	static UFunction* uFnSetIntProperty = nullptr;

	if (!uFnSetIntProperty)
	{
		uFnSetIntProperty = UFunction::FindFunction("Function Engine.Settings.SetIntProperty");
	}

	USettings_execSetIntProperty_Params SetIntProperty_Params;
	memset(&SetIntProperty_Params, 0, sizeof(SetIntProperty_Params));
	memcpy_s(&SetIntProperty_Params.PropertyId, sizeof(SetIntProperty_Params.PropertyId), &PropertyId, sizeof(PropertyId));
	memcpy_s(&SetIntProperty_Params.Value, sizeof(SetIntProperty_Params.Value), &Value, sizeof(Value));

	uFnSetIntProperty->iNative = 0;
	uFnSetIntProperty->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetIntProperty, &SetIntProperty_Params, nullptr);
	uFnSetIntProperty->FunctionFlags |= 0x400;
	uFnSetIntProperty->iNative = 25682;
};

// Function Engine.Settings.GetFloatProperty
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20580])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        PropertyId                     (CPF_Parm)
// float                          Value                          (CPF_Parm | CPF_OutParm)

bool USettings::GetFloatProperty(int32_t PropertyId, float& Value)
{
	static UFunction* uFnGetFloatProperty = nullptr;

	if (!uFnGetFloatProperty)
	{
		uFnGetFloatProperty = UFunction::FindFunction("Function Engine.Settings.GetFloatProperty");
	}

	USettings_execGetFloatProperty_Params GetFloatProperty_Params;
	memset(&GetFloatProperty_Params, 0, sizeof(GetFloatProperty_Params));
	memcpy_s(&GetFloatProperty_Params.PropertyId, sizeof(GetFloatProperty_Params.PropertyId), &PropertyId, sizeof(PropertyId));
	memcpy_s(&GetFloatProperty_Params.Value, sizeof(GetFloatProperty_Params.Value), &Value, sizeof(Value));

	uFnGetFloatProperty->iNative = 0;
	uFnGetFloatProperty->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetFloatProperty, &GetFloatProperty_Params, nullptr);
	uFnGetFloatProperty->FunctionFlags |= 0x400;
	uFnGetFloatProperty->iNative = 20580;

	memcpy_s(&Value, sizeof(Value), &GetFloatProperty_Params.Value, sizeof(GetFloatProperty_Params.Value));

	return GetFloatProperty_Params.ReturnValue;
};

// Function Engine.Settings.SetFloatProperty
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25656])
// Parameter Info:
// int32_t                        PropertyId                     (CPF_Parm)
// float                          Value                          (CPF_Parm)

void USettings::SetFloatProperty(int32_t PropertyId, float Value)
{
	static UFunction* uFnSetFloatProperty = nullptr;

	if (!uFnSetFloatProperty)
	{
		uFnSetFloatProperty = UFunction::FindFunction("Function Engine.Settings.SetFloatProperty");
	}

	USettings_execSetFloatProperty_Params SetFloatProperty_Params;
	memset(&SetFloatProperty_Params, 0, sizeof(SetFloatProperty_Params));
	memcpy_s(&SetFloatProperty_Params.PropertyId, sizeof(SetFloatProperty_Params.PropertyId), &PropertyId, sizeof(PropertyId));
	memcpy_s(&SetFloatProperty_Params.Value, sizeof(SetFloatProperty_Params.Value), &Value, sizeof(Value));

	uFnSetFloatProperty->iNative = 0;
	uFnSetFloatProperty->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetFloatProperty, &SetFloatProperty_Params, nullptr);
	uFnSetFloatProperty->FunctionFlags |= 0x400;
	uFnSetFloatProperty->iNative = 25656;
};

// Function Engine.Settings.SetPropertyFromStringByName
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[25749])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    PropertyName                   (CPF_Parm)
// class FString                  NewValue                       (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

bool USettings::SetPropertyFromStringByName(const class FName& PropertyName, class FString& NewValue)
{
	static UFunction* uFnSetPropertyFromStringByName = nullptr;

	if (!uFnSetPropertyFromStringByName)
	{
		uFnSetPropertyFromStringByName = UFunction::FindFunction("Function Engine.Settings.SetPropertyFromStringByName");
	}

	USettings_execSetPropertyFromStringByName_Params SetPropertyFromStringByName_Params;
	memset(&SetPropertyFromStringByName_Params, 0, sizeof(SetPropertyFromStringByName_Params));
	memcpy_s(&SetPropertyFromStringByName_Params.PropertyName, sizeof(SetPropertyFromStringByName_Params.PropertyName), &PropertyName, sizeof(PropertyName));
	memcpy_s(&SetPropertyFromStringByName_Params.NewValue, sizeof(SetPropertyFromStringByName_Params.NewValue), &NewValue, sizeof(NewValue));

	uFnSetPropertyFromStringByName->iNative = 0;
	uFnSetPropertyFromStringByName->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetPropertyFromStringByName, &SetPropertyFromStringByName_Params, nullptr);
	uFnSetPropertyFromStringByName->FunctionFlags |= 0x400;
	uFnSetPropertyFromStringByName->iNative = 25749;

	memcpy_s(&NewValue, sizeof(NewValue), &SetPropertyFromStringByName_Params.NewValue, sizeof(SetPropertyFromStringByName_Params.NewValue));

	return SetPropertyFromStringByName_Params.ReturnValue;
};

// Function Engine.Settings.GetPropertyAsStringByName
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20712])
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)
// class FName                    PropertyName                   (CPF_Parm)

class FString USettings::GetPropertyAsStringByName(const class FName& PropertyName)
{
	static UFunction* uFnGetPropertyAsStringByName = nullptr;

	if (!uFnGetPropertyAsStringByName)
	{
		uFnGetPropertyAsStringByName = UFunction::FindFunction("Function Engine.Settings.GetPropertyAsStringByName");
	}

	USettings_execGetPropertyAsStringByName_Params GetPropertyAsStringByName_Params;
	memset(&GetPropertyAsStringByName_Params, 0, sizeof(GetPropertyAsStringByName_Params));
	memcpy_s(&GetPropertyAsStringByName_Params.PropertyName, sizeof(GetPropertyAsStringByName_Params.PropertyName), &PropertyName, sizeof(PropertyName));

	uFnGetPropertyAsStringByName->iNative = 0;
	uFnGetPropertyAsStringByName->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetPropertyAsStringByName, &GetPropertyAsStringByName_Params, nullptr);
	uFnGetPropertyAsStringByName->FunctionFlags |= 0x400;
	uFnGetPropertyAsStringByName->iNative = 20712;

	return GetPropertyAsStringByName_Params.ReturnValue;
};

// Function Engine.Settings.GetPropertyAsString
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20711])
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)
// int32_t                        PropertyId                     (CPF_Parm)

class FString USettings::GetPropertyAsString(int32_t PropertyId)
{
	static UFunction* uFnGetPropertyAsString = nullptr;

	if (!uFnGetPropertyAsString)
	{
		uFnGetPropertyAsString = UFunction::FindFunction("Function Engine.Settings.GetPropertyAsString");
	}

	USettings_execGetPropertyAsString_Params GetPropertyAsString_Params;
	memset(&GetPropertyAsString_Params, 0, sizeof(GetPropertyAsString_Params));
	memcpy_s(&GetPropertyAsString_Params.PropertyId, sizeof(GetPropertyAsString_Params.PropertyId), &PropertyId, sizeof(PropertyId));

	uFnGetPropertyAsString->iNative = 0;
	uFnGetPropertyAsString->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetPropertyAsString, &GetPropertyAsString_Params, nullptr);
	uFnGetPropertyAsString->FunctionFlags |= 0x400;
	uFnGetPropertyAsString->iNative = 20711;

	return GetPropertyAsString_Params.ReturnValue;
};

// Function Engine.Settings.GetPropertyColumnHeader
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20713])
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)
// int32_t                        PropertyId                     (CPF_Parm)

class FString USettings::GetPropertyColumnHeader(int32_t PropertyId)
{
	static UFunction* uFnGetPropertyColumnHeader = nullptr;

	if (!uFnGetPropertyColumnHeader)
	{
		uFnGetPropertyColumnHeader = UFunction::FindFunction("Function Engine.Settings.GetPropertyColumnHeader");
	}

	USettings_execGetPropertyColumnHeader_Params GetPropertyColumnHeader_Params;
	memset(&GetPropertyColumnHeader_Params, 0, sizeof(GetPropertyColumnHeader_Params));
	memcpy_s(&GetPropertyColumnHeader_Params.PropertyId, sizeof(GetPropertyColumnHeader_Params.PropertyId), &PropertyId, sizeof(PropertyId));

	uFnGetPropertyColumnHeader->iNative = 0;
	uFnGetPropertyColumnHeader->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetPropertyColumnHeader, &GetPropertyColumnHeader_Params, nullptr);
	uFnGetPropertyColumnHeader->FunctionFlags |= 0x400;
	uFnGetPropertyColumnHeader->iNative = 20713;

	return GetPropertyColumnHeader_Params.ReturnValue;
};

// Function Engine.Settings.GetPropertyName
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20716])
// Parameter Info:
// class FName                    ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        PropertyId                     (CPF_Parm)

class FName USettings::GetPropertyName(int32_t PropertyId)
{
	static UFunction* uFnGetPropertyName = nullptr;

	if (!uFnGetPropertyName)
	{
		uFnGetPropertyName = UFunction::FindFunction("Function Engine.Settings.GetPropertyName");
	}

	USettings_execGetPropertyName_Params GetPropertyName_Params;
	memset(&GetPropertyName_Params, 0, sizeof(GetPropertyName_Params));
	memcpy_s(&GetPropertyName_Params.PropertyId, sizeof(GetPropertyName_Params.PropertyId), &PropertyId, sizeof(PropertyId));

	uFnGetPropertyName->iNative = 0;
	uFnGetPropertyName->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetPropertyName, &GetPropertyName_Params, nullptr);
	uFnGetPropertyName->FunctionFlags |= 0x400;
	uFnGetPropertyName->iNative = 20716;

	return GetPropertyName_Params.ReturnValue;
};

// Function Engine.Settings.GetPropertyId
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20714])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    PropertyName                   (CPF_Parm)
// int32_t                        PropertyId                     (CPF_Parm | CPF_OutParm)

bool USettings::GetPropertyId(const class FName& PropertyName, int32_t& PropertyId)
{
	static UFunction* uFnGetPropertyId = nullptr;

	if (!uFnGetPropertyId)
	{
		uFnGetPropertyId = UFunction::FindFunction("Function Engine.Settings.GetPropertyId");
	}

	USettings_execGetPropertyId_Params GetPropertyId_Params;
	memset(&GetPropertyId_Params, 0, sizeof(GetPropertyId_Params));
	memcpy_s(&GetPropertyId_Params.PropertyName, sizeof(GetPropertyId_Params.PropertyName), &PropertyName, sizeof(PropertyName));
	memcpy_s(&GetPropertyId_Params.PropertyId, sizeof(GetPropertyId_Params.PropertyId), &PropertyId, sizeof(PropertyId));

	uFnGetPropertyId->iNative = 0;
	uFnGetPropertyId->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetPropertyId, &GetPropertyId_Params, nullptr);
	uFnGetPropertyId->FunctionFlags |= 0x400;
	uFnGetPropertyId->iNative = 20714;

	memcpy_s(&PropertyId, sizeof(PropertyId), &GetPropertyId_Params.PropertyId, sizeof(GetPropertyId_Params.PropertyId));

	return GetPropertyId_Params.ReturnValue;
};

// Function Engine.Settings.SetStringSettingValueFromStringByName
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[25808])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    StringSettingName              (CPF_Parm)
// class FString                  NewValue                       (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

bool USettings::SetStringSettingValueFromStringByName(const class FName& StringSettingName, class FString& NewValue)
{
	static UFunction* uFnSetStringSettingValueFromStringByName = nullptr;

	if (!uFnSetStringSettingValueFromStringByName)
	{
		uFnSetStringSettingValueFromStringByName = UFunction::FindFunction("Function Engine.Settings.SetStringSettingValueFromStringByName");
	}

	USettings_execSetStringSettingValueFromStringByName_Params SetStringSettingValueFromStringByName_Params;
	memset(&SetStringSettingValueFromStringByName_Params, 0, sizeof(SetStringSettingValueFromStringByName_Params));
	memcpy_s(&SetStringSettingValueFromStringByName_Params.StringSettingName, sizeof(SetStringSettingValueFromStringByName_Params.StringSettingName), &StringSettingName, sizeof(StringSettingName));
	memcpy_s(&SetStringSettingValueFromStringByName_Params.NewValue, sizeof(SetStringSettingValueFromStringByName_Params.NewValue), &NewValue, sizeof(NewValue));

	uFnSetStringSettingValueFromStringByName->iNative = 0;
	uFnSetStringSettingValueFromStringByName->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetStringSettingValueFromStringByName, &SetStringSettingValueFromStringByName_Params, nullptr);
	uFnSetStringSettingValueFromStringByName->FunctionFlags |= 0x400;
	uFnSetStringSettingValueFromStringByName->iNative = 25808;

	memcpy_s(&NewValue, sizeof(NewValue), &SetStringSettingValueFromStringByName_Params.NewValue, sizeof(SetStringSettingValueFromStringByName_Params.NewValue));

	return SetStringSettingValueFromStringByName_Params.ReturnValue;
};

// Function Engine.Settings.GetStringSettingValueNameByName
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20772])
// Parameter Info:
// class FName                    ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    StringSettingName              (CPF_Parm)

class FName USettings::GetStringSettingValueNameByName(const class FName& StringSettingName)
{
	static UFunction* uFnGetStringSettingValueNameByName = nullptr;

	if (!uFnGetStringSettingValueNameByName)
	{
		uFnGetStringSettingValueNameByName = UFunction::FindFunction("Function Engine.Settings.GetStringSettingValueNameByName");
	}

	USettings_execGetStringSettingValueNameByName_Params GetStringSettingValueNameByName_Params;
	memset(&GetStringSettingValueNameByName_Params, 0, sizeof(GetStringSettingValueNameByName_Params));
	memcpy_s(&GetStringSettingValueNameByName_Params.StringSettingName, sizeof(GetStringSettingValueNameByName_Params.StringSettingName), &StringSettingName, sizeof(StringSettingName));

	uFnGetStringSettingValueNameByName->iNative = 0;
	uFnGetStringSettingValueNameByName->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetStringSettingValueNameByName, &GetStringSettingValueNameByName_Params, nullptr);
	uFnGetStringSettingValueNameByName->FunctionFlags |= 0x400;
	uFnGetStringSettingValueNameByName->iNative = 20772;

	return GetStringSettingValueNameByName_Params.ReturnValue;
};

// Function Engine.Settings.GetStringSettingValueName
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20771])
// Parameter Info:
// class FName                    ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        StringSettingId                (CPF_Parm)
// int32_t                        ValueIndex                     (CPF_Parm)

class FName USettings::GetStringSettingValueName(int32_t StringSettingId, int32_t ValueIndex)
{
	static UFunction* uFnGetStringSettingValueName = nullptr;

	if (!uFnGetStringSettingValueName)
	{
		uFnGetStringSettingValueName = UFunction::FindFunction("Function Engine.Settings.GetStringSettingValueName");
	}

	USettings_execGetStringSettingValueName_Params GetStringSettingValueName_Params;
	memset(&GetStringSettingValueName_Params, 0, sizeof(GetStringSettingValueName_Params));
	memcpy_s(&GetStringSettingValueName_Params.StringSettingId, sizeof(GetStringSettingValueName_Params.StringSettingId), &StringSettingId, sizeof(StringSettingId));
	memcpy_s(&GetStringSettingValueName_Params.ValueIndex, sizeof(GetStringSettingValueName_Params.ValueIndex), &ValueIndex, sizeof(ValueIndex));

	uFnGetStringSettingValueName->iNative = 0;
	uFnGetStringSettingValueName->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetStringSettingValueName, &GetStringSettingValueName_Params, nullptr);
	uFnGetStringSettingValueName->FunctionFlags |= 0x400;
	uFnGetStringSettingValueName->iNative = 20771;

	return GetStringSettingValueName_Params.ReturnValue;
};

// Function Engine.Settings.IsWildcardStringSetting
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[21434])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        StringSettingId                (CPF_Parm)

bool USettings::IsWildcardStringSetting(int32_t StringSettingId)
{
	static UFunction* uFnIsWildcardStringSetting = nullptr;

	if (!uFnIsWildcardStringSetting)
	{
		uFnIsWildcardStringSetting = UFunction::FindFunction("Function Engine.Settings.IsWildcardStringSetting");
	}

	USettings_execIsWildcardStringSetting_Params IsWildcardStringSetting_Params;
	memset(&IsWildcardStringSetting_Params, 0, sizeof(IsWildcardStringSetting_Params));
	memcpy_s(&IsWildcardStringSetting_Params.StringSettingId, sizeof(IsWildcardStringSetting_Params.StringSettingId), &StringSettingId, sizeof(StringSettingId));

	uFnIsWildcardStringSetting->iNative = 0;
	uFnIsWildcardStringSetting->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnIsWildcardStringSetting, &IsWildcardStringSetting_Params, nullptr);
	uFnIsWildcardStringSetting->FunctionFlags |= 0x400;
	uFnIsWildcardStringSetting->iNative = 21434;

	return IsWildcardStringSetting_Params.ReturnValue;
};

// Function Engine.Settings.GetStringSettingColumnHeader
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20766])
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)
// int32_t                        StringSettingId                (CPF_Parm)

class FString USettings::GetStringSettingColumnHeader(int32_t StringSettingId)
{
	static UFunction* uFnGetStringSettingColumnHeader = nullptr;

	if (!uFnGetStringSettingColumnHeader)
	{
		uFnGetStringSettingColumnHeader = UFunction::FindFunction("Function Engine.Settings.GetStringSettingColumnHeader");
	}

	USettings_execGetStringSettingColumnHeader_Params GetStringSettingColumnHeader_Params;
	memset(&GetStringSettingColumnHeader_Params, 0, sizeof(GetStringSettingColumnHeader_Params));
	memcpy_s(&GetStringSettingColumnHeader_Params.StringSettingId, sizeof(GetStringSettingColumnHeader_Params.StringSettingId), &StringSettingId, sizeof(StringSettingId));

	uFnGetStringSettingColumnHeader->iNative = 0;
	uFnGetStringSettingColumnHeader->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetStringSettingColumnHeader, &GetStringSettingColumnHeader_Params, nullptr);
	uFnGetStringSettingColumnHeader->FunctionFlags |= 0x400;
	uFnGetStringSettingColumnHeader->iNative = 20766;

	return GetStringSettingColumnHeader_Params.ReturnValue;
};

// Function Engine.Settings.GetStringSettingName
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20768])
// Parameter Info:
// class FName                    ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        StringSettingId                (CPF_Parm)

class FName USettings::GetStringSettingName(int32_t StringSettingId)
{
	static UFunction* uFnGetStringSettingName = nullptr;

	if (!uFnGetStringSettingName)
	{
		uFnGetStringSettingName = UFunction::FindFunction("Function Engine.Settings.GetStringSettingName");
	}

	USettings_execGetStringSettingName_Params GetStringSettingName_Params;
	memset(&GetStringSettingName_Params, 0, sizeof(GetStringSettingName_Params));
	memcpy_s(&GetStringSettingName_Params.StringSettingId, sizeof(GetStringSettingName_Params.StringSettingId), &StringSettingId, sizeof(StringSettingId));

	uFnGetStringSettingName->iNative = 0;
	uFnGetStringSettingName->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetStringSettingName, &GetStringSettingName_Params, nullptr);
	uFnGetStringSettingName->FunctionFlags |= 0x400;
	uFnGetStringSettingName->iNative = 20768;

	return GetStringSettingName_Params.ReturnValue;
};

// Function Engine.Settings.GetStringSettingId
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20767])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    StringSettingName              (CPF_Parm)
// int32_t                        StringSettingId                (CPF_Parm | CPF_OutParm)

bool USettings::GetStringSettingId(const class FName& StringSettingName, int32_t& StringSettingId)
{
	static UFunction* uFnGetStringSettingId = nullptr;

	if (!uFnGetStringSettingId)
	{
		uFnGetStringSettingId = UFunction::FindFunction("Function Engine.Settings.GetStringSettingId");
	}

	USettings_execGetStringSettingId_Params GetStringSettingId_Params;
	memset(&GetStringSettingId_Params, 0, sizeof(GetStringSettingId_Params));
	memcpy_s(&GetStringSettingId_Params.StringSettingName, sizeof(GetStringSettingId_Params.StringSettingName), &StringSettingName, sizeof(StringSettingName));
	memcpy_s(&GetStringSettingId_Params.StringSettingId, sizeof(GetStringSettingId_Params.StringSettingId), &StringSettingId, sizeof(StringSettingId));

	uFnGetStringSettingId->iNative = 0;
	uFnGetStringSettingId->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetStringSettingId, &GetStringSettingId_Params, nullptr);
	uFnGetStringSettingId->FunctionFlags |= 0x400;
	uFnGetStringSettingId->iNative = 20767;

	memcpy_s(&StringSettingId, sizeof(StringSettingId), &GetStringSettingId_Params.StringSettingId, sizeof(GetStringSettingId_Params.StringSettingId));

	return GetStringSettingId_Params.ReturnValue;
};

// Function Engine.Settings.GetStringSettingValueByName
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20770])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    StringSettingName              (CPF_Parm)
// int32_t                        ValueIndex                     (CPF_Parm | CPF_OutParm)

bool USettings::GetStringSettingValueByName(const class FName& StringSettingName, int32_t& ValueIndex)
{
	static UFunction* uFnGetStringSettingValueByName = nullptr;

	if (!uFnGetStringSettingValueByName)
	{
		uFnGetStringSettingValueByName = UFunction::FindFunction("Function Engine.Settings.GetStringSettingValueByName");
	}

	USettings_execGetStringSettingValueByName_Params GetStringSettingValueByName_Params;
	memset(&GetStringSettingValueByName_Params, 0, sizeof(GetStringSettingValueByName_Params));
	memcpy_s(&GetStringSettingValueByName_Params.StringSettingName, sizeof(GetStringSettingValueByName_Params.StringSettingName), &StringSettingName, sizeof(StringSettingName));
	memcpy_s(&GetStringSettingValueByName_Params.ValueIndex, sizeof(GetStringSettingValueByName_Params.ValueIndex), &ValueIndex, sizeof(ValueIndex));

	uFnGetStringSettingValueByName->iNative = 0;
	uFnGetStringSettingValueByName->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetStringSettingValueByName, &GetStringSettingValueByName_Params, nullptr);
	uFnGetStringSettingValueByName->FunctionFlags |= 0x400;
	uFnGetStringSettingValueByName->iNative = 20770;

	memcpy_s(&ValueIndex, sizeof(ValueIndex), &GetStringSettingValueByName_Params.ValueIndex, sizeof(GetStringSettingValueByName_Params.ValueIndex));

	return GetStringSettingValueByName_Params.ReturnValue;
};

// Function Engine.Settings.SetStringSettingValueByName
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25807])
// Parameter Info:
// class FName                    StringSettingName              (CPF_Parm)
// int32_t                        ValueIndex                     (CPF_Parm)
// uint32_t                       bShouldAutoAdd                 (CPF_Parm)

void USettings::SetStringSettingValueByName(const class FName& StringSettingName, int32_t ValueIndex, bool bShouldAutoAdd)
{
	static UFunction* uFnSetStringSettingValueByName = nullptr;

	if (!uFnSetStringSettingValueByName)
	{
		uFnSetStringSettingValueByName = UFunction::FindFunction("Function Engine.Settings.SetStringSettingValueByName");
	}

	USettings_execSetStringSettingValueByName_Params SetStringSettingValueByName_Params;
	memset(&SetStringSettingValueByName_Params, 0, sizeof(SetStringSettingValueByName_Params));
	memcpy_s(&SetStringSettingValueByName_Params.StringSettingName, sizeof(SetStringSettingValueByName_Params.StringSettingName), &StringSettingName, sizeof(StringSettingName));
	memcpy_s(&SetStringSettingValueByName_Params.ValueIndex, sizeof(SetStringSettingValueByName_Params.ValueIndex), &ValueIndex, sizeof(ValueIndex));
	SetStringSettingValueByName_Params.bShouldAutoAdd = bShouldAutoAdd;

	uFnSetStringSettingValueByName->iNative = 0;
	uFnSetStringSettingValueByName->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetStringSettingValueByName, &SetStringSettingValueByName_Params, nullptr);
	uFnSetStringSettingValueByName->FunctionFlags |= 0x400;
	uFnSetStringSettingValueByName->iNative = 25807;
};

// Function Engine.Settings.GetStringSettingValueNames
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20773])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        StringSettingId                (CPF_Parm)
// class TArray<struct FIdToStringMapping> Values                         (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

bool USettings::GetStringSettingValueNames(int32_t StringSettingId, class TArray<struct FIdToStringMapping>& Values)
{
	static UFunction* uFnGetStringSettingValueNames = nullptr;

	if (!uFnGetStringSettingValueNames)
	{
		uFnGetStringSettingValueNames = UFunction::FindFunction("Function Engine.Settings.GetStringSettingValueNames");
	}

	USettings_execGetStringSettingValueNames_Params GetStringSettingValueNames_Params;
	memset(&GetStringSettingValueNames_Params, 0, sizeof(GetStringSettingValueNames_Params));
	memcpy_s(&GetStringSettingValueNames_Params.StringSettingId, sizeof(GetStringSettingValueNames_Params.StringSettingId), &StringSettingId, sizeof(StringSettingId));
	memcpy_s(&GetStringSettingValueNames_Params.Values, sizeof(GetStringSettingValueNames_Params.Values), &Values, sizeof(Values));

	uFnGetStringSettingValueNames->iNative = 0;
	uFnGetStringSettingValueNames->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetStringSettingValueNames, &GetStringSettingValueNames_Params, nullptr);
	uFnGetStringSettingValueNames->FunctionFlags |= 0x400;
	uFnGetStringSettingValueNames->iNative = 20773;

	memcpy_s(&Values, sizeof(Values), &GetStringSettingValueNames_Params.Values, sizeof(GetStringSettingValueNames_Params.Values));

	return GetStringSettingValueNames_Params.ReturnValue;
};

// Function Engine.Settings.IncrementStringSettingValue
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[21076])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        StringSettingId                (CPF_Parm)
// int32_t                        Direction                      (CPF_Parm)
// uint32_t                       bShouldWrap                    (CPF_Parm)

bool USettings::IncrementStringSettingValue(int32_t StringSettingId, int32_t Direction, bool bShouldWrap)
{
	static UFunction* uFnIncrementStringSettingValue = nullptr;

	if (!uFnIncrementStringSettingValue)
	{
		uFnIncrementStringSettingValue = UFunction::FindFunction("Function Engine.Settings.IncrementStringSettingValue");
	}

	USettings_execIncrementStringSettingValue_Params IncrementStringSettingValue_Params;
	memset(&IncrementStringSettingValue_Params, 0, sizeof(IncrementStringSettingValue_Params));
	memcpy_s(&IncrementStringSettingValue_Params.StringSettingId, sizeof(IncrementStringSettingValue_Params.StringSettingId), &StringSettingId, sizeof(StringSettingId));
	memcpy_s(&IncrementStringSettingValue_Params.Direction, sizeof(IncrementStringSettingValue_Params.Direction), &Direction, sizeof(Direction));
	IncrementStringSettingValue_Params.bShouldWrap = bShouldWrap;

	uFnIncrementStringSettingValue->iNative = 0;
	uFnIncrementStringSettingValue->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnIncrementStringSettingValue, &IncrementStringSettingValue_Params, nullptr);
	uFnIncrementStringSettingValue->FunctionFlags |= 0x400;
	uFnIncrementStringSettingValue->iNative = 21076;

	return IncrementStringSettingValue_Params.ReturnValue;
};

// Function Engine.Settings.GetStringSettingValue
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20769])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        StringSettingId                (CPF_Parm)
// int32_t                        ValueIndex                     (CPF_Parm | CPF_OutParm)

bool USettings::GetStringSettingValue(int32_t StringSettingId, int32_t& ValueIndex)
{
	static UFunction* uFnGetStringSettingValue = nullptr;

	if (!uFnGetStringSettingValue)
	{
		uFnGetStringSettingValue = UFunction::FindFunction("Function Engine.Settings.GetStringSettingValue");
	}

	USettings_execGetStringSettingValue_Params GetStringSettingValue_Params;
	memset(&GetStringSettingValue_Params, 0, sizeof(GetStringSettingValue_Params));
	memcpy_s(&GetStringSettingValue_Params.StringSettingId, sizeof(GetStringSettingValue_Params.StringSettingId), &StringSettingId, sizeof(StringSettingId));
	memcpy_s(&GetStringSettingValue_Params.ValueIndex, sizeof(GetStringSettingValue_Params.ValueIndex), &ValueIndex, sizeof(ValueIndex));

	uFnGetStringSettingValue->iNative = 0;
	uFnGetStringSettingValue->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetStringSettingValue, &GetStringSettingValue_Params, nullptr);
	uFnGetStringSettingValue->FunctionFlags |= 0x400;
	uFnGetStringSettingValue->iNative = 20769;

	memcpy_s(&ValueIndex, sizeof(ValueIndex), &GetStringSettingValue_Params.ValueIndex, sizeof(GetStringSettingValue_Params.ValueIndex));

	return GetStringSettingValue_Params.ReturnValue;
};

// Function Engine.Settings.SetStringSettingValue
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[25806])
// Parameter Info:
// int32_t                        StringSettingId                (CPF_Parm)
// int32_t                        ValueIndex                     (CPF_Parm)
// uint32_t                       bShouldAutoAdd                 (CPF_OptionalParm | CPF_Parm)

void USettings::SetStringSettingValue(int32_t StringSettingId, int32_t ValueIndex, bool bShouldAutoAdd)
{
	static UFunction* uFnSetStringSettingValue = nullptr;

	if (!uFnSetStringSettingValue)
	{
		uFnSetStringSettingValue = UFunction::FindFunction("Function Engine.Settings.SetStringSettingValue");
	}

	USettings_execSetStringSettingValue_Params SetStringSettingValue_Params;
	memset(&SetStringSettingValue_Params, 0, sizeof(SetStringSettingValue_Params));
	memcpy_s(&SetStringSettingValue_Params.StringSettingId, sizeof(SetStringSettingValue_Params.StringSettingId), &StringSettingId, sizeof(StringSettingId));
	memcpy_s(&SetStringSettingValue_Params.ValueIndex, sizeof(SetStringSettingValue_Params.ValueIndex), &ValueIndex, sizeof(ValueIndex));
	SetStringSettingValue_Params.bShouldAutoAdd = bShouldAutoAdd;

	uFnSetStringSettingValue->iNative = 0;
	uFnSetStringSettingValue->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetStringSettingValue, &SetStringSettingValue_Params, nullptr);
	uFnSetStringSettingValue->FunctionFlags |= 0x400;
	uFnSetStringSettingValue->iNative = 25806;
};

// Function Engine.Settings.GetSettingsDataDateTime
// [0x00422400] (FUNC_Native | FUNC_Static | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20749])
// Parameter Info:
// struct FSettingsData           Data                           (CPF_Parm | CPF_OutParm)
// int32_t                        OutInt1                        (CPF_Parm | CPF_OutParm)
// int32_t                        OutInt2                        (CPF_Parm | CPF_OutParm)

void USettings::GetSettingsDataDateTime(struct FSettingsData& Data, int32_t& OutInt1, int32_t& OutInt2)
{
	static UFunction* uFnGetSettingsDataDateTime = nullptr;

	if (!uFnGetSettingsDataDateTime)
	{
		uFnGetSettingsDataDateTime = UFunction::FindFunction("Function Engine.Settings.GetSettingsDataDateTime");
	}

	USettings_execGetSettingsDataDateTime_Params GetSettingsDataDateTime_Params;
	memset(&GetSettingsDataDateTime_Params, 0, sizeof(GetSettingsDataDateTime_Params));
	memcpy_s(&GetSettingsDataDateTime_Params.Data, sizeof(GetSettingsDataDateTime_Params.Data), &Data, sizeof(Data));
	memcpy_s(&GetSettingsDataDateTime_Params.OutInt1, sizeof(GetSettingsDataDateTime_Params.OutInt1), &OutInt1, sizeof(OutInt1));
	memcpy_s(&GetSettingsDataDateTime_Params.OutInt2, sizeof(GetSettingsDataDateTime_Params.OutInt2), &OutInt2, sizeof(OutInt2));

	uFnGetSettingsDataDateTime->iNative = 0;
	uFnGetSettingsDataDateTime->FunctionFlags &= ~0x400;
	USettings::StaticClass()->ProcessEvent(uFnGetSettingsDataDateTime, &GetSettingsDataDateTime_Params, nullptr);
	uFnGetSettingsDataDateTime->FunctionFlags |= 0x400;
	uFnGetSettingsDataDateTime->iNative = 20749;

	memcpy_s(&Data, sizeof(Data), &GetSettingsDataDateTime_Params.Data, sizeof(GetSettingsDataDateTime_Params.Data));
	memcpy_s(&OutInt1, sizeof(OutInt1), &GetSettingsDataDateTime_Params.OutInt1, sizeof(GetSettingsDataDateTime_Params.OutInt1));
	memcpy_s(&OutInt2, sizeof(OutInt2), &GetSettingsDataDateTime_Params.OutInt2, sizeof(GetSettingsDataDateTime_Params.OutInt2));
};

// Function Engine.Settings.GetSettingsDataBlob
// [0x00422400] (FUNC_Native | FUNC_Static | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20748])
// Parameter Info:
// struct FSettingsData           Data                           (CPF_Parm | CPF_OutParm)
// class TArray<uint8_t>          OutBlob                        (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void USettings::GetSettingsDataBlob(struct FSettingsData& Data, class TArray<uint8_t>& OutBlob)
{
	static UFunction* uFnGetSettingsDataBlob = nullptr;

	if (!uFnGetSettingsDataBlob)
	{
		uFnGetSettingsDataBlob = UFunction::FindFunction("Function Engine.Settings.GetSettingsDataBlob");
	}

	USettings_execGetSettingsDataBlob_Params GetSettingsDataBlob_Params;
	memset(&GetSettingsDataBlob_Params, 0, sizeof(GetSettingsDataBlob_Params));
	memcpy_s(&GetSettingsDataBlob_Params.Data, sizeof(GetSettingsDataBlob_Params.Data), &Data, sizeof(Data));
	memcpy_s(&GetSettingsDataBlob_Params.OutBlob, sizeof(GetSettingsDataBlob_Params.OutBlob), &OutBlob, sizeof(OutBlob));

	uFnGetSettingsDataBlob->iNative = 0;
	uFnGetSettingsDataBlob->FunctionFlags &= ~0x400;
	USettings::StaticClass()->ProcessEvent(uFnGetSettingsDataBlob, &GetSettingsDataBlob_Params, nullptr);
	uFnGetSettingsDataBlob->FunctionFlags |= 0x400;
	uFnGetSettingsDataBlob->iNative = 20748;

	memcpy_s(&Data, sizeof(Data), &GetSettingsDataBlob_Params.Data, sizeof(GetSettingsDataBlob_Params.Data));
	memcpy_s(&OutBlob, sizeof(OutBlob), &GetSettingsDataBlob_Params.OutBlob, sizeof(GetSettingsDataBlob_Params.OutBlob));
};

// Function Engine.Settings.GetSettingsDataInt
// [0x00422400] (FUNC_Native | FUNC_Static | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20751])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FSettingsData           Data                           (CPF_Parm | CPF_OutParm)

int32_t USettings::GetSettingsDataInt(struct FSettingsData& Data)
{
	static UFunction* uFnGetSettingsDataInt = nullptr;

	if (!uFnGetSettingsDataInt)
	{
		uFnGetSettingsDataInt = UFunction::FindFunction("Function Engine.Settings.GetSettingsDataInt");
	}

	USettings_execGetSettingsDataInt_Params GetSettingsDataInt_Params;
	memset(&GetSettingsDataInt_Params, 0, sizeof(GetSettingsDataInt_Params));
	memcpy_s(&GetSettingsDataInt_Params.Data, sizeof(GetSettingsDataInt_Params.Data), &Data, sizeof(Data));

	uFnGetSettingsDataInt->iNative = 0;
	uFnGetSettingsDataInt->FunctionFlags &= ~0x400;
	USettings::StaticClass()->ProcessEvent(uFnGetSettingsDataInt, &GetSettingsDataInt_Params, nullptr);
	uFnGetSettingsDataInt->FunctionFlags |= 0x400;
	uFnGetSettingsDataInt->iNative = 20751;

	memcpy_s(&Data, sizeof(Data), &GetSettingsDataInt_Params.Data, sizeof(GetSettingsDataInt_Params.Data));

	return GetSettingsDataInt_Params.ReturnValue;
};

// Function Engine.Settings.GetSettingsDataFloat
// [0x00422400] (FUNC_Native | FUNC_Static | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20750])
// Parameter Info:
// float                          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FSettingsData           Data                           (CPF_Parm | CPF_OutParm)

float USettings::GetSettingsDataFloat(struct FSettingsData& Data)
{
	static UFunction* uFnGetSettingsDataFloat = nullptr;

	if (!uFnGetSettingsDataFloat)
	{
		uFnGetSettingsDataFloat = UFunction::FindFunction("Function Engine.Settings.GetSettingsDataFloat");
	}

	USettings_execGetSettingsDataFloat_Params GetSettingsDataFloat_Params;
	memset(&GetSettingsDataFloat_Params, 0, sizeof(GetSettingsDataFloat_Params));
	memcpy_s(&GetSettingsDataFloat_Params.Data, sizeof(GetSettingsDataFloat_Params.Data), &Data, sizeof(Data));

	uFnGetSettingsDataFloat->iNative = 0;
	uFnGetSettingsDataFloat->FunctionFlags &= ~0x400;
	USettings::StaticClass()->ProcessEvent(uFnGetSettingsDataFloat, &GetSettingsDataFloat_Params, nullptr);
	uFnGetSettingsDataFloat->FunctionFlags |= 0x400;
	uFnGetSettingsDataFloat->iNative = 20750;

	memcpy_s(&Data, sizeof(Data), &GetSettingsDataFloat_Params.Data, sizeof(GetSettingsDataFloat_Params.Data));

	return GetSettingsDataFloat_Params.ReturnValue;
};

// Function Engine.Settings.GetSettingsDataString
// [0x00422400] (FUNC_Native | FUNC_Static | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20752])
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)
// struct FSettingsData           Data                           (CPF_Parm | CPF_OutParm)

class FString USettings::GetSettingsDataString(struct FSettingsData& Data)
{
	static UFunction* uFnGetSettingsDataString = nullptr;

	if (!uFnGetSettingsDataString)
	{
		uFnGetSettingsDataString = UFunction::FindFunction("Function Engine.Settings.GetSettingsDataString");
	}

	USettings_execGetSettingsDataString_Params GetSettingsDataString_Params;
	memset(&GetSettingsDataString_Params, 0, sizeof(GetSettingsDataString_Params));
	memcpy_s(&GetSettingsDataString_Params.Data, sizeof(GetSettingsDataString_Params.Data), &Data, sizeof(Data));

	uFnGetSettingsDataString->iNative = 0;
	uFnGetSettingsDataString->FunctionFlags &= ~0x400;
	USettings::StaticClass()->ProcessEvent(uFnGetSettingsDataString, &GetSettingsDataString_Params, nullptr);
	uFnGetSettingsDataString->FunctionFlags |= 0x400;
	uFnGetSettingsDataString->iNative = 20752;

	memcpy_s(&Data, sizeof(Data), &GetSettingsDataString_Params.Data, sizeof(GetSettingsDataString_Params.Data));

	return GetSettingsDataString_Params.ReturnValue;
};

// Function Engine.Settings.EmptySettingsData
// [0x00422400] (FUNC_Native | FUNC_Static | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[19535])
// Parameter Info:
// struct FSettingsData           Data                           (CPF_Parm | CPF_OutParm)

void USettings::EmptySettingsData(struct FSettingsData& Data)
{
	static UFunction* uFnEmptySettingsData = nullptr;

	if (!uFnEmptySettingsData)
	{
		uFnEmptySettingsData = UFunction::FindFunction("Function Engine.Settings.EmptySettingsData");
	}

	USettings_execEmptySettingsData_Params EmptySettingsData_Params;
	memset(&EmptySettingsData_Params, 0, sizeof(EmptySettingsData_Params));
	memcpy_s(&EmptySettingsData_Params.Data, sizeof(EmptySettingsData_Params.Data), &Data, sizeof(Data));

	uFnEmptySettingsData->iNative = 0;
	uFnEmptySettingsData->FunctionFlags &= ~0x400;
	USettings::StaticClass()->ProcessEvent(uFnEmptySettingsData, &EmptySettingsData_Params, nullptr);
	uFnEmptySettingsData->FunctionFlags |= 0x400;
	uFnEmptySettingsData->iNative = 19535;

	memcpy_s(&Data, sizeof(Data), &EmptySettingsData_Params.Data, sizeof(EmptySettingsData_Params.Data));
};

// Function Engine.Settings.SetSettingsData
// [0x00422400] (FUNC_Native | FUNC_Static | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[25782])
// Parameter Info:
// struct FSettingsData           Data                           (CPF_Parm | CPF_OutParm)
// struct FSettingsData           Data2Copy                      (CPF_Parm | CPF_OutParm)

void USettings::SetSettingsData(struct FSettingsData& Data, struct FSettingsData& Data2Copy)
{
	static UFunction* uFnSetSettingsData = nullptr;

	if (!uFnSetSettingsData)
	{
		uFnSetSettingsData = UFunction::FindFunction("Function Engine.Settings.SetSettingsData");
	}

	USettings_execSetSettingsData_Params SetSettingsData_Params;
	memset(&SetSettingsData_Params, 0, sizeof(SetSettingsData_Params));
	memcpy_s(&SetSettingsData_Params.Data, sizeof(SetSettingsData_Params.Data), &Data, sizeof(Data));
	memcpy_s(&SetSettingsData_Params.Data2Copy, sizeof(SetSettingsData_Params.Data2Copy), &Data2Copy, sizeof(Data2Copy));

	uFnSetSettingsData->iNative = 0;
	uFnSetSettingsData->FunctionFlags &= ~0x400;
	USettings::StaticClass()->ProcessEvent(uFnSetSettingsData, &SetSettingsData_Params, nullptr);
	uFnSetSettingsData->FunctionFlags |= 0x400;
	uFnSetSettingsData->iNative = 25782;

	memcpy_s(&Data, sizeof(Data), &SetSettingsData_Params.Data, sizeof(SetSettingsData_Params.Data));
	memcpy_s(&Data2Copy, sizeof(Data2Copy), &SetSettingsData_Params.Data2Copy, sizeof(SetSettingsData_Params.Data2Copy));
};

// Function Engine.Settings.SetSettingsDataBlob
// [0x00422400] (FUNC_Native | FUNC_Static | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[25783])
// Parameter Info:
// struct FSettingsData           Data                           (CPF_Parm | CPF_OutParm)
// class TArray<uint8_t>          InBlob                         (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void USettings::SetSettingsDataBlob(struct FSettingsData& Data, class TArray<uint8_t>& InBlob)
{
	static UFunction* uFnSetSettingsDataBlob = nullptr;

	if (!uFnSetSettingsDataBlob)
	{
		uFnSetSettingsDataBlob = UFunction::FindFunction("Function Engine.Settings.SetSettingsDataBlob");
	}

	USettings_execSetSettingsDataBlob_Params SetSettingsDataBlob_Params;
	memset(&SetSettingsDataBlob_Params, 0, sizeof(SetSettingsDataBlob_Params));
	memcpy_s(&SetSettingsDataBlob_Params.Data, sizeof(SetSettingsDataBlob_Params.Data), &Data, sizeof(Data));
	memcpy_s(&SetSettingsDataBlob_Params.InBlob, sizeof(SetSettingsDataBlob_Params.InBlob), &InBlob, sizeof(InBlob));

	uFnSetSettingsDataBlob->iNative = 0;
	uFnSetSettingsDataBlob->FunctionFlags &= ~0x400;
	USettings::StaticClass()->ProcessEvent(uFnSetSettingsDataBlob, &SetSettingsDataBlob_Params, nullptr);
	uFnSetSettingsDataBlob->FunctionFlags |= 0x400;
	uFnSetSettingsDataBlob->iNative = 25783;

	memcpy_s(&Data, sizeof(Data), &SetSettingsDataBlob_Params.Data, sizeof(SetSettingsDataBlob_Params.Data));
	memcpy_s(&InBlob, sizeof(InBlob), &SetSettingsDataBlob_Params.InBlob, sizeof(SetSettingsDataBlob_Params.InBlob));
};

// Function Engine.Settings.SetSettingsDataDateTime
// [0x00422400] (FUNC_Native | FUNC_Static | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[25784])
// Parameter Info:
// int32_t                        InInt1                         (CPF_Parm)
// int32_t                        InInt2                         (CPF_Parm)
// struct FSettingsData           Data                           (CPF_Parm | CPF_OutParm)

void USettings::SetSettingsDataDateTime(int32_t InInt1, int32_t InInt2, struct FSettingsData& Data)
{
	static UFunction* uFnSetSettingsDataDateTime = nullptr;

	if (!uFnSetSettingsDataDateTime)
	{
		uFnSetSettingsDataDateTime = UFunction::FindFunction("Function Engine.Settings.SetSettingsDataDateTime");
	}

	USettings_execSetSettingsDataDateTime_Params SetSettingsDataDateTime_Params;
	memset(&SetSettingsDataDateTime_Params, 0, sizeof(SetSettingsDataDateTime_Params));
	memcpy_s(&SetSettingsDataDateTime_Params.InInt1, sizeof(SetSettingsDataDateTime_Params.InInt1), &InInt1, sizeof(InInt1));
	memcpy_s(&SetSettingsDataDateTime_Params.InInt2, sizeof(SetSettingsDataDateTime_Params.InInt2), &InInt2, sizeof(InInt2));
	memcpy_s(&SetSettingsDataDateTime_Params.Data, sizeof(SetSettingsDataDateTime_Params.Data), &Data, sizeof(Data));

	uFnSetSettingsDataDateTime->iNative = 0;
	uFnSetSettingsDataDateTime->FunctionFlags &= ~0x400;
	USettings::StaticClass()->ProcessEvent(uFnSetSettingsDataDateTime, &SetSettingsDataDateTime_Params, nullptr);
	uFnSetSettingsDataDateTime->FunctionFlags |= 0x400;
	uFnSetSettingsDataDateTime->iNative = 25784;

	memcpy_s(&Data, sizeof(Data), &SetSettingsDataDateTime_Params.Data, sizeof(SetSettingsDataDateTime_Params.Data));
};

// Function Engine.Settings.SetSettingsDataInt
// [0x00422400] (FUNC_Native | FUNC_Static | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[25786])
// Parameter Info:
// int32_t                        InInt                          (CPF_Parm)
// struct FSettingsData           Data                           (CPF_Parm | CPF_OutParm)

void USettings::SetSettingsDataInt(int32_t InInt, struct FSettingsData& Data)
{
	static UFunction* uFnSetSettingsDataInt = nullptr;

	if (!uFnSetSettingsDataInt)
	{
		uFnSetSettingsDataInt = UFunction::FindFunction("Function Engine.Settings.SetSettingsDataInt");
	}

	USettings_execSetSettingsDataInt_Params SetSettingsDataInt_Params;
	memset(&SetSettingsDataInt_Params, 0, sizeof(SetSettingsDataInt_Params));
	memcpy_s(&SetSettingsDataInt_Params.InInt, sizeof(SetSettingsDataInt_Params.InInt), &InInt, sizeof(InInt));
	memcpy_s(&SetSettingsDataInt_Params.Data, sizeof(SetSettingsDataInt_Params.Data), &Data, sizeof(Data));

	uFnSetSettingsDataInt->iNative = 0;
	uFnSetSettingsDataInt->FunctionFlags &= ~0x400;
	USettings::StaticClass()->ProcessEvent(uFnSetSettingsDataInt, &SetSettingsDataInt_Params, nullptr);
	uFnSetSettingsDataInt->FunctionFlags |= 0x400;
	uFnSetSettingsDataInt->iNative = 25786;

	memcpy_s(&Data, sizeof(Data), &SetSettingsDataInt_Params.Data, sizeof(SetSettingsDataInt_Params.Data));
};

// Function Engine.Settings.SetSettingsDataFloat
// [0x00422400] (FUNC_Native | FUNC_Static | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[25785])
// Parameter Info:
// float                          InFloat                        (CPF_Parm)
// struct FSettingsData           Data                           (CPF_Parm | CPF_OutParm)

void USettings::SetSettingsDataFloat(float InFloat, struct FSettingsData& Data)
{
	static UFunction* uFnSetSettingsDataFloat = nullptr;

	if (!uFnSetSettingsDataFloat)
	{
		uFnSetSettingsDataFloat = UFunction::FindFunction("Function Engine.Settings.SetSettingsDataFloat");
	}

	USettings_execSetSettingsDataFloat_Params SetSettingsDataFloat_Params;
	memset(&SetSettingsDataFloat_Params, 0, sizeof(SetSettingsDataFloat_Params));
	memcpy_s(&SetSettingsDataFloat_Params.InFloat, sizeof(SetSettingsDataFloat_Params.InFloat), &InFloat, sizeof(InFloat));
	memcpy_s(&SetSettingsDataFloat_Params.Data, sizeof(SetSettingsDataFloat_Params.Data), &Data, sizeof(Data));

	uFnSetSettingsDataFloat->iNative = 0;
	uFnSetSettingsDataFloat->FunctionFlags &= ~0x400;
	USettings::StaticClass()->ProcessEvent(uFnSetSettingsDataFloat, &SetSettingsDataFloat_Params, nullptr);
	uFnSetSettingsDataFloat->FunctionFlags |= 0x400;
	uFnSetSettingsDataFloat->iNative = 25785;

	memcpy_s(&Data, sizeof(Data), &SetSettingsDataFloat_Params.Data, sizeof(SetSettingsDataFloat_Params.Data));
};

// Function Engine.Settings.SetSettingsDataString
// [0x00422400] (FUNC_Native | FUNC_Static | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[25787])
// Parameter Info:
// class FString                  InString                       (CPF_Parm | CPF_NeedCtorLink)
// struct FSettingsData           Data                           (CPF_Parm | CPF_OutParm)

void USettings::SetSettingsDataString(const class FString& InString, struct FSettingsData& Data)
{
	static UFunction* uFnSetSettingsDataString = nullptr;

	if (!uFnSetSettingsDataString)
	{
		uFnSetSettingsDataString = UFunction::FindFunction("Function Engine.Settings.SetSettingsDataString");
	}

	USettings_execSetSettingsDataString_Params SetSettingsDataString_Params;
	memset(&SetSettingsDataString_Params, 0, sizeof(SetSettingsDataString_Params));
	memcpy_s(&SetSettingsDataString_Params.InString, sizeof(SetSettingsDataString_Params.InString), &InString, sizeof(InString));
	memcpy_s(&SetSettingsDataString_Params.Data, sizeof(SetSettingsDataString_Params.Data), &Data, sizeof(Data));

	uFnSetSettingsDataString->iNative = 0;
	uFnSetSettingsDataString->FunctionFlags &= ~0x400;
	USettings::StaticClass()->ProcessEvent(uFnSetSettingsDataString, &SetSettingsDataString_Params, nullptr);
	uFnSetSettingsDataString->FunctionFlags |= 0x400;
	uFnSetSettingsDataString->iNative = 25787;

	memcpy_s(&Data, sizeof(Data), &SetSettingsDataString_Params.Data, sizeof(SetSettingsDataString_Params.Data));
};

// Function Engine.Settings.NotifyPropertyValueUpdated
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// class FName                    PropertyName                   (CPF_Parm)

void USettings::NotifyPropertyValueUpdated(const class FName& PropertyName)
{
	static UFunction* uFnNotifyPropertyValueUpdated = nullptr;

	if (!uFnNotifyPropertyValueUpdated)
	{
		uFnNotifyPropertyValueUpdated = UFunction::FindFunction("Function Engine.Settings.NotifyPropertyValueUpdated");
	}

	USettings_execNotifyPropertyValueUpdated_Params NotifyPropertyValueUpdated_Params;
	memset(&NotifyPropertyValueUpdated_Params, 0, sizeof(NotifyPropertyValueUpdated_Params));
	memcpy_s(&NotifyPropertyValueUpdated_Params.PropertyName, sizeof(NotifyPropertyValueUpdated_Params.PropertyName), &PropertyName, sizeof(PropertyName));

	this->ProcessEvent(uFnNotifyPropertyValueUpdated, &NotifyPropertyValueUpdated_Params, nullptr);
};

// Function Engine.Settings.NotifySettingValueUpdated
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// class FName                    SettingName                    (CPF_Parm)

void USettings::NotifySettingValueUpdated(const class FName& SettingName)
{
	static UFunction* uFnNotifySettingValueUpdated = nullptr;

	if (!uFnNotifySettingValueUpdated)
	{
		uFnNotifySettingValueUpdated = UFunction::FindFunction("Function Engine.Settings.NotifySettingValueUpdated");
	}

	USettings_execNotifySettingValueUpdated_Params NotifySettingValueUpdated_Params;
	memset(&NotifySettingValueUpdated_Params, 0, sizeof(NotifySettingValueUpdated_Params));
	memcpy_s(&NotifySettingValueUpdated_Params.SettingName, sizeof(NotifySettingValueUpdated_Params.SettingName), &SettingName, sizeof(SettingName));

	this->ProcessEvent(uFnNotifySettingValueUpdated, &NotifySettingValueUpdated_Params, nullptr);
};

// Function Engine.Texture2D.Create
// [0x00026401] (FUNC_Final | FUNC_Native | FUNC_Static | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[4014])
// Parameter Info:
// class UTexture2D*              ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        InSizeX                        (CPF_Parm)
// int32_t                        InSizeY                        (CPF_Parm)
// EPixelFormat                   InFormat                       (CPF_OptionalParm | CPF_Parm)

class UTexture2D* UTexture2D::Create(int32_t InSizeX, int32_t InSizeY, EPixelFormat InFormat)
{
	static UFunction* uFnCreate = nullptr;

	if (!uFnCreate)
	{
		uFnCreate = UFunction::FindFunction("Function Engine.Texture2D.Create");
	}

	UTexture2D_execCreate_Params Create_Params;
	memset(&Create_Params, 0, sizeof(Create_Params));
	memcpy_s(&Create_Params.InSizeX, sizeof(Create_Params.InSizeX), &InSizeX, sizeof(InSizeX));
	memcpy_s(&Create_Params.InSizeY, sizeof(Create_Params.InSizeY), &InSizeY, sizeof(InSizeY));
	memcpy_s(&Create_Params.InFormat, sizeof(Create_Params.InFormat), &InFormat, sizeof(InFormat));

	uFnCreate->iNative = 0;
	uFnCreate->FunctionFlags &= ~0x400;
	UTexture2D::StaticClass()->ProcessEvent(uFnCreate, &Create_Params, nullptr);
	uFnCreate->FunctionFlags |= 0x400;
	uFnCreate->iNative = 4014;

	return Create_Params.ReturnValue;
};

// Function Engine.Texture2D.SetForceMipLevelsToBeResident
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[25662])
// Parameter Info:
// float                          Seconds                        (CPF_Parm)
// int32_t                        CinematicTextureGroups         (CPF_OptionalParm | CPF_Parm)

void UTexture2D::SetForceMipLevelsToBeResident(float Seconds, int32_t CinematicTextureGroups)
{
	static UFunction* uFnSetForceMipLevelsToBeResident = nullptr;

	if (!uFnSetForceMipLevelsToBeResident)
	{
		uFnSetForceMipLevelsToBeResident = UFunction::FindFunction("Function Engine.Texture2D.SetForceMipLevelsToBeResident");
	}

	UTexture2D_execSetForceMipLevelsToBeResident_Params SetForceMipLevelsToBeResident_Params;
	memset(&SetForceMipLevelsToBeResident_Params, 0, sizeof(SetForceMipLevelsToBeResident_Params));
	memcpy_s(&SetForceMipLevelsToBeResident_Params.Seconds, sizeof(SetForceMipLevelsToBeResident_Params.Seconds), &Seconds, sizeof(Seconds));
	memcpy_s(&SetForceMipLevelsToBeResident_Params.CinematicTextureGroups, sizeof(SetForceMipLevelsToBeResident_Params.CinematicTextureGroups), &CinematicTextureGroups, sizeof(CinematicTextureGroups));

	uFnSetForceMipLevelsToBeResident->iNative = 0;
	uFnSetForceMipLevelsToBeResident->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetForceMipLevelsToBeResident, &SetForceMipLevelsToBeResident_Params, nullptr);
	uFnSetForceMipLevelsToBeResident->FunctionFlags |= 0x400;
	uFnSetForceMipLevelsToBeResident->iNative = 25662;
};

// Function Engine.TranslationContext.RegisterTranslatorTag
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25024])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UTranslatorTag*          InTagHandler                   (CPF_Parm)

bool UTranslationContext::RegisterTranslatorTag(class UTranslatorTag* InTagHandler)
{
	static UFunction* uFnRegisterTranslatorTag = nullptr;

	if (!uFnRegisterTranslatorTag)
	{
		uFnRegisterTranslatorTag = UFunction::FindFunction("Function Engine.TranslationContext.RegisterTranslatorTag");
	}

	UTranslationContext_execRegisterTranslatorTag_Params RegisterTranslatorTag_Params;
	memset(&RegisterTranslatorTag_Params, 0, sizeof(RegisterTranslatorTag_Params));
	RegisterTranslatorTag_Params.InTagHandler = InTagHandler;

	uFnRegisterTranslatorTag->iNative = 0;
	uFnRegisterTranslatorTag->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnRegisterTranslatorTag, &RegisterTranslatorTag_Params, nullptr);
	uFnRegisterTranslatorTag->FunctionFlags |= 0x400;
	uFnRegisterTranslatorTag->iNative = 25024;

	return RegisterTranslatorTag_Params.ReturnValue;
};

// Function Engine.TranslatorTag.Translate
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[6212])
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)
// class FName                    InArgument                     (CPF_Parm)

class FString UTranslatorTag::Translate(const class FName& InArgument)
{
	static UFunction* uFnTranslate = nullptr;

	if (!uFnTranslate)
	{
		uFnTranslate = UFunction::FindFunction("Function Engine.TranslatorTag.Translate");
	}

	UTranslatorTag_execTranslate_Params Translate_Params;
	memset(&Translate_Params, 0, sizeof(Translate_Params));
	memcpy_s(&Translate_Params.InArgument, sizeof(Translate_Params.InArgument), &InArgument, sizeof(InArgument));

	uFnTranslate->iNative = 0;
	uFnTranslate->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnTranslate, &Translate_Params, nullptr);
	uFnTranslate->FunctionFlags |= 0x400;
	uFnTranslate->iNative = 6212;

	return Translate_Params.ReturnValue;
};

// Function Engine.UIRoot.GetOnlinePlayerInterfaceEx
// [0x00022003] (FUNC_Final | FUNC_Defined | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UOnlinePlayerInterfaceEx* ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class UOnlinePlayerInterfaceEx* UUIRoot::GetOnlinePlayerInterfaceEx()
{
	static UFunction* uFnGetOnlinePlayerInterfaceEx = nullptr;

	if (!uFnGetOnlinePlayerInterfaceEx)
	{
		uFnGetOnlinePlayerInterfaceEx = UFunction::FindFunction("Function Engine.UIRoot.GetOnlinePlayerInterfaceEx");
	}

	UUIRoot_execGetOnlinePlayerInterfaceEx_Params GetOnlinePlayerInterfaceEx_Params;
	memset(&GetOnlinePlayerInterfaceEx_Params, 0, sizeof(GetOnlinePlayerInterfaceEx_Params));

	UUIRoot::StaticClass()->ProcessEvent(uFnGetOnlinePlayerInterfaceEx, &GetOnlinePlayerInterfaceEx_Params, nullptr);

	return GetOnlinePlayerInterfaceEx_Params.ReturnValue;
};

// Function Engine.UIRoot.GetOnlinePlayerInterface
// [0x00022003] (FUNC_Final | FUNC_Defined | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UOnlinePlayerInterface*  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class UOnlinePlayerInterface* UUIRoot::GetOnlinePlayerInterface()
{
	static UFunction* uFnGetOnlinePlayerInterface = nullptr;

	if (!uFnGetOnlinePlayerInterface)
	{
		uFnGetOnlinePlayerInterface = UFunction::FindFunction("Function Engine.UIRoot.GetOnlinePlayerInterface");
	}

	UUIRoot_execGetOnlinePlayerInterface_Params GetOnlinePlayerInterface_Params;
	memset(&GetOnlinePlayerInterface_Params, 0, sizeof(GetOnlinePlayerInterface_Params));

	UUIRoot::StaticClass()->ProcessEvent(uFnGetOnlinePlayerInterface, &GetOnlinePlayerInterface_Params, nullptr);

	return GetOnlinePlayerInterface_Params.ReturnValue;
};

// Function Engine.UIRoot.GetDataStoreStringValue
// [0x00C26002] (FUNC_Defined | FUNC_Static | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasOutParms | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FString                  InDataStoreMarkup              (CPF_Parm | CPF_NeedCtorLink)
// class ULocalPlayer*            OwnerPlayer                    (CPF_OptionalParm | CPF_Parm)
// class FString                  OutStringValue                 (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

bool UUIRoot::GetDataStoreStringValue(const class FString& InDataStoreMarkup, class ULocalPlayer* OwnerPlayer, class FString& OutStringValue)
{
	static UFunction* uFnGetDataStoreStringValue = nullptr;

	if (!uFnGetDataStoreStringValue)
	{
		uFnGetDataStoreStringValue = UFunction::FindFunction("Function Engine.UIRoot.GetDataStoreStringValue");
	}

	UUIRoot_execGetDataStoreStringValue_Params GetDataStoreStringValue_Params;
	memset(&GetDataStoreStringValue_Params, 0, sizeof(GetDataStoreStringValue_Params));
	memcpy_s(&GetDataStoreStringValue_Params.InDataStoreMarkup, sizeof(GetDataStoreStringValue_Params.InDataStoreMarkup), &InDataStoreMarkup, sizeof(InDataStoreMarkup));
	GetDataStoreStringValue_Params.OwnerPlayer = OwnerPlayer;
	memcpy_s(&GetDataStoreStringValue_Params.OutStringValue, sizeof(GetDataStoreStringValue_Params.OutStringValue), &OutStringValue, sizeof(OutStringValue));

	UUIRoot::StaticClass()->ProcessEvent(uFnGetDataStoreStringValue, &GetDataStoreStringValue_Params, nullptr);

	memcpy_s(&OutStringValue, sizeof(OutStringValue), &GetDataStoreStringValue_Params.OutStringValue, sizeof(GetDataStoreStringValue_Params.OutStringValue));

	return GetDataStoreStringValue_Params.ReturnValue;
};

// Function Engine.UIRoot.GetDataStoreFieldValue
// [0x00426401] (FUNC_Final | FUNC_Native | FUNC_Static | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20557])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FString                  InDataStoreMarkup              (CPF_Parm | CPF_NeedCtorLink)
// class ULocalPlayer*            OwnerPlayer                    (CPF_OptionalParm | CPF_Parm)
// struct FUIProviderFieldValue   OutFieldValue                  (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

bool UUIRoot::GetDataStoreFieldValue(const class FString& InDataStoreMarkup, class ULocalPlayer* OwnerPlayer, struct FUIProviderFieldValue& OutFieldValue)
{
	static UFunction* uFnGetDataStoreFieldValue = nullptr;

	if (!uFnGetDataStoreFieldValue)
	{
		uFnGetDataStoreFieldValue = UFunction::FindFunction("Function Engine.UIRoot.GetDataStoreFieldValue");
	}

	UUIRoot_execGetDataStoreFieldValue_Params GetDataStoreFieldValue_Params;
	memset(&GetDataStoreFieldValue_Params, 0, sizeof(GetDataStoreFieldValue_Params));
	memcpy_s(&GetDataStoreFieldValue_Params.InDataStoreMarkup, sizeof(GetDataStoreFieldValue_Params.InDataStoreMarkup), &InDataStoreMarkup, sizeof(InDataStoreMarkup));
	GetDataStoreFieldValue_Params.OwnerPlayer = OwnerPlayer;
	memcpy_s(&GetDataStoreFieldValue_Params.OutFieldValue, sizeof(GetDataStoreFieldValue_Params.OutFieldValue), &OutFieldValue, sizeof(OutFieldValue));

	uFnGetDataStoreFieldValue->iNative = 0;
	uFnGetDataStoreFieldValue->FunctionFlags &= ~0x400;
	UUIRoot::StaticClass()->ProcessEvent(uFnGetDataStoreFieldValue, &GetDataStoreFieldValue_Params, nullptr);
	uFnGetDataStoreFieldValue->FunctionFlags |= 0x400;
	uFnGetDataStoreFieldValue->iNative = 20557;

	memcpy_s(&OutFieldValue, sizeof(OutFieldValue), &GetDataStoreFieldValue_Params.OutFieldValue, sizeof(GetDataStoreFieldValue_Params.OutFieldValue));

	return GetDataStoreFieldValue_Params.ReturnValue;
};

// Function Engine.UIRoot.SetDataStoreStringValue
// [0x00826002] (FUNC_Defined | FUNC_Static | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FString                  InDataStoreMarkup              (CPF_Parm | CPF_NeedCtorLink)
// class FString                  InStringValue                  (CPF_Parm | CPF_NeedCtorLink)
// class ULocalPlayer*            OwnerPlayer                    (CPF_OptionalParm | CPF_Parm)

bool UUIRoot::SetDataStoreStringValue(const class FString& InDataStoreMarkup, const class FString& InStringValue, class ULocalPlayer* OwnerPlayer)
{
	static UFunction* uFnSetDataStoreStringValue = nullptr;

	if (!uFnSetDataStoreStringValue)
	{
		uFnSetDataStoreStringValue = UFunction::FindFunction("Function Engine.UIRoot.SetDataStoreStringValue");
	}

	UUIRoot_execSetDataStoreStringValue_Params SetDataStoreStringValue_Params;
	memset(&SetDataStoreStringValue_Params, 0, sizeof(SetDataStoreStringValue_Params));
	memcpy_s(&SetDataStoreStringValue_Params.InDataStoreMarkup, sizeof(SetDataStoreStringValue_Params.InDataStoreMarkup), &InDataStoreMarkup, sizeof(InDataStoreMarkup));
	memcpy_s(&SetDataStoreStringValue_Params.InStringValue, sizeof(SetDataStoreStringValue_Params.InStringValue), &InStringValue, sizeof(InStringValue));
	SetDataStoreStringValue_Params.OwnerPlayer = OwnerPlayer;

	UUIRoot::StaticClass()->ProcessEvent(uFnSetDataStoreStringValue, &SetDataStoreStringValue_Params, nullptr);

	return SetDataStoreStringValue_Params.ReturnValue;
};

// Function Engine.UIRoot.SetDataStoreFieldValue
// [0x00426401] (FUNC_Final | FUNC_Native | FUNC_Static | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[25632])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FString                  InDataStoreMarkup              (CPF_Parm | CPF_NeedCtorLink)
// class ULocalPlayer*            OwnerPlayer                    (CPF_OptionalParm | CPF_Parm)
// struct FUIProviderFieldValue   InFieldValue                   (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

bool UUIRoot::SetDataStoreFieldValue(const class FString& InDataStoreMarkup, class ULocalPlayer* OwnerPlayer, struct FUIProviderFieldValue& InFieldValue)
{
	static UFunction* uFnSetDataStoreFieldValue = nullptr;

	if (!uFnSetDataStoreFieldValue)
	{
		uFnSetDataStoreFieldValue = UFunction::FindFunction("Function Engine.UIRoot.SetDataStoreFieldValue");
	}

	UUIRoot_execSetDataStoreFieldValue_Params SetDataStoreFieldValue_Params;
	memset(&SetDataStoreFieldValue_Params, 0, sizeof(SetDataStoreFieldValue_Params));
	memcpy_s(&SetDataStoreFieldValue_Params.InDataStoreMarkup, sizeof(SetDataStoreFieldValue_Params.InDataStoreMarkup), &InDataStoreMarkup, sizeof(InDataStoreMarkup));
	SetDataStoreFieldValue_Params.OwnerPlayer = OwnerPlayer;
	memcpy_s(&SetDataStoreFieldValue_Params.InFieldValue, sizeof(SetDataStoreFieldValue_Params.InFieldValue), &InFieldValue, sizeof(InFieldValue));

	uFnSetDataStoreFieldValue->iNative = 0;
	uFnSetDataStoreFieldValue->FunctionFlags &= ~0x400;
	UUIRoot::StaticClass()->ProcessEvent(uFnSetDataStoreFieldValue, &SetDataStoreFieldValue_Params, nullptr);
	uFnSetDataStoreFieldValue->FunctionFlags |= 0x400;
	uFnSetDataStoreFieldValue->iNative = 25632;

	memcpy_s(&InFieldValue, sizeof(InFieldValue), &SetDataStoreFieldValue_Params.InFieldValue, sizeof(SetDataStoreFieldValue_Params.InFieldValue));

	return SetDataStoreFieldValue_Params.ReturnValue;
};

// Function Engine.UIRoot.StaticResolveDataStore
// [0x00026003] (FUNC_Final | FUNC_Defined | FUNC_Static | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UUIDataStore*            ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    DataStoreTag                   (CPF_Parm)
// class ULocalPlayer*            InPlayerOwner                  (CPF_OptionalParm | CPF_Parm)

class UUIDataStore* UUIRoot::StaticResolveDataStore(const class FName& DataStoreTag, class ULocalPlayer* InPlayerOwner)
{
	static UFunction* uFnStaticResolveDataStore = nullptr;

	if (!uFnStaticResolveDataStore)
	{
		uFnStaticResolveDataStore = UFunction::FindFunction("Function Engine.UIRoot.StaticResolveDataStore");
	}

	UUIRoot_execStaticResolveDataStore_Params StaticResolveDataStore_Params;
	memset(&StaticResolveDataStore_Params, 0, sizeof(StaticResolveDataStore_Params));
	memcpy_s(&StaticResolveDataStore_Params.DataStoreTag, sizeof(StaticResolveDataStore_Params.DataStoreTag), &DataStoreTag, sizeof(DataStoreTag));
	StaticResolveDataStore_Params.InPlayerOwner = InPlayerOwner;

	UUIRoot::StaticClass()->ProcessEvent(uFnStaticResolveDataStore, &StaticResolveDataStore_Params, nullptr);

	return StaticResolveDataStore_Params.ReturnValue;
};

// Function Engine.UIRoot.GetSceneClient
// [0x00022401] (FUNC_Final | FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags) (iNative[20743])
// Parameter Info:
// class UGameUISceneClient*      ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class UGameUISceneClient* UUIRoot::GetSceneClient()
{
	static UFunction* uFnGetSceneClient = nullptr;

	if (!uFnGetSceneClient)
	{
		uFnGetSceneClient = UFunction::FindFunction("Function Engine.UIRoot.GetSceneClient");
	}

	UUIRoot_execGetSceneClient_Params GetSceneClient_Params;
	memset(&GetSceneClient_Params, 0, sizeof(GetSceneClient_Params));

	uFnGetSceneClient->iNative = 0;
	uFnGetSceneClient->FunctionFlags &= ~0x400;
	UUIRoot::StaticClass()->ProcessEvent(uFnGetSceneClient, &GetSceneClient_Params, nullptr);
	uFnGetSceneClient->FunctionFlags |= 0x400;
	uFnGetSceneClient->iNative = 20743;

	return GetSceneClient_Params.ReturnValue;
};

// Function Engine.UIRoot.GetCurrentUIController
// [0x00022401] (FUNC_Final | FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags) (iNative[20548])
// Parameter Info:
// class UUIInteraction*          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class UUIInteraction* UUIRoot::GetCurrentUIController()
{
	static UFunction* uFnGetCurrentUIController = nullptr;

	if (!uFnGetCurrentUIController)
	{
		uFnGetCurrentUIController = UFunction::FindFunction("Function Engine.UIRoot.GetCurrentUIController");
	}

	UUIRoot_execGetCurrentUIController_Params GetCurrentUIController_Params;
	memset(&GetCurrentUIController_Params, 0, sizeof(GetCurrentUIController_Params));

	uFnGetCurrentUIController->iNative = 0;
	uFnGetCurrentUIController->FunctionFlags &= ~0x400;
	UUIRoot::StaticClass()->ProcessEvent(uFnGetCurrentUIController, &GetCurrentUIController_Params, nullptr);
	uFnGetCurrentUIController->FunctionFlags |= 0x400;
	uFnGetCurrentUIController->iNative = 20548;

	return GetCurrentUIController_Params.ReturnValue;
};

// Function Engine.UIRoot.GetInputPlatformType
// [0x00026401] (FUNC_Final | FUNC_Native | FUNC_Static | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[20607])
// Parameter Info:
// EInputPlatformType             ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class ULocalPlayer*            OwningPlayer                   (CPF_OptionalParm | CPF_Parm)

EInputPlatformType UUIRoot::GetInputPlatformType(class ULocalPlayer* OwningPlayer)
{
	static UFunction* uFnGetInputPlatformType = nullptr;

	if (!uFnGetInputPlatformType)
	{
		uFnGetInputPlatformType = UFunction::FindFunction("Function Engine.UIRoot.GetInputPlatformType");
	}

	UUIRoot_execGetInputPlatformType_Params GetInputPlatformType_Params;
	memset(&GetInputPlatformType_Params, 0, sizeof(GetInputPlatformType_Params));
	GetInputPlatformType_Params.OwningPlayer = OwningPlayer;

	uFnGetInputPlatformType->iNative = 0;
	uFnGetInputPlatformType->FunctionFlags &= ~0x400;
	UUIRoot::StaticClass()->ProcessEvent(uFnGetInputPlatformType, &GetInputPlatformType_Params, nullptr);
	uFnGetInputPlatformType->FunctionFlags |= 0x400;
	uFnGetInputPlatformType->iNative = 20607;

	return static_cast<EInputPlatformType>(GetInputPlatformType_Params.ReturnValue);
};

// Function Engine.Interaction.NotifyPlayerRemoved
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        PlayerIndex                    (CPF_Parm)
// class ULocalPlayer*            RemovedPlayer                  (CPF_Parm)

void UInteraction::NotifyPlayerRemoved(int32_t PlayerIndex, class ULocalPlayer* RemovedPlayer)
{
	static UFunction* uFnNotifyPlayerRemoved = nullptr;

	if (!uFnNotifyPlayerRemoved)
	{
		uFnNotifyPlayerRemoved = UFunction::FindFunction("Function Engine.Interaction.NotifyPlayerRemoved");
	}

	UInteraction_execNotifyPlayerRemoved_Params NotifyPlayerRemoved_Params;
	memset(&NotifyPlayerRemoved_Params, 0, sizeof(NotifyPlayerRemoved_Params));
	memcpy_s(&NotifyPlayerRemoved_Params.PlayerIndex, sizeof(NotifyPlayerRemoved_Params.PlayerIndex), &PlayerIndex, sizeof(PlayerIndex));
	NotifyPlayerRemoved_Params.RemovedPlayer = RemovedPlayer;

	this->ProcessEvent(uFnNotifyPlayerRemoved, &NotifyPlayerRemoved_Params, nullptr);
};

// Function Engine.Interaction.NotifyPlayerAdded
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        PlayerIndex                    (CPF_Parm)
// class ULocalPlayer*            AddedPlayer                    (CPF_Parm)

void UInteraction::NotifyPlayerAdded(int32_t PlayerIndex, class ULocalPlayer* AddedPlayer)
{
	static UFunction* uFnNotifyPlayerAdded = nullptr;

	if (!uFnNotifyPlayerAdded)
	{
		uFnNotifyPlayerAdded = UFunction::FindFunction("Function Engine.Interaction.NotifyPlayerAdded");
	}

	UInteraction_execNotifyPlayerAdded_Params NotifyPlayerAdded_Params;
	memset(&NotifyPlayerAdded_Params, 0, sizeof(NotifyPlayerAdded_Params));
	memcpy_s(&NotifyPlayerAdded_Params.PlayerIndex, sizeof(NotifyPlayerAdded_Params.PlayerIndex), &PlayerIndex, sizeof(PlayerIndex));
	NotifyPlayerAdded_Params.AddedPlayer = AddedPlayer;

	this->ProcessEvent(uFnNotifyPlayerAdded, &NotifyPlayerAdded_Params, nullptr);
};

// Function Engine.Interaction.NotifyGameSessionEnded
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UInteraction::NotifyGameSessionEnded()
{
	static UFunction* uFnNotifyGameSessionEnded = nullptr;

	if (!uFnNotifyGameSessionEnded)
	{
		uFnNotifyGameSessionEnded = UFunction::FindFunction("Function Engine.Interaction.NotifyGameSessionEnded");
	}

	UInteraction_execNotifyGameSessionEnded_Params NotifyGameSessionEnded_Params;
	memset(&NotifyGameSessionEnded_Params, 0, sizeof(NotifyGameSessionEnded_Params));

	this->ProcessEvent(uFnNotifyGameSessionEnded, &NotifyGameSessionEnded_Params, nullptr);
};

// Function Engine.Interaction.Initialized
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UInteraction::Initialized()
{
	static UFunction* uFnInitialized = nullptr;

	if (!uFnInitialized)
	{
		uFnInitialized = UFunction::FindFunction("Function Engine.Interaction.Initialized");
	}

	UInteraction_execInitialized_Params Initialized_Params;
	memset(&Initialized_Params, 0, sizeof(Initialized_Params));

	this->ProcessEvent(uFnInitialized, &Initialized_Params, nullptr);
};

// Function Engine.Interaction.OnInitialize
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:

void UInteraction::OnInitialize()
{
	static UFunction* uFnOnInitialize = nullptr;

	if (!uFnOnInitialize)
	{
		uFnOnInitialize = UFunction::FindFunction("Function Engine.Interaction.OnInitialize");
	}

	UInteraction_execOnInitialize_Params OnInitialize_Params;
	memset(&OnInitialize_Params, 0, sizeof(OnInitialize_Params));

	this->ProcessEvent(uFnOnInitialize, &OnInitialize_Params, nullptr);
};

// Function Engine.Interaction.Init
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[762])
// Parameter Info:

void UInteraction::Init()
{
	static UFunction* uFnInit = nullptr;

	if (!uFnInit)
	{
		uFnInit = UFunction::FindFunction("Function Engine.Interaction.Init");
	}

	UInteraction_execInit_Params Init_Params;
	memset(&Init_Params, 0, sizeof(Init_Params));

	uFnInit->iNative = 0;
	uFnInit->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnInit, &Init_Params, nullptr);
	uFnInit->FunctionFlags |= 0x400;
	uFnInit->iNative = 762;
};

// Function Engine.Interaction.PostRender
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UCanvas*                 Canvas                         (CPF_Parm)

void UInteraction::eventPostRender(class UCanvas* Canvas)
{
	static UFunction* uFnPostRender = nullptr;

	if (!uFnPostRender)
	{
		uFnPostRender = UFunction::FindFunction("Function Engine.Interaction.PostRender");
	}

	UInteraction_eventPostRender_Params PostRender_Params;
	memset(&PostRender_Params, 0, sizeof(PostRender_Params));
	PostRender_Params.Canvas = Canvas;

	this->ProcessEvent(uFnPostRender, &PostRender_Params, nullptr);
};

// Function Engine.Interaction.Tick
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          DeltaTime                      (CPF_Parm)

void UInteraction::eventTick(float DeltaTime)
{
	static UFunction* uFnTick = nullptr;

	if (!uFnTick)
	{
		uFnTick = UFunction::FindFunction("Function Engine.Interaction.Tick");
	}

	UInteraction_eventTick_Params Tick_Params;
	memset(&Tick_Params, 0, sizeof(Tick_Params));
	memcpy_s(&Tick_Params.DeltaTime, sizeof(Tick_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));

	this->ProcessEvent(uFnTick, &Tick_Params, nullptr);
};

// Function Engine.Interaction.OnReceivedNativeInputChar
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        ControllerId                   (CPF_Parm)
// class FString                  Unicode                        (CPF_Parm | CPF_NeedCtorLink)

bool UInteraction::OnReceivedNativeInputChar(int32_t ControllerId, const class FString& Unicode)
{
	static UFunction* uFnOnReceivedNativeInputChar = nullptr;

	if (!uFnOnReceivedNativeInputChar)
	{
		uFnOnReceivedNativeInputChar = UFunction::FindFunction("Function Engine.Interaction.OnReceivedNativeInputChar");
	}

	UInteraction_execOnReceivedNativeInputChar_Params OnReceivedNativeInputChar_Params;
	memset(&OnReceivedNativeInputChar_Params, 0, sizeof(OnReceivedNativeInputChar_Params));
	memcpy_s(&OnReceivedNativeInputChar_Params.ControllerId, sizeof(OnReceivedNativeInputChar_Params.ControllerId), &ControllerId, sizeof(ControllerId));
	memcpy_s(&OnReceivedNativeInputChar_Params.Unicode, sizeof(OnReceivedNativeInputChar_Params.Unicode), &Unicode, sizeof(Unicode));

	this->ProcessEvent(uFnOnReceivedNativeInputChar, &OnReceivedNativeInputChar_Params, nullptr);

	return OnReceivedNativeInputChar_Params.ReturnValue;
};

// Function Engine.Interaction.OnReceivedNativeInputAxis
// [0x00124000] (FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        ControllerId                   (CPF_Parm)
// class FName                    Key                            (CPF_Parm)
// float                          Delta                          (CPF_Parm)
// float                          DeltaTime                      (CPF_Parm)
// uint32_t                       bGamepad                       (CPF_OptionalParm | CPF_Parm)

bool UInteraction::OnReceivedNativeInputAxis(int32_t ControllerId, const class FName& Key, float Delta, float DeltaTime, bool bGamepad)
{
	static UFunction* uFnOnReceivedNativeInputAxis = nullptr;

	if (!uFnOnReceivedNativeInputAxis)
	{
		uFnOnReceivedNativeInputAxis = UFunction::FindFunction("Function Engine.Interaction.OnReceivedNativeInputAxis");
	}

	UInteraction_execOnReceivedNativeInputAxis_Params OnReceivedNativeInputAxis_Params;
	memset(&OnReceivedNativeInputAxis_Params, 0, sizeof(OnReceivedNativeInputAxis_Params));
	memcpy_s(&OnReceivedNativeInputAxis_Params.ControllerId, sizeof(OnReceivedNativeInputAxis_Params.ControllerId), &ControllerId, sizeof(ControllerId));
	memcpy_s(&OnReceivedNativeInputAxis_Params.Key, sizeof(OnReceivedNativeInputAxis_Params.Key), &Key, sizeof(Key));
	memcpy_s(&OnReceivedNativeInputAxis_Params.Delta, sizeof(OnReceivedNativeInputAxis_Params.Delta), &Delta, sizeof(Delta));
	memcpy_s(&OnReceivedNativeInputAxis_Params.DeltaTime, sizeof(OnReceivedNativeInputAxis_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));
	OnReceivedNativeInputAxis_Params.bGamepad = bGamepad;

	this->ProcessEvent(uFnOnReceivedNativeInputAxis, &OnReceivedNativeInputAxis_Params, nullptr);

	return OnReceivedNativeInputAxis_Params.ReturnValue;
};

// Function Engine.Interaction.OnReceivedNativeInputKey
// [0x00124000] (FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        ControllerId                   (CPF_Parm)
// class FName                    Key                            (CPF_Parm)
// EInputEvent                    EventType                      (CPF_Parm)
// float                          AmountDepressed                (CPF_OptionalParm | CPF_Parm)
// uint32_t                       bGamepad                       (CPF_OptionalParm | CPF_Parm)

bool UInteraction::OnReceivedNativeInputKey(int32_t ControllerId, const class FName& Key, EInputEvent EventType, float AmountDepressed, bool bGamepad)
{
	static UFunction* uFnOnReceivedNativeInputKey = nullptr;

	if (!uFnOnReceivedNativeInputKey)
	{
		uFnOnReceivedNativeInputKey = UFunction::FindFunction("Function Engine.Interaction.OnReceivedNativeInputKey");
	}

	UInteraction_execOnReceivedNativeInputKey_Params OnReceivedNativeInputKey_Params;
	memset(&OnReceivedNativeInputKey_Params, 0, sizeof(OnReceivedNativeInputKey_Params));
	memcpy_s(&OnReceivedNativeInputKey_Params.ControllerId, sizeof(OnReceivedNativeInputKey_Params.ControllerId), &ControllerId, sizeof(ControllerId));
	memcpy_s(&OnReceivedNativeInputKey_Params.Key, sizeof(OnReceivedNativeInputKey_Params.Key), &Key, sizeof(Key));
	memcpy_s(&OnReceivedNativeInputKey_Params.EventType, sizeof(OnReceivedNativeInputKey_Params.EventType), &EventType, sizeof(EventType));
	memcpy_s(&OnReceivedNativeInputKey_Params.AmountDepressed, sizeof(OnReceivedNativeInputKey_Params.AmountDepressed), &AmountDepressed, sizeof(AmountDepressed));
	OnReceivedNativeInputKey_Params.bGamepad = bGamepad;

	this->ProcessEvent(uFnOnReceivedNativeInputKey, &OnReceivedNativeInputKey_Params, nullptr);

	return OnReceivedNativeInputKey_Params.ReturnValue;
};

// Function Engine.UIInteraction.NotifyGameSessionEnded
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UUIInteraction::NotifyGameSessionEnded()
{
	static UFunction* uFnNotifyGameSessionEnded = nullptr;

	if (!uFnNotifyGameSessionEnded)
	{
		uFnNotifyGameSessionEnded = UFunction::FindFunction("Function Engine.UIInteraction.NotifyGameSessionEnded");
	}

	UUIInteraction_execNotifyGameSessionEnded_Params NotifyGameSessionEnded_Params;
	memset(&NotifyGameSessionEnded_Params, 0, sizeof(NotifyGameSessionEnded_Params));

	this->ProcessEvent(uFnNotifyGameSessionEnded, &NotifyGameSessionEnded_Params, nullptr);
};

// Function Engine.UIInteraction.GetNATType
// [0x00022803] (FUNC_Final | FUNC_Defined | FUNC_Event | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// ENATType                       ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

ENATType UUIInteraction::eventGetNATType()
{
	static UFunction* uFnGetNATType = nullptr;

	if (!uFnGetNATType)
	{
		uFnGetNATType = UFunction::FindFunction("Function Engine.UIInteraction.GetNATType");
	}

	UUIInteraction_eventGetNATType_Params GetNATType_Params;
	memset(&GetNATType_Params, 0, sizeof(GetNATType_Params));

	UUIInteraction::StaticClass()->ProcessEvent(uFnGetNATType, &GetNATType_Params, nullptr);

	return static_cast<ENATType>(GetNATType_Params.ReturnValue);
};

// Function Engine.UIInteraction.GetConnectedGamepadCount
// [0x00026003] (FUNC_Final | FUNC_Defined | FUNC_Static | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class TArray<uint32_t>         ControllerConnectionStatusOverrides (CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink)

int32_t UUIInteraction::GetConnectedGamepadCount(const class TArray<uint32_t>& ControllerConnectionStatusOverrides)
{
	static UFunction* uFnGetConnectedGamepadCount = nullptr;

	if (!uFnGetConnectedGamepadCount)
	{
		uFnGetConnectedGamepadCount = UFunction::FindFunction("Function Engine.UIInteraction.GetConnectedGamepadCount");
	}

	UUIInteraction_execGetConnectedGamepadCount_Params GetConnectedGamepadCount_Params;
	memset(&GetConnectedGamepadCount_Params, 0, sizeof(GetConnectedGamepadCount_Params));
	memcpy_s(&GetConnectedGamepadCount_Params.ControllerConnectionStatusOverrides, sizeof(GetConnectedGamepadCount_Params.ControllerConnectionStatusOverrides), &ControllerConnectionStatusOverrides, sizeof(ControllerConnectionStatusOverrides));

	UUIInteraction::StaticClass()->ProcessEvent(uFnGetConnectedGamepadCount, &GetConnectedGamepadCount_Params, nullptr);

	return GetConnectedGamepadCount_Params.ReturnValue;
};

// Function Engine.UIInteraction.IsGamepadConnected
// [0x00022003] (FUNC_Final | FUNC_Defined | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        ControllerId                   (CPF_Parm)

bool UUIInteraction::IsGamepadConnected(int32_t ControllerId)
{
	static UFunction* uFnIsGamepadConnected = nullptr;

	if (!uFnIsGamepadConnected)
	{
		uFnIsGamepadConnected = UFunction::FindFunction("Function Engine.UIInteraction.IsGamepadConnected");
	}

	UUIInteraction_execIsGamepadConnected_Params IsGamepadConnected_Params;
	memset(&IsGamepadConnected_Params, 0, sizeof(IsGamepadConnected_Params));
	memcpy_s(&IsGamepadConnected_Params.ControllerId, sizeof(IsGamepadConnected_Params.ControllerId), &ControllerId, sizeof(ControllerId));

	UUIInteraction::StaticClass()->ProcessEvent(uFnIsGamepadConnected, &IsGamepadConnected_Params, nullptr);

	return IsGamepadConnected_Params.ReturnValue;
};

// Function Engine.UIInteraction.GetNumGuestsLoggedIn
// [0x00022003] (FUNC_Final | FUNC_Defined | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t UUIInteraction::GetNumGuestsLoggedIn()
{
	static UFunction* uFnGetNumGuestsLoggedIn = nullptr;

	if (!uFnGetNumGuestsLoggedIn)
	{
		uFnGetNumGuestsLoggedIn = UFunction::FindFunction("Function Engine.UIInteraction.GetNumGuestsLoggedIn");
	}

	UUIInteraction_execGetNumGuestsLoggedIn_Params GetNumGuestsLoggedIn_Params;
	memset(&GetNumGuestsLoggedIn_Params, 0, sizeof(GetNumGuestsLoggedIn_Params));

	UUIInteraction::StaticClass()->ProcessEvent(uFnGetNumGuestsLoggedIn, &GetNumGuestsLoggedIn_Params, nullptr);

	return GetNumGuestsLoggedIn_Params.ReturnValue;
};

// Function Engine.UIInteraction.GetLoggedInPlayerCount
// [0x00026003] (FUNC_Final | FUNC_Defined | FUNC_Static | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       bRequireOnlineLogin            (CPF_OptionalParm | CPF_Parm)

int32_t UUIInteraction::GetLoggedInPlayerCount(bool bRequireOnlineLogin)
{
	static UFunction* uFnGetLoggedInPlayerCount = nullptr;

	if (!uFnGetLoggedInPlayerCount)
	{
		uFnGetLoggedInPlayerCount = UFunction::FindFunction("Function Engine.UIInteraction.GetLoggedInPlayerCount");
	}

	UUIInteraction_execGetLoggedInPlayerCount_Params GetLoggedInPlayerCount_Params;
	memset(&GetLoggedInPlayerCount_Params, 0, sizeof(GetLoggedInPlayerCount_Params));
	GetLoggedInPlayerCount_Params.bRequireOnlineLogin = bRequireOnlineLogin;

	UUIInteraction::StaticClass()->ProcessEvent(uFnGetLoggedInPlayerCount, &GetLoggedInPlayerCount_Params, nullptr);

	return GetLoggedInPlayerCount_Params.ReturnValue;
};

// Function Engine.UIInteraction.IsLoggedIn
// [0x00026803] (FUNC_Final | FUNC_Defined | FUNC_Event | FUNC_Static | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        ControllerId                   (CPF_Parm)
// uint32_t                       bRequireOnlineLogin            (CPF_OptionalParm | CPF_Parm)

bool UUIInteraction::eventIsLoggedIn(int32_t ControllerId, bool bRequireOnlineLogin)
{
	static UFunction* uFnIsLoggedIn = nullptr;

	if (!uFnIsLoggedIn)
	{
		uFnIsLoggedIn = UFunction::FindFunction("Function Engine.UIInteraction.IsLoggedIn");
	}

	UUIInteraction_eventIsLoggedIn_Params IsLoggedIn_Params;
	memset(&IsLoggedIn_Params, 0, sizeof(IsLoggedIn_Params));
	memcpy_s(&IsLoggedIn_Params.ControllerId, sizeof(IsLoggedIn_Params.ControllerId), &ControllerId, sizeof(ControllerId));
	IsLoggedIn_Params.bRequireOnlineLogin = bRequireOnlineLogin;

	UUIInteraction::StaticClass()->ProcessEvent(uFnIsLoggedIn, &IsLoggedIn_Params, nullptr);

	return IsLoggedIn_Params.ReturnValue;
};

// Function Engine.UIInteraction.HasLinkConnection
// [0x00022803] (FUNC_Final | FUNC_Defined | FUNC_Event | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UUIInteraction::eventHasLinkConnection()
{
	static UFunction* uFnHasLinkConnection = nullptr;

	if (!uFnHasLinkConnection)
	{
		uFnHasLinkConnection = UFunction::FindFunction("Function Engine.UIInteraction.HasLinkConnection");
	}

	UUIInteraction_eventHasLinkConnection_Params HasLinkConnection_Params;
	memset(&HasLinkConnection_Params, 0, sizeof(HasLinkConnection_Params));

	UUIInteraction::StaticClass()->ProcessEvent(uFnHasLinkConnection, &HasLinkConnection_Params, nullptr);

	return HasLinkConnection_Params.ReturnValue;
};

// Function Engine.UIInteraction.GetLowestLoginStatusOfControllers
// [0x00020003] (FUNC_Final | FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// ELoginStatus                   ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

ELoginStatus UUIInteraction::GetLowestLoginStatusOfControllers()
{
	static UFunction* uFnGetLowestLoginStatusOfControllers = nullptr;

	if (!uFnGetLowestLoginStatusOfControllers)
	{
		uFnGetLowestLoginStatusOfControllers = UFunction::FindFunction("Function Engine.UIInteraction.GetLowestLoginStatusOfControllers");
	}

	UUIInteraction_execGetLowestLoginStatusOfControllers_Params GetLowestLoginStatusOfControllers_Params;
	memset(&GetLowestLoginStatusOfControllers_Params, 0, sizeof(GetLowestLoginStatusOfControllers_Params));

	this->ProcessEvent(uFnGetLowestLoginStatusOfControllers, &GetLowestLoginStatusOfControllers_Params, nullptr);

	return static_cast<ELoginStatus>(GetLowestLoginStatusOfControllers_Params.ReturnValue);
};

// Function Engine.UIInteraction.GetLoginStatus
// [0x00022803] (FUNC_Final | FUNC_Defined | FUNC_Event | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// ELoginStatus                   ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        ControllerId                   (CPF_Parm)

ELoginStatus UUIInteraction::eventGetLoginStatus(int32_t ControllerId)
{
	static UFunction* uFnGetLoginStatus = nullptr;

	if (!uFnGetLoginStatus)
	{
		uFnGetLoginStatus = UFunction::FindFunction("Function Engine.UIInteraction.GetLoginStatus");
	}

	UUIInteraction_eventGetLoginStatus_Params GetLoginStatus_Params;
	memset(&GetLoginStatus_Params, 0, sizeof(GetLoginStatus_Params));
	memcpy_s(&GetLoginStatus_Params.ControllerId, sizeof(GetLoginStatus_Params.ControllerId), &ControllerId, sizeof(ControllerId));

	UUIInteraction::StaticClass()->ProcessEvent(uFnGetLoginStatus, &GetLoginStatus_Params, nullptr);

	return static_cast<ELoginStatus>(GetLoginStatus_Params.ReturnValue);
};

// Function Engine.UIInteraction.NotifyPlayerRemoved
// [0x00820002] (FUNC_Defined | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// int32_t                        PlayerIndex                    (CPF_Parm)
// class ULocalPlayer*            RemovedPlayer                  (CPF_Parm)

void UUIInteraction::NotifyPlayerRemoved(int32_t PlayerIndex, class ULocalPlayer* RemovedPlayer)
{
	static UFunction* uFnNotifyPlayerRemoved = nullptr;

	if (!uFnNotifyPlayerRemoved)
	{
		uFnNotifyPlayerRemoved = UFunction::FindFunction("Function Engine.UIInteraction.NotifyPlayerRemoved");
	}

	UUIInteraction_execNotifyPlayerRemoved_Params NotifyPlayerRemoved_Params;
	memset(&NotifyPlayerRemoved_Params, 0, sizeof(NotifyPlayerRemoved_Params));
	memcpy_s(&NotifyPlayerRemoved_Params.PlayerIndex, sizeof(NotifyPlayerRemoved_Params.PlayerIndex), &PlayerIndex, sizeof(PlayerIndex));
	NotifyPlayerRemoved_Params.RemovedPlayer = RemovedPlayer;

	this->ProcessEvent(uFnNotifyPlayerRemoved, &NotifyPlayerRemoved_Params, nullptr);
};

// Function Engine.UIInteraction.NotifyPlayerAdded
// [0x00820002] (FUNC_Defined | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// int32_t                        PlayerIndex                    (CPF_Parm)
// class ULocalPlayer*            AddedPlayer                    (CPF_Parm)

void UUIInteraction::NotifyPlayerAdded(int32_t PlayerIndex, class ULocalPlayer* AddedPlayer)
{
	static UFunction* uFnNotifyPlayerAdded = nullptr;

	if (!uFnNotifyPlayerAdded)
	{
		uFnNotifyPlayerAdded = UFunction::FindFunction("Function Engine.UIInteraction.NotifyPlayerAdded");
	}

	UUIInteraction_execNotifyPlayerAdded_Params NotifyPlayerAdded_Params;
	memset(&NotifyPlayerAdded_Params, 0, sizeof(NotifyPlayerAdded_Params));
	memcpy_s(&NotifyPlayerAdded_Params.PlayerIndex, sizeof(NotifyPlayerAdded_Params.PlayerIndex), &PlayerIndex, sizeof(PlayerIndex));
	NotifyPlayerAdded_Params.AddedPlayer = AddedPlayer;

	this->ProcessEvent(uFnNotifyPlayerAdded, &NotifyPlayerAdded_Params, nullptr);
};

// Function Engine.UIInteraction.GetLocalPlayer
// [0x00022003] (FUNC_Final | FUNC_Defined | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class ULocalPlayer*            ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        PlayerIndex                    (CPF_Parm)

class ULocalPlayer* UUIInteraction::GetLocalPlayer(int32_t PlayerIndex)
{
	static UFunction* uFnGetLocalPlayer = nullptr;

	if (!uFnGetLocalPlayer)
	{
		uFnGetLocalPlayer = UFunction::FindFunction("Function Engine.UIInteraction.GetLocalPlayer");
	}

	UUIInteraction_execGetLocalPlayer_Params GetLocalPlayer_Params;
	memset(&GetLocalPlayer_Params, 0, sizeof(GetLocalPlayer_Params));
	memcpy_s(&GetLocalPlayer_Params.PlayerIndex, sizeof(GetLocalPlayer_Params.PlayerIndex), &PlayerIndex, sizeof(PlayerIndex));

	UUIInteraction::StaticClass()->ProcessEvent(uFnGetLocalPlayer, &GetLocalPlayer_Params, nullptr);

	return GetLocalPlayer_Params.ReturnValue;
};

// Function Engine.UIInteraction.GetDataStoreClient
// [0x00022401] (FUNC_Final | FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags) (iNative[20556])
// Parameter Info:
// class UDataStoreClient*        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class UDataStoreClient* UUIInteraction::GetDataStoreClient()
{
	static UFunction* uFnGetDataStoreClient = nullptr;

	if (!uFnGetDataStoreClient)
	{
		uFnGetDataStoreClient = UFunction::FindFunction("Function Engine.UIInteraction.GetDataStoreClient");
	}

	UUIInteraction_execGetDataStoreClient_Params GetDataStoreClient_Params;
	memset(&GetDataStoreClient_Params, 0, sizeof(GetDataStoreClient_Params));

	uFnGetDataStoreClient->iNative = 0;
	uFnGetDataStoreClient->FunctionFlags &= ~0x400;
	UUIInteraction::StaticClass()->ProcessEvent(uFnGetDataStoreClient, &GetDataStoreClient_Params, nullptr);
	uFnGetDataStoreClient->FunctionFlags |= 0x400;
	uFnGetDataStoreClient->iNative = 20556;

	return GetDataStoreClient_Params.ReturnValue;
};

// Function Engine.UIInteraction.GetPlayerControllerId
// [0x00022401] (FUNC_Final | FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags) (iNative[20679])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        PlayerIndex                    (CPF_Parm)

int32_t UUIInteraction::GetPlayerControllerId(int32_t PlayerIndex)
{
	static UFunction* uFnGetPlayerControllerId = nullptr;

	if (!uFnGetPlayerControllerId)
	{
		uFnGetPlayerControllerId = UFunction::FindFunction("Function Engine.UIInteraction.GetPlayerControllerId");
	}

	UUIInteraction_execGetPlayerControllerId_Params GetPlayerControllerId_Params;
	memset(&GetPlayerControllerId_Params, 0, sizeof(GetPlayerControllerId_Params));
	memcpy_s(&GetPlayerControllerId_Params.PlayerIndex, sizeof(GetPlayerControllerId_Params.PlayerIndex), &PlayerIndex, sizeof(PlayerIndex));

	uFnGetPlayerControllerId->iNative = 0;
	uFnGetPlayerControllerId->FunctionFlags &= ~0x400;
	UUIInteraction::StaticClass()->ProcessEvent(uFnGetPlayerControllerId, &GetPlayerControllerId_Params, nullptr);
	uFnGetPlayerControllerId->FunctionFlags |= 0x400;
	uFnGetPlayerControllerId->iNative = 20679;

	return GetPlayerControllerId_Params.ReturnValue;
};

// Function Engine.UIInteraction.GetPlayerIndex
// [0x00022401] (FUNC_Final | FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags) (iNative[20682])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        ControllerId                   (CPF_Parm)

int32_t UUIInteraction::GetPlayerIndex(int32_t ControllerId)
{
	static UFunction* uFnGetPlayerIndex = nullptr;

	if (!uFnGetPlayerIndex)
	{
		uFnGetPlayerIndex = UFunction::FindFunction("Function Engine.UIInteraction.GetPlayerIndex");
	}

	UUIInteraction_execGetPlayerIndex_Params GetPlayerIndex_Params;
	memset(&GetPlayerIndex_Params, 0, sizeof(GetPlayerIndex_Params));
	memcpy_s(&GetPlayerIndex_Params.ControllerId, sizeof(GetPlayerIndex_Params.ControllerId), &ControllerId, sizeof(ControllerId));

	uFnGetPlayerIndex->iNative = 0;
	uFnGetPlayerIndex->FunctionFlags &= ~0x400;
	UUIInteraction::StaticClass()->ProcessEvent(uFnGetPlayerIndex, &GetPlayerIndex_Params, nullptr);
	uFnGetPlayerIndex->FunctionFlags |= 0x400;
	uFnGetPlayerIndex->iNative = 20682;

	return GetPlayerIndex_Params.ReturnValue;
};

// Function Engine.UIInteraction.GetPlayerCount
// [0x00022401] (FUNC_Final | FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags) (iNative[20680])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t UUIInteraction::GetPlayerCount()
{
	static UFunction* uFnGetPlayerCount = nullptr;

	if (!uFnGetPlayerCount)
	{
		uFnGetPlayerCount = UFunction::FindFunction("Function Engine.UIInteraction.GetPlayerCount");
	}

	UUIInteraction_execGetPlayerCount_Params GetPlayerCount_Params;
	memset(&GetPlayerCount_Params, 0, sizeof(GetPlayerCount_Params));

	uFnGetPlayerCount->iNative = 0;
	uFnGetPlayerCount->FunctionFlags &= ~0x400;
	UUIInteraction::StaticClass()->ProcessEvent(uFnGetPlayerCount, &GetPlayerCount_Params, nullptr);
	uFnGetPlayerCount->FunctionFlags |= 0x400;
	uFnGetPlayerCount->iNative = 20680;

	return GetPlayerCount_Params.ReturnValue;
};

// Function Engine.UIManager.NotifyPlayerRemoved
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        PlayerIndex                    (CPF_Parm)
// class ULocalPlayer*            RemovedPlayer                  (CPF_Parm)

void UUIManager::NotifyPlayerRemoved(int32_t PlayerIndex, class ULocalPlayer* RemovedPlayer)
{
	static UFunction* uFnNotifyPlayerRemoved = nullptr;

	if (!uFnNotifyPlayerRemoved)
	{
		uFnNotifyPlayerRemoved = UFunction::FindFunction("Function Engine.UIManager.NotifyPlayerRemoved");
	}

	UUIManager_execNotifyPlayerRemoved_Params NotifyPlayerRemoved_Params;
	memset(&NotifyPlayerRemoved_Params, 0, sizeof(NotifyPlayerRemoved_Params));
	memcpy_s(&NotifyPlayerRemoved_Params.PlayerIndex, sizeof(NotifyPlayerRemoved_Params.PlayerIndex), &PlayerIndex, sizeof(PlayerIndex));
	NotifyPlayerRemoved_Params.RemovedPlayer = RemovedPlayer;

	this->ProcessEvent(uFnNotifyPlayerRemoved, &NotifyPlayerRemoved_Params, nullptr);
};

// Function Engine.UIManager.NotifyPlayerAdded
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        PlayerIndex                    (CPF_Parm)
// class ULocalPlayer*            AddedPlayer                    (CPF_Parm)

void UUIManager::NotifyPlayerAdded(int32_t PlayerIndex, class ULocalPlayer* AddedPlayer)
{
	static UFunction* uFnNotifyPlayerAdded = nullptr;

	if (!uFnNotifyPlayerAdded)
	{
		uFnNotifyPlayerAdded = UFunction::FindFunction("Function Engine.UIManager.NotifyPlayerAdded");
	}

	UUIManager_execNotifyPlayerAdded_Params NotifyPlayerAdded_Params;
	memset(&NotifyPlayerAdded_Params, 0, sizeof(NotifyPlayerAdded_Params));
	memcpy_s(&NotifyPlayerAdded_Params.PlayerIndex, sizeof(NotifyPlayerAdded_Params.PlayerIndex), &PlayerIndex, sizeof(PlayerIndex));
	NotifyPlayerAdded_Params.AddedPlayer = AddedPlayer;

	this->ProcessEvent(uFnNotifyPlayerAdded, &NotifyPlayerAdded_Params, nullptr);
};

// Function Engine.UIManager.PauseGame
// [0x00024802] (FUNC_Defined | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bDesiredPauseState             (CPF_Parm)
// int32_t                        PlayerIndex                    (CPF_OptionalParm | CPF_Parm)

void UUIManager::eventPauseGame(bool bDesiredPauseState, int32_t PlayerIndex)
{
	static UFunction* uFnPauseGame = nullptr;

	if (!uFnPauseGame)
	{
		uFnPauseGame = UFunction::FindFunction("Function Engine.UIManager.PauseGame");
	}

	UUIManager_eventPauseGame_Params PauseGame_Params;
	memset(&PauseGame_Params, 0, sizeof(PauseGame_Params));
	PauseGame_Params.bDesiredPauseState = bDesiredPauseState;
	memcpy_s(&PauseGame_Params.PlayerIndex, sizeof(PauseGame_Params.PlayerIndex), &PlayerIndex, sizeof(PlayerIndex));

	this->ProcessEvent(uFnPauseGame, &PauseGame_Params, nullptr);
};

// Function Engine.UIManager.CanUnpauseInternalUI
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[17966])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UUIManager::CanUnpauseInternalUI()
{
	static UFunction* uFnCanUnpauseInternalUI = nullptr;

	if (!uFnCanUnpauseInternalUI)
	{
		uFnCanUnpauseInternalUI = UFunction::FindFunction("Function Engine.UIManager.CanUnpauseInternalUI");
	}

	UUIManager_execCanUnpauseInternalUI_Params CanUnpauseInternalUI_Params;
	memset(&CanUnpauseInternalUI_Params, 0, sizeof(CanUnpauseInternalUI_Params));

	uFnCanUnpauseInternalUI->iNative = 0;
	uFnCanUnpauseInternalUI->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnCanUnpauseInternalUI, &CanUnpauseInternalUI_Params, nullptr);
	uFnCanUnpauseInternalUI->FunctionFlags |= 0x400;
	uFnCanUnpauseInternalUI->iNative = 17966;

	return CanUnpauseInternalUI_Params.ReturnValue;
};

// Function Engine.UIManager.GetUIManager
// [0x00022401] (FUNC_Final | FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags) (iNative[20800])
// Parameter Info:
// class UUIManager*              ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class UUIManager* UUIManager::GetUIManager()
{
	static UFunction* uFnGetUIManager = nullptr;

	if (!uFnGetUIManager)
	{
		uFnGetUIManager = UFunction::FindFunction("Function Engine.UIManager.GetUIManager");
	}

	UUIManager_execGetUIManager_Params GetUIManager_Params;
	memset(&GetUIManager_Params, 0, sizeof(GetUIManager_Params));

	uFnGetUIManager->iNative = 0;
	uFnGetUIManager->FunctionFlags &= ~0x400;
	UUIManager::StaticClass()->ProcessEvent(uFnGetUIManager, &GetUIManager_Params, nullptr);
	uFnGetUIManager->FunctionFlags |= 0x400;
	uFnGetUIManager->iNative = 20800;

	return GetUIManager_Params.ReturnValue;
};

// Function Engine.CrowdAgentBase.NotifyPathChanged
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void ACrowdAgentBase::eventNotifyPathChanged()
{
	static UFunction* uFnNotifyPathChanged = nullptr;

	if (!uFnNotifyPathChanged)
	{
		uFnNotifyPathChanged = UFunction::FindFunction("Function Engine.CrowdAgentBase.NotifyPathChanged");
	}

	ACrowdAgentBase_eventNotifyPathChanged_Params NotifyPathChanged_Params;
	memset(&NotifyPathChanged_Params, 0, sizeof(NotifyPathChanged_Params));

	this->ProcessEvent(uFnNotifyPathChanged, &NotifyPathChanged_Params, nullptr);
};

// Function Engine.PathTargetPoint.ShouldBeHiddenBySHOW_NavigationNodes
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25894])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool APathTargetPoint::ShouldBeHiddenBySHOW_NavigationNodes()
{
	static UFunction* uFnShouldBeHiddenBySHOW_NavigationNodes = nullptr;

	if (!uFnShouldBeHiddenBySHOW_NavigationNodes)
	{
		uFnShouldBeHiddenBySHOW_NavigationNodes = UFunction::FindFunction("Function Engine.PathTargetPoint.ShouldBeHiddenBySHOW_NavigationNodes");
	}

	APathTargetPoint_execShouldBeHiddenBySHOW_NavigationNodes_Params ShouldBeHiddenBySHOW_NavigationNodes_Params;
	memset(&ShouldBeHiddenBySHOW_NavigationNodes_Params, 0, sizeof(ShouldBeHiddenBySHOW_NavigationNodes_Params));

	uFnShouldBeHiddenBySHOW_NavigationNodes->iNative = 0;
	uFnShouldBeHiddenBySHOW_NavigationNodes->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnShouldBeHiddenBySHOW_NavigationNodes, &ShouldBeHiddenBySHOW_NavigationNodes_Params, nullptr);
	uFnShouldBeHiddenBySHOW_NavigationNodes->FunctionFlags |= 0x400;
	uFnShouldBeHiddenBySHOW_NavigationNodes->iNative = 25894;

	return ShouldBeHiddenBySHOW_NavigationNodes_Params.ReturnValue;
};

// Function Engine.NavigationHandle.DrawPathCache
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[19190])
// Parameter Info:
// struct FVector                 DrawOffset                     (CPF_OptionalParm | CPF_Parm)
// uint32_t                       bPersistent                    (CPF_OptionalParm | CPF_Parm)
// struct FColor                  DrawColor                      (CPF_OptionalParm | CPF_Parm)

void UNavigationHandle::DrawPathCache(const struct FVector& DrawOffset, bool bPersistent, const struct FColor& DrawColor)
{
	static UFunction* uFnDrawPathCache = nullptr;

	if (!uFnDrawPathCache)
	{
		uFnDrawPathCache = UFunction::FindFunction("Function Engine.NavigationHandle.DrawPathCache");
	}

	UNavigationHandle_execDrawPathCache_Params DrawPathCache_Params;
	memset(&DrawPathCache_Params, 0, sizeof(DrawPathCache_Params));
	memcpy_s(&DrawPathCache_Params.DrawOffset, sizeof(DrawPathCache_Params.DrawOffset), &DrawOffset, sizeof(DrawOffset));
	DrawPathCache_Params.bPersistent = bPersistent;
	memcpy_s(&DrawPathCache_Params.DrawColor, sizeof(DrawPathCache_Params.DrawColor), &DrawColor, sizeof(DrawColor));

	uFnDrawPathCache->iNative = 0;
	uFnDrawPathCache->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnDrawPathCache, &DrawPathCache_Params, nullptr);
	uFnDrawPathCache->FunctionFlags |= 0x400;
	uFnDrawPathCache->iNative = 19190;
};

// Function Engine.NavMeshGoal_Filter.GetDumpString
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)

class FString UNavMeshGoal_Filter::eventGetDumpString()
{
	static UFunction* uFnGetDumpString = nullptr;

	if (!uFnGetDumpString)
	{
		uFnGetDumpString = UFunction::FindFunction("Function Engine.NavMeshGoal_Filter.GetDumpString");
	}

	UNavMeshGoal_Filter_eventGetDumpString_Params GetDumpString_Params;
	memset(&GetDumpString_Params, 0, sizeof(GetDumpString_Params));

	this->ProcessEvent(uFnGetDumpString, &GetDumpString_Params, nullptr);

	return GetDumpString_Params.ReturnValue;
};

// Function Engine.NavMeshGoalFilter_MinPathDistance.MustBeLongerPathThan
// [0x00022002] (FUNC_Defined | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UNavMeshGoal_GenericFilterContainer* FilterContainer                (CPF_Parm)
// int32_t                        InMinDistancePathShouldBe      (CPF_Parm)

bool UNavMeshGoalFilter_MinPathDistance::MustBeLongerPathThan(class UNavMeshGoal_GenericFilterContainer* FilterContainer, int32_t InMinDistancePathShouldBe)
{
	static UFunction* uFnMustBeLongerPathThan = nullptr;

	if (!uFnMustBeLongerPathThan)
	{
		uFnMustBeLongerPathThan = UFunction::FindFunction("Function Engine.NavMeshGoalFilter_MinPathDistance.MustBeLongerPathThan");
	}

	UNavMeshGoalFilter_MinPathDistance_execMustBeLongerPathThan_Params MustBeLongerPathThan_Params;
	memset(&MustBeLongerPathThan_Params, 0, sizeof(MustBeLongerPathThan_Params));
	MustBeLongerPathThan_Params.FilterContainer = FilterContainer;
	memcpy_s(&MustBeLongerPathThan_Params.InMinDistancePathShouldBe, sizeof(MustBeLongerPathThan_Params.InMinDistancePathShouldBe), &InMinDistancePathShouldBe, sizeof(InMinDistancePathShouldBe));

	UNavMeshGoalFilter_MinPathDistance::StaticClass()->ProcessEvent(uFnMustBeLongerPathThan, &MustBeLongerPathThan_Params, nullptr);

	return MustBeLongerPathThan_Params.ReturnValue;
};

// Function Engine.NavMeshGoalFilter_NotNearOtherAI.NotNearOtherAI
// [0x00022002] (FUNC_Defined | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UNavMeshGoal_GenericFilterContainer* FilterContainer                (CPF_Parm)
// float                          InDistanceToCheck              (CPF_Const | CPF_Parm)

bool UNavMeshGoalFilter_NotNearOtherAI::NotNearOtherAI(class UNavMeshGoal_GenericFilterContainer* FilterContainer, float InDistanceToCheck)
{
	static UFunction* uFnNotNearOtherAI = nullptr;

	if (!uFnNotNearOtherAI)
	{
		uFnNotNearOtherAI = UFunction::FindFunction("Function Engine.NavMeshGoalFilter_NotNearOtherAI.NotNearOtherAI");
	}

	UNavMeshGoalFilter_NotNearOtherAI_execNotNearOtherAI_Params NotNearOtherAI_Params;
	memset(&NotNearOtherAI_Params, 0, sizeof(NotNearOtherAI_Params));
	NotNearOtherAI_Params.FilterContainer = FilterContainer;
	memcpy_s(&NotNearOtherAI_Params.InDistanceToCheck, sizeof(NotNearOtherAI_Params.InDistanceToCheck), &InDistanceToCheck, sizeof(InDistanceToCheck));

	UNavMeshGoalFilter_NotNearOtherAI::StaticClass()->ProcessEvent(uFnNotNearOtherAI, &NotNearOtherAI_Params, nullptr);

	return NotNearOtherAI_Params.ReturnValue;
};

// Function Engine.NavMeshGoalFilter_OutOfViewFrom.MustBeHiddenFromThisPoint
// [0x00022002] (FUNC_Defined | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UNavMeshGoal_GenericFilterContainer* FilterContainer                (CPF_Parm)
// struct FVector                 InOutOfViewLocation            (CPF_Parm)

bool UNavMeshGoalFilter_OutOfViewFrom::MustBeHiddenFromThisPoint(class UNavMeshGoal_GenericFilterContainer* FilterContainer, const struct FVector& InOutOfViewLocation)
{
	static UFunction* uFnMustBeHiddenFromThisPoint = nullptr;

	if (!uFnMustBeHiddenFromThisPoint)
	{
		uFnMustBeHiddenFromThisPoint = UFunction::FindFunction("Function Engine.NavMeshGoalFilter_OutOfViewFrom.MustBeHiddenFromThisPoint");
	}

	UNavMeshGoalFilter_OutOfViewFrom_execMustBeHiddenFromThisPoint_Params MustBeHiddenFromThisPoint_Params;
	memset(&MustBeHiddenFromThisPoint_Params, 0, sizeof(MustBeHiddenFromThisPoint_Params));
	MustBeHiddenFromThisPoint_Params.FilterContainer = FilterContainer;
	memcpy_s(&MustBeHiddenFromThisPoint_Params.InOutOfViewLocation, sizeof(MustBeHiddenFromThisPoint_Params.InOutOfViewLocation), &InOutOfViewLocation, sizeof(InOutOfViewLocation));

	UNavMeshGoalFilter_OutOfViewFrom::StaticClass()->ProcessEvent(uFnMustBeHiddenFromThisPoint, &MustBeHiddenFromThisPoint_Params, nullptr);

	return MustBeHiddenFromThisPoint_Params.ReturnValue;
};

// Function Engine.NavMeshGoalFilter_OutSideOfDotProductWedge.OutsideOfDotProductWedge
// [0x00022002] (FUNC_Defined | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UNavMeshGoal_GenericFilterContainer* FilterContainer                (CPF_Parm)
// struct FVector                 InLocation                     (CPF_Parm)
// struct FRotator                InRotation                     (CPF_Parm)
// float                          InEpsilon                      (CPF_Parm)

bool UNavMeshGoalFilter_OutSideOfDotProductWedge::OutsideOfDotProductWedge(class UNavMeshGoal_GenericFilterContainer* FilterContainer, const struct FVector& InLocation, const struct FRotator& InRotation, float InEpsilon)
{
	static UFunction* uFnOutsideOfDotProductWedge = nullptr;

	if (!uFnOutsideOfDotProductWedge)
	{
		uFnOutsideOfDotProductWedge = UFunction::FindFunction("Function Engine.NavMeshGoalFilter_OutSideOfDotProductWedge.OutsideOfDotProductWedge");
	}

	UNavMeshGoalFilter_OutSideOfDotProductWedge_execOutsideOfDotProductWedge_Params OutsideOfDotProductWedge_Params;
	memset(&OutsideOfDotProductWedge_Params, 0, sizeof(OutsideOfDotProductWedge_Params));
	OutsideOfDotProductWedge_Params.FilterContainer = FilterContainer;
	memcpy_s(&OutsideOfDotProductWedge_Params.InLocation, sizeof(OutsideOfDotProductWedge_Params.InLocation), &InLocation, sizeof(InLocation));
	memcpy_s(&OutsideOfDotProductWedge_Params.InRotation, sizeof(OutsideOfDotProductWedge_Params.InRotation), &InRotation, sizeof(InRotation));
	memcpy_s(&OutsideOfDotProductWedge_Params.InEpsilon, sizeof(OutsideOfDotProductWedge_Params.InEpsilon), &InEpsilon, sizeof(InEpsilon));

	UNavMeshGoalFilter_OutSideOfDotProductWedge::StaticClass()->ProcessEvent(uFnOutsideOfDotProductWedge, &OutsideOfDotProductWedge_Params, nullptr);

	return OutsideOfDotProductWedge_Params.ReturnValue;
};

// Function Engine.NavMeshGoalFilter_PolyEncompassesAI.MakeSureAIFits
// [0x00026002] (FUNC_Defined | FUNC_Static | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UNavMeshGoal_GenericFilterContainer* FilterContainer                (CPF_Parm)
// struct FVector                 InOverrideExtentToCheck        (CPF_Const | CPF_OptionalParm | CPF_Parm)

bool UNavMeshGoalFilter_PolyEncompassesAI::MakeSureAIFits(class UNavMeshGoal_GenericFilterContainer* FilterContainer, const struct FVector& InOverrideExtentToCheck)
{
	static UFunction* uFnMakeSureAIFits = nullptr;

	if (!uFnMakeSureAIFits)
	{
		uFnMakeSureAIFits = UFunction::FindFunction("Function Engine.NavMeshGoalFilter_PolyEncompassesAI.MakeSureAIFits");
	}

	UNavMeshGoalFilter_PolyEncompassesAI_execMakeSureAIFits_Params MakeSureAIFits_Params;
	memset(&MakeSureAIFits_Params, 0, sizeof(MakeSureAIFits_Params));
	MakeSureAIFits_Params.FilterContainer = FilterContainer;
	memcpy_s(&MakeSureAIFits_Params.InOverrideExtentToCheck, sizeof(MakeSureAIFits_Params.InOverrideExtentToCheck), &InOverrideExtentToCheck, sizeof(InOverrideExtentToCheck));

	UNavMeshGoalFilter_PolyEncompassesAI::StaticClass()->ProcessEvent(uFnMakeSureAIFits, &MakeSureAIFits_Params, nullptr);

	return MakeSureAIFits_Params.ReturnValue;
};

// Function Engine.NavMeshPathConstraint.GetDumpString
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)

class FString UNavMeshPathConstraint::eventGetDumpString()
{
	static UFunction* uFnGetDumpString = nullptr;

	if (!uFnGetDumpString)
	{
		uFnGetDumpString = UFunction::FindFunction("Function Engine.NavMeshPathConstraint.GetDumpString");
	}

	UNavMeshPathConstraint_eventGetDumpString_Params GetDumpString_Params;
	memset(&GetDumpString_Params, 0, sizeof(GetDumpString_Params));

	this->ProcessEvent(uFnGetDumpString, &GetDumpString_Params, nullptr);

	return GetDumpString_Params.ReturnValue;
};

// Function Engine.NavMeshPathConstraint.Recycle
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UNavMeshPathConstraint::eventRecycle()
{
	static UFunction* uFnRecycle = nullptr;

	if (!uFnRecycle)
	{
		uFnRecycle = UFunction::FindFunction("Function Engine.NavMeshPathConstraint.Recycle");
	}

	UNavMeshPathConstraint_eventRecycle_Params Recycle_Params;
	memset(&Recycle_Params, 0, sizeof(Recycle_Params));

	this->ProcessEvent(uFnRecycle, &Recycle_Params, nullptr);
};

// Function Engine.NavMeshPath_AlongLine.Recycle
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UNavMeshPath_AlongLine::Recycle()
{
	static UFunction* uFnRecycle = nullptr;

	if (!uFnRecycle)
	{
		uFnRecycle = UFunction::FindFunction("Function Engine.NavMeshPath_AlongLine.Recycle");
	}

	UNavMeshPath_AlongLine_execRecycle_Params Recycle_Params;
	memset(&Recycle_Params, 0, sizeof(Recycle_Params));

	this->ProcessEvent(uFnRecycle, &Recycle_Params, nullptr);
};

// Function Engine.NavMeshPath_MinDistBetweenSpecsOfType.Recycle
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UNavMeshPath_MinDistBetweenSpecsOfType::Recycle()
{
	static UFunction* uFnRecycle = nullptr;

	if (!uFnRecycle)
	{
		uFnRecycle = UFunction::FindFunction("Function Engine.NavMeshPath_MinDistBetweenSpecsOfType.Recycle");
	}

	UNavMeshPath_MinDistBetweenSpecsOfType_execRecycle_Params Recycle_Params;
	memset(&Recycle_Params, 0, sizeof(Recycle_Params));

	this->ProcessEvent(uFnRecycle, &Recycle_Params, nullptr);
};

// Function Engine.NavMeshPath_Toward.Recycle
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UNavMeshPath_Toward::Recycle()
{
	static UFunction* uFnRecycle = nullptr;

	if (!uFnRecycle)
	{
		uFnRecycle = UFunction::FindFunction("Function Engine.NavMeshPath_Toward.Recycle");
	}

	UNavMeshPath_Toward_execRecycle_Params Recycle_Params;
	memset(&Recycle_Params, 0, sizeof(Recycle_Params));

	this->ProcessEvent(uFnRecycle, &Recycle_Params, nullptr);
};

// Function Engine.NavMeshPath_WithinDistanceEnvelope.Recycle
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UNavMeshPath_WithinDistanceEnvelope::Recycle()
{
	static UFunction* uFnRecycle = nullptr;

	if (!uFnRecycle)
	{
		uFnRecycle = UFunction::FindFunction("Function Engine.NavMeshPath_WithinDistanceEnvelope.Recycle");
	}

	UNavMeshPath_WithinDistanceEnvelope_execRecycle_Params Recycle_Params;
	memset(&Recycle_Params, 0, sizeof(Recycle_Params));

	this->ProcessEvent(uFnRecycle, &Recycle_Params, nullptr);
};

// Function Engine.NavMeshPath_WithinTraversalDist.Recycle
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UNavMeshPath_WithinTraversalDist::Recycle()
{
	static UFunction* uFnRecycle = nullptr;

	if (!uFnRecycle)
	{
		uFnRecycle = UFunction::FindFunction("Function Engine.NavMeshPath_WithinTraversalDist.Recycle");
	}

	UNavMeshPath_WithinTraversalDist_execRecycle_Params Recycle_Params;
	memset(&Recycle_Params, 0, sizeof(Recycle_Params));

	this->ProcessEvent(uFnRecycle, &Recycle_Params, nullptr);
};

// Function Engine.NavMeshPathGoalEvaluator.GetDumpString
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)

class FString UNavMeshPathGoalEvaluator::eventGetDumpString()
{
	static UFunction* uFnGetDumpString = nullptr;

	if (!uFnGetDumpString)
	{
		uFnGetDumpString = UFunction::FindFunction("Function Engine.NavMeshPathGoalEvaluator.GetDumpString");
	}

	UNavMeshPathGoalEvaluator_eventGetDumpString_Params GetDumpString_Params;
	memset(&GetDumpString_Params, 0, sizeof(GetDumpString_Params));

	this->ProcessEvent(uFnGetDumpString, &GetDumpString_Params, nullptr);

	return GetDumpString_Params.ReturnValue;
};

// Function Engine.NavMeshPathGoalEvaluator.Recycle
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UNavMeshPathGoalEvaluator::eventRecycle()
{
	static UFunction* uFnRecycle = nullptr;

	if (!uFnRecycle)
	{
		uFnRecycle = UFunction::FindFunction("Function Engine.NavMeshPathGoalEvaluator.Recycle");
	}

	UNavMeshPathGoalEvaluator_eventRecycle_Params Recycle_Params;
	memset(&Recycle_Params, 0, sizeof(Recycle_Params));

	this->ProcessEvent(uFnRecycle, &Recycle_Params, nullptr);
};

// Function Engine.NavMeshGoal_At.Recycle
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UNavMeshGoal_At::Recycle()
{
	static UFunction* uFnRecycle = nullptr;

	if (!uFnRecycle)
	{
		uFnRecycle = UFunction::FindFunction("Function Engine.NavMeshGoal_At.Recycle");
	}

	UNavMeshGoal_At_execRecycle_Params Recycle_Params;
	memset(&Recycle_Params, 0, sizeof(Recycle_Params));

	this->ProcessEvent(uFnRecycle, &Recycle_Params, nullptr);
};

// Function Engine.NavMeshGoal_At.RecycleNative
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[24990])
// Parameter Info:

void UNavMeshGoal_At::RecycleNative()
{
	static UFunction* uFnRecycleNative = nullptr;

	if (!uFnRecycleNative)
	{
		uFnRecycleNative = UFunction::FindFunction("Function Engine.NavMeshGoal_At.RecycleNative");
	}

	UNavMeshGoal_At_execRecycleNative_Params RecycleNative_Params;
	memset(&RecycleNative_Params, 0, sizeof(RecycleNative_Params));

	uFnRecycleNative->iNative = 0;
	uFnRecycleNative->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnRecycleNative, &RecycleNative_Params, nullptr);
	uFnRecycleNative->FunctionFlags |= 0x400;
	uFnRecycleNative->iNative = 24990;
};

// Function Engine.NavMeshGoal_ClosestActorInList.RecycleInternal
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13709])
// Parameter Info:

void UNavMeshGoal_ClosestActorInList::RecycleInternal()
{
	static UFunction* uFnRecycleInternal = nullptr;

	if (!uFnRecycleInternal)
	{
		uFnRecycleInternal = UFunction::FindFunction("Function Engine.NavMeshGoal_ClosestActorInList.RecycleInternal");
	}

	UNavMeshGoal_ClosestActorInList_execRecycleInternal_Params RecycleInternal_Params;
	memset(&RecycleInternal_Params, 0, sizeof(RecycleInternal_Params));

	uFnRecycleInternal->iNative = 0;
	uFnRecycleInternal->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnRecycleInternal, &RecycleInternal_Params, nullptr);
	uFnRecycleInternal->FunctionFlags |= 0x400;
	uFnRecycleInternal->iNative = 13709;
};

// Function Engine.NavMeshGoal_ClosestActorInList.Recycle
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UNavMeshGoal_ClosestActorInList::eventRecycle()
{
	static UFunction* uFnRecycle = nullptr;

	if (!uFnRecycle)
	{
		uFnRecycle = UFunction::FindFunction("Function Engine.NavMeshGoal_ClosestActorInList.Recycle");
	}

	UNavMeshGoal_ClosestActorInList_eventRecycle_Params Recycle_Params;
	memset(&Recycle_Params, 0, sizeof(Recycle_Params));

	this->ProcessEvent(uFnRecycle, &Recycle_Params, nullptr);
};

// Function Engine.NavMeshGoal_GenericFilterContainer.Recycle
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UNavMeshGoal_GenericFilterContainer::Recycle()
{
	static UFunction* uFnRecycle = nullptr;

	if (!uFnRecycle)
	{
		uFnRecycle = UFunction::FindFunction("Function Engine.NavMeshGoal_GenericFilterContainer.Recycle");
	}

	UNavMeshGoal_GenericFilterContainer_execRecycle_Params Recycle_Params;
	memset(&Recycle_Params, 0, sizeof(Recycle_Params));

	this->ProcessEvent(uFnRecycle, &Recycle_Params, nullptr);
};

// Function Engine.NavMeshGoal_GenericFilterContainer.GetGoalPoint
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20596])
// Parameter Info:
// struct FVector                 ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

struct FVector UNavMeshGoal_GenericFilterContainer::GetGoalPoint()
{
	static UFunction* uFnGetGoalPoint = nullptr;

	if (!uFnGetGoalPoint)
	{
		uFnGetGoalPoint = UFunction::FindFunction("Function Engine.NavMeshGoal_GenericFilterContainer.GetGoalPoint");
	}

	UNavMeshGoal_GenericFilterContainer_execGetGoalPoint_Params GetGoalPoint_Params;
	memset(&GetGoalPoint_Params, 0, sizeof(GetGoalPoint_Params));

	uFnGetGoalPoint->iNative = 0;
	uFnGetGoalPoint->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetGoalPoint, &GetGoalPoint_Params, nullptr);
	uFnGetGoalPoint->FunctionFlags |= 0x400;
	uFnGetGoalPoint->iNative = 20596;

	return GetGoalPoint_Params.ReturnValue;
};

// Function Engine.NavMeshGoal_GenericFilterContainer.GetFilterOfType
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UNavMeshGoal_Filter*     ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UNavMeshGoal_Filter*     Filter_Class                   (CPF_Parm)

class UNavMeshGoal_Filter* UNavMeshGoal_GenericFilterContainer::GetFilterOfType(class UNavMeshGoal_Filter* Filter_Class)
{
	static UFunction* uFnGetFilterOfType = nullptr;

	if (!uFnGetFilterOfType)
	{
		uFnGetFilterOfType = UFunction::FindFunction("Function Engine.NavMeshGoal_GenericFilterContainer.GetFilterOfType");
	}

	UNavMeshGoal_GenericFilterContainer_execGetFilterOfType_Params GetFilterOfType_Params;
	memset(&GetFilterOfType_Params, 0, sizeof(GetFilterOfType_Params));
	GetFilterOfType_Params.Filter_Class = Filter_Class;

	this->ProcessEvent(uFnGetFilterOfType, &GetFilterOfType_Params, nullptr);

	return GetFilterOfType_Params.ReturnValue;
};

// Function Engine.NavMeshGoal_Null.Recycle
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UNavMeshGoal_Null::Recycle()
{
	static UFunction* uFnRecycle = nullptr;

	if (!uFnRecycle)
	{
		uFnRecycle = UFunction::FindFunction("Function Engine.NavMeshGoal_Null.Recycle");
	}

	UNavMeshGoal_Null_execRecycle_Params Recycle_Params;
	memset(&Recycle_Params, 0, sizeof(Recycle_Params));

	this->ProcessEvent(uFnRecycle, &Recycle_Params, nullptr);
};

// Function Engine.NavMeshGoal_Null.RecycleNative
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[24990])
// Parameter Info:

void UNavMeshGoal_Null::RecycleNative()
{
	static UFunction* uFnRecycleNative = nullptr;

	if (!uFnRecycleNative)
	{
		uFnRecycleNative = UFunction::FindFunction("Function Engine.NavMeshGoal_Null.RecycleNative");
	}

	UNavMeshGoal_Null_execRecycleNative_Params RecycleNative_Params;
	memset(&RecycleNative_Params, 0, sizeof(RecycleNative_Params));

	uFnRecycleNative->iNative = 0;
	uFnRecycleNative->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnRecycleNative, &RecycleNative_Params, nullptr);
	uFnRecycleNative->FunctionFlags |= 0x400;
	uFnRecycleNative->iNative = 24990;
};

// Function Engine.NavMeshGoal_PolyEncompassesAI.Recycle
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UNavMeshGoal_PolyEncompassesAI::Recycle()
{
	static UFunction* uFnRecycle = nullptr;

	if (!uFnRecycle)
	{
		uFnRecycle = UFunction::FindFunction("Function Engine.NavMeshGoal_PolyEncompassesAI.Recycle");
	}

	UNavMeshGoal_PolyEncompassesAI_execRecycle_Params Recycle_Params;
	memset(&Recycle_Params, 0, sizeof(Recycle_Params));

	this->ProcessEvent(uFnRecycle, &Recycle_Params, nullptr);
};

// Function Engine.SkeletalMeshActor.SkelMeshActorOnParticleSystemFinished
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UParticleSystemComponent* PSC                            (CPF_Parm | CPF_EditInline)

void ASkeletalMeshActor::SkelMeshActorOnParticleSystemFinished(class UParticleSystemComponent* PSC)
{
	static UFunction* uFnSkelMeshActorOnParticleSystemFinished = nullptr;

	if (!uFnSkelMeshActorOnParticleSystemFinished)
	{
		uFnSkelMeshActorOnParticleSystemFinished = UFunction::FindFunction("Function Engine.SkeletalMeshActor.SkelMeshActorOnParticleSystemFinished");
	}

	ASkeletalMeshActor_execSkelMeshActorOnParticleSystemFinished_Params SkelMeshActorOnParticleSystemFinished_Params;
	memset(&SkelMeshActorOnParticleSystemFinished_Params, 0, sizeof(SkelMeshActorOnParticleSystemFinished_Params));
	SkelMeshActorOnParticleSystemFinished_Params.PSC = PSC;

	this->ProcessEvent(uFnSkelMeshActorOnParticleSystemFinished, &SkelMeshActorOnParticleSystemFinished_Params, nullptr);
};

// Function Engine.SkeletalMeshActor.PlayParticleEffect
// [0x00820802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UAnimNotify_PlayParticleEffect* AnimNotifyData                 (CPF_Const | CPF_Parm)

bool ASkeletalMeshActor::eventPlayParticleEffect(class UAnimNotify_PlayParticleEffect* AnimNotifyData)
{
	static UFunction* uFnPlayParticleEffect = nullptr;

	if (!uFnPlayParticleEffect)
	{
		uFnPlayParticleEffect = UFunction::FindFunction("Function Engine.SkeletalMeshActor.PlayParticleEffect");
	}

	ASkeletalMeshActor_eventPlayParticleEffect_Params PlayParticleEffect_Params;
	memset(&PlayParticleEffect_Params, 0, sizeof(PlayParticleEffect_Params));
	PlayParticleEffect_Params.AnimNotifyData = AnimNotifyData;

	this->ProcessEvent(uFnPlayParticleEffect, &PlayParticleEffect_Params, nullptr);

	return PlayParticleEffect_Params.ReturnValue;
};

// Function Engine.SkeletalMeshActor.ApplyCheckpointRecord
// [0x00420002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// struct ASkeletalMeshActor_FCheckpointRecord Record                         (CPF_Const | CPF_Parm | CPF_OutParm)

void ASkeletalMeshActor::ApplyCheckpointRecord(struct ASkeletalMeshActor_FCheckpointRecord& Record)
{
	static UFunction* uFnApplyCheckpointRecord = nullptr;

	if (!uFnApplyCheckpointRecord)
	{
		uFnApplyCheckpointRecord = UFunction::FindFunction("Function Engine.SkeletalMeshActor.ApplyCheckpointRecord");
	}

	ASkeletalMeshActor_execApplyCheckpointRecord_Params ApplyCheckpointRecord_Params;
	memset(&ApplyCheckpointRecord_Params, 0, sizeof(ApplyCheckpointRecord_Params));
	memcpy_s(&ApplyCheckpointRecord_Params.Record, sizeof(ApplyCheckpointRecord_Params.Record), &Record, sizeof(Record));

	this->ProcessEvent(uFnApplyCheckpointRecord, &ApplyCheckpointRecord_Params, nullptr);

	memcpy_s(&Record, sizeof(Record), &ApplyCheckpointRecord_Params.Record, sizeof(ApplyCheckpointRecord_Params.Record));
};

// Function Engine.SkeletalMeshActor.CreateCheckpointRecord
// [0x00420002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// struct ASkeletalMeshActor_FCheckpointRecord Record                         (CPF_Parm | CPF_OutParm)

void ASkeletalMeshActor::CreateCheckpointRecord(struct ASkeletalMeshActor_FCheckpointRecord& Record)
{
	static UFunction* uFnCreateCheckpointRecord = nullptr;

	if (!uFnCreateCheckpointRecord)
	{
		uFnCreateCheckpointRecord = UFunction::FindFunction("Function Engine.SkeletalMeshActor.CreateCheckpointRecord");
	}

	ASkeletalMeshActor_execCreateCheckpointRecord_Params CreateCheckpointRecord_Params;
	memset(&CreateCheckpointRecord_Params, 0, sizeof(CreateCheckpointRecord_Params));
	memcpy_s(&CreateCheckpointRecord_Params.Record, sizeof(CreateCheckpointRecord_Params.Record), &Record, sizeof(Record));

	this->ProcessEvent(uFnCreateCheckpointRecord, &CreateCheckpointRecord_Params, nullptr);

	memcpy_s(&Record, sizeof(Record), &CreateCheckpointRecord_Params.Record, sizeof(CreateCheckpointRecord_Params.Record));
};

// Function Engine.SkeletalMeshActor.ShouldSaveForCheckpoint
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool ASkeletalMeshActor::ShouldSaveForCheckpoint()
{
	static UFunction* uFnShouldSaveForCheckpoint = nullptr;

	if (!uFnShouldSaveForCheckpoint)
	{
		uFnShouldSaveForCheckpoint = UFunction::FindFunction("Function Engine.SkeletalMeshActor.ShouldSaveForCheckpoint");
	}

	ASkeletalMeshActor_execShouldSaveForCheckpoint_Params ShouldSaveForCheckpoint_Params;
	memset(&ShouldSaveForCheckpoint_Params, 0, sizeof(ShouldSaveForCheckpoint_Params));

	this->ProcessEvent(uFnShouldSaveForCheckpoint, &ShouldSaveForCheckpoint_Params, nullptr);

	return ShouldSaveForCheckpoint_Params.ReturnValue;
};

// Function Engine.SkeletalMeshActor.TakeDamage
// [0x00024C00] (FUNC_Native | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[13766])
// Parameter Info:
// int32_t                        Damage                         (CPF_Parm)
// class AController*             EventInstigator                (CPF_Parm)
// struct FVector                 HitLocation                    (CPF_Parm)
// struct FVector                 Momentum                       (CPF_Parm)
// class UDamageType*             DamageType                     (CPF_Parm)
// struct FTraceHitInfo           HitInfo                        (CPF_OptionalParm | CPF_Parm)
// class AActor*                  DamageCauser                   (CPF_OptionalParm | CPF_Parm)

void ASkeletalMeshActor::eventTakeDamage(int32_t Damage, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UDamageType* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser)
{
	static UFunction* uFnTakeDamage = nullptr;

	if (!uFnTakeDamage)
	{
		uFnTakeDamage = UFunction::FindFunction("Function Engine.SkeletalMeshActor.TakeDamage");
	}

	ASkeletalMeshActor_eventTakeDamage_Params TakeDamage_Params;
	memset(&TakeDamage_Params, 0, sizeof(TakeDamage_Params));
	memcpy_s(&TakeDamage_Params.Damage, sizeof(TakeDamage_Params.Damage), &Damage, sizeof(Damage));
	TakeDamage_Params.EventInstigator = EventInstigator;
	memcpy_s(&TakeDamage_Params.HitLocation, sizeof(TakeDamage_Params.HitLocation), &HitLocation, sizeof(HitLocation));
	memcpy_s(&TakeDamage_Params.Momentum, sizeof(TakeDamage_Params.Momentum), &Momentum, sizeof(Momentum));
	TakeDamage_Params.DamageType = DamageType;
	memcpy_s(&TakeDamage_Params.HitInfo, sizeof(TakeDamage_Params.HitInfo), &HitInfo, sizeof(HitInfo));
	TakeDamage_Params.DamageCauser = DamageCauser;

	uFnTakeDamage->iNative = 0;
	uFnTakeDamage->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnTakeDamage, &TakeDamage_Params, nullptr);
	uFnTakeDamage->FunctionFlags |= 0x400;
	uFnTakeDamage->iNative = 13766;
};

// Function Engine.SkeletalMeshActor.OnSetSkelControlTarget
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_SetSkelControlTarget* Action                         (CPF_Parm)

void ASkeletalMeshActor::eventOnSetSkelControlTarget(class USeqAct_SetSkelControlTarget* Action)
{
	static UFunction* uFnOnSetSkelControlTarget = nullptr;

	if (!uFnOnSetSkelControlTarget)
	{
		uFnOnSetSkelControlTarget = UFunction::FindFunction("Function Engine.SkeletalMeshActor.OnSetSkelControlTarget");
	}

	ASkeletalMeshActor_eventOnSetSkelControlTarget_Params OnSetSkelControlTarget_Params;
	memset(&OnSetSkelControlTarget_Params, 0, sizeof(OnSetSkelControlTarget_Params));
	OnSetSkelControlTarget_Params.Action = Action;

	this->ProcessEvent(uFnOnSetSkelControlTarget, &OnSetSkelControlTarget_Params, nullptr);
};

// Function Engine.SkeletalMeshActor.OnUpdatePhysBonesFromAnim
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_UpdatePhysBonesFromAnim* Action                         (CPF_Parm)

void ASkeletalMeshActor::eventOnUpdatePhysBonesFromAnim(class USeqAct_UpdatePhysBonesFromAnim* Action)
{
	static UFunction* uFnOnUpdatePhysBonesFromAnim = nullptr;

	if (!uFnOnUpdatePhysBonesFromAnim)
	{
		uFnOnUpdatePhysBonesFromAnim = UFunction::FindFunction("Function Engine.SkeletalMeshActor.OnUpdatePhysBonesFromAnim");
	}

	ASkeletalMeshActor_eventOnUpdatePhysBonesFromAnim_Params OnUpdatePhysBonesFromAnim_Params;
	memset(&OnUpdatePhysBonesFromAnim_Params, 0, sizeof(OnUpdatePhysBonesFromAnim_Params));
	OnUpdatePhysBonesFromAnim_Params.Action = Action;

	this->ProcessEvent(uFnOnUpdatePhysBonesFromAnim, &OnUpdatePhysBonesFromAnim_Params, nullptr);
};

// Function Engine.SkeletalMeshActor.OnSetMesh
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_SetMesh*         Action                         (CPF_Parm)

void ASkeletalMeshActor::eventOnSetMesh(class USeqAct_SetMesh* Action)
{
	static UFunction* uFnOnSetMesh = nullptr;

	if (!uFnOnSetMesh)
	{
		uFnOnSetMesh = UFunction::FindFunction("Function Engine.SkeletalMeshActor.OnSetMesh");
	}

	ASkeletalMeshActor_eventOnSetMesh_Params OnSetMesh_Params;
	memset(&OnSetMesh_Params, 0, sizeof(OnSetMesh_Params));
	OnSetMesh_Params.Action = Action;

	this->ProcessEvent(uFnOnSetMesh, &OnSetMesh_Params, nullptr);
};

// Function Engine.SkeletalMeshActor.IsActorPlayingFaceFXAnim
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool ASkeletalMeshActor::IsActorPlayingFaceFXAnim()
{
	static UFunction* uFnIsActorPlayingFaceFXAnim = nullptr;

	if (!uFnIsActorPlayingFaceFXAnim)
	{
		uFnIsActorPlayingFaceFXAnim = UFunction::FindFunction("Function Engine.SkeletalMeshActor.IsActorPlayingFaceFXAnim");
	}

	ASkeletalMeshActor_execIsActorPlayingFaceFXAnim_Params IsActorPlayingFaceFXAnim_Params;
	memset(&IsActorPlayingFaceFXAnim_Params, 0, sizeof(IsActorPlayingFaceFXAnim_Params));

	this->ProcessEvent(uFnIsActorPlayingFaceFXAnim, &IsActorPlayingFaceFXAnim_Params, nullptr);

	return IsActorPlayingFaceFXAnim_Params.ReturnValue;
};

// Function Engine.SkeletalMeshActor.GetActorFaceFXAsset
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UFaceFXAsset*            ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class UFaceFXAsset* ASkeletalMeshActor::eventGetActorFaceFXAsset()
{
	static UFunction* uFnGetActorFaceFXAsset = nullptr;

	if (!uFnGetActorFaceFXAsset)
	{
		uFnGetActorFaceFXAsset = UFunction::FindFunction("Function Engine.SkeletalMeshActor.GetActorFaceFXAsset");
	}

	ASkeletalMeshActor_eventGetActorFaceFXAsset_Params GetActorFaceFXAsset_Params;
	memset(&GetActorFaceFXAsset_Params, 0, sizeof(GetActorFaceFXAsset_Params));

	this->ProcessEvent(uFnGetActorFaceFXAsset, &GetActorFaceFXAsset_Params, nullptr);

	return GetActorFaceFXAsset_Params.ReturnValue;
};

// Function Engine.SkeletalMeshActor.OnPlayFaceFXAnim
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_PlayFaceFXAnim*  inAction                       (CPF_Parm)

void ASkeletalMeshActor::OnPlayFaceFXAnim(class USeqAct_PlayFaceFXAnim* inAction)
{
	static UFunction* uFnOnPlayFaceFXAnim = nullptr;

	if (!uFnOnPlayFaceFXAnim)
	{
		uFnOnPlayFaceFXAnim = UFunction::FindFunction("Function Engine.SkeletalMeshActor.OnPlayFaceFXAnim");
	}

	ASkeletalMeshActor_execOnPlayFaceFXAnim_Params OnPlayFaceFXAnim_Params;
	memset(&OnPlayFaceFXAnim_Params, 0, sizeof(OnPlayFaceFXAnim_Params));
	OnPlayFaceFXAnim_Params.inAction = inAction;

	this->ProcessEvent(uFnOnPlayFaceFXAnim, &OnPlayFaceFXAnim_Params, nullptr);
};

// Function Engine.SkeletalMeshActor.OnSetMaterial
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_SetMaterial*     Action                         (CPF_Parm)

void ASkeletalMeshActor::OnSetMaterial(class USeqAct_SetMaterial* Action)
{
	static UFunction* uFnOnSetMaterial = nullptr;

	if (!uFnOnSetMaterial)
	{
		uFnOnSetMaterial = UFunction::FindFunction("Function Engine.SkeletalMeshActor.OnSetMaterial");
	}

	ASkeletalMeshActor_execOnSetMaterial_Params OnSetMaterial_Params;
	memset(&OnSetMaterial_Params, 0, sizeof(OnSetMaterial_Params));
	OnSetMaterial_Params.Action = Action;

	this->ProcessEvent(uFnOnSetMaterial, &OnSetMaterial_Params, nullptr);
};

// Function Engine.SkeletalMeshActor.OnToggle
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_Toggle*          Action                         (CPF_Parm)

void ASkeletalMeshActor::OnToggle(class USeqAct_Toggle* Action)
{
	static UFunction* uFnOnToggle = nullptr;

	if (!uFnOnToggle)
	{
		uFnOnToggle = UFunction::FindFunction("Function Engine.SkeletalMeshActor.OnToggle");
	}

	ASkeletalMeshActor_execOnToggle_Params OnToggle_Params;
	memset(&OnToggle_Params, 0, sizeof(OnToggle_Params));
	OnToggle_Params.Action = Action;

	this->ProcessEvent(uFnOnToggle, &OnToggle_Params, nullptr);
};

// Function Engine.SkeletalMeshActor.ReplicatedEvent
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FName                    VarName                        (CPF_Parm)

void ASkeletalMeshActor::eventReplicatedEvent(const class FName& VarName)
{
	static UFunction* uFnReplicatedEvent = nullptr;

	if (!uFnReplicatedEvent)
	{
		uFnReplicatedEvent = UFunction::FindFunction("Function Engine.SkeletalMeshActor.ReplicatedEvent");
	}

	ASkeletalMeshActor_eventReplicatedEvent_Params ReplicatedEvent_Params;
	memset(&ReplicatedEvent_Params, 0, sizeof(ReplicatedEvent_Params));
	memcpy_s(&ReplicatedEvent_Params.VarName, sizeof(ReplicatedEvent_Params.VarName), &VarName, sizeof(VarName));

	this->ProcessEvent(uFnReplicatedEvent, &ReplicatedEvent_Params, nullptr);
};

// Function Engine.SkeletalMeshActor.Destroyed
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void ASkeletalMeshActor::eventDestroyed()
{
	static UFunction* uFnDestroyed = nullptr;

	if (!uFnDestroyed)
	{
		uFnDestroyed = UFunction::FindFunction("Function Engine.SkeletalMeshActor.Destroyed");
	}

	ASkeletalMeshActor_eventDestroyed_Params Destroyed_Params;
	memset(&Destroyed_Params, 0, sizeof(Destroyed_Params));

	this->ProcessEvent(uFnDestroyed, &Destroyed_Params, nullptr);
};

// Function Engine.SkeletalMeshActor.PostBeginPlay
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void ASkeletalMeshActor::eventPostBeginPlay()
{
	static UFunction* uFnPostBeginPlay = nullptr;

	if (!uFnPostBeginPlay)
	{
		uFnPostBeginPlay = UFunction::FindFunction("Function Engine.SkeletalMeshActor.PostBeginPlay");
	}

	ASkeletalMeshActor_eventPostBeginPlay_Params PostBeginPlay_Params;
	memset(&PostBeginPlay_Params, 0, sizeof(PostBeginPlay_Params));

	this->ProcessEvent(uFnPostBeginPlay, &PostBeginPlay_Params, nullptr);
};

// Function Engine.SkeletalMeshActor.PostBeginPlaySkeletalMeshIsHidden_Native
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[24412])
// Parameter Info:

void ASkeletalMeshActor::PostBeginPlaySkeletalMeshIsHidden_Native()
{
	static UFunction* uFnPostBeginPlaySkeletalMeshIsHidden_Native = nullptr;

	if (!uFnPostBeginPlaySkeletalMeshIsHidden_Native)
	{
		uFnPostBeginPlaySkeletalMeshIsHidden_Native = UFunction::FindFunction("Function Engine.SkeletalMeshActor.PostBeginPlaySkeletalMeshIsHidden_Native");
	}

	ASkeletalMeshActor_execPostBeginPlaySkeletalMeshIsHidden_Native_Params PostBeginPlaySkeletalMeshIsHidden_Native_Params;
	memset(&PostBeginPlaySkeletalMeshIsHidden_Native_Params, 0, sizeof(PostBeginPlaySkeletalMeshIsHidden_Native_Params));

	uFnPostBeginPlaySkeletalMeshIsHidden_Native->iNative = 0;
	uFnPostBeginPlaySkeletalMeshIsHidden_Native->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnPostBeginPlaySkeletalMeshIsHidden_Native, &PostBeginPlaySkeletalMeshIsHidden_Native_Params, nullptr);
	uFnPostBeginPlaySkeletalMeshIsHidden_Native->FunctionFlags |= 0x400;
	uFnPostBeginPlaySkeletalMeshIsHidden_Native->iNative = 24412;
};

// Function Engine.SkeletalMeshActorBasedOnExtremeContent.SetMaterialBasedOnExtremeContent
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void ASkeletalMeshActorBasedOnExtremeContent::SetMaterialBasedOnExtremeContent()
{
	static UFunction* uFnSetMaterialBasedOnExtremeContent = nullptr;

	if (!uFnSetMaterialBasedOnExtremeContent)
	{
		uFnSetMaterialBasedOnExtremeContent = UFunction::FindFunction("Function Engine.SkeletalMeshActorBasedOnExtremeContent.SetMaterialBasedOnExtremeContent");
	}

	ASkeletalMeshActorBasedOnExtremeContent_execSetMaterialBasedOnExtremeContent_Params SetMaterialBasedOnExtremeContent_Params;
	memset(&SetMaterialBasedOnExtremeContent_Params, 0, sizeof(SetMaterialBasedOnExtremeContent_Params));

	this->ProcessEvent(uFnSetMaterialBasedOnExtremeContent, &SetMaterialBasedOnExtremeContent_Params, nullptr);
};

// Function Engine.SkeletalMeshActorBasedOnExtremeContent.PostBeginPlay
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void ASkeletalMeshActorBasedOnExtremeContent::eventPostBeginPlay()
{
	static UFunction* uFnPostBeginPlay = nullptr;

	if (!uFnPostBeginPlay)
	{
		uFnPostBeginPlay = UFunction::FindFunction("Function Engine.SkeletalMeshActorBasedOnExtremeContent.PostBeginPlay");
	}

	ASkeletalMeshActorBasedOnExtremeContent_eventPostBeginPlay_Params PostBeginPlay_Params;
	memset(&PostBeginPlay_Params, 0, sizeof(PostBeginPlay_Params));

	this->ProcessEvent(uFnPostBeginPlay, &PostBeginPlay_Params, nullptr);
};

// Function Engine.SkeletalMeshActorMAT.ClearAnimNodes
// [0x00020501] (FUNC_Final | FUNC_Simulated | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[18107])
// Parameter Info:

void ASkeletalMeshActorMAT::ClearAnimNodes()
{
	static UFunction* uFnClearAnimNodes = nullptr;

	if (!uFnClearAnimNodes)
	{
		uFnClearAnimNodes = UFunction::FindFunction("Function Engine.SkeletalMeshActorMAT.ClearAnimNodes");
	}

	ASkeletalMeshActorMAT_execClearAnimNodes_Params ClearAnimNodes_Params;
	memset(&ClearAnimNodes_Params, 0, sizeof(ClearAnimNodes_Params));

	uFnClearAnimNodes->iNative = 0;
	uFnClearAnimNodes->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnClearAnimNodes, &ClearAnimNodes_Params, nullptr);
	uFnClearAnimNodes->FunctionFlags |= 0x400;
	uFnClearAnimNodes->iNative = 18107;
};

// Function Engine.SkeletalMeshActorMAT.UpdateAnimSetList
// [0x00020500] (FUNC_Simulated | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[26974])
// Parameter Info:

void ASkeletalMeshActorMAT::UpdateAnimSetList()
{
	static UFunction* uFnUpdateAnimSetList = nullptr;

	if (!uFnUpdateAnimSetList)
	{
		uFnUpdateAnimSetList = UFunction::FindFunction("Function Engine.SkeletalMeshActorMAT.UpdateAnimSetList");
	}

	ASkeletalMeshActorMAT_execUpdateAnimSetList_Params UpdateAnimSetList_Params;
	memset(&UpdateAnimSetList_Params, 0, sizeof(UpdateAnimSetList_Params));

	uFnUpdateAnimSetList->iNative = 0;
	uFnUpdateAnimSetList->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnUpdateAnimSetList, &UpdateAnimSetList_Params, nullptr);
	uFnUpdateAnimSetList->FunctionFlags |= 0x400;
	uFnUpdateAnimSetList->iNative = 26974;
};

// Function Engine.SkeletalMeshActorMAT.Destroyed
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void ASkeletalMeshActorMAT::eventDestroyed()
{
	static UFunction* uFnDestroyed = nullptr;

	if (!uFnDestroyed)
	{
		uFnDestroyed = UFunction::FindFunction("Function Engine.SkeletalMeshActorMAT.Destroyed");
	}

	ASkeletalMeshActorMAT_eventDestroyed_Params Destroyed_Params;
	memset(&Destroyed_Params, 0, sizeof(Destroyed_Params));

	this->ProcessEvent(uFnDestroyed, &Destroyed_Params, nullptr);
};

// Function Engine.AnimNotify_Scripted.NotifyEnd
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AActor*                  Owner                          (CPF_Parm)
// class UAnimNodeSequence*       AnimSeqInstigator              (CPF_Parm)

void UAnimNotify_Scripted::eventNotifyEnd(class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator)
{
	static UFunction* uFnNotifyEnd = nullptr;

	if (!uFnNotifyEnd)
	{
		uFnNotifyEnd = UFunction::FindFunction("Function Engine.AnimNotify_Scripted.NotifyEnd");
	}

	UAnimNotify_Scripted_eventNotifyEnd_Params NotifyEnd_Params;
	memset(&NotifyEnd_Params, 0, sizeof(NotifyEnd_Params));
	NotifyEnd_Params.Owner = Owner;
	NotifyEnd_Params.AnimSeqInstigator = AnimSeqInstigator;

	this->ProcessEvent(uFnNotifyEnd, &NotifyEnd_Params, nullptr);
};

// Function Engine.AnimNotify_Scripted.Notify
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AActor*                  Owner                          (CPF_Parm)
// class UAnimNodeSequence*       AnimSeqInstigator              (CPF_Parm)

void UAnimNotify_Scripted::eventNotify(class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator)
{
	static UFunction* uFnNotify = nullptr;

	if (!uFnNotify)
	{
		uFnNotify = UFunction::FindFunction("Function Engine.AnimNotify_Scripted.Notify");
	}

	UAnimNotify_Scripted_eventNotify_Params Notify_Params;
	memset(&Notify_Params, 0, sizeof(Notify_Params));
	Notify_Params.Owner = Owner;
	Notify_Params.AnimSeqInstigator = AnimSeqInstigator;

	this->ProcessEvent(uFnNotify, &Notify_Params, nullptr);
};

// Function Engine.AnimNotify_PawnMaterialParam.Notify
// [0x00820802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// class AActor*                  Owner                          (CPF_Parm)
// class UAnimNodeSequence*       AnimSeqInstigator              (CPF_Parm)

void UAnimNotify_PawnMaterialParam::eventNotify(class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator)
{
	static UFunction* uFnNotify = nullptr;

	if (!uFnNotify)
	{
		uFnNotify = UFunction::FindFunction("Function Engine.AnimNotify_PawnMaterialParam.Notify");
	}

	UAnimNotify_PawnMaterialParam_eventNotify_Params Notify_Params;
	memset(&Notify_Params, 0, sizeof(Notify_Params));
	Notify_Params.Owner = Owner;
	Notify_Params.AnimSeqInstigator = AnimSeqInstigator;

	this->ProcessEvent(uFnNotify, &Notify_Params, nullptr);
};

// Function Engine.AnimNotify_Trails.GetNumSteps
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20657])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        InLastTrailIndex               (CPF_Parm)

int32_t UAnimNotify_Trails::GetNumSteps(int32_t InLastTrailIndex)
{
	static UFunction* uFnGetNumSteps = nullptr;

	if (!uFnGetNumSteps)
	{
		uFnGetNumSteps = UFunction::FindFunction("Function Engine.AnimNotify_Trails.GetNumSteps");
	}

	UAnimNotify_Trails_execGetNumSteps_Params GetNumSteps_Params;
	memset(&GetNumSteps_Params, 0, sizeof(GetNumSteps_Params));
	memcpy_s(&GetNumSteps_Params.InLastTrailIndex, sizeof(GetNumSteps_Params.InLastTrailIndex), &InLastTrailIndex, sizeof(InLastTrailIndex));

	uFnGetNumSteps->iNative = 0;
	uFnGetNumSteps->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetNumSteps, &GetNumSteps_Params, nullptr);
	uFnGetNumSteps->FunctionFlags |= 0x400;
	uFnGetNumSteps->iNative = 20657;

	return GetNumSteps_Params.ReturnValue;
};

// Function Engine.AnimNode.ReplayAnim
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25110])
// Parameter Info:

void UAnimNode::ReplayAnim()
{
	static UFunction* uFnReplayAnim = nullptr;

	if (!uFnReplayAnim)
	{
		uFnReplayAnim = UFunction::FindFunction("Function Engine.AnimNode.ReplayAnim");
	}

	UAnimNode_execReplayAnim_Params ReplayAnim_Params;
	memset(&ReplayAnim_Params, 0, sizeof(ReplayAnim_Params));

	uFnReplayAnim->iNative = 0;
	uFnReplayAnim->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnReplayAnim, &ReplayAnim_Params, nullptr);
	uFnReplayAnim->FunctionFlags |= 0x400;
	uFnReplayAnim->iNative = 25110;
};

// Function Engine.AnimNode.StopAnim
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[26319])
// Parameter Info:

void UAnimNode::StopAnim()
{
	static UFunction* uFnStopAnim = nullptr;

	if (!uFnStopAnim)
	{
		uFnStopAnim = UFunction::FindFunction("Function Engine.AnimNode.StopAnim");
	}

	UAnimNode_execStopAnim_Params StopAnim_Params;
	memset(&StopAnim_Params, 0, sizeof(StopAnim_Params));

	uFnStopAnim->iNative = 0;
	uFnStopAnim->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnStopAnim, &StopAnim_Params, nullptr);
	uFnStopAnim->FunctionFlags |= 0x400;
	uFnStopAnim->iNative = 26319;
};

// Function Engine.AnimNode.PlayAnim
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[24268])
// Parameter Info:
// uint32_t                       bLoop                          (CPF_OptionalParm | CPF_Parm)
// float                          Rate                           (CPF_OptionalParm | CPF_Parm)
// float                          StartTime                      (CPF_OptionalParm | CPF_Parm)

void UAnimNode::PlayAnim(bool bLoop, float Rate, float StartTime)
{
	static UFunction* uFnPlayAnim = nullptr;

	if (!uFnPlayAnim)
	{
		uFnPlayAnim = UFunction::FindFunction("Function Engine.AnimNode.PlayAnim");
	}

	UAnimNode_execPlayAnim_Params PlayAnim_Params;
	memset(&PlayAnim_Params, 0, sizeof(PlayAnim_Params));
	PlayAnim_Params.bLoop = bLoop;
	memcpy_s(&PlayAnim_Params.Rate, sizeof(PlayAnim_Params.Rate), &Rate, sizeof(Rate));
	memcpy_s(&PlayAnim_Params.StartTime, sizeof(PlayAnim_Params.StartTime), &StartTime, sizeof(StartTime));

	uFnPlayAnim->iNative = 0;
	uFnPlayAnim->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnPlayAnim, &PlayAnim_Params, nullptr);
	uFnPlayAnim->FunctionFlags |= 0x400;
	uFnPlayAnim->iNative = 24268;
};

// Function Engine.AnimNode.FindAnimNode
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20081])
// Parameter Info:
// class UAnimNode*               ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    InNodeName                     (CPF_Parm)

class UAnimNode* UAnimNode::FindAnimNode(const class FName& InNodeName)
{
	static UFunction* uFnFindAnimNode = nullptr;

	if (!uFnFindAnimNode)
	{
		uFnFindAnimNode = UFunction::FindFunction("Function Engine.AnimNode.FindAnimNode");
	}

	UAnimNode_execFindAnimNode_Params FindAnimNode_Params;
	memset(&FindAnimNode_Params, 0, sizeof(FindAnimNode_Params));
	memcpy_s(&FindAnimNode_Params.InNodeName, sizeof(FindAnimNode_Params.InNodeName), &InNodeName, sizeof(InNodeName));

	uFnFindAnimNode->iNative = 0;
	uFnFindAnimNode->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnFindAnimNode, &FindAnimNode_Params, nullptr);
	uFnFindAnimNode->FunctionFlags |= 0x400;
	uFnFindAnimNode->iNative = 20081;

	return FindAnimNode_Params.ReturnValue;
};

// Function Engine.AnimNode.OnCeaseRelevant
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UAnimNode::eventOnCeaseRelevant()
{
	static UFunction* uFnOnCeaseRelevant = nullptr;

	if (!uFnOnCeaseRelevant)
	{
		uFnOnCeaseRelevant = UFunction::FindFunction("Function Engine.AnimNode.OnCeaseRelevant");
	}

	UAnimNode_eventOnCeaseRelevant_Params OnCeaseRelevant_Params;
	memset(&OnCeaseRelevant_Params, 0, sizeof(OnCeaseRelevant_Params));

	this->ProcessEvent(uFnOnCeaseRelevant, &OnCeaseRelevant_Params, nullptr);
};

// Function Engine.AnimNode.OnBecomeRelevant
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UAnimNode::eventOnBecomeRelevant()
{
	static UFunction* uFnOnBecomeRelevant = nullptr;

	if (!uFnOnBecomeRelevant)
	{
		uFnOnBecomeRelevant = UFunction::FindFunction("Function Engine.AnimNode.OnBecomeRelevant");
	}

	UAnimNode_eventOnBecomeRelevant_Params OnBecomeRelevant_Params;
	memset(&OnBecomeRelevant_Params, 0, sizeof(OnBecomeRelevant_Params));

	this->ProcessEvent(uFnOnBecomeRelevant, &OnBecomeRelevant_Params, nullptr);
};

// Function Engine.AnimNode.OnInit
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UAnimNode::eventOnInit()
{
	static UFunction* uFnOnInit = nullptr;

	if (!uFnOnInit)
	{
		uFnOnInit = UFunction::FindFunction("Function Engine.AnimNode.OnInit");
	}

	UAnimNode_eventOnInit_Params OnInit_Params;
	memset(&OnInit_Params, 0, sizeof(OnInit_Params));

	this->ProcessEvent(uFnOnInit, &OnInit_Params, nullptr);
};

// Function Engine.AnimNodeBlendBase.ReplayAnim
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25110])
// Parameter Info:

void UAnimNodeBlendBase::ReplayAnim()
{
	static UFunction* uFnReplayAnim = nullptr;

	if (!uFnReplayAnim)
	{
		uFnReplayAnim = UFunction::FindFunction("Function Engine.AnimNodeBlendBase.ReplayAnim");
	}

	UAnimNodeBlendBase_execReplayAnim_Params ReplayAnim_Params;
	memset(&ReplayAnim_Params, 0, sizeof(ReplayAnim_Params));

	uFnReplayAnim->iNative = 0;
	uFnReplayAnim->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnReplayAnim, &ReplayAnim_Params, nullptr);
	uFnReplayAnim->FunctionFlags |= 0x400;
	uFnReplayAnim->iNative = 25110;
};

// Function Engine.AnimNodeBlendBase.StopAnim
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[26319])
// Parameter Info:

void UAnimNodeBlendBase::StopAnim()
{
	static UFunction* uFnStopAnim = nullptr;

	if (!uFnStopAnim)
	{
		uFnStopAnim = UFunction::FindFunction("Function Engine.AnimNodeBlendBase.StopAnim");
	}

	UAnimNodeBlendBase_execStopAnim_Params StopAnim_Params;
	memset(&StopAnim_Params, 0, sizeof(StopAnim_Params));

	uFnStopAnim->iNative = 0;
	uFnStopAnim->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnStopAnim, &StopAnim_Params, nullptr);
	uFnStopAnim->FunctionFlags |= 0x400;
	uFnStopAnim->iNative = 26319;
};

// Function Engine.AnimNodeBlendBase.PlayAnim
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[24268])
// Parameter Info:
// uint32_t                       bLoop                          (CPF_OptionalParm | CPF_Parm)
// float                          Rate                           (CPF_OptionalParm | CPF_Parm)
// float                          StartTime                      (CPF_OptionalParm | CPF_Parm)

void UAnimNodeBlendBase::PlayAnim(bool bLoop, float Rate, float StartTime)
{
	static UFunction* uFnPlayAnim = nullptr;

	if (!uFnPlayAnim)
	{
		uFnPlayAnim = UFunction::FindFunction("Function Engine.AnimNodeBlendBase.PlayAnim");
	}

	UAnimNodeBlendBase_execPlayAnim_Params PlayAnim_Params;
	memset(&PlayAnim_Params, 0, sizeof(PlayAnim_Params));
	PlayAnim_Params.bLoop = bLoop;
	memcpy_s(&PlayAnim_Params.Rate, sizeof(PlayAnim_Params.Rate), &Rate, sizeof(Rate));
	memcpy_s(&PlayAnim_Params.StartTime, sizeof(PlayAnim_Params.StartTime), &StartTime, sizeof(StartTime));

	uFnPlayAnim->iNative = 0;
	uFnPlayAnim->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnPlayAnim, &PlayAnim_Params, nullptr);
	uFnPlayAnim->FunctionFlags |= 0x400;
	uFnPlayAnim->iNative = 24268;
};

// Function Engine.AnimNode_MultiBlendPerBone.SetMaskWeight
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25708])
// Parameter Info:
// int32_t                        MaskIndex                      (CPF_Parm)
// float                          DesiredWeight                  (CPF_Parm)
// float                          BlendTime                      (CPF_Parm)

void UAnimNode_MultiBlendPerBone::SetMaskWeight(int32_t MaskIndex, float DesiredWeight, float BlendTime)
{
	static UFunction* uFnSetMaskWeight = nullptr;

	if (!uFnSetMaskWeight)
	{
		uFnSetMaskWeight = UFunction::FindFunction("Function Engine.AnimNode_MultiBlendPerBone.SetMaskWeight");
	}

	UAnimNode_MultiBlendPerBone_execSetMaskWeight_Params SetMaskWeight_Params;
	memset(&SetMaskWeight_Params, 0, sizeof(SetMaskWeight_Params));
	memcpy_s(&SetMaskWeight_Params.MaskIndex, sizeof(SetMaskWeight_Params.MaskIndex), &MaskIndex, sizeof(MaskIndex));
	memcpy_s(&SetMaskWeight_Params.DesiredWeight, sizeof(SetMaskWeight_Params.DesiredWeight), &DesiredWeight, sizeof(DesiredWeight));
	memcpy_s(&SetMaskWeight_Params.BlendTime, sizeof(SetMaskWeight_Params.BlendTime), &BlendTime, sizeof(BlendTime));

	uFnSetMaskWeight->iNative = 0;
	uFnSetMaskWeight->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetMaskWeight, &SetMaskWeight_Params, nullptr);
	uFnSetMaskWeight->FunctionFlags |= 0x400;
	uFnSetMaskWeight->iNative = 25708;
};

// Function Engine.AnimNodeAimOffset.SetActiveProfileByIndex
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25566])
// Parameter Info:
// int32_t                        ProfileIndex                   (CPF_Parm)

void UAnimNodeAimOffset::SetActiveProfileByIndex(int32_t ProfileIndex)
{
	static UFunction* uFnSetActiveProfileByIndex = nullptr;

	if (!uFnSetActiveProfileByIndex)
	{
		uFnSetActiveProfileByIndex = UFunction::FindFunction("Function Engine.AnimNodeAimOffset.SetActiveProfileByIndex");
	}

	UAnimNodeAimOffset_execSetActiveProfileByIndex_Params SetActiveProfileByIndex_Params;
	memset(&SetActiveProfileByIndex_Params, 0, sizeof(SetActiveProfileByIndex_Params));
	memcpy_s(&SetActiveProfileByIndex_Params.ProfileIndex, sizeof(SetActiveProfileByIndex_Params.ProfileIndex), &ProfileIndex, sizeof(ProfileIndex));

	uFnSetActiveProfileByIndex->iNative = 0;
	uFnSetActiveProfileByIndex->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetActiveProfileByIndex, &SetActiveProfileByIndex_Params, nullptr);
	uFnSetActiveProfileByIndex->FunctionFlags |= 0x400;
	uFnSetActiveProfileByIndex->iNative = 25566;
};

// Function Engine.AnimNodeAimOffset.SetActiveProfileByName
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25567])
// Parameter Info:
// class FName                    ProfileName                    (CPF_Parm)

void UAnimNodeAimOffset::SetActiveProfileByName(const class FName& ProfileName)
{
	static UFunction* uFnSetActiveProfileByName = nullptr;

	if (!uFnSetActiveProfileByName)
	{
		uFnSetActiveProfileByName = UFunction::FindFunction("Function Engine.AnimNodeAimOffset.SetActiveProfileByName");
	}

	UAnimNodeAimOffset_execSetActiveProfileByName_Params SetActiveProfileByName_Params;
	memset(&SetActiveProfileByName_Params, 0, sizeof(SetActiveProfileByName_Params));
	memcpy_s(&SetActiveProfileByName_Params.ProfileName, sizeof(SetActiveProfileByName_Params.ProfileName), &ProfileName, sizeof(ProfileName));

	uFnSetActiveProfileByName->iNative = 0;
	uFnSetActiveProfileByName->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetActiveProfileByName, &SetActiveProfileByName_Params, nullptr);
	uFnSetActiveProfileByName->FunctionFlags |= 0x400;
	uFnSetActiveProfileByName->iNative = 25567;
};

// Function Engine.AnimNodeBlend.SetBlendTarget
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25602])
// Parameter Info:
// float                          BlendTarget                    (CPF_Parm)
// float                          BlendTime                      (CPF_Parm)

void UAnimNodeBlend::SetBlendTarget(float BlendTarget, float BlendTime)
{
	static UFunction* uFnSetBlendTarget = nullptr;

	if (!uFnSetBlendTarget)
	{
		uFnSetBlendTarget = UFunction::FindFunction("Function Engine.AnimNodeBlend.SetBlendTarget");
	}

	UAnimNodeBlend_execSetBlendTarget_Params SetBlendTarget_Params;
	memset(&SetBlendTarget_Params, 0, sizeof(SetBlendTarget_Params));
	memcpy_s(&SetBlendTarget_Params.BlendTarget, sizeof(SetBlendTarget_Params.BlendTarget), &BlendTarget, sizeof(BlendTarget));
	memcpy_s(&SetBlendTarget_Params.BlendTime, sizeof(SetBlendTarget_Params.BlendTime), &BlendTime, sizeof(BlendTime));

	uFnSetBlendTarget->iNative = 0;
	uFnSetBlendTarget->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetBlendTarget, &SetBlendTarget_Params, nullptr);
	uFnSetBlendTarget->FunctionFlags |= 0x400;
	uFnSetBlendTarget->iNative = 25602;
};

// Function Engine.AnimNodeAdditiveBlending.SetBlendTarget
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25602])
// Parameter Info:
// float                          BlendTarget                    (CPF_Parm)
// float                          BlendTime                      (CPF_Parm)

void UAnimNodeAdditiveBlending::SetBlendTarget(float BlendTarget, float BlendTime)
{
	static UFunction* uFnSetBlendTarget = nullptr;

	if (!uFnSetBlendTarget)
	{
		uFnSetBlendTarget = UFunction::FindFunction("Function Engine.AnimNodeAdditiveBlending.SetBlendTarget");
	}

	UAnimNodeAdditiveBlending_execSetBlendTarget_Params SetBlendTarget_Params;
	memset(&SetBlendTarget_Params, 0, sizeof(SetBlendTarget_Params));
	memcpy_s(&SetBlendTarget_Params.BlendTarget, sizeof(SetBlendTarget_Params.BlendTarget), &BlendTarget, sizeof(BlendTarget));
	memcpy_s(&SetBlendTarget_Params.BlendTime, sizeof(SetBlendTarget_Params.BlendTime), &BlendTime, sizeof(BlendTime));

	uFnSetBlendTarget->iNative = 0;
	uFnSetBlendTarget->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetBlendTarget, &SetBlendTarget_Params, nullptr);
	uFnSetBlendTarget->FunctionFlags |= 0x400;
	uFnSetBlendTarget->iNative = 25602;
};

// Function Engine.AnimNodeBlendPerBone.SetBlendTarget
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25602])
// Parameter Info:
// float                          BlendTarget                    (CPF_Parm)
// float                          BlendTime                      (CPF_Parm)

void UAnimNodeBlendPerBone::SetBlendTarget(float BlendTarget, float BlendTime)
{
	static UFunction* uFnSetBlendTarget = nullptr;

	if (!uFnSetBlendTarget)
	{
		uFnSetBlendTarget = UFunction::FindFunction("Function Engine.AnimNodeBlendPerBone.SetBlendTarget");
	}

	UAnimNodeBlendPerBone_execSetBlendTarget_Params SetBlendTarget_Params;
	memset(&SetBlendTarget_Params, 0, sizeof(SetBlendTarget_Params));
	memcpy_s(&SetBlendTarget_Params.BlendTarget, sizeof(SetBlendTarget_Params.BlendTarget), &BlendTarget, sizeof(BlendTarget));
	memcpy_s(&SetBlendTarget_Params.BlendTime, sizeof(SetBlendTarget_Params.BlendTime), &BlendTime, sizeof(BlendTime));

	uFnSetBlendTarget->iNative = 0;
	uFnSetBlendTarget->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetBlendTarget, &SetBlendTarget_Params, nullptr);
	uFnSetBlendTarget->FunctionFlags |= 0x400;
	uFnSetBlendTarget->iNative = 25602;
};

// Function Engine.AnimNodeCrossfader.GetActiveChild
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20479])
// Parameter Info:
// class UAnimNodeSequence*       ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class UAnimNodeSequence* UAnimNodeCrossfader::GetActiveChild()
{
	static UFunction* uFnGetActiveChild = nullptr;

	if (!uFnGetActiveChild)
	{
		uFnGetActiveChild = UFunction::FindFunction("Function Engine.AnimNodeCrossfader.GetActiveChild");
	}

	UAnimNodeCrossfader_execGetActiveChild_Params GetActiveChild_Params;
	memset(&GetActiveChild_Params, 0, sizeof(GetActiveChild_Params));

	uFnGetActiveChild->iNative = 0;
	uFnGetActiveChild->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetActiveChild, &GetActiveChild_Params, nullptr);
	uFnGetActiveChild->FunctionFlags |= 0x400;
	uFnGetActiveChild->iNative = 20479;

	return GetActiveChild_Params.ReturnValue;
};

// Function Engine.AnimNodeCrossfader.GetAnimName
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20496])
// Parameter Info:
// class FName                    ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class FName UAnimNodeCrossfader::GetAnimName()
{
	static UFunction* uFnGetAnimName = nullptr;

	if (!uFnGetAnimName)
	{
		uFnGetAnimName = UFunction::FindFunction("Function Engine.AnimNodeCrossfader.GetAnimName");
	}

	UAnimNodeCrossfader_execGetAnimName_Params GetAnimName_Params;
	memset(&GetAnimName_Params, 0, sizeof(GetAnimName_Params));

	uFnGetAnimName->iNative = 0;
	uFnGetAnimName->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetAnimName, &GetAnimName_Params, nullptr);
	uFnGetAnimName->FunctionFlags |= 0x400;
	uFnGetAnimName->iNative = 20496;

	return GetAnimName_Params.ReturnValue;
};

// Function Engine.AnimNodeCrossfader.BlendToLoopingAnim
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[16876])
// Parameter Info:
// class FName                    AnimSeqName                    (CPF_Parm)
// float                          BlendInTime                    (CPF_OptionalParm | CPF_Parm)
// float                          Rate                           (CPF_OptionalParm | CPF_Parm)

void UAnimNodeCrossfader::BlendToLoopingAnim(const class FName& AnimSeqName, float BlendInTime, float Rate)
{
	static UFunction* uFnBlendToLoopingAnim = nullptr;

	if (!uFnBlendToLoopingAnim)
	{
		uFnBlendToLoopingAnim = UFunction::FindFunction("Function Engine.AnimNodeCrossfader.BlendToLoopingAnim");
	}

	UAnimNodeCrossfader_execBlendToLoopingAnim_Params BlendToLoopingAnim_Params;
	memset(&BlendToLoopingAnim_Params, 0, sizeof(BlendToLoopingAnim_Params));
	memcpy_s(&BlendToLoopingAnim_Params.AnimSeqName, sizeof(BlendToLoopingAnim_Params.AnimSeqName), &AnimSeqName, sizeof(AnimSeqName));
	memcpy_s(&BlendToLoopingAnim_Params.BlendInTime, sizeof(BlendToLoopingAnim_Params.BlendInTime), &BlendInTime, sizeof(BlendInTime));
	memcpy_s(&BlendToLoopingAnim_Params.Rate, sizeof(BlendToLoopingAnim_Params.Rate), &Rate, sizeof(Rate));

	uFnBlendToLoopingAnim->iNative = 0;
	uFnBlendToLoopingAnim->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnBlendToLoopingAnim, &BlendToLoopingAnim_Params, nullptr);
	uFnBlendToLoopingAnim->FunctionFlags |= 0x400;
	uFnBlendToLoopingAnim->iNative = 16876;
};

// Function Engine.AnimNodeCrossfader.PlayOneShotAnim
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[24344])
// Parameter Info:
// class FName                    AnimSeqName                    (CPF_Parm)
// float                          BlendInTime                    (CPF_OptionalParm | CPF_Parm)
// float                          BlendOutTime                   (CPF_OptionalParm | CPF_Parm)
// uint32_t                       bDontBlendOut                  (CPF_OptionalParm | CPF_Parm)
// float                          Rate                           (CPF_OptionalParm | CPF_Parm)

void UAnimNodeCrossfader::PlayOneShotAnim(const class FName& AnimSeqName, float BlendInTime, float BlendOutTime, bool bDontBlendOut, float Rate)
{
	static UFunction* uFnPlayOneShotAnim = nullptr;

	if (!uFnPlayOneShotAnim)
	{
		uFnPlayOneShotAnim = UFunction::FindFunction("Function Engine.AnimNodeCrossfader.PlayOneShotAnim");
	}

	UAnimNodeCrossfader_execPlayOneShotAnim_Params PlayOneShotAnim_Params;
	memset(&PlayOneShotAnim_Params, 0, sizeof(PlayOneShotAnim_Params));
	memcpy_s(&PlayOneShotAnim_Params.AnimSeqName, sizeof(PlayOneShotAnim_Params.AnimSeqName), &AnimSeqName, sizeof(AnimSeqName));
	memcpy_s(&PlayOneShotAnim_Params.BlendInTime, sizeof(PlayOneShotAnim_Params.BlendInTime), &BlendInTime, sizeof(BlendInTime));
	memcpy_s(&PlayOneShotAnim_Params.BlendOutTime, sizeof(PlayOneShotAnim_Params.BlendOutTime), &BlendOutTime, sizeof(BlendOutTime));
	PlayOneShotAnim_Params.bDontBlendOut = bDontBlendOut;
	memcpy_s(&PlayOneShotAnim_Params.Rate, sizeof(PlayOneShotAnim_Params.Rate), &Rate, sizeof(Rate));

	uFnPlayOneShotAnim->iNative = 0;
	uFnPlayOneShotAnim->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnPlayOneShotAnim, &PlayOneShotAnim_Params, nullptr);
	uFnPlayOneShotAnim->FunctionFlags |= 0x400;
	uFnPlayOneShotAnim->iNative = 24344;
};

// Function Engine.AnimNodePlayCustomAnim.SetRootBoneAxisOption
// [0x00024003] (FUNC_Final | FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// ERootBoneAxis                  AxisX                          (CPF_OptionalParm | CPF_Parm)
// ERootBoneAxis                  AxisY                          (CPF_OptionalParm | CPF_Parm)
// ERootBoneAxis                  AxisZ                          (CPF_OptionalParm | CPF_Parm)

void UAnimNodePlayCustomAnim::SetRootBoneAxisOption(ERootBoneAxis AxisX, ERootBoneAxis AxisY, ERootBoneAxis AxisZ)
{
	static UFunction* uFnSetRootBoneAxisOption = nullptr;

	if (!uFnSetRootBoneAxisOption)
	{
		uFnSetRootBoneAxisOption = UFunction::FindFunction("Function Engine.AnimNodePlayCustomAnim.SetRootBoneAxisOption");
	}

	UAnimNodePlayCustomAnim_execSetRootBoneAxisOption_Params SetRootBoneAxisOption_Params;
	memset(&SetRootBoneAxisOption_Params, 0, sizeof(SetRootBoneAxisOption_Params));
	memcpy_s(&SetRootBoneAxisOption_Params.AxisX, sizeof(SetRootBoneAxisOption_Params.AxisX), &AxisX, sizeof(AxisX));
	memcpy_s(&SetRootBoneAxisOption_Params.AxisY, sizeof(SetRootBoneAxisOption_Params.AxisY), &AxisY, sizeof(AxisY));
	memcpy_s(&SetRootBoneAxisOption_Params.AxisZ, sizeof(SetRootBoneAxisOption_Params.AxisZ), &AxisZ, sizeof(AxisZ));

	this->ProcessEvent(uFnSetRootBoneAxisOption, &SetRootBoneAxisOption_Params, nullptr);
};

// Function Engine.AnimNodePlayCustomAnim.GetCustomAnimNodeSeq
// [0x00020003] (FUNC_Final | FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UAnimNodeSequence*       ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class UAnimNodeSequence* UAnimNodePlayCustomAnim::GetCustomAnimNodeSeq()
{
	static UFunction* uFnGetCustomAnimNodeSeq = nullptr;

	if (!uFnGetCustomAnimNodeSeq)
	{
		uFnGetCustomAnimNodeSeq = UFunction::FindFunction("Function Engine.AnimNodePlayCustomAnim.GetCustomAnimNodeSeq");
	}

	UAnimNodePlayCustomAnim_execGetCustomAnimNodeSeq_Params GetCustomAnimNodeSeq_Params;
	memset(&GetCustomAnimNodeSeq_Params, 0, sizeof(GetCustomAnimNodeSeq_Params));

	this->ProcessEvent(uFnGetCustomAnimNodeSeq, &GetCustomAnimNodeSeq_Params, nullptr);

	return GetCustomAnimNodeSeq_Params.ReturnValue;
};

// Function Engine.AnimNodePlayCustomAnim.SetActorAnimEndNotification
// [0x00020003] (FUNC_Final | FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bNewStatus                     (CPF_Parm)

void UAnimNodePlayCustomAnim::SetActorAnimEndNotification(bool bNewStatus)
{
	static UFunction* uFnSetActorAnimEndNotification = nullptr;

	if (!uFnSetActorAnimEndNotification)
	{
		uFnSetActorAnimEndNotification = UFunction::FindFunction("Function Engine.AnimNodePlayCustomAnim.SetActorAnimEndNotification");
	}

	UAnimNodePlayCustomAnim_execSetActorAnimEndNotification_Params SetActorAnimEndNotification_Params;
	memset(&SetActorAnimEndNotification_Params, 0, sizeof(SetActorAnimEndNotification_Params));
	SetActorAnimEndNotification_Params.bNewStatus = bNewStatus;

	this->ProcessEvent(uFnSetActorAnimEndNotification, &SetActorAnimEndNotification_Params, nullptr);
};

// Function Engine.AnimNodePlayCustomAnim.SetCustomAnim
// [0x00020003] (FUNC_Final | FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FName                    AnimName                       (CPF_Parm)

void UAnimNodePlayCustomAnim::SetCustomAnim(const class FName& AnimName)
{
	static UFunction* uFnSetCustomAnim = nullptr;

	if (!uFnSetCustomAnim)
	{
		uFnSetCustomAnim = UFunction::FindFunction("Function Engine.AnimNodePlayCustomAnim.SetCustomAnim");
	}

	UAnimNodePlayCustomAnim_execSetCustomAnim_Params SetCustomAnim_Params;
	memset(&SetCustomAnim_Params, 0, sizeof(SetCustomAnim_Params));
	memcpy_s(&SetCustomAnim_Params.AnimName, sizeof(SetCustomAnim_Params.AnimName), &AnimName, sizeof(AnimName));

	this->ProcessEvent(uFnSetCustomAnim, &SetCustomAnim_Params, nullptr);
};

// Function Engine.AnimNodePlayCustomAnim.StopCustomAnim
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[26320])
// Parameter Info:
// float                          BlendOutTime                   (CPF_Parm)

void UAnimNodePlayCustomAnim::StopCustomAnim(float BlendOutTime)
{
	static UFunction* uFnStopCustomAnim = nullptr;

	if (!uFnStopCustomAnim)
	{
		uFnStopCustomAnim = UFunction::FindFunction("Function Engine.AnimNodePlayCustomAnim.StopCustomAnim");
	}

	UAnimNodePlayCustomAnim_execStopCustomAnim_Params StopCustomAnim_Params;
	memset(&StopCustomAnim_Params, 0, sizeof(StopCustomAnim_Params));
	memcpy_s(&StopCustomAnim_Params.BlendOutTime, sizeof(StopCustomAnim_Params.BlendOutTime), &BlendOutTime, sizeof(BlendOutTime));

	uFnStopCustomAnim->iNative = 0;
	uFnStopCustomAnim->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnStopCustomAnim, &StopCustomAnim_Params, nullptr);
	uFnStopCustomAnim->FunctionFlags |= 0x400;
	uFnStopCustomAnim->iNative = 26320;
};

// Function Engine.AnimNodePlayCustomAnim.PlayCustomAnimByDuration
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[24272])
// Parameter Info:
// class FName                    AnimName                       (CPF_Parm)
// float                          Duration                       (CPF_Parm)
// float                          BlendInTime                    (CPF_OptionalParm | CPF_Parm)
// float                          BlendOutTime                   (CPF_OptionalParm | CPF_Parm)
// uint32_t                       bLooping                       (CPF_OptionalParm | CPF_Parm)
// uint32_t                       bOverride                      (CPF_OptionalParm | CPF_Parm)

void UAnimNodePlayCustomAnim::PlayCustomAnimByDuration(const class FName& AnimName, float Duration, float BlendInTime, float BlendOutTime, bool bLooping, bool bOverride)
{
	static UFunction* uFnPlayCustomAnimByDuration = nullptr;

	if (!uFnPlayCustomAnimByDuration)
	{
		uFnPlayCustomAnimByDuration = UFunction::FindFunction("Function Engine.AnimNodePlayCustomAnim.PlayCustomAnimByDuration");
	}

	UAnimNodePlayCustomAnim_execPlayCustomAnimByDuration_Params PlayCustomAnimByDuration_Params;
	memset(&PlayCustomAnimByDuration_Params, 0, sizeof(PlayCustomAnimByDuration_Params));
	memcpy_s(&PlayCustomAnimByDuration_Params.AnimName, sizeof(PlayCustomAnimByDuration_Params.AnimName), &AnimName, sizeof(AnimName));
	memcpy_s(&PlayCustomAnimByDuration_Params.Duration, sizeof(PlayCustomAnimByDuration_Params.Duration), &Duration, sizeof(Duration));
	memcpy_s(&PlayCustomAnimByDuration_Params.BlendInTime, sizeof(PlayCustomAnimByDuration_Params.BlendInTime), &BlendInTime, sizeof(BlendInTime));
	memcpy_s(&PlayCustomAnimByDuration_Params.BlendOutTime, sizeof(PlayCustomAnimByDuration_Params.BlendOutTime), &BlendOutTime, sizeof(BlendOutTime));
	PlayCustomAnimByDuration_Params.bLooping = bLooping;
	PlayCustomAnimByDuration_Params.bOverride = bOverride;

	uFnPlayCustomAnimByDuration->iNative = 0;
	uFnPlayCustomAnimByDuration->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnPlayCustomAnimByDuration, &PlayCustomAnimByDuration_Params, nullptr);
	uFnPlayCustomAnimByDuration->FunctionFlags |= 0x400;
	uFnPlayCustomAnimByDuration->iNative = 24272;
};

// Function Engine.AnimNodePlayCustomAnim.PlayCustomAnim
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[24271])
// Parameter Info:
// float                          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    AnimName                       (CPF_Parm)
// float                          Rate                           (CPF_Parm)
// float                          BlendInTime                    (CPF_OptionalParm | CPF_Parm)
// float                          BlendOutTime                   (CPF_OptionalParm | CPF_Parm)
// uint32_t                       bLooping                       (CPF_OptionalParm | CPF_Parm)
// uint32_t                       bOverride                      (CPF_OptionalParm | CPF_Parm)

float UAnimNodePlayCustomAnim::PlayCustomAnim(const class FName& AnimName, float Rate, float BlendInTime, float BlendOutTime, bool bLooping, bool bOverride)
{
	static UFunction* uFnPlayCustomAnim = nullptr;

	if (!uFnPlayCustomAnim)
	{
		uFnPlayCustomAnim = UFunction::FindFunction("Function Engine.AnimNodePlayCustomAnim.PlayCustomAnim");
	}

	UAnimNodePlayCustomAnim_execPlayCustomAnim_Params PlayCustomAnim_Params;
	memset(&PlayCustomAnim_Params, 0, sizeof(PlayCustomAnim_Params));
	memcpy_s(&PlayCustomAnim_Params.AnimName, sizeof(PlayCustomAnim_Params.AnimName), &AnimName, sizeof(AnimName));
	memcpy_s(&PlayCustomAnim_Params.Rate, sizeof(PlayCustomAnim_Params.Rate), &Rate, sizeof(Rate));
	memcpy_s(&PlayCustomAnim_Params.BlendInTime, sizeof(PlayCustomAnim_Params.BlendInTime), &BlendInTime, sizeof(BlendInTime));
	memcpy_s(&PlayCustomAnim_Params.BlendOutTime, sizeof(PlayCustomAnim_Params.BlendOutTime), &BlendOutTime, sizeof(BlendOutTime));
	PlayCustomAnim_Params.bLooping = bLooping;
	PlayCustomAnim_Params.bOverride = bOverride;

	uFnPlayCustomAnim->iNative = 0;
	uFnPlayCustomAnim->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnPlayCustomAnim, &PlayCustomAnim_Params, nullptr);
	uFnPlayCustomAnim->FunctionFlags |= 0x400;
	uFnPlayCustomAnim->iNative = 24271;

	return PlayCustomAnim_Params.ReturnValue;
};

// Function Engine.AnimNodeBlendList.SetActiveChild
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25565])
// Parameter Info:
// int32_t                        ChildIndex                     (CPF_Parm)
// float                          BlendTime                      (CPF_Parm)

void UAnimNodeBlendList::SetActiveChild(int32_t ChildIndex, float BlendTime)
{
	static UFunction* uFnSetActiveChild = nullptr;

	if (!uFnSetActiveChild)
	{
		uFnSetActiveChild = UFunction::FindFunction("Function Engine.AnimNodeBlendList.SetActiveChild");
	}

	UAnimNodeBlendList_execSetActiveChild_Params SetActiveChild_Params;
	memset(&SetActiveChild_Params, 0, sizeof(SetActiveChild_Params));
	memcpy_s(&SetActiveChild_Params.ChildIndex, sizeof(SetActiveChild_Params.ChildIndex), &ChildIndex, sizeof(ChildIndex));
	memcpy_s(&SetActiveChild_Params.BlendTime, sizeof(SetActiveChild_Params.BlendTime), &BlendTime, sizeof(BlendTime));

	uFnSetActiveChild->iNative = 0;
	uFnSetActiveChild->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetActiveChild, &SetActiveChild_Params, nullptr);
	uFnSetActiveChild->FunctionFlags |= 0x400;
	uFnSetActiveChild->iNative = 25565;
};

// Function Engine.AnimNodeBlendMultiBone.SetTargetStartBone
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[25812])
// Parameter Info:
// int32_t                        TargetIdx                      (CPF_Parm)
// class FName                    StartBoneName                  (CPF_Parm)
// float                          PerBoneIncrease                (CPF_OptionalParm | CPF_Parm)

void UAnimNodeBlendMultiBone::SetTargetStartBone(int32_t TargetIdx, const class FName& StartBoneName, float PerBoneIncrease)
{
	static UFunction* uFnSetTargetStartBone = nullptr;

	if (!uFnSetTargetStartBone)
	{
		uFnSetTargetStartBone = UFunction::FindFunction("Function Engine.AnimNodeBlendMultiBone.SetTargetStartBone");
	}

	UAnimNodeBlendMultiBone_execSetTargetStartBone_Params SetTargetStartBone_Params;
	memset(&SetTargetStartBone_Params, 0, sizeof(SetTargetStartBone_Params));
	memcpy_s(&SetTargetStartBone_Params.TargetIdx, sizeof(SetTargetStartBone_Params.TargetIdx), &TargetIdx, sizeof(TargetIdx));
	memcpy_s(&SetTargetStartBone_Params.StartBoneName, sizeof(SetTargetStartBone_Params.StartBoneName), &StartBoneName, sizeof(StartBoneName));
	memcpy_s(&SetTargetStartBone_Params.PerBoneIncrease, sizeof(SetTargetStartBone_Params.PerBoneIncrease), &PerBoneIncrease, sizeof(PerBoneIncrease));

	uFnSetTargetStartBone->iNative = 0;
	uFnSetTargetStartBone->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetTargetStartBone, &SetTargetStartBone_Params, nullptr);
	uFnSetTargetStartBone->FunctionFlags |= 0x400;
	uFnSetTargetStartBone->iNative = 25812;
};

// Function Engine.AnimNodeSlot.AddToSynchGroup
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[15376])
// Parameter Info:
// class FName                    GroupName                      (CPF_Parm)

void UAnimNodeSlot::AddToSynchGroup(const class FName& GroupName)
{
	static UFunction* uFnAddToSynchGroup = nullptr;

	if (!uFnAddToSynchGroup)
	{
		uFnAddToSynchGroup = UFunction::FindFunction("Function Engine.AnimNodeSlot.AddToSynchGroup");
	}

	UAnimNodeSlot_execAddToSynchGroup_Params AddToSynchGroup_Params;
	memset(&AddToSynchGroup_Params, 0, sizeof(AddToSynchGroup_Params));
	memcpy_s(&AddToSynchGroup_Params.GroupName, sizeof(AddToSynchGroup_Params.GroupName), &GroupName, sizeof(GroupName));

	uFnAddToSynchGroup->iNative = 0;
	uFnAddToSynchGroup->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnAddToSynchGroup, &AddToSynchGroup_Params, nullptr);
	uFnAddToSynchGroup->FunctionFlags |= 0x400;
	uFnAddToSynchGroup->iNative = 15376;
};

// Function Engine.AnimNodeSlot.SetRootBoneRotationOption
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[25770])
// Parameter Info:
// ERootRotationOption            AxisX                          (CPF_OptionalParm | CPF_Parm)
// ERootRotationOption            AxisY                          (CPF_OptionalParm | CPF_Parm)
// ERootRotationOption            AxisZ                          (CPF_OptionalParm | CPF_Parm)

void UAnimNodeSlot::SetRootBoneRotationOption(ERootRotationOption AxisX, ERootRotationOption AxisY, ERootRotationOption AxisZ)
{
	static UFunction* uFnSetRootBoneRotationOption = nullptr;

	if (!uFnSetRootBoneRotationOption)
	{
		uFnSetRootBoneRotationOption = UFunction::FindFunction("Function Engine.AnimNodeSlot.SetRootBoneRotationOption");
	}

	UAnimNodeSlot_execSetRootBoneRotationOption_Params SetRootBoneRotationOption_Params;
	memset(&SetRootBoneRotationOption_Params, 0, sizeof(SetRootBoneRotationOption_Params));
	memcpy_s(&SetRootBoneRotationOption_Params.AxisX, sizeof(SetRootBoneRotationOption_Params.AxisX), &AxisX, sizeof(AxisX));
	memcpy_s(&SetRootBoneRotationOption_Params.AxisY, sizeof(SetRootBoneRotationOption_Params.AxisY), &AxisY, sizeof(AxisY));
	memcpy_s(&SetRootBoneRotationOption_Params.AxisZ, sizeof(SetRootBoneRotationOption_Params.AxisZ), &AxisZ, sizeof(AxisZ));

	uFnSetRootBoneRotationOption->iNative = 0;
	uFnSetRootBoneRotationOption->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetRootBoneRotationOption, &SetRootBoneRotationOption_Params, nullptr);
	uFnSetRootBoneRotationOption->FunctionFlags |= 0x400;
	uFnSetRootBoneRotationOption->iNative = 25770;
};

// Function Engine.AnimNodeSlot.SetRootBoneAxisOption
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[25769])
// Parameter Info:
// ERootBoneAxis                  AxisX                          (CPF_OptionalParm | CPF_Parm)
// ERootBoneAxis                  AxisY                          (CPF_OptionalParm | CPF_Parm)
// ERootBoneAxis                  AxisZ                          (CPF_OptionalParm | CPF_Parm)

void UAnimNodeSlot::SetRootBoneAxisOption(ERootBoneAxis AxisX, ERootBoneAxis AxisY, ERootBoneAxis AxisZ)
{
	static UFunction* uFnSetRootBoneAxisOption = nullptr;

	if (!uFnSetRootBoneAxisOption)
	{
		uFnSetRootBoneAxisOption = UFunction::FindFunction("Function Engine.AnimNodeSlot.SetRootBoneAxisOption");
	}

	UAnimNodeSlot_execSetRootBoneAxisOption_Params SetRootBoneAxisOption_Params;
	memset(&SetRootBoneAxisOption_Params, 0, sizeof(SetRootBoneAxisOption_Params));
	memcpy_s(&SetRootBoneAxisOption_Params.AxisX, sizeof(SetRootBoneAxisOption_Params.AxisX), &AxisX, sizeof(AxisX));
	memcpy_s(&SetRootBoneAxisOption_Params.AxisY, sizeof(SetRootBoneAxisOption_Params.AxisY), &AxisY, sizeof(AxisY));
	memcpy_s(&SetRootBoneAxisOption_Params.AxisZ, sizeof(SetRootBoneAxisOption_Params.AxisZ), &AxisZ, sizeof(AxisZ));

	uFnSetRootBoneAxisOption->iNative = 0;
	uFnSetRootBoneAxisOption->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetRootBoneAxisOption, &SetRootBoneAxisOption_Params, nullptr);
	uFnSetRootBoneAxisOption->FunctionFlags |= 0x400;
	uFnSetRootBoneAxisOption->iNative = 25769;
};

// Function Engine.AnimNodeSlot.GetCustomAnimNodeSeq
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20550])
// Parameter Info:
// class UAnimNodeSequence*       ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class UAnimNodeSequence* UAnimNodeSlot::GetCustomAnimNodeSeq()
{
	static UFunction* uFnGetCustomAnimNodeSeq = nullptr;

	if (!uFnGetCustomAnimNodeSeq)
	{
		uFnGetCustomAnimNodeSeq = UFunction::FindFunction("Function Engine.AnimNodeSlot.GetCustomAnimNodeSeq");
	}

	UAnimNodeSlot_execGetCustomAnimNodeSeq_Params GetCustomAnimNodeSeq_Params;
	memset(&GetCustomAnimNodeSeq_Params, 0, sizeof(GetCustomAnimNodeSeq_Params));

	uFnGetCustomAnimNodeSeq->iNative = 0;
	uFnGetCustomAnimNodeSeq->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetCustomAnimNodeSeq, &GetCustomAnimNodeSeq_Params, nullptr);
	uFnGetCustomAnimNodeSeq->FunctionFlags |= 0x400;
	uFnGetCustomAnimNodeSeq->iNative = 20550;

	return GetCustomAnimNodeSeq_Params.ReturnValue;
};

// Function Engine.AnimNodeSlot.SetActorAnimEndNotification
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25568])
// Parameter Info:
// uint32_t                       bNewStatus                     (CPF_Parm)

void UAnimNodeSlot::SetActorAnimEndNotification(bool bNewStatus)
{
	static UFunction* uFnSetActorAnimEndNotification = nullptr;

	if (!uFnSetActorAnimEndNotification)
	{
		uFnSetActorAnimEndNotification = UFunction::FindFunction("Function Engine.AnimNodeSlot.SetActorAnimEndNotification");
	}

	UAnimNodeSlot_execSetActorAnimEndNotification_Params SetActorAnimEndNotification_Params;
	memset(&SetActorAnimEndNotification_Params, 0, sizeof(SetActorAnimEndNotification_Params));
	SetActorAnimEndNotification_Params.bNewStatus = bNewStatus;

	uFnSetActorAnimEndNotification->iNative = 0;
	uFnSetActorAnimEndNotification->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetActorAnimEndNotification, &SetActorAnimEndNotification_Params, nullptr);
	uFnSetActorAnimEndNotification->FunctionFlags |= 0x400;
	uFnSetActorAnimEndNotification->iNative = 25568;
};

// Function Engine.AnimNodeSlot.SetCustomAnim
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25628])
// Parameter Info:
// class FName                    AnimName                       (CPF_Parm)

void UAnimNodeSlot::SetCustomAnim(const class FName& AnimName)
{
	static UFunction* uFnSetCustomAnim = nullptr;

	if (!uFnSetCustomAnim)
	{
		uFnSetCustomAnim = UFunction::FindFunction("Function Engine.AnimNodeSlot.SetCustomAnim");
	}

	UAnimNodeSlot_execSetCustomAnim_Params SetCustomAnim_Params;
	memset(&SetCustomAnim_Params, 0, sizeof(SetCustomAnim_Params));
	memcpy_s(&SetCustomAnim_Params.AnimName, sizeof(SetCustomAnim_Params.AnimName), &AnimName, sizeof(AnimName));

	uFnSetCustomAnim->iNative = 0;
	uFnSetCustomAnim->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetCustomAnim, &SetCustomAnim_Params, nullptr);
	uFnSetCustomAnim->FunctionFlags |= 0x400;
	uFnSetCustomAnim->iNative = 25628;
};

// Function Engine.AnimNodeSlot.StopCustomAnim
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[26320])
// Parameter Info:
// float                          BlendOutTime                   (CPF_Parm)

void UAnimNodeSlot::StopCustomAnim(float BlendOutTime)
{
	static UFunction* uFnStopCustomAnim = nullptr;

	if (!uFnStopCustomAnim)
	{
		uFnStopCustomAnim = UFunction::FindFunction("Function Engine.AnimNodeSlot.StopCustomAnim");
	}

	UAnimNodeSlot_execStopCustomAnim_Params StopCustomAnim_Params;
	memset(&StopCustomAnim_Params, 0, sizeof(StopCustomAnim_Params));
	memcpy_s(&StopCustomAnim_Params.BlendOutTime, sizeof(StopCustomAnim_Params.BlendOutTime), &BlendOutTime, sizeof(BlendOutTime));

	uFnStopCustomAnim->iNative = 0;
	uFnStopCustomAnim->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnStopCustomAnim, &StopCustomAnim_Params, nullptr);
	uFnStopCustomAnim->FunctionFlags |= 0x400;
	uFnStopCustomAnim->iNative = 26320;
};

// Function Engine.AnimNodeSlot.GetPlayedAnimation
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20677])
// Parameter Info:
// class FName                    ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class FName UAnimNodeSlot::GetPlayedAnimation()
{
	static UFunction* uFnGetPlayedAnimation = nullptr;

	if (!uFnGetPlayedAnimation)
	{
		uFnGetPlayedAnimation = UFunction::FindFunction("Function Engine.AnimNodeSlot.GetPlayedAnimation");
	}

	UAnimNodeSlot_execGetPlayedAnimation_Params GetPlayedAnimation_Params;
	memset(&GetPlayedAnimation_Params, 0, sizeof(GetPlayedAnimation_Params));

	uFnGetPlayedAnimation->iNative = 0;
	uFnGetPlayedAnimation->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetPlayedAnimation, &GetPlayedAnimation_Params, nullptr);
	uFnGetPlayedAnimation->FunctionFlags |= 0x400;
	uFnGetPlayedAnimation->iNative = 20677;

	return GetPlayedAnimation_Params.ReturnValue;
};

// Function Engine.AnimNodeSlot.PlayCustomAnimByDuration
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[24272])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    AnimName                       (CPF_Parm)
// float                          Duration                       (CPF_Parm)
// float                          BlendInTime                    (CPF_OptionalParm | CPF_Parm)
// float                          BlendOutTime                   (CPF_OptionalParm | CPF_Parm)
// uint32_t                       bLooping                       (CPF_OptionalParm | CPF_Parm)
// uint32_t                       bOverride                      (CPF_OptionalParm | CPF_Parm)

bool UAnimNodeSlot::PlayCustomAnimByDuration(const class FName& AnimName, float Duration, float BlendInTime, float BlendOutTime, bool bLooping, bool bOverride)
{
	static UFunction* uFnPlayCustomAnimByDuration = nullptr;

	if (!uFnPlayCustomAnimByDuration)
	{
		uFnPlayCustomAnimByDuration = UFunction::FindFunction("Function Engine.AnimNodeSlot.PlayCustomAnimByDuration");
	}

	UAnimNodeSlot_execPlayCustomAnimByDuration_Params PlayCustomAnimByDuration_Params;
	memset(&PlayCustomAnimByDuration_Params, 0, sizeof(PlayCustomAnimByDuration_Params));
	memcpy_s(&PlayCustomAnimByDuration_Params.AnimName, sizeof(PlayCustomAnimByDuration_Params.AnimName), &AnimName, sizeof(AnimName));
	memcpy_s(&PlayCustomAnimByDuration_Params.Duration, sizeof(PlayCustomAnimByDuration_Params.Duration), &Duration, sizeof(Duration));
	memcpy_s(&PlayCustomAnimByDuration_Params.BlendInTime, sizeof(PlayCustomAnimByDuration_Params.BlendInTime), &BlendInTime, sizeof(BlendInTime));
	memcpy_s(&PlayCustomAnimByDuration_Params.BlendOutTime, sizeof(PlayCustomAnimByDuration_Params.BlendOutTime), &BlendOutTime, sizeof(BlendOutTime));
	PlayCustomAnimByDuration_Params.bLooping = bLooping;
	PlayCustomAnimByDuration_Params.bOverride = bOverride;

	uFnPlayCustomAnimByDuration->iNative = 0;
	uFnPlayCustomAnimByDuration->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnPlayCustomAnimByDuration, &PlayCustomAnimByDuration_Params, nullptr);
	uFnPlayCustomAnimByDuration->FunctionFlags |= 0x400;
	uFnPlayCustomAnimByDuration->iNative = 24272;

	return PlayCustomAnimByDuration_Params.ReturnValue;
};

// Function Engine.AnimNodeSlot.PlayCustomAnim
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[24271])
// Parameter Info:
// float                          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    AnimName                       (CPF_Parm)
// float                          Rate                           (CPF_Parm)
// float                          BlendInTime                    (CPF_OptionalParm | CPF_Parm)
// float                          BlendOutTime                   (CPF_OptionalParm | CPF_Parm)
// uint32_t                       bLooping                       (CPF_OptionalParm | CPF_Parm)
// uint32_t                       bOverride                      (CPF_OptionalParm | CPF_Parm)
// float                          StartTime                      (CPF_OptionalParm | CPF_Parm)

float UAnimNodeSlot::PlayCustomAnim(const class FName& AnimName, float Rate, float BlendInTime, float BlendOutTime, bool bLooping, bool bOverride, float StartTime)
{
	static UFunction* uFnPlayCustomAnim = nullptr;

	if (!uFnPlayCustomAnim)
	{
		uFnPlayCustomAnim = UFunction::FindFunction("Function Engine.AnimNodeSlot.PlayCustomAnim");
	}

	UAnimNodeSlot_execPlayCustomAnim_Params PlayCustomAnim_Params;
	memset(&PlayCustomAnim_Params, 0, sizeof(PlayCustomAnim_Params));
	memcpy_s(&PlayCustomAnim_Params.AnimName, sizeof(PlayCustomAnim_Params.AnimName), &AnimName, sizeof(AnimName));
	memcpy_s(&PlayCustomAnim_Params.Rate, sizeof(PlayCustomAnim_Params.Rate), &Rate, sizeof(Rate));
	memcpy_s(&PlayCustomAnim_Params.BlendInTime, sizeof(PlayCustomAnim_Params.BlendInTime), &BlendInTime, sizeof(BlendInTime));
	memcpy_s(&PlayCustomAnim_Params.BlendOutTime, sizeof(PlayCustomAnim_Params.BlendOutTime), &BlendOutTime, sizeof(BlendOutTime));
	PlayCustomAnim_Params.bLooping = bLooping;
	PlayCustomAnim_Params.bOverride = bOverride;
	memcpy_s(&PlayCustomAnim_Params.StartTime, sizeof(PlayCustomAnim_Params.StartTime), &StartTime, sizeof(StartTime));

	uFnPlayCustomAnim->iNative = 0;
	uFnPlayCustomAnim->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnPlayCustomAnim, &PlayCustomAnim_Params, nullptr);
	uFnPlayCustomAnim->FunctionFlags |= 0x400;
	uFnPlayCustomAnim->iNative = 24271;

	return PlayCustomAnim_Params.ReturnValue;
};

// Function Engine.AnimNodeSynch.SetGroupRateScale
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25672])
// Parameter Info:
// class FName                    GroupName                      (CPF_Parm)
// float                          NewRateScale                   (CPF_Parm)

void UAnimNodeSynch::SetGroupRateScale(const class FName& GroupName, float NewRateScale)
{
	static UFunction* uFnSetGroupRateScale = nullptr;

	if (!uFnSetGroupRateScale)
	{
		uFnSetGroupRateScale = UFunction::FindFunction("Function Engine.AnimNodeSynch.SetGroupRateScale");
	}

	UAnimNodeSynch_execSetGroupRateScale_Params SetGroupRateScale_Params;
	memset(&SetGroupRateScale_Params, 0, sizeof(SetGroupRateScale_Params));
	memcpy_s(&SetGroupRateScale_Params.GroupName, sizeof(SetGroupRateScale_Params.GroupName), &GroupName, sizeof(GroupName));
	memcpy_s(&SetGroupRateScale_Params.NewRateScale, sizeof(SetGroupRateScale_Params.NewRateScale), &NewRateScale, sizeof(NewRateScale));

	uFnSetGroupRateScale->iNative = 0;
	uFnSetGroupRateScale->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetGroupRateScale, &SetGroupRateScale_Params, nullptr);
	uFnSetGroupRateScale->FunctionFlags |= 0x400;
	uFnSetGroupRateScale->iNative = 25672;
};

// Function Engine.AnimNodeSynch.GetRelativePosition
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20732])
// Parameter Info:
// float                          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    GroupName                      (CPF_Parm)

float UAnimNodeSynch::GetRelativePosition(const class FName& GroupName)
{
	static UFunction* uFnGetRelativePosition = nullptr;

	if (!uFnGetRelativePosition)
	{
		uFnGetRelativePosition = UFunction::FindFunction("Function Engine.AnimNodeSynch.GetRelativePosition");
	}

	UAnimNodeSynch_execGetRelativePosition_Params GetRelativePosition_Params;
	memset(&GetRelativePosition_Params, 0, sizeof(GetRelativePosition_Params));
	memcpy_s(&GetRelativePosition_Params.GroupName, sizeof(GetRelativePosition_Params.GroupName), &GroupName, sizeof(GroupName));

	uFnGetRelativePosition->iNative = 0;
	uFnGetRelativePosition->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetRelativePosition, &GetRelativePosition_Params, nullptr);
	uFnGetRelativePosition->FunctionFlags |= 0x400;
	uFnGetRelativePosition->iNative = 20732;

	return GetRelativePosition_Params.ReturnValue;
};

// Function Engine.AnimNodeSynch.ForceRelativePosition
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20276])
// Parameter Info:
// class FName                    GroupName                      (CPF_Parm)
// float                          RelativePosition               (CPF_Parm)

void UAnimNodeSynch::ForceRelativePosition(const class FName& GroupName, float RelativePosition)
{
	static UFunction* uFnForceRelativePosition = nullptr;

	if (!uFnForceRelativePosition)
	{
		uFnForceRelativePosition = UFunction::FindFunction("Function Engine.AnimNodeSynch.ForceRelativePosition");
	}

	UAnimNodeSynch_execForceRelativePosition_Params ForceRelativePosition_Params;
	memset(&ForceRelativePosition_Params, 0, sizeof(ForceRelativePosition_Params));
	memcpy_s(&ForceRelativePosition_Params.GroupName, sizeof(ForceRelativePosition_Params.GroupName), &GroupName, sizeof(GroupName));
	memcpy_s(&ForceRelativePosition_Params.RelativePosition, sizeof(ForceRelativePosition_Params.RelativePosition), &RelativePosition, sizeof(RelativePosition));

	uFnForceRelativePosition->iNative = 0;
	uFnForceRelativePosition->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnForceRelativePosition, &ForceRelativePosition_Params, nullptr);
	uFnForceRelativePosition->FunctionFlags |= 0x400;
	uFnForceRelativePosition->iNative = 20276;
};

// Function Engine.AnimNodeSynch.GetMasterNodeOfGroup
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20636])
// Parameter Info:
// class UAnimNodeSequence*       ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    GroupName                      (CPF_Parm)

class UAnimNodeSequence* UAnimNodeSynch::GetMasterNodeOfGroup(const class FName& GroupName)
{
	static UFunction* uFnGetMasterNodeOfGroup = nullptr;

	if (!uFnGetMasterNodeOfGroup)
	{
		uFnGetMasterNodeOfGroup = UFunction::FindFunction("Function Engine.AnimNodeSynch.GetMasterNodeOfGroup");
	}

	UAnimNodeSynch_execGetMasterNodeOfGroup_Params GetMasterNodeOfGroup_Params;
	memset(&GetMasterNodeOfGroup_Params, 0, sizeof(GetMasterNodeOfGroup_Params));
	memcpy_s(&GetMasterNodeOfGroup_Params.GroupName, sizeof(GetMasterNodeOfGroup_Params.GroupName), &GroupName, sizeof(GroupName));

	uFnGetMasterNodeOfGroup->iNative = 0;
	uFnGetMasterNodeOfGroup->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetMasterNodeOfGroup, &GetMasterNodeOfGroup_Params, nullptr);
	uFnGetMasterNodeOfGroup->FunctionFlags |= 0x400;
	uFnGetMasterNodeOfGroup->iNative = 20636;

	return GetMasterNodeOfGroup_Params.ReturnValue;
};

// Function Engine.AnimNodeSynch.RemoveNodeFromGroup
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25076])
// Parameter Info:
// class UAnimNodeSequence*       SeqNode                        (CPF_Parm)
// class FName                    GroupName                      (CPF_Parm)

void UAnimNodeSynch::RemoveNodeFromGroup(class UAnimNodeSequence* SeqNode, const class FName& GroupName)
{
	static UFunction* uFnRemoveNodeFromGroup = nullptr;

	if (!uFnRemoveNodeFromGroup)
	{
		uFnRemoveNodeFromGroup = UFunction::FindFunction("Function Engine.AnimNodeSynch.RemoveNodeFromGroup");
	}

	UAnimNodeSynch_execRemoveNodeFromGroup_Params RemoveNodeFromGroup_Params;
	memset(&RemoveNodeFromGroup_Params, 0, sizeof(RemoveNodeFromGroup_Params));
	RemoveNodeFromGroup_Params.SeqNode = SeqNode;
	memcpy_s(&RemoveNodeFromGroup_Params.GroupName, sizeof(RemoveNodeFromGroup_Params.GroupName), &GroupName, sizeof(GroupName));

	uFnRemoveNodeFromGroup->iNative = 0;
	uFnRemoveNodeFromGroup->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnRemoveNodeFromGroup, &RemoveNodeFromGroup_Params, nullptr);
	uFnRemoveNodeFromGroup->FunctionFlags |= 0x400;
	uFnRemoveNodeFromGroup->iNative = 25076;
};

// Function Engine.AnimNodeSynch.AddNodeToGroup
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[15335])
// Parameter Info:
// class UAnimNodeSequence*       SeqNode                        (CPF_Parm)
// class FName                    GroupName                      (CPF_Parm)

void UAnimNodeSynch::AddNodeToGroup(class UAnimNodeSequence* SeqNode, const class FName& GroupName)
{
	static UFunction* uFnAddNodeToGroup = nullptr;

	if (!uFnAddNodeToGroup)
	{
		uFnAddNodeToGroup = UFunction::FindFunction("Function Engine.AnimNodeSynch.AddNodeToGroup");
	}

	UAnimNodeSynch_execAddNodeToGroup_Params AddNodeToGroup_Params;
	memset(&AddNodeToGroup_Params, 0, sizeof(AddNodeToGroup_Params));
	AddNodeToGroup_Params.SeqNode = SeqNode;
	memcpy_s(&AddNodeToGroup_Params.GroupName, sizeof(AddNodeToGroup_Params.GroupName), &GroupName, sizeof(GroupName));

	uFnAddNodeToGroup->iNative = 0;
	uFnAddNodeToGroup->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnAddNodeToGroup, &AddNodeToGroup_Params, nullptr);
	uFnAddNodeToGroup->FunctionFlags |= 0x400;
	uFnAddNodeToGroup->iNative = 15335;
};

// Function Engine.AnimTree.GetGroupIndex
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20598])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    GroupName                      (CPF_Parm)

int32_t UAnimTree::GetGroupIndex(const class FName& GroupName)
{
	static UFunction* uFnGetGroupIndex = nullptr;

	if (!uFnGetGroupIndex)
	{
		uFnGetGroupIndex = UFunction::FindFunction("Function Engine.AnimTree.GetGroupIndex");
	}

	UAnimTree_execGetGroupIndex_Params GetGroupIndex_Params;
	memset(&GetGroupIndex_Params, 0, sizeof(GetGroupIndex_Params));
	memcpy_s(&GetGroupIndex_Params.GroupName, sizeof(GetGroupIndex_Params.GroupName), &GroupName, sizeof(GroupName));

	uFnGetGroupIndex->iNative = 0;
	uFnGetGroupIndex->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetGroupIndex, &GetGroupIndex_Params, nullptr);
	uFnGetGroupIndex->FunctionFlags |= 0x400;
	uFnGetGroupIndex->iNative = 20598;

	return GetGroupIndex_Params.ReturnValue;
};

// Function Engine.AnimTree.GetGroupRateScale
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20600])
// Parameter Info:
// float                          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    GroupName                      (CPF_Parm)

float UAnimTree::GetGroupRateScale(const class FName& GroupName)
{
	static UFunction* uFnGetGroupRateScale = nullptr;

	if (!uFnGetGroupRateScale)
	{
		uFnGetGroupRateScale = UFunction::FindFunction("Function Engine.AnimTree.GetGroupRateScale");
	}

	UAnimTree_execGetGroupRateScale_Params GetGroupRateScale_Params;
	memset(&GetGroupRateScale_Params, 0, sizeof(GetGroupRateScale_Params));
	memcpy_s(&GetGroupRateScale_Params.GroupName, sizeof(GetGroupRateScale_Params.GroupName), &GroupName, sizeof(GroupName));

	uFnGetGroupRateScale->iNative = 0;
	uFnGetGroupRateScale->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetGroupRateScale, &GetGroupRateScale_Params, nullptr);
	uFnGetGroupRateScale->FunctionFlags |= 0x400;
	uFnGetGroupRateScale->iNative = 20600;

	return GetGroupRateScale_Params.ReturnValue;
};

// Function Engine.AnimTree.SetGroupRateScale
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25672])
// Parameter Info:
// class FName                    GroupName                      (CPF_Parm)
// float                          NewRateScale                   (CPF_Parm)

void UAnimTree::SetGroupRateScale(const class FName& GroupName, float NewRateScale)
{
	static UFunction* uFnSetGroupRateScale = nullptr;

	if (!uFnSetGroupRateScale)
	{
		uFnSetGroupRateScale = UFunction::FindFunction("Function Engine.AnimTree.SetGroupRateScale");
	}

	UAnimTree_execSetGroupRateScale_Params SetGroupRateScale_Params;
	memset(&SetGroupRateScale_Params, 0, sizeof(SetGroupRateScale_Params));
	memcpy_s(&SetGroupRateScale_Params.GroupName, sizeof(SetGroupRateScale_Params.GroupName), &GroupName, sizeof(GroupName));
	memcpy_s(&SetGroupRateScale_Params.NewRateScale, sizeof(SetGroupRateScale_Params.NewRateScale), &NewRateScale, sizeof(NewRateScale));

	uFnSetGroupRateScale->iNative = 0;
	uFnSetGroupRateScale->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetGroupRateScale, &SetGroupRateScale_Params, nullptr);
	uFnSetGroupRateScale->FunctionFlags |= 0x400;
	uFnSetGroupRateScale->iNative = 25672;
};

// Function Engine.AnimTree.GetGroupRelativePosition
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20601])
// Parameter Info:
// float                          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    GroupName                      (CPF_Parm)

float UAnimTree::GetGroupRelativePosition(const class FName& GroupName)
{
	static UFunction* uFnGetGroupRelativePosition = nullptr;

	if (!uFnGetGroupRelativePosition)
	{
		uFnGetGroupRelativePosition = UFunction::FindFunction("Function Engine.AnimTree.GetGroupRelativePosition");
	}

	UAnimTree_execGetGroupRelativePosition_Params GetGroupRelativePosition_Params;
	memset(&GetGroupRelativePosition_Params, 0, sizeof(GetGroupRelativePosition_Params));
	memcpy_s(&GetGroupRelativePosition_Params.GroupName, sizeof(GetGroupRelativePosition_Params.GroupName), &GroupName, sizeof(GroupName));

	uFnGetGroupRelativePosition->iNative = 0;
	uFnGetGroupRelativePosition->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetGroupRelativePosition, &GetGroupRelativePosition_Params, nullptr);
	uFnGetGroupRelativePosition->FunctionFlags |= 0x400;
	uFnGetGroupRelativePosition->iNative = 20601;

	return GetGroupRelativePosition_Params.ReturnValue;
};

// Function Engine.AnimTree.ForceGroupRelativePosition
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20269])
// Parameter Info:
// class FName                    GroupName                      (CPF_Parm)
// float                          RelativePosition               (CPF_Parm)

void UAnimTree::ForceGroupRelativePosition(const class FName& GroupName, float RelativePosition)
{
	static UFunction* uFnForceGroupRelativePosition = nullptr;

	if (!uFnForceGroupRelativePosition)
	{
		uFnForceGroupRelativePosition = UFunction::FindFunction("Function Engine.AnimTree.ForceGroupRelativePosition");
	}

	UAnimTree_execForceGroupRelativePosition_Params ForceGroupRelativePosition_Params;
	memset(&ForceGroupRelativePosition_Params, 0, sizeof(ForceGroupRelativePosition_Params));
	memcpy_s(&ForceGroupRelativePosition_Params.GroupName, sizeof(ForceGroupRelativePosition_Params.GroupName), &GroupName, sizeof(GroupName));
	memcpy_s(&ForceGroupRelativePosition_Params.RelativePosition, sizeof(ForceGroupRelativePosition_Params.RelativePosition), &RelativePosition, sizeof(RelativePosition));

	uFnForceGroupRelativePosition->iNative = 0;
	uFnForceGroupRelativePosition->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnForceGroupRelativePosition, &ForceGroupRelativePosition_Params, nullptr);
	uFnForceGroupRelativePosition->FunctionFlags |= 0x400;
	uFnForceGroupRelativePosition->iNative = 20269;
};

// Function Engine.AnimTree.GetGroupNotifyMaster
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20599])
// Parameter Info:
// class UAnimNodeSequence*       ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    GroupName                      (CPF_Parm)

class UAnimNodeSequence* UAnimTree::GetGroupNotifyMaster(const class FName& GroupName)
{
	static UFunction* uFnGetGroupNotifyMaster = nullptr;

	if (!uFnGetGroupNotifyMaster)
	{
		uFnGetGroupNotifyMaster = UFunction::FindFunction("Function Engine.AnimTree.GetGroupNotifyMaster");
	}

	UAnimTree_execGetGroupNotifyMaster_Params GetGroupNotifyMaster_Params;
	memset(&GetGroupNotifyMaster_Params, 0, sizeof(GetGroupNotifyMaster_Params));
	memcpy_s(&GetGroupNotifyMaster_Params.GroupName, sizeof(GetGroupNotifyMaster_Params.GroupName), &GroupName, sizeof(GroupName));

	uFnGetGroupNotifyMaster->iNative = 0;
	uFnGetGroupNotifyMaster->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetGroupNotifyMaster, &GetGroupNotifyMaster_Params, nullptr);
	uFnGetGroupNotifyMaster->FunctionFlags |= 0x400;
	uFnGetGroupNotifyMaster->iNative = 20599;

	return GetGroupNotifyMaster_Params.ReturnValue;
};

// Function Engine.AnimTree.GetGroupSynchMaster
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20602])
// Parameter Info:
// class UAnimNodeSequence*       ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    GroupName                      (CPF_Parm)

class UAnimNodeSequence* UAnimTree::GetGroupSynchMaster(const class FName& GroupName)
{
	static UFunction* uFnGetGroupSynchMaster = nullptr;

	if (!uFnGetGroupSynchMaster)
	{
		uFnGetGroupSynchMaster = UFunction::FindFunction("Function Engine.AnimTree.GetGroupSynchMaster");
	}

	UAnimTree_execGetGroupSynchMaster_Params GetGroupSynchMaster_Params;
	memset(&GetGroupSynchMaster_Params, 0, sizeof(GetGroupSynchMaster_Params));
	memcpy_s(&GetGroupSynchMaster_Params.GroupName, sizeof(GetGroupSynchMaster_Params.GroupName), &GroupName, sizeof(GroupName));

	uFnGetGroupSynchMaster->iNative = 0;
	uFnGetGroupSynchMaster->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetGroupSynchMaster, &GetGroupSynchMaster_Params, nullptr);
	uFnGetGroupSynchMaster->FunctionFlags |= 0x400;
	uFnGetGroupSynchMaster->iNative = 20602;

	return GetGroupSynchMaster_Params.ReturnValue;
};

// Function Engine.AnimTree.SetAnimGroupForNode
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[25586])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UAnimNodeSequence*       SeqNode                        (CPF_Parm)
// class FName                    GroupName                      (CPF_Parm)
// uint32_t                       bCreateIfNotFound              (CPF_OptionalParm | CPF_Parm)

bool UAnimTree::SetAnimGroupForNode(class UAnimNodeSequence* SeqNode, const class FName& GroupName, bool bCreateIfNotFound)
{
	static UFunction* uFnSetAnimGroupForNode = nullptr;

	if (!uFnSetAnimGroupForNode)
	{
		uFnSetAnimGroupForNode = UFunction::FindFunction("Function Engine.AnimTree.SetAnimGroupForNode");
	}

	UAnimTree_execSetAnimGroupForNode_Params SetAnimGroupForNode_Params;
	memset(&SetAnimGroupForNode_Params, 0, sizeof(SetAnimGroupForNode_Params));
	SetAnimGroupForNode_Params.SeqNode = SeqNode;
	memcpy_s(&SetAnimGroupForNode_Params.GroupName, sizeof(SetAnimGroupForNode_Params.GroupName), &GroupName, sizeof(GroupName));
	SetAnimGroupForNode_Params.bCreateIfNotFound = bCreateIfNotFound;

	uFnSetAnimGroupForNode->iNative = 0;
	uFnSetAnimGroupForNode->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetAnimGroupForNode, &SetAnimGroupForNode_Params, nullptr);
	uFnSetAnimGroupForNode->FunctionFlags |= 0x400;
	uFnSetAnimGroupForNode->iNative = 25586;

	return SetAnimGroupForNode_Params.ReturnValue;
};

// Function Engine.AnimTree.FindSkelControl
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20120])
// Parameter Info:
// class USkelControlBase*        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    InControlName                  (CPF_Parm)

class USkelControlBase* UAnimTree::FindSkelControl(const class FName& InControlName)
{
	static UFunction* uFnFindSkelControl = nullptr;

	if (!uFnFindSkelControl)
	{
		uFnFindSkelControl = UFunction::FindFunction("Function Engine.AnimTree.FindSkelControl");
	}

	UAnimTree_execFindSkelControl_Params FindSkelControl_Params;
	memset(&FindSkelControl_Params, 0, sizeof(FindSkelControl_Params));
	memcpy_s(&FindSkelControl_Params.InControlName, sizeof(FindSkelControl_Params.InControlName), &InControlName, sizeof(InControlName));

	uFnFindSkelControl->iNative = 0;
	uFnFindSkelControl->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnFindSkelControl, &FindSkelControl_Params, nullptr);
	uFnFindSkelControl->FunctionFlags |= 0x400;
	uFnFindSkelControl->iNative = 20120;

	return FindSkelControl_Params.ReturnValue;
};

// Function Engine.ArkAnimNodeBlendPose.SetActiveChild
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25565])
// Parameter Info:
// int32_t                        ChildIndex                     (CPF_Parm)
// float                          BlendTime                      (CPF_Parm)

void UArkAnimNodeBlendPose::SetActiveChild(int32_t ChildIndex, float BlendTime)
{
	static UFunction* uFnSetActiveChild = nullptr;

	if (!uFnSetActiveChild)
	{
		uFnSetActiveChild = UFunction::FindFunction("Function Engine.ArkAnimNodeBlendPose.SetActiveChild");
	}

	UArkAnimNodeBlendPose_execSetActiveChild_Params SetActiveChild_Params;
	memset(&SetActiveChild_Params, 0, sizeof(SetActiveChild_Params));
	memcpy_s(&SetActiveChild_Params.ChildIndex, sizeof(SetActiveChild_Params.ChildIndex), &ChildIndex, sizeof(ChildIndex));
	memcpy_s(&SetActiveChild_Params.BlendTime, sizeof(SetActiveChild_Params.BlendTime), &BlendTime, sizeof(BlendTime));

	uFnSetActiveChild->iNative = 0;
	uFnSetActiveChild->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetActiveChild, &SetActiveChild_Params, nullptr);
	uFnSetActiveChild->FunctionFlags |= 0x400;
	uFnSetActiveChild->iNative = 25565;
};

// Function Engine.AnimNodeSequence.SetRootBoneRotationOption
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[25770])
// Parameter Info:
// ERootRotationOption            AxisX                          (CPF_OptionalParm | CPF_Parm)
// ERootRotationOption            AxisY                          (CPF_OptionalParm | CPF_Parm)
// ERootRotationOption            AxisZ                          (CPF_OptionalParm | CPF_Parm)

void UAnimNodeSequence::SetRootBoneRotationOption(ERootRotationOption AxisX, ERootRotationOption AxisY, ERootRotationOption AxisZ)
{
	static UFunction* uFnSetRootBoneRotationOption = nullptr;

	if (!uFnSetRootBoneRotationOption)
	{
		uFnSetRootBoneRotationOption = UFunction::FindFunction("Function Engine.AnimNodeSequence.SetRootBoneRotationOption");
	}

	UAnimNodeSequence_execSetRootBoneRotationOption_Params SetRootBoneRotationOption_Params;
	memset(&SetRootBoneRotationOption_Params, 0, sizeof(SetRootBoneRotationOption_Params));
	memcpy_s(&SetRootBoneRotationOption_Params.AxisX, sizeof(SetRootBoneRotationOption_Params.AxisX), &AxisX, sizeof(AxisX));
	memcpy_s(&SetRootBoneRotationOption_Params.AxisY, sizeof(SetRootBoneRotationOption_Params.AxisY), &AxisY, sizeof(AxisY));
	memcpy_s(&SetRootBoneRotationOption_Params.AxisZ, sizeof(SetRootBoneRotationOption_Params.AxisZ), &AxisZ, sizeof(AxisZ));

	uFnSetRootBoneRotationOption->iNative = 0;
	uFnSetRootBoneRotationOption->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetRootBoneRotationOption, &SetRootBoneRotationOption_Params, nullptr);
	uFnSetRootBoneRotationOption->FunctionFlags |= 0x400;
	uFnSetRootBoneRotationOption->iNative = 25770;
};

// Function Engine.AnimNodeSequence.SetRootBoneAxisOption
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[25769])
// Parameter Info:
// ERootBoneAxis                  AxisX                          (CPF_OptionalParm | CPF_Parm)
// ERootBoneAxis                  AxisY                          (CPF_OptionalParm | CPF_Parm)
// ERootBoneAxis                  AxisZ                          (CPF_OptionalParm | CPF_Parm)

void UAnimNodeSequence::SetRootBoneAxisOption(ERootBoneAxis AxisX, ERootBoneAxis AxisY, ERootBoneAxis AxisZ)
{
	static UFunction* uFnSetRootBoneAxisOption = nullptr;

	if (!uFnSetRootBoneAxisOption)
	{
		uFnSetRootBoneAxisOption = UFunction::FindFunction("Function Engine.AnimNodeSequence.SetRootBoneAxisOption");
	}

	UAnimNodeSequence_execSetRootBoneAxisOption_Params SetRootBoneAxisOption_Params;
	memset(&SetRootBoneAxisOption_Params, 0, sizeof(SetRootBoneAxisOption_Params));
	memcpy_s(&SetRootBoneAxisOption_Params.AxisX, sizeof(SetRootBoneAxisOption_Params.AxisX), &AxisX, sizeof(AxisX));
	memcpy_s(&SetRootBoneAxisOption_Params.AxisY, sizeof(SetRootBoneAxisOption_Params.AxisY), &AxisY, sizeof(AxisY));
	memcpy_s(&SetRootBoneAxisOption_Params.AxisZ, sizeof(SetRootBoneAxisOption_Params.AxisZ), &AxisZ, sizeof(AxisZ));

	uFnSetRootBoneAxisOption->iNative = 0;
	uFnSetRootBoneAxisOption->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetRootBoneAxisOption, &SetRootBoneAxisOption_Params, nullptr);
	uFnSetRootBoneAxisOption->FunctionFlags |= 0x400;
	uFnSetRootBoneAxisOption->iNative = 25769;
};

// Function Engine.AnimNodeSequence.GetTimeLeft
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20786])
// Parameter Info:
// float                          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

float UAnimNodeSequence::GetTimeLeft()
{
	static UFunction* uFnGetTimeLeft = nullptr;

	if (!uFnGetTimeLeft)
	{
		uFnGetTimeLeft = UFunction::FindFunction("Function Engine.AnimNodeSequence.GetTimeLeft");
	}

	UAnimNodeSequence_execGetTimeLeft_Params GetTimeLeft_Params;
	memset(&GetTimeLeft_Params, 0, sizeof(GetTimeLeft_Params));

	uFnGetTimeLeft->iNative = 0;
	uFnGetTimeLeft->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetTimeLeft, &GetTimeLeft_Params, nullptr);
	uFnGetTimeLeft->FunctionFlags |= 0x400;
	uFnGetTimeLeft->iNative = 20786;

	return GetTimeLeft_Params.ReturnValue;
};

// Function Engine.AnimNodeSequence.GetAnimPlaybackLength
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20497])
// Parameter Info:
// float                          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

float UAnimNodeSequence::GetAnimPlaybackLength()
{
	static UFunction* uFnGetAnimPlaybackLength = nullptr;

	if (!uFnGetAnimPlaybackLength)
	{
		uFnGetAnimPlaybackLength = UFunction::FindFunction("Function Engine.AnimNodeSequence.GetAnimPlaybackLength");
	}

	UAnimNodeSequence_execGetAnimPlaybackLength_Params GetAnimPlaybackLength_Params;
	memset(&GetAnimPlaybackLength_Params, 0, sizeof(GetAnimPlaybackLength_Params));

	uFnGetAnimPlaybackLength->iNative = 0;
	uFnGetAnimPlaybackLength->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetAnimPlaybackLength, &GetAnimPlaybackLength_Params, nullptr);
	uFnGetAnimPlaybackLength->FunctionFlags |= 0x400;
	uFnGetAnimPlaybackLength->iNative = 20497;

	return GetAnimPlaybackLength_Params.ReturnValue;
};

// Function Engine.AnimNodeSequence.GetGlobalPlayRate
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20595])
// Parameter Info:
// float                          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

float UAnimNodeSequence::GetGlobalPlayRate()
{
	static UFunction* uFnGetGlobalPlayRate = nullptr;

	if (!uFnGetGlobalPlayRate)
	{
		uFnGetGlobalPlayRate = UFunction::FindFunction("Function Engine.AnimNodeSequence.GetGlobalPlayRate");
	}

	UAnimNodeSequence_execGetGlobalPlayRate_Params GetGlobalPlayRate_Params;
	memset(&GetGlobalPlayRate_Params, 0, sizeof(GetGlobalPlayRate_Params));

	uFnGetGlobalPlayRate->iNative = 0;
	uFnGetGlobalPlayRate->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetGlobalPlayRate, &GetGlobalPlayRate_Params, nullptr);
	uFnGetGlobalPlayRate->FunctionFlags |= 0x400;
	uFnGetGlobalPlayRate->iNative = 20595;

	return GetGlobalPlayRate_Params.ReturnValue;
};

// Function Engine.AnimNodeSequence.GetGroupRelativePosition
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20601])
// Parameter Info:
// float                          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

float UAnimNodeSequence::GetGroupRelativePosition()
{
	static UFunction* uFnGetGroupRelativePosition = nullptr;

	if (!uFnGetGroupRelativePosition)
	{
		uFnGetGroupRelativePosition = UFunction::FindFunction("Function Engine.AnimNodeSequence.GetGroupRelativePosition");
	}

	UAnimNodeSequence_execGetGroupRelativePosition_Params GetGroupRelativePosition_Params;
	memset(&GetGroupRelativePosition_Params, 0, sizeof(GetGroupRelativePosition_Params));

	uFnGetGroupRelativePosition->iNative = 0;
	uFnGetGroupRelativePosition->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetGroupRelativePosition, &GetGroupRelativePosition_Params, nullptr);
	uFnGetGroupRelativePosition->FunctionFlags |= 0x400;
	uFnGetGroupRelativePosition->iNative = 20601;

	return GetGroupRelativePosition_Params.ReturnValue;
};

// Function Engine.AnimNodeSequence.FindGroupPosition
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20104])
// Parameter Info:
// float                          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// float                          GroupRelativePosition          (CPF_Parm)

float UAnimNodeSequence::FindGroupPosition(float GroupRelativePosition)
{
	static UFunction* uFnFindGroupPosition = nullptr;

	if (!uFnFindGroupPosition)
	{
		uFnFindGroupPosition = UFunction::FindFunction("Function Engine.AnimNodeSequence.FindGroupPosition");
	}

	UAnimNodeSequence_execFindGroupPosition_Params FindGroupPosition_Params;
	memset(&FindGroupPosition_Params, 0, sizeof(FindGroupPosition_Params));
	memcpy_s(&FindGroupPosition_Params.GroupRelativePosition, sizeof(FindGroupPosition_Params.GroupRelativePosition), &GroupRelativePosition, sizeof(GroupRelativePosition));

	uFnFindGroupPosition->iNative = 0;
	uFnFindGroupPosition->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnFindGroupPosition, &FindGroupPosition_Params, nullptr);
	uFnFindGroupPosition->FunctionFlags |= 0x400;
	uFnFindGroupPosition->iNative = 20104;

	return FindGroupPosition_Params.ReturnValue;
};

// Function Engine.AnimNodeSequence.FindGroupRelativePosition
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20105])
// Parameter Info:
// float                          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// float                          GroupRelativePosition          (CPF_Parm)

float UAnimNodeSequence::FindGroupRelativePosition(float GroupRelativePosition)
{
	static UFunction* uFnFindGroupRelativePosition = nullptr;

	if (!uFnFindGroupRelativePosition)
	{
		uFnFindGroupRelativePosition = UFunction::FindFunction("Function Engine.AnimNodeSequence.FindGroupRelativePosition");
	}

	UAnimNodeSequence_execFindGroupRelativePosition_Params FindGroupRelativePosition_Params;
	memset(&FindGroupRelativePosition_Params, 0, sizeof(FindGroupRelativePosition_Params));
	memcpy_s(&FindGroupRelativePosition_Params.GroupRelativePosition, sizeof(FindGroupRelativePosition_Params.GroupRelativePosition), &GroupRelativePosition, sizeof(GroupRelativePosition));

	uFnFindGroupRelativePosition->iNative = 0;
	uFnFindGroupRelativePosition->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnFindGroupRelativePosition, &FindGroupRelativePosition_Params, nullptr);
	uFnFindGroupRelativePosition->FunctionFlags |= 0x400;
	uFnFindGroupRelativePosition->iNative = 20105;

	return FindGroupRelativePosition_Params.ReturnValue;
};

// Function Engine.AnimNodeSequence.GetNormalizedPosition
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20651])
// Parameter Info:
// float                          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

float UAnimNodeSequence::GetNormalizedPosition()
{
	static UFunction* uFnGetNormalizedPosition = nullptr;

	if (!uFnGetNormalizedPosition)
	{
		uFnGetNormalizedPosition = UFunction::FindFunction("Function Engine.AnimNodeSequence.GetNormalizedPosition");
	}

	UAnimNodeSequence_execGetNormalizedPosition_Params GetNormalizedPosition_Params;
	memset(&GetNormalizedPosition_Params, 0, sizeof(GetNormalizedPosition_Params));

	uFnGetNormalizedPosition->iNative = 0;
	uFnGetNormalizedPosition->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetNormalizedPosition, &GetNormalizedPosition_Params, nullptr);
	uFnGetNormalizedPosition->FunctionFlags |= 0x400;
	uFnGetNormalizedPosition->iNative = 20651;

	return GetNormalizedPosition_Params.ReturnValue;
};

// Function Engine.AnimNodeSequence.SetPosition
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25743])
// Parameter Info:
// float                          NewTime                        (CPF_Parm)
// uint32_t                       bFireNotifies                  (CPF_Parm)

void UAnimNodeSequence::SetPosition(float NewTime, bool bFireNotifies)
{
	static UFunction* uFnSetPosition = nullptr;

	if (!uFnSetPosition)
	{
		uFnSetPosition = UFunction::FindFunction("Function Engine.AnimNodeSequence.SetPosition");
	}

	UAnimNodeSequence_execSetPosition_Params SetPosition_Params;
	memset(&SetPosition_Params, 0, sizeof(SetPosition_Params));
	memcpy_s(&SetPosition_Params.NewTime, sizeof(SetPosition_Params.NewTime), &NewTime, sizeof(NewTime));
	SetPosition_Params.bFireNotifies = bFireNotifies;

	uFnSetPosition->iNative = 0;
	uFnSetPosition->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetPosition, &SetPosition_Params, nullptr);
	uFnSetPosition->FunctionFlags |= 0x400;
	uFnSetPosition->iNative = 25743;
};

// Function Engine.AnimNodeSequence.ReplayAnim
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25110])
// Parameter Info:

void UAnimNodeSequence::ReplayAnim()
{
	static UFunction* uFnReplayAnim = nullptr;

	if (!uFnReplayAnim)
	{
		uFnReplayAnim = UFunction::FindFunction("Function Engine.AnimNodeSequence.ReplayAnim");
	}

	UAnimNodeSequence_execReplayAnim_Params ReplayAnim_Params;
	memset(&ReplayAnim_Params, 0, sizeof(ReplayAnim_Params));

	uFnReplayAnim->iNative = 0;
	uFnReplayAnim->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnReplayAnim, &ReplayAnim_Params, nullptr);
	uFnReplayAnim->FunctionFlags |= 0x400;
	uFnReplayAnim->iNative = 25110;
};

// Function Engine.AnimNodeSequence.StopAnim
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[26319])
// Parameter Info:

void UAnimNodeSequence::StopAnim()
{
	static UFunction* uFnStopAnim = nullptr;

	if (!uFnStopAnim)
	{
		uFnStopAnim = UFunction::FindFunction("Function Engine.AnimNodeSequence.StopAnim");
	}

	UAnimNodeSequence_execStopAnim_Params StopAnim_Params;
	memset(&StopAnim_Params, 0, sizeof(StopAnim_Params));

	uFnStopAnim->iNative = 0;
	uFnStopAnim->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnStopAnim, &StopAnim_Params, nullptr);
	uFnStopAnim->FunctionFlags |= 0x400;
	uFnStopAnim->iNative = 26319;
};

// Function Engine.AnimNodeSequence.PlayAnim
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[24268])
// Parameter Info:
// uint32_t                       bLoop                          (CPF_OptionalParm | CPF_Parm)
// float                          InRate                         (CPF_OptionalParm | CPF_Parm)
// float                          StartTime                      (CPF_OptionalParm | CPF_Parm)

void UAnimNodeSequence::PlayAnim(bool bLoop, float InRate, float StartTime)
{
	static UFunction* uFnPlayAnim = nullptr;

	if (!uFnPlayAnim)
	{
		uFnPlayAnim = UFunction::FindFunction("Function Engine.AnimNodeSequence.PlayAnim");
	}

	UAnimNodeSequence_execPlayAnim_Params PlayAnim_Params;
	memset(&PlayAnim_Params, 0, sizeof(PlayAnim_Params));
	PlayAnim_Params.bLoop = bLoop;
	memcpy_s(&PlayAnim_Params.InRate, sizeof(PlayAnim_Params.InRate), &InRate, sizeof(InRate));
	memcpy_s(&PlayAnim_Params.StartTime, sizeof(PlayAnim_Params.StartTime), &StartTime, sizeof(StartTime));

	uFnPlayAnim->iNative = 0;
	uFnPlayAnim->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnPlayAnim, &PlayAnim_Params, nullptr);
	uFnPlayAnim->FunctionFlags |= 0x400;
	uFnPlayAnim->iNative = 24268;
};

// Function Engine.AnimNodeSequence.SetAnim
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25585])
// Parameter Info:
// class FName                    Sequence                       (CPF_Parm)

void UAnimNodeSequence::SetAnim(const class FName& Sequence)
{
	static UFunction* uFnSetAnim = nullptr;

	if (!uFnSetAnim)
	{
		uFnSetAnim = UFunction::FindFunction("Function Engine.AnimNodeSequence.SetAnim");
	}

	UAnimNodeSequence_execSetAnim_Params SetAnim_Params;
	memset(&SetAnim_Params, 0, sizeof(SetAnim_Params));
	memcpy_s(&SetAnim_Params.Sequence, sizeof(SetAnim_Params.Sequence), &Sequence, sizeof(Sequence));

	uFnSetAnim->iNative = 0;
	uFnSetAnim->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetAnim, &SetAnim_Params, nullptr);
	uFnSetAnim->FunctionFlags |= 0x400;
	uFnSetAnim->iNative = 25585;
};

// Function Engine.AnimNodeSequenceBlendByAim.CheckAnimsUpToDate
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[18053])
// Parameter Info:

void UAnimNodeSequenceBlendByAim::CheckAnimsUpToDate()
{
	static UFunction* uFnCheckAnimsUpToDate = nullptr;

	if (!uFnCheckAnimsUpToDate)
	{
		uFnCheckAnimsUpToDate = UFunction::FindFunction("Function Engine.AnimNodeSequenceBlendByAim.CheckAnimsUpToDate");
	}

	UAnimNodeSequenceBlendByAim_execCheckAnimsUpToDate_Params CheckAnimsUpToDate_Params;
	memset(&CheckAnimsUpToDate_Params, 0, sizeof(CheckAnimsUpToDate_Params));

	uFnCheckAnimsUpToDate->iNative = 0;
	uFnCheckAnimsUpToDate->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnCheckAnimsUpToDate, &CheckAnimsUpToDate_Params, nullptr);
	uFnCheckAnimsUpToDate->FunctionFlags |= 0x400;
	uFnCheckAnimsUpToDate->iNative = 18053;
};

// Function Engine.ArkAnimNodeLookAt.CheckAnimsUpToDate
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[18053])
// Parameter Info:

void UArkAnimNodeLookAt::CheckAnimsUpToDate()
{
	static UFunction* uFnCheckAnimsUpToDate = nullptr;

	if (!uFnCheckAnimsUpToDate)
	{
		uFnCheckAnimsUpToDate = UFunction::FindFunction("Function Engine.ArkAnimNodeLookAt.CheckAnimsUpToDate");
	}

	UArkAnimNodeLookAt_execCheckAnimsUpToDate_Params CheckAnimsUpToDate_Params;
	memset(&CheckAnimsUpToDate_Params, 0, sizeof(CheckAnimsUpToDate_Params));

	uFnCheckAnimsUpToDate->iNative = 0;
	uFnCheckAnimsUpToDate->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnCheckAnimsUpToDate, &CheckAnimsUpToDate_Params, nullptr);
	uFnCheckAnimsUpToDate->FunctionFlags |= 0x400;
	uFnCheckAnimsUpToDate->iNative = 18053;
};

// Function Engine.SkelControlBase.TickSkelControl
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          DeltaTime                      (CPF_Parm)
// class USkeletalMeshComponent*  SkelComp                       (CPF_Parm | CPF_EditInline)

void USkelControlBase::eventTickSkelControl(float DeltaTime, class USkeletalMeshComponent* SkelComp)
{
	static UFunction* uFnTickSkelControl = nullptr;

	if (!uFnTickSkelControl)
	{
		uFnTickSkelControl = UFunction::FindFunction("Function Engine.SkelControlBase.TickSkelControl");
	}

	USkelControlBase_eventTickSkelControl_Params TickSkelControl_Params;
	memset(&TickSkelControl_Params, 0, sizeof(TickSkelControl_Params));
	memcpy_s(&TickSkelControl_Params.DeltaTime, sizeof(TickSkelControl_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));
	TickSkelControl_Params.SkelComp = SkelComp;

	this->ProcessEvent(uFnTickSkelControl, &TickSkelControl_Params, nullptr);
};

// Function Engine.SkelControlBase.SetSkelControlStrength
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25793])
// Parameter Info:
// float                          NewStrength                    (CPF_Parm)
// float                          InBlendTime                    (CPF_Parm)

void USkelControlBase::SetSkelControlStrength(float NewStrength, float InBlendTime)
{
	static UFunction* uFnSetSkelControlStrength = nullptr;

	if (!uFnSetSkelControlStrength)
	{
		uFnSetSkelControlStrength = UFunction::FindFunction("Function Engine.SkelControlBase.SetSkelControlStrength");
	}

	USkelControlBase_execSetSkelControlStrength_Params SetSkelControlStrength_Params;
	memset(&SetSkelControlStrength_Params, 0, sizeof(SetSkelControlStrength_Params));
	memcpy_s(&SetSkelControlStrength_Params.NewStrength, sizeof(SetSkelControlStrength_Params.NewStrength), &NewStrength, sizeof(NewStrength));
	memcpy_s(&SetSkelControlStrength_Params.InBlendTime, sizeof(SetSkelControlStrength_Params.InBlendTime), &InBlendTime, sizeof(InBlendTime));

	uFnSetSkelControlStrength->iNative = 0;
	uFnSetSkelControlStrength->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetSkelControlStrength, &SetSkelControlStrength_Params, nullptr);
	uFnSetSkelControlStrength->FunctionFlags |= 0x400;
	uFnSetSkelControlStrength->iNative = 25793;
};

// Function Engine.SkelControlBase.SetSkelControlActive
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25792])
// Parameter Info:
// uint32_t                       bInActive                      (CPF_Parm)

void USkelControlBase::SetSkelControlActive(bool bInActive)
{
	static UFunction* uFnSetSkelControlActive = nullptr;

	if (!uFnSetSkelControlActive)
	{
		uFnSetSkelControlActive = UFunction::FindFunction("Function Engine.SkelControlBase.SetSkelControlActive");
	}

	USkelControlBase_execSetSkelControlActive_Params SetSkelControlActive_Params;
	memset(&SetSkelControlActive_Params, 0, sizeof(SetSkelControlActive_Params));
	SetSkelControlActive_Params.bInActive = bInActive;

	uFnSetSkelControlActive->iNative = 0;
	uFnSetSkelControlActive->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetSkelControlActive, &SetSkelControlActive_Params, nullptr);
	uFnSetSkelControlActive->FunctionFlags |= 0x400;
	uFnSetSkelControlActive->iNative = 25792;
};

// Function Engine.SkelControlLookAt.CanLookAtPoint
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[17950])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FVector                 PointLoc                       (CPF_Parm)
// uint32_t                       bDrawDebugInfo                 (CPF_OptionalParm | CPF_Parm)
// uint32_t                       bDebugUsePersistentLines       (CPF_OptionalParm | CPF_Parm)
// uint32_t                       bDebugFlushLinesFirst          (CPF_OptionalParm | CPF_Parm)

bool USkelControlLookAt::CanLookAtPoint(const struct FVector& PointLoc, bool bDrawDebugInfo, bool bDebugUsePersistentLines, bool bDebugFlushLinesFirst)
{
	static UFunction* uFnCanLookAtPoint = nullptr;

	if (!uFnCanLookAtPoint)
	{
		uFnCanLookAtPoint = UFunction::FindFunction("Function Engine.SkelControlLookAt.CanLookAtPoint");
	}

	USkelControlLookAt_execCanLookAtPoint_Params CanLookAtPoint_Params;
	memset(&CanLookAtPoint_Params, 0, sizeof(CanLookAtPoint_Params));
	memcpy_s(&CanLookAtPoint_Params.PointLoc, sizeof(CanLookAtPoint_Params.PointLoc), &PointLoc, sizeof(PointLoc));
	CanLookAtPoint_Params.bDrawDebugInfo = bDrawDebugInfo;
	CanLookAtPoint_Params.bDebugUsePersistentLines = bDebugUsePersistentLines;
	CanLookAtPoint_Params.bDebugFlushLinesFirst = bDebugFlushLinesFirst;

	uFnCanLookAtPoint->iNative = 0;
	uFnCanLookAtPoint->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnCanLookAtPoint, &CanLookAtPoint_Params, nullptr);
	uFnCanLookAtPoint->FunctionFlags |= 0x400;
	uFnCanLookAtPoint->iNative = 17950;

	return CanLookAtPoint_Params.ReturnValue;
};

// Function Engine.SkelControlLookAt.SetLookAtAlpha
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25706])
// Parameter Info:
// float                          DesiredAlpha                   (CPF_Parm)
// float                          DesiredBlendTime               (CPF_Parm)

void USkelControlLookAt::SetLookAtAlpha(float DesiredAlpha, float DesiredBlendTime)
{
	static UFunction* uFnSetLookAtAlpha = nullptr;

	if (!uFnSetLookAtAlpha)
	{
		uFnSetLookAtAlpha = UFunction::FindFunction("Function Engine.SkelControlLookAt.SetLookAtAlpha");
	}

	USkelControlLookAt_execSetLookAtAlpha_Params SetLookAtAlpha_Params;
	memset(&SetLookAtAlpha_Params, 0, sizeof(SetLookAtAlpha_Params));
	memcpy_s(&SetLookAtAlpha_Params.DesiredAlpha, sizeof(SetLookAtAlpha_Params.DesiredAlpha), &DesiredAlpha, sizeof(DesiredAlpha));
	memcpy_s(&SetLookAtAlpha_Params.DesiredBlendTime, sizeof(SetLookAtAlpha_Params.DesiredBlendTime), &DesiredBlendTime, sizeof(DesiredBlendTime));

	uFnSetLookAtAlpha->iNative = 0;
	uFnSetLookAtAlpha->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetLookAtAlpha, &SetLookAtAlpha_Params, nullptr);
	uFnSetLookAtAlpha->FunctionFlags |= 0x400;
	uFnSetLookAtAlpha->iNative = 25706;
};

// Function Engine.SkelControlLookAt.InterpolateTargetLocation
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[21310])
// Parameter Info:
// float                          DeltaTime                      (CPF_Parm)

void USkelControlLookAt::InterpolateTargetLocation(float DeltaTime)
{
	static UFunction* uFnInterpolateTargetLocation = nullptr;

	if (!uFnInterpolateTargetLocation)
	{
		uFnInterpolateTargetLocation = UFunction::FindFunction("Function Engine.SkelControlLookAt.InterpolateTargetLocation");
	}

	USkelControlLookAt_execInterpolateTargetLocation_Params InterpolateTargetLocation_Params;
	memset(&InterpolateTargetLocation_Params, 0, sizeof(InterpolateTargetLocation_Params));
	memcpy_s(&InterpolateTargetLocation_Params.DeltaTime, sizeof(InterpolateTargetLocation_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));

	uFnInterpolateTargetLocation->iNative = 0;
	uFnInterpolateTargetLocation->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnInterpolateTargetLocation, &InterpolateTargetLocation_Params, nullptr);
	uFnInterpolateTargetLocation->FunctionFlags |= 0x400;
	uFnInterpolateTargetLocation->iNative = 21310;
};

// Function Engine.SkelControlLookAt.SetTargetLocation
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25811])
// Parameter Info:
// struct FVector                 NewTargetLocation              (CPF_Parm)

void USkelControlLookAt::SetTargetLocation(const struct FVector& NewTargetLocation)
{
	static UFunction* uFnSetTargetLocation = nullptr;

	if (!uFnSetTargetLocation)
	{
		uFnSetTargetLocation = UFunction::FindFunction("Function Engine.SkelControlLookAt.SetTargetLocation");
	}

	USkelControlLookAt_execSetTargetLocation_Params SetTargetLocation_Params;
	memset(&SetTargetLocation_Params, 0, sizeof(SetTargetLocation_Params));
	memcpy_s(&SetTargetLocation_Params.NewTargetLocation, sizeof(SetTargetLocation_Params.NewTargetLocation), &NewTargetLocation, sizeof(NewTargetLocation));

	uFnSetTargetLocation->iNative = 0;
	uFnSetTargetLocation->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetTargetLocation, &SetTargetLocation_Params, nullptr);
	uFnSetTargetLocation->FunctionFlags |= 0x400;
	uFnSetTargetLocation->iNative = 25811;
};

// Function Engine.AnimSequence.GetNotifyTimeByClass
// [0x00424400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20652])
// Parameter Info:
// float                          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UAnimNotify*             NotifyClass                    (CPF_Parm)
// float                          PlayRate                       (CPF_OptionalParm | CPF_Parm)
// float                          StartPosition                  (CPF_OptionalParm | CPF_Parm)
// class UAnimNotify*             out_Notify                     (CPF_OptionalParm | CPF_Parm | CPF_OutParm)
// float                          out_Duration                   (CPF_OptionalParm | CPF_Parm | CPF_OutParm)

float UAnimSequence::GetNotifyTimeByClass(class UAnimNotify* NotifyClass, float PlayRate, float StartPosition, class UAnimNotify*& out_Notify, float& out_Duration)
{
	static UFunction* uFnGetNotifyTimeByClass = nullptr;

	if (!uFnGetNotifyTimeByClass)
	{
		uFnGetNotifyTimeByClass = UFunction::FindFunction("Function Engine.AnimSequence.GetNotifyTimeByClass");
	}

	UAnimSequence_execGetNotifyTimeByClass_Params GetNotifyTimeByClass_Params;
	memset(&GetNotifyTimeByClass_Params, 0, sizeof(GetNotifyTimeByClass_Params));
	GetNotifyTimeByClass_Params.NotifyClass = NotifyClass;
	memcpy_s(&GetNotifyTimeByClass_Params.PlayRate, sizeof(GetNotifyTimeByClass_Params.PlayRate), &PlayRate, sizeof(PlayRate));
	memcpy_s(&GetNotifyTimeByClass_Params.StartPosition, sizeof(GetNotifyTimeByClass_Params.StartPosition), &StartPosition, sizeof(StartPosition));
	GetNotifyTimeByClass_Params.out_Notify = out_Notify;
	memcpy_s(&GetNotifyTimeByClass_Params.out_Duration, sizeof(GetNotifyTimeByClass_Params.out_Duration), &out_Duration, sizeof(out_Duration));

	uFnGetNotifyTimeByClass->iNative = 0;
	uFnGetNotifyTimeByClass->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetNotifyTimeByClass, &GetNotifyTimeByClass_Params, nullptr);
	uFnGetNotifyTimeByClass->FunctionFlags |= 0x400;
	uFnGetNotifyTimeByClass->iNative = 20652;

	out_Notify = GetNotifyTimeByClass_Params.out_Notify;
	memcpy_s(&out_Duration, sizeof(out_Duration), &GetNotifyTimeByClass_Params.out_Duration, sizeof(GetNotifyTimeByClass_Params.out_Duration));

	return GetNotifyTimeByClass_Params.ReturnValue;
};

// Function Engine.DecalManager.SpawnDecal
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[26088])
// Parameter Info:
// class UDecalComponent*         ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline)
// class UMaterialInterface*      DecalMaterial                  (CPF_Parm)
// struct FVector                 DecalLocation                  (CPF_Parm)
// struct FRotator                DecalOrientation               (CPF_Parm)
// float                          Width                          (CPF_Parm)
// float                          Height                         (CPF_Parm)
// float                          Thickness                      (CPF_Parm)
// uint32_t                       bNoClip                        (CPF_Parm)
// float                          DecalRotation                  (CPF_Parm)
// float                          InDecalLifeSpan                (CPF_Parm)
// float                          InDepthBias                    (CPF_Parm)
// struct FVector2D               InBlendRange                   (CPF_Parm)
// uint32_t                       bProjectOnTerrain              (CPF_OptionalParm | CPF_Parm)
// uint32_t                       bProjectOnSkeletalMeshes       (CPF_OptionalParm | CPF_Parm)
// class UPrimitiveComponent*     HitComponent                   (CPF_OptionalParm | CPF_Parm | CPF_EditInline)
// class FName                    HitBone                        (CPF_OptionalParm | CPF_Parm)
// int32_t                        HitNodeIndex                   (CPF_OptionalParm | CPF_Parm)
// int32_t                        HitLevelIndex                  (CPF_OptionalParm | CPF_Parm)
// int32_t                        InFracturedStaticMeshComponentIndex (CPF_OptionalParm | CPF_Parm)

class UDecalComponent* ADecalManager::SpawnDecal(class UMaterialInterface* DecalMaterial, const struct FVector& DecalLocation, const struct FRotator& DecalOrientation, float Width, float Height, float Thickness, bool bNoClip, float DecalRotation, float InDecalLifeSpan, float InDepthBias, const struct FVector2D& InBlendRange, bool bProjectOnTerrain, bool bProjectOnSkeletalMeshes, class UPrimitiveComponent* HitComponent, const class FName& HitBone, int32_t HitNodeIndex, int32_t HitLevelIndex, int32_t InFracturedStaticMeshComponentIndex)
{
	static UFunction* uFnSpawnDecal = nullptr;

	if (!uFnSpawnDecal)
	{
		uFnSpawnDecal = UFunction::FindFunction("Function Engine.DecalManager.SpawnDecal");
	}

	ADecalManager_execSpawnDecal_Params SpawnDecal_Params;
	memset(&SpawnDecal_Params, 0, sizeof(SpawnDecal_Params));
	SpawnDecal_Params.DecalMaterial = DecalMaterial;
	memcpy_s(&SpawnDecal_Params.DecalLocation, sizeof(SpawnDecal_Params.DecalLocation), &DecalLocation, sizeof(DecalLocation));
	memcpy_s(&SpawnDecal_Params.DecalOrientation, sizeof(SpawnDecal_Params.DecalOrientation), &DecalOrientation, sizeof(DecalOrientation));
	memcpy_s(&SpawnDecal_Params.Width, sizeof(SpawnDecal_Params.Width), &Width, sizeof(Width));
	memcpy_s(&SpawnDecal_Params.Height, sizeof(SpawnDecal_Params.Height), &Height, sizeof(Height));
	memcpy_s(&SpawnDecal_Params.Thickness, sizeof(SpawnDecal_Params.Thickness), &Thickness, sizeof(Thickness));
	SpawnDecal_Params.bNoClip = bNoClip;
	memcpy_s(&SpawnDecal_Params.DecalRotation, sizeof(SpawnDecal_Params.DecalRotation), &DecalRotation, sizeof(DecalRotation));
	memcpy_s(&SpawnDecal_Params.InDecalLifeSpan, sizeof(SpawnDecal_Params.InDecalLifeSpan), &InDecalLifeSpan, sizeof(InDecalLifeSpan));
	memcpy_s(&SpawnDecal_Params.InDepthBias, sizeof(SpawnDecal_Params.InDepthBias), &InDepthBias, sizeof(InDepthBias));
	memcpy_s(&SpawnDecal_Params.InBlendRange, sizeof(SpawnDecal_Params.InBlendRange), &InBlendRange, sizeof(InBlendRange));
	SpawnDecal_Params.bProjectOnTerrain = bProjectOnTerrain;
	SpawnDecal_Params.bProjectOnSkeletalMeshes = bProjectOnSkeletalMeshes;
	SpawnDecal_Params.HitComponent = HitComponent;
	memcpy_s(&SpawnDecal_Params.HitBone, sizeof(SpawnDecal_Params.HitBone), &HitBone, sizeof(HitBone));
	memcpy_s(&SpawnDecal_Params.HitNodeIndex, sizeof(SpawnDecal_Params.HitNodeIndex), &HitNodeIndex, sizeof(HitNodeIndex));
	memcpy_s(&SpawnDecal_Params.HitLevelIndex, sizeof(SpawnDecal_Params.HitLevelIndex), &HitLevelIndex, sizeof(HitLevelIndex));
	memcpy_s(&SpawnDecal_Params.InFracturedStaticMeshComponentIndex, sizeof(SpawnDecal_Params.InFracturedStaticMeshComponentIndex), &InFracturedStaticMeshComponentIndex, sizeof(InFracturedStaticMeshComponentIndex));

	uFnSpawnDecal->iNative = 0;
	uFnSpawnDecal->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSpawnDecal, &SpawnDecal_Params, nullptr);
	uFnSpawnDecal->FunctionFlags |= 0x400;
	uFnSpawnDecal->iNative = 26088;

	return SpawnDecal_Params.ReturnValue;
};

// Function Engine.DecalManager.GetPooledComponent
// [0x00080400] (FUNC_Native | FUNC_Protected | FUNC_AllFlags) (iNative[20688])
// Parameter Info:
// class UDecalComponent*         ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline)

class UDecalComponent* ADecalManager::GetPooledComponent()
{
	static UFunction* uFnGetPooledComponent = nullptr;

	if (!uFnGetPooledComponent)
	{
		uFnGetPooledComponent = UFunction::FindFunction("Function Engine.DecalManager.GetPooledComponent");
	}

	ADecalManager_execGetPooledComponent_Params GetPooledComponent_Params;
	memset(&GetPooledComponent_Params, 0, sizeof(GetPooledComponent_Params));

	uFnGetPooledComponent->iNative = 0;
	uFnGetPooledComponent->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetPooledComponent, &GetPooledComponent_Params, nullptr);
	uFnGetPooledComponent->FunctionFlags |= 0x400;
	uFnGetPooledComponent->iNative = 20688;

	return GetPooledComponent_Params.ReturnValue;
};

// Function Engine.DecalManager.SetDecalParameters
// [0x00022401] (FUNC_Final | FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags) (iNative[25636])
// Parameter Info:
// class UDecalComponent*         TheDecal                       (CPF_Parm | CPF_EditInline)
// class UMaterialInterface*      DecalMaterial                  (CPF_Parm)
// struct FVector                 DecalLocation                  (CPF_Parm)
// struct FRotator                DecalOrientation               (CPF_Parm)
// float                          Width                          (CPF_Parm)
// float                          Height                         (CPF_Parm)
// float                          Thickness                      (CPF_Parm)
// uint32_t                       bNoClip                        (CPF_Parm)
// float                          DecalRotation                  (CPF_Parm)
// class UPrimitiveComponent*     HitComponent                   (CPF_Parm | CPF_EditInline)
// uint32_t                       bProjectOnTerrain              (CPF_Parm)
// uint32_t                       bProjectOnSkeletalMeshes       (CPF_Parm)
// class FName                    HitBone                        (CPF_Parm)
// int32_t                        HitNodeIndex                   (CPF_Parm)
// int32_t                        HitLevelIndex                  (CPF_Parm)
// int32_t                        InFracturedStaticMeshComponentIndex (CPF_Parm)
// float                          DepthBias                      (CPF_Parm)
// struct FVector2D               BlendRange                     (CPF_Parm)

void ADecalManager::SetDecalParameters(class UDecalComponent* TheDecal, class UMaterialInterface* DecalMaterial, const struct FVector& DecalLocation, const struct FRotator& DecalOrientation, float Width, float Height, float Thickness, bool bNoClip, float DecalRotation, class UPrimitiveComponent* HitComponent, bool bProjectOnTerrain, bool bProjectOnSkeletalMeshes, const class FName& HitBone, int32_t HitNodeIndex, int32_t HitLevelIndex, int32_t InFracturedStaticMeshComponentIndex, float DepthBias, const struct FVector2D& BlendRange)
{
	static UFunction* uFnSetDecalParameters = nullptr;

	if (!uFnSetDecalParameters)
	{
		uFnSetDecalParameters = UFunction::FindFunction("Function Engine.DecalManager.SetDecalParameters");
	}

	ADecalManager_execSetDecalParameters_Params SetDecalParameters_Params;
	memset(&SetDecalParameters_Params, 0, sizeof(SetDecalParameters_Params));
	SetDecalParameters_Params.TheDecal = TheDecal;
	SetDecalParameters_Params.DecalMaterial = DecalMaterial;
	memcpy_s(&SetDecalParameters_Params.DecalLocation, sizeof(SetDecalParameters_Params.DecalLocation), &DecalLocation, sizeof(DecalLocation));
	memcpy_s(&SetDecalParameters_Params.DecalOrientation, sizeof(SetDecalParameters_Params.DecalOrientation), &DecalOrientation, sizeof(DecalOrientation));
	memcpy_s(&SetDecalParameters_Params.Width, sizeof(SetDecalParameters_Params.Width), &Width, sizeof(Width));
	memcpy_s(&SetDecalParameters_Params.Height, sizeof(SetDecalParameters_Params.Height), &Height, sizeof(Height));
	memcpy_s(&SetDecalParameters_Params.Thickness, sizeof(SetDecalParameters_Params.Thickness), &Thickness, sizeof(Thickness));
	SetDecalParameters_Params.bNoClip = bNoClip;
	memcpy_s(&SetDecalParameters_Params.DecalRotation, sizeof(SetDecalParameters_Params.DecalRotation), &DecalRotation, sizeof(DecalRotation));
	SetDecalParameters_Params.HitComponent = HitComponent;
	SetDecalParameters_Params.bProjectOnTerrain = bProjectOnTerrain;
	SetDecalParameters_Params.bProjectOnSkeletalMeshes = bProjectOnSkeletalMeshes;
	memcpy_s(&SetDecalParameters_Params.HitBone, sizeof(SetDecalParameters_Params.HitBone), &HitBone, sizeof(HitBone));
	memcpy_s(&SetDecalParameters_Params.HitNodeIndex, sizeof(SetDecalParameters_Params.HitNodeIndex), &HitNodeIndex, sizeof(HitNodeIndex));
	memcpy_s(&SetDecalParameters_Params.HitLevelIndex, sizeof(SetDecalParameters_Params.HitLevelIndex), &HitLevelIndex, sizeof(HitLevelIndex));
	memcpy_s(&SetDecalParameters_Params.InFracturedStaticMeshComponentIndex, sizeof(SetDecalParameters_Params.InFracturedStaticMeshComponentIndex), &InFracturedStaticMeshComponentIndex, sizeof(InFracturedStaticMeshComponentIndex));
	memcpy_s(&SetDecalParameters_Params.DepthBias, sizeof(SetDecalParameters_Params.DepthBias), &DepthBias, sizeof(DepthBias));
	memcpy_s(&SetDecalParameters_Params.BlendRange, sizeof(SetDecalParameters_Params.BlendRange), &BlendRange, sizeof(BlendRange));

	uFnSetDecalParameters->iNative = 0;
	uFnSetDecalParameters->FunctionFlags &= ~0x400;
	ADecalManager::StaticClass()->ProcessEvent(uFnSetDecalParameters, &SetDecalParameters_Params, nullptr);
	uFnSetDecalParameters->FunctionFlags |= 0x400;
	uFnSetDecalParameters->iNative = 25636;
};

// Function Engine.DecalManager.CanSpawnDecals
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[17957])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool ADecalManager::CanSpawnDecals()
{
	static UFunction* uFnCanSpawnDecals = nullptr;

	if (!uFnCanSpawnDecals)
	{
		uFnCanSpawnDecals = UFunction::FindFunction("Function Engine.DecalManager.CanSpawnDecals");
	}

	ADecalManager_execCanSpawnDecals_Params CanSpawnDecals_Params;
	memset(&CanSpawnDecals_Params, 0, sizeof(CanSpawnDecals_Params));

	uFnCanSpawnDecals->iNative = 0;
	uFnCanSpawnDecals->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnCanSpawnDecals, &CanSpawnDecals_Params, nullptr);
	uFnCanSpawnDecals->FunctionFlags |= 0x400;
	uFnCanSpawnDecals->iNative = 17957;

	return CanSpawnDecals_Params.ReturnValue;
};

// Function Engine.DecalManager.OnDecalFinished
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[23583])
// Parameter Info:
// class UDecalComponent*         Decal                          (CPF_Parm | CPF_EditInline)

void ADecalManager::OnDecalFinished(class UDecalComponent* Decal)
{
	static UFunction* uFnOnDecalFinished = nullptr;

	if (!uFnOnDecalFinished)
	{
		uFnOnDecalFinished = UFunction::FindFunction("Function Engine.DecalManager.OnDecalFinished");
	}

	ADecalManager_execOnDecalFinished_Params OnDecalFinished_Params;
	memset(&OnDecalFinished_Params, 0, sizeof(OnDecalFinished_Params));
	OnDecalFinished_Params.Decal = Decal;

	uFnOnDecalFinished->iNative = 0;
	uFnOnDecalFinished->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnOnDecalFinished, &OnDecalFinished_Params, nullptr);
	uFnOnDecalFinished->FunctionFlags |= 0x400;
	uFnOnDecalFinished->iNative = 23583;
};

// Function Engine.DecalManager.AreDynamicDecalsEnabled
// [0x00022401] (FUNC_Final | FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags) (iNative[15646])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool ADecalManager::AreDynamicDecalsEnabled()
{
	static UFunction* uFnAreDynamicDecalsEnabled = nullptr;

	if (!uFnAreDynamicDecalsEnabled)
	{
		uFnAreDynamicDecalsEnabled = UFunction::FindFunction("Function Engine.DecalManager.AreDynamicDecalsEnabled");
	}

	ADecalManager_execAreDynamicDecalsEnabled_Params AreDynamicDecalsEnabled_Params;
	memset(&AreDynamicDecalsEnabled_Params, 0, sizeof(AreDynamicDecalsEnabled_Params));

	uFnAreDynamicDecalsEnabled->iNative = 0;
	uFnAreDynamicDecalsEnabled->FunctionFlags &= ~0x400;
	ADecalManager::StaticClass()->ProcessEvent(uFnAreDynamicDecalsEnabled, &AreDynamicDecalsEnabled_Params, nullptr);
	uFnAreDynamicDecalsEnabled->FunctionFlags |= 0x400;
	uFnAreDynamicDecalsEnabled->iNative = 15646;

	return AreDynamicDecalsEnabled_Params.ReturnValue;
};

// Function Engine.DecalComponent.GetDecalMaterial
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20561])
// Parameter Info:
// class UMaterialInterface*      ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class UMaterialInterface* UDecalComponent::GetDecalMaterial()
{
	static UFunction* uFnGetDecalMaterial = nullptr;

	if (!uFnGetDecalMaterial)
	{
		uFnGetDecalMaterial = UFunction::FindFunction("Function Engine.DecalComponent.GetDecalMaterial");
	}

	UDecalComponent_execGetDecalMaterial_Params GetDecalMaterial_Params;
	memset(&GetDecalMaterial_Params, 0, sizeof(GetDecalMaterial_Params));

	uFnGetDecalMaterial->iNative = 0;
	uFnGetDecalMaterial->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetDecalMaterial, &GetDecalMaterial_Params, nullptr);
	uFnGetDecalMaterial->FunctionFlags |= 0x400;
	uFnGetDecalMaterial->iNative = 20561;

	return GetDecalMaterial_Params.ReturnValue;
};

// Function Engine.DecalComponent.SetDecalMaterial
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25635])
// Parameter Info:
// class UMaterialInterface*      NewDecalMaterial               (CPF_Parm)

void UDecalComponent::SetDecalMaterial(class UMaterialInterface* NewDecalMaterial)
{
	static UFunction* uFnSetDecalMaterial = nullptr;

	if (!uFnSetDecalMaterial)
	{
		uFnSetDecalMaterial = UFunction::FindFunction("Function Engine.DecalComponent.SetDecalMaterial");
	}

	UDecalComponent_execSetDecalMaterial_Params SetDecalMaterial_Params;
	memset(&SetDecalMaterial_Params, 0, sizeof(SetDecalMaterial_Params));
	SetDecalMaterial_Params.NewDecalMaterial = NewDecalMaterial;

	uFnSetDecalMaterial->iNative = 0;
	uFnSetDecalMaterial->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetDecalMaterial, &SetDecalMaterial_Params, nullptr);
	uFnSetDecalMaterial->FunctionFlags |= 0x400;
	uFnSetDecalMaterial->iNative = 25635;
};

// Function Engine.DecalComponent.ResetToDefaults
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[6317])
// Parameter Info:

void UDecalComponent::ResetToDefaults()
{
	static UFunction* uFnResetToDefaults = nullptr;

	if (!uFnResetToDefaults)
	{
		uFnResetToDefaults = UFunction::FindFunction("Function Engine.DecalComponent.ResetToDefaults");
	}

	UDecalComponent_execResetToDefaults_Params ResetToDefaults_Params;
	memset(&ResetToDefaults_Params, 0, sizeof(ResetToDefaults_Params));

	uFnResetToDefaults->iNative = 0;
	uFnResetToDefaults->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnResetToDefaults, &ResetToDefaults_Params, nullptr);
	uFnResetToDefaults->FunctionFlags |= 0x400;
	uFnResetToDefaults->iNative = 6317;
};

// Function Engine.MaterialInstance.IsInMapOrTransientPackage
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[21393])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UMaterialInstance::IsInMapOrTransientPackage()
{
	static UFunction* uFnIsInMapOrTransientPackage = nullptr;

	if (!uFnIsInMapOrTransientPackage)
	{
		uFnIsInMapOrTransientPackage = UFunction::FindFunction("Function Engine.MaterialInstance.IsInMapOrTransientPackage");
	}

	UMaterialInstance_execIsInMapOrTransientPackage_Params IsInMapOrTransientPackage_Params;
	memset(&IsInMapOrTransientPackage_Params, 0, sizeof(IsInMapOrTransientPackage_Params));

	uFnIsInMapOrTransientPackage->iNative = 0;
	uFnIsInMapOrTransientPackage->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnIsInMapOrTransientPackage, &IsInMapOrTransientPackage_Params, nullptr);
	uFnIsInMapOrTransientPackage->FunctionFlags |= 0x400;
	uFnIsInMapOrTransientPackage->iNative = 21393;

	return IsInMapOrTransientPackage_Params.ReturnValue;
};

// Function Engine.MaterialInstance.ClearParameterValues
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[18144])
// Parameter Info:

void UMaterialInstance::ClearParameterValues()
{
	static UFunction* uFnClearParameterValues = nullptr;

	if (!uFnClearParameterValues)
	{
		uFnClearParameterValues = UFunction::FindFunction("Function Engine.MaterialInstance.ClearParameterValues");
	}

	UMaterialInstance_execClearParameterValues_Params ClearParameterValues_Params;
	memset(&ClearParameterValues_Params, 0, sizeof(ClearParameterValues_Params));

	uFnClearParameterValues->iNative = 0;
	uFnClearParameterValues->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnClearParameterValues, &ClearParameterValues_Params, nullptr);
	uFnClearParameterValues->FunctionFlags |= 0x400;
	uFnClearParameterValues->iNative = 18144;
};

// Function Engine.MaterialInstance.SetFontParameterValue
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25661])
// Parameter Info:
// class FName                    ParameterName                  (CPF_Parm)
// class UFont*                   FontValue                      (CPF_Parm)
// int32_t                        FontPage                       (CPF_Parm)

void UMaterialInstance::SetFontParameterValue(const class FName& ParameterName, class UFont* FontValue, int32_t FontPage)
{
	static UFunction* uFnSetFontParameterValue = nullptr;

	if (!uFnSetFontParameterValue)
	{
		uFnSetFontParameterValue = UFunction::FindFunction("Function Engine.MaterialInstance.SetFontParameterValue");
	}

	UMaterialInstance_execSetFontParameterValue_Params SetFontParameterValue_Params;
	memset(&SetFontParameterValue_Params, 0, sizeof(SetFontParameterValue_Params));
	memcpy_s(&SetFontParameterValue_Params.ParameterName, sizeof(SetFontParameterValue_Params.ParameterName), &ParameterName, sizeof(ParameterName));
	SetFontParameterValue_Params.FontValue = FontValue;
	memcpy_s(&SetFontParameterValue_Params.FontPage, sizeof(SetFontParameterValue_Params.FontPage), &FontPage, sizeof(FontPage));

	uFnSetFontParameterValue->iNative = 0;
	uFnSetFontParameterValue->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetFontParameterValue, &SetFontParameterValue_Params, nullptr);
	uFnSetFontParameterValue->FunctionFlags |= 0x400;
	uFnSetFontParameterValue->iNative = 25661;
};

// Function Engine.MaterialInstance.SetTextureParameterValue
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25814])
// Parameter Info:
// class FName                    ParameterName                  (CPF_Parm)
// class UTexture*                Value                          (CPF_Parm)

void UMaterialInstance::SetTextureParameterValue(const class FName& ParameterName, class UTexture* Value)
{
	static UFunction* uFnSetTextureParameterValue = nullptr;

	if (!uFnSetTextureParameterValue)
	{
		uFnSetTextureParameterValue = UFunction::FindFunction("Function Engine.MaterialInstance.SetTextureParameterValue");
	}

	UMaterialInstance_execSetTextureParameterValue_Params SetTextureParameterValue_Params;
	memset(&SetTextureParameterValue_Params, 0, sizeof(SetTextureParameterValue_Params));
	memcpy_s(&SetTextureParameterValue_Params.ParameterName, sizeof(SetTextureParameterValue_Params.ParameterName), &ParameterName, sizeof(ParameterName));
	SetTextureParameterValue_Params.Value = Value;

	uFnSetTextureParameterValue->iNative = 0;
	uFnSetTextureParameterValue->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetTextureParameterValue, &SetTextureParameterValue_Params, nullptr);
	uFnSetTextureParameterValue->FunctionFlags |= 0x400;
	uFnSetTextureParameterValue->iNative = 25814;
};

// Function Engine.MaterialInstance.SetScalarCurveParameterValue
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[25774])
// Parameter Info:
// class FName                    ParameterName                  (CPF_Parm)
// struct FInterpCurveFloat       Value                          (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void UMaterialInstance::SetScalarCurveParameterValue(const class FName& ParameterName, struct FInterpCurveFloat& Value)
{
	static UFunction* uFnSetScalarCurveParameterValue = nullptr;

	if (!uFnSetScalarCurveParameterValue)
	{
		uFnSetScalarCurveParameterValue = UFunction::FindFunction("Function Engine.MaterialInstance.SetScalarCurveParameterValue");
	}

	UMaterialInstance_execSetScalarCurveParameterValue_Params SetScalarCurveParameterValue_Params;
	memset(&SetScalarCurveParameterValue_Params, 0, sizeof(SetScalarCurveParameterValue_Params));
	memcpy_s(&SetScalarCurveParameterValue_Params.ParameterName, sizeof(SetScalarCurveParameterValue_Params.ParameterName), &ParameterName, sizeof(ParameterName));
	memcpy_s(&SetScalarCurveParameterValue_Params.Value, sizeof(SetScalarCurveParameterValue_Params.Value), &Value, sizeof(Value));

	uFnSetScalarCurveParameterValue->iNative = 0;
	uFnSetScalarCurveParameterValue->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetScalarCurveParameterValue, &SetScalarCurveParameterValue_Params, nullptr);
	uFnSetScalarCurveParameterValue->FunctionFlags |= 0x400;
	uFnSetScalarCurveParameterValue->iNative = 25774;

	memcpy_s(&Value, sizeof(Value), &SetScalarCurveParameterValue_Params.Value, sizeof(SetScalarCurveParameterValue_Params.Value));
};

// Function Engine.MaterialInstance.SetScalarParameterValue
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25776])
// Parameter Info:
// class FName                    ParameterName                  (CPF_Parm)
// float                          Value                          (CPF_Parm)

void UMaterialInstance::SetScalarParameterValue(const class FName& ParameterName, float Value)
{
	static UFunction* uFnSetScalarParameterValue = nullptr;

	if (!uFnSetScalarParameterValue)
	{
		uFnSetScalarParameterValue = UFunction::FindFunction("Function Engine.MaterialInstance.SetScalarParameterValue");
	}

	UMaterialInstance_execSetScalarParameterValue_Params SetScalarParameterValue_Params;
	memset(&SetScalarParameterValue_Params, 0, sizeof(SetScalarParameterValue_Params));
	memcpy_s(&SetScalarParameterValue_Params.ParameterName, sizeof(SetScalarParameterValue_Params.ParameterName), &ParameterName, sizeof(ParameterName));
	memcpy_s(&SetScalarParameterValue_Params.Value, sizeof(SetScalarParameterValue_Params.Value), &Value, sizeof(Value));

	uFnSetScalarParameterValue->iNative = 0;
	uFnSetScalarParameterValue->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetScalarParameterValue, &SetScalarParameterValue_Params, nullptr);
	uFnSetScalarParameterValue->FunctionFlags |= 0x400;
	uFnSetScalarParameterValue->iNative = 25776;
};

// Function Engine.MaterialInstance.SetVectorParameterValue
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[25835])
// Parameter Info:
// class FName                    ParameterName                  (CPF_Parm)
// struct FLinearColor            Value                          (CPF_Const | CPF_Parm | CPF_OutParm)

void UMaterialInstance::SetVectorParameterValue(const class FName& ParameterName, struct FLinearColor& Value)
{
	static UFunction* uFnSetVectorParameterValue = nullptr;

	if (!uFnSetVectorParameterValue)
	{
		uFnSetVectorParameterValue = UFunction::FindFunction("Function Engine.MaterialInstance.SetVectorParameterValue");
	}

	UMaterialInstance_execSetVectorParameterValue_Params SetVectorParameterValue_Params;
	memset(&SetVectorParameterValue_Params, 0, sizeof(SetVectorParameterValue_Params));
	memcpy_s(&SetVectorParameterValue_Params.ParameterName, sizeof(SetVectorParameterValue_Params.ParameterName), &ParameterName, sizeof(ParameterName));
	memcpy_s(&SetVectorParameterValue_Params.Value, sizeof(SetVectorParameterValue_Params.Value), &Value, sizeof(Value));

	uFnSetVectorParameterValue->iNative = 0;
	uFnSetVectorParameterValue->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetVectorParameterValue, &SetVectorParameterValue_Params, nullptr);
	uFnSetVectorParameterValue->FunctionFlags |= 0x400;
	uFnSetVectorParameterValue->iNative = 25835;

	memcpy_s(&Value, sizeof(Value), &SetVectorParameterValue_Params.Value, sizeof(SetVectorParameterValue_Params.Value));
};

// Function Engine.MaterialInstance.SetParent
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25734])
// Parameter Info:
// class UMaterialInterface*      NewParent                      (CPF_Parm)

void UMaterialInstance::SetParent(class UMaterialInterface* NewParent)
{
	static UFunction* uFnSetParent = nullptr;

	if (!uFnSetParent)
	{
		uFnSetParent = UFunction::FindFunction("Function Engine.MaterialInstance.SetParent");
	}

	UMaterialInstance_execSetParent_Params SetParent_Params;
	memset(&SetParent_Params, 0, sizeof(SetParent_Params));
	SetParent_Params.NewParent = NewParent;

	uFnSetParent->iNative = 0;
	uFnSetParent->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetParent, &SetParent_Params, nullptr);
	uFnSetParent->FunctionFlags |= 0x400;
	uFnSetParent->iNative = 25734;
};

// Function Engine.MaterialInstanceConstant.ClearParameterValues
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[18144])
// Parameter Info:

void UMaterialInstanceConstant::ClearParameterValues()
{
	static UFunction* uFnClearParameterValues = nullptr;

	if (!uFnClearParameterValues)
	{
		uFnClearParameterValues = UFunction::FindFunction("Function Engine.MaterialInstanceConstant.ClearParameterValues");
	}

	UMaterialInstanceConstant_execClearParameterValues_Params ClearParameterValues_Params;
	memset(&ClearParameterValues_Params, 0, sizeof(ClearParameterValues_Params));

	uFnClearParameterValues->iNative = 0;
	uFnClearParameterValues->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnClearParameterValues, &ClearParameterValues_Params, nullptr);
	uFnClearParameterValues->FunctionFlags |= 0x400;
	uFnClearParameterValues->iNative = 18144;
};

// Function Engine.MaterialInstanceConstant.SetFontParameterValue
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25661])
// Parameter Info:
// class FName                    ParameterName                  (CPF_Parm)
// class UFont*                   FontValue                      (CPF_Parm)
// int32_t                        FontPage                       (CPF_Parm)

void UMaterialInstanceConstant::SetFontParameterValue(const class FName& ParameterName, class UFont* FontValue, int32_t FontPage)
{
	static UFunction* uFnSetFontParameterValue = nullptr;

	if (!uFnSetFontParameterValue)
	{
		uFnSetFontParameterValue = UFunction::FindFunction("Function Engine.MaterialInstanceConstant.SetFontParameterValue");
	}

	UMaterialInstanceConstant_execSetFontParameterValue_Params SetFontParameterValue_Params;
	memset(&SetFontParameterValue_Params, 0, sizeof(SetFontParameterValue_Params));
	memcpy_s(&SetFontParameterValue_Params.ParameterName, sizeof(SetFontParameterValue_Params.ParameterName), &ParameterName, sizeof(ParameterName));
	SetFontParameterValue_Params.FontValue = FontValue;
	memcpy_s(&SetFontParameterValue_Params.FontPage, sizeof(SetFontParameterValue_Params.FontPage), &FontPage, sizeof(FontPage));

	uFnSetFontParameterValue->iNative = 0;
	uFnSetFontParameterValue->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetFontParameterValue, &SetFontParameterValue_Params, nullptr);
	uFnSetFontParameterValue->FunctionFlags |= 0x400;
	uFnSetFontParameterValue->iNative = 25661;
};

// Function Engine.MaterialInstanceConstant.SetVectorParameterValue
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[25835])
// Parameter Info:
// class FName                    ParameterName                  (CPF_Parm)
// struct FLinearColor            Value                          (CPF_Const | CPF_Parm | CPF_OutParm)

void UMaterialInstanceConstant::SetVectorParameterValue(const class FName& ParameterName, struct FLinearColor& Value)
{
	static UFunction* uFnSetVectorParameterValue = nullptr;

	if (!uFnSetVectorParameterValue)
	{
		uFnSetVectorParameterValue = UFunction::FindFunction("Function Engine.MaterialInstanceConstant.SetVectorParameterValue");
	}

	UMaterialInstanceConstant_execSetVectorParameterValue_Params SetVectorParameterValue_Params;
	memset(&SetVectorParameterValue_Params, 0, sizeof(SetVectorParameterValue_Params));
	memcpy_s(&SetVectorParameterValue_Params.ParameterName, sizeof(SetVectorParameterValue_Params.ParameterName), &ParameterName, sizeof(ParameterName));
	memcpy_s(&SetVectorParameterValue_Params.Value, sizeof(SetVectorParameterValue_Params.Value), &Value, sizeof(Value));

	uFnSetVectorParameterValue->iNative = 0;
	uFnSetVectorParameterValue->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetVectorParameterValue, &SetVectorParameterValue_Params, nullptr);
	uFnSetVectorParameterValue->FunctionFlags |= 0x400;
	uFnSetVectorParameterValue->iNative = 25835;

	memcpy_s(&Value, sizeof(Value), &SetVectorParameterValue_Params.Value, sizeof(SetVectorParameterValue_Params.Value));
};

// Function Engine.MaterialInstanceConstant.SetTextureParameterValue
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25814])
// Parameter Info:
// class FName                    ParameterName                  (CPF_Parm)
// class UTexture*                Value                          (CPF_Parm)

void UMaterialInstanceConstant::SetTextureParameterValue(const class FName& ParameterName, class UTexture* Value)
{
	static UFunction* uFnSetTextureParameterValue = nullptr;

	if (!uFnSetTextureParameterValue)
	{
		uFnSetTextureParameterValue = UFunction::FindFunction("Function Engine.MaterialInstanceConstant.SetTextureParameterValue");
	}

	UMaterialInstanceConstant_execSetTextureParameterValue_Params SetTextureParameterValue_Params;
	memset(&SetTextureParameterValue_Params, 0, sizeof(SetTextureParameterValue_Params));
	memcpy_s(&SetTextureParameterValue_Params.ParameterName, sizeof(SetTextureParameterValue_Params.ParameterName), &ParameterName, sizeof(ParameterName));
	SetTextureParameterValue_Params.Value = Value;

	uFnSetTextureParameterValue->iNative = 0;
	uFnSetTextureParameterValue->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetTextureParameterValue, &SetTextureParameterValue_Params, nullptr);
	uFnSetTextureParameterValue->FunctionFlags |= 0x400;
	uFnSetTextureParameterValue->iNative = 25814;
};

// Function Engine.MaterialInstanceConstant.SetScalarParameterValue
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25776])
// Parameter Info:
// class FName                    ParameterName                  (CPF_Parm)
// float                          Value                          (CPF_Parm)

void UMaterialInstanceConstant::SetScalarParameterValue(const class FName& ParameterName, float Value)
{
	static UFunction* uFnSetScalarParameterValue = nullptr;

	if (!uFnSetScalarParameterValue)
	{
		uFnSetScalarParameterValue = UFunction::FindFunction("Function Engine.MaterialInstanceConstant.SetScalarParameterValue");
	}

	UMaterialInstanceConstant_execSetScalarParameterValue_Params SetScalarParameterValue_Params;
	memset(&SetScalarParameterValue_Params, 0, sizeof(SetScalarParameterValue_Params));
	memcpy_s(&SetScalarParameterValue_Params.ParameterName, sizeof(SetScalarParameterValue_Params.ParameterName), &ParameterName, sizeof(ParameterName));
	memcpy_s(&SetScalarParameterValue_Params.Value, sizeof(SetScalarParameterValue_Params.Value), &Value, sizeof(Value));

	uFnSetScalarParameterValue->iNative = 0;
	uFnSetScalarParameterValue->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetScalarParameterValue, &SetScalarParameterValue_Params, nullptr);
	uFnSetScalarParameterValue->FunctionFlags |= 0x400;
	uFnSetScalarParameterValue->iNative = 25776;
};

// Function Engine.MaterialInstanceConstant.SetParent
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25734])
// Parameter Info:
// class UMaterialInterface*      NewParent                      (CPF_Parm)

void UMaterialInstanceConstant::SetParent(class UMaterialInterface* NewParent)
{
	static UFunction* uFnSetParent = nullptr;

	if (!uFnSetParent)
	{
		uFnSetParent = UFunction::FindFunction("Function Engine.MaterialInstanceConstant.SetParent");
	}

	UMaterialInstanceConstant_execSetParent_Params SetParent_Params;
	memset(&SetParent_Params, 0, sizeof(SetParent_Params));
	SetParent_Params.NewParent = NewParent;

	uFnSetParent->iNative = 0;
	uFnSetParent->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetParent, &SetParent_Params, nullptr);
	uFnSetParent->FunctionFlags |= 0x400;
	uFnSetParent->iNative = 25734;
};

// Function Engine.MaterialInstanceTimeVarying.GetMaxDurationFromAllParameters
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20640])
// Parameter Info:
// float                          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

float UMaterialInstanceTimeVarying::GetMaxDurationFromAllParameters()
{
	static UFunction* uFnGetMaxDurationFromAllParameters = nullptr;

	if (!uFnGetMaxDurationFromAllParameters)
	{
		uFnGetMaxDurationFromAllParameters = UFunction::FindFunction("Function Engine.MaterialInstanceTimeVarying.GetMaxDurationFromAllParameters");
	}

	UMaterialInstanceTimeVarying_execGetMaxDurationFromAllParameters_Params GetMaxDurationFromAllParameters_Params;
	memset(&GetMaxDurationFromAllParameters_Params, 0, sizeof(GetMaxDurationFromAllParameters_Params));

	uFnGetMaxDurationFromAllParameters->iNative = 0;
	uFnGetMaxDurationFromAllParameters->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetMaxDurationFromAllParameters, &GetMaxDurationFromAllParameters_Params, nullptr);
	uFnGetMaxDurationFromAllParameters->FunctionFlags |= 0x400;
	uFnGetMaxDurationFromAllParameters->iNative = 20640;

	return GetMaxDurationFromAllParameters_Params.ReturnValue;
};

// Function Engine.MaterialInstanceTimeVarying.ClearParameterValues
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[18144])
// Parameter Info:

void UMaterialInstanceTimeVarying::ClearParameterValues()
{
	static UFunction* uFnClearParameterValues = nullptr;

	if (!uFnClearParameterValues)
	{
		uFnClearParameterValues = UFunction::FindFunction("Function Engine.MaterialInstanceTimeVarying.ClearParameterValues");
	}

	UMaterialInstanceTimeVarying_execClearParameterValues_Params ClearParameterValues_Params;
	memset(&ClearParameterValues_Params, 0, sizeof(ClearParameterValues_Params));

	uFnClearParameterValues->iNative = 0;
	uFnClearParameterValues->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnClearParameterValues, &ClearParameterValues_Params, nullptr);
	uFnClearParameterValues->FunctionFlags |= 0x400;
	uFnClearParameterValues->iNative = 18144;
};

// Function Engine.MaterialInstanceTimeVarying.SetFontParameterValue
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25661])
// Parameter Info:
// class FName                    ParameterName                  (CPF_Parm)
// class UFont*                   FontValue                      (CPF_Parm)
// int32_t                        FontPage                       (CPF_Parm)

void UMaterialInstanceTimeVarying::SetFontParameterValue(const class FName& ParameterName, class UFont* FontValue, int32_t FontPage)
{
	static UFunction* uFnSetFontParameterValue = nullptr;

	if (!uFnSetFontParameterValue)
	{
		uFnSetFontParameterValue = UFunction::FindFunction("Function Engine.MaterialInstanceTimeVarying.SetFontParameterValue");
	}

	UMaterialInstanceTimeVarying_execSetFontParameterValue_Params SetFontParameterValue_Params;
	memset(&SetFontParameterValue_Params, 0, sizeof(SetFontParameterValue_Params));
	memcpy_s(&SetFontParameterValue_Params.ParameterName, sizeof(SetFontParameterValue_Params.ParameterName), &ParameterName, sizeof(ParameterName));
	SetFontParameterValue_Params.FontValue = FontValue;
	memcpy_s(&SetFontParameterValue_Params.FontPage, sizeof(SetFontParameterValue_Params.FontPage), &FontPage, sizeof(FontPage));

	uFnSetFontParameterValue->iNative = 0;
	uFnSetFontParameterValue->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetFontParameterValue, &SetFontParameterValue_Params, nullptr);
	uFnSetFontParameterValue->FunctionFlags |= 0x400;
	uFnSetFontParameterValue->iNative = 25661;
};

// Function Engine.MaterialInstanceTimeVarying.SetVectorStartTime
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25836])
// Parameter Info:
// class FName                    ParameterName                  (CPF_Parm)
// float                          Value                          (CPF_Parm)

void UMaterialInstanceTimeVarying::SetVectorStartTime(const class FName& ParameterName, float Value)
{
	static UFunction* uFnSetVectorStartTime = nullptr;

	if (!uFnSetVectorStartTime)
	{
		uFnSetVectorStartTime = UFunction::FindFunction("Function Engine.MaterialInstanceTimeVarying.SetVectorStartTime");
	}

	UMaterialInstanceTimeVarying_execSetVectorStartTime_Params SetVectorStartTime_Params;
	memset(&SetVectorStartTime_Params, 0, sizeof(SetVectorStartTime_Params));
	memcpy_s(&SetVectorStartTime_Params.ParameterName, sizeof(SetVectorStartTime_Params.ParameterName), &ParameterName, sizeof(ParameterName));
	memcpy_s(&SetVectorStartTime_Params.Value, sizeof(SetVectorStartTime_Params.Value), &Value, sizeof(Value));

	uFnSetVectorStartTime->iNative = 0;
	uFnSetVectorStartTime->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetVectorStartTime, &SetVectorStartTime_Params, nullptr);
	uFnSetVectorStartTime->FunctionFlags |= 0x400;
	uFnSetVectorStartTime->iNative = 25836;
};

// Function Engine.MaterialInstanceTimeVarying.SetVectorCurveParameterValue
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[25833])
// Parameter Info:
// class FName                    ParameterName                  (CPF_Parm)
// struct FInterpCurveVector      Value                          (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void UMaterialInstanceTimeVarying::SetVectorCurveParameterValue(const class FName& ParameterName, struct FInterpCurveVector& Value)
{
	static UFunction* uFnSetVectorCurveParameterValue = nullptr;

	if (!uFnSetVectorCurveParameterValue)
	{
		uFnSetVectorCurveParameterValue = UFunction::FindFunction("Function Engine.MaterialInstanceTimeVarying.SetVectorCurveParameterValue");
	}

	UMaterialInstanceTimeVarying_execSetVectorCurveParameterValue_Params SetVectorCurveParameterValue_Params;
	memset(&SetVectorCurveParameterValue_Params, 0, sizeof(SetVectorCurveParameterValue_Params));
	memcpy_s(&SetVectorCurveParameterValue_Params.ParameterName, sizeof(SetVectorCurveParameterValue_Params.ParameterName), &ParameterName, sizeof(ParameterName));
	memcpy_s(&SetVectorCurveParameterValue_Params.Value, sizeof(SetVectorCurveParameterValue_Params.Value), &Value, sizeof(Value));

	uFnSetVectorCurveParameterValue->iNative = 0;
	uFnSetVectorCurveParameterValue->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetVectorCurveParameterValue, &SetVectorCurveParameterValue_Params, nullptr);
	uFnSetVectorCurveParameterValue->FunctionFlags |= 0x400;
	uFnSetVectorCurveParameterValue->iNative = 25833;

	memcpy_s(&Value, sizeof(Value), &SetVectorCurveParameterValue_Params.Value, sizeof(SetVectorCurveParameterValue_Params.Value));
};

// Function Engine.MaterialInstanceTimeVarying.SetVectorParameterValue
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[25835])
// Parameter Info:
// class FName                    ParameterName                  (CPF_Parm)
// struct FLinearColor            Value                          (CPF_Const | CPF_Parm | CPF_OutParm)

void UMaterialInstanceTimeVarying::SetVectorParameterValue(const class FName& ParameterName, struct FLinearColor& Value)
{
	static UFunction* uFnSetVectorParameterValue = nullptr;

	if (!uFnSetVectorParameterValue)
	{
		uFnSetVectorParameterValue = UFunction::FindFunction("Function Engine.MaterialInstanceTimeVarying.SetVectorParameterValue");
	}

	UMaterialInstanceTimeVarying_execSetVectorParameterValue_Params SetVectorParameterValue_Params;
	memset(&SetVectorParameterValue_Params, 0, sizeof(SetVectorParameterValue_Params));
	memcpy_s(&SetVectorParameterValue_Params.ParameterName, sizeof(SetVectorParameterValue_Params.ParameterName), &ParameterName, sizeof(ParameterName));
	memcpy_s(&SetVectorParameterValue_Params.Value, sizeof(SetVectorParameterValue_Params.Value), &Value, sizeof(Value));

	uFnSetVectorParameterValue->iNative = 0;
	uFnSetVectorParameterValue->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetVectorParameterValue, &SetVectorParameterValue_Params, nullptr);
	uFnSetVectorParameterValue->FunctionFlags |= 0x400;
	uFnSetVectorParameterValue->iNative = 25835;

	memcpy_s(&Value, sizeof(Value), &SetVectorParameterValue_Params.Value, sizeof(SetVectorParameterValue_Params.Value));
};

// Function Engine.MaterialInstanceTimeVarying.SetTextureParameterValue
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25814])
// Parameter Info:
// class FName                    ParameterName                  (CPF_Parm)
// class UTexture*                Value                          (CPF_Parm)

void UMaterialInstanceTimeVarying::SetTextureParameterValue(const class FName& ParameterName, class UTexture* Value)
{
	static UFunction* uFnSetTextureParameterValue = nullptr;

	if (!uFnSetTextureParameterValue)
	{
		uFnSetTextureParameterValue = UFunction::FindFunction("Function Engine.MaterialInstanceTimeVarying.SetTextureParameterValue");
	}

	UMaterialInstanceTimeVarying_execSetTextureParameterValue_Params SetTextureParameterValue_Params;
	memset(&SetTextureParameterValue_Params, 0, sizeof(SetTextureParameterValue_Params));
	memcpy_s(&SetTextureParameterValue_Params.ParameterName, sizeof(SetTextureParameterValue_Params.ParameterName), &ParameterName, sizeof(ParameterName));
	SetTextureParameterValue_Params.Value = Value;

	uFnSetTextureParameterValue->iNative = 0;
	uFnSetTextureParameterValue->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetTextureParameterValue, &SetTextureParameterValue_Params, nullptr);
	uFnSetTextureParameterValue->FunctionFlags |= 0x400;
	uFnSetTextureParameterValue->iNative = 25814;
};

// Function Engine.MaterialInstanceTimeVarying.SetDuration
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25645])
// Parameter Info:
// float                          Value                          (CPF_Parm)

void UMaterialInstanceTimeVarying::SetDuration(float Value)
{
	static UFunction* uFnSetDuration = nullptr;

	if (!uFnSetDuration)
	{
		uFnSetDuration = UFunction::FindFunction("Function Engine.MaterialInstanceTimeVarying.SetDuration");
	}

	UMaterialInstanceTimeVarying_execSetDuration_Params SetDuration_Params;
	memset(&SetDuration_Params, 0, sizeof(SetDuration_Params));
	memcpy_s(&SetDuration_Params.Value, sizeof(SetDuration_Params.Value), &Value, sizeof(Value));

	uFnSetDuration->iNative = 0;
	uFnSetDuration->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetDuration, &SetDuration_Params, nullptr);
	uFnSetDuration->FunctionFlags |= 0x400;
	uFnSetDuration->iNative = 25645;
};

// Function Engine.MaterialInstanceTimeVarying.SetScalarStartTime
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25777])
// Parameter Info:
// class FName                    ParameterName                  (CPF_Parm)
// float                          Value                          (CPF_Parm)

void UMaterialInstanceTimeVarying::SetScalarStartTime(const class FName& ParameterName, float Value)
{
	static UFunction* uFnSetScalarStartTime = nullptr;

	if (!uFnSetScalarStartTime)
	{
		uFnSetScalarStartTime = UFunction::FindFunction("Function Engine.MaterialInstanceTimeVarying.SetScalarStartTime");
	}

	UMaterialInstanceTimeVarying_execSetScalarStartTime_Params SetScalarStartTime_Params;
	memset(&SetScalarStartTime_Params, 0, sizeof(SetScalarStartTime_Params));
	memcpy_s(&SetScalarStartTime_Params.ParameterName, sizeof(SetScalarStartTime_Params.ParameterName), &ParameterName, sizeof(ParameterName));
	memcpy_s(&SetScalarStartTime_Params.Value, sizeof(SetScalarStartTime_Params.Value), &Value, sizeof(Value));

	uFnSetScalarStartTime->iNative = 0;
	uFnSetScalarStartTime->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetScalarStartTime, &SetScalarStartTime_Params, nullptr);
	uFnSetScalarStartTime->FunctionFlags |= 0x400;
	uFnSetScalarStartTime->iNative = 25777;
};

// Function Engine.MaterialInstanceTimeVarying.SetScalarCurveParameterValue
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[25774])
// Parameter Info:
// class FName                    ParameterName                  (CPF_Parm)
// struct FInterpCurveFloat       Value                          (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void UMaterialInstanceTimeVarying::SetScalarCurveParameterValue(const class FName& ParameterName, struct FInterpCurveFloat& Value)
{
	static UFunction* uFnSetScalarCurveParameterValue = nullptr;

	if (!uFnSetScalarCurveParameterValue)
	{
		uFnSetScalarCurveParameterValue = UFunction::FindFunction("Function Engine.MaterialInstanceTimeVarying.SetScalarCurveParameterValue");
	}

	UMaterialInstanceTimeVarying_execSetScalarCurveParameterValue_Params SetScalarCurveParameterValue_Params;
	memset(&SetScalarCurveParameterValue_Params, 0, sizeof(SetScalarCurveParameterValue_Params));
	memcpy_s(&SetScalarCurveParameterValue_Params.ParameterName, sizeof(SetScalarCurveParameterValue_Params.ParameterName), &ParameterName, sizeof(ParameterName));
	memcpy_s(&SetScalarCurveParameterValue_Params.Value, sizeof(SetScalarCurveParameterValue_Params.Value), &Value, sizeof(Value));

	uFnSetScalarCurveParameterValue->iNative = 0;
	uFnSetScalarCurveParameterValue->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetScalarCurveParameterValue, &SetScalarCurveParameterValue_Params, nullptr);
	uFnSetScalarCurveParameterValue->FunctionFlags |= 0x400;
	uFnSetScalarCurveParameterValue->iNative = 25774;

	memcpy_s(&Value, sizeof(Value), &SetScalarCurveParameterValue_Params.Value, sizeof(SetScalarCurveParameterValue_Params.Value));
};

// Function Engine.MaterialInstanceTimeVarying.SetScalarParameterValue
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25776])
// Parameter Info:
// class FName                    ParameterName                  (CPF_Parm)
// float                          Value                          (CPF_Parm)

void UMaterialInstanceTimeVarying::SetScalarParameterValue(const class FName& ParameterName, float Value)
{
	static UFunction* uFnSetScalarParameterValue = nullptr;

	if (!uFnSetScalarParameterValue)
	{
		uFnSetScalarParameterValue = UFunction::FindFunction("Function Engine.MaterialInstanceTimeVarying.SetScalarParameterValue");
	}

	UMaterialInstanceTimeVarying_execSetScalarParameterValue_Params SetScalarParameterValue_Params;
	memset(&SetScalarParameterValue_Params, 0, sizeof(SetScalarParameterValue_Params));
	memcpy_s(&SetScalarParameterValue_Params.ParameterName, sizeof(SetScalarParameterValue_Params.ParameterName), &ParameterName, sizeof(ParameterName));
	memcpy_s(&SetScalarParameterValue_Params.Value, sizeof(SetScalarParameterValue_Params.Value), &Value, sizeof(Value));

	uFnSetScalarParameterValue->iNative = 0;
	uFnSetScalarParameterValue->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetScalarParameterValue, &SetScalarParameterValue_Params, nullptr);
	uFnSetScalarParameterValue->FunctionFlags |= 0x400;
	uFnSetScalarParameterValue->iNative = 25776;
};

// Function Engine.MaterialInstanceTimeVarying.SetParent
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25734])
// Parameter Info:
// class UMaterialInterface*      NewParent                      (CPF_Parm)

void UMaterialInstanceTimeVarying::SetParent(class UMaterialInterface* NewParent)
{
	static UFunction* uFnSetParent = nullptr;

	if (!uFnSetParent)
	{
		uFnSetParent = UFunction::FindFunction("Function Engine.MaterialInstanceTimeVarying.SetParent");
	}

	UMaterialInstanceTimeVarying_execSetParent_Params SetParent_Params;
	memset(&SetParent_Params, 0, sizeof(SetParent_Params));
	SetParent_Params.NewParent = NewParent;

	uFnSetParent->iNative = 0;
	uFnSetParent->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetParent, &SetParent_Params, nullptr);
	uFnSetParent->FunctionFlags |= 0x400;
	uFnSetParent->iNative = 25734;
};

// Function Engine.EmitterCameraLensEffectBase.UpdateLocation
// [0x00420500] (FUNC_Simulated | FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[26985])
// Parameter Info:
// float                          CamFOVDeg                      (CPF_Parm)
// struct FVector                 CamLoc                         (CPF_Const | CPF_Parm | CPF_OutParm)
// struct FRotator                CamRot                         (CPF_Const | CPF_Parm | CPF_OutParm)

void AEmitterCameraLensEffectBase::UpdateLocation(float CamFOVDeg, struct FVector& CamLoc, struct FRotator& CamRot)
{
	static UFunction* uFnUpdateLocation = nullptr;

	if (!uFnUpdateLocation)
	{
		uFnUpdateLocation = UFunction::FindFunction("Function Engine.EmitterCameraLensEffectBase.UpdateLocation");
	}

	AEmitterCameraLensEffectBase_execUpdateLocation_Params UpdateLocation_Params;
	memset(&UpdateLocation_Params, 0, sizeof(UpdateLocation_Params));
	memcpy_s(&UpdateLocation_Params.CamFOVDeg, sizeof(UpdateLocation_Params.CamFOVDeg), &CamFOVDeg, sizeof(CamFOVDeg));
	memcpy_s(&UpdateLocation_Params.CamLoc, sizeof(UpdateLocation_Params.CamLoc), &CamLoc, sizeof(CamLoc));
	memcpy_s(&UpdateLocation_Params.CamRot, sizeof(UpdateLocation_Params.CamRot), &CamRot, sizeof(CamRot));

	uFnUpdateLocation->iNative = 0;
	uFnUpdateLocation->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnUpdateLocation, &UpdateLocation_Params, nullptr);
	uFnUpdateLocation->FunctionFlags |= 0x400;
	uFnUpdateLocation->iNative = 26985;

	memcpy_s(&CamLoc, sizeof(CamLoc), &UpdateLocation_Params.CamLoc, sizeof(UpdateLocation_Params.CamLoc));
	memcpy_s(&CamRot, sizeof(CamRot), &UpdateLocation_Params.CamRot, sizeof(UpdateLocation_Params.CamRot));
};

// Function Engine.EmitterCameraLensEffectBase.ActivateLensEffect
// [0x00020500] (FUNC_Simulated | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[15064])
// Parameter Info:

void AEmitterCameraLensEffectBase::ActivateLensEffect()
{
	static UFunction* uFnActivateLensEffect = nullptr;

	if (!uFnActivateLensEffect)
	{
		uFnActivateLensEffect = UFunction::FindFunction("Function Engine.EmitterCameraLensEffectBase.ActivateLensEffect");
	}

	AEmitterCameraLensEffectBase_execActivateLensEffect_Params ActivateLensEffect_Params;
	memset(&ActivateLensEffect_Params, 0, sizeof(ActivateLensEffect_Params));

	uFnActivateLensEffect->iNative = 0;
	uFnActivateLensEffect->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnActivateLensEffect, &ActivateLensEffect_Params, nullptr);
	uFnActivateLensEffect->FunctionFlags |= 0x400;
	uFnActivateLensEffect->iNative = 15064;
};

// Function Engine.EmitterCameraLensEffectBase.PostBeginPlay
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AEmitterCameraLensEffectBase::PostBeginPlay()
{
	static UFunction* uFnPostBeginPlay = nullptr;

	if (!uFnPostBeginPlay)
	{
		uFnPostBeginPlay = UFunction::FindFunction("Function Engine.EmitterCameraLensEffectBase.PostBeginPlay");
	}

	AEmitterCameraLensEffectBase_execPostBeginPlay_Params PostBeginPlay_Params;
	memset(&PostBeginPlay_Params, 0, sizeof(PostBeginPlay_Params));

	this->ProcessEvent(uFnPostBeginPlay, &PostBeginPlay_Params, nullptr);
};

// Function Engine.EmitterCameraLensEffectBase.NotifyRetriggered
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[23399])
// Parameter Info:

void AEmitterCameraLensEffectBase::NotifyRetriggered()
{
	static UFunction* uFnNotifyRetriggered = nullptr;

	if (!uFnNotifyRetriggered)
	{
		uFnNotifyRetriggered = UFunction::FindFunction("Function Engine.EmitterCameraLensEffectBase.NotifyRetriggered");
	}

	AEmitterCameraLensEffectBase_execNotifyRetriggered_Params NotifyRetriggered_Params;
	memset(&NotifyRetriggered_Params, 0, sizeof(NotifyRetriggered_Params));

	uFnNotifyRetriggered->iNative = 0;
	uFnNotifyRetriggered->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnNotifyRetriggered, &NotifyRetriggered_Params, nullptr);
	uFnNotifyRetriggered->FunctionFlags |= 0x400;
	uFnNotifyRetriggered->iNative = 23399;
};

// Function Engine.EmitterCameraLensEffectBase.RegisterCamera
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25015])
// Parameter Info:
// class ACamera*                 C                              (CPF_Parm)

void AEmitterCameraLensEffectBase::RegisterCamera(class ACamera* C)
{
	static UFunction* uFnRegisterCamera = nullptr;

	if (!uFnRegisterCamera)
	{
		uFnRegisterCamera = UFunction::FindFunction("Function Engine.EmitterCameraLensEffectBase.RegisterCamera");
	}

	AEmitterCameraLensEffectBase_execRegisterCamera_Params RegisterCamera_Params;
	memset(&RegisterCamera_Params, 0, sizeof(RegisterCamera_Params));
	RegisterCamera_Params.C = C;

	uFnRegisterCamera->iNative = 0;
	uFnRegisterCamera->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnRegisterCamera, &RegisterCamera_Params, nullptr);
	uFnRegisterCamera->FunctionFlags |= 0x400;
	uFnRegisterCamera->iNative = 25015;
};

// Function Engine.EmitterCameraLensEffectBase.Destroyed
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AEmitterCameraLensEffectBase::Destroyed()
{
	static UFunction* uFnDestroyed = nullptr;

	if (!uFnDestroyed)
	{
		uFnDestroyed = UFunction::FindFunction("Function Engine.EmitterCameraLensEffectBase.Destroyed");
	}

	AEmitterCameraLensEffectBase_execDestroyed_Params Destroyed_Params;
	memset(&Destroyed_Params, 0, sizeof(Destroyed_Params));

	this->ProcessEvent(uFnDestroyed, &Destroyed_Params, nullptr);
};

// Function Engine.PhysXEmitterSpawnable.ReplicatedEvent
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FName                    VarName                        (CPF_Parm)

void APhysXEmitterSpawnable::eventReplicatedEvent(const class FName& VarName)
{
	static UFunction* uFnReplicatedEvent = nullptr;

	if (!uFnReplicatedEvent)
	{
		uFnReplicatedEvent = UFunction::FindFunction("Function Engine.PhysXEmitterSpawnable.ReplicatedEvent");
	}

	APhysXEmitterSpawnable_eventReplicatedEvent_Params ReplicatedEvent_Params;
	memset(&ReplicatedEvent_Params, 0, sizeof(ReplicatedEvent_Params));
	memcpy_s(&ReplicatedEvent_Params.VarName, sizeof(ReplicatedEvent_Params.VarName), &VarName, sizeof(VarName));

	this->ProcessEvent(uFnReplicatedEvent, &ReplicatedEvent_Params, nullptr);
};

// Function Engine.PhysXEmitterSpawnable.SetTemplate
// [0x00024902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UParticleSystem*         NewTemplate                    (CPF_Parm)
// uint32_t                       bDestroyOnFinish               (CPF_OptionalParm | CPF_Parm)

void APhysXEmitterSpawnable::eventSetTemplate(class UParticleSystem* NewTemplate, bool bDestroyOnFinish)
{
	static UFunction* uFnSetTemplate = nullptr;

	if (!uFnSetTemplate)
	{
		uFnSetTemplate = UFunction::FindFunction("Function Engine.PhysXEmitterSpawnable.SetTemplate");
	}

	APhysXEmitterSpawnable_eventSetTemplate_Params SetTemplate_Params;
	memset(&SetTemplate_Params, 0, sizeof(SetTemplate_Params));
	SetTemplate_Params.NewTemplate = NewTemplate;
	SetTemplate_Params.bDestroyOnFinish = bDestroyOnFinish;

	this->ProcessEvent(uFnSetTemplate, &SetTemplate_Params, nullptr);
};

// Function Engine.PhysXEmitterSpawnable.Destroyed
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void APhysXEmitterSpawnable::eventDestroyed()
{
	static UFunction* uFnDestroyed = nullptr;

	if (!uFnDestroyed)
	{
		uFnDestroyed = UFunction::FindFunction("Function Engine.PhysXEmitterSpawnable.Destroyed");
	}

	APhysXEmitterSpawnable_eventDestroyed_Params Destroyed_Params;
	memset(&Destroyed_Params, 0, sizeof(Destroyed_Params));

	this->ProcessEvent(uFnDestroyed, &Destroyed_Params, nullptr);
};

// Function Engine.PhysXEmitterSpawnable.Term
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[26551])
// Parameter Info:

void APhysXEmitterSpawnable::Term()
{
	static UFunction* uFnTerm = nullptr;

	if (!uFnTerm)
	{
		uFnTerm = UFunction::FindFunction("Function Engine.PhysXEmitterSpawnable.Term");
	}

	APhysXEmitterSpawnable_execTerm_Params Term_Params;
	memset(&Term_Params, 0, sizeof(Term_Params));

	uFnTerm->iNative = 0;
	uFnTerm->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnTerm, &Term_Params, nullptr);
	uFnTerm->FunctionFlags |= 0x400;
	uFnTerm->iNative = 26551;
};

// Function Engine.ParticleEventManager.HandleParticleModuleEventSendToGame
// [0x00420800] (FUNC_Event | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// class UParticleModuleEventSendToGame* InEvent                        (CPF_Parm)
// struct FVector                 InCollideDirection             (CPF_Const | CPF_Parm | CPF_OutParm)
// struct FVector                 InHitLocation                  (CPF_Const | CPF_Parm | CPF_OutParm)
// struct FVector                 InHitNormal                    (CPF_Const | CPF_Parm | CPF_OutParm)
// class FName                    InBoneName                     (CPF_Const | CPF_Parm | CPF_OutParm)

void AParticleEventManager::eventHandleParticleModuleEventSendToGame(class UParticleModuleEventSendToGame* InEvent, struct FVector& InCollideDirection, struct FVector& InHitLocation, struct FVector& InHitNormal, class FName& InBoneName)
{
	static UFunction* uFnHandleParticleModuleEventSendToGame = nullptr;

	if (!uFnHandleParticleModuleEventSendToGame)
	{
		uFnHandleParticleModuleEventSendToGame = UFunction::FindFunction("Function Engine.ParticleEventManager.HandleParticleModuleEventSendToGame");
	}

	AParticleEventManager_eventHandleParticleModuleEventSendToGame_Params HandleParticleModuleEventSendToGame_Params;
	memset(&HandleParticleModuleEventSendToGame_Params, 0, sizeof(HandleParticleModuleEventSendToGame_Params));
	HandleParticleModuleEventSendToGame_Params.InEvent = InEvent;
	memcpy_s(&HandleParticleModuleEventSendToGame_Params.InCollideDirection, sizeof(HandleParticleModuleEventSendToGame_Params.InCollideDirection), &InCollideDirection, sizeof(InCollideDirection));
	memcpy_s(&HandleParticleModuleEventSendToGame_Params.InHitLocation, sizeof(HandleParticleModuleEventSendToGame_Params.InHitLocation), &InHitLocation, sizeof(InHitLocation));
	memcpy_s(&HandleParticleModuleEventSendToGame_Params.InHitNormal, sizeof(HandleParticleModuleEventSendToGame_Params.InHitNormal), &InHitNormal, sizeof(InHitNormal));
	memcpy_s(&HandleParticleModuleEventSendToGame_Params.InBoneName, sizeof(HandleParticleModuleEventSendToGame_Params.InBoneName), &InBoneName, sizeof(InBoneName));

	this->ProcessEvent(uFnHandleParticleModuleEventSendToGame, &HandleParticleModuleEventSendToGame_Params, nullptr);

	memcpy_s(&InCollideDirection, sizeof(InCollideDirection), &HandleParticleModuleEventSendToGame_Params.InCollideDirection, sizeof(HandleParticleModuleEventSendToGame_Params.InCollideDirection));
	memcpy_s(&InHitLocation, sizeof(InHitLocation), &HandleParticleModuleEventSendToGame_Params.InHitLocation, sizeof(HandleParticleModuleEventSendToGame_Params.InHitLocation));
	memcpy_s(&InHitNormal, sizeof(InHitNormal), &HandleParticleModuleEventSendToGame_Params.InHitNormal, sizeof(HandleParticleModuleEventSendToGame_Params.InHitNormal));
	memcpy_s(&InBoneName, sizeof(InBoneName), &HandleParticleModuleEventSendToGame_Params.InBoneName, sizeof(HandleParticleModuleEventSendToGame_Params.InBoneName));
};

// Function Engine.ParticleSystemComponent.SetStopSpawning
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25804])
// Parameter Info:
// int32_t                        InEmitterIndex                 (CPF_Parm)
// uint32_t                       bInStopSpawning                (CPF_Parm)

void UParticleSystemComponent::SetStopSpawning(int32_t InEmitterIndex, bool bInStopSpawning)
{
	static UFunction* uFnSetStopSpawning = nullptr;

	if (!uFnSetStopSpawning)
	{
		uFnSetStopSpawning = UFunction::FindFunction("Function Engine.ParticleSystemComponent.SetStopSpawning");
	}

	UParticleSystemComponent_execSetStopSpawning_Params SetStopSpawning_Params;
	memset(&SetStopSpawning_Params, 0, sizeof(SetStopSpawning_Params));
	memcpy_s(&SetStopSpawning_Params.InEmitterIndex, sizeof(SetStopSpawning_Params.InEmitterIndex), &InEmitterIndex, sizeof(InEmitterIndex));
	SetStopSpawning_Params.bInStopSpawning = bInStopSpawning;

	uFnSetStopSpawning->iNative = 0;
	uFnSetStopSpawning->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetStopSpawning, &SetStopSpawning_Params, nullptr);
	uFnSetStopSpawning->FunctionFlags |= 0x400;
	uFnSetStopSpawning->iNative = 25804;
};

// Function Engine.ParticleSystemComponent.ResetToDefaults
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[6317])
// Parameter Info:

void UParticleSystemComponent::ResetToDefaults()
{
	static UFunction* uFnResetToDefaults = nullptr;

	if (!uFnResetToDefaults)
	{
		uFnResetToDefaults = UFunction::FindFunction("Function Engine.ParticleSystemComponent.ResetToDefaults");
	}

	UParticleSystemComponent_execResetToDefaults_Params ResetToDefaults_Params;
	memset(&ResetToDefaults_Params, 0, sizeof(ResetToDefaults_Params));

	uFnResetToDefaults->iNative = 0;
	uFnResetToDefaults->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnResetToDefaults, &ResetToDefaults_Params, nullptr);
	uFnResetToDefaults->FunctionFlags |= 0x400;
	uFnResetToDefaults->iNative = 6317;
};

// Function Engine.ParticleSystemComponent.SetActive
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25564])
// Parameter Info:
// uint32_t                       bNowActive                     (CPF_Parm)

void UParticleSystemComponent::SetActive(bool bNowActive)
{
	static UFunction* uFnSetActive = nullptr;

	if (!uFnSetActive)
	{
		uFnSetActive = UFunction::FindFunction("Function Engine.ParticleSystemComponent.SetActive");
	}

	UParticleSystemComponent_execSetActive_Params SetActive_Params;
	memset(&SetActive_Params, 0, sizeof(SetActive_Params));
	SetActive_Params.bNowActive = bNowActive;

	uFnSetActive->iNative = 0;
	uFnSetActive->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetActive, &SetActive_Params, nullptr);
	uFnSetActive->FunctionFlags |= 0x400;
	uFnSetActive->iNative = 25564;
};

// Function Engine.ParticleSystemComponent.ClearParameter
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[18143])
// Parameter Info:
// class FName                    ParameterName                  (CPF_Parm)
// EParticleSysParamType          ParameterType                  (CPF_OptionalParm | CPF_Parm)

void UParticleSystemComponent::ClearParameter(const class FName& ParameterName, EParticleSysParamType ParameterType)
{
	static UFunction* uFnClearParameter = nullptr;

	if (!uFnClearParameter)
	{
		uFnClearParameter = UFunction::FindFunction("Function Engine.ParticleSystemComponent.ClearParameter");
	}

	UParticleSystemComponent_execClearParameter_Params ClearParameter_Params;
	memset(&ClearParameter_Params, 0, sizeof(ClearParameter_Params));
	memcpy_s(&ClearParameter_Params.ParameterName, sizeof(ClearParameter_Params.ParameterName), &ParameterName, sizeof(ParameterName));
	memcpy_s(&ClearParameter_Params.ParameterType, sizeof(ClearParameter_Params.ParameterType), &ParameterType, sizeof(ParameterType));

	uFnClearParameter->iNative = 0;
	uFnClearParameter->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnClearParameter, &ClearParameter_Params, nullptr);
	uFnClearParameter->FunctionFlags |= 0x400;
	uFnClearParameter->iNative = 18143;
};

// Function Engine.ParticleSystemComponent.GetMaterialParameter
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20638])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    InName                         (CPF_Const | CPF_Parm)
// class UMaterialInterface*      OutMaterial                    (CPF_Parm | CPF_OutParm)

bool UParticleSystemComponent::GetMaterialParameter(const class FName& InName, class UMaterialInterface*& OutMaterial)
{
	static UFunction* uFnGetMaterialParameter = nullptr;

	if (!uFnGetMaterialParameter)
	{
		uFnGetMaterialParameter = UFunction::FindFunction("Function Engine.ParticleSystemComponent.GetMaterialParameter");
	}

	UParticleSystemComponent_execGetMaterialParameter_Params GetMaterialParameter_Params;
	memset(&GetMaterialParameter_Params, 0, sizeof(GetMaterialParameter_Params));
	memcpy_s(&GetMaterialParameter_Params.InName, sizeof(GetMaterialParameter_Params.InName), &InName, sizeof(InName));
	GetMaterialParameter_Params.OutMaterial = OutMaterial;

	uFnGetMaterialParameter->iNative = 0;
	uFnGetMaterialParameter->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetMaterialParameter, &GetMaterialParameter_Params, nullptr);
	uFnGetMaterialParameter->FunctionFlags |= 0x400;
	uFnGetMaterialParameter->iNative = 20638;

	OutMaterial = GetMaterialParameter_Params.OutMaterial;

	return GetMaterialParameter_Params.ReturnValue;
};

// Function Engine.ParticleSystemComponent.GetActorParameter
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20481])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    InName                         (CPF_Const | CPF_Parm)
// class AActor*                  OutActor                       (CPF_Parm | CPF_OutParm)

bool UParticleSystemComponent::GetActorParameter(const class FName& InName, class AActor*& OutActor)
{
	static UFunction* uFnGetActorParameter = nullptr;

	if (!uFnGetActorParameter)
	{
		uFnGetActorParameter = UFunction::FindFunction("Function Engine.ParticleSystemComponent.GetActorParameter");
	}

	UParticleSystemComponent_execGetActorParameter_Params GetActorParameter_Params;
	memset(&GetActorParameter_Params, 0, sizeof(GetActorParameter_Params));
	memcpy_s(&GetActorParameter_Params.InName, sizeof(GetActorParameter_Params.InName), &InName, sizeof(InName));
	GetActorParameter_Params.OutActor = OutActor;

	uFnGetActorParameter->iNative = 0;
	uFnGetActorParameter->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetActorParameter, &GetActorParameter_Params, nullptr);
	uFnGetActorParameter->FunctionFlags |= 0x400;
	uFnGetActorParameter->iNative = 20481;

	OutActor = GetActorParameter_Params.OutActor;

	return GetActorParameter_Params.ReturnValue;
};

// Function Engine.ParticleSystemComponent.GetColorParameter
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20535])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    InName                         (CPF_Const | CPF_Parm)
// struct FColor                  OutColor                       (CPF_Parm | CPF_OutParm)

bool UParticleSystemComponent::GetColorParameter(const class FName& InName, struct FColor& OutColor)
{
	static UFunction* uFnGetColorParameter = nullptr;

	if (!uFnGetColorParameter)
	{
		uFnGetColorParameter = UFunction::FindFunction("Function Engine.ParticleSystemComponent.GetColorParameter");
	}

	UParticleSystemComponent_execGetColorParameter_Params GetColorParameter_Params;
	memset(&GetColorParameter_Params, 0, sizeof(GetColorParameter_Params));
	memcpy_s(&GetColorParameter_Params.InName, sizeof(GetColorParameter_Params.InName), &InName, sizeof(InName));
	memcpy_s(&GetColorParameter_Params.OutColor, sizeof(GetColorParameter_Params.OutColor), &OutColor, sizeof(OutColor));

	uFnGetColorParameter->iNative = 0;
	uFnGetColorParameter->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetColorParameter, &GetColorParameter_Params, nullptr);
	uFnGetColorParameter->FunctionFlags |= 0x400;
	uFnGetColorParameter->iNative = 20535;

	memcpy_s(&OutColor, sizeof(OutColor), &GetColorParameter_Params.OutColor, sizeof(GetColorParameter_Params.OutColor));

	return GetColorParameter_Params.ReturnValue;
};

// Function Engine.ParticleSystemComponent.GetVectorParameter
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20808])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    InName                         (CPF_Const | CPF_Parm)
// struct FVector                 OutVector                      (CPF_Parm | CPF_OutParm)

bool UParticleSystemComponent::GetVectorParameter(const class FName& InName, struct FVector& OutVector)
{
	static UFunction* uFnGetVectorParameter = nullptr;

	if (!uFnGetVectorParameter)
	{
		uFnGetVectorParameter = UFunction::FindFunction("Function Engine.ParticleSystemComponent.GetVectorParameter");
	}

	UParticleSystemComponent_execGetVectorParameter_Params GetVectorParameter_Params;
	memset(&GetVectorParameter_Params, 0, sizeof(GetVectorParameter_Params));
	memcpy_s(&GetVectorParameter_Params.InName, sizeof(GetVectorParameter_Params.InName), &InName, sizeof(InName));
	memcpy_s(&GetVectorParameter_Params.OutVector, sizeof(GetVectorParameter_Params.OutVector), &OutVector, sizeof(OutVector));

	uFnGetVectorParameter->iNative = 0;
	uFnGetVectorParameter->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetVectorParameter, &GetVectorParameter_Params, nullptr);
	uFnGetVectorParameter->FunctionFlags |= 0x400;
	uFnGetVectorParameter->iNative = 20808;

	memcpy_s(&OutVector, sizeof(OutVector), &GetVectorParameter_Params.OutVector, sizeof(GetVectorParameter_Params.OutVector));

	return GetVectorParameter_Params.ReturnValue;
};

// Function Engine.ParticleSystemComponent.GetFloatParameter
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20579])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    InName                         (CPF_Const | CPF_Parm)
// float                          OutFloat                       (CPF_Parm | CPF_OutParm)

bool UParticleSystemComponent::GetFloatParameter(const class FName& InName, float& OutFloat)
{
	static UFunction* uFnGetFloatParameter = nullptr;

	if (!uFnGetFloatParameter)
	{
		uFnGetFloatParameter = UFunction::FindFunction("Function Engine.ParticleSystemComponent.GetFloatParameter");
	}

	UParticleSystemComponent_execGetFloatParameter_Params GetFloatParameter_Params;
	memset(&GetFloatParameter_Params, 0, sizeof(GetFloatParameter_Params));
	memcpy_s(&GetFloatParameter_Params.InName, sizeof(GetFloatParameter_Params.InName), &InName, sizeof(InName));
	memcpy_s(&GetFloatParameter_Params.OutFloat, sizeof(GetFloatParameter_Params.OutFloat), &OutFloat, sizeof(OutFloat));

	uFnGetFloatParameter->iNative = 0;
	uFnGetFloatParameter->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetFloatParameter, &GetFloatParameter_Params, nullptr);
	uFnGetFloatParameter->FunctionFlags |= 0x400;
	uFnGetFloatParameter->iNative = 20579;

	memcpy_s(&OutFloat, sizeof(OutFloat), &GetFloatParameter_Params.OutFloat, sizeof(GetFloatParameter_Params.OutFloat));

	return GetFloatParameter_Params.ReturnValue;
};

// Function Engine.ParticleSystemComponent.SetMaterialParameter
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25711])
// Parameter Info:
// class FName                    ParameterName                  (CPF_Parm)
// class UMaterialInterface*      Param                          (CPF_Parm)

void UParticleSystemComponent::SetMaterialParameter(const class FName& ParameterName, class UMaterialInterface* Param)
{
	static UFunction* uFnSetMaterialParameter = nullptr;

	if (!uFnSetMaterialParameter)
	{
		uFnSetMaterialParameter = UFunction::FindFunction("Function Engine.ParticleSystemComponent.SetMaterialParameter");
	}

	UParticleSystemComponent_execSetMaterialParameter_Params SetMaterialParameter_Params;
	memset(&SetMaterialParameter_Params, 0, sizeof(SetMaterialParameter_Params));
	memcpy_s(&SetMaterialParameter_Params.ParameterName, sizeof(SetMaterialParameter_Params.ParameterName), &ParameterName, sizeof(ParameterName));
	SetMaterialParameter_Params.Param = Param;

	uFnSetMaterialParameter->iNative = 0;
	uFnSetMaterialParameter->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetMaterialParameter, &SetMaterialParameter_Params, nullptr);
	uFnSetMaterialParameter->FunctionFlags |= 0x400;
	uFnSetMaterialParameter->iNative = 25711;
};

// Function Engine.ParticleSystemComponent.SetActorParameter
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25570])
// Parameter Info:
// class FName                    ParameterName                  (CPF_Parm)
// class AActor*                  Param                          (CPF_Parm)

void UParticleSystemComponent::SetActorParameter(const class FName& ParameterName, class AActor* Param)
{
	static UFunction* uFnSetActorParameter = nullptr;

	if (!uFnSetActorParameter)
	{
		uFnSetActorParameter = UFunction::FindFunction("Function Engine.ParticleSystemComponent.SetActorParameter");
	}

	UParticleSystemComponent_execSetActorParameter_Params SetActorParameter_Params;
	memset(&SetActorParameter_Params, 0, sizeof(SetActorParameter_Params));
	memcpy_s(&SetActorParameter_Params.ParameterName, sizeof(SetActorParameter_Params.ParameterName), &ParameterName, sizeof(ParameterName));
	SetActorParameter_Params.Param = Param;

	uFnSetActorParameter->iNative = 0;
	uFnSetActorParameter->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetActorParameter, &SetActorParameter_Params, nullptr);
	uFnSetActorParameter->FunctionFlags |= 0x400;
	uFnSetActorParameter->iNative = 25570;
};

// Function Engine.ParticleSystemComponent.SetColorParameter
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25618])
// Parameter Info:
// class FName                    ParameterName                  (CPF_Parm)
// struct FColor                  Param                          (CPF_Parm)

void UParticleSystemComponent::SetColorParameter(const class FName& ParameterName, const struct FColor& Param)
{
	static UFunction* uFnSetColorParameter = nullptr;

	if (!uFnSetColorParameter)
	{
		uFnSetColorParameter = UFunction::FindFunction("Function Engine.ParticleSystemComponent.SetColorParameter");
	}

	UParticleSystemComponent_execSetColorParameter_Params SetColorParameter_Params;
	memset(&SetColorParameter_Params, 0, sizeof(SetColorParameter_Params));
	memcpy_s(&SetColorParameter_Params.ParameterName, sizeof(SetColorParameter_Params.ParameterName), &ParameterName, sizeof(ParameterName));
	memcpy_s(&SetColorParameter_Params.Param, sizeof(SetColorParameter_Params.Param), &Param, sizeof(Param));

	uFnSetColorParameter->iNative = 0;
	uFnSetColorParameter->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetColorParameter, &SetColorParameter_Params, nullptr);
	uFnSetColorParameter->FunctionFlags |= 0x400;
	uFnSetColorParameter->iNative = 25618;
};

// Function Engine.ParticleSystemComponent.SetVectorParameter
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25834])
// Parameter Info:
// class FName                    ParameterName                  (CPF_Parm)
// struct FVector                 Param                          (CPF_Parm)

void UParticleSystemComponent::SetVectorParameter(const class FName& ParameterName, const struct FVector& Param)
{
	static UFunction* uFnSetVectorParameter = nullptr;

	if (!uFnSetVectorParameter)
	{
		uFnSetVectorParameter = UFunction::FindFunction("Function Engine.ParticleSystemComponent.SetVectorParameter");
	}

	UParticleSystemComponent_execSetVectorParameter_Params SetVectorParameter_Params;
	memset(&SetVectorParameter_Params, 0, sizeof(SetVectorParameter_Params));
	memcpy_s(&SetVectorParameter_Params.ParameterName, sizeof(SetVectorParameter_Params.ParameterName), &ParameterName, sizeof(ParameterName));
	memcpy_s(&SetVectorParameter_Params.Param, sizeof(SetVectorParameter_Params.Param), &Param, sizeof(Param));

	uFnSetVectorParameter->iNative = 0;
	uFnSetVectorParameter->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetVectorParameter, &SetVectorParameter_Params, nullptr);
	uFnSetVectorParameter->FunctionFlags |= 0x400;
	uFnSetVectorParameter->iNative = 25834;
};

// Function Engine.ParticleSystemComponent.SetFloatParameter
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25655])
// Parameter Info:
// class FName                    ParameterName                  (CPF_Parm)
// float                          Param                          (CPF_Parm)

void UParticleSystemComponent::SetFloatParameter(const class FName& ParameterName, float Param)
{
	static UFunction* uFnSetFloatParameter = nullptr;

	if (!uFnSetFloatParameter)
	{
		uFnSetFloatParameter = UFunction::FindFunction("Function Engine.ParticleSystemComponent.SetFloatParameter");
	}

	UParticleSystemComponent_execSetFloatParameter_Params SetFloatParameter_Params;
	memset(&SetFloatParameter_Params, 0, sizeof(SetFloatParameter_Params));
	memcpy_s(&SetFloatParameter_Params.ParameterName, sizeof(SetFloatParameter_Params.ParameterName), &ParameterName, sizeof(ParameterName));
	memcpy_s(&SetFloatParameter_Params.Param, sizeof(SetFloatParameter_Params.Param), &Param, sizeof(Param));

	uFnSetFloatParameter->iNative = 0;
	uFnSetFloatParameter->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetFloatParameter, &SetFloatParameter_Params, nullptr);
	uFnSetFloatParameter->FunctionFlags |= 0x400;
	uFnSetFloatParameter->iNative = 25655;
};

// Function Engine.ParticleSystemComponent.GetEditorLODLevel
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20572])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t UParticleSystemComponent::GetEditorLODLevel()
{
	static UFunction* uFnGetEditorLODLevel = nullptr;

	if (!uFnGetEditorLODLevel)
	{
		uFnGetEditorLODLevel = UFunction::FindFunction("Function Engine.ParticleSystemComponent.GetEditorLODLevel");
	}

	UParticleSystemComponent_execGetEditorLODLevel_Params GetEditorLODLevel_Params;
	memset(&GetEditorLODLevel_Params, 0, sizeof(GetEditorLODLevel_Params));

	uFnGetEditorLODLevel->iNative = 0;
	uFnGetEditorLODLevel->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetEditorLODLevel, &GetEditorLODLevel_Params, nullptr);
	uFnGetEditorLODLevel->FunctionFlags |= 0x400;
	uFnGetEditorLODLevel->iNative = 20572;

	return GetEditorLODLevel_Params.ReturnValue;
};

// Function Engine.ParticleSystemComponent.GetLODLevel
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20628])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t UParticleSystemComponent::GetLODLevel()
{
	static UFunction* uFnGetLODLevel = nullptr;

	if (!uFnGetLODLevel)
	{
		uFnGetLODLevel = UFunction::FindFunction("Function Engine.ParticleSystemComponent.GetLODLevel");
	}

	UParticleSystemComponent_execGetLODLevel_Params GetLODLevel_Params;
	memset(&GetLODLevel_Params, 0, sizeof(GetLODLevel_Params));

	uFnGetLODLevel->iNative = 0;
	uFnGetLODLevel->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetLODLevel, &GetLODLevel_Params, nullptr);
	uFnGetLODLevel->FunctionFlags |= 0x400;
	uFnGetLODLevel->iNative = 20628;

	return GetLODLevel_Params.ReturnValue;
};

// Function Engine.ParticleSystemComponent.SetEditorLODLevel
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25647])
// Parameter Info:
// int32_t                        InLODLevel                     (CPF_Parm)

void UParticleSystemComponent::SetEditorLODLevel(int32_t InLODLevel)
{
	static UFunction* uFnSetEditorLODLevel = nullptr;

	if (!uFnSetEditorLODLevel)
	{
		uFnSetEditorLODLevel = UFunction::FindFunction("Function Engine.ParticleSystemComponent.SetEditorLODLevel");
	}

	UParticleSystemComponent_execSetEditorLODLevel_Params SetEditorLODLevel_Params;
	memset(&SetEditorLODLevel_Params, 0, sizeof(SetEditorLODLevel_Params));
	memcpy_s(&SetEditorLODLevel_Params.InLODLevel, sizeof(SetEditorLODLevel_Params.InLODLevel), &InLODLevel, sizeof(InLODLevel));

	uFnSetEditorLODLevel->iNative = 0;
	uFnSetEditorLODLevel->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetEditorLODLevel, &SetEditorLODLevel_Params, nullptr);
	uFnSetEditorLODLevel->FunctionFlags |= 0x400;
	uFnSetEditorLODLevel->iNative = 25647;
};

// Function Engine.ParticleSystemComponent.SetLODLevel
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25705])
// Parameter Info:
// int32_t                        InLODLevel                     (CPF_Parm)

void UParticleSystemComponent::SetLODLevel(int32_t InLODLevel)
{
	static UFunction* uFnSetLODLevel = nullptr;

	if (!uFnSetLODLevel)
	{
		uFnSetLODLevel = UFunction::FindFunction("Function Engine.ParticleSystemComponent.SetLODLevel");
	}

	UParticleSystemComponent_execSetLODLevel_Params SetLODLevel_Params;
	memset(&SetLODLevel_Params, 0, sizeof(SetLODLevel_Params));
	memcpy_s(&SetLODLevel_Params.InLODLevel, sizeof(SetLODLevel_Params.InLODLevel), &InLODLevel, sizeof(InLODLevel));

	uFnSetLODLevel->iNative = 0;
	uFnSetLODLevel->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetLODLevel, &SetLODLevel_Params, nullptr);
	uFnSetLODLevel->FunctionFlags |= 0x400;
	uFnSetLODLevel->iNative = 25705;
};

// Function Engine.ParticleSystemComponent.DetermineLODLevelForLocation
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[18927])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FVector                 EffectLocation                 (CPF_Const | CPF_Parm | CPF_OutParm)

int32_t UParticleSystemComponent::DetermineLODLevelForLocation(struct FVector& EffectLocation)
{
	static UFunction* uFnDetermineLODLevelForLocation = nullptr;

	if (!uFnDetermineLODLevelForLocation)
	{
		uFnDetermineLODLevelForLocation = UFunction::FindFunction("Function Engine.ParticleSystemComponent.DetermineLODLevelForLocation");
	}

	UParticleSystemComponent_execDetermineLODLevelForLocation_Params DetermineLODLevelForLocation_Params;
	memset(&DetermineLODLevelForLocation_Params, 0, sizeof(DetermineLODLevelForLocation_Params));
	memcpy_s(&DetermineLODLevelForLocation_Params.EffectLocation, sizeof(DetermineLODLevelForLocation_Params.EffectLocation), &EffectLocation, sizeof(EffectLocation));

	uFnDetermineLODLevelForLocation->iNative = 0;
	uFnDetermineLODLevelForLocation->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnDetermineLODLevelForLocation, &DetermineLODLevelForLocation_Params, nullptr);
	uFnDetermineLODLevelForLocation->FunctionFlags |= 0x400;
	uFnDetermineLODLevelForLocation->iNative = 18927;

	memcpy_s(&EffectLocation, sizeof(EffectLocation), &DetermineLODLevelForLocation_Params.EffectLocation, sizeof(DetermineLODLevelForLocation_Params.EffectLocation));

	return DetermineLODLevelForLocation_Params.ReturnValue;
};

// Function Engine.ParticleSystemComponent.SetBeamTargetStrength
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25597])
// Parameter Info:
// int32_t                        EmitterIndex                   (CPF_Parm)
// float                          NewTargetStrength              (CPF_Parm)
// int32_t                        TargetIndex                    (CPF_Parm)

void UParticleSystemComponent::SetBeamTargetStrength(int32_t EmitterIndex, float NewTargetStrength, int32_t TargetIndex)
{
	static UFunction* uFnSetBeamTargetStrength = nullptr;

	if (!uFnSetBeamTargetStrength)
	{
		uFnSetBeamTargetStrength = UFunction::FindFunction("Function Engine.ParticleSystemComponent.SetBeamTargetStrength");
	}

	UParticleSystemComponent_execSetBeamTargetStrength_Params SetBeamTargetStrength_Params;
	memset(&SetBeamTargetStrength_Params, 0, sizeof(SetBeamTargetStrength_Params));
	memcpy_s(&SetBeamTargetStrength_Params.EmitterIndex, sizeof(SetBeamTargetStrength_Params.EmitterIndex), &EmitterIndex, sizeof(EmitterIndex));
	memcpy_s(&SetBeamTargetStrength_Params.NewTargetStrength, sizeof(SetBeamTargetStrength_Params.NewTargetStrength), &NewTargetStrength, sizeof(NewTargetStrength));
	memcpy_s(&SetBeamTargetStrength_Params.TargetIndex, sizeof(SetBeamTargetStrength_Params.TargetIndex), &TargetIndex, sizeof(TargetIndex));

	uFnSetBeamTargetStrength->iNative = 0;
	uFnSetBeamTargetStrength->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetBeamTargetStrength, &SetBeamTargetStrength_Params, nullptr);
	uFnSetBeamTargetStrength->FunctionFlags |= 0x400;
	uFnSetBeamTargetStrength->iNative = 25597;
};

// Function Engine.ParticleSystemComponent.SetBeamTargetTangent
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25598])
// Parameter Info:
// int32_t                        EmitterIndex                   (CPF_Parm)
// struct FVector                 NewTangentPoint                (CPF_Parm)
// int32_t                        TargetIndex                    (CPF_Parm)

void UParticleSystemComponent::SetBeamTargetTangent(int32_t EmitterIndex, const struct FVector& NewTangentPoint, int32_t TargetIndex)
{
	static UFunction* uFnSetBeamTargetTangent = nullptr;

	if (!uFnSetBeamTargetTangent)
	{
		uFnSetBeamTargetTangent = UFunction::FindFunction("Function Engine.ParticleSystemComponent.SetBeamTargetTangent");
	}

	UParticleSystemComponent_execSetBeamTargetTangent_Params SetBeamTargetTangent_Params;
	memset(&SetBeamTargetTangent_Params, 0, sizeof(SetBeamTargetTangent_Params));
	memcpy_s(&SetBeamTargetTangent_Params.EmitterIndex, sizeof(SetBeamTargetTangent_Params.EmitterIndex), &EmitterIndex, sizeof(EmitterIndex));
	memcpy_s(&SetBeamTargetTangent_Params.NewTangentPoint, sizeof(SetBeamTargetTangent_Params.NewTangentPoint), &NewTangentPoint, sizeof(NewTangentPoint));
	memcpy_s(&SetBeamTargetTangent_Params.TargetIndex, sizeof(SetBeamTargetTangent_Params.TargetIndex), &TargetIndex, sizeof(TargetIndex));

	uFnSetBeamTargetTangent->iNative = 0;
	uFnSetBeamTargetTangent->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetBeamTargetTangent, &SetBeamTargetTangent_Params, nullptr);
	uFnSetBeamTargetTangent->FunctionFlags |= 0x400;
	uFnSetBeamTargetTangent->iNative = 25598;
};

// Function Engine.ParticleSystemComponent.SetBeamTargetPoint
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25596])
// Parameter Info:
// int32_t                        EmitterIndex                   (CPF_Parm)
// struct FVector                 NewTargetPoint                 (CPF_Parm)
// int32_t                        TargetIndex                    (CPF_Parm)

void UParticleSystemComponent::SetBeamTargetPoint(int32_t EmitterIndex, const struct FVector& NewTargetPoint, int32_t TargetIndex)
{
	static UFunction* uFnSetBeamTargetPoint = nullptr;

	if (!uFnSetBeamTargetPoint)
	{
		uFnSetBeamTargetPoint = UFunction::FindFunction("Function Engine.ParticleSystemComponent.SetBeamTargetPoint");
	}

	UParticleSystemComponent_execSetBeamTargetPoint_Params SetBeamTargetPoint_Params;
	memset(&SetBeamTargetPoint_Params, 0, sizeof(SetBeamTargetPoint_Params));
	memcpy_s(&SetBeamTargetPoint_Params.EmitterIndex, sizeof(SetBeamTargetPoint_Params.EmitterIndex), &EmitterIndex, sizeof(EmitterIndex));
	memcpy_s(&SetBeamTargetPoint_Params.NewTargetPoint, sizeof(SetBeamTargetPoint_Params.NewTargetPoint), &NewTargetPoint, sizeof(NewTargetPoint));
	memcpy_s(&SetBeamTargetPoint_Params.TargetIndex, sizeof(SetBeamTargetPoint_Params.TargetIndex), &TargetIndex, sizeof(TargetIndex));

	uFnSetBeamTargetPoint->iNative = 0;
	uFnSetBeamTargetPoint->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetBeamTargetPoint, &SetBeamTargetPoint_Params, nullptr);
	uFnSetBeamTargetPoint->FunctionFlags |= 0x400;
	uFnSetBeamTargetPoint->iNative = 25596;
};

// Function Engine.ParticleSystemComponent.SetBeamSourceStrength
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25594])
// Parameter Info:
// int32_t                        EmitterIndex                   (CPF_Parm)
// float                          NewSourceStrength              (CPF_Parm)
// int32_t                        SourceIndex                    (CPF_Parm)

void UParticleSystemComponent::SetBeamSourceStrength(int32_t EmitterIndex, float NewSourceStrength, int32_t SourceIndex)
{
	static UFunction* uFnSetBeamSourceStrength = nullptr;

	if (!uFnSetBeamSourceStrength)
	{
		uFnSetBeamSourceStrength = UFunction::FindFunction("Function Engine.ParticleSystemComponent.SetBeamSourceStrength");
	}

	UParticleSystemComponent_execSetBeamSourceStrength_Params SetBeamSourceStrength_Params;
	memset(&SetBeamSourceStrength_Params, 0, sizeof(SetBeamSourceStrength_Params));
	memcpy_s(&SetBeamSourceStrength_Params.EmitterIndex, sizeof(SetBeamSourceStrength_Params.EmitterIndex), &EmitterIndex, sizeof(EmitterIndex));
	memcpy_s(&SetBeamSourceStrength_Params.NewSourceStrength, sizeof(SetBeamSourceStrength_Params.NewSourceStrength), &NewSourceStrength, sizeof(NewSourceStrength));
	memcpy_s(&SetBeamSourceStrength_Params.SourceIndex, sizeof(SetBeamSourceStrength_Params.SourceIndex), &SourceIndex, sizeof(SourceIndex));

	uFnSetBeamSourceStrength->iNative = 0;
	uFnSetBeamSourceStrength->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetBeamSourceStrength, &SetBeamSourceStrength_Params, nullptr);
	uFnSetBeamSourceStrength->FunctionFlags |= 0x400;
	uFnSetBeamSourceStrength->iNative = 25594;
};

// Function Engine.ParticleSystemComponent.SetBeamSourceTangent
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25595])
// Parameter Info:
// int32_t                        EmitterIndex                   (CPF_Parm)
// struct FVector                 NewTangentPoint                (CPF_Parm)
// int32_t                        SourceIndex                    (CPF_Parm)

void UParticleSystemComponent::SetBeamSourceTangent(int32_t EmitterIndex, const struct FVector& NewTangentPoint, int32_t SourceIndex)
{
	static UFunction* uFnSetBeamSourceTangent = nullptr;

	if (!uFnSetBeamSourceTangent)
	{
		uFnSetBeamSourceTangent = UFunction::FindFunction("Function Engine.ParticleSystemComponent.SetBeamSourceTangent");
	}

	UParticleSystemComponent_execSetBeamSourceTangent_Params SetBeamSourceTangent_Params;
	memset(&SetBeamSourceTangent_Params, 0, sizeof(SetBeamSourceTangent_Params));
	memcpy_s(&SetBeamSourceTangent_Params.EmitterIndex, sizeof(SetBeamSourceTangent_Params.EmitterIndex), &EmitterIndex, sizeof(EmitterIndex));
	memcpy_s(&SetBeamSourceTangent_Params.NewTangentPoint, sizeof(SetBeamSourceTangent_Params.NewTangentPoint), &NewTangentPoint, sizeof(NewTangentPoint));
	memcpy_s(&SetBeamSourceTangent_Params.SourceIndex, sizeof(SetBeamSourceTangent_Params.SourceIndex), &SourceIndex, sizeof(SourceIndex));

	uFnSetBeamSourceTangent->iNative = 0;
	uFnSetBeamSourceTangent->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetBeamSourceTangent, &SetBeamSourceTangent_Params, nullptr);
	uFnSetBeamSourceTangent->FunctionFlags |= 0x400;
	uFnSetBeamSourceTangent->iNative = 25595;
};

// Function Engine.ParticleSystemComponent.SetBeamSourcePoint
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25593])
// Parameter Info:
// int32_t                        EmitterIndex                   (CPF_Parm)
// struct FVector                 NewSourcePoint                 (CPF_Parm)
// int32_t                        SourceIndex                    (CPF_Parm)

void UParticleSystemComponent::SetBeamSourcePoint(int32_t EmitterIndex, const struct FVector& NewSourcePoint, int32_t SourceIndex)
{
	static UFunction* uFnSetBeamSourcePoint = nullptr;

	if (!uFnSetBeamSourcePoint)
	{
		uFnSetBeamSourcePoint = UFunction::FindFunction("Function Engine.ParticleSystemComponent.SetBeamSourcePoint");
	}

	UParticleSystemComponent_execSetBeamSourcePoint_Params SetBeamSourcePoint_Params;
	memset(&SetBeamSourcePoint_Params, 0, sizeof(SetBeamSourcePoint_Params));
	memcpy_s(&SetBeamSourcePoint_Params.EmitterIndex, sizeof(SetBeamSourcePoint_Params.EmitterIndex), &EmitterIndex, sizeof(EmitterIndex));
	memcpy_s(&SetBeamSourcePoint_Params.NewSourcePoint, sizeof(SetBeamSourcePoint_Params.NewSourcePoint), &NewSourcePoint, sizeof(NewSourcePoint));
	memcpy_s(&SetBeamSourcePoint_Params.SourceIndex, sizeof(SetBeamSourcePoint_Params.SourceIndex), &SourceIndex, sizeof(SourceIndex));

	uFnSetBeamSourcePoint->iNative = 0;
	uFnSetBeamSourcePoint->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetBeamSourcePoint, &SetBeamSourcePoint_Params, nullptr);
	uFnSetBeamSourcePoint->FunctionFlags |= 0x400;
	uFnSetBeamSourcePoint->iNative = 25593;
};

// Function Engine.ParticleSystemComponent.SetBeamDistance
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25591])
// Parameter Info:
// int32_t                        EmitterIndex                   (CPF_Parm)
// float                          Distance                       (CPF_Parm)

void UParticleSystemComponent::SetBeamDistance(int32_t EmitterIndex, float Distance)
{
	static UFunction* uFnSetBeamDistance = nullptr;

	if (!uFnSetBeamDistance)
	{
		uFnSetBeamDistance = UFunction::FindFunction("Function Engine.ParticleSystemComponent.SetBeamDistance");
	}

	UParticleSystemComponent_execSetBeamDistance_Params SetBeamDistance_Params;
	memset(&SetBeamDistance_Params, 0, sizeof(SetBeamDistance_Params));
	memcpy_s(&SetBeamDistance_Params.EmitterIndex, sizeof(SetBeamDistance_Params.EmitterIndex), &EmitterIndex, sizeof(EmitterIndex));
	memcpy_s(&SetBeamDistance_Params.Distance, sizeof(SetBeamDistance_Params.Distance), &Distance, sizeof(Distance));

	uFnSetBeamDistance->iNative = 0;
	uFnSetBeamDistance->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetBeamDistance, &SetBeamDistance_Params, nullptr);
	uFnSetBeamDistance->FunctionFlags |= 0x400;
	uFnSetBeamDistance->iNative = 25591;
};

// Function Engine.ParticleSystemComponent.SetBeamEndPoint
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25592])
// Parameter Info:
// int32_t                        EmitterIndex                   (CPF_Parm)
// struct FVector                 NewEndPoint                    (CPF_Parm)

void UParticleSystemComponent::SetBeamEndPoint(int32_t EmitterIndex, const struct FVector& NewEndPoint)
{
	static UFunction* uFnSetBeamEndPoint = nullptr;

	if (!uFnSetBeamEndPoint)
	{
		uFnSetBeamEndPoint = UFunction::FindFunction("Function Engine.ParticleSystemComponent.SetBeamEndPoint");
	}

	UParticleSystemComponent_execSetBeamEndPoint_Params SetBeamEndPoint_Params;
	memset(&SetBeamEndPoint_Params, 0, sizeof(SetBeamEndPoint_Params));
	memcpy_s(&SetBeamEndPoint_Params.EmitterIndex, sizeof(SetBeamEndPoint_Params.EmitterIndex), &EmitterIndex, sizeof(EmitterIndex));
	memcpy_s(&SetBeamEndPoint_Params.NewEndPoint, sizeof(SetBeamEndPoint_Params.NewEndPoint), &NewEndPoint, sizeof(NewEndPoint));

	uFnSetBeamEndPoint->iNative = 0;
	uFnSetBeamEndPoint->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetBeamEndPoint, &SetBeamEndPoint_Params, nullptr);
	uFnSetBeamEndPoint->FunctionFlags |= 0x400;
	uFnSetBeamEndPoint->iNative = 25592;
};

// Function Engine.ParticleSystemComponent.SetBeamTessellationFactor
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25599])
// Parameter Info:
// int32_t                        EmitterIndex                   (CPF_Parm)
// float                          NewFactor                      (CPF_Parm)

void UParticleSystemComponent::SetBeamTessellationFactor(int32_t EmitterIndex, float NewFactor)
{
	static UFunction* uFnSetBeamTessellationFactor = nullptr;

	if (!uFnSetBeamTessellationFactor)
	{
		uFnSetBeamTessellationFactor = UFunction::FindFunction("Function Engine.ParticleSystemComponent.SetBeamTessellationFactor");
	}

	UParticleSystemComponent_execSetBeamTessellationFactor_Params SetBeamTessellationFactor_Params;
	memset(&SetBeamTessellationFactor_Params, 0, sizeof(SetBeamTessellationFactor_Params));
	memcpy_s(&SetBeamTessellationFactor_Params.EmitterIndex, sizeof(SetBeamTessellationFactor_Params.EmitterIndex), &EmitterIndex, sizeof(EmitterIndex));
	memcpy_s(&SetBeamTessellationFactor_Params.NewFactor, sizeof(SetBeamTessellationFactor_Params.NewFactor), &NewFactor, sizeof(NewFactor));

	uFnSetBeamTessellationFactor->iNative = 0;
	uFnSetBeamTessellationFactor->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetBeamTessellationFactor, &SetBeamTessellationFactor_Params, nullptr);
	uFnSetBeamTessellationFactor->FunctionFlags |= 0x400;
	uFnSetBeamTessellationFactor->iNative = 25599;
};

// Function Engine.ParticleSystemComponent.SetBeamType
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25600])
// Parameter Info:
// int32_t                        EmitterIndex                   (CPF_Parm)
// int32_t                        NewMethod                      (CPF_Parm)

void UParticleSystemComponent::SetBeamType(int32_t EmitterIndex, int32_t NewMethod)
{
	static UFunction* uFnSetBeamType = nullptr;

	if (!uFnSetBeamType)
	{
		uFnSetBeamType = UFunction::FindFunction("Function Engine.ParticleSystemComponent.SetBeamType");
	}

	UParticleSystemComponent_execSetBeamType_Params SetBeamType_Params;
	memset(&SetBeamType_Params, 0, sizeof(SetBeamType_Params));
	memcpy_s(&SetBeamType_Params.EmitterIndex, sizeof(SetBeamType_Params.EmitterIndex), &EmitterIndex, sizeof(EmitterIndex));
	memcpy_s(&SetBeamType_Params.NewMethod, sizeof(SetBeamType_Params.NewMethod), &NewMethod, sizeof(NewMethod));

	uFnSetBeamType->iNative = 0;
	uFnSetBeamType->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetBeamType, &SetBeamType_Params, nullptr);
	uFnSetBeamType->FunctionFlags |= 0x400;
	uFnSetBeamType->iNative = 25600;
};

// Function Engine.ParticleSystemComponent.RewindEmitterInstances
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25189])
// Parameter Info:

void UParticleSystemComponent::RewindEmitterInstances()
{
	static UFunction* uFnRewindEmitterInstances = nullptr;

	if (!uFnRewindEmitterInstances)
	{
		uFnRewindEmitterInstances = UFunction::FindFunction("Function Engine.ParticleSystemComponent.RewindEmitterInstances");
	}

	UParticleSystemComponent_execRewindEmitterInstances_Params RewindEmitterInstances_Params;
	memset(&RewindEmitterInstances_Params, 0, sizeof(RewindEmitterInstances_Params));

	uFnRewindEmitterInstances->iNative = 0;
	uFnRewindEmitterInstances->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnRewindEmitterInstances, &RewindEmitterInstances_Params, nullptr);
	uFnRewindEmitterInstances->FunctionFlags |= 0x400;
	uFnRewindEmitterInstances->iNative = 25189;
};

// Function Engine.ParticleSystemComponent.RewindEmitterInstance
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25188])
// Parameter Info:
// int32_t                        EmitterIndex                   (CPF_Parm)

void UParticleSystemComponent::RewindEmitterInstance(int32_t EmitterIndex)
{
	static UFunction* uFnRewindEmitterInstance = nullptr;

	if (!uFnRewindEmitterInstance)
	{
		uFnRewindEmitterInstance = UFunction::FindFunction("Function Engine.ParticleSystemComponent.RewindEmitterInstance");
	}

	UParticleSystemComponent_execRewindEmitterInstance_Params RewindEmitterInstance_Params;
	memset(&RewindEmitterInstance_Params, 0, sizeof(RewindEmitterInstance_Params));
	memcpy_s(&RewindEmitterInstance_Params.EmitterIndex, sizeof(RewindEmitterInstance_Params.EmitterIndex), &EmitterIndex, sizeof(EmitterIndex));

	uFnRewindEmitterInstance->iNative = 0;
	uFnRewindEmitterInstance->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnRewindEmitterInstance, &RewindEmitterInstance_Params, nullptr);
	uFnRewindEmitterInstance->FunctionFlags |= 0x400;
	uFnRewindEmitterInstance->iNative = 25188;
};

// Function Engine.ParticleSystemComponent.SetKillOnCompleted
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25688])
// Parameter Info:
// int32_t                        EmitterIndex                   (CPF_Parm)
// uint32_t                       bKill                          (CPF_Parm)

void UParticleSystemComponent::SetKillOnCompleted(int32_t EmitterIndex, bool bKill)
{
	static UFunction* uFnSetKillOnCompleted = nullptr;

	if (!uFnSetKillOnCompleted)
	{
		uFnSetKillOnCompleted = UFunction::FindFunction("Function Engine.ParticleSystemComponent.SetKillOnCompleted");
	}

	UParticleSystemComponent_execSetKillOnCompleted_Params SetKillOnCompleted_Params;
	memset(&SetKillOnCompleted_Params, 0, sizeof(SetKillOnCompleted_Params));
	memcpy_s(&SetKillOnCompleted_Params.EmitterIndex, sizeof(SetKillOnCompleted_Params.EmitterIndex), &EmitterIndex, sizeof(EmitterIndex));
	SetKillOnCompleted_Params.bKill = bKill;

	uFnSetKillOnCompleted->iNative = 0;
	uFnSetKillOnCompleted->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetKillOnCompleted, &SetKillOnCompleted_Params, nullptr);
	uFnSetKillOnCompleted->FunctionFlags |= 0x400;
	uFnSetKillOnCompleted->iNative = 25688;
};

// Function Engine.ParticleSystemComponent.SetKillOnDeactivate
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25689])
// Parameter Info:
// int32_t                        EmitterIndex                   (CPF_Parm)
// uint32_t                       bKill                          (CPF_Parm)

void UParticleSystemComponent::SetKillOnDeactivate(int32_t EmitterIndex, bool bKill)
{
	static UFunction* uFnSetKillOnDeactivate = nullptr;

	if (!uFnSetKillOnDeactivate)
	{
		uFnSetKillOnDeactivate = UFunction::FindFunction("Function Engine.ParticleSystemComponent.SetKillOnDeactivate");
	}

	UParticleSystemComponent_execSetKillOnDeactivate_Params SetKillOnDeactivate_Params;
	memset(&SetKillOnDeactivate_Params, 0, sizeof(SetKillOnDeactivate_Params));
	memcpy_s(&SetKillOnDeactivate_Params.EmitterIndex, sizeof(SetKillOnDeactivate_Params.EmitterIndex), &EmitterIndex, sizeof(EmitterIndex));
	SetKillOnDeactivate_Params.bKill = bKill;

	uFnSetKillOnDeactivate->iNative = 0;
	uFnSetKillOnDeactivate->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetKillOnDeactivate, &SetKillOnDeactivate_Params, nullptr);
	uFnSetKillOnDeactivate->FunctionFlags |= 0x400;
	uFnSetKillOnDeactivate->iNative = 25689;
};

// Function Engine.ParticleSystemComponent.GetSkipUpdateDynamicDataDuringTick
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20753])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UParticleSystemComponent::GetSkipUpdateDynamicDataDuringTick()
{
	static UFunction* uFnGetSkipUpdateDynamicDataDuringTick = nullptr;

	if (!uFnGetSkipUpdateDynamicDataDuringTick)
	{
		uFnGetSkipUpdateDynamicDataDuringTick = UFunction::FindFunction("Function Engine.ParticleSystemComponent.GetSkipUpdateDynamicDataDuringTick");
	}

	UParticleSystemComponent_execGetSkipUpdateDynamicDataDuringTick_Params GetSkipUpdateDynamicDataDuringTick_Params;
	memset(&GetSkipUpdateDynamicDataDuringTick_Params, 0, sizeof(GetSkipUpdateDynamicDataDuringTick_Params));

	uFnGetSkipUpdateDynamicDataDuringTick->iNative = 0;
	uFnGetSkipUpdateDynamicDataDuringTick->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetSkipUpdateDynamicDataDuringTick, &GetSkipUpdateDynamicDataDuringTick_Params, nullptr);
	uFnGetSkipUpdateDynamicDataDuringTick->FunctionFlags |= 0x400;
	uFnGetSkipUpdateDynamicDataDuringTick->iNative = 20753;

	return GetSkipUpdateDynamicDataDuringTick_Params.ReturnValue;
};

// Function Engine.ParticleSystemComponent.SetSkipUpdateDynamicDataDuringTick
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25795])
// Parameter Info:
// uint32_t                       bInSkipUpdateDynamicDataDuringTick (CPF_Parm)

void UParticleSystemComponent::SetSkipUpdateDynamicDataDuringTick(bool bInSkipUpdateDynamicDataDuringTick)
{
	static UFunction* uFnSetSkipUpdateDynamicDataDuringTick = nullptr;

	if (!uFnSetSkipUpdateDynamicDataDuringTick)
	{
		uFnSetSkipUpdateDynamicDataDuringTick = UFunction::FindFunction("Function Engine.ParticleSystemComponent.SetSkipUpdateDynamicDataDuringTick");
	}

	UParticleSystemComponent_execSetSkipUpdateDynamicDataDuringTick_Params SetSkipUpdateDynamicDataDuringTick_Params;
	memset(&SetSkipUpdateDynamicDataDuringTick_Params, 0, sizeof(SetSkipUpdateDynamicDataDuringTick_Params));
	SetSkipUpdateDynamicDataDuringTick_Params.bInSkipUpdateDynamicDataDuringTick = bInSkipUpdateDynamicDataDuringTick;

	uFnSetSkipUpdateDynamicDataDuringTick->iNative = 0;
	uFnSetSkipUpdateDynamicDataDuringTick->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetSkipUpdateDynamicDataDuringTick, &SetSkipUpdateDynamicDataDuringTick_Params, nullptr);
	uFnSetSkipUpdateDynamicDataDuringTick->FunctionFlags |= 0x400;
	uFnSetSkipUpdateDynamicDataDuringTick->iNative = 25795;
};

// Function Engine.ParticleSystemComponent.KillParticlesInEmitter
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[21510])
// Parameter Info:
// class FName                    InEmitterName                  (CPF_Parm)

void UParticleSystemComponent::KillParticlesInEmitter(const class FName& InEmitterName)
{
	static UFunction* uFnKillParticlesInEmitter = nullptr;

	if (!uFnKillParticlesInEmitter)
	{
		uFnKillParticlesInEmitter = UFunction::FindFunction("Function Engine.ParticleSystemComponent.KillParticlesInEmitter");
	}

	UParticleSystemComponent_execKillParticlesInEmitter_Params KillParticlesInEmitter_Params;
	memset(&KillParticlesInEmitter_Params, 0, sizeof(KillParticlesInEmitter_Params));
	memcpy_s(&KillParticlesInEmitter_Params.InEmitterName, sizeof(KillParticlesInEmitter_Params.InEmitterName), &InEmitterName, sizeof(InEmitterName));

	uFnKillParticlesInEmitter->iNative = 0;
	uFnKillParticlesInEmitter->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnKillParticlesInEmitter, &KillParticlesInEmitter_Params, nullptr);
	uFnKillParticlesInEmitter->FunctionFlags |= 0x400;
	uFnKillParticlesInEmitter->iNative = 21510;
};

// Function Engine.ParticleSystemComponent.KillParticlesForced
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[21509])
// Parameter Info:

void UParticleSystemComponent::KillParticlesForced()
{
	static UFunction* uFnKillParticlesForced = nullptr;

	if (!uFnKillParticlesForced)
	{
		uFnKillParticlesForced = UFunction::FindFunction("Function Engine.ParticleSystemComponent.KillParticlesForced");
	}

	UParticleSystemComponent_execKillParticlesForced_Params KillParticlesForced_Params;
	memset(&KillParticlesForced_Params, 0, sizeof(KillParticlesForced_Params));

	uFnKillParticlesForced->iNative = 0;
	uFnKillParticlesForced->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnKillParticlesForced, &KillParticlesForced_Params, nullptr);
	uFnKillParticlesForced->FunctionFlags |= 0x400;
	uFnKillParticlesForced->iNative = 21509;
};

// Function Engine.ParticleSystemComponent.DeactivateSystem
// [0x04020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_K2Call | FUNC_AllFlags) (iNative[18616])
// Parameter Info:

void UParticleSystemComponent::DeactivateSystem()
{
	static UFunction* uFnDeactivateSystem = nullptr;

	if (!uFnDeactivateSystem)
	{
		uFnDeactivateSystem = UFunction::FindFunction("Function Engine.ParticleSystemComponent.DeactivateSystem");
	}

	UParticleSystemComponent_execDeactivateSystem_Params DeactivateSystem_Params;
	memset(&DeactivateSystem_Params, 0, sizeof(DeactivateSystem_Params));

	uFnDeactivateSystem->iNative = 0;
	uFnDeactivateSystem->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnDeactivateSystem, &DeactivateSystem_Params, nullptr);
	uFnDeactivateSystem->FunctionFlags |= 0x400;
	uFnDeactivateSystem->iNative = 18616;
};

// Function Engine.ParticleSystemComponent.ActivateSystem
// [0x04024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_K2Call | FUNC_AllFlags) (iNative[15070])
// Parameter Info:
// uint32_t                       bFlagAsJustAttached            (CPF_OptionalParm | CPF_Parm)

void UParticleSystemComponent::ActivateSystem(bool bFlagAsJustAttached)
{
	static UFunction* uFnActivateSystem = nullptr;

	if (!uFnActivateSystem)
	{
		uFnActivateSystem = UFunction::FindFunction("Function Engine.ParticleSystemComponent.ActivateSystem");
	}

	UParticleSystemComponent_execActivateSystem_Params ActivateSystem_Params;
	memset(&ActivateSystem_Params, 0, sizeof(ActivateSystem_Params));
	ActivateSystem_Params.bFlagAsJustAttached = bFlagAsJustAttached;

	uFnActivateSystem->iNative = 0;
	uFnActivateSystem->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnActivateSystem, &ActivateSystem_Params, nullptr);
	uFnActivateSystem->FunctionFlags |= 0x400;
	uFnActivateSystem->iNative = 15070;
};

// Function Engine.ParticleSystemComponent.SetTemplate
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13745])
// Parameter Info:
// class UParticleSystem*         NewTemplate                    (CPF_Parm)

void UParticleSystemComponent::SetTemplate(class UParticleSystem* NewTemplate)
{
	static UFunction* uFnSetTemplate = nullptr;

	if (!uFnSetTemplate)
	{
		uFnSetTemplate = UFunction::FindFunction("Function Engine.ParticleSystemComponent.SetTemplate");
	}

	UParticleSystemComponent_execSetTemplate_Params SetTemplate_Params;
	memset(&SetTemplate_Params, 0, sizeof(SetTemplate_Params));
	SetTemplate_Params.NewTemplate = NewTemplate;

	uFnSetTemplate->iNative = 0;
	uFnSetTemplate->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetTemplate, &SetTemplate_Params, nullptr);
	uFnSetTemplate->FunctionFlags |= 0x400;
	uFnSetTemplate->iNative = 13745;
};

// Function Engine.ParticleSystemComponent.OnSystemFinished
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// class UParticleSystemComponent* PSystem                        (CPF_Parm | CPF_EditInline)

void UParticleSystemComponent::OnSystemFinished(class UParticleSystemComponent* PSystem)
{
	static UFunction* uFnOnSystemFinished = nullptr;

	if (!uFnOnSystemFinished)
	{
		uFnOnSystemFinished = UFunction::FindFunction("Function Engine.ParticleSystemComponent.OnSystemFinished");
	}

	UParticleSystemComponent_execOnSystemFinished_Params OnSystemFinished_Params;
	memset(&OnSystemFinished_Params, 0, sizeof(OnSystemFinished_Params));
	OnSystemFinished_Params.PSystem = PSystem;

	this->ProcessEvent(uFnOnSystemFinished, &OnSystemFinished_Params, nullptr);
};

// Function Engine.ParticleModuleEventSendToGame.DoEvent
// [0x00420000] (FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// struct FVector                 InCollideDirection             (CPF_Const | CPF_Parm | CPF_OutParm)
// struct FVector                 InHitLocation                  (CPF_Const | CPF_Parm | CPF_OutParm)
// struct FVector                 InHitNormal                    (CPF_Const | CPF_Parm | CPF_OutParm)
// class FName                    InBoneName                     (CPF_Const | CPF_Parm | CPF_OutParm)

void UParticleModuleEventSendToGame::DoEvent(struct FVector& InCollideDirection, struct FVector& InHitLocation, struct FVector& InHitNormal, class FName& InBoneName)
{
	static UFunction* uFnDoEvent = nullptr;

	if (!uFnDoEvent)
	{
		uFnDoEvent = UFunction::FindFunction("Function Engine.ParticleModuleEventSendToGame.DoEvent");
	}

	UParticleModuleEventSendToGame_execDoEvent_Params DoEvent_Params;
	memset(&DoEvent_Params, 0, sizeof(DoEvent_Params));
	memcpy_s(&DoEvent_Params.InCollideDirection, sizeof(DoEvent_Params.InCollideDirection), &InCollideDirection, sizeof(InCollideDirection));
	memcpy_s(&DoEvent_Params.InHitLocation, sizeof(DoEvent_Params.InHitLocation), &InHitLocation, sizeof(InHitLocation));
	memcpy_s(&DoEvent_Params.InHitNormal, sizeof(DoEvent_Params.InHitNormal), &InHitNormal, sizeof(InHitNormal));
	memcpy_s(&DoEvent_Params.InBoneName, sizeof(DoEvent_Params.InBoneName), &InBoneName, sizeof(InBoneName));

	this->ProcessEvent(uFnDoEvent, &DoEvent_Params, nullptr);

	memcpy_s(&InCollideDirection, sizeof(InCollideDirection), &DoEvent_Params.InCollideDirection, sizeof(DoEvent_Params.InCollideDirection));
	memcpy_s(&InHitLocation, sizeof(InHitLocation), &DoEvent_Params.InHitLocation, sizeof(DoEvent_Params.InHitLocation));
	memcpy_s(&InHitNormal, sizeof(InHitNormal), &DoEvent_Params.InHitNormal, sizeof(DoEvent_Params.InHitNormal));
	memcpy_s(&InBoneName, sizeof(InBoneName), &DoEvent_Params.InBoneName, sizeof(DoEvent_Params.InBoneName));
};

// Function Engine.ParticleSystem.SetLODDistance
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25704])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        LODLevelIndex                  (CPF_Parm)
// float                          InDistance                     (CPF_Parm)

bool UParticleSystem::SetLODDistance(int32_t LODLevelIndex, float InDistance)
{
	static UFunction* uFnSetLODDistance = nullptr;

	if (!uFnSetLODDistance)
	{
		uFnSetLODDistance = UFunction::FindFunction("Function Engine.ParticleSystem.SetLODDistance");
	}

	UParticleSystem_execSetLODDistance_Params SetLODDistance_Params;
	memset(&SetLODDistance_Params, 0, sizeof(SetLODDistance_Params));
	memcpy_s(&SetLODDistance_Params.LODLevelIndex, sizeof(SetLODDistance_Params.LODLevelIndex), &LODLevelIndex, sizeof(LODLevelIndex));
	memcpy_s(&SetLODDistance_Params.InDistance, sizeof(SetLODDistance_Params.InDistance), &InDistance, sizeof(InDistance));

	uFnSetLODDistance->iNative = 0;
	uFnSetLODDistance->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetLODDistance, &SetLODDistance_Params, nullptr);
	uFnSetLODDistance->FunctionFlags |= 0x400;
	uFnSetLODDistance->iNative = 25704;

	return SetLODDistance_Params.ReturnValue;
};

// Function Engine.ParticleSystem.SetCurrentLODMethod
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25626])
// Parameter Info:
// EParticleSystemLODMethod       InMethod                       (CPF_Parm)

void UParticleSystem::SetCurrentLODMethod(EParticleSystemLODMethod InMethod)
{
	static UFunction* uFnSetCurrentLODMethod = nullptr;

	if (!uFnSetCurrentLODMethod)
	{
		uFnSetCurrentLODMethod = UFunction::FindFunction("Function Engine.ParticleSystem.SetCurrentLODMethod");
	}

	UParticleSystem_execSetCurrentLODMethod_Params SetCurrentLODMethod_Params;
	memset(&SetCurrentLODMethod_Params, 0, sizeof(SetCurrentLODMethod_Params));
	memcpy_s(&SetCurrentLODMethod_Params.InMethod, sizeof(SetCurrentLODMethod_Params.InMethod), &InMethod, sizeof(InMethod));

	uFnSetCurrentLODMethod->iNative = 0;
	uFnSetCurrentLODMethod->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetCurrentLODMethod, &SetCurrentLODMethod_Params, nullptr);
	uFnSetCurrentLODMethod->FunctionFlags |= 0x400;
	uFnSetCurrentLODMethod->iNative = 25626;
};

// Function Engine.ParticleSystem.GetLODDistance
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20627])
// Parameter Info:
// float                          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        LODLevelIndex                  (CPF_Parm)

float UParticleSystem::GetLODDistance(int32_t LODLevelIndex)
{
	static UFunction* uFnGetLODDistance = nullptr;

	if (!uFnGetLODDistance)
	{
		uFnGetLODDistance = UFunction::FindFunction("Function Engine.ParticleSystem.GetLODDistance");
	}

	UParticleSystem_execGetLODDistance_Params GetLODDistance_Params;
	memset(&GetLODDistance_Params, 0, sizeof(GetLODDistance_Params));
	memcpy_s(&GetLODDistance_Params.LODLevelIndex, sizeof(GetLODDistance_Params.LODLevelIndex), &LODLevelIndex, sizeof(LODLevelIndex));

	uFnGetLODDistance->iNative = 0;
	uFnGetLODDistance->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetLODDistance, &GetLODDistance_Params, nullptr);
	uFnGetLODDistance->FunctionFlags |= 0x400;
	uFnGetLODDistance->iNative = 20627;

	return GetLODDistance_Params.ReturnValue;
};

// Function Engine.ParticleSystem.GetLODLevelCount
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20629])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t UParticleSystem::GetLODLevelCount()
{
	static UFunction* uFnGetLODLevelCount = nullptr;

	if (!uFnGetLODLevelCount)
	{
		uFnGetLODLevelCount = UFunction::FindFunction("Function Engine.ParticleSystem.GetLODLevelCount");
	}

	UParticleSystem_execGetLODLevelCount_Params GetLODLevelCount_Params;
	memset(&GetLODLevelCount_Params, 0, sizeof(GetLODLevelCount_Params));

	uFnGetLODLevelCount->iNative = 0;
	uFnGetLODLevelCount->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetLODLevelCount, &GetLODLevelCount_Params, nullptr);
	uFnGetLODLevelCount->FunctionFlags |= 0x400;
	uFnGetLODLevelCount->iNative = 20629;

	return GetLODLevelCount_Params.ReturnValue;
};

// Function Engine.ParticleSystem.GetCurrentLODMethod
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20546])
// Parameter Info:
// EParticleSystemLODMethod       ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

EParticleSystemLODMethod UParticleSystem::GetCurrentLODMethod()
{
	static UFunction* uFnGetCurrentLODMethod = nullptr;

	if (!uFnGetCurrentLODMethod)
	{
		uFnGetCurrentLODMethod = UFunction::FindFunction("Function Engine.ParticleSystem.GetCurrentLODMethod");
	}

	UParticleSystem_execGetCurrentLODMethod_Params GetCurrentLODMethod_Params;
	memset(&GetCurrentLODMethod_Params, 0, sizeof(GetCurrentLODMethod_Params));

	uFnGetCurrentLODMethod->iNative = 0;
	uFnGetCurrentLODMethod->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetCurrentLODMethod, &GetCurrentLODMethod_Params, nullptr);
	uFnGetCurrentLODMethod->FunctionFlags |= 0x400;
	uFnGetCurrentLODMethod->iNative = 20546;

	return static_cast<EParticleSystemLODMethod>(GetCurrentLODMethod_Params.ReturnValue);
};

// Function Engine.KActor.Reset
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AKActor::Reset()
{
	static UFunction* uFnReset = nullptr;

	if (!uFnReset)
	{
		uFnReset = UFunction::FindFunction("Function Engine.KActor.Reset");
	}

	AKActor_execReset_Params Reset_Params;
	memset(&Reset_Params, 0, sizeof(Reset_Params));

	this->ProcessEvent(uFnReset, &Reset_Params, nullptr);
};

// Function Engine.KActor.OnTeleport
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_Teleport*        inAction                       (CPF_Parm)

void AKActor::OnTeleport(class USeqAct_Teleport* inAction)
{
	static UFunction* uFnOnTeleport = nullptr;

	if (!uFnOnTeleport)
	{
		uFnOnTeleport = UFunction::FindFunction("Function Engine.KActor.OnTeleport");
	}

	AKActor_execOnTeleport_Params OnTeleport_Params;
	memset(&OnTeleport_Params, 0, sizeof(OnTeleport_Params));
	OnTeleport_Params.inAction = inAction;

	this->ProcessEvent(uFnOnTeleport, &OnTeleport_Params, nullptr);
};

// Function Engine.KActor.OnToggle
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_Toggle*          Action                         (CPF_Parm)

void AKActor::OnToggle(class USeqAct_Toggle* Action)
{
	static UFunction* uFnOnToggle = nullptr;

	if (!uFnOnToggle)
	{
		uFnOnToggle = UFunction::FindFunction("Function Engine.KActor.OnToggle");
	}

	AKActor_execOnToggle_Params OnToggle_Params;
	memset(&OnToggle_Params, 0, sizeof(OnToggle_Params));
	OnToggle_Params.Action = Action;

	this->ProcessEvent(uFnOnToggle, &OnToggle_Params, nullptr);
};

// Function Engine.KActor.TakeRadiusDamage
// [0x00024102] (FUNC_Defined | FUNC_Simulated | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AController*             InstigatedBy                   (CPF_Parm)
// float                          BaseDamage                     (CPF_Parm)
// float                          DamageRadius                   (CPF_Parm)
// class UDamageType*             DamageType                     (CPF_Parm)
// float                          Momentum                       (CPF_Parm)
// struct FVector                 HurtOrigin                     (CPF_Parm)
// uint32_t                       bFullDamage                    (CPF_Parm)
// class AActor*                  DamageCauser                   (CPF_Parm)
// float                          DamageFalloffExponent          (CPF_OptionalParm | CPF_Parm)

void AKActor::TakeRadiusDamage(class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UDamageType* DamageType, float Momentum, const struct FVector& HurtOrigin, bool bFullDamage, class AActor* DamageCauser, float DamageFalloffExponent)
{
	static UFunction* uFnTakeRadiusDamage = nullptr;

	if (!uFnTakeRadiusDamage)
	{
		uFnTakeRadiusDamage = UFunction::FindFunction("Function Engine.KActor.TakeRadiusDamage");
	}

	AKActor_execTakeRadiusDamage_Params TakeRadiusDamage_Params;
	memset(&TakeRadiusDamage_Params, 0, sizeof(TakeRadiusDamage_Params));
	TakeRadiusDamage_Params.InstigatedBy = InstigatedBy;
	memcpy_s(&TakeRadiusDamage_Params.BaseDamage, sizeof(TakeRadiusDamage_Params.BaseDamage), &BaseDamage, sizeof(BaseDamage));
	memcpy_s(&TakeRadiusDamage_Params.DamageRadius, sizeof(TakeRadiusDamage_Params.DamageRadius), &DamageRadius, sizeof(DamageRadius));
	TakeRadiusDamage_Params.DamageType = DamageType;
	memcpy_s(&TakeRadiusDamage_Params.Momentum, sizeof(TakeRadiusDamage_Params.Momentum), &Momentum, sizeof(Momentum));
	memcpy_s(&TakeRadiusDamage_Params.HurtOrigin, sizeof(TakeRadiusDamage_Params.HurtOrigin), &HurtOrigin, sizeof(HurtOrigin));
	TakeRadiusDamage_Params.bFullDamage = bFullDamage;
	TakeRadiusDamage_Params.DamageCauser = DamageCauser;
	memcpy_s(&TakeRadiusDamage_Params.DamageFalloffExponent, sizeof(TakeRadiusDamage_Params.DamageFalloffExponent), &DamageFalloffExponent, sizeof(DamageFalloffExponent));

	this->ProcessEvent(uFnTakeRadiusDamage, &TakeRadiusDamage_Params, nullptr);
};

// Function Engine.KActor.TakeDamage
// [0x00024C00] (FUNC_Native | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[13766])
// Parameter Info:
// int32_t                        Damage                         (CPF_Parm)
// class AController*             EventInstigator                (CPF_Parm)
// struct FVector                 HitLocation                    (CPF_Parm)
// struct FVector                 Momentum                       (CPF_Parm)
// class UDamageType*             DamageType                     (CPF_Parm)
// struct FTraceHitInfo           HitInfo                        (CPF_OptionalParm | CPF_Parm)
// class AActor*                  DamageCauser                   (CPF_OptionalParm | CPF_Parm)

void AKActor::eventTakeDamage(int32_t Damage, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UDamageType* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser)
{
	static UFunction* uFnTakeDamage = nullptr;

	if (!uFnTakeDamage)
	{
		uFnTakeDamage = UFunction::FindFunction("Function Engine.KActor.TakeDamage");
	}

	AKActor_eventTakeDamage_Params TakeDamage_Params;
	memset(&TakeDamage_Params, 0, sizeof(TakeDamage_Params));
	memcpy_s(&TakeDamage_Params.Damage, sizeof(TakeDamage_Params.Damage), &Damage, sizeof(Damage));
	TakeDamage_Params.EventInstigator = EventInstigator;
	memcpy_s(&TakeDamage_Params.HitLocation, sizeof(TakeDamage_Params.HitLocation), &HitLocation, sizeof(HitLocation));
	memcpy_s(&TakeDamage_Params.Momentum, sizeof(TakeDamage_Params.Momentum), &Momentum, sizeof(Momentum));
	TakeDamage_Params.DamageType = DamageType;
	memcpy_s(&TakeDamage_Params.HitInfo, sizeof(TakeDamage_Params.HitInfo), &HitInfo, sizeof(HitInfo));
	TakeDamage_Params.DamageCauser = DamageCauser;

	uFnTakeDamage->iNative = 0;
	uFnTakeDamage->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnTakeDamage, &TakeDamage_Params, nullptr);
	uFnTakeDamage->FunctionFlags |= 0x400;
	uFnTakeDamage->iNative = 13766;
};

// Function Engine.KActor.ApplyImpulse
// [0x00024C00] (FUNC_Native | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[13469])
// Parameter Info:
// struct FVector                 ImpulseDir                     (CPF_Parm)
// float                          ImpulseMag                     (CPF_Parm)
// struct FVector                 HitLocation                    (CPF_Parm)
// struct FTraceHitInfo           HitInfo                        (CPF_OptionalParm | CPF_Parm)
// class UDamageType*             DamageType                     (CPF_OptionalParm | CPF_Parm)

void AKActor::eventApplyImpulse(const struct FVector& ImpulseDir, float ImpulseMag, const struct FVector& HitLocation, const struct FTraceHitInfo& HitInfo, class UDamageType* DamageType)
{
	static UFunction* uFnApplyImpulse = nullptr;

	if (!uFnApplyImpulse)
	{
		uFnApplyImpulse = UFunction::FindFunction("Function Engine.KActor.ApplyImpulse");
	}

	AKActor_eventApplyImpulse_Params ApplyImpulse_Params;
	memset(&ApplyImpulse_Params, 0, sizeof(ApplyImpulse_Params));
	memcpy_s(&ApplyImpulse_Params.ImpulseDir, sizeof(ApplyImpulse_Params.ImpulseDir), &ImpulseDir, sizeof(ImpulseDir));
	memcpy_s(&ApplyImpulse_Params.ImpulseMag, sizeof(ApplyImpulse_Params.ImpulseMag), &ImpulseMag, sizeof(ImpulseMag));
	memcpy_s(&ApplyImpulse_Params.HitLocation, sizeof(ApplyImpulse_Params.HitLocation), &HitLocation, sizeof(HitLocation));
	memcpy_s(&ApplyImpulse_Params.HitInfo, sizeof(ApplyImpulse_Params.HitInfo), &HitInfo, sizeof(HitInfo));
	ApplyImpulse_Params.DamageType = DamageType;

	uFnApplyImpulse->iNative = 0;
	uFnApplyImpulse->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnApplyImpulse, &ApplyImpulse_Params, nullptr);
	uFnApplyImpulse->FunctionFlags |= 0x400;
	uFnApplyImpulse->iNative = 13469;
};

// Function Engine.KActor.ReplicatedEvent
// [0x00820902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// class FName                    VarName                        (CPF_Parm)

void AKActor::eventReplicatedEvent(const class FName& VarName)
{
	static UFunction* uFnReplicatedEvent = nullptr;

	if (!uFnReplicatedEvent)
	{
		uFnReplicatedEvent = UFunction::FindFunction("Function Engine.KActor.ReplicatedEvent");
	}

	AKActor_eventReplicatedEvent_Params ReplicatedEvent_Params;
	memset(&ReplicatedEvent_Params, 0, sizeof(ReplicatedEvent_Params));
	memcpy_s(&ReplicatedEvent_Params.VarName, sizeof(ReplicatedEvent_Params.VarName), &VarName, sizeof(VarName));

	this->ProcessEvent(uFnReplicatedEvent, &ReplicatedEvent_Params, nullptr);
};

// Function Engine.KActor.SpawnedByKismet
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AKActor::eventSpawnedByKismet()
{
	static UFunction* uFnSpawnedByKismet = nullptr;

	if (!uFnSpawnedByKismet)
	{
		uFnSpawnedByKismet = UFunction::FindFunction("Function Engine.KActor.SpawnedByKismet");
	}

	AKActor_eventSpawnedByKismet_Params SpawnedByKismet_Params;
	memset(&SpawnedByKismet_Params, 0, sizeof(SpawnedByKismet_Params));

	this->ProcessEvent(uFnSpawnedByKismet, &SpawnedByKismet_Params, nullptr);
};

// Function Engine.KActor.SetPhysicalCollisionProperties
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AKActor::SetPhysicalCollisionProperties()
{
	static UFunction* uFnSetPhysicalCollisionProperties = nullptr;

	if (!uFnSetPhysicalCollisionProperties)
	{
		uFnSetPhysicalCollisionProperties = UFunction::FindFunction("Function Engine.KActor.SetPhysicalCollisionProperties");
	}

	AKActor_execSetPhysicalCollisionProperties_Params SetPhysicalCollisionProperties_Params;
	memset(&SetPhysicalCollisionProperties_Params, 0, sizeof(SetPhysicalCollisionProperties_Params));

	this->ProcessEvent(uFnSetPhysicalCollisionProperties, &SetPhysicalCollisionProperties_Params, nullptr);
};

// Function Engine.KActor.Destroyed
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AKActor::eventDestroyed()
{
	static UFunction* uFnDestroyed = nullptr;

	if (!uFnDestroyed)
	{
		uFnDestroyed = UFunction::FindFunction("Function Engine.KActor.Destroyed");
	}

	AKActor_eventDestroyed_Params Destroyed_Params;
	memset(&Destroyed_Params, 0, sizeof(Destroyed_Params));

	this->ProcessEvent(uFnDestroyed, &Destroyed_Params, nullptr);
};

// Function Engine.KActor.FellOutOfWorld
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UDamageType*             dmgType                        (CPF_Parm)

void AKActor::eventFellOutOfWorld(class UDamageType* dmgType)
{
	static UFunction* uFnFellOutOfWorld = nullptr;

	if (!uFnFellOutOfWorld)
	{
		uFnFellOutOfWorld = UFunction::FindFunction("Function Engine.KActor.FellOutOfWorld");
	}

	AKActor_eventFellOutOfWorld_Params FellOutOfWorld_Params;
	memset(&FellOutOfWorld_Params, 0, sizeof(FellOutOfWorld_Params));
	FellOutOfWorld_Params.dmgType = dmgType;

	this->ProcessEvent(uFnFellOutOfWorld, &FellOutOfWorld_Params, nullptr);
};

// Function Engine.KActor.PostBeginPlay
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AKActor::eventPostBeginPlay()
{
	static UFunction* uFnPostBeginPlay = nullptr;

	if (!uFnPostBeginPlay)
	{
		uFnPostBeginPlay = UFunction::FindFunction("Function Engine.KActor.PostBeginPlay");
	}

	AKActor_eventPostBeginPlay_Params PostBeginPlay_Params;
	memset(&PostBeginPlay_Params, 0, sizeof(PostBeginPlay_Params));

	this->ProcessEvent(uFnPostBeginPlay, &PostBeginPlay_Params, nullptr);
};

// Function Engine.KActor.ResolveRBState
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25165])
// Parameter Info:

void AKActor::ResolveRBState()
{
	static UFunction* uFnResolveRBState = nullptr;

	if (!uFnResolveRBState)
	{
		uFnResolveRBState = UFunction::FindFunction("Function Engine.KActor.ResolveRBState");
	}

	AKActor_execResolveRBState_Params ResolveRBState_Params;
	memset(&ResolveRBState_Params, 0, sizeof(ResolveRBState_Params));

	uFnResolveRBState->iNative = 0;
	uFnResolveRBState->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnResolveRBState, &ResolveRBState_Params, nullptr);
	uFnResolveRBState->FunctionFlags |= 0x400;
	uFnResolveRBState->iNative = 25165;
};

// Function Engine.KActor.GetKActorPhysMaterial
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20614])
// Parameter Info:
// class UPhysicalMaterial*       ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class UPhysicalMaterial* AKActor::GetKActorPhysMaterial()
{
	static UFunction* uFnGetKActorPhysMaterial = nullptr;

	if (!uFnGetKActorPhysMaterial)
	{
		uFnGetKActorPhysMaterial = UFunction::FindFunction("Function Engine.KActor.GetKActorPhysMaterial");
	}

	AKActor_execGetKActorPhysMaterial_Params GetKActorPhysMaterial_Params;
	memset(&GetKActorPhysMaterial_Params, 0, sizeof(GetKActorPhysMaterial_Params));

	uFnGetKActorPhysMaterial->iNative = 0;
	uFnGetKActorPhysMaterial->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetKActorPhysMaterial, &GetKActorPhysMaterial_Params, nullptr);
	uFnGetKActorPhysMaterial->FunctionFlags |= 0x400;
	uFnGetKActorPhysMaterial->iNative = 20614;

	return GetKActorPhysMaterial_Params.ReturnValue;
};

// Function Engine.KActorFromStatic.TakeRadiusDamage
// [0x00024102] (FUNC_Defined | FUNC_Simulated | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AController*             InstigatedBy                   (CPF_Parm)
// float                          BaseDamage                     (CPF_Parm)
// float                          DamageRadius                   (CPF_Parm)
// class UDamageType*             DamageType                     (CPF_Parm)
// float                          Momentum                       (CPF_Parm)
// struct FVector                 HurtOrigin                     (CPF_Parm)
// uint32_t                       bFullDamage                    (CPF_Parm)
// class AActor*                  DamageCauser                   (CPF_Parm)
// float                          DamageFalloffExponent          (CPF_OptionalParm | CPF_Parm)

void AKActorFromStatic::TakeRadiusDamage(class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UDamageType* DamageType, float Momentum, const struct FVector& HurtOrigin, bool bFullDamage, class AActor* DamageCauser, float DamageFalloffExponent)
{
	static UFunction* uFnTakeRadiusDamage = nullptr;

	if (!uFnTakeRadiusDamage)
	{
		uFnTakeRadiusDamage = UFunction::FindFunction("Function Engine.KActorFromStatic.TakeRadiusDamage");
	}

	AKActorFromStatic_execTakeRadiusDamage_Params TakeRadiusDamage_Params;
	memset(&TakeRadiusDamage_Params, 0, sizeof(TakeRadiusDamage_Params));
	TakeRadiusDamage_Params.InstigatedBy = InstigatedBy;
	memcpy_s(&TakeRadiusDamage_Params.BaseDamage, sizeof(TakeRadiusDamage_Params.BaseDamage), &BaseDamage, sizeof(BaseDamage));
	memcpy_s(&TakeRadiusDamage_Params.DamageRadius, sizeof(TakeRadiusDamage_Params.DamageRadius), &DamageRadius, sizeof(DamageRadius));
	TakeRadiusDamage_Params.DamageType = DamageType;
	memcpy_s(&TakeRadiusDamage_Params.Momentum, sizeof(TakeRadiusDamage_Params.Momentum), &Momentum, sizeof(Momentum));
	memcpy_s(&TakeRadiusDamage_Params.HurtOrigin, sizeof(TakeRadiusDamage_Params.HurtOrigin), &HurtOrigin, sizeof(HurtOrigin));
	TakeRadiusDamage_Params.bFullDamage = bFullDamage;
	TakeRadiusDamage_Params.DamageCauser = DamageCauser;
	memcpy_s(&TakeRadiusDamage_Params.DamageFalloffExponent, sizeof(TakeRadiusDamage_Params.DamageFalloffExponent), &DamageFalloffExponent, sizeof(DamageFalloffExponent));

	this->ProcessEvent(uFnTakeRadiusDamage, &TakeRadiusDamage_Params, nullptr);
};

// Function Engine.KActorFromStatic.Bump
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AActor*                  Other                          (CPF_Parm)
// class UPrimitiveComponent*     OtherComp                      (CPF_Parm | CPF_EditInline)
// struct FVector                 HitNormal                      (CPF_Parm)

void AKActorFromStatic::eventBump(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitNormal)
{
	static UFunction* uFnBump = nullptr;

	if (!uFnBump)
	{
		uFnBump = UFunction::FindFunction("Function Engine.KActorFromStatic.Bump");
	}

	AKActorFromStatic_eventBump_Params Bump_Params;
	memset(&Bump_Params, 0, sizeof(Bump_Params));
	Bump_Params.Other = Other;
	Bump_Params.OtherComp = OtherComp;
	memcpy_s(&Bump_Params.HitNormal, sizeof(Bump_Params.HitNormal), &HitNormal, sizeof(HitNormal));

	this->ProcessEvent(uFnBump, &Bump_Params, nullptr);
};

// Function Engine.KActorFromStatic.ReceiveImpulse
// [0x00820802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// class APawn*                   Other                          (CPF_Parm)
// struct FVector                 HitLocation                    (CPF_Parm)
// struct FVector                 HitNormal                      (CPF_Parm)

void AKActorFromStatic::eventReceiveImpulse(class APawn* Other, const struct FVector& HitLocation, const struct FVector& HitNormal)
{
	static UFunction* uFnReceiveImpulse = nullptr;

	if (!uFnReceiveImpulse)
	{
		uFnReceiveImpulse = UFunction::FindFunction("Function Engine.KActorFromStatic.ReceiveImpulse");
	}

	AKActorFromStatic_eventReceiveImpulse_Params ReceiveImpulse_Params;
	memset(&ReceiveImpulse_Params, 0, sizeof(ReceiveImpulse_Params));
	ReceiveImpulse_Params.Other = Other;
	memcpy_s(&ReceiveImpulse_Params.HitLocation, sizeof(ReceiveImpulse_Params.HitLocation), &HitLocation, sizeof(HitLocation));
	memcpy_s(&ReceiveImpulse_Params.HitNormal, sizeof(ReceiveImpulse_Params.HitNormal), &HitNormal, sizeof(HitNormal));

	this->ProcessEvent(uFnReceiveImpulse, &ReceiveImpulse_Params, nullptr);
};

// Function Engine.KActorFromStatic.ApplyImpulse
// [0x00024802] (FUNC_Defined | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FVector                 ImpulseDir                     (CPF_Parm)
// float                          ImpulseMag                     (CPF_Parm)
// struct FVector                 HitLocation                    (CPF_Parm)
// struct FTraceHitInfo           HitInfo                        (CPF_OptionalParm | CPF_Parm)
// class UDamageType*             DamageType                     (CPF_OptionalParm | CPF_Parm)

void AKActorFromStatic::eventApplyImpulse(const struct FVector& ImpulseDir, float ImpulseMag, const struct FVector& HitLocation, const struct FTraceHitInfo& HitInfo, class UDamageType* DamageType)
{
	static UFunction* uFnApplyImpulse = nullptr;

	if (!uFnApplyImpulse)
	{
		uFnApplyImpulse = UFunction::FindFunction("Function Engine.KActorFromStatic.ApplyImpulse");
	}

	AKActorFromStatic_eventApplyImpulse_Params ApplyImpulse_Params;
	memset(&ApplyImpulse_Params, 0, sizeof(ApplyImpulse_Params));
	memcpy_s(&ApplyImpulse_Params.ImpulseDir, sizeof(ApplyImpulse_Params.ImpulseDir), &ImpulseDir, sizeof(ImpulseDir));
	memcpy_s(&ApplyImpulse_Params.ImpulseMag, sizeof(ApplyImpulse_Params.ImpulseMag), &ImpulseMag, sizeof(ImpulseMag));
	memcpy_s(&ApplyImpulse_Params.HitLocation, sizeof(ApplyImpulse_Params.HitLocation), &HitLocation, sizeof(HitLocation));
	memcpy_s(&ApplyImpulse_Params.HitInfo, sizeof(ApplyImpulse_Params.HitInfo), &HitInfo, sizeof(HitInfo));
	ApplyImpulse_Params.DamageType = DamageType;

	this->ProcessEvent(uFnApplyImpulse, &ApplyImpulse_Params, nullptr);
};

// Function Engine.KActorFromStatic.MakeDynamic
// [0x00022400] (FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags) (iNative[22620])
// Parameter Info:
// class AKActorFromStatic*       ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UStaticMeshComponent*    MovableMesh                    (CPF_Parm | CPF_EditInline)

class AKActorFromStatic* AKActorFromStatic::MakeDynamic(class UStaticMeshComponent* MovableMesh)
{
	static UFunction* uFnMakeDynamic = nullptr;

	if (!uFnMakeDynamic)
	{
		uFnMakeDynamic = UFunction::FindFunction("Function Engine.KActorFromStatic.MakeDynamic");
	}

	AKActorFromStatic_execMakeDynamic_Params MakeDynamic_Params;
	memset(&MakeDynamic_Params, 0, sizeof(MakeDynamic_Params));
	MakeDynamic_Params.MovableMesh = MovableMesh;

	uFnMakeDynamic->iNative = 0;
	uFnMakeDynamic->FunctionFlags &= ~0x400;
	AKActorFromStatic::StaticClass()->ProcessEvent(uFnMakeDynamic, &MakeDynamic_Params, nullptr);
	uFnMakeDynamic->FunctionFlags |= 0x400;
	uFnMakeDynamic->iNative = 22620;

	return MakeDynamic_Params.ReturnValue;
};

// Function Engine.KActorFromStatic.MakeStatic
// [0x00022400] (FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags) (iNative[22622])
// Parameter Info:

void AKActorFromStatic::MakeStatic()
{
	static UFunction* uFnMakeStatic = nullptr;

	if (!uFnMakeStatic)
	{
		uFnMakeStatic = UFunction::FindFunction("Function Engine.KActorFromStatic.MakeStatic");
	}

	AKActorFromStatic_execMakeStatic_Params MakeStatic_Params;
	memset(&MakeStatic_Params, 0, sizeof(MakeStatic_Params));

	uFnMakeStatic->iNative = 0;
	uFnMakeStatic->FunctionFlags &= ~0x400;
	AKActorFromStatic::StaticClass()->ProcessEvent(uFnMakeStatic, &MakeStatic_Params, nullptr);
	uFnMakeStatic->FunctionFlags |= 0x400;
	uFnMakeStatic->iNative = 22622;
};

// Function Engine.KActorFromStatic.BecomeStatic
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AKActorFromStatic::BecomeStatic()
{
	static UFunction* uFnBecomeStatic = nullptr;

	if (!uFnBecomeStatic)
	{
		uFnBecomeStatic = UFunction::FindFunction("Function Engine.KActorFromStatic.BecomeStatic");
	}

	AKActorFromStatic_execBecomeStatic_Params BecomeStatic_Params;
	memset(&BecomeStatic_Params, 0, sizeof(BecomeStatic_Params));

	this->ProcessEvent(uFnBecomeStatic, &BecomeStatic_Params, nullptr);
};

// Function Engine.KActorFromStatic.OnWakeRBPhysics
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AKActorFromStatic::eventOnWakeRBPhysics()
{
	static UFunction* uFnOnWakeRBPhysics = nullptr;

	if (!uFnOnWakeRBPhysics)
	{
		uFnOnWakeRBPhysics = UFunction::FindFunction("Function Engine.KActorFromStatic.OnWakeRBPhysics");
	}

	AKActorFromStatic_eventOnWakeRBPhysics_Params OnWakeRBPhysics_Params;
	memset(&OnWakeRBPhysics_Params, 0, sizeof(OnWakeRBPhysics_Params));

	this->ProcessEvent(uFnOnWakeRBPhysics, &OnWakeRBPhysics_Params, nullptr);
};

// Function Engine.KActorFromStatic.OnSleepRBPhysics
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AKActorFromStatic::eventOnSleepRBPhysics()
{
	static UFunction* uFnOnSleepRBPhysics = nullptr;

	if (!uFnOnSleepRBPhysics)
	{
		uFnOnSleepRBPhysics = UFunction::FindFunction("Function Engine.KActorFromStatic.OnSleepRBPhysics");
	}

	AKActorFromStatic_eventOnSleepRBPhysics_Params OnSleepRBPhysics_Params;
	memset(&OnSleepRBPhysics_Params, 0, sizeof(OnSleepRBPhysics_Params));

	this->ProcessEvent(uFnOnSleepRBPhysics, &OnSleepRBPhysics_Params, nullptr);
};

// Function Engine.KActorFromStatic.DisablePrecomputedLighting
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[18950])
// Parameter Info:

void AKActorFromStatic::DisablePrecomputedLighting()
{
	static UFunction* uFnDisablePrecomputedLighting = nullptr;

	if (!uFnDisablePrecomputedLighting)
	{
		uFnDisablePrecomputedLighting = UFunction::FindFunction("Function Engine.KActorFromStatic.DisablePrecomputedLighting");
	}

	AKActorFromStatic_execDisablePrecomputedLighting_Params DisablePrecomputedLighting_Params;
	memset(&DisablePrecomputedLighting_Params, 0, sizeof(DisablePrecomputedLighting_Params));

	uFnDisablePrecomputedLighting->iNative = 0;
	uFnDisablePrecomputedLighting->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnDisablePrecomputedLighting, &DisablePrecomputedLighting_Params, nullptr);
	uFnDisablePrecomputedLighting->FunctionFlags |= 0x400;
	uFnDisablePrecomputedLighting->iNative = 18950;
};

// Function Engine.KActorSpawnable.ResetComponents
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25147])
// Parameter Info:

void AKActorSpawnable::ResetComponents()
{
	static UFunction* uFnResetComponents = nullptr;

	if (!uFnResetComponents)
	{
		uFnResetComponents = UFunction::FindFunction("Function Engine.KActorSpawnable.ResetComponents");
	}

	AKActorSpawnable_execResetComponents_Params ResetComponents_Params;
	memset(&ResetComponents_Params, 0, sizeof(ResetComponents_Params));

	uFnResetComponents->iNative = 0;
	uFnResetComponents->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnResetComponents, &ResetComponents_Params, nullptr);
	uFnResetComponents->FunctionFlags |= 0x400;
	uFnResetComponents->iNative = 25147;
};

// Function Engine.KActorSpawnable.RecycleInternal
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AKActorSpawnable::eventRecycleInternal()
{
	static UFunction* uFnRecycleInternal = nullptr;

	if (!uFnRecycleInternal)
	{
		uFnRecycleInternal = UFunction::FindFunction("Function Engine.KActorSpawnable.RecycleInternal");
	}

	AKActorSpawnable_eventRecycleInternal_Params RecycleInternal_Params;
	memset(&RecycleInternal_Params, 0, sizeof(RecycleInternal_Params));

	this->ProcessEvent(uFnRecycleInternal, &RecycleInternal_Params, nullptr);
};

// Function Engine.KActorSpawnable.Recycle
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AKActorSpawnable::Recycle()
{
	static UFunction* uFnRecycle = nullptr;

	if (!uFnRecycle)
	{
		uFnRecycle = UFunction::FindFunction("Function Engine.KActorSpawnable.Recycle");
	}

	AKActorSpawnable_execRecycle_Params Recycle_Params;
	memset(&Recycle_Params, 0, sizeof(Recycle_Params));

	this->ProcessEvent(uFnRecycle, &Recycle_Params, nullptr);
};

// Function Engine.KActorSpawnable.Initialize
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AKActorSpawnable::Initialize()
{
	static UFunction* uFnInitialize = nullptr;

	if (!uFnInitialize)
	{
		uFnInitialize = UFunction::FindFunction("Function Engine.KActorSpawnable.Initialize");
	}

	AKActorSpawnable_execInitialize_Params Initialize_Params;
	memset(&Initialize_Params, 0, sizeof(Initialize_Params));

	this->ProcessEvent(uFnInitialize, &Initialize_Params, nullptr);
};

// Function Engine.KAsset.OnTeleport
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_Teleport*        inAction                       (CPF_Parm)

void AKAsset::OnTeleport(class USeqAct_Teleport* inAction)
{
	static UFunction* uFnOnTeleport = nullptr;

	if (!uFnOnTeleport)
	{
		uFnOnTeleport = UFunction::FindFunction("Function Engine.KAsset.OnTeleport");
	}

	AKAsset_execOnTeleport_Params OnTeleport_Params;
	memset(&OnTeleport_Params, 0, sizeof(OnTeleport_Params));
	OnTeleport_Params.inAction = inAction;

	this->ProcessEvent(uFnOnTeleport, &OnTeleport_Params, nullptr);
};

// Function Engine.KAsset.OnToggle
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_Toggle*          Action                         (CPF_Parm)

void AKAsset::OnToggle(class USeqAct_Toggle* Action)
{
	static UFunction* uFnOnToggle = nullptr;

	if (!uFnOnToggle)
	{
		uFnOnToggle = UFunction::FindFunction("Function Engine.KAsset.OnToggle");
	}

	AKAsset_execOnToggle_Params OnToggle_Params;
	memset(&OnToggle_Params, 0, sizeof(OnToggle_Params));
	OnToggle_Params.Action = Action;

	this->ProcessEvent(uFnOnToggle, &OnToggle_Params, nullptr);
};

// Function Engine.KAsset.TakeRadiusDamage
// [0x00024102] (FUNC_Defined | FUNC_Simulated | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AController*             InstigatedBy                   (CPF_Parm)
// float                          BaseDamage                     (CPF_Parm)
// float                          DamageRadius                   (CPF_Parm)
// class UDamageType*             DamageType                     (CPF_Parm)
// float                          Momentum                       (CPF_Parm)
// struct FVector                 HurtOrigin                     (CPF_Parm)
// uint32_t                       bFullDamage                    (CPF_Parm)
// class AActor*                  DamageCauser                   (CPF_Parm)
// float                          DamageFalloffExponent          (CPF_OptionalParm | CPF_Parm)

void AKAsset::TakeRadiusDamage(class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UDamageType* DamageType, float Momentum, const struct FVector& HurtOrigin, bool bFullDamage, class AActor* DamageCauser, float DamageFalloffExponent)
{
	static UFunction* uFnTakeRadiusDamage = nullptr;

	if (!uFnTakeRadiusDamage)
	{
		uFnTakeRadiusDamage = UFunction::FindFunction("Function Engine.KAsset.TakeRadiusDamage");
	}

	AKAsset_execTakeRadiusDamage_Params TakeRadiusDamage_Params;
	memset(&TakeRadiusDamage_Params, 0, sizeof(TakeRadiusDamage_Params));
	TakeRadiusDamage_Params.InstigatedBy = InstigatedBy;
	memcpy_s(&TakeRadiusDamage_Params.BaseDamage, sizeof(TakeRadiusDamage_Params.BaseDamage), &BaseDamage, sizeof(BaseDamage));
	memcpy_s(&TakeRadiusDamage_Params.DamageRadius, sizeof(TakeRadiusDamage_Params.DamageRadius), &DamageRadius, sizeof(DamageRadius));
	TakeRadiusDamage_Params.DamageType = DamageType;
	memcpy_s(&TakeRadiusDamage_Params.Momentum, sizeof(TakeRadiusDamage_Params.Momentum), &Momentum, sizeof(Momentum));
	memcpy_s(&TakeRadiusDamage_Params.HurtOrigin, sizeof(TakeRadiusDamage_Params.HurtOrigin), &HurtOrigin, sizeof(HurtOrigin));
	TakeRadiusDamage_Params.bFullDamage = bFullDamage;
	TakeRadiusDamage_Params.DamageCauser = DamageCauser;
	memcpy_s(&TakeRadiusDamage_Params.DamageFalloffExponent, sizeof(TakeRadiusDamage_Params.DamageFalloffExponent), &DamageFalloffExponent, sizeof(DamageFalloffExponent));

	this->ProcessEvent(uFnTakeRadiusDamage, &TakeRadiusDamage_Params, nullptr);
};

// Function Engine.KAsset.TakeDamage
// [0x00024D00] (FUNC_Simulated | FUNC_Native | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[13766])
// Parameter Info:
// int32_t                        Damage                         (CPF_Parm)
// class AController*             EventInstigator                (CPF_Parm)
// struct FVector                 HitLocation                    (CPF_Parm)
// struct FVector                 Momentum                       (CPF_Parm)
// class UDamageType*             DamageType                     (CPF_Parm)
// struct FTraceHitInfo           HitInfo                        (CPF_OptionalParm | CPF_Parm)
// class AActor*                  DamageCauser                   (CPF_OptionalParm | CPF_Parm)

void AKAsset::eventTakeDamage(int32_t Damage, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UDamageType* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser)
{
	static UFunction* uFnTakeDamage = nullptr;

	if (!uFnTakeDamage)
	{
		uFnTakeDamage = UFunction::FindFunction("Function Engine.KAsset.TakeDamage");
	}

	AKAsset_eventTakeDamage_Params TakeDamage_Params;
	memset(&TakeDamage_Params, 0, sizeof(TakeDamage_Params));
	memcpy_s(&TakeDamage_Params.Damage, sizeof(TakeDamage_Params.Damage), &Damage, sizeof(Damage));
	TakeDamage_Params.EventInstigator = EventInstigator;
	memcpy_s(&TakeDamage_Params.HitLocation, sizeof(TakeDamage_Params.HitLocation), &HitLocation, sizeof(HitLocation));
	memcpy_s(&TakeDamage_Params.Momentum, sizeof(TakeDamage_Params.Momentum), &Momentum, sizeof(Momentum));
	TakeDamage_Params.DamageType = DamageType;
	memcpy_s(&TakeDamage_Params.HitInfo, sizeof(TakeDamage_Params.HitInfo), &HitInfo, sizeof(HitInfo));
	TakeDamage_Params.DamageCauser = DamageCauser;

	uFnTakeDamage->iNative = 0;
	uFnTakeDamage->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnTakeDamage, &TakeDamage_Params, nullptr);
	uFnTakeDamage->FunctionFlags |= 0x400;
	uFnTakeDamage->iNative = 13766;
};

// Function Engine.KAsset.ReplicatedEvent
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FName                    VarName                        (CPF_Parm)

void AKAsset::eventReplicatedEvent(const class FName& VarName)
{
	static UFunction* uFnReplicatedEvent = nullptr;

	if (!uFnReplicatedEvent)
	{
		uFnReplicatedEvent = UFunction::FindFunction("Function Engine.KAsset.ReplicatedEvent");
	}

	AKAsset_eventReplicatedEvent_Params ReplicatedEvent_Params;
	memset(&ReplicatedEvent_Params, 0, sizeof(ReplicatedEvent_Params));
	memcpy_s(&ReplicatedEvent_Params.VarName, sizeof(ReplicatedEvent_Params.VarName), &VarName, sizeof(VarName));

	this->ProcessEvent(uFnReplicatedEvent, &ReplicatedEvent_Params, nullptr);
};

// Function Engine.KAsset.SetMeshAndPhysAsset
// [0x00020003] (FUNC_Final | FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USkeletalMesh*           NewMesh                        (CPF_Parm)
// class UPhysicsAsset*           NewPhysAsset                   (CPF_Parm)

void AKAsset::SetMeshAndPhysAsset(class USkeletalMesh* NewMesh, class UPhysicsAsset* NewPhysAsset)
{
	static UFunction* uFnSetMeshAndPhysAsset = nullptr;

	if (!uFnSetMeshAndPhysAsset)
	{
		uFnSetMeshAndPhysAsset = UFunction::FindFunction("Function Engine.KAsset.SetMeshAndPhysAsset");
	}

	AKAsset_execSetMeshAndPhysAsset_Params SetMeshAndPhysAsset_Params;
	memset(&SetMeshAndPhysAsset_Params, 0, sizeof(SetMeshAndPhysAsset_Params));
	SetMeshAndPhysAsset_Params.NewMesh = NewMesh;
	SetMeshAndPhysAsset_Params.NewPhysAsset = NewPhysAsset;

	this->ProcessEvent(uFnSetMeshAndPhysAsset, &SetMeshAndPhysAsset_Params, nullptr);
};

// Function Engine.KAsset.PostBeginPlay
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AKAsset::eventPostBeginPlay()
{
	static UFunction* uFnPostBeginPlay = nullptr;

	if (!uFnPostBeginPlay)
	{
		uFnPostBeginPlay = UFunction::FindFunction("Function Engine.KAsset.PostBeginPlay");
	}

	AKAsset_eventPostBeginPlay_Params PostBeginPlay_Params;
	memset(&PostBeginPlay_Params, 0, sizeof(PostBeginPlay_Params));

	this->ProcessEvent(uFnPostBeginPlay, &PostBeginPlay_Params, nullptr);
};

// Function Engine.RB_ConstraintActor.OnToggleConstraintDrive
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_ToggleConstraintDrive* Action                         (CPF_Parm)

void ARB_ConstraintActor::OnToggleConstraintDrive(class USeqAct_ToggleConstraintDrive* Action)
{
	static UFunction* uFnOnToggleConstraintDrive = nullptr;

	if (!uFnOnToggleConstraintDrive)
	{
		uFnOnToggleConstraintDrive = UFunction::FindFunction("Function Engine.RB_ConstraintActor.OnToggleConstraintDrive");
	}

	ARB_ConstraintActor_execOnToggleConstraintDrive_Params OnToggleConstraintDrive_Params;
	memset(&OnToggleConstraintDrive_Params, 0, sizeof(OnToggleConstraintDrive_Params));
	OnToggleConstraintDrive_Params.Action = Action;

	this->ProcessEvent(uFnOnToggleConstraintDrive, &OnToggleConstraintDrive_Params, nullptr);
};

// Function Engine.RB_ConstraintActor.OnToggle
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_Toggle*          Action                         (CPF_Parm)

void ARB_ConstraintActor::OnToggle(class USeqAct_Toggle* Action)
{
	static UFunction* uFnOnToggle = nullptr;

	if (!uFnOnToggle)
	{
		uFnOnToggle = UFunction::FindFunction("Function Engine.RB_ConstraintActor.OnToggle");
	}

	ARB_ConstraintActor_execOnToggle_Params OnToggle_Params;
	memset(&OnToggle_Params, 0, sizeof(OnToggle_Params));
	OnToggle_Params.Action = Action;

	this->ProcessEvent(uFnOnToggle, &OnToggle_Params, nullptr);
};

// Function Engine.RB_ConstraintActor.OnDestroy
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_Destroy*         Action                         (CPF_Parm)

void ARB_ConstraintActor::OnDestroy(class USeqAct_Destroy* Action)
{
	static UFunction* uFnOnDestroy = nullptr;

	if (!uFnOnDestroy)
	{
		uFnOnDestroy = UFunction::FindFunction("Function Engine.RB_ConstraintActor.OnDestroy");
	}

	ARB_ConstraintActor_execOnDestroy_Params OnDestroy_Params;
	memset(&OnDestroy_Params, 0, sizeof(OnDestroy_Params));
	OnDestroy_Params.Action = Action;

	this->ProcessEvent(uFnOnDestroy, &OnDestroy_Params, nullptr);
};

// Function Engine.RB_ConstraintActor.TermConstraint
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[26554])
// Parameter Info:

void ARB_ConstraintActor::TermConstraint()
{
	static UFunction* uFnTermConstraint = nullptr;

	if (!uFnTermConstraint)
	{
		uFnTermConstraint = UFunction::FindFunction("Function Engine.RB_ConstraintActor.TermConstraint");
	}

	ARB_ConstraintActor_execTermConstraint_Params TermConstraint_Params;
	memset(&TermConstraint_Params, 0, sizeof(TermConstraint_Params));

	uFnTermConstraint->iNative = 0;
	uFnTermConstraint->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnTermConstraint, &TermConstraint_Params, nullptr);
	uFnTermConstraint->FunctionFlags |= 0x400;
	uFnTermConstraint->iNative = 26554;
};

// Function Engine.RB_ConstraintActor.InitConstraint
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[21145])
// Parameter Info:
// class AActor*                  Actor1                         (CPF_Parm)
// class AActor*                  Actor2                         (CPF_Parm)
// class FName                    Actor1Bone                     (CPF_OptionalParm | CPF_Parm)
// class FName                    Actor2Bone                     (CPF_OptionalParm | CPF_Parm)
// float                          BreakThreshold                 (CPF_OptionalParm | CPF_Parm)

void ARB_ConstraintActor::InitConstraint(class AActor* Actor1, class AActor* Actor2, const class FName& Actor1Bone, const class FName& Actor2Bone, float BreakThreshold)
{
	static UFunction* uFnInitConstraint = nullptr;

	if (!uFnInitConstraint)
	{
		uFnInitConstraint = UFunction::FindFunction("Function Engine.RB_ConstraintActor.InitConstraint");
	}

	ARB_ConstraintActor_execInitConstraint_Params InitConstraint_Params;
	memset(&InitConstraint_Params, 0, sizeof(InitConstraint_Params));
	InitConstraint_Params.Actor1 = Actor1;
	InitConstraint_Params.Actor2 = Actor2;
	memcpy_s(&InitConstraint_Params.Actor1Bone, sizeof(InitConstraint_Params.Actor1Bone), &Actor1Bone, sizeof(Actor1Bone));
	memcpy_s(&InitConstraint_Params.Actor2Bone, sizeof(InitConstraint_Params.Actor2Bone), &Actor2Bone, sizeof(Actor2Bone));
	memcpy_s(&InitConstraint_Params.BreakThreshold, sizeof(InitConstraint_Params.BreakThreshold), &BreakThreshold, sizeof(BreakThreshold));

	uFnInitConstraint->iNative = 0;
	uFnInitConstraint->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnInitConstraint, &InitConstraint_Params, nullptr);
	uFnInitConstraint->FunctionFlags |= 0x400;
	uFnInitConstraint->iNative = 21145;
};

// Function Engine.RB_ConstraintActor.SetDisableCollision
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25641])
// Parameter Info:
// uint32_t                       NewDisableCollision            (CPF_Parm)

void ARB_ConstraintActor::SetDisableCollision(bool NewDisableCollision)
{
	static UFunction* uFnSetDisableCollision = nullptr;

	if (!uFnSetDisableCollision)
	{
		uFnSetDisableCollision = UFunction::FindFunction("Function Engine.RB_ConstraintActor.SetDisableCollision");
	}

	ARB_ConstraintActor_execSetDisableCollision_Params SetDisableCollision_Params;
	memset(&SetDisableCollision_Params, 0, sizeof(SetDisableCollision_Params));
	SetDisableCollision_Params.NewDisableCollision = NewDisableCollision;

	uFnSetDisableCollision->iNative = 0;
	uFnSetDisableCollision->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetDisableCollision, &SetDisableCollision_Params, nullptr);
	uFnSetDisableCollision->FunctionFlags |= 0x400;
	uFnSetDisableCollision->iNative = 25641;
};

// Function Engine.RB_LineImpulseActor.ReplicatedEvent
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FName                    VarName                        (CPF_Parm)

void ARB_LineImpulseActor::eventReplicatedEvent(const class FName& VarName)
{
	static UFunction* uFnReplicatedEvent = nullptr;

	if (!uFnReplicatedEvent)
	{
		uFnReplicatedEvent = UFunction::FindFunction("Function Engine.RB_LineImpulseActor.ReplicatedEvent");
	}

	ARB_LineImpulseActor_eventReplicatedEvent_Params ReplicatedEvent_Params;
	memset(&ReplicatedEvent_Params, 0, sizeof(ReplicatedEvent_Params));
	memcpy_s(&ReplicatedEvent_Params.VarName, sizeof(ReplicatedEvent_Params.VarName), &VarName, sizeof(VarName));

	this->ProcessEvent(uFnReplicatedEvent, &ReplicatedEvent_Params, nullptr);
};

// Function Engine.RB_LineImpulseActor.OnToggle
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_Toggle*          inAction                       (CPF_Parm)

void ARB_LineImpulseActor::OnToggle(class USeqAct_Toggle* inAction)
{
	static UFunction* uFnOnToggle = nullptr;

	if (!uFnOnToggle)
	{
		uFnOnToggle = UFunction::FindFunction("Function Engine.RB_LineImpulseActor.OnToggle");
	}

	ARB_LineImpulseActor_execOnToggle_Params OnToggle_Params;
	memset(&OnToggle_Params, 0, sizeof(OnToggle_Params));
	OnToggle_Params.inAction = inAction;

	this->ProcessEvent(uFnOnToggle, &OnToggle_Params, nullptr);
};

// Function Engine.RB_LineImpulseActor.FireLineImpulse
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20133])
// Parameter Info:

void ARB_LineImpulseActor::FireLineImpulse()
{
	static UFunction* uFnFireLineImpulse = nullptr;

	if (!uFnFireLineImpulse)
	{
		uFnFireLineImpulse = UFunction::FindFunction("Function Engine.RB_LineImpulseActor.FireLineImpulse");
	}

	ARB_LineImpulseActor_execFireLineImpulse_Params FireLineImpulse_Params;
	memset(&FireLineImpulse_Params, 0, sizeof(FireLineImpulse_Params));

	uFnFireLineImpulse->iNative = 0;
	uFnFireLineImpulse->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnFireLineImpulse, &FireLineImpulse_Params, nullptr);
	uFnFireLineImpulse->FunctionFlags |= 0x400;
	uFnFireLineImpulse->iNative = 20133;
};

// Function Engine.RB_RadialImpulseActor.ReplicatedEvent
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FName                    VarName                        (CPF_Parm)

void ARB_RadialImpulseActor::eventReplicatedEvent(const class FName& VarName)
{
	static UFunction* uFnReplicatedEvent = nullptr;

	if (!uFnReplicatedEvent)
	{
		uFnReplicatedEvent = UFunction::FindFunction("Function Engine.RB_RadialImpulseActor.ReplicatedEvent");
	}

	ARB_RadialImpulseActor_eventReplicatedEvent_Params ReplicatedEvent_Params;
	memset(&ReplicatedEvent_Params, 0, sizeof(ReplicatedEvent_Params));
	memcpy_s(&ReplicatedEvent_Params.VarName, sizeof(ReplicatedEvent_Params.VarName), &VarName, sizeof(VarName));

	this->ProcessEvent(uFnReplicatedEvent, &ReplicatedEvent_Params, nullptr);
};

// Function Engine.RB_RadialImpulseActor.OnToggle
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_Toggle*          inAction                       (CPF_Parm)

void ARB_RadialImpulseActor::OnToggle(class USeqAct_Toggle* inAction)
{
	static UFunction* uFnOnToggle = nullptr;

	if (!uFnOnToggle)
	{
		uFnOnToggle = UFunction::FindFunction("Function Engine.RB_RadialImpulseActor.OnToggle");
	}

	ARB_RadialImpulseActor_execOnToggle_Params OnToggle_Params;
	memset(&OnToggle_Params, 0, sizeof(OnToggle_Params));
	OnToggle_Params.inAction = inAction;

	this->ProcessEvent(uFnOnToggle, &OnToggle_Params, nullptr);
};

// Function Engine.RB_Thruster.OnToggle
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_Toggle*          Action                         (CPF_Parm)

void ARB_Thruster::OnToggle(class USeqAct_Toggle* Action)
{
	static UFunction* uFnOnToggle = nullptr;

	if (!uFnOnToggle)
	{
		uFnOnToggle = UFunction::FindFunction("Function Engine.RB_Thruster.OnToggle");
	}

	ARB_Thruster_execOnToggle_Params OnToggle_Params;
	memset(&OnToggle_Params, 0, sizeof(OnToggle_Params));
	OnToggle_Params.Action = Action;

	this->ProcessEvent(uFnOnToggle, &OnToggle_Params, nullptr);
};

// Function Engine.RB_RadialImpulseComponent.FireImpulse
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20132])
// Parameter Info:
// struct FVector                 Origin                         (CPF_Parm)

void URB_RadialImpulseComponent::FireImpulse(const struct FVector& Origin)
{
	static UFunction* uFnFireImpulse = nullptr;

	if (!uFnFireImpulse)
	{
		uFnFireImpulse = UFunction::FindFunction("Function Engine.RB_RadialImpulseComponent.FireImpulse");
	}

	URB_RadialImpulseComponent_execFireImpulse_Params FireImpulse_Params;
	memset(&FireImpulse_Params, 0, sizeof(FireImpulse_Params));
	memcpy_s(&FireImpulse_Params.Origin, sizeof(FireImpulse_Params.Origin), &Origin, sizeof(Origin));

	uFnFireImpulse->iNative = 0;
	uFnFireImpulse->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnFireImpulse, &FireImpulse_Params, nullptr);
	uFnFireImpulse->FunctionFlags |= 0x400;
	uFnFireImpulse->iNative = 20132;
};

// Function Engine.RB_Handle.GetOrientation
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20664])
// Parameter Info:
// struct FQuat                   ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

struct FQuat URB_Handle::GetOrientation()
{
	static UFunction* uFnGetOrientation = nullptr;

	if (!uFnGetOrientation)
	{
		uFnGetOrientation = UFunction::FindFunction("Function Engine.RB_Handle.GetOrientation");
	}

	URB_Handle_execGetOrientation_Params GetOrientation_Params;
	memset(&GetOrientation_Params, 0, sizeof(GetOrientation_Params));

	uFnGetOrientation->iNative = 0;
	uFnGetOrientation->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetOrientation, &GetOrientation_Params, nullptr);
	uFnGetOrientation->FunctionFlags |= 0x400;
	uFnGetOrientation->iNative = 20664;

	return GetOrientation_Params.ReturnValue;
};

// Function Engine.RB_Handle.SetOrientation
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[25729])
// Parameter Info:
// struct FQuat                   NewOrientation                 (CPF_Const | CPF_Parm | CPF_OutParm)

void URB_Handle::SetOrientation(struct FQuat& NewOrientation)
{
	static UFunction* uFnSetOrientation = nullptr;

	if (!uFnSetOrientation)
	{
		uFnSetOrientation = UFunction::FindFunction("Function Engine.RB_Handle.SetOrientation");
	}

	URB_Handle_execSetOrientation_Params SetOrientation_Params;
	memset(&SetOrientation_Params, 0, sizeof(SetOrientation_Params));
	memcpy_s(&SetOrientation_Params.NewOrientation, sizeof(SetOrientation_Params.NewOrientation), &NewOrientation, sizeof(NewOrientation));

	uFnSetOrientation->iNative = 0;
	uFnSetOrientation->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetOrientation, &SetOrientation_Params, nullptr);
	uFnSetOrientation->FunctionFlags |= 0x400;
	uFnSetOrientation->iNative = 25729;

	memcpy_s(&NewOrientation, sizeof(NewOrientation), &SetOrientation_Params.NewOrientation, sizeof(SetOrientation_Params.NewOrientation));
};

// Function Engine.RB_Handle.UpdateSmoothLocation
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[27000])
// Parameter Info:
// struct FVector                 NewLocation                    (CPF_Const | CPF_Parm | CPF_OutParm)

void URB_Handle::UpdateSmoothLocation(struct FVector& NewLocation)
{
	static UFunction* uFnUpdateSmoothLocation = nullptr;

	if (!uFnUpdateSmoothLocation)
	{
		uFnUpdateSmoothLocation = UFunction::FindFunction("Function Engine.RB_Handle.UpdateSmoothLocation");
	}

	URB_Handle_execUpdateSmoothLocation_Params UpdateSmoothLocation_Params;
	memset(&UpdateSmoothLocation_Params, 0, sizeof(UpdateSmoothLocation_Params));
	memcpy_s(&UpdateSmoothLocation_Params.NewLocation, sizeof(UpdateSmoothLocation_Params.NewLocation), &NewLocation, sizeof(NewLocation));

	uFnUpdateSmoothLocation->iNative = 0;
	uFnUpdateSmoothLocation->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnUpdateSmoothLocation, &UpdateSmoothLocation_Params, nullptr);
	uFnUpdateSmoothLocation->FunctionFlags |= 0x400;
	uFnUpdateSmoothLocation->iNative = 27000;

	memcpy_s(&NewLocation, sizeof(NewLocation), &UpdateSmoothLocation_Params.NewLocation, sizeof(UpdateSmoothLocation_Params.NewLocation));
};

// Function Engine.RB_Handle.SetSmoothLocation
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25796])
// Parameter Info:
// struct FVector                 NewLocation                    (CPF_Parm)
// float                          MoveTime                       (CPF_Parm)

void URB_Handle::SetSmoothLocation(const struct FVector& NewLocation, float MoveTime)
{
	static UFunction* uFnSetSmoothLocation = nullptr;

	if (!uFnSetSmoothLocation)
	{
		uFnSetSmoothLocation = UFunction::FindFunction("Function Engine.RB_Handle.SetSmoothLocation");
	}

	URB_Handle_execSetSmoothLocation_Params SetSmoothLocation_Params;
	memset(&SetSmoothLocation_Params, 0, sizeof(SetSmoothLocation_Params));
	memcpy_s(&SetSmoothLocation_Params.NewLocation, sizeof(SetSmoothLocation_Params.NewLocation), &NewLocation, sizeof(NewLocation));
	memcpy_s(&SetSmoothLocation_Params.MoveTime, sizeof(SetSmoothLocation_Params.MoveTime), &MoveTime, sizeof(MoveTime));

	uFnSetSmoothLocation->iNative = 0;
	uFnSetSmoothLocation->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetSmoothLocation, &SetSmoothLocation_Params, nullptr);
	uFnSetSmoothLocation->FunctionFlags |= 0x400;
	uFnSetSmoothLocation->iNative = 25796;
};

// Function Engine.RB_Handle.SetLocation
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25703])
// Parameter Info:
// struct FVector                 NewLocation                    (CPF_Parm)

void URB_Handle::SetLocation(const struct FVector& NewLocation)
{
	static UFunction* uFnSetLocation = nullptr;

	if (!uFnSetLocation)
	{
		uFnSetLocation = UFunction::FindFunction("Function Engine.RB_Handle.SetLocation");
	}

	URB_Handle_execSetLocation_Params SetLocation_Params;
	memset(&SetLocation_Params, 0, sizeof(SetLocation_Params));
	memcpy_s(&SetLocation_Params.NewLocation, sizeof(SetLocation_Params.NewLocation), &NewLocation, sizeof(NewLocation));

	uFnSetLocation->iNative = 0;
	uFnSetLocation->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetLocation, &SetLocation_Params, nullptr);
	uFnSetLocation->FunctionFlags |= 0x400;
	uFnSetLocation->iNative = 25703;
};

// Function Engine.RB_Handle.ReleaseComponent
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25047])
// Parameter Info:

void URB_Handle::ReleaseComponent()
{
	static UFunction* uFnReleaseComponent = nullptr;

	if (!uFnReleaseComponent)
	{
		uFnReleaseComponent = UFunction::FindFunction("Function Engine.RB_Handle.ReleaseComponent");
	}

	URB_Handle_execReleaseComponent_Params ReleaseComponent_Params;
	memset(&ReleaseComponent_Params, 0, sizeof(ReleaseComponent_Params));

	uFnReleaseComponent->iNative = 0;
	uFnReleaseComponent->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnReleaseComponent, &ReleaseComponent_Params, nullptr);
	uFnReleaseComponent->FunctionFlags |= 0x400;
	uFnReleaseComponent->iNative = 25047;
};

// Function Engine.RB_Handle.GrabComponent
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20860])
// Parameter Info:
// class UPrimitiveComponent*     Component                      (CPF_Parm | CPF_EditInline)
// class FName                    InBoneName                     (CPF_Parm)
// struct FVector                 GrabLocation                   (CPF_Parm)
// uint32_t                       bConstrainRotation             (CPF_Parm)

void URB_Handle::GrabComponent(class UPrimitiveComponent* Component, const class FName& InBoneName, const struct FVector& GrabLocation, bool bConstrainRotation)
{
	static UFunction* uFnGrabComponent = nullptr;

	if (!uFnGrabComponent)
	{
		uFnGrabComponent = UFunction::FindFunction("Function Engine.RB_Handle.GrabComponent");
	}

	URB_Handle_execGrabComponent_Params GrabComponent_Params;
	memset(&GrabComponent_Params, 0, sizeof(GrabComponent_Params));
	GrabComponent_Params.Component = Component;
	memcpy_s(&GrabComponent_Params.InBoneName, sizeof(GrabComponent_Params.InBoneName), &InBoneName, sizeof(InBoneName));
	memcpy_s(&GrabComponent_Params.GrabLocation, sizeof(GrabComponent_Params.GrabLocation), &GrabLocation, sizeof(GrabLocation));
	GrabComponent_Params.bConstrainRotation = bConstrainRotation;

	uFnGrabComponent->iNative = 0;
	uFnGrabComponent->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGrabComponent, &GrabComponent_Params, nullptr);
	uFnGrabComponent->FunctionFlags |= 0x400;
	uFnGrabComponent->iNative = 20860;
};

// Function Engine.RB_Spring.Clear
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[18104])
// Parameter Info:

void URB_Spring::Clear()
{
	static UFunction* uFnClear = nullptr;

	if (!uFnClear)
	{
		uFnClear = UFunction::FindFunction("Function Engine.RB_Spring.Clear");
	}

	URB_Spring_execClear_Params Clear_Params;
	memset(&Clear_Params, 0, sizeof(Clear_Params));

	uFnClear->iNative = 0;
	uFnClear->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnClear, &Clear_Params, nullptr);
	uFnClear->FunctionFlags |= 0x400;
	uFnClear->iNative = 18104;
};

// Function Engine.RB_Spring.SetComponents
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25620])
// Parameter Info:
// class UPrimitiveComponent*     InComponent1                   (CPF_Parm | CPF_EditInline)
// class FName                    InBoneName1                    (CPF_Parm)
// struct FVector                 Position1                      (CPF_Parm)
// class UPrimitiveComponent*     InComponent2                   (CPF_Parm | CPF_EditInline)
// class FName                    InBoneName2                    (CPF_Parm)
// struct FVector                 Position2                      (CPF_Parm)

void URB_Spring::SetComponents(class UPrimitiveComponent* InComponent1, const class FName& InBoneName1, const struct FVector& Position1, class UPrimitiveComponent* InComponent2, const class FName& InBoneName2, const struct FVector& Position2)
{
	static UFunction* uFnSetComponents = nullptr;

	if (!uFnSetComponents)
	{
		uFnSetComponents = UFunction::FindFunction("Function Engine.RB_Spring.SetComponents");
	}

	URB_Spring_execSetComponents_Params SetComponents_Params;
	memset(&SetComponents_Params, 0, sizeof(SetComponents_Params));
	SetComponents_Params.InComponent1 = InComponent1;
	memcpy_s(&SetComponents_Params.InBoneName1, sizeof(SetComponents_Params.InBoneName1), &InBoneName1, sizeof(InBoneName1));
	memcpy_s(&SetComponents_Params.Position1, sizeof(SetComponents_Params.Position1), &Position1, sizeof(Position1));
	SetComponents_Params.InComponent2 = InComponent2;
	memcpy_s(&SetComponents_Params.InBoneName2, sizeof(SetComponents_Params.InBoneName2), &InBoneName2, sizeof(InBoneName2));
	memcpy_s(&SetComponents_Params.Position2, sizeof(SetComponents_Params.Position2), &Position2, sizeof(Position2));

	uFnSetComponents->iNative = 0;
	uFnSetComponents->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetComponents, &SetComponents_Params, nullptr);
	uFnSetComponents->FunctionFlags |= 0x400;
	uFnSetComponents->iNative = 25620;
};

// Function Engine.PhysicalMaterial.GetPhysicalMaterialProperty
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UPhysicalMaterialPropertyBase* ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UPhysicalMaterialPropertyBase* DesiredClass                   (CPF_Parm)

class UPhysicalMaterialPropertyBase* UPhysicalMaterial::GetPhysicalMaterialProperty(class UPhysicalMaterialPropertyBase* DesiredClass)
{
	static UFunction* uFnGetPhysicalMaterialProperty = nullptr;

	if (!uFnGetPhysicalMaterialProperty)
	{
		uFnGetPhysicalMaterialProperty = UFunction::FindFunction("Function Engine.PhysicalMaterial.GetPhysicalMaterialProperty");
	}

	UPhysicalMaterial_execGetPhysicalMaterialProperty_Params GetPhysicalMaterialProperty_Params;
	memset(&GetPhysicalMaterialProperty_Params, 0, sizeof(GetPhysicalMaterialProperty_Params));
	GetPhysicalMaterialProperty_Params.DesiredClass = DesiredClass;

	this->ProcessEvent(uFnGetPhysicalMaterialProperty, &GetPhysicalMaterialProperty_Params, nullptr);

	return GetPhysicalMaterialProperty_Params.ReturnValue;
};

// Function Engine.PhysicalMaterial.FindPhysEffectInfo
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20110])
// Parameter Info:
// struct FPhysEffectInfo         ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EPhysEffectType                Type                           (CPF_Parm)

struct FPhysEffectInfo UPhysicalMaterial::FindPhysEffectInfo(EPhysEffectType Type)
{
	static UFunction* uFnFindPhysEffectInfo = nullptr;

	if (!uFnFindPhysEffectInfo)
	{
		uFnFindPhysEffectInfo = UFunction::FindFunction("Function Engine.PhysicalMaterial.FindPhysEffectInfo");
	}

	UPhysicalMaterial_execFindPhysEffectInfo_Params FindPhysEffectInfo_Params;
	memset(&FindPhysEffectInfo_Params, 0, sizeof(FindPhysEffectInfo_Params));
	memcpy_s(&FindPhysEffectInfo_Params.Type, sizeof(FindPhysEffectInfo_Params.Type), &Type, sizeof(Type));

	uFnFindPhysEffectInfo->iNative = 0;
	uFnFindPhysEffectInfo->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnFindPhysEffectInfo, &FindPhysEffectInfo_Params, nullptr);
	uFnFindPhysEffectInfo->FunctionFlags |= 0x400;
	uFnFindPhysEffectInfo->iNative = 20110;

	return FindPhysEffectInfo_Params.ReturnValue;
};

// Function Engine.PhysicsAsset.FindBodyIndex
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20084])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    BodyName                       (CPF_Parm)

int32_t UPhysicsAsset::FindBodyIndex(const class FName& BodyName)
{
	static UFunction* uFnFindBodyIndex = nullptr;

	if (!uFnFindBodyIndex)
	{
		uFnFindBodyIndex = UFunction::FindFunction("Function Engine.PhysicsAsset.FindBodyIndex");
	}

	UPhysicsAsset_execFindBodyIndex_Params FindBodyIndex_Params;
	memset(&FindBodyIndex_Params, 0, sizeof(FindBodyIndex_Params));
	memcpy_s(&FindBodyIndex_Params.BodyName, sizeof(FindBodyIndex_Params.BodyName), &BodyName, sizeof(BodyName));

	uFnFindBodyIndex->iNative = 0;
	uFnFindBodyIndex->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnFindBodyIndex, &FindBodyIndex_Params, nullptr);
	uFnFindBodyIndex->FunctionFlags |= 0x400;
	uFnFindBodyIndex->iNative = 20084;

	return FindBodyIndex_Params.ReturnValue;
};

// Function Engine.PhysicsAssetInstance.FindConstraintInstance
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20094])
// Parameter Info:
// class URB_ConstraintInstance*  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    ConName                        (CPF_Parm)
// class UPhysicsAsset*           InAsset                        (CPF_Parm)

class URB_ConstraintInstance* UPhysicsAssetInstance::FindConstraintInstance(const class FName& ConName, class UPhysicsAsset* InAsset)
{
	static UFunction* uFnFindConstraintInstance = nullptr;

	if (!uFnFindConstraintInstance)
	{
		uFnFindConstraintInstance = UFunction::FindFunction("Function Engine.PhysicsAssetInstance.FindConstraintInstance");
	}

	UPhysicsAssetInstance_execFindConstraintInstance_Params FindConstraintInstance_Params;
	memset(&FindConstraintInstance_Params, 0, sizeof(FindConstraintInstance_Params));
	memcpy_s(&FindConstraintInstance_Params.ConName, sizeof(FindConstraintInstance_Params.ConName), &ConName, sizeof(ConName));
	FindConstraintInstance_Params.InAsset = InAsset;

	uFnFindConstraintInstance->iNative = 0;
	uFnFindConstraintInstance->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnFindConstraintInstance, &FindConstraintInstance_Params, nullptr);
	uFnFindConstraintInstance->FunctionFlags |= 0x400;
	uFnFindConstraintInstance->iNative = 20094;

	return FindConstraintInstance_Params.ReturnValue;
};

// Function Engine.PhysicsAssetInstance.FindBodyInstance
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20085])
// Parameter Info:
// class URB_BodyInstance*        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    BodyName                       (CPF_Parm)
// class UPhysicsAsset*           InAsset                        (CPF_Parm)

class URB_BodyInstance* UPhysicsAssetInstance::FindBodyInstance(const class FName& BodyName, class UPhysicsAsset* InAsset)
{
	static UFunction* uFnFindBodyInstance = nullptr;

	if (!uFnFindBodyInstance)
	{
		uFnFindBodyInstance = UFunction::FindFunction("Function Engine.PhysicsAssetInstance.FindBodyInstance");
	}

	UPhysicsAssetInstance_execFindBodyInstance_Params FindBodyInstance_Params;
	memset(&FindBodyInstance_Params, 0, sizeof(FindBodyInstance_Params));
	memcpy_s(&FindBodyInstance_Params.BodyName, sizeof(FindBodyInstance_Params.BodyName), &BodyName, sizeof(BodyName));
	FindBodyInstance_Params.InAsset = InAsset;

	uFnFindBodyInstance->iNative = 0;
	uFnFindBodyInstance->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnFindBodyInstance, &FindBodyInstance_Params, nullptr);
	uFnFindBodyInstance->FunctionFlags |= 0x400;
	uFnFindBodyInstance->iNative = 20085;

	return FindBodyInstance_Params.ReturnValue;
};

// Function Engine.PhysicsAssetInstance.SetFullAnimWeightBonesFixed
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25669])
// Parameter Info:
// uint32_t                       bNewFixed                      (CPF_Parm)
// class USkeletalMeshComponent*  SkelMesh                       (CPF_Parm | CPF_EditInline)

void UPhysicsAssetInstance::SetFullAnimWeightBonesFixed(bool bNewFixed, class USkeletalMeshComponent* SkelMesh)
{
	static UFunction* uFnSetFullAnimWeightBonesFixed = nullptr;

	if (!uFnSetFullAnimWeightBonesFixed)
	{
		uFnSetFullAnimWeightBonesFixed = UFunction::FindFunction("Function Engine.PhysicsAssetInstance.SetFullAnimWeightBonesFixed");
	}

	UPhysicsAssetInstance_execSetFullAnimWeightBonesFixed_Params SetFullAnimWeightBonesFixed_Params;
	memset(&SetFullAnimWeightBonesFixed_Params, 0, sizeof(SetFullAnimWeightBonesFixed_Params));
	SetFullAnimWeightBonesFixed_Params.bNewFixed = bNewFixed;
	SetFullAnimWeightBonesFixed_Params.SkelMesh = SkelMesh;

	uFnSetFullAnimWeightBonesFixed->iNative = 0;
	uFnSetFullAnimWeightBonesFixed->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetFullAnimWeightBonesFixed, &SetFullAnimWeightBonesFixed_Params, nullptr);
	uFnSetFullAnimWeightBonesFixed->FunctionFlags |= 0x400;
	uFnSetFullAnimWeightBonesFixed->iNative = 25669;
};

// Function Engine.PhysicsAssetInstance.SetFullAnimWeightBlockRigidBody
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25668])
// Parameter Info:
// uint32_t                       bNewBlockRigidBody             (CPF_Parm)
// class USkeletalMeshComponent*  SkelMesh                       (CPF_Parm | CPF_EditInline)

void UPhysicsAssetInstance::SetFullAnimWeightBlockRigidBody(bool bNewBlockRigidBody, class USkeletalMeshComponent* SkelMesh)
{
	static UFunction* uFnSetFullAnimWeightBlockRigidBody = nullptr;

	if (!uFnSetFullAnimWeightBlockRigidBody)
	{
		uFnSetFullAnimWeightBlockRigidBody = UFunction::FindFunction("Function Engine.PhysicsAssetInstance.SetFullAnimWeightBlockRigidBody");
	}

	UPhysicsAssetInstance_execSetFullAnimWeightBlockRigidBody_Params SetFullAnimWeightBlockRigidBody_Params;
	memset(&SetFullAnimWeightBlockRigidBody_Params, 0, sizeof(SetFullAnimWeightBlockRigidBody_Params));
	SetFullAnimWeightBlockRigidBody_Params.bNewBlockRigidBody = bNewBlockRigidBody;
	SetFullAnimWeightBlockRigidBody_Params.SkelMesh = SkelMesh;

	uFnSetFullAnimWeightBlockRigidBody->iNative = 0;
	uFnSetFullAnimWeightBlockRigidBody->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetFullAnimWeightBlockRigidBody, &SetFullAnimWeightBlockRigidBody_Params, nullptr);
	uFnSetFullAnimWeightBlockRigidBody->FunctionFlags |= 0x400;
	uFnSetFullAnimWeightBlockRigidBody->iNative = 25668;
};

// Function Engine.PhysicsAssetInstance.SetNamedBodiesBlockRigidBody
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25716])
// Parameter Info:
// uint32_t                       bNewBlockRigidBody             (CPF_Parm)
// class TArray<class FName>      BoneNames                      (CPF_Parm | CPF_NeedCtorLink)
// class USkeletalMeshComponent*  SkelMesh                       (CPF_Parm | CPF_EditInline)

void UPhysicsAssetInstance::SetNamedBodiesBlockRigidBody(bool bNewBlockRigidBody, const class TArray<class FName>& BoneNames, class USkeletalMeshComponent* SkelMesh)
{
	static UFunction* uFnSetNamedBodiesBlockRigidBody = nullptr;

	if (!uFnSetNamedBodiesBlockRigidBody)
	{
		uFnSetNamedBodiesBlockRigidBody = UFunction::FindFunction("Function Engine.PhysicsAssetInstance.SetNamedBodiesBlockRigidBody");
	}

	UPhysicsAssetInstance_execSetNamedBodiesBlockRigidBody_Params SetNamedBodiesBlockRigidBody_Params;
	memset(&SetNamedBodiesBlockRigidBody_Params, 0, sizeof(SetNamedBodiesBlockRigidBody_Params));
	SetNamedBodiesBlockRigidBody_Params.bNewBlockRigidBody = bNewBlockRigidBody;
	memcpy_s(&SetNamedBodiesBlockRigidBody_Params.BoneNames, sizeof(SetNamedBodiesBlockRigidBody_Params.BoneNames), &BoneNames, sizeof(BoneNames));
	SetNamedBodiesBlockRigidBody_Params.SkelMesh = SkelMesh;

	uFnSetNamedBodiesBlockRigidBody->iNative = 0;
	uFnSetNamedBodiesBlockRigidBody->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetNamedBodiesBlockRigidBody, &SetNamedBodiesBlockRigidBody_Params, nullptr);
	uFnSetNamedBodiesBlockRigidBody->FunctionFlags |= 0x400;
	uFnSetNamedBodiesBlockRigidBody->iNative = 25716;
};

// Function Engine.PhysicsAssetInstance.SetNamedRBBoneSprings
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25720])
// Parameter Info:
// uint32_t                       bEnable                        (CPF_Parm)
// class TArray<class FName>      BoneNames                      (CPF_Parm | CPF_NeedCtorLink)
// float                          InBoneLinearSpring             (CPF_Parm)
// float                          InBoneAngularSpring            (CPF_Parm)
// class USkeletalMeshComponent*  SkelMeshComp                   (CPF_Parm | CPF_EditInline)

void UPhysicsAssetInstance::SetNamedRBBoneSprings(bool bEnable, const class TArray<class FName>& BoneNames, float InBoneLinearSpring, float InBoneAngularSpring, class USkeletalMeshComponent* SkelMeshComp)
{
	static UFunction* uFnSetNamedRBBoneSprings = nullptr;

	if (!uFnSetNamedRBBoneSprings)
	{
		uFnSetNamedRBBoneSprings = UFunction::FindFunction("Function Engine.PhysicsAssetInstance.SetNamedRBBoneSprings");
	}

	UPhysicsAssetInstance_execSetNamedRBBoneSprings_Params SetNamedRBBoneSprings_Params;
	memset(&SetNamedRBBoneSprings_Params, 0, sizeof(SetNamedRBBoneSprings_Params));
	SetNamedRBBoneSprings_Params.bEnable = bEnable;
	memcpy_s(&SetNamedRBBoneSprings_Params.BoneNames, sizeof(SetNamedRBBoneSprings_Params.BoneNames), &BoneNames, sizeof(BoneNames));
	memcpy_s(&SetNamedRBBoneSprings_Params.InBoneLinearSpring, sizeof(SetNamedRBBoneSprings_Params.InBoneLinearSpring), &InBoneLinearSpring, sizeof(InBoneLinearSpring));
	memcpy_s(&SetNamedRBBoneSprings_Params.InBoneAngularSpring, sizeof(SetNamedRBBoneSprings_Params.InBoneAngularSpring), &InBoneAngularSpring, sizeof(InBoneAngularSpring));
	SetNamedRBBoneSprings_Params.SkelMeshComp = SkelMeshComp;

	uFnSetNamedRBBoneSprings->iNative = 0;
	uFnSetNamedRBBoneSprings->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetNamedRBBoneSprings, &SetNamedRBBoneSprings_Params, nullptr);
	uFnSetNamedRBBoneSprings->FunctionFlags |= 0x400;
	uFnSetNamedRBBoneSprings->iNative = 25720;
};

// Function Engine.PhysicsAssetInstance.SetNamedMotorsAngularVelocityDrive
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[25719])
// Parameter Info:
// uint32_t                       bEnableSwingDrive              (CPF_Parm)
// uint32_t                       bEnableTwistDrive              (CPF_Parm)
// class TArray<class FName>      BoneNames                      (CPF_Parm | CPF_NeedCtorLink)
// class USkeletalMeshComponent*  SkelMeshComp                   (CPF_Parm | CPF_EditInline)
// uint32_t                       bSetOtherBodiesToComplement    (CPF_OptionalParm | CPF_Parm)

void UPhysicsAssetInstance::SetNamedMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, const class TArray<class FName>& BoneNames, class USkeletalMeshComponent* SkelMeshComp, bool bSetOtherBodiesToComplement)
{
	static UFunction* uFnSetNamedMotorsAngularVelocityDrive = nullptr;

	if (!uFnSetNamedMotorsAngularVelocityDrive)
	{
		uFnSetNamedMotorsAngularVelocityDrive = UFunction::FindFunction("Function Engine.PhysicsAssetInstance.SetNamedMotorsAngularVelocityDrive");
	}

	UPhysicsAssetInstance_execSetNamedMotorsAngularVelocityDrive_Params SetNamedMotorsAngularVelocityDrive_Params;
	memset(&SetNamedMotorsAngularVelocityDrive_Params, 0, sizeof(SetNamedMotorsAngularVelocityDrive_Params));
	SetNamedMotorsAngularVelocityDrive_Params.bEnableSwingDrive = bEnableSwingDrive;
	SetNamedMotorsAngularVelocityDrive_Params.bEnableTwistDrive = bEnableTwistDrive;
	memcpy_s(&SetNamedMotorsAngularVelocityDrive_Params.BoneNames, sizeof(SetNamedMotorsAngularVelocityDrive_Params.BoneNames), &BoneNames, sizeof(BoneNames));
	SetNamedMotorsAngularVelocityDrive_Params.SkelMeshComp = SkelMeshComp;
	SetNamedMotorsAngularVelocityDrive_Params.bSetOtherBodiesToComplement = bSetOtherBodiesToComplement;

	uFnSetNamedMotorsAngularVelocityDrive->iNative = 0;
	uFnSetNamedMotorsAngularVelocityDrive->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetNamedMotorsAngularVelocityDrive, &SetNamedMotorsAngularVelocityDrive_Params, nullptr);
	uFnSetNamedMotorsAngularVelocityDrive->FunctionFlags |= 0x400;
	uFnSetNamedMotorsAngularVelocityDrive->iNative = 25719;
};

// Function Engine.PhysicsAssetInstance.SetNamedMotorsAngularPositionDrive
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[25718])
// Parameter Info:
// uint32_t                       bEnableSwingDrive              (CPF_Parm)
// uint32_t                       bEnableTwistDrive              (CPF_Parm)
// class TArray<class FName>      BoneNames                      (CPF_Parm | CPF_NeedCtorLink)
// class USkeletalMeshComponent*  SkelMeshComp                   (CPF_Parm | CPF_EditInline)
// uint32_t                       bSetOtherBodiesToComplement    (CPF_OptionalParm | CPF_Parm)

void UPhysicsAssetInstance::SetNamedMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, const class TArray<class FName>& BoneNames, class USkeletalMeshComponent* SkelMeshComp, bool bSetOtherBodiesToComplement)
{
	static UFunction* uFnSetNamedMotorsAngularPositionDrive = nullptr;

	if (!uFnSetNamedMotorsAngularPositionDrive)
	{
		uFnSetNamedMotorsAngularPositionDrive = UFunction::FindFunction("Function Engine.PhysicsAssetInstance.SetNamedMotorsAngularPositionDrive");
	}

	UPhysicsAssetInstance_execSetNamedMotorsAngularPositionDrive_Params SetNamedMotorsAngularPositionDrive_Params;
	memset(&SetNamedMotorsAngularPositionDrive_Params, 0, sizeof(SetNamedMotorsAngularPositionDrive_Params));
	SetNamedMotorsAngularPositionDrive_Params.bEnableSwingDrive = bEnableSwingDrive;
	SetNamedMotorsAngularPositionDrive_Params.bEnableTwistDrive = bEnableTwistDrive;
	memcpy_s(&SetNamedMotorsAngularPositionDrive_Params.BoneNames, sizeof(SetNamedMotorsAngularPositionDrive_Params.BoneNames), &BoneNames, sizeof(BoneNames));
	SetNamedMotorsAngularPositionDrive_Params.SkelMeshComp = SkelMeshComp;
	SetNamedMotorsAngularPositionDrive_Params.bSetOtherBodiesToComplement = bSetOtherBodiesToComplement;

	uFnSetNamedMotorsAngularPositionDrive->iNative = 0;
	uFnSetNamedMotorsAngularPositionDrive->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetNamedMotorsAngularPositionDrive, &SetNamedMotorsAngularPositionDrive_Params, nullptr);
	uFnSetNamedMotorsAngularPositionDrive->FunctionFlags |= 0x400;
	uFnSetNamedMotorsAngularPositionDrive->iNative = 25718;
};

// Function Engine.PhysicsAssetInstance.SetAllMotorsAngularDriveParams
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[25573])
// Parameter Info:
// float                          InSpring                       (CPF_Parm)
// float                          InDamping                      (CPF_Parm)
// float                          InForceLimit                   (CPF_Parm)
// class USkeletalMeshComponent*  SkelMesh                       (CPF_OptionalParm | CPF_Parm | CPF_EditInline)
// uint32_t                       bSkipFullAnimWeightBodies      (CPF_OptionalParm | CPF_Parm)

void UPhysicsAssetInstance::SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, class USkeletalMeshComponent* SkelMesh, bool bSkipFullAnimWeightBodies)
{
	static UFunction* uFnSetAllMotorsAngularDriveParams = nullptr;

	if (!uFnSetAllMotorsAngularDriveParams)
	{
		uFnSetAllMotorsAngularDriveParams = UFunction::FindFunction("Function Engine.PhysicsAssetInstance.SetAllMotorsAngularDriveParams");
	}

	UPhysicsAssetInstance_execSetAllMotorsAngularDriveParams_Params SetAllMotorsAngularDriveParams_Params;
	memset(&SetAllMotorsAngularDriveParams_Params, 0, sizeof(SetAllMotorsAngularDriveParams_Params));
	memcpy_s(&SetAllMotorsAngularDriveParams_Params.InSpring, sizeof(SetAllMotorsAngularDriveParams_Params.InSpring), &InSpring, sizeof(InSpring));
	memcpy_s(&SetAllMotorsAngularDriveParams_Params.InDamping, sizeof(SetAllMotorsAngularDriveParams_Params.InDamping), &InDamping, sizeof(InDamping));
	memcpy_s(&SetAllMotorsAngularDriveParams_Params.InForceLimit, sizeof(SetAllMotorsAngularDriveParams_Params.InForceLimit), &InForceLimit, sizeof(InForceLimit));
	SetAllMotorsAngularDriveParams_Params.SkelMesh = SkelMesh;
	SetAllMotorsAngularDriveParams_Params.bSkipFullAnimWeightBodies = bSkipFullAnimWeightBodies;

	uFnSetAllMotorsAngularDriveParams->iNative = 0;
	uFnSetAllMotorsAngularDriveParams->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetAllMotorsAngularDriveParams, &SetAllMotorsAngularDriveParams_Params, nullptr);
	uFnSetAllMotorsAngularDriveParams->FunctionFlags |= 0x400;
	uFnSetAllMotorsAngularDriveParams->iNative = 25573;
};

// Function Engine.PhysicsAssetInstance.SetAllMotorsAngularVelocityDrive
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[25575])
// Parameter Info:
// uint32_t                       bEnableSwingDrive              (CPF_Parm)
// uint32_t                       bEnableTwistDrive              (CPF_Parm)
// class USkeletalMeshComponent*  SkelMeshComp                   (CPF_Parm | CPF_EditInline)
// uint32_t                       bSkipFullAnimWeightBodies      (CPF_OptionalParm | CPF_Parm)

void UPhysicsAssetInstance::SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, class USkeletalMeshComponent* SkelMeshComp, bool bSkipFullAnimWeightBodies)
{
	static UFunction* uFnSetAllMotorsAngularVelocityDrive = nullptr;

	if (!uFnSetAllMotorsAngularVelocityDrive)
	{
		uFnSetAllMotorsAngularVelocityDrive = UFunction::FindFunction("Function Engine.PhysicsAssetInstance.SetAllMotorsAngularVelocityDrive");
	}

	UPhysicsAssetInstance_execSetAllMotorsAngularVelocityDrive_Params SetAllMotorsAngularVelocityDrive_Params;
	memset(&SetAllMotorsAngularVelocityDrive_Params, 0, sizeof(SetAllMotorsAngularVelocityDrive_Params));
	SetAllMotorsAngularVelocityDrive_Params.bEnableSwingDrive = bEnableSwingDrive;
	SetAllMotorsAngularVelocityDrive_Params.bEnableTwistDrive = bEnableTwistDrive;
	SetAllMotorsAngularVelocityDrive_Params.SkelMeshComp = SkelMeshComp;
	SetAllMotorsAngularVelocityDrive_Params.bSkipFullAnimWeightBodies = bSkipFullAnimWeightBodies;

	uFnSetAllMotorsAngularVelocityDrive->iNative = 0;
	uFnSetAllMotorsAngularVelocityDrive->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetAllMotorsAngularVelocityDrive, &SetAllMotorsAngularVelocityDrive_Params, nullptr);
	uFnSetAllMotorsAngularVelocityDrive->FunctionFlags |= 0x400;
	uFnSetAllMotorsAngularVelocityDrive->iNative = 25575;
};

// Function Engine.PhysicsAssetInstance.SetAllMotorsAngularPositionDrive
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[25574])
// Parameter Info:
// uint32_t                       bEnableSwingDrive              (CPF_Parm)
// uint32_t                       bEnableTwistDrive              (CPF_Parm)
// class USkeletalMeshComponent*  SkelMesh                       (CPF_OptionalParm | CPF_Parm | CPF_EditInline)
// uint32_t                       bSkipFullAnimWeightBodies      (CPF_OptionalParm | CPF_Parm)

void UPhysicsAssetInstance::SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, class USkeletalMeshComponent* SkelMesh, bool bSkipFullAnimWeightBodies)
{
	static UFunction* uFnSetAllMotorsAngularPositionDrive = nullptr;

	if (!uFnSetAllMotorsAngularPositionDrive)
	{
		uFnSetAllMotorsAngularPositionDrive = UFunction::FindFunction("Function Engine.PhysicsAssetInstance.SetAllMotorsAngularPositionDrive");
	}

	UPhysicsAssetInstance_execSetAllMotorsAngularPositionDrive_Params SetAllMotorsAngularPositionDrive_Params;
	memset(&SetAllMotorsAngularPositionDrive_Params, 0, sizeof(SetAllMotorsAngularPositionDrive_Params));
	SetAllMotorsAngularPositionDrive_Params.bEnableSwingDrive = bEnableSwingDrive;
	SetAllMotorsAngularPositionDrive_Params.bEnableTwistDrive = bEnableTwistDrive;
	SetAllMotorsAngularPositionDrive_Params.SkelMesh = SkelMesh;
	SetAllMotorsAngularPositionDrive_Params.bSkipFullAnimWeightBodies = bSkipFullAnimWeightBodies;

	uFnSetAllMotorsAngularPositionDrive->iNative = 0;
	uFnSetAllMotorsAngularPositionDrive->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetAllMotorsAngularPositionDrive, &SetAllMotorsAngularPositionDrive_Params, nullptr);
	uFnSetAllMotorsAngularPositionDrive->FunctionFlags |= 0x400;
	uFnSetAllMotorsAngularPositionDrive->iNative = 25574;
};

// Function Engine.PhysicsAssetInstance.ForceAllBodiesBelowUnfixed
// [0x00420401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20255])
// Parameter Info:
// class UPhysicsAsset*           InAsset                        (CPF_Parm)
// class USkeletalMeshComponent*  InSkelMesh                     (CPF_Parm | CPF_EditInline)
// uint32_t                       InbInstanceAlwaysFullAnimWeight (CPF_Parm)
// class FName                    InBoneName                     (CPF_Const | CPF_Parm | CPF_OutParm)

void UPhysicsAssetInstance::ForceAllBodiesBelowUnfixed(class UPhysicsAsset* InAsset, class USkeletalMeshComponent* InSkelMesh, bool InbInstanceAlwaysFullAnimWeight, class FName& InBoneName)
{
	static UFunction* uFnForceAllBodiesBelowUnfixed = nullptr;

	if (!uFnForceAllBodiesBelowUnfixed)
	{
		uFnForceAllBodiesBelowUnfixed = UFunction::FindFunction("Function Engine.PhysicsAssetInstance.ForceAllBodiesBelowUnfixed");
	}

	UPhysicsAssetInstance_execForceAllBodiesBelowUnfixed_Params ForceAllBodiesBelowUnfixed_Params;
	memset(&ForceAllBodiesBelowUnfixed_Params, 0, sizeof(ForceAllBodiesBelowUnfixed_Params));
	ForceAllBodiesBelowUnfixed_Params.InAsset = InAsset;
	ForceAllBodiesBelowUnfixed_Params.InSkelMesh = InSkelMesh;
	ForceAllBodiesBelowUnfixed_Params.InbInstanceAlwaysFullAnimWeight = InbInstanceAlwaysFullAnimWeight;
	memcpy_s(&ForceAllBodiesBelowUnfixed_Params.InBoneName, sizeof(ForceAllBodiesBelowUnfixed_Params.InBoneName), &InBoneName, sizeof(InBoneName));

	uFnForceAllBodiesBelowUnfixed->iNative = 0;
	uFnForceAllBodiesBelowUnfixed->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnForceAllBodiesBelowUnfixed, &ForceAllBodiesBelowUnfixed_Params, nullptr);
	uFnForceAllBodiesBelowUnfixed->FunctionFlags |= 0x400;
	uFnForceAllBodiesBelowUnfixed->iNative = 20255;

	memcpy_s(&InBoneName, sizeof(InBoneName), &ForceAllBodiesBelowUnfixed_Params.InBoneName, sizeof(ForceAllBodiesBelowUnfixed_Params.InBoneName));
};

// Function Engine.PhysicsAssetInstance.SetNamedBodiesFixed
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[25717])
// Parameter Info:
// uint32_t                       bNewFixed                      (CPF_Parm)
// class TArray<class FName>      BoneNames                      (CPF_Parm | CPF_NeedCtorLink)
// class USkeletalMeshComponent*  SkelMesh                       (CPF_Parm | CPF_EditInline)
// uint32_t                       bSetOtherBodiesToComplement    (CPF_OptionalParm | CPF_Parm)
// uint32_t                       bSkipFullAnimWeightBodies      (CPF_OptionalParm | CPF_Parm)

void UPhysicsAssetInstance::SetNamedBodiesFixed(bool bNewFixed, const class TArray<class FName>& BoneNames, class USkeletalMeshComponent* SkelMesh, bool bSetOtherBodiesToComplement, bool bSkipFullAnimWeightBodies)
{
	static UFunction* uFnSetNamedBodiesFixed = nullptr;

	if (!uFnSetNamedBodiesFixed)
	{
		uFnSetNamedBodiesFixed = UFunction::FindFunction("Function Engine.PhysicsAssetInstance.SetNamedBodiesFixed");
	}

	UPhysicsAssetInstance_execSetNamedBodiesFixed_Params SetNamedBodiesFixed_Params;
	memset(&SetNamedBodiesFixed_Params, 0, sizeof(SetNamedBodiesFixed_Params));
	SetNamedBodiesFixed_Params.bNewFixed = bNewFixed;
	memcpy_s(&SetNamedBodiesFixed_Params.BoneNames, sizeof(SetNamedBodiesFixed_Params.BoneNames), &BoneNames, sizeof(BoneNames));
	SetNamedBodiesFixed_Params.SkelMesh = SkelMesh;
	SetNamedBodiesFixed_Params.bSetOtherBodiesToComplement = bSetOtherBodiesToComplement;
	SetNamedBodiesFixed_Params.bSkipFullAnimWeightBodies = bSkipFullAnimWeightBodies;

	uFnSetNamedBodiesFixed->iNative = 0;
	uFnSetNamedBodiesFixed->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetNamedBodiesFixed, &SetNamedBodiesFixed_Params, nullptr);
	uFnSetNamedBodiesFixed->FunctionFlags |= 0x400;
	uFnSetNamedBodiesFixed->iNative = 25717;
};

// Function Engine.PhysicsAssetInstance.SetAllBodiesFixed
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25572])
// Parameter Info:
// uint32_t                       bNewFixed                      (CPF_Parm)

void UPhysicsAssetInstance::SetAllBodiesFixed(bool bNewFixed)
{
	static UFunction* uFnSetAllBodiesFixed = nullptr;

	if (!uFnSetAllBodiesFixed)
	{
		uFnSetAllBodiesFixed = UFunction::FindFunction("Function Engine.PhysicsAssetInstance.SetAllBodiesFixed");
	}

	UPhysicsAssetInstance_execSetAllBodiesFixed_Params SetAllBodiesFixed_Params;
	memset(&SetAllBodiesFixed_Params, 0, sizeof(SetAllBodiesFixed_Params));
	SetAllBodiesFixed_Params.bNewFixed = bNewFixed;

	uFnSetAllBodiesFixed->iNative = 0;
	uFnSetAllBodiesFixed->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetAllBodiesFixed, &SetAllBodiesFixed_Params, nullptr);
	uFnSetAllBodiesFixed->FunctionFlags |= 0x400;
	uFnSetAllBodiesFixed->iNative = 25572;
};

// Function Engine.PhysicsAssetInstance.GetTotalMassBelowBone
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20793])
// Parameter Info:
// float                          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    InBoneName                     (CPF_Parm)
// class UPhysicsAsset*           InAsset                        (CPF_Parm)
// class USkeletalMesh*           InSkelMesh                     (CPF_Parm)

float UPhysicsAssetInstance::GetTotalMassBelowBone(const class FName& InBoneName, class UPhysicsAsset* InAsset, class USkeletalMesh* InSkelMesh)
{
	static UFunction* uFnGetTotalMassBelowBone = nullptr;

	if (!uFnGetTotalMassBelowBone)
	{
		uFnGetTotalMassBelowBone = UFunction::FindFunction("Function Engine.PhysicsAssetInstance.GetTotalMassBelowBone");
	}

	UPhysicsAssetInstance_execGetTotalMassBelowBone_Params GetTotalMassBelowBone_Params;
	memset(&GetTotalMassBelowBone_Params, 0, sizeof(GetTotalMassBelowBone_Params));
	memcpy_s(&GetTotalMassBelowBone_Params.InBoneName, sizeof(GetTotalMassBelowBone_Params.InBoneName), &InBoneName, sizeof(InBoneName));
	GetTotalMassBelowBone_Params.InAsset = InAsset;
	GetTotalMassBelowBone_Params.InSkelMesh = InSkelMesh;

	uFnGetTotalMassBelowBone->iNative = 0;
	uFnGetTotalMassBelowBone->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetTotalMassBelowBone, &GetTotalMassBelowBone_Params, nullptr);
	uFnGetTotalMassBelowBone->FunctionFlags |= 0x400;
	uFnGetTotalMassBelowBone->iNative = 20793;

	return GetTotalMassBelowBone_Params.ReturnValue;
};

// Function Engine.PhysicsAssetInstance.SetAngularDriveScale
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25580])
// Parameter Info:
// float                          InAngularSpringScale           (CPF_Parm)
// float                          InAngularDampingScale          (CPF_Parm)
// float                          InAngularForceLimitScale       (CPF_Parm)

void UPhysicsAssetInstance::SetAngularDriveScale(float InAngularSpringScale, float InAngularDampingScale, float InAngularForceLimitScale)
{
	static UFunction* uFnSetAngularDriveScale = nullptr;

	if (!uFnSetAngularDriveScale)
	{
		uFnSetAngularDriveScale = UFunction::FindFunction("Function Engine.PhysicsAssetInstance.SetAngularDriveScale");
	}

	UPhysicsAssetInstance_execSetAngularDriveScale_Params SetAngularDriveScale_Params;
	memset(&SetAngularDriveScale_Params, 0, sizeof(SetAngularDriveScale_Params));
	memcpy_s(&SetAngularDriveScale_Params.InAngularSpringScale, sizeof(SetAngularDriveScale_Params.InAngularSpringScale), &InAngularSpringScale, sizeof(InAngularSpringScale));
	memcpy_s(&SetAngularDriveScale_Params.InAngularDampingScale, sizeof(SetAngularDriveScale_Params.InAngularDampingScale), &InAngularDampingScale, sizeof(InAngularDampingScale));
	memcpy_s(&SetAngularDriveScale_Params.InAngularForceLimitScale, sizeof(SetAngularDriveScale_Params.InAngularForceLimitScale), &InAngularForceLimitScale, sizeof(InAngularForceLimitScale));

	uFnSetAngularDriveScale->iNative = 0;
	uFnSetAngularDriveScale->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetAngularDriveScale, &SetAngularDriveScale_Params, nullptr);
	uFnSetAngularDriveScale->FunctionFlags |= 0x400;
	uFnSetAngularDriveScale->iNative = 25580;
};

// Function Engine.PhysicsAssetInstance.SetLinearDriveScale
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25697])
// Parameter Info:
// float                          InLinearSpringScale            (CPF_Parm)
// float                          InLinearDampingScale           (CPF_Parm)
// float                          InLinearForceLimitScale        (CPF_Parm)

void UPhysicsAssetInstance::SetLinearDriveScale(float InLinearSpringScale, float InLinearDampingScale, float InLinearForceLimitScale)
{
	static UFunction* uFnSetLinearDriveScale = nullptr;

	if (!uFnSetLinearDriveScale)
	{
		uFnSetLinearDriveScale = UFunction::FindFunction("Function Engine.PhysicsAssetInstance.SetLinearDriveScale");
	}

	UPhysicsAssetInstance_execSetLinearDriveScale_Params SetLinearDriveScale_Params;
	memset(&SetLinearDriveScale_Params, 0, sizeof(SetLinearDriveScale_Params));
	memcpy_s(&SetLinearDriveScale_Params.InLinearSpringScale, sizeof(SetLinearDriveScale_Params.InLinearSpringScale), &InLinearSpringScale, sizeof(InLinearSpringScale));
	memcpy_s(&SetLinearDriveScale_Params.InLinearDampingScale, sizeof(SetLinearDriveScale_Params.InLinearDampingScale), &InLinearDampingScale, sizeof(InLinearDampingScale));
	memcpy_s(&SetLinearDriveScale_Params.InLinearForceLimitScale, sizeof(SetLinearDriveScale_Params.InLinearForceLimitScale), &InLinearForceLimitScale, sizeof(InLinearForceLimitScale));

	uFnSetLinearDriveScale->iNative = 0;
	uFnSetLinearDriveScale->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetLinearDriveScale, &SetLinearDriveScale_Params, nullptr);
	uFnSetLinearDriveScale->FunctionFlags |= 0x400;
	uFnSetLinearDriveScale->iNative = 25697;
};

// Function Engine.RB_BodyInstance.UpdateDampingProperties
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[26980])
// Parameter Info:

void URB_BodyInstance::UpdateDampingProperties()
{
	static UFunction* uFnUpdateDampingProperties = nullptr;

	if (!uFnUpdateDampingProperties)
	{
		uFnUpdateDampingProperties = UFunction::FindFunction("Function Engine.RB_BodyInstance.UpdateDampingProperties");
	}

	URB_BodyInstance_execUpdateDampingProperties_Params UpdateDampingProperties_Params;
	memset(&UpdateDampingProperties_Params, 0, sizeof(UpdateDampingProperties_Params));

	uFnUpdateDampingProperties->iNative = 0;
	uFnUpdateDampingProperties->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnUpdateDampingProperties, &UpdateDampingProperties_Params, nullptr);
	uFnUpdateDampingProperties->FunctionFlags |= 0x400;
	uFnUpdateDampingProperties->iNative = 26980;
};

// Function Engine.RB_BodyInstance.UpdateMassProperties
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[26986])
// Parameter Info:
// class URB_BodySetup*           Setup                          (CPF_Parm)

void URB_BodyInstance::UpdateMassProperties(class URB_BodySetup* Setup)
{
	static UFunction* uFnUpdateMassProperties = nullptr;

	if (!uFnUpdateMassProperties)
	{
		uFnUpdateMassProperties = UFunction::FindFunction("Function Engine.RB_BodyInstance.UpdateMassProperties");
	}

	URB_BodyInstance_execUpdateMassProperties_Params UpdateMassProperties_Params;
	memset(&UpdateMassProperties_Params, 0, sizeof(UpdateMassProperties_Params));
	UpdateMassProperties_Params.Setup = Setup;

	uFnUpdateMassProperties->iNative = 0;
	uFnUpdateMassProperties->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnUpdateMassProperties, &UpdateMassProperties_Params, nullptr);
	uFnUpdateMassProperties->FunctionFlags |= 0x400;
	uFnUpdateMassProperties->iNative = 26986;
};

// Function Engine.RB_BodyInstance.SetContactReportForceThreshold
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25621])
// Parameter Info:
// float                          Threshold                      (CPF_Parm)

void URB_BodyInstance::SetContactReportForceThreshold(float Threshold)
{
	static UFunction* uFnSetContactReportForceThreshold = nullptr;

	if (!uFnSetContactReportForceThreshold)
	{
		uFnSetContactReportForceThreshold = UFunction::FindFunction("Function Engine.RB_BodyInstance.SetContactReportForceThreshold");
	}

	URB_BodyInstance_execSetContactReportForceThreshold_Params SetContactReportForceThreshold_Params;
	memset(&SetContactReportForceThreshold_Params, 0, sizeof(SetContactReportForceThreshold_Params));
	memcpy_s(&SetContactReportForceThreshold_Params.Threshold, sizeof(SetContactReportForceThreshold_Params.Threshold), &Threshold, sizeof(Threshold));

	uFnSetContactReportForceThreshold->iNative = 0;
	uFnSetContactReportForceThreshold->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetContactReportForceThreshold, &SetContactReportForceThreshold_Params, nullptr);
	uFnSetContactReportForceThreshold->FunctionFlags |= 0x400;
	uFnSetContactReportForceThreshold->iNative = 25621;
};

// Function Engine.RB_BodyInstance.EnableCollisionResponse
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[19541])
// Parameter Info:
// uint32_t                       bEnableResponse                (CPF_Parm)

void URB_BodyInstance::EnableCollisionResponse(bool bEnableResponse)
{
	static UFunction* uFnEnableCollisionResponse = nullptr;

	if (!uFnEnableCollisionResponse)
	{
		uFnEnableCollisionResponse = UFunction::FindFunction("Function Engine.RB_BodyInstance.EnableCollisionResponse");
	}

	URB_BodyInstance_execEnableCollisionResponse_Params EnableCollisionResponse_Params;
	memset(&EnableCollisionResponse_Params, 0, sizeof(EnableCollisionResponse_Params));
	EnableCollisionResponse_Params.bEnableResponse = bEnableResponse;

	uFnEnableCollisionResponse->iNative = 0;
	uFnEnableCollisionResponse->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnEnableCollisionResponse, &EnableCollisionResponse_Params, nullptr);
	uFnEnableCollisionResponse->FunctionFlags |= 0x400;
	uFnEnableCollisionResponse->iNative = 19541;
};

// Function Engine.RB_BodyInstance.SetPhysMaterialOverride
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25740])
// Parameter Info:
// class UPhysicalMaterial*       NewPhysMaterial                (CPF_Parm)

void URB_BodyInstance::SetPhysMaterialOverride(class UPhysicalMaterial* NewPhysMaterial)
{
	static UFunction* uFnSetPhysMaterialOverride = nullptr;

	if (!uFnSetPhysMaterialOverride)
	{
		uFnSetPhysMaterialOverride = UFunction::FindFunction("Function Engine.RB_BodyInstance.SetPhysMaterialOverride");
	}

	URB_BodyInstance_execSetPhysMaterialOverride_Params SetPhysMaterialOverride_Params;
	memset(&SetPhysMaterialOverride_Params, 0, sizeof(SetPhysMaterialOverride_Params));
	SetPhysMaterialOverride_Params.NewPhysMaterial = NewPhysMaterial;

	uFnSetPhysMaterialOverride->iNative = 0;
	uFnSetPhysMaterialOverride->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetPhysMaterialOverride, &SetPhysMaterialOverride_Params, nullptr);
	uFnSetPhysMaterialOverride->FunctionFlags |= 0x400;
	uFnSetPhysMaterialOverride->iNative = 25740;
};

// Function Engine.RB_BodyInstance.SetBlockRigidBody
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25603])
// Parameter Info:
// uint32_t                       bNewBlockRigidBody             (CPF_Parm)

void URB_BodyInstance::SetBlockRigidBody(bool bNewBlockRigidBody)
{
	static UFunction* uFnSetBlockRigidBody = nullptr;

	if (!uFnSetBlockRigidBody)
	{
		uFnSetBlockRigidBody = UFunction::FindFunction("Function Engine.RB_BodyInstance.SetBlockRigidBody");
	}

	URB_BodyInstance_execSetBlockRigidBody_Params SetBlockRigidBody_Params;
	memset(&SetBlockRigidBody_Params, 0, sizeof(SetBlockRigidBody_Params));
	SetBlockRigidBody_Params.bNewBlockRigidBody = bNewBlockRigidBody;

	uFnSetBlockRigidBody->iNative = 0;
	uFnSetBlockRigidBody->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetBlockRigidBody, &SetBlockRigidBody_Params, nullptr);
	uFnSetBlockRigidBody->FunctionFlags |= 0x400;
	uFnSetBlockRigidBody->iNative = 25603;
};

// Function Engine.RB_BodyInstance.SetBoneSpringTarget
// [0x00420401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[25608])
// Parameter Info:
// uint32_t                       bTeleport                      (CPF_Parm)
// struct FMatrix                 InBoneTarget                   (CPF_Const | CPF_Parm | CPF_OutParm)

void URB_BodyInstance::SetBoneSpringTarget(bool bTeleport, struct FMatrix& InBoneTarget)
{
	static UFunction* uFnSetBoneSpringTarget = nullptr;

	if (!uFnSetBoneSpringTarget)
	{
		uFnSetBoneSpringTarget = UFunction::FindFunction("Function Engine.RB_BodyInstance.SetBoneSpringTarget");
	}

	URB_BodyInstance_execSetBoneSpringTarget_Params SetBoneSpringTarget_Params;
	memset(&SetBoneSpringTarget_Params, 0, sizeof(SetBoneSpringTarget_Params));
	SetBoneSpringTarget_Params.bTeleport = bTeleport;
	memcpy_s(&SetBoneSpringTarget_Params.InBoneTarget, sizeof(SetBoneSpringTarget_Params.InBoneTarget), &InBoneTarget, sizeof(InBoneTarget));

	uFnSetBoneSpringTarget->iNative = 0;
	uFnSetBoneSpringTarget->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetBoneSpringTarget, &SetBoneSpringTarget_Params, nullptr);
	uFnSetBoneSpringTarget->FunctionFlags |= 0x400;
	uFnSetBoneSpringTarget->iNative = 25608;

	memcpy_s(&InBoneTarget, sizeof(InBoneTarget), &SetBoneSpringTarget_Params.InBoneTarget, sizeof(SetBoneSpringTarget_Params.InBoneTarget));
};

// Function Engine.RB_BodyInstance.SetBoneSpringParams
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25607])
// Parameter Info:
// float                          InLinearSpring                 (CPF_Parm)
// float                          InLinearDamping                (CPF_Parm)
// float                          InAngularSpring                (CPF_Parm)
// float                          InAngularDamping               (CPF_Parm)

void URB_BodyInstance::SetBoneSpringParams(float InLinearSpring, float InLinearDamping, float InAngularSpring, float InAngularDamping)
{
	static UFunction* uFnSetBoneSpringParams = nullptr;

	if (!uFnSetBoneSpringParams)
	{
		uFnSetBoneSpringParams = UFunction::FindFunction("Function Engine.RB_BodyInstance.SetBoneSpringParams");
	}

	URB_BodyInstance_execSetBoneSpringParams_Params SetBoneSpringParams_Params;
	memset(&SetBoneSpringParams_Params, 0, sizeof(SetBoneSpringParams_Params));
	memcpy_s(&SetBoneSpringParams_Params.InLinearSpring, sizeof(SetBoneSpringParams_Params.InLinearSpring), &InLinearSpring, sizeof(InLinearSpring));
	memcpy_s(&SetBoneSpringParams_Params.InLinearDamping, sizeof(SetBoneSpringParams_Params.InLinearDamping), &InLinearDamping, sizeof(InLinearDamping));
	memcpy_s(&SetBoneSpringParams_Params.InAngularSpring, sizeof(SetBoneSpringParams_Params.InAngularSpring), &InAngularSpring, sizeof(InAngularSpring));
	memcpy_s(&SetBoneSpringParams_Params.InAngularDamping, sizeof(SetBoneSpringParams_Params.InAngularDamping), &InAngularDamping, sizeof(InAngularDamping));

	uFnSetBoneSpringParams->iNative = 0;
	uFnSetBoneSpringParams->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetBoneSpringParams, &SetBoneSpringParams_Params, nullptr);
	uFnSetBoneSpringParams->FunctionFlags |= 0x400;
	uFnSetBoneSpringParams->iNative = 25607;
};

// Function Engine.RB_BodyInstance.EnableBoneSpring
// [0x00420401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[19539])
// Parameter Info:
// uint32_t                       bInEnableLinear                (CPF_Parm)
// uint32_t                       bInEnableAngular               (CPF_Parm)
// struct FMatrix                 InBoneTarget                   (CPF_Const | CPF_Parm | CPF_OutParm)

void URB_BodyInstance::EnableBoneSpring(bool bInEnableLinear, bool bInEnableAngular, struct FMatrix& InBoneTarget)
{
	static UFunction* uFnEnableBoneSpring = nullptr;

	if (!uFnEnableBoneSpring)
	{
		uFnEnableBoneSpring = UFunction::FindFunction("Function Engine.RB_BodyInstance.EnableBoneSpring");
	}

	URB_BodyInstance_execEnableBoneSpring_Params EnableBoneSpring_Params;
	memset(&EnableBoneSpring_Params, 0, sizeof(EnableBoneSpring_Params));
	EnableBoneSpring_Params.bInEnableLinear = bInEnableLinear;
	EnableBoneSpring_Params.bInEnableAngular = bInEnableAngular;
	memcpy_s(&EnableBoneSpring_Params.InBoneTarget, sizeof(EnableBoneSpring_Params.InBoneTarget), &InBoneTarget, sizeof(InBoneTarget));

	uFnEnableBoneSpring->iNative = 0;
	uFnEnableBoneSpring->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnEnableBoneSpring, &EnableBoneSpring_Params, nullptr);
	uFnEnableBoneSpring->FunctionFlags |= 0x400;
	uFnEnableBoneSpring->iNative = 19539;

	memcpy_s(&InBoneTarget, sizeof(InBoneTarget), &EnableBoneSpring_Params.InBoneTarget, sizeof(EnableBoneSpring_Params.InBoneTarget));
};

// Function Engine.RB_BodyInstance.GetUnrealWorldVelocityAtPoint
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20805])
// Parameter Info:
// struct FVector                 ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FVector                 Point                          (CPF_Parm)

struct FVector URB_BodyInstance::GetUnrealWorldVelocityAtPoint(const struct FVector& Point)
{
	static UFunction* uFnGetUnrealWorldVelocityAtPoint = nullptr;

	if (!uFnGetUnrealWorldVelocityAtPoint)
	{
		uFnGetUnrealWorldVelocityAtPoint = UFunction::FindFunction("Function Engine.RB_BodyInstance.GetUnrealWorldVelocityAtPoint");
	}

	URB_BodyInstance_execGetUnrealWorldVelocityAtPoint_Params GetUnrealWorldVelocityAtPoint_Params;
	memset(&GetUnrealWorldVelocityAtPoint_Params, 0, sizeof(GetUnrealWorldVelocityAtPoint_Params));
	memcpy_s(&GetUnrealWorldVelocityAtPoint_Params.Point, sizeof(GetUnrealWorldVelocityAtPoint_Params.Point), &Point, sizeof(Point));

	uFnGetUnrealWorldVelocityAtPoint->iNative = 0;
	uFnGetUnrealWorldVelocityAtPoint->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetUnrealWorldVelocityAtPoint, &GetUnrealWorldVelocityAtPoint_Params, nullptr);
	uFnGetUnrealWorldVelocityAtPoint->FunctionFlags |= 0x400;
	uFnGetUnrealWorldVelocityAtPoint->iNative = 20805;

	return GetUnrealWorldVelocityAtPoint_Params.ReturnValue;
};

// Function Engine.RB_BodyInstance.GetUnrealWorldAngularVelocity
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20802])
// Parameter Info:
// struct FVector                 ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

struct FVector URB_BodyInstance::GetUnrealWorldAngularVelocity()
{
	static UFunction* uFnGetUnrealWorldAngularVelocity = nullptr;

	if (!uFnGetUnrealWorldAngularVelocity)
	{
		uFnGetUnrealWorldAngularVelocity = UFunction::FindFunction("Function Engine.RB_BodyInstance.GetUnrealWorldAngularVelocity");
	}

	URB_BodyInstance_execGetUnrealWorldAngularVelocity_Params GetUnrealWorldAngularVelocity_Params;
	memset(&GetUnrealWorldAngularVelocity_Params, 0, sizeof(GetUnrealWorldAngularVelocity_Params));

	uFnGetUnrealWorldAngularVelocity->iNative = 0;
	uFnGetUnrealWorldAngularVelocity->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetUnrealWorldAngularVelocity, &GetUnrealWorldAngularVelocity_Params, nullptr);
	uFnGetUnrealWorldAngularVelocity->FunctionFlags |= 0x400;
	uFnGetUnrealWorldAngularVelocity->iNative = 20802;

	return GetUnrealWorldAngularVelocity_Params.ReturnValue;
};

// Function Engine.RB_BodyInstance.GetUnrealWorldVelocity
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20804])
// Parameter Info:
// struct FVector                 ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

struct FVector URB_BodyInstance::GetUnrealWorldVelocity()
{
	static UFunction* uFnGetUnrealWorldVelocity = nullptr;

	if (!uFnGetUnrealWorldVelocity)
	{
		uFnGetUnrealWorldVelocity = UFunction::FindFunction("Function Engine.RB_BodyInstance.GetUnrealWorldVelocity");
	}

	URB_BodyInstance_execGetUnrealWorldVelocity_Params GetUnrealWorldVelocity_Params;
	memset(&GetUnrealWorldVelocity_Params, 0, sizeof(GetUnrealWorldVelocity_Params));

	uFnGetUnrealWorldVelocity->iNative = 0;
	uFnGetUnrealWorldVelocity->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetUnrealWorldVelocity, &GetUnrealWorldVelocity_Params, nullptr);
	uFnGetUnrealWorldVelocity->FunctionFlags |= 0x400;
	uFnGetUnrealWorldVelocity->iNative = 20804;

	return GetUnrealWorldVelocity_Params.ReturnValue;
};

// Function Engine.RB_BodyInstance.GetUnrealWorldTM
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20803])
// Parameter Info:
// struct FMatrix                 ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

struct FMatrix URB_BodyInstance::GetUnrealWorldTM()
{
	static UFunction* uFnGetUnrealWorldTM = nullptr;

	if (!uFnGetUnrealWorldTM)
	{
		uFnGetUnrealWorldTM = UFunction::FindFunction("Function Engine.RB_BodyInstance.GetUnrealWorldTM");
	}

	URB_BodyInstance_execGetUnrealWorldTM_Params GetUnrealWorldTM_Params;
	memset(&GetUnrealWorldTM_Params, 0, sizeof(GetUnrealWorldTM_Params));

	uFnGetUnrealWorldTM->iNative = 0;
	uFnGetUnrealWorldTM->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetUnrealWorldTM, &GetUnrealWorldTM_Params, nullptr);
	uFnGetUnrealWorldTM->FunctionFlags |= 0x400;
	uFnGetUnrealWorldTM->iNative = 20803;

	return GetUnrealWorldTM_Params.ReturnValue;
};

// Function Engine.RB_BodyInstance.GetPhysicsAssetInstance
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20674])
// Parameter Info:
// class UPhysicsAssetInstance*   ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class UPhysicsAssetInstance* URB_BodyInstance::GetPhysicsAssetInstance()
{
	static UFunction* uFnGetPhysicsAssetInstance = nullptr;

	if (!uFnGetPhysicsAssetInstance)
	{
		uFnGetPhysicsAssetInstance = UFunction::FindFunction("Function Engine.RB_BodyInstance.GetPhysicsAssetInstance");
	}

	URB_BodyInstance_execGetPhysicsAssetInstance_Params GetPhysicsAssetInstance_Params;
	memset(&GetPhysicsAssetInstance_Params, 0, sizeof(GetPhysicsAssetInstance_Params));

	uFnGetPhysicsAssetInstance->iNative = 0;
	uFnGetPhysicsAssetInstance->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetPhysicsAssetInstance, &GetPhysicsAssetInstance_Params, nullptr);
	uFnGetPhysicsAssetInstance->FunctionFlags |= 0x400;
	uFnGetPhysicsAssetInstance->iNative = 20674;

	return GetPhysicsAssetInstance_Params.ReturnValue;
};

// Function Engine.RB_BodyInstance.IsValidBodyInstance
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[21430])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool URB_BodyInstance::IsValidBodyInstance()
{
	static UFunction* uFnIsValidBodyInstance = nullptr;

	if (!uFnIsValidBodyInstance)
	{
		uFnIsValidBodyInstance = UFunction::FindFunction("Function Engine.RB_BodyInstance.IsValidBodyInstance");
	}

	URB_BodyInstance_execIsValidBodyInstance_Params IsValidBodyInstance_Params;
	memset(&IsValidBodyInstance_Params, 0, sizeof(IsValidBodyInstance_Params));

	uFnIsValidBodyInstance->iNative = 0;
	uFnIsValidBodyInstance->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnIsValidBodyInstance, &IsValidBodyInstance_Params, nullptr);
	uFnIsValidBodyInstance->FunctionFlags |= 0x400;
	uFnIsValidBodyInstance->iNative = 21430;

	return IsValidBodyInstance_Params.ReturnValue;
};

// Function Engine.RB_BodyInstance.IsFixed
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[21379])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool URB_BodyInstance::IsFixed()
{
	static UFunction* uFnIsFixed = nullptr;

	if (!uFnIsFixed)
	{
		uFnIsFixed = UFunction::FindFunction("Function Engine.RB_BodyInstance.IsFixed");
	}

	URB_BodyInstance_execIsFixed_Params IsFixed_Params;
	memset(&IsFixed_Params, 0, sizeof(IsFixed_Params));

	uFnIsFixed->iNative = 0;
	uFnIsFixed->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnIsFixed, &IsFixed_Params, nullptr);
	uFnIsFixed->FunctionFlags |= 0x400;
	uFnIsFixed->iNative = 21379;

	return IsFixed_Params.ReturnValue;
};

// Function Engine.RB_BodyInstance.SetFixed
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25653])
// Parameter Info:
// uint32_t                       bNewFixed                      (CPF_Parm)

void URB_BodyInstance::SetFixed(bool bNewFixed)
{
	static UFunction* uFnSetFixed = nullptr;

	if (!uFnSetFixed)
	{
		uFnSetFixed = UFunction::FindFunction("Function Engine.RB_BodyInstance.SetFixed");
	}

	URB_BodyInstance_execSetFixed_Params SetFixed_Params;
	memset(&SetFixed_Params, 0, sizeof(SetFixed_Params));
	SetFixed_Params.bNewFixed = bNewFixed;

	uFnSetFixed->iNative = 0;
	uFnSetFixed->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetFixed, &SetFixed_Params, nullptr);
	uFnSetFixed->FunctionFlags |= 0x400;
	uFnSetFixed->iNative = 25653;
};

// Function Engine.RB_BodyInstance.GetBodyMass
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20509])
// Parameter Info:
// float                          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

float URB_BodyInstance::GetBodyMass()
{
	static UFunction* uFnGetBodyMass = nullptr;

	if (!uFnGetBodyMass)
	{
		uFnGetBodyMass = UFunction::FindFunction("Function Engine.RB_BodyInstance.GetBodyMass");
	}

	URB_BodyInstance_execGetBodyMass_Params GetBodyMass_Params;
	memset(&GetBodyMass_Params, 0, sizeof(GetBodyMass_Params));

	uFnGetBodyMass->iNative = 0;
	uFnGetBodyMass->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetBodyMass, &GetBodyMass_Params, nullptr);
	uFnGetBodyMass->FunctionFlags |= 0x400;
	uFnGetBodyMass->iNative = 20509;

	return GetBodyMass_Params.ReturnValue;
};

// Function Engine.RB_ConstraintInstance.MoveKinActorTransform
// [0x00420401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[22990])
// Parameter Info:
// struct FMatrix                 NewTM                          (CPF_Parm | CPF_OutParm)

void URB_ConstraintInstance::MoveKinActorTransform(struct FMatrix& NewTM)
{
	static UFunction* uFnMoveKinActorTransform = nullptr;

	if (!uFnMoveKinActorTransform)
	{
		uFnMoveKinActorTransform = UFunction::FindFunction("Function Engine.RB_ConstraintInstance.MoveKinActorTransform");
	}

	URB_ConstraintInstance_execMoveKinActorTransform_Params MoveKinActorTransform_Params;
	memset(&MoveKinActorTransform_Params, 0, sizeof(MoveKinActorTransform_Params));
	memcpy_s(&MoveKinActorTransform_Params.NewTM, sizeof(MoveKinActorTransform_Params.NewTM), &NewTM, sizeof(NewTM));

	uFnMoveKinActorTransform->iNative = 0;
	uFnMoveKinActorTransform->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnMoveKinActorTransform, &MoveKinActorTransform_Params, nullptr);
	uFnMoveKinActorTransform->FunctionFlags |= 0x400;
	uFnMoveKinActorTransform->iNative = 22990;

	memcpy_s(&NewTM, sizeof(NewTM), &MoveKinActorTransform_Params.NewTM, sizeof(MoveKinActorTransform_Params.NewTM));
};

// Function Engine.RB_ConstraintInstance.SetLinearLimitSize
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25698])
// Parameter Info:
// float                          NewLimitSize                   (CPF_Parm)

void URB_ConstraintInstance::SetLinearLimitSize(float NewLimitSize)
{
	static UFunction* uFnSetLinearLimitSize = nullptr;

	if (!uFnSetLinearLimitSize)
	{
		uFnSetLinearLimitSize = UFunction::FindFunction("Function Engine.RB_ConstraintInstance.SetLinearLimitSize");
	}

	URB_ConstraintInstance_execSetLinearLimitSize_Params SetLinearLimitSize_Params;
	memset(&SetLinearLimitSize_Params, 0, sizeof(SetLinearLimitSize_Params));
	memcpy_s(&SetLinearLimitSize_Params.NewLimitSize, sizeof(SetLinearLimitSize_Params.NewLimitSize), &NewLimitSize, sizeof(NewLimitSize));

	uFnSetLinearLimitSize->iNative = 0;
	uFnSetLinearLimitSize->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetLinearLimitSize, &SetLinearLimitSize_Params, nullptr);
	uFnSetLinearLimitSize->FunctionFlags |= 0x400;
	uFnSetLinearLimitSize->iNative = 25698;
};

// Function Engine.RB_ConstraintInstance.SetAngularDOFLimitScale
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25578])
// Parameter Info:
// float                          InSwing1LimitScale             (CPF_Parm)
// float                          InSwing2LimitScale             (CPF_Parm)
// float                          InTwistLimitScale              (CPF_Parm)
// class URB_ConstraintSetup*     InSetup                        (CPF_Parm)

void URB_ConstraintInstance::SetAngularDOFLimitScale(float InSwing1LimitScale, float InSwing2LimitScale, float InTwistLimitScale, class URB_ConstraintSetup* InSetup)
{
	static UFunction* uFnSetAngularDOFLimitScale = nullptr;

	if (!uFnSetAngularDOFLimitScale)
	{
		uFnSetAngularDOFLimitScale = UFunction::FindFunction("Function Engine.RB_ConstraintInstance.SetAngularDOFLimitScale");
	}

	URB_ConstraintInstance_execSetAngularDOFLimitScale_Params SetAngularDOFLimitScale_Params;
	memset(&SetAngularDOFLimitScale_Params, 0, sizeof(SetAngularDOFLimitScale_Params));
	memcpy_s(&SetAngularDOFLimitScale_Params.InSwing1LimitScale, sizeof(SetAngularDOFLimitScale_Params.InSwing1LimitScale), &InSwing1LimitScale, sizeof(InSwing1LimitScale));
	memcpy_s(&SetAngularDOFLimitScale_Params.InSwing2LimitScale, sizeof(SetAngularDOFLimitScale_Params.InSwing2LimitScale), &InSwing2LimitScale, sizeof(InSwing2LimitScale));
	memcpy_s(&SetAngularDOFLimitScale_Params.InTwistLimitScale, sizeof(SetAngularDOFLimitScale_Params.InTwistLimitScale), &InTwistLimitScale, sizeof(InTwistLimitScale));
	SetAngularDOFLimitScale_Params.InSetup = InSetup;

	uFnSetAngularDOFLimitScale->iNative = 0;
	uFnSetAngularDOFLimitScale->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetAngularDOFLimitScale, &SetAngularDOFLimitScale_Params, nullptr);
	uFnSetAngularDOFLimitScale->FunctionFlags |= 0x400;
	uFnSetAngularDOFLimitScale->iNative = 25578;
};

// Function Engine.RB_ConstraintInstance.SetAngularDriveParams
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25579])
// Parameter Info:
// float                          InSpring                       (CPF_Parm)
// float                          InDamping                      (CPF_Parm)
// float                          InForceLimit                   (CPF_Parm)

void URB_ConstraintInstance::SetAngularDriveParams(float InSpring, float InDamping, float InForceLimit)
{
	static UFunction* uFnSetAngularDriveParams = nullptr;

	if (!uFnSetAngularDriveParams)
	{
		uFnSetAngularDriveParams = UFunction::FindFunction("Function Engine.RB_ConstraintInstance.SetAngularDriveParams");
	}

	URB_ConstraintInstance_execSetAngularDriveParams_Params SetAngularDriveParams_Params;
	memset(&SetAngularDriveParams_Params, 0, sizeof(SetAngularDriveParams_Params));
	memcpy_s(&SetAngularDriveParams_Params.InSpring, sizeof(SetAngularDriveParams_Params.InSpring), &InSpring, sizeof(InSpring));
	memcpy_s(&SetAngularDriveParams_Params.InDamping, sizeof(SetAngularDriveParams_Params.InDamping), &InDamping, sizeof(InDamping));
	memcpy_s(&SetAngularDriveParams_Params.InForceLimit, sizeof(SetAngularDriveParams_Params.InForceLimit), &InForceLimit, sizeof(InForceLimit));

	uFnSetAngularDriveParams->iNative = 0;
	uFnSetAngularDriveParams->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetAngularDriveParams, &SetAngularDriveParams_Params, nullptr);
	uFnSetAngularDriveParams->FunctionFlags |= 0x400;
	uFnSetAngularDriveParams->iNative = 25579;
};

// Function Engine.RB_ConstraintInstance.SetAngularVelocityTarget
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25584])
// Parameter Info:
// struct FVector                 InVelTarget                    (CPF_Parm)

void URB_ConstraintInstance::SetAngularVelocityTarget(const struct FVector& InVelTarget)
{
	static UFunction* uFnSetAngularVelocityTarget = nullptr;

	if (!uFnSetAngularVelocityTarget)
	{
		uFnSetAngularVelocityTarget = UFunction::FindFunction("Function Engine.RB_ConstraintInstance.SetAngularVelocityTarget");
	}

	URB_ConstraintInstance_execSetAngularVelocityTarget_Params SetAngularVelocityTarget_Params;
	memset(&SetAngularVelocityTarget_Params, 0, sizeof(SetAngularVelocityTarget_Params));
	memcpy_s(&SetAngularVelocityTarget_Params.InVelTarget, sizeof(SetAngularVelocityTarget_Params.InVelTarget), &InVelTarget, sizeof(InVelTarget));

	uFnSetAngularVelocityTarget->iNative = 0;
	uFnSetAngularVelocityTarget->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetAngularVelocityTarget, &SetAngularVelocityTarget_Params, nullptr);
	uFnSetAngularVelocityTarget->FunctionFlags |= 0x400;
	uFnSetAngularVelocityTarget->iNative = 25584;
};

// Function Engine.RB_ConstraintInstance.SetAngularPositionTarget
// [0x00420401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[25582])
// Parameter Info:
// struct FQuat                   InPosTarget                    (CPF_Const | CPF_Parm | CPF_OutParm)

void URB_ConstraintInstance::SetAngularPositionTarget(struct FQuat& InPosTarget)
{
	static UFunction* uFnSetAngularPositionTarget = nullptr;

	if (!uFnSetAngularPositionTarget)
	{
		uFnSetAngularPositionTarget = UFunction::FindFunction("Function Engine.RB_ConstraintInstance.SetAngularPositionTarget");
	}

	URB_ConstraintInstance_execSetAngularPositionTarget_Params SetAngularPositionTarget_Params;
	memset(&SetAngularPositionTarget_Params, 0, sizeof(SetAngularPositionTarget_Params));
	memcpy_s(&SetAngularPositionTarget_Params.InPosTarget, sizeof(SetAngularPositionTarget_Params.InPosTarget), &InPosTarget, sizeof(InPosTarget));

	uFnSetAngularPositionTarget->iNative = 0;
	uFnSetAngularPositionTarget->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetAngularPositionTarget, &SetAngularPositionTarget_Params, nullptr);
	uFnSetAngularPositionTarget->FunctionFlags |= 0x400;
	uFnSetAngularPositionTarget->iNative = 25582;

	memcpy_s(&InPosTarget, sizeof(InPosTarget), &SetAngularPositionTarget_Params.InPosTarget, sizeof(SetAngularPositionTarget_Params.InPosTarget));
};

// Function Engine.RB_ConstraintInstance.SetLinearDriveParams
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25696])
// Parameter Info:
// float                          InSpring                       (CPF_Parm)
// float                          InDamping                      (CPF_Parm)
// float                          InForceLimit                   (CPF_Parm)

void URB_ConstraintInstance::SetLinearDriveParams(float InSpring, float InDamping, float InForceLimit)
{
	static UFunction* uFnSetLinearDriveParams = nullptr;

	if (!uFnSetLinearDriveParams)
	{
		uFnSetLinearDriveParams = UFunction::FindFunction("Function Engine.RB_ConstraintInstance.SetLinearDriveParams");
	}

	URB_ConstraintInstance_execSetLinearDriveParams_Params SetLinearDriveParams_Params;
	memset(&SetLinearDriveParams_Params, 0, sizeof(SetLinearDriveParams_Params));
	memcpy_s(&SetLinearDriveParams_Params.InSpring, sizeof(SetLinearDriveParams_Params.InSpring), &InSpring, sizeof(InSpring));
	memcpy_s(&SetLinearDriveParams_Params.InDamping, sizeof(SetLinearDriveParams_Params.InDamping), &InDamping, sizeof(InDamping));
	memcpy_s(&SetLinearDriveParams_Params.InForceLimit, sizeof(SetLinearDriveParams_Params.InForceLimit), &InForceLimit, sizeof(InForceLimit));

	uFnSetLinearDriveParams->iNative = 0;
	uFnSetLinearDriveParams->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetLinearDriveParams, &SetLinearDriveParams_Params, nullptr);
	uFnSetLinearDriveParams->FunctionFlags |= 0x400;
	uFnSetLinearDriveParams->iNative = 25696;
};

// Function Engine.RB_ConstraintInstance.SetLinearVelocityTarget
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25702])
// Parameter Info:
// struct FVector                 InVelTarget                    (CPF_Parm)

void URB_ConstraintInstance::SetLinearVelocityTarget(const struct FVector& InVelTarget)
{
	static UFunction* uFnSetLinearVelocityTarget = nullptr;

	if (!uFnSetLinearVelocityTarget)
	{
		uFnSetLinearVelocityTarget = UFunction::FindFunction("Function Engine.RB_ConstraintInstance.SetLinearVelocityTarget");
	}

	URB_ConstraintInstance_execSetLinearVelocityTarget_Params SetLinearVelocityTarget_Params;
	memset(&SetLinearVelocityTarget_Params, 0, sizeof(SetLinearVelocityTarget_Params));
	memcpy_s(&SetLinearVelocityTarget_Params.InVelTarget, sizeof(SetLinearVelocityTarget_Params.InVelTarget), &InVelTarget, sizeof(InVelTarget));

	uFnSetLinearVelocityTarget->iNative = 0;
	uFnSetLinearVelocityTarget->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetLinearVelocityTarget, &SetLinearVelocityTarget_Params, nullptr);
	uFnSetLinearVelocityTarget->FunctionFlags |= 0x400;
	uFnSetLinearVelocityTarget->iNative = 25702;
};

// Function Engine.RB_ConstraintInstance.SetLinearPositionTarget
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25700])
// Parameter Info:
// struct FVector                 InPosTarget                    (CPF_Parm)

void URB_ConstraintInstance::SetLinearPositionTarget(const struct FVector& InPosTarget)
{
	static UFunction* uFnSetLinearPositionTarget = nullptr;

	if (!uFnSetLinearPositionTarget)
	{
		uFnSetLinearPositionTarget = UFunction::FindFunction("Function Engine.RB_ConstraintInstance.SetLinearPositionTarget");
	}

	URB_ConstraintInstance_execSetLinearPositionTarget_Params SetLinearPositionTarget_Params;
	memset(&SetLinearPositionTarget_Params, 0, sizeof(SetLinearPositionTarget_Params));
	memcpy_s(&SetLinearPositionTarget_Params.InPosTarget, sizeof(SetLinearPositionTarget_Params.InPosTarget), &InPosTarget, sizeof(InPosTarget));

	uFnSetLinearPositionTarget->iNative = 0;
	uFnSetLinearPositionTarget->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetLinearPositionTarget, &SetLinearPositionTarget_Params, nullptr);
	uFnSetLinearPositionTarget->FunctionFlags |= 0x400;
	uFnSetLinearPositionTarget->iNative = 25700;
};

// Function Engine.RB_ConstraintInstance.SetAngularVelocityDrive
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25583])
// Parameter Info:
// uint32_t                       bEnableSwingDrive              (CPF_Parm)
// uint32_t                       bEnableTwistDrive              (CPF_Parm)

void URB_ConstraintInstance::SetAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive)
{
	static UFunction* uFnSetAngularVelocityDrive = nullptr;

	if (!uFnSetAngularVelocityDrive)
	{
		uFnSetAngularVelocityDrive = UFunction::FindFunction("Function Engine.RB_ConstraintInstance.SetAngularVelocityDrive");
	}

	URB_ConstraintInstance_execSetAngularVelocityDrive_Params SetAngularVelocityDrive_Params;
	memset(&SetAngularVelocityDrive_Params, 0, sizeof(SetAngularVelocityDrive_Params));
	SetAngularVelocityDrive_Params.bEnableSwingDrive = bEnableSwingDrive;
	SetAngularVelocityDrive_Params.bEnableTwistDrive = bEnableTwistDrive;

	uFnSetAngularVelocityDrive->iNative = 0;
	uFnSetAngularVelocityDrive->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetAngularVelocityDrive, &SetAngularVelocityDrive_Params, nullptr);
	uFnSetAngularVelocityDrive->FunctionFlags |= 0x400;
	uFnSetAngularVelocityDrive->iNative = 25583;
};

// Function Engine.RB_ConstraintInstance.SetAngularPositionDrive
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25581])
// Parameter Info:
// uint32_t                       bEnableSwingDrive              (CPF_Parm)
// uint32_t                       bEnableTwistDrive              (CPF_Parm)

void URB_ConstraintInstance::SetAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive)
{
	static UFunction* uFnSetAngularPositionDrive = nullptr;

	if (!uFnSetAngularPositionDrive)
	{
		uFnSetAngularPositionDrive = UFunction::FindFunction("Function Engine.RB_ConstraintInstance.SetAngularPositionDrive");
	}

	URB_ConstraintInstance_execSetAngularPositionDrive_Params SetAngularPositionDrive_Params;
	memset(&SetAngularPositionDrive_Params, 0, sizeof(SetAngularPositionDrive_Params));
	SetAngularPositionDrive_Params.bEnableSwingDrive = bEnableSwingDrive;
	SetAngularPositionDrive_Params.bEnableTwistDrive = bEnableTwistDrive;

	uFnSetAngularPositionDrive->iNative = 0;
	uFnSetAngularPositionDrive->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetAngularPositionDrive, &SetAngularPositionDrive_Params, nullptr);
	uFnSetAngularPositionDrive->FunctionFlags |= 0x400;
	uFnSetAngularPositionDrive->iNative = 25581;
};

// Function Engine.RB_ConstraintInstance.SetLinearVelocityDrive
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25701])
// Parameter Info:
// uint32_t                       bEnableXDrive                  (CPF_Parm)
// uint32_t                       bEnableYDrive                  (CPF_Parm)
// uint32_t                       bEnableZDrive                  (CPF_Parm)

void URB_ConstraintInstance::SetLinearVelocityDrive(bool bEnableXDrive, bool bEnableYDrive, bool bEnableZDrive)
{
	static UFunction* uFnSetLinearVelocityDrive = nullptr;

	if (!uFnSetLinearVelocityDrive)
	{
		uFnSetLinearVelocityDrive = UFunction::FindFunction("Function Engine.RB_ConstraintInstance.SetLinearVelocityDrive");
	}

	URB_ConstraintInstance_execSetLinearVelocityDrive_Params SetLinearVelocityDrive_Params;
	memset(&SetLinearVelocityDrive_Params, 0, sizeof(SetLinearVelocityDrive_Params));
	SetLinearVelocityDrive_Params.bEnableXDrive = bEnableXDrive;
	SetLinearVelocityDrive_Params.bEnableYDrive = bEnableYDrive;
	SetLinearVelocityDrive_Params.bEnableZDrive = bEnableZDrive;

	uFnSetLinearVelocityDrive->iNative = 0;
	uFnSetLinearVelocityDrive->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetLinearVelocityDrive, &SetLinearVelocityDrive_Params, nullptr);
	uFnSetLinearVelocityDrive->FunctionFlags |= 0x400;
	uFnSetLinearVelocityDrive->iNative = 25701;
};

// Function Engine.RB_ConstraintInstance.SetLinearPositionDrive
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25699])
// Parameter Info:
// uint32_t                       bEnableXDrive                  (CPF_Parm)
// uint32_t                       bEnableYDrive                  (CPF_Parm)
// uint32_t                       bEnableZDrive                  (CPF_Parm)

void URB_ConstraintInstance::SetLinearPositionDrive(bool bEnableXDrive, bool bEnableYDrive, bool bEnableZDrive)
{
	static UFunction* uFnSetLinearPositionDrive = nullptr;

	if (!uFnSetLinearPositionDrive)
	{
		uFnSetLinearPositionDrive = UFunction::FindFunction("Function Engine.RB_ConstraintInstance.SetLinearPositionDrive");
	}

	URB_ConstraintInstance_execSetLinearPositionDrive_Params SetLinearPositionDrive_Params;
	memset(&SetLinearPositionDrive_Params, 0, sizeof(SetLinearPositionDrive_Params));
	SetLinearPositionDrive_Params.bEnableXDrive = bEnableXDrive;
	SetLinearPositionDrive_Params.bEnableYDrive = bEnableYDrive;
	SetLinearPositionDrive_Params.bEnableZDrive = bEnableZDrive;

	uFnSetLinearPositionDrive->iNative = 0;
	uFnSetLinearPositionDrive->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetLinearPositionDrive, &SetLinearPositionDrive_Params, nullptr);
	uFnSetLinearPositionDrive->FunctionFlags |= 0x400;
	uFnSetLinearPositionDrive->iNative = 25699;
};

// Function Engine.RB_ConstraintInstance.GetConstraintLocation
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20539])
// Parameter Info:
// struct FVector                 ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

struct FVector URB_ConstraintInstance::GetConstraintLocation()
{
	static UFunction* uFnGetConstraintLocation = nullptr;

	if (!uFnGetConstraintLocation)
	{
		uFnGetConstraintLocation = UFunction::FindFunction("Function Engine.RB_ConstraintInstance.GetConstraintLocation");
	}

	URB_ConstraintInstance_execGetConstraintLocation_Params GetConstraintLocation_Params;
	memset(&GetConstraintLocation_Params, 0, sizeof(GetConstraintLocation_Params));

	uFnGetConstraintLocation->iNative = 0;
	uFnGetConstraintLocation->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetConstraintLocation, &GetConstraintLocation_Params, nullptr);
	uFnGetConstraintLocation->FunctionFlags |= 0x400;
	uFnGetConstraintLocation->iNative = 20539;

	return GetConstraintLocation_Params.ReturnValue;
};

// Function Engine.RB_ConstraintInstance.GetPhysicsAssetInstance
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20674])
// Parameter Info:
// class UPhysicsAssetInstance*   ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class UPhysicsAssetInstance* URB_ConstraintInstance::GetPhysicsAssetInstance()
{
	static UFunction* uFnGetPhysicsAssetInstance = nullptr;

	if (!uFnGetPhysicsAssetInstance)
	{
		uFnGetPhysicsAssetInstance = UFunction::FindFunction("Function Engine.RB_ConstraintInstance.GetPhysicsAssetInstance");
	}

	URB_ConstraintInstance_execGetPhysicsAssetInstance_Params GetPhysicsAssetInstance_Params;
	memset(&GetPhysicsAssetInstance_Params, 0, sizeof(GetPhysicsAssetInstance_Params));

	uFnGetPhysicsAssetInstance->iNative = 0;
	uFnGetPhysicsAssetInstance->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetPhysicsAssetInstance, &GetPhysicsAssetInstance_Params, nullptr);
	uFnGetPhysicsAssetInstance->FunctionFlags |= 0x400;
	uFnGetPhysicsAssetInstance->iNative = 20674;

	return GetPhysicsAssetInstance_Params.ReturnValue;
};

// Function Engine.RB_ConstraintInstance.TermConstraint
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[26554])
// Parameter Info:

void URB_ConstraintInstance::TermConstraint()
{
	static UFunction* uFnTermConstraint = nullptr;

	if (!uFnTermConstraint)
	{
		uFnTermConstraint = UFunction::FindFunction("Function Engine.RB_ConstraintInstance.TermConstraint");
	}

	URB_ConstraintInstance_execTermConstraint_Params TermConstraint_Params;
	memset(&TermConstraint_Params, 0, sizeof(TermConstraint_Params));

	uFnTermConstraint->iNative = 0;
	uFnTermConstraint->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnTermConstraint, &TermConstraint_Params, nullptr);
	uFnTermConstraint->FunctionFlags |= 0x400;
	uFnTermConstraint->iNative = 26554;
};

// Function Engine.RB_ConstraintInstance.InitConstraint
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[21145])
// Parameter Info:
// class UPrimitiveComponent*     PrimComp1                      (CPF_Parm | CPF_EditInline)
// class UPrimitiveComponent*     PrimComp2                      (CPF_Parm | CPF_EditInline)
// class URB_ConstraintSetup*     Setup                          (CPF_Parm)
// float                          Scale                          (CPF_Parm)
// class AActor*                  InOwner                        (CPF_Parm)
// class UPrimitiveComponent*     InPrimComp                     (CPF_Parm | CPF_EditInline)
// uint32_t                       bMakeKinForBody1               (CPF_Parm)

void URB_ConstraintInstance::InitConstraint(class UPrimitiveComponent* PrimComp1, class UPrimitiveComponent* PrimComp2, class URB_ConstraintSetup* Setup, float Scale, class AActor* InOwner, class UPrimitiveComponent* InPrimComp, bool bMakeKinForBody1)
{
	static UFunction* uFnInitConstraint = nullptr;

	if (!uFnInitConstraint)
	{
		uFnInitConstraint = UFunction::FindFunction("Function Engine.RB_ConstraintInstance.InitConstraint");
	}

	URB_ConstraintInstance_execInitConstraint_Params InitConstraint_Params;
	memset(&InitConstraint_Params, 0, sizeof(InitConstraint_Params));
	InitConstraint_Params.PrimComp1 = PrimComp1;
	InitConstraint_Params.PrimComp2 = PrimComp2;
	InitConstraint_Params.Setup = Setup;
	memcpy_s(&InitConstraint_Params.Scale, sizeof(InitConstraint_Params.Scale), &Scale, sizeof(Scale));
	InitConstraint_Params.InOwner = InOwner;
	InitConstraint_Params.InPrimComp = InPrimComp;
	InitConstraint_Params.bMakeKinForBody1 = bMakeKinForBody1;

	uFnInitConstraint->iNative = 0;
	uFnInitConstraint->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnInitConstraint, &InitConstraint_Params, nullptr);
	uFnInitConstraint->FunctionFlags |= 0x400;
	uFnInitConstraint->iNative = 21145;
};

// Function Engine.NxGenericForceFieldBrush.PostBeginPlay
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void ANxGenericForceFieldBrush::eventPostBeginPlay()
{
	static UFunction* uFnPostBeginPlay = nullptr;

	if (!uFnPostBeginPlay)
	{
		uFnPostBeginPlay = UFunction::FindFunction("Function Engine.NxGenericForceFieldBrush.PostBeginPlay");
	}

	ANxGenericForceFieldBrush_eventPostBeginPlay_Params PostBeginPlay_Params;
	memset(&PostBeginPlay_Params, 0, sizeof(PostBeginPlay_Params));

	this->ProcessEvent(uFnPostBeginPlay, &PostBeginPlay_Params, nullptr);
};

// Function Engine.NxForceField.OnToggle
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_Toggle*          inAction                       (CPF_Parm)

void ANxForceField::OnToggle(class USeqAct_Toggle* inAction)
{
	static UFunction* uFnOnToggle = nullptr;

	if (!uFnOnToggle)
	{
		uFnOnToggle = UFunction::FindFunction("Function Engine.NxForceField.OnToggle");
	}

	ANxForceField_execOnToggle_Params OnToggle_Params;
	memset(&OnToggle_Params, 0, sizeof(OnToggle_Params));
	OnToggle_Params.inAction = inAction;

	this->ProcessEvent(uFnOnToggle, &OnToggle_Params, nullptr);
};

// Function Engine.NxForceField.DoInitRBPhys
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[19113])
// Parameter Info:

void ANxForceField::DoInitRBPhys()
{
	static UFunction* uFnDoInitRBPhys = nullptr;

	if (!uFnDoInitRBPhys)
	{
		uFnDoInitRBPhys = UFunction::FindFunction("Function Engine.NxForceField.DoInitRBPhys");
	}

	ANxForceField_execDoInitRBPhys_Params DoInitRBPhys_Params;
	memset(&DoInitRBPhys_Params, 0, sizeof(DoInitRBPhys_Params));

	uFnDoInitRBPhys->iNative = 0;
	uFnDoInitRBPhys->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnDoInitRBPhys, &DoInitRBPhys_Params, nullptr);
	uFnDoInitRBPhys->FunctionFlags |= 0x400;
	uFnDoInitRBPhys->iNative = 19113;
};

// Function Engine.NxCylindricalForceFieldCapsule.DoInitRBPhys
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[19113])
// Parameter Info:

void ANxCylindricalForceFieldCapsule::DoInitRBPhys()
{
	static UFunction* uFnDoInitRBPhys = nullptr;

	if (!uFnDoInitRBPhys)
	{
		uFnDoInitRBPhys = UFunction::FindFunction("Function Engine.NxCylindricalForceFieldCapsule.DoInitRBPhys");
	}

	ANxCylindricalForceFieldCapsule_execDoInitRBPhys_Params DoInitRBPhys_Params;
	memset(&DoInitRBPhys_Params, 0, sizeof(DoInitRBPhys_Params));

	uFnDoInitRBPhys->iNative = 0;
	uFnDoInitRBPhys->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnDoInitRBPhys, &DoInitRBPhys_Params, nullptr);
	uFnDoInitRBPhys->FunctionFlags |= 0x400;
	uFnDoInitRBPhys->iNative = 19113;
};

// Function Engine.NxForceFieldGeneric.DoInitRBPhys
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[19113])
// Parameter Info:

void ANxForceFieldGeneric::DoInitRBPhys()
{
	static UFunction* uFnDoInitRBPhys = nullptr;

	if (!uFnDoInitRBPhys)
	{
		uFnDoInitRBPhys = UFunction::FindFunction("Function Engine.NxForceFieldGeneric.DoInitRBPhys");
	}

	ANxForceFieldGeneric_execDoInitRBPhys_Params DoInitRBPhys_Params;
	memset(&DoInitRBPhys_Params, 0, sizeof(DoInitRBPhys_Params));

	uFnDoInitRBPhys->iNative = 0;
	uFnDoInitRBPhys->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnDoInitRBPhys, &DoInitRBPhys_Params, nullptr);
	uFnDoInitRBPhys->FunctionFlags |= 0x400;
	uFnDoInitRBPhys->iNative = 19113;
};

// Function Engine.NxForceFieldRadial.DoInitRBPhys
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[19113])
// Parameter Info:

void ANxForceFieldRadial::DoInitRBPhys()
{
	static UFunction* uFnDoInitRBPhys = nullptr;

	if (!uFnDoInitRBPhys)
	{
		uFnDoInitRBPhys = UFunction::FindFunction("Function Engine.NxForceFieldRadial.DoInitRBPhys");
	}

	ANxForceFieldRadial_execDoInitRBPhys_Params DoInitRBPhys_Params;
	memset(&DoInitRBPhys_Params, 0, sizeof(DoInitRBPhys_Params));

	uFnDoInitRBPhys->iNative = 0;
	uFnDoInitRBPhys->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnDoInitRBPhys, &DoInitRBPhys_Params, nullptr);
	uFnDoInitRBPhys->FunctionFlags |= 0x400;
	uFnDoInitRBPhys->iNative = 19113;
};

// Function Engine.NxForceFieldTornado.DoInitRBPhys
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[19113])
// Parameter Info:

void ANxForceFieldTornado::DoInitRBPhys()
{
	static UFunction* uFnDoInitRBPhys = nullptr;

	if (!uFnDoInitRBPhys)
	{
		uFnDoInitRBPhys = UFunction::FindFunction("Function Engine.NxForceFieldTornado.DoInitRBPhys");
	}

	ANxForceFieldTornado_execDoInitRBPhys_Params DoInitRBPhys_Params;
	memset(&DoInitRBPhys_Params, 0, sizeof(DoInitRBPhys_Params));

	uFnDoInitRBPhys->iNative = 0;
	uFnDoInitRBPhys->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnDoInitRBPhys, &DoInitRBPhys_Params, nullptr);
	uFnDoInitRBPhys->FunctionFlags |= 0x400;
	uFnDoInitRBPhys->iNative = 19113;
};

// Function Engine.NxGenericForceFieldBox.DoInitRBPhys
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[19113])
// Parameter Info:

void ANxGenericForceFieldBox::DoInitRBPhys()
{
	static UFunction* uFnDoInitRBPhys = nullptr;

	if (!uFnDoInitRBPhys)
	{
		uFnDoInitRBPhys = UFunction::FindFunction("Function Engine.NxGenericForceFieldBox.DoInitRBPhys");
	}

	ANxGenericForceFieldBox_execDoInitRBPhys_Params DoInitRBPhys_Params;
	memset(&DoInitRBPhys_Params, 0, sizeof(DoInitRBPhys_Params));

	uFnDoInitRBPhys->iNative = 0;
	uFnDoInitRBPhys->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnDoInitRBPhys, &DoInitRBPhys_Params, nullptr);
	uFnDoInitRBPhys->FunctionFlags |= 0x400;
	uFnDoInitRBPhys->iNative = 19113;
};

// Function Engine.RB_CylindricalForceActor.OnToggle
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_Toggle*          inAction                       (CPF_Parm)

void ARB_CylindricalForceActor::OnToggle(class USeqAct_Toggle* inAction)
{
	static UFunction* uFnOnToggle = nullptr;

	if (!uFnOnToggle)
	{
		uFnOnToggle = UFunction::FindFunction("Function Engine.RB_CylindricalForceActor.OnToggle");
	}

	ARB_CylindricalForceActor_execOnToggle_Params OnToggle_Params;
	memset(&OnToggle_Params, 0, sizeof(OnToggle_Params));
	OnToggle_Params.inAction = inAction;

	this->ProcessEvent(uFnOnToggle, &OnToggle_Params, nullptr);
};

// Function Engine.RB_RadialForceActor.OnToggle
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_Toggle*          inAction                       (CPF_Parm)

void ARB_RadialForceActor::OnToggle(class USeqAct_Toggle* inAction)
{
	static UFunction* uFnOnToggle = nullptr;

	if (!uFnOnToggle)
	{
		uFnOnToggle = UFunction::FindFunction("Function Engine.RB_RadialForceActor.OnToggle");
	}

	ARB_RadialForceActor_execOnToggle_Params OnToggle_Params;
	memset(&OnToggle_Params, 0, sizeof(OnToggle_Params));
	OnToggle_Params.inAction = inAction;

	this->ProcessEvent(uFnOnToggle, &OnToggle_Params, nullptr);
};

// Function Engine.ForceFieldShape.GetDrawComponent
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UPrimitiveComponent*     ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline)

class UPrimitiveComponent* UForceFieldShape::eventGetDrawComponent()
{
	static UFunction* uFnGetDrawComponent = nullptr;

	if (!uFnGetDrawComponent)
	{
		uFnGetDrawComponent = UFunction::FindFunction("Function Engine.ForceFieldShape.GetDrawComponent");
	}

	UForceFieldShape_eventGetDrawComponent_Params GetDrawComponent_Params;
	memset(&GetDrawComponent_Params, 0, sizeof(GetDrawComponent_Params));

	this->ProcessEvent(uFnGetDrawComponent, &GetDrawComponent_Params, nullptr);

	return GetDrawComponent_Params.ReturnValue;
};

// Function Engine.ForceFieldShape.FillByCylinder
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          BottomRadius                   (CPF_Parm)
// float                          TopRadius                      (CPF_Parm)
// float                          Height                         (CPF_Parm)
// float                          HeightOffset                   (CPF_Parm)

void UForceFieldShape::eventFillByCylinder(float BottomRadius, float TopRadius, float Height, float HeightOffset)
{
	static UFunction* uFnFillByCylinder = nullptr;

	if (!uFnFillByCylinder)
	{
		uFnFillByCylinder = UFunction::FindFunction("Function Engine.ForceFieldShape.FillByCylinder");
	}

	UForceFieldShape_eventFillByCylinder_Params FillByCylinder_Params;
	memset(&FillByCylinder_Params, 0, sizeof(FillByCylinder_Params));
	memcpy_s(&FillByCylinder_Params.BottomRadius, sizeof(FillByCylinder_Params.BottomRadius), &BottomRadius, sizeof(BottomRadius));
	memcpy_s(&FillByCylinder_Params.TopRadius, sizeof(FillByCylinder_Params.TopRadius), &TopRadius, sizeof(TopRadius));
	memcpy_s(&FillByCylinder_Params.Height, sizeof(FillByCylinder_Params.Height), &Height, sizeof(Height));
	memcpy_s(&FillByCylinder_Params.HeightOffset, sizeof(FillByCylinder_Params.HeightOffset), &HeightOffset, sizeof(HeightOffset));

	this->ProcessEvent(uFnFillByCylinder, &FillByCylinder_Params, nullptr);
};

// Function Engine.ForceFieldShape.FillByCapsule
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          Height                         (CPF_Parm)
// float                          Radius                         (CPF_Parm)

void UForceFieldShape::eventFillByCapsule(float Height, float Radius)
{
	static UFunction* uFnFillByCapsule = nullptr;

	if (!uFnFillByCapsule)
	{
		uFnFillByCapsule = UFunction::FindFunction("Function Engine.ForceFieldShape.FillByCapsule");
	}

	UForceFieldShape_eventFillByCapsule_Params FillByCapsule_Params;
	memset(&FillByCapsule_Params, 0, sizeof(FillByCapsule_Params));
	memcpy_s(&FillByCapsule_Params.Height, sizeof(FillByCapsule_Params.Height), &Height, sizeof(Height));
	memcpy_s(&FillByCapsule_Params.Radius, sizeof(FillByCapsule_Params.Radius), &Radius, sizeof(Radius));

	this->ProcessEvent(uFnFillByCapsule, &FillByCapsule_Params, nullptr);
};

// Function Engine.ForceFieldShape.FillByBox
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FVector                 Dimension                      (CPF_Parm)

void UForceFieldShape::eventFillByBox(const struct FVector& Dimension)
{
	static UFunction* uFnFillByBox = nullptr;

	if (!uFnFillByBox)
	{
		uFnFillByBox = UFunction::FindFunction("Function Engine.ForceFieldShape.FillByBox");
	}

	UForceFieldShape_eventFillByBox_Params FillByBox_Params;
	memset(&FillByBox_Params, 0, sizeof(FillByBox_Params));
	memcpy_s(&FillByBox_Params.Dimension, sizeof(FillByBox_Params.Dimension), &Dimension, sizeof(Dimension));

	this->ProcessEvent(uFnFillByBox, &FillByBox_Params, nullptr);
};

// Function Engine.ForceFieldShape.FillBySphere
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          Radius                         (CPF_Parm)

void UForceFieldShape::eventFillBySphere(float Radius)
{
	static UFunction* uFnFillBySphere = nullptr;

	if (!uFnFillBySphere)
	{
		uFnFillBySphere = UFunction::FindFunction("Function Engine.ForceFieldShape.FillBySphere");
	}

	UForceFieldShape_eventFillBySphere_Params FillBySphere_Params;
	memset(&FillBySphere_Params, 0, sizeof(FillBySphere_Params));
	memcpy_s(&FillBySphere_Params.Radius, sizeof(FillBySphere_Params.Radius), &Radius, sizeof(Radius));

	this->ProcessEvent(uFnFillBySphere, &FillBySphere_Params, nullptr);
};

// Function Engine.ForceFieldShapeBox.GetDrawComponent
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UPrimitiveComponent*     ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline)

class UPrimitiveComponent* UForceFieldShapeBox::eventGetDrawComponent()
{
	static UFunction* uFnGetDrawComponent = nullptr;

	if (!uFnGetDrawComponent)
	{
		uFnGetDrawComponent = UFunction::FindFunction("Function Engine.ForceFieldShapeBox.GetDrawComponent");
	}

	UForceFieldShapeBox_eventGetDrawComponent_Params GetDrawComponent_Params;
	memset(&GetDrawComponent_Params, 0, sizeof(GetDrawComponent_Params));

	this->ProcessEvent(uFnGetDrawComponent, &GetDrawComponent_Params, nullptr);

	return GetDrawComponent_Params.ReturnValue;
};

// Function Engine.ForceFieldShapeBox.FillByCylinder
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          BottomRadius                   (CPF_Parm)
// float                          TopRadius                      (CPF_Parm)
// float                          Height                         (CPF_Parm)
// float                          HeightOffset                   (CPF_Parm)

void UForceFieldShapeBox::eventFillByCylinder(float BottomRadius, float TopRadius, float Height, float HeightOffset)
{
	static UFunction* uFnFillByCylinder = nullptr;

	if (!uFnFillByCylinder)
	{
		uFnFillByCylinder = UFunction::FindFunction("Function Engine.ForceFieldShapeBox.FillByCylinder");
	}

	UForceFieldShapeBox_eventFillByCylinder_Params FillByCylinder_Params;
	memset(&FillByCylinder_Params, 0, sizeof(FillByCylinder_Params));
	memcpy_s(&FillByCylinder_Params.BottomRadius, sizeof(FillByCylinder_Params.BottomRadius), &BottomRadius, sizeof(BottomRadius));
	memcpy_s(&FillByCylinder_Params.TopRadius, sizeof(FillByCylinder_Params.TopRadius), &TopRadius, sizeof(TopRadius));
	memcpy_s(&FillByCylinder_Params.Height, sizeof(FillByCylinder_Params.Height), &Height, sizeof(Height));
	memcpy_s(&FillByCylinder_Params.HeightOffset, sizeof(FillByCylinder_Params.HeightOffset), &HeightOffset, sizeof(HeightOffset));

	this->ProcessEvent(uFnFillByCylinder, &FillByCylinder_Params, nullptr);
};

// Function Engine.ForceFieldShapeBox.FillByCapsule
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          Height                         (CPF_Parm)
// float                          Radius                         (CPF_Parm)

void UForceFieldShapeBox::eventFillByCapsule(float Height, float Radius)
{
	static UFunction* uFnFillByCapsule = nullptr;

	if (!uFnFillByCapsule)
	{
		uFnFillByCapsule = UFunction::FindFunction("Function Engine.ForceFieldShapeBox.FillByCapsule");
	}

	UForceFieldShapeBox_eventFillByCapsule_Params FillByCapsule_Params;
	memset(&FillByCapsule_Params, 0, sizeof(FillByCapsule_Params));
	memcpy_s(&FillByCapsule_Params.Height, sizeof(FillByCapsule_Params.Height), &Height, sizeof(Height));
	memcpy_s(&FillByCapsule_Params.Radius, sizeof(FillByCapsule_Params.Radius), &Radius, sizeof(Radius));

	this->ProcessEvent(uFnFillByCapsule, &FillByCapsule_Params, nullptr);
};

// Function Engine.ForceFieldShapeBox.FillByBox
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FVector                 Extent                         (CPF_Parm)

void UForceFieldShapeBox::eventFillByBox(const struct FVector& Extent)
{
	static UFunction* uFnFillByBox = nullptr;

	if (!uFnFillByBox)
	{
		uFnFillByBox = UFunction::FindFunction("Function Engine.ForceFieldShapeBox.FillByBox");
	}

	UForceFieldShapeBox_eventFillByBox_Params FillByBox_Params;
	memset(&FillByBox_Params, 0, sizeof(FillByBox_Params));
	memcpy_s(&FillByBox_Params.Extent, sizeof(FillByBox_Params.Extent), &Extent, sizeof(Extent));

	this->ProcessEvent(uFnFillByBox, &FillByBox_Params, nullptr);
};

// Function Engine.ForceFieldShapeBox.FillBySphere
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          Radius                         (CPF_Parm)

void UForceFieldShapeBox::eventFillBySphere(float Radius)
{
	static UFunction* uFnFillBySphere = nullptr;

	if (!uFnFillBySphere)
	{
		uFnFillBySphere = UFunction::FindFunction("Function Engine.ForceFieldShapeBox.FillBySphere");
	}

	UForceFieldShapeBox_eventFillBySphere_Params FillBySphere_Params;
	memset(&FillBySphere_Params, 0, sizeof(FillBySphere_Params));
	memcpy_s(&FillBySphere_Params.Radius, sizeof(FillBySphere_Params.Radius), &Radius, sizeof(Radius));

	this->ProcessEvent(uFnFillBySphere, &FillBySphere_Params, nullptr);
};

// Function Engine.ForceFieldShapeBox.GetRadii
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FVector                 ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

struct FVector UForceFieldShapeBox::eventGetRadii()
{
	static UFunction* uFnGetRadii = nullptr;

	if (!uFnGetRadii)
	{
		uFnGetRadii = UFunction::FindFunction("Function Engine.ForceFieldShapeBox.GetRadii");
	}

	UForceFieldShapeBox_eventGetRadii_Params GetRadii_Params;
	memset(&GetRadii_Params, 0, sizeof(GetRadii_Params));

	this->ProcessEvent(uFnGetRadii, &GetRadii_Params, nullptr);

	return GetRadii_Params.ReturnValue;
};

// Function Engine.ForceFieldShapeCapsule.GetDrawComponent
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UPrimitiveComponent*     ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline)

class UPrimitiveComponent* UForceFieldShapeCapsule::eventGetDrawComponent()
{
	static UFunction* uFnGetDrawComponent = nullptr;

	if (!uFnGetDrawComponent)
	{
		uFnGetDrawComponent = UFunction::FindFunction("Function Engine.ForceFieldShapeCapsule.GetDrawComponent");
	}

	UForceFieldShapeCapsule_eventGetDrawComponent_Params GetDrawComponent_Params;
	memset(&GetDrawComponent_Params, 0, sizeof(GetDrawComponent_Params));

	this->ProcessEvent(uFnGetDrawComponent, &GetDrawComponent_Params, nullptr);

	return GetDrawComponent_Params.ReturnValue;
};

// Function Engine.ForceFieldShapeCapsule.FillByCylinder
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          BottomRadius                   (CPF_Parm)
// float                          TopRadius                      (CPF_Parm)
// float                          Height                         (CPF_Parm)
// float                          HeightOffset                   (CPF_Parm)

void UForceFieldShapeCapsule::eventFillByCylinder(float BottomRadius, float TopRadius, float Height, float HeightOffset)
{
	static UFunction* uFnFillByCylinder = nullptr;

	if (!uFnFillByCylinder)
	{
		uFnFillByCylinder = UFunction::FindFunction("Function Engine.ForceFieldShapeCapsule.FillByCylinder");
	}

	UForceFieldShapeCapsule_eventFillByCylinder_Params FillByCylinder_Params;
	memset(&FillByCylinder_Params, 0, sizeof(FillByCylinder_Params));
	memcpy_s(&FillByCylinder_Params.BottomRadius, sizeof(FillByCylinder_Params.BottomRadius), &BottomRadius, sizeof(BottomRadius));
	memcpy_s(&FillByCylinder_Params.TopRadius, sizeof(FillByCylinder_Params.TopRadius), &TopRadius, sizeof(TopRadius));
	memcpy_s(&FillByCylinder_Params.Height, sizeof(FillByCylinder_Params.Height), &Height, sizeof(Height));
	memcpy_s(&FillByCylinder_Params.HeightOffset, sizeof(FillByCylinder_Params.HeightOffset), &HeightOffset, sizeof(HeightOffset));

	this->ProcessEvent(uFnFillByCylinder, &FillByCylinder_Params, nullptr);
};

// Function Engine.ForceFieldShapeCapsule.FillByCapsule
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          Height                         (CPF_Parm)
// float                          Radius                         (CPF_Parm)

void UForceFieldShapeCapsule::eventFillByCapsule(float Height, float Radius)
{
	static UFunction* uFnFillByCapsule = nullptr;

	if (!uFnFillByCapsule)
	{
		uFnFillByCapsule = UFunction::FindFunction("Function Engine.ForceFieldShapeCapsule.FillByCapsule");
	}

	UForceFieldShapeCapsule_eventFillByCapsule_Params FillByCapsule_Params;
	memset(&FillByCapsule_Params, 0, sizeof(FillByCapsule_Params));
	memcpy_s(&FillByCapsule_Params.Height, sizeof(FillByCapsule_Params.Height), &Height, sizeof(Height));
	memcpy_s(&FillByCapsule_Params.Radius, sizeof(FillByCapsule_Params.Radius), &Radius, sizeof(Radius));

	this->ProcessEvent(uFnFillByCapsule, &FillByCapsule_Params, nullptr);
};

// Function Engine.ForceFieldShapeCapsule.FillByBox
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FVector                 Extent                         (CPF_Parm)

void UForceFieldShapeCapsule::eventFillByBox(const struct FVector& Extent)
{
	static UFunction* uFnFillByBox = nullptr;

	if (!uFnFillByBox)
	{
		uFnFillByBox = UFunction::FindFunction("Function Engine.ForceFieldShapeCapsule.FillByBox");
	}

	UForceFieldShapeCapsule_eventFillByBox_Params FillByBox_Params;
	memset(&FillByBox_Params, 0, sizeof(FillByBox_Params));
	memcpy_s(&FillByBox_Params.Extent, sizeof(FillByBox_Params.Extent), &Extent, sizeof(Extent));

	this->ProcessEvent(uFnFillByBox, &FillByBox_Params, nullptr);
};

// Function Engine.ForceFieldShapeCapsule.FillBySphere
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          Radius                         (CPF_Parm)

void UForceFieldShapeCapsule::eventFillBySphere(float Radius)
{
	static UFunction* uFnFillBySphere = nullptr;

	if (!uFnFillBySphere)
	{
		uFnFillBySphere = UFunction::FindFunction("Function Engine.ForceFieldShapeCapsule.FillBySphere");
	}

	UForceFieldShapeCapsule_eventFillBySphere_Params FillBySphere_Params;
	memset(&FillBySphere_Params, 0, sizeof(FillBySphere_Params));
	memcpy_s(&FillBySphere_Params.Radius, sizeof(FillBySphere_Params.Radius), &Radius, sizeof(Radius));

	this->ProcessEvent(uFnFillBySphere, &FillBySphere_Params, nullptr);
};

// Function Engine.ForceFieldShapeCapsule.GetRadius
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

float UForceFieldShapeCapsule::eventGetRadius()
{
	static UFunction* uFnGetRadius = nullptr;

	if (!uFnGetRadius)
	{
		uFnGetRadius = UFunction::FindFunction("Function Engine.ForceFieldShapeCapsule.GetRadius");
	}

	UForceFieldShapeCapsule_eventGetRadius_Params GetRadius_Params;
	memset(&GetRadius_Params, 0, sizeof(GetRadius_Params));

	this->ProcessEvent(uFnGetRadius, &GetRadius_Params, nullptr);

	return GetRadius_Params.ReturnValue;
};

// Function Engine.ForceFieldShapeCapsule.GetHeight
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

float UForceFieldShapeCapsule::eventGetHeight()
{
	static UFunction* uFnGetHeight = nullptr;

	if (!uFnGetHeight)
	{
		uFnGetHeight = UFunction::FindFunction("Function Engine.ForceFieldShapeCapsule.GetHeight");
	}

	UForceFieldShapeCapsule_eventGetHeight_Params GetHeight_Params;
	memset(&GetHeight_Params, 0, sizeof(GetHeight_Params));

	this->ProcessEvent(uFnGetHeight, &GetHeight_Params, nullptr);

	return GetHeight_Params.ReturnValue;
};

// Function Engine.ForceFieldShapeSphere.GetDrawComponent
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UPrimitiveComponent*     ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline)

class UPrimitiveComponent* UForceFieldShapeSphere::eventGetDrawComponent()
{
	static UFunction* uFnGetDrawComponent = nullptr;

	if (!uFnGetDrawComponent)
	{
		uFnGetDrawComponent = UFunction::FindFunction("Function Engine.ForceFieldShapeSphere.GetDrawComponent");
	}

	UForceFieldShapeSphere_eventGetDrawComponent_Params GetDrawComponent_Params;
	memset(&GetDrawComponent_Params, 0, sizeof(GetDrawComponent_Params));

	this->ProcessEvent(uFnGetDrawComponent, &GetDrawComponent_Params, nullptr);

	return GetDrawComponent_Params.ReturnValue;
};

// Function Engine.ForceFieldShapeSphere.FillByCylinder
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          BottomRadius                   (CPF_Parm)
// float                          TopRadius                      (CPF_Parm)
// float                          Height                         (CPF_Parm)
// float                          HeightOffset                   (CPF_Parm)

void UForceFieldShapeSphere::eventFillByCylinder(float BottomRadius, float TopRadius, float Height, float HeightOffset)
{
	static UFunction* uFnFillByCylinder = nullptr;

	if (!uFnFillByCylinder)
	{
		uFnFillByCylinder = UFunction::FindFunction("Function Engine.ForceFieldShapeSphere.FillByCylinder");
	}

	UForceFieldShapeSphere_eventFillByCylinder_Params FillByCylinder_Params;
	memset(&FillByCylinder_Params, 0, sizeof(FillByCylinder_Params));
	memcpy_s(&FillByCylinder_Params.BottomRadius, sizeof(FillByCylinder_Params.BottomRadius), &BottomRadius, sizeof(BottomRadius));
	memcpy_s(&FillByCylinder_Params.TopRadius, sizeof(FillByCylinder_Params.TopRadius), &TopRadius, sizeof(TopRadius));
	memcpy_s(&FillByCylinder_Params.Height, sizeof(FillByCylinder_Params.Height), &Height, sizeof(Height));
	memcpy_s(&FillByCylinder_Params.HeightOffset, sizeof(FillByCylinder_Params.HeightOffset), &HeightOffset, sizeof(HeightOffset));

	this->ProcessEvent(uFnFillByCylinder, &FillByCylinder_Params, nullptr);
};

// Function Engine.ForceFieldShapeSphere.FillByCapsule
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          Height                         (CPF_Parm)
// float                          Radius                         (CPF_Parm)

void UForceFieldShapeSphere::eventFillByCapsule(float Height, float Radius)
{
	static UFunction* uFnFillByCapsule = nullptr;

	if (!uFnFillByCapsule)
	{
		uFnFillByCapsule = UFunction::FindFunction("Function Engine.ForceFieldShapeSphere.FillByCapsule");
	}

	UForceFieldShapeSphere_eventFillByCapsule_Params FillByCapsule_Params;
	memset(&FillByCapsule_Params, 0, sizeof(FillByCapsule_Params));
	memcpy_s(&FillByCapsule_Params.Height, sizeof(FillByCapsule_Params.Height), &Height, sizeof(Height));
	memcpy_s(&FillByCapsule_Params.Radius, sizeof(FillByCapsule_Params.Radius), &Radius, sizeof(Radius));

	this->ProcessEvent(uFnFillByCapsule, &FillByCapsule_Params, nullptr);
};

// Function Engine.ForceFieldShapeSphere.FillByBox
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FVector                 Extent                         (CPF_Parm)

void UForceFieldShapeSphere::eventFillByBox(const struct FVector& Extent)
{
	static UFunction* uFnFillByBox = nullptr;

	if (!uFnFillByBox)
	{
		uFnFillByBox = UFunction::FindFunction("Function Engine.ForceFieldShapeSphere.FillByBox");
	}

	UForceFieldShapeSphere_eventFillByBox_Params FillByBox_Params;
	memset(&FillByBox_Params, 0, sizeof(FillByBox_Params));
	memcpy_s(&FillByBox_Params.Extent, sizeof(FillByBox_Params.Extent), &Extent, sizeof(Extent));

	this->ProcessEvent(uFnFillByBox, &FillByBox_Params, nullptr);
};

// Function Engine.ForceFieldShapeSphere.FillBySphere
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          Radius                         (CPF_Parm)

void UForceFieldShapeSphere::eventFillBySphere(float Radius)
{
	static UFunction* uFnFillBySphere = nullptr;

	if (!uFnFillBySphere)
	{
		uFnFillBySphere = UFunction::FindFunction("Function Engine.ForceFieldShapeSphere.FillBySphere");
	}

	UForceFieldShapeSphere_eventFillBySphere_Params FillBySphere_Params;
	memset(&FillBySphere_Params, 0, sizeof(FillBySphere_Params));
	memcpy_s(&FillBySphere_Params.Radius, sizeof(FillBySphere_Params.Radius), &Radius, sizeof(Radius));

	this->ProcessEvent(uFnFillBySphere, &FillBySphere_Params, nullptr);
};

// Function Engine.ForceFieldShapeSphere.GetRadius
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

float UForceFieldShapeSphere::eventGetRadius()
{
	static UFunction* uFnGetRadius = nullptr;

	if (!uFnGetRadius)
	{
		uFnGetRadius = UFunction::FindFunction("Function Engine.ForceFieldShapeSphere.GetRadius");
	}

	UForceFieldShapeSphere_eventGetRadius_Params GetRadius_Params;
	memset(&GetRadius_Params, 0, sizeof(GetRadius_Params));

	this->ProcessEvent(uFnGetRadius, &GetRadius_Params, nullptr);

	return GetRadius_Params.ReturnValue;
};

// Function Engine.SequenceObject.GetObjClassVersion
// [0x00022802] (FUNC_Defined | FUNC_Event | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t USequenceObject::eventGetObjClassVersion()
{
	static UFunction* uFnGetObjClassVersion = nullptr;

	if (!uFnGetObjClassVersion)
	{
		uFnGetObjClassVersion = UFunction::FindFunction("Function Engine.SequenceObject.GetObjClassVersion");
	}

	USequenceObject_eventGetObjClassVersion_Params GetObjClassVersion_Params;
	memset(&GetObjClassVersion_Params, 0, sizeof(GetObjClassVersion_Params));

	USequenceObject::StaticClass()->ProcessEvent(uFnGetObjClassVersion, &GetObjClassVersion_Params, nullptr);

	return GetObjClassVersion_Params.ReturnValue;
};

// Function Engine.SequenceObject.IsPastingIntoLevelSequenceAllowed
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool USequenceObject::eventIsPastingIntoLevelSequenceAllowed()
{
	static UFunction* uFnIsPastingIntoLevelSequenceAllowed = nullptr;

	if (!uFnIsPastingIntoLevelSequenceAllowed)
	{
		uFnIsPastingIntoLevelSequenceAllowed = UFunction::FindFunction("Function Engine.SequenceObject.IsPastingIntoLevelSequenceAllowed");
	}

	USequenceObject_eventIsPastingIntoLevelSequenceAllowed_Params IsPastingIntoLevelSequenceAllowed_Params;
	memset(&IsPastingIntoLevelSequenceAllowed_Params, 0, sizeof(IsPastingIntoLevelSequenceAllowed_Params));

	this->ProcessEvent(uFnIsPastingIntoLevelSequenceAllowed, &IsPastingIntoLevelSequenceAllowed_Params, nullptr);

	return IsPastingIntoLevelSequenceAllowed_Params.ReturnValue;
};

// Function Engine.SequenceObject.IsValidLevelSequenceObject
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool USequenceObject::eventIsValidLevelSequenceObject()
{
	static UFunction* uFnIsValidLevelSequenceObject = nullptr;

	if (!uFnIsValidLevelSequenceObject)
	{
		uFnIsValidLevelSequenceObject = UFunction::FindFunction("Function Engine.SequenceObject.IsValidLevelSequenceObject");
	}

	USequenceObject_eventIsValidLevelSequenceObject_Params IsValidLevelSequenceObject_Params;
	memset(&IsValidLevelSequenceObject_Params, 0, sizeof(IsValidLevelSequenceObject_Params));

	this->ProcessEvent(uFnIsValidLevelSequenceObject, &IsValidLevelSequenceObject_Params, nullptr);

	return IsValidLevelSequenceObject_Params.ReturnValue;
};

// Function Engine.SequenceObject.GetWorldInfo
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20822])
// Parameter Info:
// class AWorldInfo*              ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class AWorldInfo* USequenceObject::GetWorldInfo()
{
	static UFunction* uFnGetWorldInfo = nullptr;

	if (!uFnGetWorldInfo)
	{
		uFnGetWorldInfo = UFunction::FindFunction("Function Engine.SequenceObject.GetWorldInfo");
	}

	USequenceObject_execGetWorldInfo_Params GetWorldInfo_Params;
	memset(&GetWorldInfo_Params, 0, sizeof(GetWorldInfo_Params));

	uFnGetWorldInfo->iNative = 0;
	uFnGetWorldInfo->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetWorldInfo, &GetWorldInfo_Params, nullptr);
	uFnGetWorldInfo->FunctionFlags |= 0x400;
	uFnGetWorldInfo->iNative = 20822;

	return GetWorldInfo_Params.ReturnValue;
};

// Function Engine.SequenceObject.ScriptLog
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[770])
// Parameter Info:
// class FString                  LogText                        (CPF_Parm | CPF_NeedCtorLink)
// uint32_t                       bWarning                       (CPF_OptionalParm | CPF_Parm)

void USequenceObject::ScriptLog(const class FString& LogText, bool bWarning)
{
	static UFunction* uFnScriptLog = nullptr;

	if (!uFnScriptLog)
	{
		uFnScriptLog = UFunction::FindFunction("Function Engine.SequenceObject.ScriptLog");
	}

	USequenceObject_execScriptLog_Params ScriptLog_Params;
	memset(&ScriptLog_Params, 0, sizeof(ScriptLog_Params));
	memcpy_s(&ScriptLog_Params.LogText, sizeof(ScriptLog_Params.LogText), &LogText, sizeof(LogText));
	ScriptLog_Params.bWarning = bWarning;

	uFnScriptLog->iNative = 0;
	uFnScriptLog->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnScriptLog, &ScriptLog_Params, nullptr);
	uFnScriptLog->FunctionFlags |= 0x400;
	uFnScriptLog->iNative = 770;
};

// Function Engine.SequenceFrame.IsValidUISequenceObject
// [0x00024802] (FUNC_Defined | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UUIScreenObject*         TargetObject                   (CPF_OptionalParm | CPF_Parm)

bool USequenceFrame::eventIsValidUISequenceObject(class UUIScreenObject* TargetObject)
{
	static UFunction* uFnIsValidUISequenceObject = nullptr;

	if (!uFnIsValidUISequenceObject)
	{
		uFnIsValidUISequenceObject = UFunction::FindFunction("Function Engine.SequenceFrame.IsValidUISequenceObject");
	}

	USequenceFrame_eventIsValidUISequenceObject_Params IsValidUISequenceObject_Params;
	memset(&IsValidUISequenceObject_Params, 0, sizeof(IsValidUISequenceObject_Params));
	IsValidUISequenceObject_Params.TargetObject = TargetObject;

	this->ProcessEvent(uFnIsValidUISequenceObject, &IsValidUISequenceObject_Params, nullptr);

	return IsValidUISequenceObject_Params.ReturnValue;
};

// Function Engine.SequenceOp.ForceActivateOutput
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20254])
// Parameter Info:
// int32_t                        OutputIdx                      (CPF_Parm)

void USequenceOp::ForceActivateOutput(int32_t OutputIdx)
{
	static UFunction* uFnForceActivateOutput = nullptr;

	if (!uFnForceActivateOutput)
	{
		uFnForceActivateOutput = UFunction::FindFunction("Function Engine.SequenceOp.ForceActivateOutput");
	}

	USequenceOp_execForceActivateOutput_Params ForceActivateOutput_Params;
	memset(&ForceActivateOutput_Params, 0, sizeof(ForceActivateOutput_Params));
	memcpy_s(&ForceActivateOutput_Params.OutputIdx, sizeof(ForceActivateOutput_Params.OutputIdx), &OutputIdx, sizeof(OutputIdx));

	uFnForceActivateOutput->iNative = 0;
	uFnForceActivateOutput->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnForceActivateOutput, &ForceActivateOutput_Params, nullptr);
	uFnForceActivateOutput->FunctionFlags |= 0x400;
	uFnForceActivateOutput->iNative = 20254;
};

// Function Engine.SequenceOp.ForceActivateInput
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20253])
// Parameter Info:
// int32_t                        InputIdx                       (CPF_Parm)

void USequenceOp::ForceActivateInput(int32_t InputIdx)
{
	static UFunction* uFnForceActivateInput = nullptr;

	if (!uFnForceActivateInput)
	{
		uFnForceActivateInput = UFunction::FindFunction("Function Engine.SequenceOp.ForceActivateInput");
	}

	USequenceOp_execForceActivateInput_Params ForceActivateInput_Params;
	memset(&ForceActivateInput_Params, 0, sizeof(ForceActivateInput_Params));
	memcpy_s(&ForceActivateInput_Params.InputIdx, sizeof(ForceActivateInput_Params.InputIdx), &InputIdx, sizeof(InputIdx));

	uFnForceActivateInput->iNative = 0;
	uFnForceActivateInput->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnForceActivateInput, &ForceActivateInput_Params, nullptr);
	uFnForceActivateInput->FunctionFlags |= 0x400;
	uFnForceActivateInput->iNative = 20253;
};

// Function Engine.SequenceOp.GetController
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AController*             ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class AActor*                  TheActor                       (CPF_Parm)

class AController* USequenceOp::GetController(class AActor* TheActor)
{
	static UFunction* uFnGetController = nullptr;

	if (!uFnGetController)
	{
		uFnGetController = UFunction::FindFunction("Function Engine.SequenceOp.GetController");
	}

	USequenceOp_execGetController_Params GetController_Params;
	memset(&GetController_Params, 0, sizeof(GetController_Params));
	GetController_Params.TheActor = TheActor;

	this->ProcessEvent(uFnGetController, &GetController_Params, nullptr);

	return GetController_Params.ReturnValue;
};

// Function Engine.SequenceOp.Reset
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void USequenceOp::Reset()
{
	static UFunction* uFnReset = nullptr;

	if (!uFnReset)
	{
		uFnReset = UFunction::FindFunction("Function Engine.SequenceOp.Reset");
	}

	USequenceOp_execReset_Params Reset_Params;
	memset(&Reset_Params, 0, sizeof(Reset_Params));

	this->ProcessEvent(uFnReset, &Reset_Params, nullptr);
};

// Function Engine.SequenceOp.PublishLinkedVariableValues
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[24781])
// Parameter Info:

void USequenceOp::PublishLinkedVariableValues()
{
	static UFunction* uFnPublishLinkedVariableValues = nullptr;

	if (!uFnPublishLinkedVariableValues)
	{
		uFnPublishLinkedVariableValues = UFunction::FindFunction("Function Engine.SequenceOp.PublishLinkedVariableValues");
	}

	USequenceOp_execPublishLinkedVariableValues_Params PublishLinkedVariableValues_Params;
	memset(&PublishLinkedVariableValues_Params, 0, sizeof(PublishLinkedVariableValues_Params));

	uFnPublishLinkedVariableValues->iNative = 0;
	uFnPublishLinkedVariableValues->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnPublishLinkedVariableValues, &PublishLinkedVariableValues_Params, nullptr);
	uFnPublishLinkedVariableValues->FunctionFlags |= 0x400;
	uFnPublishLinkedVariableValues->iNative = 24781;
};

// Function Engine.SequenceOp.PopulateLinkedVariableValues
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[24390])
// Parameter Info:

void USequenceOp::PopulateLinkedVariableValues()
{
	static UFunction* uFnPopulateLinkedVariableValues = nullptr;

	if (!uFnPopulateLinkedVariableValues)
	{
		uFnPopulateLinkedVariableValues = UFunction::FindFunction("Function Engine.SequenceOp.PopulateLinkedVariableValues");
	}

	USequenceOp_execPopulateLinkedVariableValues_Params PopulateLinkedVariableValues_Params;
	memset(&PopulateLinkedVariableValues_Params, 0, sizeof(PopulateLinkedVariableValues_Params));

	uFnPopulateLinkedVariableValues->iNative = 0;
	uFnPopulateLinkedVariableValues->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnPopulateLinkedVariableValues, &PopulateLinkedVariableValues_Params, nullptr);
	uFnPopulateLinkedVariableValues->FunctionFlags |= 0x400;
	uFnPopulateLinkedVariableValues->iNative = 24390;
};

// Function Engine.SequenceOp.VersionUpdated
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        OldVersion                     (CPF_Parm)
// int32_t                        NewVersion                     (CPF_Parm)

void USequenceOp::eventVersionUpdated(int32_t OldVersion, int32_t NewVersion)
{
	static UFunction* uFnVersionUpdated = nullptr;

	if (!uFnVersionUpdated)
	{
		uFnVersionUpdated = UFunction::FindFunction("Function Engine.SequenceOp.VersionUpdated");
	}

	USequenceOp_eventVersionUpdated_Params VersionUpdated_Params;
	memset(&VersionUpdated_Params, 0, sizeof(VersionUpdated_Params));
	memcpy_s(&VersionUpdated_Params.OldVersion, sizeof(VersionUpdated_Params.OldVersion), &OldVersion, sizeof(OldVersion));
	memcpy_s(&VersionUpdated_Params.NewVersion, sizeof(VersionUpdated_Params.NewVersion), &NewVersion, sizeof(NewVersion));

	this->ProcessEvent(uFnVersionUpdated, &VersionUpdated_Params, nullptr);
};

// Function Engine.SequenceOp.Deactivated
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void USequenceOp::eventDeactivated()
{
	static UFunction* uFnDeactivated = nullptr;

	if (!uFnDeactivated)
	{
		uFnDeactivated = UFunction::FindFunction("Function Engine.SequenceOp.Deactivated");
	}

	USequenceOp_eventDeactivated_Params Deactivated_Params;
	memset(&Deactivated_Params, 0, sizeof(Deactivated_Params));

	this->ProcessEvent(uFnDeactivated, &Deactivated_Params, nullptr);
};

// Function Engine.SequenceOp.Activated
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void USequenceOp::eventActivated()
{
	static UFunction* uFnActivated = nullptr;

	if (!uFnActivated)
	{
		uFnActivated = UFunction::FindFunction("Function Engine.SequenceOp.Activated");
	}

	USequenceOp_eventActivated_Params Activated_Params;
	memset(&Activated_Params, 0, sizeof(Activated_Params));

	this->ProcessEvent(uFnActivated, &Activated_Params, nullptr);
};

// Function Engine.SequenceOp.ActivateNamedOutputLink
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[15065])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FString                  LinkDesc                       (CPF_Parm | CPF_NeedCtorLink)

bool USequenceOp::ActivateNamedOutputLink(const class FString& LinkDesc)
{
	static UFunction* uFnActivateNamedOutputLink = nullptr;

	if (!uFnActivateNamedOutputLink)
	{
		uFnActivateNamedOutputLink = UFunction::FindFunction("Function Engine.SequenceOp.ActivateNamedOutputLink");
	}

	USequenceOp_execActivateNamedOutputLink_Params ActivateNamedOutputLink_Params;
	memset(&ActivateNamedOutputLink_Params, 0, sizeof(ActivateNamedOutputLink_Params));
	memcpy_s(&ActivateNamedOutputLink_Params.LinkDesc, sizeof(ActivateNamedOutputLink_Params.LinkDesc), &LinkDesc, sizeof(LinkDesc));

	uFnActivateNamedOutputLink->iNative = 0;
	uFnActivateNamedOutputLink->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnActivateNamedOutputLink, &ActivateNamedOutputLink_Params, nullptr);
	uFnActivateNamedOutputLink->FunctionFlags |= 0x400;
	uFnActivateNamedOutputLink->iNative = 15065;

	return ActivateNamedOutputLink_Params.ReturnValue;
};

// Function Engine.SequenceOp.ActivateOutputLink
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[15068])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        OutputIdx                      (CPF_Parm)

bool USequenceOp::ActivateOutputLink(int32_t OutputIdx)
{
	static UFunction* uFnActivateOutputLink = nullptr;

	if (!uFnActivateOutputLink)
	{
		uFnActivateOutputLink = UFunction::FindFunction("Function Engine.SequenceOp.ActivateOutputLink");
	}

	USequenceOp_execActivateOutputLink_Params ActivateOutputLink_Params;
	memset(&ActivateOutputLink_Params, 0, sizeof(ActivateOutputLink_Params));
	memcpy_s(&ActivateOutputLink_Params.OutputIdx, sizeof(ActivateOutputLink_Params.OutputIdx), &OutputIdx, sizeof(OutputIdx));

	uFnActivateOutputLink->iNative = 0;
	uFnActivateOutputLink->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnActivateOutputLink, &ActivateOutputLink_Params, nullptr);
	uFnActivateOutputLink->FunctionFlags |= 0x400;
	uFnActivateOutputLink->iNative = 15068;

	return ActivateOutputLink_Params.ReturnValue;
};

// Function Engine.SequenceOp.LinkedVariables
// [0x00424405] (FUNC_Final | FUNC_Iterator | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[21746])
// Parameter Info:
// class USequenceVariable*       VarClass                       (CPF_Parm)
// class FString                  inDesc                         (CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink)
// class USequenceVariable*       OutVariable                    (CPF_Parm | CPF_OutParm)

void USequenceOp::LinkedVariables(class USequenceVariable* VarClass, const class FString& inDesc, class USequenceVariable*& OutVariable)
{
	static UFunction* uFnLinkedVariables = nullptr;

	if (!uFnLinkedVariables)
	{
		uFnLinkedVariables = UFunction::FindFunction("Function Engine.SequenceOp.LinkedVariables");
	}

	USequenceOp_execLinkedVariables_Params LinkedVariables_Params;
	memset(&LinkedVariables_Params, 0, sizeof(LinkedVariables_Params));
	LinkedVariables_Params.VarClass = VarClass;
	memcpy_s(&LinkedVariables_Params.inDesc, sizeof(LinkedVariables_Params.inDesc), &inDesc, sizeof(inDesc));
	LinkedVariables_Params.OutVariable = OutVariable;

	uFnLinkedVariables->iNative = 0;
	uFnLinkedVariables->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnLinkedVariables, &LinkedVariables_Params, nullptr);
	uFnLinkedVariables->FunctionFlags |= 0x400;
	uFnLinkedVariables->iNative = 21746;

	OutVariable = LinkedVariables_Params.OutVariable;
};

// Function Engine.SequenceOp.GetBoolVars
// [0x00424401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20518])
// Parameter Info:
// class FString                  inDesc                         (CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink)
// class TArray<uint8_t>          boolVars                       (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void USequenceOp::GetBoolVars(const class FString& inDesc, class TArray<uint8_t>& boolVars)
{
	static UFunction* uFnGetBoolVars = nullptr;

	if (!uFnGetBoolVars)
	{
		uFnGetBoolVars = UFunction::FindFunction("Function Engine.SequenceOp.GetBoolVars");
	}

	USequenceOp_execGetBoolVars_Params GetBoolVars_Params;
	memset(&GetBoolVars_Params, 0, sizeof(GetBoolVars_Params));
	memcpy_s(&GetBoolVars_Params.inDesc, sizeof(GetBoolVars_Params.inDesc), &inDesc, sizeof(inDesc));
	memcpy_s(&GetBoolVars_Params.boolVars, sizeof(GetBoolVars_Params.boolVars), &boolVars, sizeof(boolVars));

	uFnGetBoolVars->iNative = 0;
	uFnGetBoolVars->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetBoolVars, &GetBoolVars_Params, nullptr);
	uFnGetBoolVars->FunctionFlags |= 0x400;
	uFnGetBoolVars->iNative = 20518;

	memcpy_s(&boolVars, sizeof(boolVars), &GetBoolVars_Params.boolVars, sizeof(GetBoolVars_Params.boolVars));
};

// Function Engine.SequenceOp.GetInterpDataVars
// [0x00424401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20608])
// Parameter Info:
// class FString                  inDesc                         (CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink)
// class TArray<class UInterpData*> outIData                       (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void USequenceOp::GetInterpDataVars(const class FString& inDesc, class TArray<class UInterpData*>& outIData)
{
	static UFunction* uFnGetInterpDataVars = nullptr;

	if (!uFnGetInterpDataVars)
	{
		uFnGetInterpDataVars = UFunction::FindFunction("Function Engine.SequenceOp.GetInterpDataVars");
	}

	USequenceOp_execGetInterpDataVars_Params GetInterpDataVars_Params;
	memset(&GetInterpDataVars_Params, 0, sizeof(GetInterpDataVars_Params));
	memcpy_s(&GetInterpDataVars_Params.inDesc, sizeof(GetInterpDataVars_Params.inDesc), &inDesc, sizeof(inDesc));
	memcpy_s(&GetInterpDataVars_Params.outIData, sizeof(GetInterpDataVars_Params.outIData), &outIData, sizeof(outIData));

	uFnGetInterpDataVars->iNative = 0;
	uFnGetInterpDataVars->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetInterpDataVars, &GetInterpDataVars_Params, nullptr);
	uFnGetInterpDataVars->FunctionFlags |= 0x400;
	uFnGetInterpDataVars->iNative = 20608;

	memcpy_s(&outIData, sizeof(outIData), &GetInterpDataVars_Params.outIData, sizeof(GetInterpDataVars_Params.outIData));
};

// Function Engine.SequenceOp.GetObjectVars
// [0x00424401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20660])
// Parameter Info:
// class FString                  inDesc                         (CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink)
// class TArray<class UObject*>   objVars                        (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void USequenceOp::GetObjectVarsW(const class FString& inDesc, class TArray<class UObject*>& objVars)
{
	static UFunction* uFnGetObjectVarsW = nullptr;

	if (!uFnGetObjectVarsW)
	{
		uFnGetObjectVarsW = UFunction::FindFunction("Function Engine.SequenceOp.GetObjectVars");
	}

	USequenceOp_execGetObjectVarsW_Params GetObjectVarsW_Params;
	memset(&GetObjectVarsW_Params, 0, sizeof(GetObjectVarsW_Params));
	memcpy_s(&GetObjectVarsW_Params.inDesc, sizeof(GetObjectVarsW_Params.inDesc), &inDesc, sizeof(inDesc));
	memcpy_s(&GetObjectVarsW_Params.objVars, sizeof(GetObjectVarsW_Params.objVars), &objVars, sizeof(objVars));

	uFnGetObjectVarsW->iNative = 0;
	uFnGetObjectVarsW->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetObjectVarsW, &GetObjectVarsW_Params, nullptr);
	uFnGetObjectVarsW->FunctionFlags |= 0x400;
	uFnGetObjectVarsW->iNative = 20660;

	memcpy_s(&objVars, sizeof(objVars), &GetObjectVarsW_Params.objVars, sizeof(GetObjectVarsW_Params.objVars));
};

// Function Engine.SequenceOp.GetLinkedObjects
// [0x00424401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20620])
// Parameter Info:
// class USequenceObject*         ObjectType                     (CPF_OptionalParm | CPF_Parm)
// uint32_t                       bRecurse                       (CPF_OptionalParm | CPF_Parm)
// class TArray<class USequenceObject*> out_Objects                    (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void USequenceOp::GetLinkedObjects(class USequenceObject* ObjectType, bool bRecurse, class TArray<class USequenceObject*>& out_Objects)
{
	static UFunction* uFnGetLinkedObjects = nullptr;

	if (!uFnGetLinkedObjects)
	{
		uFnGetLinkedObjects = UFunction::FindFunction("Function Engine.SequenceOp.GetLinkedObjects");
	}

	USequenceOp_execGetLinkedObjects_Params GetLinkedObjects_Params;
	memset(&GetLinkedObjects_Params, 0, sizeof(GetLinkedObjects_Params));
	GetLinkedObjects_Params.ObjectType = ObjectType;
	GetLinkedObjects_Params.bRecurse = bRecurse;
	memcpy_s(&GetLinkedObjects_Params.out_Objects, sizeof(GetLinkedObjects_Params.out_Objects), &out_Objects, sizeof(out_Objects));

	uFnGetLinkedObjects->iNative = 0;
	uFnGetLinkedObjects->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetLinkedObjects, &GetLinkedObjects_Params, nullptr);
	uFnGetLinkedObjects->FunctionFlags |= 0x400;
	uFnGetLinkedObjects->iNative = 20620;

	memcpy_s(&out_Objects, sizeof(out_Objects), &GetLinkedObjects_Params.out_Objects, sizeof(GetLinkedObjects_Params.out_Objects));
};

// Function Engine.SequenceOp.HasLinkedOps
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[20905])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       bConsiderInputLinks            (CPF_OptionalParm | CPF_Parm)

bool USequenceOp::HasLinkedOps(bool bConsiderInputLinks)
{
	static UFunction* uFnHasLinkedOps = nullptr;

	if (!uFnHasLinkedOps)
	{
		uFnHasLinkedOps = UFunction::FindFunction("Function Engine.SequenceOp.HasLinkedOps");
	}

	USequenceOp_execHasLinkedOps_Params HasLinkedOps_Params;
	memset(&HasLinkedOps_Params, 0, sizeof(HasLinkedOps_Params));
	HasLinkedOps_Params.bConsiderInputLinks = bConsiderInputLinks;

	uFnHasLinkedOps->iNative = 0;
	uFnHasLinkedOps->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnHasLinkedOps, &HasLinkedOps_Params, nullptr);
	uFnHasLinkedOps->FunctionFlags |= 0x400;
	uFnHasLinkedOps->iNative = 20905;

	return HasLinkedOps_Params.ReturnValue;
};

// Function Engine.Sequence.SetEnabled
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13734])
// Parameter Info:
// uint32_t                       bInEnabled                     (CPF_Parm)

void USequence::SetEnabled(bool bInEnabled)
{
	static UFunction* uFnSetEnabled = nullptr;

	if (!uFnSetEnabled)
	{
		uFnSetEnabled = UFunction::FindFunction("Function Engine.Sequence.SetEnabled");
	}

	USequence_execSetEnabled_Params SetEnabled_Params;
	memset(&SetEnabled_Params, 0, sizeof(SetEnabled_Params));
	SetEnabled_Params.bInEnabled = bInEnabled;

	uFnSetEnabled->iNative = 0;
	uFnSetEnabled->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetEnabled, &SetEnabled_Params, nullptr);
	uFnSetEnabled->FunctionFlags |= 0x400;
	uFnSetEnabled->iNative = 13734;
};

// Function Engine.Sequence.Reset
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void USequence::Reset()
{
	static UFunction* uFnReset = nullptr;

	if (!uFnReset)
	{
		uFnReset = UFunction::FindFunction("Function Engine.Sequence.Reset");
	}

	USequence_execReset_Params Reset_Params;
	memset(&Reset_Params, 0, sizeof(Reset_Params));

	this->ProcessEvent(uFnReset, &Reset_Params, nullptr);
};

// Function Engine.Sequence.FindSeqObjectsByName
// [0x00424401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20119])
// Parameter Info:
// class FString                  SeqObjName                     (CPF_Parm | CPF_NeedCtorLink)
// uint32_t                       bCheckComment                  (CPF_Parm)
// uint32_t                       bRecursive                     (CPF_OptionalParm | CPF_Parm)
// uint32_t                       bUseFullLevelName              (CPF_OptionalParm | CPF_Parm)
// class TArray<class USequenceObject*> OutputObjects                  (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void USequence::FindSeqObjectsByName(const class FString& SeqObjName, bool bCheckComment, bool bRecursive, bool bUseFullLevelName, class TArray<class USequenceObject*>& OutputObjects)
{
	static UFunction* uFnFindSeqObjectsByName = nullptr;

	if (!uFnFindSeqObjectsByName)
	{
		uFnFindSeqObjectsByName = UFunction::FindFunction("Function Engine.Sequence.FindSeqObjectsByName");
	}

	USequence_execFindSeqObjectsByName_Params FindSeqObjectsByName_Params;
	memset(&FindSeqObjectsByName_Params, 0, sizeof(FindSeqObjectsByName_Params));
	memcpy_s(&FindSeqObjectsByName_Params.SeqObjName, sizeof(FindSeqObjectsByName_Params.SeqObjName), &SeqObjName, sizeof(SeqObjName));
	FindSeqObjectsByName_Params.bCheckComment = bCheckComment;
	FindSeqObjectsByName_Params.bRecursive = bRecursive;
	FindSeqObjectsByName_Params.bUseFullLevelName = bUseFullLevelName;
	memcpy_s(&FindSeqObjectsByName_Params.OutputObjects, sizeof(FindSeqObjectsByName_Params.OutputObjects), &OutputObjects, sizeof(OutputObjects));

	uFnFindSeqObjectsByName->iNative = 0;
	uFnFindSeqObjectsByName->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnFindSeqObjectsByName, &FindSeqObjectsByName_Params, nullptr);
	uFnFindSeqObjectsByName->FunctionFlags |= 0x400;
	uFnFindSeqObjectsByName->iNative = 20119;

	memcpy_s(&OutputObjects, sizeof(OutputObjects), &FindSeqObjectsByName_Params.OutputObjects, sizeof(FindSeqObjectsByName_Params.OutputObjects));
};

// Function Engine.Sequence.FindSeqObjectsByClass
// [0x00420401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20118])
// Parameter Info:
// class USequenceObject*         DesiredClass                   (CPF_Parm)
// uint32_t                       bRecursive                     (CPF_Parm)
// class TArray<class USequenceObject*> OutputObjects                  (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void USequence::FindSeqObjectsByClass(class USequenceObject* DesiredClass, bool bRecursive, class TArray<class USequenceObject*>& OutputObjects)
{
	static UFunction* uFnFindSeqObjectsByClass = nullptr;

	if (!uFnFindSeqObjectsByClass)
	{
		uFnFindSeqObjectsByClass = UFunction::FindFunction("Function Engine.Sequence.FindSeqObjectsByClass");
	}

	USequence_execFindSeqObjectsByClass_Params FindSeqObjectsByClass_Params;
	memset(&FindSeqObjectsByClass_Params, 0, sizeof(FindSeqObjectsByClass_Params));
	FindSeqObjectsByClass_Params.DesiredClass = DesiredClass;
	FindSeqObjectsByClass_Params.bRecursive = bRecursive;
	memcpy_s(&FindSeqObjectsByClass_Params.OutputObjects, sizeof(FindSeqObjectsByClass_Params.OutputObjects), &OutputObjects, sizeof(OutputObjects));

	uFnFindSeqObjectsByClass->iNative = 0;
	uFnFindSeqObjectsByClass->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnFindSeqObjectsByClass, &FindSeqObjectsByClass_Params, nullptr);
	uFnFindSeqObjectsByClass->FunctionFlags |= 0x400;
	uFnFindSeqObjectsByClass->iNative = 20118;

	memcpy_s(&OutputObjects, sizeof(OutputObjects), &FindSeqObjectsByClass_Params.OutputObjects, sizeof(FindSeqObjectsByClass_Params.OutputObjects));
};

// Function Engine.PrefabSequence.GetOwnerPrefab
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20666])
// Parameter Info:
// class APrefabInstance*         ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class APrefabInstance* UPrefabSequence::GetOwnerPrefab()
{
	static UFunction* uFnGetOwnerPrefab = nullptr;

	if (!uFnGetOwnerPrefab)
	{
		uFnGetOwnerPrefab = UFunction::FindFunction("Function Engine.PrefabSequence.GetOwnerPrefab");
	}

	UPrefabSequence_execGetOwnerPrefab_Params GetOwnerPrefab_Params;
	memset(&GetOwnerPrefab_Params, 0, sizeof(GetOwnerPrefab_Params));

	uFnGetOwnerPrefab->iNative = 0;
	uFnGetOwnerPrefab->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetOwnerPrefab, &GetOwnerPrefab_Params, nullptr);
	uFnGetOwnerPrefab->FunctionFlags |= 0x400;
	uFnGetOwnerPrefab->iNative = 20666;

	return GetOwnerPrefab_Params.ReturnValue;
};

// Function Engine.PrefabSequence.SetOwnerPrefab
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25733])
// Parameter Info:
// class APrefabInstance*         InOwner                        (CPF_Parm)

void UPrefabSequence::SetOwnerPrefab(class APrefabInstance* InOwner)
{
	static UFunction* uFnSetOwnerPrefab = nullptr;

	if (!uFnSetOwnerPrefab)
	{
		uFnSetOwnerPrefab = UFunction::FindFunction("Function Engine.PrefabSequence.SetOwnerPrefab");
	}

	UPrefabSequence_execSetOwnerPrefab_Params SetOwnerPrefab_Params;
	memset(&SetOwnerPrefab_Params, 0, sizeof(SetOwnerPrefab_Params));
	SetOwnerPrefab_Params.InOwner = InOwner;

	uFnSetOwnerPrefab->iNative = 0;
	uFnSetOwnerPrefab->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetOwnerPrefab, &SetOwnerPrefab_Params, nullptr);
	uFnSetOwnerPrefab->FunctionFlags |= 0x400;
	uFnSetOwnerPrefab->iNative = 25733;
};

// Function Engine.SeqAct_ActivateRemoteEvent.GetObjClassVersion
// [0x00022802] (FUNC_Defined | FUNC_Event | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t USeqAct_ActivateRemoteEvent::eventGetObjClassVersion()
{
	static UFunction* uFnGetObjClassVersion = nullptr;

	if (!uFnGetObjClassVersion)
	{
		uFnGetObjClassVersion = UFunction::FindFunction("Function Engine.SeqAct_ActivateRemoteEvent.GetObjClassVersion");
	}

	USeqAct_ActivateRemoteEvent_eventGetObjClassVersion_Params GetObjClassVersion_Params;
	memset(&GetObjClassVersion_Params, 0, sizeof(GetObjClassVersion_Params));

	USeqAct_ActivateRemoteEvent::StaticClass()->ProcessEvent(uFnGetObjClassVersion, &GetObjClassVersion_Params, nullptr);

	return GetObjClassVersion_Params.ReturnValue;
};

// Function Engine.SeqAct_AttachToActor.GetObjClassVersion
// [0x00022802] (FUNC_Defined | FUNC_Event | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t USeqAct_AttachToActor::eventGetObjClassVersion()
{
	static UFunction* uFnGetObjClassVersion = nullptr;

	if (!uFnGetObjClassVersion)
	{
		uFnGetObjClassVersion = UFunction::FindFunction("Function Engine.SeqAct_AttachToActor.GetObjClassVersion");
	}

	USeqAct_AttachToActor_eventGetObjClassVersion_Params GetObjClassVersion_Params;
	memset(&GetObjClassVersion_Params, 0, sizeof(GetObjClassVersion_Params));

	USeqAct_AttachToActor::StaticClass()->ProcessEvent(uFnGetObjClassVersion, &GetObjClassVersion_Params, nullptr);

	return GetObjClassVersion_Params.ReturnValue;
};

// Function Engine.SeqAct_CameraFade.GetObjClassVersion
// [0x00022802] (FUNC_Defined | FUNC_Event | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t USeqAct_CameraFade::eventGetObjClassVersion()
{
	static UFunction* uFnGetObjClassVersion = nullptr;

	if (!uFnGetObjClassVersion)
	{
		uFnGetObjClassVersion = UFunction::FindFunction("Function Engine.SeqAct_CameraFade.GetObjClassVersion");
	}

	USeqAct_CameraFade_eventGetObjClassVersion_Params GetObjClassVersion_Params;
	memset(&GetObjClassVersion_Params, 0, sizeof(GetObjClassVersion_Params));

	USeqAct_CameraFade::StaticClass()->ProcessEvent(uFnGetObjClassVersion, &GetObjClassVersion_Params, nullptr);

	return GetObjClassVersion_Params.ReturnValue;
};

// Function Engine.SeqAct_CameraLookAt.GetObjClassVersion
// [0x00022802] (FUNC_Defined | FUNC_Event | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t USeqAct_CameraLookAt::eventGetObjClassVersion()
{
	static UFunction* uFnGetObjClassVersion = nullptr;

	if (!uFnGetObjClassVersion)
	{
		uFnGetObjClassVersion = UFunction::FindFunction("Function Engine.SeqAct_CameraLookAt.GetObjClassVersion");
	}

	USeqAct_CameraLookAt_eventGetObjClassVersion_Params GetObjClassVersion_Params;
	memset(&GetObjClassVersion_Params, 0, sizeof(GetObjClassVersion_Params));

	USeqAct_CameraLookAt::StaticClass()->ProcessEvent(uFnGetObjClassVersion, &GetObjClassVersion_Params, nullptr);

	return GetObjClassVersion_Params.ReturnValue;
};

// Function Engine.SeqAct_ChangeCollision.GetObjClassVersion
// [0x00022802] (FUNC_Defined | FUNC_Event | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t USeqAct_ChangeCollision::eventGetObjClassVersion()
{
	static UFunction* uFnGetObjClassVersion = nullptr;

	if (!uFnGetObjClassVersion)
	{
		uFnGetObjClassVersion = UFunction::FindFunction("Function Engine.SeqAct_ChangeCollision.GetObjClassVersion");
	}

	USeqAct_ChangeCollision_eventGetObjClassVersion_Params GetObjClassVersion_Params;
	memset(&GetObjClassVersion_Params, 0, sizeof(GetObjClassVersion_Params));

	USeqAct_ChangeCollision::StaticClass()->ProcessEvent(uFnGetObjClassVersion, &GetObjClassVersion_Params, nullptr);

	return GetObjClassVersion_Params.ReturnValue;
};

// Function Engine.SeqAct_ConvertToString.GetObjClassVersion
// [0x00022802] (FUNC_Defined | FUNC_Event | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t USeqAct_ConvertToString::eventGetObjClassVersion()
{
	static UFunction* uFnGetObjClassVersion = nullptr;

	if (!uFnGetObjClassVersion)
	{
		uFnGetObjClassVersion = UFunction::FindFunction("Function Engine.SeqAct_ConvertToString.GetObjClassVersion");
	}

	USeqAct_ConvertToString_eventGetObjClassVersion_Params GetObjClassVersion_Params;
	memset(&GetObjClassVersion_Params, 0, sizeof(GetObjClassVersion_Params));

	USeqAct_ConvertToString::StaticClass()->ProcessEvent(uFnGetObjClassVersion, &GetObjClassVersion_Params, nullptr);

	return GetObjClassVersion_Params.ReturnValue;
};

// Function Engine.SeqAct_DrawText.GetObjClassVersion
// [0x00022802] (FUNC_Defined | FUNC_Event | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t USeqAct_DrawText::eventGetObjClassVersion()
{
	static UFunction* uFnGetObjClassVersion = nullptr;

	if (!uFnGetObjClassVersion)
	{
		uFnGetObjClassVersion = UFunction::FindFunction("Function Engine.SeqAct_DrawText.GetObjClassVersion");
	}

	USeqAct_DrawText_eventGetObjClassVersion_Params GetObjClassVersion_Params;
	memset(&GetObjClassVersion_Params, 0, sizeof(GetObjClassVersion_Params));

	USeqAct_DrawText::StaticClass()->ProcessEvent(uFnGetObjClassVersion, &GetObjClassVersion_Params, nullptr);

	return GetObjClassVersion_Params.ReturnValue;
};

// Function Engine.SeqAct_Gate.IsValidUISequenceObject
// [0x00024802] (FUNC_Defined | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UUIScreenObject*         TargetObject                   (CPF_OptionalParm | CPF_Parm)

bool USeqAct_Gate::eventIsValidUISequenceObject(class UUIScreenObject* TargetObject)
{
	static UFunction* uFnIsValidUISequenceObject = nullptr;

	if (!uFnIsValidUISequenceObject)
	{
		uFnIsValidUISequenceObject = UFunction::FindFunction("Function Engine.SeqAct_Gate.IsValidUISequenceObject");
	}

	USeqAct_Gate_eventIsValidUISequenceObject_Params IsValidUISequenceObject_Params;
	memset(&IsValidUISequenceObject_Params, 0, sizeof(IsValidUISequenceObject_Params));
	IsValidUISequenceObject_Params.TargetObject = TargetObject;

	this->ProcessEvent(uFnIsValidUISequenceObject, &IsValidUISequenceObject_Params, nullptr);

	return IsValidUISequenceObject_Params.ReturnValue;
};

// Function Engine.SeqAct_GetLocationAndRotation.GetObjClassVersion
// [0x00022802] (FUNC_Defined | FUNC_Event | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t USeqAct_GetLocationAndRotation::eventGetObjClassVersion()
{
	static UFunction* uFnGetObjClassVersion = nullptr;

	if (!uFnGetObjClassVersion)
	{
		uFnGetObjClassVersion = UFunction::FindFunction("Function Engine.SeqAct_GetLocationAndRotation.GetObjClassVersion");
	}

	USeqAct_GetLocationAndRotation_eventGetObjClassVersion_Params GetObjClassVersion_Params;
	memset(&GetObjClassVersion_Params, 0, sizeof(GetObjClassVersion_Params));

	USeqAct_GetLocationAndRotation::StaticClass()->ProcessEvent(uFnGetObjClassVersion, &GetObjClassVersion_Params, nullptr);

	return GetObjClassVersion_Params.ReturnValue;
};

// Function Engine.SeqAct_GetVelocity.GetObjClassVersion
// [0x00022802] (FUNC_Defined | FUNC_Event | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t USeqAct_GetVelocity::eventGetObjClassVersion()
{
	static UFunction* uFnGetObjClassVersion = nullptr;

	if (!uFnGetObjClassVersion)
	{
		uFnGetObjClassVersion = UFunction::FindFunction("Function Engine.SeqAct_GetVelocity.GetObjClassVersion");
	}

	USeqAct_GetVelocity_eventGetObjClassVersion_Params GetObjClassVersion_Params;
	memset(&GetObjClassVersion_Params, 0, sizeof(GetObjClassVersion_Params));

	USeqAct_GetVelocity::StaticClass()->ProcessEvent(uFnGetObjClassVersion, &GetObjClassVersion_Params, nullptr);

	return GetObjClassVersion_Params.ReturnValue;
};

// Function Engine.SeqAct_IsInObjectList.IsValidUISequenceObject
// [0x00024802] (FUNC_Defined | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UUIScreenObject*         TargetObject                   (CPF_OptionalParm | CPF_Parm)

bool USeqAct_IsInObjectList::eventIsValidUISequenceObject(class UUIScreenObject* TargetObject)
{
	static UFunction* uFnIsValidUISequenceObject = nullptr;

	if (!uFnIsValidUISequenceObject)
	{
		uFnIsValidUISequenceObject = UFunction::FindFunction("Function Engine.SeqAct_IsInObjectList.IsValidUISequenceObject");
	}

	USeqAct_IsInObjectList_eventIsValidUISequenceObject_Params IsValidUISequenceObject_Params;
	memset(&IsValidUISequenceObject_Params, 0, sizeof(IsValidUISequenceObject_Params));
	IsValidUISequenceObject_Params.TargetObject = TargetObject;

	this->ProcessEvent(uFnIsValidUISequenceObject, &IsValidUISequenceObject_Params, nullptr);

	return IsValidUISequenceObject_Params.ReturnValue;
};

// Function Engine.SeqAct_Latent.Update
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// float                          DeltaTime                      (CPF_Parm)

bool USeqAct_Latent::eventUpdate(float DeltaTime)
{
	static UFunction* uFnUpdate = nullptr;

	if (!uFnUpdate)
	{
		uFnUpdate = UFunction::FindFunction("Function Engine.SeqAct_Latent.Update");
	}

	USeqAct_Latent_eventUpdate_Params Update_Params;
	memset(&Update_Params, 0, sizeof(Update_Params));
	memcpy_s(&Update_Params.DeltaTime, sizeof(Update_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));

	this->ProcessEvent(uFnUpdate, &Update_Params, nullptr);

	return Update_Params.ReturnValue;
};

// Function Engine.SeqAct_Latent.AbortFor
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[15013])
// Parameter Info:
// class AActor*                  latentActor                    (CPF_Parm)

void USeqAct_Latent::AbortFor(class AActor* latentActor)
{
	static UFunction* uFnAbortFor = nullptr;

	if (!uFnAbortFor)
	{
		uFnAbortFor = UFunction::FindFunction("Function Engine.SeqAct_Latent.AbortFor");
	}

	USeqAct_Latent_execAbortFor_Params AbortFor_Params;
	memset(&AbortFor_Params, 0, sizeof(AbortFor_Params));
	AbortFor_Params.latentActor = latentActor;

	uFnAbortFor->iNative = 0;
	uFnAbortFor->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnAbortFor, &AbortFor_Params, nullptr);
	uFnAbortFor->FunctionFlags |= 0x400;
	uFnAbortFor->iNative = 15013;
};

// Function Engine.SeqAct_ActorFactory.GetObjClassVersion
// [0x00022802] (FUNC_Defined | FUNC_Event | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t USeqAct_ActorFactory::eventGetObjClassVersion()
{
	static UFunction* uFnGetObjClassVersion = nullptr;

	if (!uFnGetObjClassVersion)
	{
		uFnGetObjClassVersion = UFunction::FindFunction("Function Engine.SeqAct_ActorFactory.GetObjClassVersion");
	}

	USeqAct_ActorFactory_eventGetObjClassVersion_Params GetObjClassVersion_Params;
	memset(&GetObjClassVersion_Params, 0, sizeof(GetObjClassVersion_Params));

	USeqAct_ActorFactory::StaticClass()->ProcessEvent(uFnGetObjClassVersion, &GetObjClassVersion_Params, nullptr);

	return GetObjClassVersion_Params.ReturnValue;
};

// Function Engine.SeqAct_Delay.ResetDelayActive
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25148])
// Parameter Info:

void USeqAct_Delay::ResetDelayActive()
{
	static UFunction* uFnResetDelayActive = nullptr;

	if (!uFnResetDelayActive)
	{
		uFnResetDelayActive = UFunction::FindFunction("Function Engine.SeqAct_Delay.ResetDelayActive");
	}

	USeqAct_Delay_execResetDelayActive_Params ResetDelayActive_Params;
	memset(&ResetDelayActive_Params, 0, sizeof(ResetDelayActive_Params));

	uFnResetDelayActive->iNative = 0;
	uFnResetDelayActive->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnResetDelayActive, &ResetDelayActive_Params, nullptr);
	uFnResetDelayActive->FunctionFlags |= 0x400;
	uFnResetDelayActive->iNative = 25148;
};

// Function Engine.SeqAct_Delay.Reset
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void USeqAct_Delay::Reset()
{
	static UFunction* uFnReset = nullptr;

	if (!uFnReset)
	{
		uFnReset = UFunction::FindFunction("Function Engine.SeqAct_Delay.Reset");
	}

	USeqAct_Delay_execReset_Params Reset_Params;
	memset(&Reset_Params, 0, sizeof(Reset_Params));

	this->ProcessEvent(uFnReset, &Reset_Params, nullptr);
};

// Function Engine.SeqAct_Delay.IsValidUISequenceObject
// [0x00024802] (FUNC_Defined | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UUIScreenObject*         TargetObject                   (CPF_OptionalParm | CPF_Parm)

bool USeqAct_Delay::eventIsValidUISequenceObject(class UUIScreenObject* TargetObject)
{
	static UFunction* uFnIsValidUISequenceObject = nullptr;

	if (!uFnIsValidUISequenceObject)
	{
		uFnIsValidUISequenceObject = UFunction::FindFunction("Function Engine.SeqAct_Delay.IsValidUISequenceObject");
	}

	USeqAct_Delay_eventIsValidUISequenceObject_Params IsValidUISequenceObject_Params;
	memset(&IsValidUISequenceObject_Params, 0, sizeof(IsValidUISequenceObject_Params));
	IsValidUISequenceObject_Params.TargetObject = TargetObject;

	this->ProcessEvent(uFnIsValidUISequenceObject, &IsValidUISequenceObject_Params, nullptr);

	return IsValidUISequenceObject_Params.ReturnValue;
};

// Function Engine.SeqAct_Interp.GetObjClassVersion
// [0x00022802] (FUNC_Defined | FUNC_Event | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t USeqAct_Interp::eventGetObjClassVersion()
{
	static UFunction* uFnGetObjClassVersion = nullptr;

	if (!uFnGetObjClassVersion)
	{
		uFnGetObjClassVersion = UFunction::FindFunction("Function Engine.SeqAct_Interp.GetObjClassVersion");
	}

	USeqAct_Interp_eventGetObjClassVersion_Params GetObjClassVersion_Params;
	memset(&GetObjClassVersion_Params, 0, sizeof(GetObjClassVersion_Params));

	USeqAct_Interp::StaticClass()->ProcessEvent(uFnGetObjClassVersion, &GetObjClassVersion_Params, nullptr);

	return GetObjClassVersion_Params.ReturnValue;
};

// Function Engine.SeqAct_Interp.Reset
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void USeqAct_Interp::Reset()
{
	static UFunction* uFnReset = nullptr;

	if (!uFnReset)
	{
		uFnReset = UFunction::FindFunction("Function Engine.SeqAct_Interp.Reset");
	}

	USeqAct_Interp_execReset_Params Reset_Params;
	memset(&Reset_Params, 0, sizeof(Reset_Params));

	this->ProcessEvent(uFnReset, &Reset_Params, nullptr);
};

// Function Engine.SeqAct_Interp.AddPlayerToDirectorTracks
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[15341])
// Parameter Info:
// class APlayerController*       PC                             (CPF_Parm)

void USeqAct_Interp::AddPlayerToDirectorTracks(class APlayerController* PC)
{
	static UFunction* uFnAddPlayerToDirectorTracks = nullptr;

	if (!uFnAddPlayerToDirectorTracks)
	{
		uFnAddPlayerToDirectorTracks = UFunction::FindFunction("Function Engine.SeqAct_Interp.AddPlayerToDirectorTracks");
	}

	USeqAct_Interp_execAddPlayerToDirectorTracks_Params AddPlayerToDirectorTracks_Params;
	memset(&AddPlayerToDirectorTracks_Params, 0, sizeof(AddPlayerToDirectorTracks_Params));
	AddPlayerToDirectorTracks_Params.PC = PC;

	uFnAddPlayerToDirectorTracks->iNative = 0;
	uFnAddPlayerToDirectorTracks->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnAddPlayerToDirectorTracks, &AddPlayerToDirectorTracks_Params, nullptr);
	uFnAddPlayerToDirectorTracks->FunctionFlags |= 0x400;
	uFnAddPlayerToDirectorTracks->iNative = 15341;
};

// Function Engine.SeqAct_Interp.Stop
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[623])
// Parameter Info:

void USeqAct_Interp::Stop()
{
	static UFunction* uFnStop = nullptr;

	if (!uFnStop)
	{
		uFnStop = UFunction::FindFunction("Function Engine.SeqAct_Interp.Stop");
	}

	USeqAct_Interp_execStop_Params Stop_Params;
	memset(&Stop_Params, 0, sizeof(Stop_Params));

	uFnStop->iNative = 0;
	uFnStop->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnStop, &Stop_Params, nullptr);
	uFnStop->FunctionFlags |= 0x400;
	uFnStop->iNative = 623;
};

// Function Engine.SeqAct_Interp.SetPosition
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[25743])
// Parameter Info:
// float                          NewPosition                    (CPF_Parm)
// uint32_t                       bJump                          (CPF_OptionalParm | CPF_Parm)

void USeqAct_Interp::SetPosition(float NewPosition, bool bJump)
{
	static UFunction* uFnSetPosition = nullptr;

	if (!uFnSetPosition)
	{
		uFnSetPosition = UFunction::FindFunction("Function Engine.SeqAct_Interp.SetPosition");
	}

	USeqAct_Interp_execSetPosition_Params SetPosition_Params;
	memset(&SetPosition_Params, 0, sizeof(SetPosition_Params));
	memcpy_s(&SetPosition_Params.NewPosition, sizeof(SetPosition_Params.NewPosition), &NewPosition, sizeof(NewPosition));
	SetPosition_Params.bJump = bJump;

	uFnSetPosition->iNative = 0;
	uFnSetPosition->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetPosition, &SetPosition_Params, nullptr);
	uFnSetPosition->FunctionFlags |= 0x400;
	uFnSetPosition->iNative = 25743;
};

// Function Engine.SeqAct_StreamInTextures.GetObjClassVersion
// [0x00022802] (FUNC_Defined | FUNC_Event | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t USeqAct_StreamInTextures::eventGetObjClassVersion()
{
	static UFunction* uFnGetObjClassVersion = nullptr;

	if (!uFnGetObjClassVersion)
	{
		uFnGetObjClassVersion = UFunction::FindFunction("Function Engine.SeqAct_StreamInTextures.GetObjClassVersion");
	}

	USeqAct_StreamInTextures_eventGetObjClassVersion_Params GetObjClassVersion_Params;
	memset(&GetObjClassVersion_Params, 0, sizeof(GetObjClassVersion_Params));

	USeqAct_StreamInTextures::StaticClass()->ProcessEvent(uFnGetObjClassVersion, &GetObjClassVersion_Params, nullptr);

	return GetObjClassVersion_Params.ReturnValue;
};

// Function Engine.SeqAct_StreamInTextures.IsValidUISequenceObject
// [0x00024802] (FUNC_Defined | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UUIScreenObject*         TargetObject                   (CPF_OptionalParm | CPF_Parm)

bool USeqAct_StreamInTextures::eventIsValidUISequenceObject(class UUIScreenObject* TargetObject)
{
	static UFunction* uFnIsValidUISequenceObject = nullptr;

	if (!uFnIsValidUISequenceObject)
	{
		uFnIsValidUISequenceObject = UFunction::FindFunction("Function Engine.SeqAct_StreamInTextures.IsValidUISequenceObject");
	}

	USeqAct_StreamInTextures_eventIsValidUISequenceObject_Params IsValidUISequenceObject_Params;
	memset(&IsValidUISequenceObject_Params, 0, sizeof(IsValidUISequenceObject_Params));
	IsValidUISequenceObject_Params.TargetObject = TargetObject;

	this->ProcessEvent(uFnIsValidUISequenceObject, &IsValidUISequenceObject_Params, nullptr);

	return IsValidUISequenceObject_Params.ReturnValue;
};

// Function Engine.SeqAct_Log.GetObjClassVersion
// [0x00022802] (FUNC_Defined | FUNC_Event | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t USeqAct_Log::eventGetObjClassVersion()
{
	static UFunction* uFnGetObjClassVersion = nullptr;

	if (!uFnGetObjClassVersion)
	{
		uFnGetObjClassVersion = UFunction::FindFunction("Function Engine.SeqAct_Log.GetObjClassVersion");
	}

	USeqAct_Log_eventGetObjClassVersion_Params GetObjClassVersion_Params;
	memset(&GetObjClassVersion_Params, 0, sizeof(GetObjClassVersion_Params));

	USeqAct_Log::StaticClass()->ProcessEvent(uFnGetObjClassVersion, &GetObjClassVersion_Params, nullptr);

	return GetObjClassVersion_Params.ReturnValue;
};

// Function Engine.SeqAct_Log.IsValidUISequenceObject
// [0x00024802] (FUNC_Defined | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UUIScreenObject*         TargetObject                   (CPF_OptionalParm | CPF_Parm)

bool USeqAct_Log::eventIsValidUISequenceObject(class UUIScreenObject* TargetObject)
{
	static UFunction* uFnIsValidUISequenceObject = nullptr;

	if (!uFnIsValidUISequenceObject)
	{
		uFnIsValidUISequenceObject = UFunction::FindFunction("Function Engine.SeqAct_Log.IsValidUISequenceObject");
	}

	USeqAct_Log_eventIsValidUISequenceObject_Params IsValidUISequenceObject_Params;
	memset(&IsValidUISequenceObject_Params, 0, sizeof(IsValidUISequenceObject_Params));
	IsValidUISequenceObject_Params.TargetObject = TargetObject;

	this->ProcessEvent(uFnIsValidUISequenceObject, &IsValidUISequenceObject_Params, nullptr);

	return IsValidUISequenceObject_Params.ReturnValue;
};

// Function Engine.SeqAct_ModifyHealth.GetObjClassVersion
// [0x00022802] (FUNC_Defined | FUNC_Event | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t USeqAct_ModifyHealth::eventGetObjClassVersion()
{
	static UFunction* uFnGetObjClassVersion = nullptr;

	if (!uFnGetObjClassVersion)
	{
		uFnGetObjClassVersion = UFunction::FindFunction("Function Engine.SeqAct_ModifyHealth.GetObjClassVersion");
	}

	USeqAct_ModifyHealth_eventGetObjClassVersion_Params GetObjClassVersion_Params;
	memset(&GetObjClassVersion_Params, 0, sizeof(GetObjClassVersion_Params));

	USeqAct_ModifyHealth::StaticClass()->ProcessEvent(uFnGetObjClassVersion, &GetObjClassVersion_Params, nullptr);

	return GetObjClassVersion_Params.ReturnValue;
};

// Function Engine.SeqAct_ParticleEventGenerator.GetObjClassVersion
// [0x00022802] (FUNC_Defined | FUNC_Event | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t USeqAct_ParticleEventGenerator::eventGetObjClassVersion()
{
	static UFunction* uFnGetObjClassVersion = nullptr;

	if (!uFnGetObjClassVersion)
	{
		uFnGetObjClassVersion = UFunction::FindFunction("Function Engine.SeqAct_ParticleEventGenerator.GetObjClassVersion");
	}

	USeqAct_ParticleEventGenerator_eventGetObjClassVersion_Params GetObjClassVersion_Params;
	memset(&GetObjClassVersion_Params, 0, sizeof(GetObjClassVersion_Params));

	USeqAct_ParticleEventGenerator::StaticClass()->ProcessEvent(uFnGetObjClassVersion, &GetObjClassVersion_Params, nullptr);

	return GetObjClassVersion_Params.ReturnValue;
};

// Function Engine.SeqAct_SetCameraTarget.GetObjClassVersion
// [0x00022802] (FUNC_Defined | FUNC_Event | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t USeqAct_SetCameraTarget::eventGetObjClassVersion()
{
	static UFunction* uFnGetObjClassVersion = nullptr;

	if (!uFnGetObjClassVersion)
	{
		uFnGetObjClassVersion = UFunction::FindFunction("Function Engine.SeqAct_SetCameraTarget.GetObjClassVersion");
	}

	USeqAct_SetCameraTarget_eventGetObjClassVersion_Params GetObjClassVersion_Params;
	memset(&GetObjClassVersion_Params, 0, sizeof(GetObjClassVersion_Params));

	USeqAct_SetCameraTarget::StaticClass()->ProcessEvent(uFnGetObjClassVersion, &GetObjClassVersion_Params, nullptr);

	return GetObjClassVersion_Params.ReturnValue;
};

// Function Engine.SeqAct_SetSequenceVariable.IsValidUISequenceObject
// [0x00024802] (FUNC_Defined | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UUIScreenObject*         TargetObject                   (CPF_OptionalParm | CPF_Parm)

bool USeqAct_SetSequenceVariable::eventIsValidUISequenceObject(class UUIScreenObject* TargetObject)
{
	static UFunction* uFnIsValidUISequenceObject = nullptr;

	if (!uFnIsValidUISequenceObject)
	{
		uFnIsValidUISequenceObject = UFunction::FindFunction("Function Engine.SeqAct_SetSequenceVariable.IsValidUISequenceObject");
	}

	USeqAct_SetSequenceVariable_eventIsValidUISequenceObject_Params IsValidUISequenceObject_Params;
	memset(&IsValidUISequenceObject_Params, 0, sizeof(IsValidUISequenceObject_Params));
	IsValidUISequenceObject_Params.TargetObject = TargetObject;

	this->ProcessEvent(uFnIsValidUISequenceObject, &IsValidUISequenceObject_Params, nullptr);

	return IsValidUISequenceObject_Params.ReturnValue;
};

// Function Engine.SeqAct_SetFloat.GetObjClassVersion
// [0x00022802] (FUNC_Defined | FUNC_Event | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t USeqAct_SetFloat::eventGetObjClassVersion()
{
	static UFunction* uFnGetObjClassVersion = nullptr;

	if (!uFnGetObjClassVersion)
	{
		uFnGetObjClassVersion = UFunction::FindFunction("Function Engine.SeqAct_SetFloat.GetObjClassVersion");
	}

	USeqAct_SetFloat_eventGetObjClassVersion_Params GetObjClassVersion_Params;
	memset(&GetObjClassVersion_Params, 0, sizeof(GetObjClassVersion_Params));

	USeqAct_SetFloat::StaticClass()->ProcessEvent(uFnGetObjClassVersion, &GetObjClassVersion_Params, nullptr);

	return GetObjClassVersion_Params.ReturnValue;
};

// Function Engine.SeqAct_SetInt.GetObjClassVersion
// [0x00022802] (FUNC_Defined | FUNC_Event | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t USeqAct_SetInt::eventGetObjClassVersion()
{
	static UFunction* uFnGetObjClassVersion = nullptr;

	if (!uFnGetObjClassVersion)
	{
		uFnGetObjClassVersion = UFunction::FindFunction("Function Engine.SeqAct_SetInt.GetObjClassVersion");
	}

	USeqAct_SetInt_eventGetObjClassVersion_Params GetObjClassVersion_Params;
	memset(&GetObjClassVersion_Params, 0, sizeof(GetObjClassVersion_Params));

	USeqAct_SetInt::StaticClass()->ProcessEvent(uFnGetObjClassVersion, &GetObjClassVersion_Params, nullptr);

	return GetObjClassVersion_Params.ReturnValue;
};

// Function Engine.SeqAct_SetLocation.GetObjClassVersion
// [0x00022802] (FUNC_Defined | FUNC_Event | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t USeqAct_SetLocation::eventGetObjClassVersion()
{
	static UFunction* uFnGetObjClassVersion = nullptr;

	if (!uFnGetObjClassVersion)
	{
		uFnGetObjClassVersion = UFunction::FindFunction("Function Engine.SeqAct_SetLocation.GetObjClassVersion");
	}

	USeqAct_SetLocation_eventGetObjClassVersion_Params GetObjClassVersion_Params;
	memset(&GetObjClassVersion_Params, 0, sizeof(GetObjClassVersion_Params));

	USeqAct_SetLocation::StaticClass()->ProcessEvent(uFnGetObjClassVersion, &GetObjClassVersion_Params, nullptr);

	return GetObjClassVersion_Params.ReturnValue;
};

// Function Engine.SeqAct_SetObject.GetObjClassVersion
// [0x00022802] (FUNC_Defined | FUNC_Event | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t USeqAct_SetObject::eventGetObjClassVersion()
{
	static UFunction* uFnGetObjClassVersion = nullptr;

	if (!uFnGetObjClassVersion)
	{
		uFnGetObjClassVersion = UFunction::FindFunction("Function Engine.SeqAct_SetObject.GetObjClassVersion");
	}

	USeqAct_SetObject_eventGetObjClassVersion_Params GetObjClassVersion_Params;
	memset(&GetObjClassVersion_Params, 0, sizeof(GetObjClassVersion_Params));

	USeqAct_SetObject::StaticClass()->ProcessEvent(uFnGetObjClassVersion, &GetObjClassVersion_Params, nullptr);

	return GetObjClassVersion_Params.ReturnValue;
};

// Function Engine.SeqAct_SetString.GetObjClassVersion
// [0x00022802] (FUNC_Defined | FUNC_Event | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t USeqAct_SetString::eventGetObjClassVersion()
{
	static UFunction* uFnGetObjClassVersion = nullptr;

	if (!uFnGetObjClassVersion)
	{
		uFnGetObjClassVersion = UFunction::FindFunction("Function Engine.SeqAct_SetString.GetObjClassVersion");
	}

	USeqAct_SetString_eventGetObjClassVersion_Params GetObjClassVersion_Params;
	memset(&GetObjClassVersion_Params, 0, sizeof(GetObjClassVersion_Params));

	USeqAct_SetString::StaticClass()->ProcessEvent(uFnGetObjClassVersion, &GetObjClassVersion_Params, nullptr);

	return GetObjClassVersion_Params.ReturnValue;
};

// Function Engine.SeqAct_Switch.IsValidUISequenceObject
// [0x00024802] (FUNC_Defined | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UUIScreenObject*         TargetObject                   (CPF_OptionalParm | CPF_Parm)

bool USeqAct_Switch::eventIsValidUISequenceObject(class UUIScreenObject* TargetObject)
{
	static UFunction* uFnIsValidUISequenceObject = nullptr;

	if (!uFnIsValidUISequenceObject)
	{
		uFnIsValidUISequenceObject = UFunction::FindFunction("Function Engine.SeqAct_Switch.IsValidUISequenceObject");
	}

	USeqAct_Switch_eventIsValidUISequenceObject_Params IsValidUISequenceObject_Params;
	memset(&IsValidUISequenceObject_Params, 0, sizeof(IsValidUISequenceObject_Params));
	IsValidUISequenceObject_Params.TargetObject = TargetObject;

	this->ProcessEvent(uFnIsValidUISequenceObject, &IsValidUISequenceObject_Params, nullptr);

	return IsValidUISequenceObject_Params.ReturnValue;
};

// Function Engine.SeqAct_RandomSwitch.GetObjClassVersion
// [0x00022802] (FUNC_Defined | FUNC_Event | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t USeqAct_RandomSwitch::eventGetObjClassVersion()
{
	static UFunction* uFnGetObjClassVersion = nullptr;

	if (!uFnGetObjClassVersion)
	{
		uFnGetObjClassVersion = UFunction::FindFunction("Function Engine.SeqAct_RandomSwitch.GetObjClassVersion");
	}

	USeqAct_RandomSwitch_eventGetObjClassVersion_Params GetObjClassVersion_Params;
	memset(&GetObjClassVersion_Params, 0, sizeof(GetObjClassVersion_Params));

	USeqAct_RandomSwitch::StaticClass()->ProcessEvent(uFnGetObjClassVersion, &GetObjClassVersion_Params, nullptr);

	return GetObjClassVersion_Params.ReturnValue;
};

// Function Engine.SeqAct_Teleport.GetObjClassVersion
// [0x00022802] (FUNC_Defined | FUNC_Event | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t USeqAct_Teleport::eventGetObjClassVersion()
{
	static UFunction* uFnGetObjClassVersion = nullptr;

	if (!uFnGetObjClassVersion)
	{
		uFnGetObjClassVersion = UFunction::FindFunction("Function Engine.SeqAct_Teleport.GetObjClassVersion");
	}

	USeqAct_Teleport_eventGetObjClassVersion_Params GetObjClassVersion_Params;
	memset(&GetObjClassVersion_Params, 0, sizeof(GetObjClassVersion_Params));

	USeqAct_Teleport::StaticClass()->ProcessEvent(uFnGetObjClassVersion, &GetObjClassVersion_Params, nullptr);

	return GetObjClassVersion_Params.ReturnValue;
};

// Function Engine.SeqAct_Timer.IsValidUISequenceObject
// [0x00024802] (FUNC_Defined | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UUIScreenObject*         TargetObject                   (CPF_OptionalParm | CPF_Parm)

bool USeqAct_Timer::eventIsValidUISequenceObject(class UUIScreenObject* TargetObject)
{
	static UFunction* uFnIsValidUISequenceObject = nullptr;

	if (!uFnIsValidUISequenceObject)
	{
		uFnIsValidUISequenceObject = UFunction::FindFunction("Function Engine.SeqAct_Timer.IsValidUISequenceObject");
	}

	USeqAct_Timer_eventIsValidUISequenceObject_Params IsValidUISequenceObject_Params;
	memset(&IsValidUISequenceObject_Params, 0, sizeof(IsValidUISequenceObject_Params));
	IsValidUISequenceObject_Params.TargetObject = TargetObject;

	this->ProcessEvent(uFnIsValidUISequenceObject, &IsValidUISequenceObject_Params, nullptr);

	return IsValidUISequenceObject_Params.ReturnValue;
};

// Function Engine.SeqAct_Toggle.IsValidUISequenceObject
// [0x00024802] (FUNC_Defined | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UUIScreenObject*         TargetObject                   (CPF_OptionalParm | CPF_Parm)

bool USeqAct_Toggle::eventIsValidUISequenceObject(class UUIScreenObject* TargetObject)
{
	static UFunction* uFnIsValidUISequenceObject = nullptr;

	if (!uFnIsValidUISequenceObject)
	{
		uFnIsValidUISequenceObject = UFunction::FindFunction("Function Engine.SeqAct_Toggle.IsValidUISequenceObject");
	}

	USeqAct_Toggle_eventIsValidUISequenceObject_Params IsValidUISequenceObject_Params;
	memset(&IsValidUISequenceObject_Params, 0, sizeof(IsValidUISequenceObject_Params));
	IsValidUISequenceObject_Params.TargetObject = TargetObject;

	this->ProcessEvent(uFnIsValidUISequenceObject, &IsValidUISequenceObject_Params, nullptr);

	return IsValidUISequenceObject_Params.ReturnValue;
};

// Function Engine.SeqAct_Trace.GetObjClassVersion
// [0x00022802] (FUNC_Defined | FUNC_Event | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t USeqAct_Trace::eventGetObjClassVersion()
{
	static UFunction* uFnGetObjClassVersion = nullptr;

	if (!uFnGetObjClassVersion)
	{
		uFnGetObjClassVersion = UFunction::FindFunction("Function Engine.SeqAct_Trace.GetObjClassVersion");
	}

	USeqAct_Trace_eventGetObjClassVersion_Params GetObjClassVersion_Params;
	memset(&GetObjClassVersion_Params, 0, sizeof(GetObjClassVersion_Params));

	USeqAct_Trace::StaticClass()->ProcessEvent(uFnGetObjClassVersion, &GetObjClassVersion_Params, nullptr);

	return GetObjClassVersion_Params.ReturnValue;
};

// Function Engine.SequenceCondition.IsValidUISequenceObject
// [0x00024802] (FUNC_Defined | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UUIScreenObject*         TargetObject                   (CPF_OptionalParm | CPF_Parm)

bool USequenceCondition::eventIsValidUISequenceObject(class UUIScreenObject* TargetObject)
{
	static UFunction* uFnIsValidUISequenceObject = nullptr;

	if (!uFnIsValidUISequenceObject)
	{
		uFnIsValidUISequenceObject = UFunction::FindFunction("Function Engine.SequenceCondition.IsValidUISequenceObject");
	}

	USequenceCondition_eventIsValidUISequenceObject_Params IsValidUISequenceObject_Params;
	memset(&IsValidUISequenceObject_Params, 0, sizeof(IsValidUISequenceObject_Params));
	IsValidUISequenceObject_Params.TargetObject = TargetObject;

	this->ProcessEvent(uFnIsValidUISequenceObject, &IsValidUISequenceObject_Params, nullptr);

	return IsValidUISequenceObject_Params.ReturnValue;
};

// Function Engine.SeqCond_CompareBool.GetObjClassVersion
// [0x00022802] (FUNC_Defined | FUNC_Event | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t USeqCond_CompareBool::eventGetObjClassVersion()
{
	static UFunction* uFnGetObjClassVersion = nullptr;

	if (!uFnGetObjClassVersion)
	{
		uFnGetObjClassVersion = UFunction::FindFunction("Function Engine.SeqCond_CompareBool.GetObjClassVersion");
	}

	USeqCond_CompareBool_eventGetObjClassVersion_Params GetObjClassVersion_Params;
	memset(&GetObjClassVersion_Params, 0, sizeof(GetObjClassVersion_Params));

	USeqCond_CompareBool::StaticClass()->ProcessEvent(uFnGetObjClassVersion, &GetObjClassVersion_Params, nullptr);

	return GetObjClassVersion_Params.ReturnValue;
};

// Function Engine.SeqCond_GetServerType.GetObjClassVersion
// [0x00022802] (FUNC_Defined | FUNC_Event | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t USeqCond_GetServerType::eventGetObjClassVersion()
{
	static UFunction* uFnGetObjClassVersion = nullptr;

	if (!uFnGetObjClassVersion)
	{
		uFnGetObjClassVersion = UFunction::FindFunction("Function Engine.SeqCond_GetServerType.GetObjClassVersion");
	}

	USeqCond_GetServerType_eventGetObjClassVersion_Params GetObjClassVersion_Params;
	memset(&GetObjClassVersion_Params, 0, sizeof(GetObjClassVersion_Params));

	USeqCond_GetServerType::StaticClass()->ProcessEvent(uFnGetObjClassVersion, &GetObjClassVersion_Params, nullptr);

	return GetObjClassVersion_Params.ReturnValue;
};

// Function Engine.SeqCond_IsLoggedIn.CheckLogins
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool USeqCond_IsLoggedIn::eventCheckLogins()
{
	static UFunction* uFnCheckLogins = nullptr;

	if (!uFnCheckLogins)
	{
		uFnCheckLogins = UFunction::FindFunction("Function Engine.SeqCond_IsLoggedIn.CheckLogins");
	}

	USeqCond_IsLoggedIn_eventCheckLogins_Params CheckLogins_Params;
	memset(&CheckLogins_Params, 0, sizeof(CheckLogins_Params));

	this->ProcessEvent(uFnCheckLogins, &CheckLogins_Params, nullptr);

	return CheckLogins_Params.ReturnValue;
};

// Function Engine.SeqCond_SwitchBase.RemoveValueEntry
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        RemoveIndex                    (CPF_Parm)

void USeqCond_SwitchBase::eventRemoveValueEntry(int32_t RemoveIndex)
{
	static UFunction* uFnRemoveValueEntry = nullptr;

	if (!uFnRemoveValueEntry)
	{
		uFnRemoveValueEntry = UFunction::FindFunction("Function Engine.SeqCond_SwitchBase.RemoveValueEntry");
	}

	USeqCond_SwitchBase_eventRemoveValueEntry_Params RemoveValueEntry_Params;
	memset(&RemoveValueEntry_Params, 0, sizeof(RemoveValueEntry_Params));
	memcpy_s(&RemoveValueEntry_Params.RemoveIndex, sizeof(RemoveValueEntry_Params.RemoveIndex), &RemoveIndex, sizeof(RemoveIndex));

	this->ProcessEvent(uFnRemoveValueEntry, &RemoveValueEntry_Params, nullptr);
};

// Function Engine.SeqCond_SwitchBase.InsertValueEntry
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        InsertIndex                    (CPF_Parm)

void USeqCond_SwitchBase::eventInsertValueEntry(int32_t InsertIndex)
{
	static UFunction* uFnInsertValueEntry = nullptr;

	if (!uFnInsertValueEntry)
	{
		uFnInsertValueEntry = UFunction::FindFunction("Function Engine.SeqCond_SwitchBase.InsertValueEntry");
	}

	USeqCond_SwitchBase_eventInsertValueEntry_Params InsertValueEntry_Params;
	memset(&InsertValueEntry_Params, 0, sizeof(InsertValueEntry_Params));
	memcpy_s(&InsertValueEntry_Params.InsertIndex, sizeof(InsertValueEntry_Params.InsertIndex), &InsertIndex, sizeof(InsertIndex));

	this->ProcessEvent(uFnInsertValueEntry, &InsertValueEntry_Params, nullptr);
};

// Function Engine.SeqCond_SwitchBase.IsFallThruEnabled
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        ValueIndex                     (CPF_Parm)

bool USeqCond_SwitchBase::eventIsFallThruEnabled(int32_t ValueIndex)
{
	static UFunction* uFnIsFallThruEnabled = nullptr;

	if (!uFnIsFallThruEnabled)
	{
		uFnIsFallThruEnabled = UFunction::FindFunction("Function Engine.SeqCond_SwitchBase.IsFallThruEnabled");
	}

	USeqCond_SwitchBase_eventIsFallThruEnabled_Params IsFallThruEnabled_Params;
	memset(&IsFallThruEnabled_Params, 0, sizeof(IsFallThruEnabled_Params));
	memcpy_s(&IsFallThruEnabled_Params.ValueIndex, sizeof(IsFallThruEnabled_Params.ValueIndex), &ValueIndex, sizeof(ValueIndex));

	this->ProcessEvent(uFnIsFallThruEnabled, &IsFallThruEnabled_Params, nullptr);

	return IsFallThruEnabled_Params.ReturnValue;
};

// Function Engine.SeqCond_SwitchBase.VerifyDefaultCaseValue
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void USeqCond_SwitchBase::eventVerifyDefaultCaseValue()
{
	static UFunction* uFnVerifyDefaultCaseValue = nullptr;

	if (!uFnVerifyDefaultCaseValue)
	{
		uFnVerifyDefaultCaseValue = UFunction::FindFunction("Function Engine.SeqCond_SwitchBase.VerifyDefaultCaseValue");
	}

	USeqCond_SwitchBase_eventVerifyDefaultCaseValue_Params VerifyDefaultCaseValue_Params;
	memset(&VerifyDefaultCaseValue_Params, 0, sizeof(VerifyDefaultCaseValue_Params));

	this->ProcessEvent(uFnVerifyDefaultCaseValue, &VerifyDefaultCaseValue_Params, nullptr);
};

// Function Engine.SeqCond_SwitchClass.RemoveValueEntry
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        RemoveIndex                    (CPF_Parm)

void USeqCond_SwitchClass::eventRemoveValueEntry(int32_t RemoveIndex)
{
	static UFunction* uFnRemoveValueEntry = nullptr;

	if (!uFnRemoveValueEntry)
	{
		uFnRemoveValueEntry = UFunction::FindFunction("Function Engine.SeqCond_SwitchClass.RemoveValueEntry");
	}

	USeqCond_SwitchClass_eventRemoveValueEntry_Params RemoveValueEntry_Params;
	memset(&RemoveValueEntry_Params, 0, sizeof(RemoveValueEntry_Params));
	memcpy_s(&RemoveValueEntry_Params.RemoveIndex, sizeof(RemoveValueEntry_Params.RemoveIndex), &RemoveIndex, sizeof(RemoveIndex));

	this->ProcessEvent(uFnRemoveValueEntry, &RemoveValueEntry_Params, nullptr);
};

// Function Engine.SeqCond_SwitchClass.InsertValueEntry
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        InsertIndex                    (CPF_Parm)

void USeqCond_SwitchClass::eventInsertValueEntry(int32_t InsertIndex)
{
	static UFunction* uFnInsertValueEntry = nullptr;

	if (!uFnInsertValueEntry)
	{
		uFnInsertValueEntry = UFunction::FindFunction("Function Engine.SeqCond_SwitchClass.InsertValueEntry");
	}

	USeqCond_SwitchClass_eventInsertValueEntry_Params InsertValueEntry_Params;
	memset(&InsertValueEntry_Params, 0, sizeof(InsertValueEntry_Params));
	memcpy_s(&InsertValueEntry_Params.InsertIndex, sizeof(InsertValueEntry_Params.InsertIndex), &InsertIndex, sizeof(InsertIndex));

	this->ProcessEvent(uFnInsertValueEntry, &InsertValueEntry_Params, nullptr);
};

// Function Engine.SeqCond_SwitchClass.IsFallThruEnabled
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        ValueIndex                     (CPF_Parm)

bool USeqCond_SwitchClass::eventIsFallThruEnabled(int32_t ValueIndex)
{
	static UFunction* uFnIsFallThruEnabled = nullptr;

	if (!uFnIsFallThruEnabled)
	{
		uFnIsFallThruEnabled = UFunction::FindFunction("Function Engine.SeqCond_SwitchClass.IsFallThruEnabled");
	}

	USeqCond_SwitchClass_eventIsFallThruEnabled_Params IsFallThruEnabled_Params;
	memset(&IsFallThruEnabled_Params, 0, sizeof(IsFallThruEnabled_Params));
	memcpy_s(&IsFallThruEnabled_Params.ValueIndex, sizeof(IsFallThruEnabled_Params.ValueIndex), &ValueIndex, sizeof(ValueIndex));

	this->ProcessEvent(uFnIsFallThruEnabled, &IsFallThruEnabled_Params, nullptr);

	return IsFallThruEnabled_Params.ReturnValue;
};

// Function Engine.SeqCond_SwitchClass.VerifyDefaultCaseValue
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void USeqCond_SwitchClass::eventVerifyDefaultCaseValue()
{
	static UFunction* uFnVerifyDefaultCaseValue = nullptr;

	if (!uFnVerifyDefaultCaseValue)
	{
		uFnVerifyDefaultCaseValue = UFunction::FindFunction("Function Engine.SeqCond_SwitchClass.VerifyDefaultCaseValue");
	}

	USeqCond_SwitchClass_eventVerifyDefaultCaseValue_Params VerifyDefaultCaseValue_Params;
	memset(&VerifyDefaultCaseValue_Params, 0, sizeof(VerifyDefaultCaseValue_Params));

	this->ProcessEvent(uFnVerifyDefaultCaseValue, &VerifyDefaultCaseValue_Params, nullptr);
};

// Function Engine.SeqCond_SwitchObject.RemoveValueEntry
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        RemoveIndex                    (CPF_Parm)

void USeqCond_SwitchObject::eventRemoveValueEntry(int32_t RemoveIndex)
{
	static UFunction* uFnRemoveValueEntry = nullptr;

	if (!uFnRemoveValueEntry)
	{
		uFnRemoveValueEntry = UFunction::FindFunction("Function Engine.SeqCond_SwitchObject.RemoveValueEntry");
	}

	USeqCond_SwitchObject_eventRemoveValueEntry_Params RemoveValueEntry_Params;
	memset(&RemoveValueEntry_Params, 0, sizeof(RemoveValueEntry_Params));
	memcpy_s(&RemoveValueEntry_Params.RemoveIndex, sizeof(RemoveValueEntry_Params.RemoveIndex), &RemoveIndex, sizeof(RemoveIndex));

	this->ProcessEvent(uFnRemoveValueEntry, &RemoveValueEntry_Params, nullptr);
};

// Function Engine.SeqCond_SwitchObject.InsertValueEntry
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        InsertIndex                    (CPF_Parm)

void USeqCond_SwitchObject::eventInsertValueEntry(int32_t InsertIndex)
{
	static UFunction* uFnInsertValueEntry = nullptr;

	if (!uFnInsertValueEntry)
	{
		uFnInsertValueEntry = UFunction::FindFunction("Function Engine.SeqCond_SwitchObject.InsertValueEntry");
	}

	USeqCond_SwitchObject_eventInsertValueEntry_Params InsertValueEntry_Params;
	memset(&InsertValueEntry_Params, 0, sizeof(InsertValueEntry_Params));
	memcpy_s(&InsertValueEntry_Params.InsertIndex, sizeof(InsertValueEntry_Params.InsertIndex), &InsertIndex, sizeof(InsertIndex));

	this->ProcessEvent(uFnInsertValueEntry, &InsertValueEntry_Params, nullptr);
};

// Function Engine.SeqCond_SwitchObject.IsFallThruEnabled
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        ValueIndex                     (CPF_Parm)

bool USeqCond_SwitchObject::eventIsFallThruEnabled(int32_t ValueIndex)
{
	static UFunction* uFnIsFallThruEnabled = nullptr;

	if (!uFnIsFallThruEnabled)
	{
		uFnIsFallThruEnabled = UFunction::FindFunction("Function Engine.SeqCond_SwitchObject.IsFallThruEnabled");
	}

	USeqCond_SwitchObject_eventIsFallThruEnabled_Params IsFallThruEnabled_Params;
	memset(&IsFallThruEnabled_Params, 0, sizeof(IsFallThruEnabled_Params));
	memcpy_s(&IsFallThruEnabled_Params.ValueIndex, sizeof(IsFallThruEnabled_Params.ValueIndex), &ValueIndex, sizeof(ValueIndex));

	this->ProcessEvent(uFnIsFallThruEnabled, &IsFallThruEnabled_Params, nullptr);

	return IsFallThruEnabled_Params.ReturnValue;
};

// Function Engine.SeqCond_SwitchObject.VerifyDefaultCaseValue
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void USeqCond_SwitchObject::eventVerifyDefaultCaseValue()
{
	static UFunction* uFnVerifyDefaultCaseValue = nullptr;

	if (!uFnVerifyDefaultCaseValue)
	{
		uFnVerifyDefaultCaseValue = UFunction::FindFunction("Function Engine.SeqCond_SwitchObject.VerifyDefaultCaseValue");
	}

	USeqCond_SwitchObject_eventVerifyDefaultCaseValue_Params VerifyDefaultCaseValue_Params;
	memset(&VerifyDefaultCaseValue_Params, 0, sizeof(VerifyDefaultCaseValue_Params));

	this->ProcessEvent(uFnVerifyDefaultCaseValue, &VerifyDefaultCaseValue_Params, nullptr);
};

// Function Engine.SeqCond_SwitchPlatform.IsValidUISequenceObject
// [0x00024802] (FUNC_Defined | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UUIScreenObject*         TargetObject                   (CPF_OptionalParm | CPF_Parm)

bool USeqCond_SwitchPlatform::eventIsValidUISequenceObject(class UUIScreenObject* TargetObject)
{
	static UFunction* uFnIsValidUISequenceObject = nullptr;

	if (!uFnIsValidUISequenceObject)
	{
		uFnIsValidUISequenceObject = UFunction::FindFunction("Function Engine.SeqCond_SwitchPlatform.IsValidUISequenceObject");
	}

	USeqCond_SwitchPlatform_eventIsValidUISequenceObject_Params IsValidUISequenceObject_Params;
	memset(&IsValidUISequenceObject_Params, 0, sizeof(IsValidUISequenceObject_Params));
	IsValidUISequenceObject_Params.TargetObject = TargetObject;

	this->ProcessEvent(uFnIsValidUISequenceObject, &IsValidUISequenceObject_Params, nullptr);

	return IsValidUISequenceObject_Params.ReturnValue;
};

// Function Engine.SequenceEvent.Toggled
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void USequenceEvent::eventToggled()
{
	static UFunction* uFnToggled = nullptr;

	if (!uFnToggled)
	{
		uFnToggled = UFunction::FindFunction("Function Engine.SequenceEvent.Toggled");
	}

	USequenceEvent_eventToggled_Params Toggled_Params;
	memset(&Toggled_Params, 0, sizeof(Toggled_Params));

	this->ProcessEvent(uFnToggled, &Toggled_Params, nullptr);
};

// Function Engine.SequenceEvent.Reset
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void USequenceEvent::Reset()
{
	static UFunction* uFnReset = nullptr;

	if (!uFnReset)
	{
		uFnReset = UFunction::FindFunction("Function Engine.SequenceEvent.Reset");
	}

	USequenceEvent_execReset_Params Reset_Params;
	memset(&Reset_Params, 0, sizeof(Reset_Params));

	this->ProcessEvent(uFnReset, &Reset_Params, nullptr);
};

// Function Engine.SequenceEvent.CheckActivate
// [0x00424401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[18052])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class AActor*                  InOriginator                   (CPF_Parm)
// class AActor*                  InInstigator                   (CPF_Parm)
// uint32_t                       bTest                          (CPF_OptionalParm | CPF_Parm)
// uint32_t                       bPushTop                       (CPF_OptionalParm | CPF_Parm)
// class TArray<int32_t>          ActivateIndices                (CPF_Const | CPF_OptionalParm | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

bool USequenceEvent::CheckActivate(class AActor* InOriginator, class AActor* InInstigator, bool bTest, bool bPushTop, class TArray<int32_t>& ActivateIndices)
{
	static UFunction* uFnCheckActivate = nullptr;

	if (!uFnCheckActivate)
	{
		uFnCheckActivate = UFunction::FindFunction("Function Engine.SequenceEvent.CheckActivate");
	}

	USequenceEvent_execCheckActivate_Params CheckActivate_Params;
	memset(&CheckActivate_Params, 0, sizeof(CheckActivate_Params));
	CheckActivate_Params.InOriginator = InOriginator;
	CheckActivate_Params.InInstigator = InInstigator;
	CheckActivate_Params.bTest = bTest;
	CheckActivate_Params.bPushTop = bPushTop;
	memcpy_s(&CheckActivate_Params.ActivateIndices, sizeof(CheckActivate_Params.ActivateIndices), &ActivateIndices, sizeof(ActivateIndices));

	uFnCheckActivate->iNative = 0;
	uFnCheckActivate->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnCheckActivate, &CheckActivate_Params, nullptr);
	uFnCheckActivate->FunctionFlags |= 0x400;
	uFnCheckActivate->iNative = 18052;

	memcpy_s(&ActivateIndices, sizeof(ActivateIndices), &CheckActivate_Params.ActivateIndices, sizeof(CheckActivate_Params.ActivateIndices));

	return CheckActivate_Params.ReturnValue;
};

// Function Engine.SequenceEvent.RegisterEvent
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void USequenceEvent::eventRegisterEvent()
{
	static UFunction* uFnRegisterEvent = nullptr;

	if (!uFnRegisterEvent)
	{
		uFnRegisterEvent = UFunction::FindFunction("Function Engine.SequenceEvent.RegisterEvent");
	}

	USequenceEvent_eventRegisterEvent_Params RegisterEvent_Params;
	memset(&RegisterEvent_Params, 0, sizeof(RegisterEvent_Params));

	this->ProcessEvent(uFnRegisterEvent, &RegisterEvent_Params, nullptr);
};

// Function Engine.SeqEvent_LevelLoaded.GetObjClassVersion
// [0x00022802] (FUNC_Defined | FUNC_Event | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t USeqEvent_LevelLoaded::eventGetObjClassVersion()
{
	static UFunction* uFnGetObjClassVersion = nullptr;

	if (!uFnGetObjClassVersion)
	{
		uFnGetObjClassVersion = UFunction::FindFunction("Function Engine.SeqEvent_LevelLoaded.GetObjClassVersion");
	}

	USeqEvent_LevelLoaded_eventGetObjClassVersion_Params GetObjClassVersion_Params;
	memset(&GetObjClassVersion_Params, 0, sizeof(GetObjClassVersion_Params));

	USeqEvent_LevelLoaded::StaticClass()->ProcessEvent(uFnGetObjClassVersion, &GetObjClassVersion_Params, nullptr);

	return GetObjClassVersion_Params.ReturnValue;
};

// Function Engine.SeqEvent_LOS.GetObjClassVersion
// [0x00022802] (FUNC_Defined | FUNC_Event | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t USeqEvent_LOS::eventGetObjClassVersion()
{
	static UFunction* uFnGetObjClassVersion = nullptr;

	if (!uFnGetObjClassVersion)
	{
		uFnGetObjClassVersion = UFunction::FindFunction("Function Engine.SeqEvent_LOS.GetObjClassVersion");
	}

	USeqEvent_LOS_eventGetObjClassVersion_Params GetObjClassVersion_Params;
	memset(&GetObjClassVersion_Params, 0, sizeof(GetObjClassVersion_Params));

	USeqEvent_LOS::StaticClass()->ProcessEvent(uFnGetObjClassVersion, &GetObjClassVersion_Params, nullptr);

	return GetObjClassVersion_Params.ReturnValue;
};

// Function Engine.SeqEvent_Mover.NotifyFinishedOpen
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void USeqEvent_Mover::NotifyFinishedOpen()
{
	static UFunction* uFnNotifyFinishedOpen = nullptr;

	if (!uFnNotifyFinishedOpen)
	{
		uFnNotifyFinishedOpen = UFunction::FindFunction("Function Engine.SeqEvent_Mover.NotifyFinishedOpen");
	}

	USeqEvent_Mover_execNotifyFinishedOpen_Params NotifyFinishedOpen_Params;
	memset(&NotifyFinishedOpen_Params, 0, sizeof(NotifyFinishedOpen_Params));

	this->ProcessEvent(uFnNotifyFinishedOpen, &NotifyFinishedOpen_Params, nullptr);
};

// Function Engine.SeqEvent_Mover.NotifyDetached
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AActor*                  Other                          (CPF_Parm)

void USeqEvent_Mover::NotifyDetached(class AActor* Other)
{
	static UFunction* uFnNotifyDetached = nullptr;

	if (!uFnNotifyDetached)
	{
		uFnNotifyDetached = UFunction::FindFunction("Function Engine.SeqEvent_Mover.NotifyDetached");
	}

	USeqEvent_Mover_execNotifyDetached_Params NotifyDetached_Params;
	memset(&NotifyDetached_Params, 0, sizeof(NotifyDetached_Params));
	NotifyDetached_Params.Other = Other;

	this->ProcessEvent(uFnNotifyDetached, &NotifyDetached_Params, nullptr);
};

// Function Engine.SeqEvent_Mover.NotifyAttached
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AActor*                  Other                          (CPF_Parm)

void USeqEvent_Mover::NotifyAttached(class AActor* Other)
{
	static UFunction* uFnNotifyAttached = nullptr;

	if (!uFnNotifyAttached)
	{
		uFnNotifyAttached = UFunction::FindFunction("Function Engine.SeqEvent_Mover.NotifyAttached");
	}

	USeqEvent_Mover_execNotifyAttached_Params NotifyAttached_Params;
	memset(&NotifyAttached_Params, 0, sizeof(NotifyAttached_Params));
	NotifyAttached_Params.Other = Other;

	this->ProcessEvent(uFnNotifyAttached, &NotifyAttached_Params, nullptr);
};

// Function Engine.SeqEvent_Mover.NotifyEncroachingOn
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AActor*                  Hit                            (CPF_Parm)

void USeqEvent_Mover::NotifyEncroachingOn(class AActor* Hit)
{
	static UFunction* uFnNotifyEncroachingOn = nullptr;

	if (!uFnNotifyEncroachingOn)
	{
		uFnNotifyEncroachingOn = UFunction::FindFunction("Function Engine.SeqEvent_Mover.NotifyEncroachingOn");
	}

	USeqEvent_Mover_execNotifyEncroachingOn_Params NotifyEncroachingOn_Params;
	memset(&NotifyEncroachingOn_Params, 0, sizeof(NotifyEncroachingOn_Params));
	NotifyEncroachingOn_Params.Hit = Hit;

	this->ProcessEvent(uFnNotifyEncroachingOn, &NotifyEncroachingOn_Params, nullptr);
};

// Function Engine.SeqEvent_Mover.RegisterEvent
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void USeqEvent_Mover::eventRegisterEvent()
{
	static UFunction* uFnRegisterEvent = nullptr;

	if (!uFnRegisterEvent)
	{
		uFnRegisterEvent = UFunction::FindFunction("Function Engine.SeqEvent_Mover.RegisterEvent");
	}

	USeqEvent_Mover_eventRegisterEvent_Params RegisterEvent_Params;
	memset(&RegisterEvent_Params, 0, sizeof(RegisterEvent_Params));

	this->ProcessEvent(uFnRegisterEvent, &RegisterEvent_Params, nullptr);
};

// Function Engine.SeqEvent_ParticleEvent.GetObjClassVersion
// [0x00022802] (FUNC_Defined | FUNC_Event | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t USeqEvent_ParticleEvent::eventGetObjClassVersion()
{
	static UFunction* uFnGetObjClassVersion = nullptr;

	if (!uFnGetObjClassVersion)
	{
		uFnGetObjClassVersion = UFunction::FindFunction("Function Engine.SeqEvent_ParticleEvent.GetObjClassVersion");
	}

	USeqEvent_ParticleEvent_eventGetObjClassVersion_Params GetObjClassVersion_Params;
	memset(&GetObjClassVersion_Params, 0, sizeof(GetObjClassVersion_Params));

	USeqEvent_ParticleEvent::StaticClass()->ProcessEvent(uFnGetObjClassVersion, &GetObjClassVersion_Params, nullptr);

	return GetObjClassVersion_Params.ReturnValue;
};

// Function Engine.SeqEvent_RemoteEvent.GetObjClassVersion
// [0x00022802] (FUNC_Defined | FUNC_Event | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t USeqEvent_RemoteEvent::eventGetObjClassVersion()
{
	static UFunction* uFnGetObjClassVersion = nullptr;

	if (!uFnGetObjClassVersion)
	{
		uFnGetObjClassVersion = UFunction::FindFunction("Function Engine.SeqEvent_RemoteEvent.GetObjClassVersion");
	}

	USeqEvent_RemoteEvent_eventGetObjClassVersion_Params GetObjClassVersion_Params;
	memset(&GetObjClassVersion_Params, 0, sizeof(GetObjClassVersion_Params));

	USeqEvent_RemoteEvent::StaticClass()->ProcessEvent(uFnGetObjClassVersion, &GetObjClassVersion_Params, nullptr);

	return GetObjClassVersion_Params.ReturnValue;
};

// Function Engine.SeqEvent_TakeDamage.Toggled
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void USeqEvent_TakeDamage::eventToggled()
{
	static UFunction* uFnToggled = nullptr;

	if (!uFnToggled)
	{
		uFnToggled = UFunction::FindFunction("Function Engine.SeqEvent_TakeDamage.Toggled");
	}

	USeqEvent_TakeDamage_eventToggled_Params Toggled_Params;
	memset(&Toggled_Params, 0, sizeof(Toggled_Params));

	this->ProcessEvent(uFnToggled, &Toggled_Params, nullptr);
};

// Function Engine.SeqEvent_TakeDamage.GetObjClassVersion
// [0x00022802] (FUNC_Defined | FUNC_Event | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t USeqEvent_TakeDamage::eventGetObjClassVersion()
{
	static UFunction* uFnGetObjClassVersion = nullptr;

	if (!uFnGetObjClassVersion)
	{
		uFnGetObjClassVersion = UFunction::FindFunction("Function Engine.SeqEvent_TakeDamage.GetObjClassVersion");
	}

	USeqEvent_TakeDamage_eventGetObjClassVersion_Params GetObjClassVersion_Params;
	memset(&GetObjClassVersion_Params, 0, sizeof(GetObjClassVersion_Params));

	USeqEvent_TakeDamage::StaticClass()->ProcessEvent(uFnGetObjClassVersion, &GetObjClassVersion_Params, nullptr);

	return GetObjClassVersion_Params.ReturnValue;
};

// Function Engine.SeqEvent_TakeDamage.Reset
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void USeqEvent_TakeDamage::Reset()
{
	static UFunction* uFnReset = nullptr;

	if (!uFnReset)
	{
		uFnReset = UFunction::FindFunction("Function Engine.SeqEvent_TakeDamage.Reset");
	}

	USeqEvent_TakeDamage_execReset_Params Reset_Params;
	memset(&Reset_Params, 0, sizeof(Reset_Params));

	this->ProcessEvent(uFnReset, &Reset_Params, nullptr);
};

// Function Engine.SeqEvent_TakeDamage.HandleDamage
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20893])
// Parameter Info:
// class AActor*                  InOriginator                   (CPF_Parm)
// class AActor*                  InInstigator                   (CPF_Parm)
// class UDamageType*             inDamageType                   (CPF_Parm)
// int32_t                        inAmount                       (CPF_Parm)

void USeqEvent_TakeDamage::HandleDamage(class AActor* InOriginator, class AActor* InInstigator, class UDamageType* inDamageType, int32_t inAmount)
{
	static UFunction* uFnHandleDamage = nullptr;

	if (!uFnHandleDamage)
	{
		uFnHandleDamage = UFunction::FindFunction("Function Engine.SeqEvent_TakeDamage.HandleDamage");
	}

	USeqEvent_TakeDamage_execHandleDamage_Params HandleDamage_Params;
	memset(&HandleDamage_Params, 0, sizeof(HandleDamage_Params));
	HandleDamage_Params.InOriginator = InOriginator;
	HandleDamage_Params.InInstigator = InInstigator;
	HandleDamage_Params.inDamageType = inDamageType;
	memcpy_s(&HandleDamage_Params.inAmount, sizeof(HandleDamage_Params.inAmount), &inAmount, sizeof(inAmount));

	uFnHandleDamage->iNative = 0;
	uFnHandleDamage->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnHandleDamage, &HandleDamage_Params, nullptr);
	uFnHandleDamage->FunctionFlags |= 0x400;
	uFnHandleDamage->iNative = 20893;
};

// Function Engine.SeqEvent_TakeDamage.IsValidDamageType
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[21431])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UDamageType*             inDamageType                   (CPF_Parm)

bool USeqEvent_TakeDamage::IsValidDamageType(class UDamageType* inDamageType)
{
	static UFunction* uFnIsValidDamageType = nullptr;

	if (!uFnIsValidDamageType)
	{
		uFnIsValidDamageType = UFunction::FindFunction("Function Engine.SeqEvent_TakeDamage.IsValidDamageType");
	}

	USeqEvent_TakeDamage_execIsValidDamageType_Params IsValidDamageType_Params;
	memset(&IsValidDamageType_Params, 0, sizeof(IsValidDamageType_Params));
	IsValidDamageType_Params.inDamageType = inDamageType;

	uFnIsValidDamageType->iNative = 0;
	uFnIsValidDamageType->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnIsValidDamageType, &IsValidDamageType_Params, nullptr);
	uFnIsValidDamageType->FunctionFlags |= 0x400;
	uFnIsValidDamageType->iNative = 21431;

	return IsValidDamageType_Params.ReturnValue;
};

// Function Engine.SeqEvent_Touch.GetObjClassVersion
// [0x00022802] (FUNC_Defined | FUNC_Event | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t USeqEvent_Touch::eventGetObjClassVersion()
{
	static UFunction* uFnGetObjClassVersion = nullptr;

	if (!uFnGetObjClassVersion)
	{
		uFnGetObjClassVersion = UFunction::FindFunction("Function Engine.SeqEvent_Touch.GetObjClassVersion");
	}

	USeqEvent_Touch_eventGetObjClassVersion_Params GetObjClassVersion_Params;
	memset(&GetObjClassVersion_Params, 0, sizeof(GetObjClassVersion_Params));

	USeqEvent_Touch::StaticClass()->ProcessEvent(uFnGetObjClassVersion, &GetObjClassVersion_Params, nullptr);

	return GetObjClassVersion_Params.ReturnValue;
};

// Function Engine.SeqEvent_Touch.NotifyTouchingPawnDied
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class APawn*                   P                              (CPF_Parm)

void USeqEvent_Touch::NotifyTouchingPawnDied(class APawn* P)
{
	static UFunction* uFnNotifyTouchingPawnDied = nullptr;

	if (!uFnNotifyTouchingPawnDied)
	{
		uFnNotifyTouchingPawnDied = UFunction::FindFunction("Function Engine.SeqEvent_Touch.NotifyTouchingPawnDied");
	}

	USeqEvent_Touch_execNotifyTouchingPawnDied_Params NotifyTouchingPawnDied_Params;
	memset(&NotifyTouchingPawnDied_Params, 0, sizeof(NotifyTouchingPawnDied_Params));
	NotifyTouchingPawnDied_Params.P = P;

	this->ProcessEvent(uFnNotifyTouchingPawnDied, &NotifyTouchingPawnDied_Params, nullptr);
};

// Function Engine.SeqEvent_Touch.Toggled
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void USeqEvent_Touch::eventToggled()
{
	static UFunction* uFnToggled = nullptr;

	if (!uFnToggled)
	{
		uFnToggled = UFunction::FindFunction("Function Engine.SeqEvent_Touch.Toggled");
	}

	USeqEvent_Touch_eventToggled_Params Toggled_Params;
	memset(&Toggled_Params, 0, sizeof(Toggled_Params));

	this->ProcessEvent(uFnToggled, &Toggled_Params, nullptr);
};

// Function Engine.SeqEvent_Touch.CheckUnTouchActivate
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[18068])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class AActor*                  InOriginator                   (CPF_Parm)
// class AActor*                  InInstigator                   (CPF_Parm)
// uint32_t                       bTest                          (CPF_OptionalParm | CPF_Parm)

bool USeqEvent_Touch::CheckUnTouchActivate(class AActor* InOriginator, class AActor* InInstigator, bool bTest)
{
	static UFunction* uFnCheckUnTouchActivate = nullptr;

	if (!uFnCheckUnTouchActivate)
	{
		uFnCheckUnTouchActivate = UFunction::FindFunction("Function Engine.SeqEvent_Touch.CheckUnTouchActivate");
	}

	USeqEvent_Touch_execCheckUnTouchActivate_Params CheckUnTouchActivate_Params;
	memset(&CheckUnTouchActivate_Params, 0, sizeof(CheckUnTouchActivate_Params));
	CheckUnTouchActivate_Params.InOriginator = InOriginator;
	CheckUnTouchActivate_Params.InInstigator = InInstigator;
	CheckUnTouchActivate_Params.bTest = bTest;

	uFnCheckUnTouchActivate->iNative = 0;
	uFnCheckUnTouchActivate->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnCheckUnTouchActivate, &CheckUnTouchActivate_Params, nullptr);
	uFnCheckUnTouchActivate->FunctionFlags |= 0x400;
	uFnCheckUnTouchActivate->iNative = 18068;

	return CheckUnTouchActivate_Params.ReturnValue;
};

// Function Engine.SeqEvent_Touch.CheckTouchActivate
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[18066])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class AActor*                  InOriginator                   (CPF_Parm)
// class AActor*                  InInstigator                   (CPF_Parm)
// uint32_t                       bTest                          (CPF_OptionalParm | CPF_Parm)

bool USeqEvent_Touch::CheckTouchActivate(class AActor* InOriginator, class AActor* InInstigator, bool bTest)
{
	static UFunction* uFnCheckTouchActivate = nullptr;

	if (!uFnCheckTouchActivate)
	{
		uFnCheckTouchActivate = UFunction::FindFunction("Function Engine.SeqEvent_Touch.CheckTouchActivate");
	}

	USeqEvent_Touch_execCheckTouchActivate_Params CheckTouchActivate_Params;
	memset(&CheckTouchActivate_Params, 0, sizeof(CheckTouchActivate_Params));
	CheckTouchActivate_Params.InOriginator = InOriginator;
	CheckTouchActivate_Params.InInstigator = InInstigator;
	CheckTouchActivate_Params.bTest = bTest;

	uFnCheckTouchActivate->iNative = 0;
	uFnCheckTouchActivate->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnCheckTouchActivate, &CheckTouchActivate_Params, nullptr);
	uFnCheckTouchActivate->FunctionFlags |= 0x400;
	uFnCheckTouchActivate->iNative = 18066;

	return CheckTouchActivate_Params.ReturnValue;
};

// Function Engine.SequenceVariable.IsValidUISequenceObject
// [0x00024802] (FUNC_Defined | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UUIScreenObject*         TargetObject                   (CPF_OptionalParm | CPF_Parm)

bool USequenceVariable::eventIsValidUISequenceObject(class UUIScreenObject* TargetObject)
{
	static UFunction* uFnIsValidUISequenceObject = nullptr;

	if (!uFnIsValidUISequenceObject)
	{
		uFnIsValidUISequenceObject = UFunction::FindFunction("Function Engine.SequenceVariable.IsValidUISequenceObject");
	}

	USequenceVariable_eventIsValidUISequenceObject_Params IsValidUISequenceObject_Params;
	memset(&IsValidUISequenceObject_Params, 0, sizeof(IsValidUISequenceObject_Params));
	IsValidUISequenceObject_Params.TargetObject = TargetObject;

	this->ProcessEvent(uFnIsValidUISequenceObject, &IsValidUISequenceObject_Params, nullptr);

	return IsValidUISequenceObject_Params.ReturnValue;
};

// Function Engine.InterpData.GetObjClassVersion
// [0x00022802] (FUNC_Defined | FUNC_Event | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t UInterpData::eventGetObjClassVersion()
{
	static UFunction* uFnGetObjClassVersion = nullptr;

	if (!uFnGetObjClassVersion)
	{
		uFnGetObjClassVersion = UFunction::FindFunction("Function Engine.InterpData.GetObjClassVersion");
	}

	UInterpData_eventGetObjClassVersion_Params GetObjClassVersion_Params;
	memset(&GetObjClassVersion_Params, 0, sizeof(GetObjClassVersion_Params));

	UInterpData::StaticClass()->ProcessEvent(uFnGetObjClassVersion, &GetObjClassVersion_Params, nullptr);

	return GetObjClassVersion_Params.ReturnValue;
};

// Function Engine.SeqVar_Object.SetObjectValue
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UObject*                 NewValue                       (CPF_Parm)

void USeqVar_Object::SetObjectValue(class UObject* NewValue)
{
	static UFunction* uFnSetObjectValue = nullptr;

	if (!uFnSetObjectValue)
	{
		uFnSetObjectValue = UFunction::FindFunction("Function Engine.SeqVar_Object.SetObjectValue");
	}

	USeqVar_Object_execSetObjectValue_Params SetObjectValue_Params;
	memset(&SetObjectValue_Params, 0, sizeof(SetObjectValue_Params));
	SetObjectValue_Params.NewValue = NewValue;

	this->ProcessEvent(uFnSetObjectValue, &SetObjectValue_Params, nullptr);
};

// Function Engine.SeqVar_Object.GetObjectValue
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UObject*                 ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class UObject* USeqVar_Object::GetObjectValueW()
{
	static UFunction* uFnGetObjectValueW = nullptr;

	if (!uFnGetObjectValueW)
	{
		uFnGetObjectValueW = UFunction::FindFunction("Function Engine.SeqVar_Object.GetObjectValue");
	}

	USeqVar_Object_execGetObjectValueW_Params GetObjectValueW_Params;
	memset(&GetObjectValueW_Params, 0, sizeof(GetObjectValueW_Params));

	this->ProcessEvent(uFnGetObjectValueW, &GetObjectValueW_Params, nullptr);

	return GetObjectValueW_Params.ReturnValue;
};

// Function Engine.SeqVar_ObjectList.SetObjectValue
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UObject*                 NewValue                       (CPF_Parm)

void USeqVar_ObjectList::SetObjectValue(class UObject* NewValue)
{
	static UFunction* uFnSetObjectValue = nullptr;

	if (!uFnSetObjectValue)
	{
		uFnSetObjectValue = UFunction::FindFunction("Function Engine.SeqVar_ObjectList.SetObjectValue");
	}

	USeqVar_ObjectList_execSetObjectValue_Params SetObjectValue_Params;
	memset(&SetObjectValue_Params, 0, sizeof(SetObjectValue_Params));
	SetObjectValue_Params.NewValue = NewValue;

	this->ProcessEvent(uFnSetObjectValue, &SetObjectValue_Params, nullptr);
};

// Function Engine.SeqVar_ObjectList.GetObjectValue
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UObject*                 ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class UObject* USeqVar_ObjectList::GetObjectValueW()
{
	static UFunction* uFnGetObjectValueW = nullptr;

	if (!uFnGetObjectValueW)
	{
		uFnGetObjectValueW = UFunction::FindFunction("Function Engine.SeqVar_ObjectList.GetObjectValue");
	}

	USeqVar_ObjectList_execGetObjectValueW_Params GetObjectValueW_Params;
	memset(&GetObjectValueW_Params, 0, sizeof(GetObjectValueW_Params));

	this->ProcessEvent(uFnGetObjectValueW, &GetObjectValueW_Params, nullptr);

	return GetObjectValueW_Params.ReturnValue;
};

// Function Engine.SeqVar_Player.GetObjectValue
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UObject*                 ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class UObject* USeqVar_Player::GetObjectValueW()
{
	static UFunction* uFnGetObjectValueW = nullptr;

	if (!uFnGetObjectValueW)
	{
		uFnGetObjectValueW = UFunction::FindFunction("Function Engine.SeqVar_Player.GetObjectValue");
	}

	USeqVar_Player_execGetObjectValueW_Params GetObjectValueW_Params;
	memset(&GetObjectValueW_Params, 0, sizeof(GetObjectValueW_Params));

	this->ProcessEvent(uFnGetObjectValueW, &GetObjectValueW_Params, nullptr);

	return GetObjectValueW_Params.ReturnValue;
};

// Function Engine.SeqVar_Player.UpdatePlayersList
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[26994])
// Parameter Info:

void USeqVar_Player::UpdatePlayersList()
{
	static UFunction* uFnUpdatePlayersList = nullptr;

	if (!uFnUpdatePlayersList)
	{
		uFnUpdatePlayersList = UFunction::FindFunction("Function Engine.SeqVar_Player.UpdatePlayersList");
	}

	USeqVar_Player_execUpdatePlayersList_Params UpdatePlayersList_Params;
	memset(&UpdatePlayersList_Params, 0, sizeof(UpdatePlayersList_Params));

	uFnUpdatePlayersList->iNative = 0;
	uFnUpdatePlayersList->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnUpdatePlayersList, &UpdatePlayersList_Params, nullptr);
	uFnUpdatePlayersList->FunctionFlags |= 0x400;
	uFnUpdatePlayersList->iNative = 26994;
};

// Function Engine.DataStoreClient.DebugDumpDataStoreInfo
// [0x00020001] (FUNC_Final | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bVerbose                       (CPF_Parm)

void UDataStoreClient::DebugDumpDataStoreInfo(bool bVerbose)
{
	static UFunction* uFnDebugDumpDataStoreInfo = nullptr;

	if (!uFnDebugDumpDataStoreInfo)
	{
		uFnDebugDumpDataStoreInfo = UFunction::FindFunction("Function Engine.DataStoreClient.DebugDumpDataStoreInfo");
	}

	UDataStoreClient_execDebugDumpDataStoreInfo_Params DebugDumpDataStoreInfo_Params;
	memset(&DebugDumpDataStoreInfo_Params, 0, sizeof(DebugDumpDataStoreInfo_Params));
	DebugDumpDataStoreInfo_Params.bVerbose = bVerbose;

	this->ProcessEvent(uFnDebugDumpDataStoreInfo, &DebugDumpDataStoreInfo_Params, nullptr);
};

// Function Engine.DataStoreClient.NotifyGameSessionEnded
// [0x00020803] (FUNC_Final | FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UDataStoreClient::eventNotifyGameSessionEnded()
{
	static UFunction* uFnNotifyGameSessionEnded = nullptr;

	if (!uFnNotifyGameSessionEnded)
	{
		uFnNotifyGameSessionEnded = UFunction::FindFunction("Function Engine.DataStoreClient.NotifyGameSessionEnded");
	}

	UDataStoreClient_eventNotifyGameSessionEnded_Params NotifyGameSessionEnded_Params;
	memset(&NotifyGameSessionEnded_Params, 0, sizeof(NotifyGameSessionEnded_Params));

	this->ProcessEvent(uFnNotifyGameSessionEnded, &NotifyGameSessionEnded_Params, nullptr);
};

// Function Engine.DataStoreClient.FindDataStoreClass
// [0x00020003] (FUNC_Final | FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UUIDataStore*            ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UUIDataStore*            RequiredMetaClass              (CPF_Parm)

class UUIDataStore* UDataStoreClient::FindDataStoreClass(class UUIDataStore* RequiredMetaClass)
{
	static UFunction* uFnFindDataStoreClass = nullptr;

	if (!uFnFindDataStoreClass)
	{
		uFnFindDataStoreClass = UFunction::FindFunction("Function Engine.DataStoreClient.FindDataStoreClass");
	}

	UDataStoreClient_execFindDataStoreClass_Params FindDataStoreClass_Params;
	memset(&FindDataStoreClass_Params, 0, sizeof(FindDataStoreClass_Params));
	FindDataStoreClass_Params.RequiredMetaClass = RequiredMetaClass;

	this->ProcessEvent(uFnFindDataStoreClass, &FindDataStoreClass_Params, nullptr);

	return FindDataStoreClass_Params.ReturnValue;
};

// Function Engine.DataStoreClient.GetPlayerDataStoreClasses
// [0x00420003] (FUNC_Final | FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// class TArray<class UUIDataStore*> out_DataStoreClasses           (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void UDataStoreClient::GetPlayerDataStoreClasses(class TArray<class UUIDataStore*>& out_DataStoreClasses)
{
	static UFunction* uFnGetPlayerDataStoreClasses = nullptr;

	if (!uFnGetPlayerDataStoreClasses)
	{
		uFnGetPlayerDataStoreClasses = UFunction::FindFunction("Function Engine.DataStoreClient.GetPlayerDataStoreClasses");
	}

	UDataStoreClient_execGetPlayerDataStoreClasses_Params GetPlayerDataStoreClasses_Params;
	memset(&GetPlayerDataStoreClasses_Params, 0, sizeof(GetPlayerDataStoreClasses_Params));
	memcpy_s(&GetPlayerDataStoreClasses_Params.out_DataStoreClasses, sizeof(GetPlayerDataStoreClasses_Params.out_DataStoreClasses), &out_DataStoreClasses, sizeof(out_DataStoreClasses));

	this->ProcessEvent(uFnGetPlayerDataStoreClasses, &GetPlayerDataStoreClasses_Params, nullptr);

	memcpy_s(&out_DataStoreClasses, sizeof(out_DataStoreClasses), &GetPlayerDataStoreClasses_Params.out_DataStoreClasses, sizeof(GetPlayerDataStoreClasses_Params.out_DataStoreClasses));
};

// Function Engine.DataStoreClient.FindPlayerDataStoreIndex
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20111])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class ULocalPlayer*            PlayerOwner                    (CPF_Parm)

int32_t UDataStoreClient::FindPlayerDataStoreIndex(class ULocalPlayer* PlayerOwner)
{
	static UFunction* uFnFindPlayerDataStoreIndex = nullptr;

	if (!uFnFindPlayerDataStoreIndex)
	{
		uFnFindPlayerDataStoreIndex = UFunction::FindFunction("Function Engine.DataStoreClient.FindPlayerDataStoreIndex");
	}

	UDataStoreClient_execFindPlayerDataStoreIndex_Params FindPlayerDataStoreIndex_Params;
	memset(&FindPlayerDataStoreIndex_Params, 0, sizeof(FindPlayerDataStoreIndex_Params));
	FindPlayerDataStoreIndex_Params.PlayerOwner = PlayerOwner;

	uFnFindPlayerDataStoreIndex->iNative = 0;
	uFnFindPlayerDataStoreIndex->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnFindPlayerDataStoreIndex, &FindPlayerDataStoreIndex_Params, nullptr);
	uFnFindPlayerDataStoreIndex->FunctionFlags |= 0x400;
	uFnFindPlayerDataStoreIndex->iNative = 20111;

	return FindPlayerDataStoreIndex_Params.ReturnValue;
};

// Function Engine.DataStoreClient.UnregisterDataStore
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[26956])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UUIDataStore*            DataStore                      (CPF_Parm)

bool UDataStoreClient::UnregisterDataStore(class UUIDataStore* DataStore)
{
	static UFunction* uFnUnregisterDataStore = nullptr;

	if (!uFnUnregisterDataStore)
	{
		uFnUnregisterDataStore = UFunction::FindFunction("Function Engine.DataStoreClient.UnregisterDataStore");
	}

	UDataStoreClient_execUnregisterDataStore_Params UnregisterDataStore_Params;
	memset(&UnregisterDataStore_Params, 0, sizeof(UnregisterDataStore_Params));
	UnregisterDataStore_Params.DataStore = DataStore;

	uFnUnregisterDataStore->iNative = 0;
	uFnUnregisterDataStore->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnUnregisterDataStore, &UnregisterDataStore_Params, nullptr);
	uFnUnregisterDataStore->FunctionFlags |= 0x400;
	uFnUnregisterDataStore->iNative = 26956;

	return UnregisterDataStore_Params.ReturnValue;
};

// Function Engine.DataStoreClient.RegisterDataStore
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[25017])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UUIDataStore*            DataStore                      (CPF_Parm)
// class ULocalPlayer*            PlayerOwner                    (CPF_OptionalParm | CPF_Parm)

bool UDataStoreClient::RegisterDataStore(class UUIDataStore* DataStore, class ULocalPlayer* PlayerOwner)
{
	static UFunction* uFnRegisterDataStore = nullptr;

	if (!uFnRegisterDataStore)
	{
		uFnRegisterDataStore = UFunction::FindFunction("Function Engine.DataStoreClient.RegisterDataStore");
	}

	UDataStoreClient_execRegisterDataStore_Params RegisterDataStore_Params;
	memset(&RegisterDataStore_Params, 0, sizeof(RegisterDataStore_Params));
	RegisterDataStore_Params.DataStore = DataStore;
	RegisterDataStore_Params.PlayerOwner = PlayerOwner;

	uFnRegisterDataStore->iNative = 0;
	uFnRegisterDataStore->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnRegisterDataStore, &RegisterDataStore_Params, nullptr);
	uFnRegisterDataStore->FunctionFlags |= 0x400;
	uFnRegisterDataStore->iNative = 25017;

	return RegisterDataStore_Params.ReturnValue;
};

// Function Engine.DataStoreClient.CreateDataStore
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[18444])
// Parameter Info:
// class UUIDataStore*            ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_CoerceParm)
// class UUIDataStore*            DataStoreClass                 (CPF_Parm)

class UUIDataStore* UDataStoreClient::CreateDataStore(class UUIDataStore* DataStoreClass)
{
	static UFunction* uFnCreateDataStore = nullptr;

	if (!uFnCreateDataStore)
	{
		uFnCreateDataStore = UFunction::FindFunction("Function Engine.DataStoreClient.CreateDataStore");
	}

	UDataStoreClient_execCreateDataStore_Params CreateDataStore_Params;
	memset(&CreateDataStore_Params, 0, sizeof(CreateDataStore_Params));
	CreateDataStore_Params.DataStoreClass = DataStoreClass;

	uFnCreateDataStore->iNative = 0;
	uFnCreateDataStore->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnCreateDataStore, &CreateDataStore_Params, nullptr);
	uFnCreateDataStore->FunctionFlags |= 0x400;
	uFnCreateDataStore->iNative = 18444;

	return CreateDataStore_Params.ReturnValue;
};

// Function Engine.DataStoreClient.FindDataStore
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[20095])
// Parameter Info:
// class UUIDataStore*            ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    DataStoreTag                   (CPF_Parm)
// class ULocalPlayer*            PlayerOwner                    (CPF_OptionalParm | CPF_Parm)

class UUIDataStore* UDataStoreClient::FindDataStore(const class FName& DataStoreTag, class ULocalPlayer* PlayerOwner)
{
	static UFunction* uFnFindDataStore = nullptr;

	if (!uFnFindDataStore)
	{
		uFnFindDataStore = UFunction::FindFunction("Function Engine.DataStoreClient.FindDataStore");
	}

	UDataStoreClient_execFindDataStore_Params FindDataStore_Params;
	memset(&FindDataStore_Params, 0, sizeof(FindDataStore_Params));
	memcpy_s(&FindDataStore_Params.DataStoreTag, sizeof(FindDataStore_Params.DataStoreTag), &DataStoreTag, sizeof(DataStoreTag));
	FindDataStore_Params.PlayerOwner = PlayerOwner;

	uFnFindDataStore->iNative = 0;
	uFnFindDataStore->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnFindDataStore, &FindDataStore_Params, nullptr);
	uFnFindDataStore->FunctionFlags |= 0x400;
	uFnFindDataStore->iNative = 20095;

	return FindDataStore_Params.ReturnValue;
};

// Function Engine.Console.UpdateCompleteIndices
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[26976])
// Parameter Info:

void UConsole::UpdateCompleteIndices()
{
	static UFunction* uFnUpdateCompleteIndices = nullptr;

	if (!uFnUpdateCompleteIndices)
	{
		uFnUpdateCompleteIndices = UFunction::FindFunction("Function Engine.Console.UpdateCompleteIndices");
	}

	UConsole_execUpdateCompleteIndices_Params UpdateCompleteIndices_Params;
	memset(&UpdateCompleteIndices_Params, 0, sizeof(UpdateCompleteIndices_Params));

	uFnUpdateCompleteIndices->iNative = 0;
	uFnUpdateCompleteIndices->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnUpdateCompleteIndices, &UpdateCompleteIndices_Params, nullptr);
	uFnUpdateCompleteIndices->FunctionFlags |= 0x400;
	uFnUpdateCompleteIndices->iNative = 26976;
};

// Function Engine.Console.BuildRuntimeAutoCompleteList
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[17639])
// Parameter Info:
// uint32_t                       bForce                         (CPF_OptionalParm | CPF_Parm)

void UConsole::BuildRuntimeAutoCompleteList(bool bForce)
{
	static UFunction* uFnBuildRuntimeAutoCompleteList = nullptr;

	if (!uFnBuildRuntimeAutoCompleteList)
	{
		uFnBuildRuntimeAutoCompleteList = UFunction::FindFunction("Function Engine.Console.BuildRuntimeAutoCompleteList");
	}

	UConsole_execBuildRuntimeAutoCompleteList_Params BuildRuntimeAutoCompleteList_Params;
	memset(&BuildRuntimeAutoCompleteList_Params, 0, sizeof(BuildRuntimeAutoCompleteList_Params));
	BuildRuntimeAutoCompleteList_Params.bForce = bForce;

	uFnBuildRuntimeAutoCompleteList->iNative = 0;
	uFnBuildRuntimeAutoCompleteList->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnBuildRuntimeAutoCompleteList, &BuildRuntimeAutoCompleteList_Params, nullptr);
	uFnBuildRuntimeAutoCompleteList->FunctionFlags |= 0x400;
	uFnBuildRuntimeAutoCompleteList->iNative = 17639;
};

// Function Engine.Console.AppendInputText
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  Text                           (CPF_Parm | CPF_NeedCtorLink)

void UConsole::AppendInputText(const class FString& Text)
{
	static UFunction* uFnAppendInputText = nullptr;

	if (!uFnAppendInputText)
	{
		uFnAppendInputText = UFunction::FindFunction("Function Engine.Console.AppendInputText");
	}

	UConsole_execAppendInputText_Params AppendInputText_Params;
	memset(&AppendInputText_Params, 0, sizeof(AppendInputText_Params));
	memcpy_s(&AppendInputText_Params.Text, sizeof(AppendInputText_Params.Text), &Text, sizeof(Text));

	this->ProcessEvent(uFnAppendInputText, &AppendInputText_Params, nullptr);
};

// Function Engine.Console.ProcessControlKey
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    Key                            (CPF_Parm)
// EInputEvent                    Event                          (CPF_Parm)

bool UConsole::ProcessControlKey(const class FName& Key, EInputEvent Event)
{
	static UFunction* uFnProcessControlKey = nullptr;

	if (!uFnProcessControlKey)
	{
		uFnProcessControlKey = UFunction::FindFunction("Function Engine.Console.ProcessControlKey");
	}

	UConsole_execProcessControlKey_Params ProcessControlKey_Params;
	memset(&ProcessControlKey_Params, 0, sizeof(ProcessControlKey_Params));
	memcpy_s(&ProcessControlKey_Params.Key, sizeof(ProcessControlKey_Params.Key), &Key, sizeof(Key));
	memcpy_s(&ProcessControlKey_Params.Event, sizeof(ProcessControlKey_Params.Event), &Event, sizeof(Event));

	this->ProcessEvent(uFnProcessControlKey, &ProcessControlKey_Params, nullptr);

	return ProcessControlKey_Params.ReturnValue;
};

// Function Engine.Console.FlushPlayerInput
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UConsole::FlushPlayerInput()
{
	static UFunction* uFnFlushPlayerInput = nullptr;

	if (!uFnFlushPlayerInput)
	{
		uFnFlushPlayerInput = UFunction::FindFunction("Function Engine.Console.FlushPlayerInput");
	}

	UConsole_execFlushPlayerInput_Params FlushPlayerInput_Params;
	memset(&FlushPlayerInput_Params, 0, sizeof(FlushPlayerInput_Params));

	this->ProcessEvent(uFnFlushPlayerInput, &FlushPlayerInput_Params, nullptr);
};

// Function Engine.Console.InputChar
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        ControllerId                   (CPF_Parm)
// class FString                  Unicode                        (CPF_Parm | CPF_NeedCtorLink)

bool UConsole::InputChar(int32_t ControllerId, const class FString& Unicode)
{
	static UFunction* uFnInputChar = nullptr;

	if (!uFnInputChar)
	{
		uFnInputChar = UFunction::FindFunction("Function Engine.Console.InputChar");
	}

	UConsole_execInputChar_Params InputChar_Params;
	memset(&InputChar_Params, 0, sizeof(InputChar_Params));
	memcpy_s(&InputChar_Params.ControllerId, sizeof(InputChar_Params.ControllerId), &ControllerId, sizeof(ControllerId));
	memcpy_s(&InputChar_Params.Unicode, sizeof(InputChar_Params.Unicode), &Unicode, sizeof(Unicode));

	this->ProcessEvent(uFnInputChar, &InputChar_Params, nullptr);

	return InputChar_Params.ReturnValue;
};

// Function Engine.Console.InputKey
// [0x00024002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        ControllerId                   (CPF_Parm)
// class FName                    Key                            (CPF_Parm)
// EInputEvent                    Event                          (CPF_Parm)
// float                          AmountDepressed                (CPF_OptionalParm | CPF_Parm)
// uint32_t                       bGamepad                       (CPF_OptionalParm | CPF_Parm)

bool UConsole::InputKey(int32_t ControllerId, const class FName& Key, EInputEvent Event, float AmountDepressed, bool bGamepad)
{
	static UFunction* uFnInputKey = nullptr;

	if (!uFnInputKey)
	{
		uFnInputKey = UFunction::FindFunction("Function Engine.Console.InputKey");
	}

	UConsole_execInputKey_Params InputKey_Params;
	memset(&InputKey_Params, 0, sizeof(InputKey_Params));
	memcpy_s(&InputKey_Params.ControllerId, sizeof(InputKey_Params.ControllerId), &ControllerId, sizeof(ControllerId));
	memcpy_s(&InputKey_Params.Key, sizeof(InputKey_Params.Key), &Key, sizeof(Key));
	memcpy_s(&InputKey_Params.Event, sizeof(InputKey_Params.Event), &Event, sizeof(Event));
	memcpy_s(&InputKey_Params.AmountDepressed, sizeof(InputKey_Params.AmountDepressed), &AmountDepressed, sizeof(AmountDepressed));
	InputKey_Params.bGamepad = bGamepad;

	this->ProcessEvent(uFnInputKey, &InputKey_Params, nullptr);

	return InputKey_Params.ReturnValue;
};

// Function Engine.Console.PostRender_Console
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UCanvas*                 Canvas                         (CPF_Parm)

void UConsole::PostRender_Console(class UCanvas* Canvas)
{
	static UFunction* uFnPostRender_Console = nullptr;

	if (!uFnPostRender_Console)
	{
		uFnPostRender_Console = UFunction::FindFunction("Function Engine.Console.PostRender_Console");
	}

	UConsole_execPostRender_Console_Params PostRender_Console_Params;
	memset(&PostRender_Console_Params, 0, sizeof(PostRender_Console_Params));
	PostRender_Console_Params.Canvas = Canvas;

	this->ProcessEvent(uFnPostRender_Console, &PostRender_Console_Params, nullptr);
};

// Function Engine.Console.StartTyping
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  Text                           (CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink)

void UConsole::StartTyping(const class FString& Text)
{
	static UFunction* uFnStartTyping = nullptr;

	if (!uFnStartTyping)
	{
		uFnStartTyping = UFunction::FindFunction("Function Engine.Console.StartTyping");
	}

	UConsole_execStartTyping_Params StartTyping_Params;
	memset(&StartTyping_Params, 0, sizeof(StartTyping_Params));
	memcpy_s(&StartTyping_Params.Text, sizeof(StartTyping_Params.Text), &Text, sizeof(Text));

	this->ProcessEvent(uFnStartTyping, &StartTyping_Params, nullptr);
};

// Function Engine.Console.OutputText
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  Text                           (CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink)

void UConsole::eventOutputText(const class FString& Text)
{
	static UFunction* uFnOutputText = nullptr;

	if (!uFnOutputText)
	{
		uFnOutputText = UFunction::FindFunction("Function Engine.Console.OutputText");
	}

	UConsole_eventOutputText_Params OutputText_Params;
	memset(&OutputText_Params, 0, sizeof(OutputText_Params));
	memcpy_s(&OutputText_Params.Text, sizeof(OutputText_Params.Text), &Text, sizeof(Text));

	this->ProcessEvent(uFnOutputText, &OutputText_Params, nullptr);
};

// Function Engine.Console.OutputTextLine
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  Text                           (CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink)

void UConsole::OutputTextLine(const class FString& Text)
{
	static UFunction* uFnOutputTextLine = nullptr;

	if (!uFnOutputTextLine)
	{
		uFnOutputTextLine = UFunction::FindFunction("Function Engine.Console.OutputTextLine");
	}

	UConsole_execOutputTextLine_Params OutputTextLine_Params;
	memset(&OutputTextLine_Params, 0, sizeof(OutputTextLine_Params));
	memcpy_s(&OutputTextLine_Params.Text, sizeof(OutputTextLine_Params.Text), &Text, sizeof(Text));

	this->ProcessEvent(uFnOutputTextLine, &OutputTextLine_Params, nullptr);
};

// Function Engine.Console.ClearOutput
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UConsole::eventClearOutput()
{
	static UFunction* uFnClearOutput = nullptr;

	if (!uFnClearOutput)
	{
		uFnClearOutput = UFunction::FindFunction("Function Engine.Console.ClearOutput");
	}

	UConsole_eventClearOutput_Params ClearOutput_Params;
	memset(&ClearOutput_Params, 0, sizeof(ClearOutput_Params));

	this->ProcessEvent(uFnClearOutput, &ClearOutput_Params, nullptr);
};

// Function Engine.Console.ConsoleCommand
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  Command                        (CPF_Parm | CPF_NeedCtorLink)

void UConsole::ConsoleCommand(const class FString& Command)
{
	static UFunction* uFnConsoleCommand = nullptr;

	if (!uFnConsoleCommand)
	{
		uFnConsoleCommand = UFunction::FindFunction("Function Engine.Console.ConsoleCommand");
	}

	UConsole_execConsoleCommand_Params ConsoleCommand_Params;
	memset(&ConsoleCommand_Params, 0, sizeof(ConsoleCommand_Params));
	memcpy_s(&ConsoleCommand_Params.Command, sizeof(ConsoleCommand_Params.Command), &Command, sizeof(Command));

	this->ProcessEvent(uFnConsoleCommand, &ConsoleCommand_Params, nullptr);
};

// Function Engine.Console.PurgeCommandFromHistory
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  Command                        (CPF_Parm | CPF_NeedCtorLink)

void UConsole::PurgeCommandFromHistory(const class FString& Command)
{
	static UFunction* uFnPurgeCommandFromHistory = nullptr;

	if (!uFnPurgeCommandFromHistory)
	{
		uFnPurgeCommandFromHistory = UFunction::FindFunction("Function Engine.Console.PurgeCommandFromHistory");
	}

	UConsole_execPurgeCommandFromHistory_Params PurgeCommandFromHistory_Params;
	memset(&PurgeCommandFromHistory_Params, 0, sizeof(PurgeCommandFromHistory_Params));
	memcpy_s(&PurgeCommandFromHistory_Params.Command, sizeof(PurgeCommandFromHistory_Params.Command), &Command, sizeof(Command));

	this->ProcessEvent(uFnPurgeCommandFromHistory, &PurgeCommandFromHistory_Params, nullptr);
};

// Function Engine.Console.SetCursorPos
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Position                       (CPF_Parm)

void UConsole::SetCursorPos(int32_t Position)
{
	static UFunction* uFnSetCursorPos = nullptr;

	if (!uFnSetCursorPos)
	{
		uFnSetCursorPos = UFunction::FindFunction("Function Engine.Console.SetCursorPos");
	}

	UConsole_execSetCursorPos_Params SetCursorPos_Params;
	memset(&SetCursorPos_Params, 0, sizeof(SetCursorPos_Params));
	memcpy_s(&SetCursorPos_Params.Position, sizeof(SetCursorPos_Params.Position), &Position, sizeof(Position));

	this->ProcessEvent(uFnSetCursorPos, &SetCursorPos_Params, nullptr);
};

// Function Engine.Console.SetInputText
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  Text                           (CPF_Parm | CPF_NeedCtorLink)

void UConsole::SetInputText(const class FString& Text)
{
	static UFunction* uFnSetInputText = nullptr;

	if (!uFnSetInputText)
	{
		uFnSetInputText = UFunction::FindFunction("Function Engine.Console.SetInputText");
	}

	UConsole_execSetInputText_Params SetInputText_Params;
	memset(&SetInputText_Params, 0, sizeof(SetInputText_Params));
	memcpy_s(&SetInputText_Params.Text, sizeof(SetInputText_Params.Text), &Text, sizeof(Text));

	this->ProcessEvent(uFnSetInputText, &SetInputText_Params, nullptr);
};

// Function Engine.Console.Initialized
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UConsole::Initialized()
{
	static UFunction* uFnInitialized = nullptr;

	if (!uFnInitialized)
	{
		uFnInitialized = UFunction::FindFunction("Function Engine.Console.Initialized");
	}

	UConsole_execInitialized_Params Initialized_Params;
	memset(&Initialized_Params, 0, sizeof(Initialized_Params));

	this->ProcessEvent(uFnInitialized, &Initialized_Params, nullptr);
};

// Function Engine.Input.SetBind
// [0x00C20202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_HasOutParms | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// class FString                  Command                        (CPF_Parm | CPF_NeedCtorLink)
// class FName                    BindName                       (CPF_Const | CPF_Parm | CPF_OutParm)

void UInput::SetBind(const class FString& Command, class FName& BindName)
{
	static UFunction* uFnSetBind = nullptr;

	if (!uFnSetBind)
	{
		uFnSetBind = UFunction::FindFunction("Function Engine.Input.SetBind");
	}

	UInput_execSetBind_Params SetBind_Params;
	memset(&SetBind_Params, 0, sizeof(SetBind_Params));
	memcpy_s(&SetBind_Params.Command, sizeof(SetBind_Params.Command), &Command, sizeof(Command));
	memcpy_s(&SetBind_Params.BindName, sizeof(SetBind_Params.BindName), &BindName, sizeof(BindName));

	this->ProcessEvent(uFnSetBind, &SetBind_Params, nullptr);

	memcpy_s(&BindName, sizeof(BindName), &SetBind_Params.BindName, sizeof(SetBind_Params.BindName));
};

// Function Engine.Input.GetBind
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20508])
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)
// class FName                    Key                            (CPF_Const | CPF_Parm | CPF_OutParm)

class FString UInput::GetBind(class FName& Key)
{
	static UFunction* uFnGetBind = nullptr;

	if (!uFnGetBind)
	{
		uFnGetBind = UFunction::FindFunction("Function Engine.Input.GetBind");
	}

	UInput_execGetBind_Params GetBind_Params;
	memset(&GetBind_Params, 0, sizeof(GetBind_Params));
	memcpy_s(&GetBind_Params.Key, sizeof(GetBind_Params.Key), &Key, sizeof(Key));

	uFnGetBind->iNative = 0;
	uFnGetBind->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetBind, &GetBind_Params, nullptr);
	uFnGetBind->FunctionFlags |= 0x400;
	uFnGetBind->iNative = 20508;

	memcpy_s(&Key, sizeof(Key), &GetBind_Params.Key, sizeof(GetBind_Params.Key));

	return GetBind_Params.ReturnValue;
};

// Function Engine.Input.ResetInput
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25152])
// Parameter Info:

void UInput::ResetInput()
{
	static UFunction* uFnResetInput = nullptr;

	if (!uFnResetInput)
	{
		uFnResetInput = UFunction::FindFunction("Function Engine.Input.ResetInput");
	}

	UInput_execResetInput_Params ResetInput_Params;
	memset(&ResetInput_Params, 0, sizeof(ResetInput_Params));

	uFnResetInput->iNative = 0;
	uFnResetInput->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnResetInput, &ResetInput_Params, nullptr);
	uFnResetInput->FunctionFlags |= 0x400;
	uFnResetInput->iNative = 25152;
};

// Function Engine.PlayerInput.PreClientTravel
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  PendingURL                     (CPF_Parm | CPF_NeedCtorLink)
// ETravelType                    TravelType                     (CPF_Parm)
// uint32_t                       bIsSeamlessTravel              (CPF_Parm)

void UPlayerInput::PreClientTravel(const class FString& PendingURL, ETravelType TravelType, bool bIsSeamlessTravel)
{
	static UFunction* uFnPreClientTravel = nullptr;

	if (!uFnPreClientTravel)
	{
		uFnPreClientTravel = UFunction::FindFunction("Function Engine.PlayerInput.PreClientTravel");
	}

	UPlayerInput_execPreClientTravel_Params PreClientTravel_Params;
	memset(&PreClientTravel_Params, 0, sizeof(PreClientTravel_Params));
	memcpy_s(&PreClientTravel_Params.PendingURL, sizeof(PreClientTravel_Params.PendingURL), &PendingURL, sizeof(PendingURL));
	memcpy_s(&PreClientTravel_Params.TravelType, sizeof(PreClientTravel_Params.TravelType), &TravelType, sizeof(TravelType));
	PreClientTravel_Params.bIsSeamlessTravel = bIsSeamlessTravel;

	this->ProcessEvent(uFnPreClientTravel, &PreClientTravel_Params, nullptr);
};

// Function Engine.PlayerInput.ClientInitInputSystem
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UPlayerInput::ClientInitInputSystem()
{
	static UFunction* uFnClientInitInputSystem = nullptr;

	if (!uFnClientInitInputSystem)
	{
		uFnClientInitInputSystem = UFunction::FindFunction("Function Engine.PlayerInput.ClientInitInputSystem");
	}

	UPlayerInput_execClientInitInputSystem_Params ClientInitInputSystem_Params;
	memset(&ClientInitInputSystem_Params, 0, sizeof(ClientInitInputSystem_Params));

	this->ProcessEvent(uFnClientInitInputSystem, &ClientInitInputSystem_Params, nullptr);
};

// Function Engine.PlayerInput.InitInputSystem
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UPlayerInput::InitInputSystem()
{
	static UFunction* uFnInitInputSystem = nullptr;

	if (!uFnInitInputSystem)
	{
		uFnInitInputSystem = UFunction::FindFunction("Function Engine.PlayerInput.InitInputSystem");
	}

	UPlayerInput_execInitInputSystem_Params InitInputSystem_Params;
	memset(&InitInputSystem_Params, 0, sizeof(InitInputSystem_Params));

	this->ProcessEvent(uFnInitInputSystem, &InitInputSystem_Params, nullptr);
};

// Function Engine.PlayerInput.SmartJump
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UPlayerInput::SmartJump()
{
	static UFunction* uFnSmartJump = nullptr;

	if (!uFnSmartJump)
	{
		uFnSmartJump = UFunction::FindFunction("Function Engine.PlayerInput.SmartJump");
	}

	UPlayerInput_execSmartJump_Params SmartJump_Params;
	memset(&SmartJump_Params, 0, sizeof(SmartJump_Params));

	this->ProcessEvent(uFnSmartJump, &SmartJump_Params, nullptr);
};

// Function Engine.PlayerInput.Jump
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UPlayerInput::Jump()
{
	static UFunction* uFnJump = nullptr;

	if (!uFnJump)
	{
		uFnJump = UFunction::FindFunction("Function Engine.PlayerInput.Jump");
	}

	UPlayerInput_execJump_Params Jump_Params;
	memset(&Jump_Params, 0, sizeof(Jump_Params));

	this->ProcessEvent(uFnJump, &Jump_Params, nullptr);
};

// Function Engine.PlayerInput.CheckForDoubleClickMove
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EDoubleClickDir                ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// float                          DeltaTime                      (CPF_Parm)

EDoubleClickDir UPlayerInput::CheckForDoubleClickMove(float DeltaTime)
{
	static UFunction* uFnCheckForDoubleClickMove = nullptr;

	if (!uFnCheckForDoubleClickMove)
	{
		uFnCheckForDoubleClickMove = UFunction::FindFunction("Function Engine.PlayerInput.CheckForDoubleClickMove");
	}

	UPlayerInput_execCheckForDoubleClickMove_Params CheckForDoubleClickMove_Params;
	memset(&CheckForDoubleClickMove_Params, 0, sizeof(CheckForDoubleClickMove_Params));
	memcpy_s(&CheckForDoubleClickMove_Params.DeltaTime, sizeof(CheckForDoubleClickMove_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));

	this->ProcessEvent(uFnCheckForDoubleClickMove, &CheckForDoubleClickMove_Params, nullptr);

	return static_cast<EDoubleClickDir>(CheckForDoubleClickMove_Params.ReturnValue);
};

// Function Engine.PlayerInput.DrawHUD
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AHUD*                    H                              (CPF_Parm)

void UPlayerInput::DrawHUD(class AHUD* H)
{
	static UFunction* uFnDrawHUD = nullptr;

	if (!uFnDrawHUD)
	{
		uFnDrawHUD = UFunction::FindFunction("Function Engine.PlayerInput.DrawHUD");
	}

	UPlayerInput_execDrawHUD_Params DrawHUD_Params;
	memset(&DrawHUD_Params, 0, sizeof(DrawHUD_Params));
	DrawHUD_Params.H = H;

	this->ProcessEvent(uFnDrawHUD, &DrawHUD_Params, nullptr);
};

// Function Engine.PlayerInput.SetSensitivity
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          F                              (CPF_Parm)

void UPlayerInput::SetSensitivity(float F)
{
	static UFunction* uFnSetSensitivity = nullptr;

	if (!uFnSetSensitivity)
	{
		uFnSetSensitivity = UFunction::FindFunction("Function Engine.PlayerInput.SetSensitivity");
	}

	UPlayerInput_execSetSensitivity_Params SetSensitivity_Params;
	memset(&SetSensitivity_Params, 0, sizeof(SetSensitivity_Params));
	memcpy_s(&SetSensitivity_Params.F, sizeof(SetSensitivity_Params.F), &F, sizeof(F));

	this->ProcessEvent(uFnSetSensitivity, &SetSensitivity_Params, nullptr);
};

// Function Engine.PlayerInput.InvertTurn
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UPlayerInput::InvertTurn()
{
	static UFunction* uFnInvertTurn = nullptr;

	if (!uFnInvertTurn)
	{
		uFnInvertTurn = UFunction::FindFunction("Function Engine.PlayerInput.InvertTurn");
	}

	UPlayerInput_execInvertTurn_Params InvertTurn_Params;
	memset(&InvertTurn_Params, 0, sizeof(InvertTurn_Params));

	this->ProcessEvent(uFnInvertTurn, &InvertTurn_Params, nullptr);

	return InvertTurn_Params.ReturnValue;
};

// Function Engine.PlayerInput.InvertMouse
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UPlayerInput::InvertMouse()
{
	static UFunction* uFnInvertMouse = nullptr;

	if (!uFnInvertMouse)
	{
		uFnInvertMouse = UFunction::FindFunction("Function Engine.PlayerInput.InvertMouse");
	}

	UPlayerInput_execInvertMouse_Params InvertMouse_Params;
	memset(&InvertMouse_Params, 0, sizeof(InvertMouse_Params));

	this->ProcessEvent(uFnInvertMouse, &InvertMouse_Params, nullptr);

	return InvertMouse_Params.ReturnValue;
};

// Function Engine.UISceneClient.InitializeSceneClient
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UUISceneClient::eventInitializeSceneClient()
{
	static UFunction* uFnInitializeSceneClient = nullptr;

	if (!uFnInitializeSceneClient)
	{
		uFnInitializeSceneClient = UFunction::FindFunction("Function Engine.UISceneClient.InitializeSceneClient");
	}

	UUISceneClient_eventInitializeSceneClient_Params InitializeSceneClient_Params;
	memset(&InitializeSceneClient_Params, 0, sizeof(InitializeSceneClient_Params));

	this->ProcessEvent(uFnInitializeSceneClient, &InitializeSceneClient_Params, nullptr);
};

// Function Engine.UISceneClient.GetInverseCanvasToScreen
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20612])
// Parameter Info:
// struct FMatrix                 ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

struct FMatrix UUISceneClient::GetInverseCanvasToScreen()
{
	static UFunction* uFnGetInverseCanvasToScreen = nullptr;

	if (!uFnGetInverseCanvasToScreen)
	{
		uFnGetInverseCanvasToScreen = UFunction::FindFunction("Function Engine.UISceneClient.GetInverseCanvasToScreen");
	}

	UUISceneClient_execGetInverseCanvasToScreen_Params GetInverseCanvasToScreen_Params;
	memset(&GetInverseCanvasToScreen_Params, 0, sizeof(GetInverseCanvasToScreen_Params));

	uFnGetInverseCanvasToScreen->iNative = 0;
	uFnGetInverseCanvasToScreen->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetInverseCanvasToScreen, &GetInverseCanvasToScreen_Params, nullptr);
	uFnGetInverseCanvasToScreen->FunctionFlags |= 0x400;
	uFnGetInverseCanvasToScreen->iNative = 20612;

	return GetInverseCanvasToScreen_Params.ReturnValue;
};

// Function Engine.UISceneClient.GetCanvasToScreen
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20525])
// Parameter Info:
// struct FMatrix                 ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

struct FMatrix UUISceneClient::GetCanvasToScreen()
{
	static UFunction* uFnGetCanvasToScreen = nullptr;

	if (!uFnGetCanvasToScreen)
	{
		uFnGetCanvasToScreen = UFunction::FindFunction("Function Engine.UISceneClient.GetCanvasToScreen");
	}

	UUISceneClient_execGetCanvasToScreen_Params GetCanvasToScreen_Params;
	memset(&GetCanvasToScreen_Params, 0, sizeof(GetCanvasToScreen_Params));

	uFnGetCanvasToScreen->iNative = 0;
	uFnGetCanvasToScreen->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetCanvasToScreen, &GetCanvasToScreen_Params, nullptr);
	uFnGetCanvasToScreen->FunctionFlags |= 0x400;
	uFnGetCanvasToScreen->iNative = 20525;

	return GetCanvasToScreen_Params.ReturnValue;
};

// Function Engine.UISceneClient.IsUIActive
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[21428])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        Flags                          (CPF_OptionalParm | CPF_Parm)

bool UUISceneClient::IsUIActive(int32_t Flags)
{
	static UFunction* uFnIsUIActive = nullptr;

	if (!uFnIsUIActive)
	{
		uFnIsUIActive = UFunction::FindFunction("Function Engine.UISceneClient.IsUIActive");
	}

	UUISceneClient_execIsUIActive_Params IsUIActive_Params;
	memset(&IsUIActive_Params, 0, sizeof(IsUIActive_Params));
	memcpy_s(&IsUIActive_Params.Flags, sizeof(IsUIActive_Params.Flags), &Flags, sizeof(Flags));

	uFnIsUIActive->iNative = 0;
	uFnIsUIActive->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnIsUIActive, &IsUIActive_Params, nullptr);
	uFnIsUIActive->FunctionFlags |= 0x400;
	uFnIsUIActive->iNative = 21428;

	return IsUIActive_Params.ReturnValue;
};

// Function Engine.UIState.RemoveSequenceObjects
// [0x00420401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[25082])
// Parameter Info:
// class TArray<class USequenceObject*> ObjectsToRemove                (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void UUIState::RemoveSequenceObjects(class TArray<class USequenceObject*>& ObjectsToRemove)
{
	static UFunction* uFnRemoveSequenceObjects = nullptr;

	if (!uFnRemoveSequenceObjects)
	{
		uFnRemoveSequenceObjects = UFunction::FindFunction("Function Engine.UIState.RemoveSequenceObjects");
	}

	UUIState_execRemoveSequenceObjects_Params RemoveSequenceObjects_Params;
	memset(&RemoveSequenceObjects_Params, 0, sizeof(RemoveSequenceObjects_Params));
	memcpy_s(&RemoveSequenceObjects_Params.ObjectsToRemove, sizeof(RemoveSequenceObjects_Params.ObjectsToRemove), &ObjectsToRemove, sizeof(ObjectsToRemove));

	uFnRemoveSequenceObjects->iNative = 0;
	uFnRemoveSequenceObjects->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnRemoveSequenceObjects, &RemoveSequenceObjects_Params, nullptr);
	uFnRemoveSequenceObjects->FunctionFlags |= 0x400;
	uFnRemoveSequenceObjects->iNative = 25082;

	memcpy_s(&ObjectsToRemove, sizeof(ObjectsToRemove), &RemoveSequenceObjects_Params.ObjectsToRemove, sizeof(RemoveSequenceObjects_Params.ObjectsToRemove));
};

// Function Engine.UIState.RemoveSequenceObject
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25081])
// Parameter Info:
// class USequenceObject*         ObjectToRemove                 (CPF_Parm)

void UUIState::RemoveSequenceObject(class USequenceObject* ObjectToRemove)
{
	static UFunction* uFnRemoveSequenceObject = nullptr;

	if (!uFnRemoveSequenceObject)
	{
		uFnRemoveSequenceObject = UFunction::FindFunction("Function Engine.UIState.RemoveSequenceObject");
	}

	UUIState_execRemoveSequenceObject_Params RemoveSequenceObject_Params;
	memset(&RemoveSequenceObject_Params, 0, sizeof(RemoveSequenceObject_Params));
	RemoveSequenceObject_Params.ObjectToRemove = ObjectToRemove;

	uFnRemoveSequenceObject->iNative = 0;
	uFnRemoveSequenceObject->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnRemoveSequenceObject, &RemoveSequenceObject_Params, nullptr);
	uFnRemoveSequenceObject->FunctionFlags |= 0x400;
	uFnRemoveSequenceObject->iNative = 25081;
};

// Function Engine.UIState.AddSequenceObject
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[15368])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class USequenceObject*         NewObj                         (CPF_Parm)
// uint32_t                       bRecurse                       (CPF_OptionalParm | CPF_Parm)

bool UUIState::AddSequenceObject(class USequenceObject* NewObj, bool bRecurse)
{
	static UFunction* uFnAddSequenceObject = nullptr;

	if (!uFnAddSequenceObject)
	{
		uFnAddSequenceObject = UFunction::FindFunction("Function Engine.UIState.AddSequenceObject");
	}

	UUIState_execAddSequenceObject_Params AddSequenceObject_Params;
	memset(&AddSequenceObject_Params, 0, sizeof(AddSequenceObject_Params));
	AddSequenceObject_Params.NewObj = NewObj;
	AddSequenceObject_Params.bRecurse = bRecurse;

	uFnAddSequenceObject->iNative = 0;
	uFnAddSequenceObject->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnAddSequenceObject, &AddSequenceObject_Params, nullptr);
	uFnAddSequenceObject->FunctionFlags |= 0x400;
	uFnAddSequenceObject->iNative = 15368;

	return AddSequenceObject_Params.ReturnValue;
};

// Function Engine.UIState.IsStateAllowed
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UUIScreenObject*         Target                         (CPF_Parm)
// class UUIState*                NewState                       (CPF_Parm)
// int32_t                        PlayerIndex                    (CPF_Parm)

bool UUIState::eventIsStateAllowed(class UUIScreenObject* Target, class UUIState* NewState, int32_t PlayerIndex)
{
	static UFunction* uFnIsStateAllowed = nullptr;

	if (!uFnIsStateAllowed)
	{
		uFnIsStateAllowed = UFunction::FindFunction("Function Engine.UIState.IsStateAllowed");
	}

	UUIState_eventIsStateAllowed_Params IsStateAllowed_Params;
	memset(&IsStateAllowed_Params, 0, sizeof(IsStateAllowed_Params));
	IsStateAllowed_Params.Target = Target;
	IsStateAllowed_Params.NewState = NewState;
	memcpy_s(&IsStateAllowed_Params.PlayerIndex, sizeof(IsStateAllowed_Params.PlayerIndex), &PlayerIndex, sizeof(PlayerIndex));

	this->ProcessEvent(uFnIsStateAllowed, &IsStateAllowed_Params, nullptr);

	return IsStateAllowed_Params.ReturnValue;
};

// Function Engine.UIState.OnDeactivate
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UUIScreenObject*         Target                         (CPF_Parm)
// int32_t                        PlayerIndex                    (CPF_Parm)
// uint32_t                       bPoppedState                   (CPF_Parm)

void UUIState::eventOnDeactivate(class UUIScreenObject* Target, int32_t PlayerIndex, bool bPoppedState)
{
	static UFunction* uFnOnDeactivate = nullptr;

	if (!uFnOnDeactivate)
	{
		uFnOnDeactivate = UFunction::FindFunction("Function Engine.UIState.OnDeactivate");
	}

	UUIState_eventOnDeactivate_Params OnDeactivate_Params;
	memset(&OnDeactivate_Params, 0, sizeof(OnDeactivate_Params));
	OnDeactivate_Params.Target = Target;
	memcpy_s(&OnDeactivate_Params.PlayerIndex, sizeof(OnDeactivate_Params.PlayerIndex), &PlayerIndex, sizeof(PlayerIndex));
	OnDeactivate_Params.bPoppedState = bPoppedState;

	this->ProcessEvent(uFnOnDeactivate, &OnDeactivate_Params, nullptr);
};

// Function Engine.UIState.OnActivate
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UUIScreenObject*         Target                         (CPF_Parm)
// int32_t                        PlayerIndex                    (CPF_Parm)
// uint32_t                       bPushedState                   (CPF_Parm)

void UUIState::eventOnActivate(class UUIScreenObject* Target, int32_t PlayerIndex, bool bPushedState)
{
	static UFunction* uFnOnActivate = nullptr;

	if (!uFnOnActivate)
	{
		uFnOnActivate = UFunction::FindFunction("Function Engine.UIState.OnActivate");
	}

	UUIState_eventOnActivate_Params OnActivate_Params;
	memset(&OnActivate_Params, 0, sizeof(OnActivate_Params));
	OnActivate_Params.Target = Target;
	memcpy_s(&OnActivate_Params.PlayerIndex, sizeof(OnActivate_Params.PlayerIndex), &PlayerIndex, sizeof(PlayerIndex));
	OnActivate_Params.bPushedState = bPushedState;

	this->ProcessEvent(uFnOnActivate, &OnActivate_Params, nullptr);
};

// Function Engine.UIState.DeactivateState
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UUIScreenObject*         Target                         (CPF_Parm)
// int32_t                        PlayerIndex                    (CPF_Parm)

bool UUIState::eventDeactivateState(class UUIScreenObject* Target, int32_t PlayerIndex)
{
	static UFunction* uFnDeactivateState = nullptr;

	if (!uFnDeactivateState)
	{
		uFnDeactivateState = UFunction::FindFunction("Function Engine.UIState.DeactivateState");
	}

	UUIState_eventDeactivateState_Params DeactivateState_Params;
	memset(&DeactivateState_Params, 0, sizeof(DeactivateState_Params));
	DeactivateState_Params.Target = Target;
	memcpy_s(&DeactivateState_Params.PlayerIndex, sizeof(DeactivateState_Params.PlayerIndex), &PlayerIndex, sizeof(PlayerIndex));

	this->ProcessEvent(uFnDeactivateState, &DeactivateState_Params, nullptr);

	return DeactivateState_Params.ReturnValue;
};

// Function Engine.UIState.ActivateState
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UUIScreenObject*         Target                         (CPF_Parm)
// int32_t                        PlayerIndex                    (CPF_Parm)

bool UUIState::eventActivateState(class UUIScreenObject* Target, int32_t PlayerIndex)
{
	static UFunction* uFnActivateState = nullptr;

	if (!uFnActivateState)
	{
		uFnActivateState = UFunction::FindFunction("Function Engine.UIState.ActivateState");
	}

	UUIState_eventActivateState_Params ActivateState_Params;
	memset(&ActivateState_Params, 0, sizeof(ActivateState_Params));
	ActivateState_Params.Target = Target;
	memcpy_s(&ActivateState_Params.PlayerIndex, sizeof(ActivateState_Params.PlayerIndex), &PlayerIndex, sizeof(PlayerIndex));

	this->ProcessEvent(uFnActivateState, &ActivateState_Params, nullptr);

	return ActivateState_Params.ReturnValue;
};

// Function Engine.UIState.IsActiveForPlayer
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[21355])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        PlayerIndex                    (CPF_Parm)

bool UUIState::IsActiveForPlayer(int32_t PlayerIndex)
{
	static UFunction* uFnIsActiveForPlayer = nullptr;

	if (!uFnIsActiveForPlayer)
	{
		uFnIsActiveForPlayer = UFunction::FindFunction("Function Engine.UIState.IsActiveForPlayer");
	}

	UUIState_execIsActiveForPlayer_Params IsActiveForPlayer_Params;
	memset(&IsActiveForPlayer_Params, 0, sizeof(IsActiveForPlayer_Params));
	memcpy_s(&IsActiveForPlayer_Params.PlayerIndex, sizeof(IsActiveForPlayer_Params.PlayerIndex), &PlayerIndex, sizeof(PlayerIndex));

	uFnIsActiveForPlayer->iNative = 0;
	uFnIsActiveForPlayer->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnIsActiveForPlayer, &IsActiveForPlayer_Params, nullptr);
	uFnIsActiveForPlayer->FunctionFlags |= 0x400;
	uFnIsActiveForPlayer->iNative = 21355;

	return IsActiveForPlayer_Params.ReturnValue;
};

// Function Engine.UIState.IsWidgetClassSupported
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UUIScreenObject*         WidgetClass                    (CPF_Parm)

bool UUIState::eventIsWidgetClassSupported(class UUIScreenObject* WidgetClass)
{
	static UFunction* uFnIsWidgetClassSupported = nullptr;

	if (!uFnIsWidgetClassSupported)
	{
		uFnIsWidgetClassSupported = UFunction::FindFunction("Function Engine.UIState.IsWidgetClassSupported");
	}

	UUIState_eventIsWidgetClassSupported_Params IsWidgetClassSupported_Params;
	memset(&IsWidgetClassSupported_Params, 0, sizeof(IsWidgetClassSupported_Params));
	IsWidgetClassSupported_Params.WidgetClass = WidgetClass;

	this->ProcessEvent(uFnIsWidgetClassSupported, &IsWidgetClassSupported_Params, nullptr);

	return IsWidgetClassSupported_Params.ReturnValue;
};

// Function Engine.UIState_Disabled.IsStateAllowed
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UUIScreenObject*         Target                         (CPF_Parm)
// class UUIState*                NewState                       (CPF_Parm)
// int32_t                        PlayerIndex                    (CPF_Parm)

bool UUIState_Disabled::eventIsStateAllowed(class UUIScreenObject* Target, class UUIState* NewState, int32_t PlayerIndex)
{
	static UFunction* uFnIsStateAllowed = nullptr;

	if (!uFnIsStateAllowed)
	{
		uFnIsStateAllowed = UFunction::FindFunction("Function Engine.UIState_Disabled.IsStateAllowed");
	}

	UUIState_Disabled_eventIsStateAllowed_Params IsStateAllowed_Params;
	memset(&IsStateAllowed_Params, 0, sizeof(IsStateAllowed_Params));
	IsStateAllowed_Params.Target = Target;
	IsStateAllowed_Params.NewState = NewState;
	memcpy_s(&IsStateAllowed_Params.PlayerIndex, sizeof(IsStateAllowed_Params.PlayerIndex), &PlayerIndex, sizeof(PlayerIndex));

	this->ProcessEvent(uFnIsStateAllowed, &IsStateAllowed_Params, nullptr);

	return IsStateAllowed_Params.ReturnValue;
};

// Function Engine.UIState_Disabled.ActivateState
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UUIScreenObject*         Target                         (CPF_Parm)
// int32_t                        PlayerIndex                    (CPF_Parm)

bool UUIState_Disabled::eventActivateState(class UUIScreenObject* Target, int32_t PlayerIndex)
{
	static UFunction* uFnActivateState = nullptr;

	if (!uFnActivateState)
	{
		uFnActivateState = UFunction::FindFunction("Function Engine.UIState_Disabled.ActivateState");
	}

	UUIState_Disabled_eventActivateState_Params ActivateState_Params;
	memset(&ActivateState_Params, 0, sizeof(ActivateState_Params));
	ActivateState_Params.Target = Target;
	memcpy_s(&ActivateState_Params.PlayerIndex, sizeof(ActivateState_Params.PlayerIndex), &PlayerIndex, sizeof(PlayerIndex));

	this->ProcessEvent(uFnActivateState, &ActivateState_Params, nullptr);

	return ActivateState_Params.ReturnValue;
};

// Function Engine.UISoundTheme.ProcessSoundEvent
// [0x00024802] (FUNC_Defined | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FName                    SoundEventName                 (CPF_Parm)
// class APlayerController*       SoundOwner                     (CPF_OptionalParm | CPF_Parm)

void UUISoundTheme::eventProcessSoundEvent(const class FName& SoundEventName, class APlayerController* SoundOwner)
{
	static UFunction* uFnProcessSoundEvent = nullptr;

	if (!uFnProcessSoundEvent)
	{
		uFnProcessSoundEvent = UFunction::FindFunction("Function Engine.UISoundTheme.ProcessSoundEvent");
	}

	UUISoundTheme_eventProcessSoundEvent_Params ProcessSoundEvent_Params;
	memset(&ProcessSoundEvent_Params, 0, sizeof(ProcessSoundEvent_Params));
	memcpy_s(&ProcessSoundEvent_Params.SoundEventName, sizeof(ProcessSoundEvent_Params.SoundEventName), &SoundEventName, sizeof(SoundEventName));
	ProcessSoundEvent_Params.SoundOwner = SoundOwner;

	this->ProcessEvent(uFnProcessSoundEvent, &ProcessSoundEvent_Params, nullptr);
};

// Function Engine.UIDataStoreSubscriber.ClearBoundDataStores
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[18109])
// Parameter Info:

void UUIDataStoreSubscriber::ClearBoundDataStores()
{
	static UFunction* uFnClearBoundDataStores = nullptr;

	if (!uFnClearBoundDataStores)
	{
		uFnClearBoundDataStores = UFunction::FindFunction("Function Engine.UIDataStoreSubscriber.ClearBoundDataStores");
	}

	UUIDataStoreSubscriber_execClearBoundDataStores_Params ClearBoundDataStores_Params;
	memset(&ClearBoundDataStores_Params, 0, sizeof(ClearBoundDataStores_Params));

	uFnClearBoundDataStores->iNative = 0;
	uFnClearBoundDataStores->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnClearBoundDataStores, &ClearBoundDataStores_Params, nullptr);
	uFnClearBoundDataStores->FunctionFlags |= 0x400;
	uFnClearBoundDataStores->iNative = 18109;
};

// Function Engine.UIDataStoreSubscriber.GetBoundDataStores
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20519])
// Parameter Info:
// class TArray<class UUIDataStore*> out_BoundDataStores            (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void UUIDataStoreSubscriber::GetBoundDataStores(class TArray<class UUIDataStore*>& out_BoundDataStores)
{
	static UFunction* uFnGetBoundDataStores = nullptr;

	if (!uFnGetBoundDataStores)
	{
		uFnGetBoundDataStores = UFunction::FindFunction("Function Engine.UIDataStoreSubscriber.GetBoundDataStores");
	}

	UUIDataStoreSubscriber_execGetBoundDataStores_Params GetBoundDataStores_Params;
	memset(&GetBoundDataStores_Params, 0, sizeof(GetBoundDataStores_Params));
	memcpy_s(&GetBoundDataStores_Params.out_BoundDataStores, sizeof(GetBoundDataStores_Params.out_BoundDataStores), &out_BoundDataStores, sizeof(out_BoundDataStores));

	uFnGetBoundDataStores->iNative = 0;
	uFnGetBoundDataStores->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetBoundDataStores, &GetBoundDataStores_Params, nullptr);
	uFnGetBoundDataStores->FunctionFlags |= 0x400;
	uFnGetBoundDataStores->iNative = 20519;

	memcpy_s(&out_BoundDataStores, sizeof(out_BoundDataStores), &GetBoundDataStores_Params.out_BoundDataStores, sizeof(GetBoundDataStores_Params.out_BoundDataStores));
};

// Function Engine.UIDataStoreSubscriber.NotifyDataStoreValueUpdated
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[23382])
// Parameter Info:
// class UUIDataStore*            SourceDataStore                (CPF_Parm)
// uint32_t                       bValuesInvalidated             (CPF_Parm)
// class FName                    PropertyTag                    (CPF_Parm)
// class UUIDataProvider*         SourceProvider                 (CPF_Parm)
// int32_t                        ArrayIndex                     (CPF_Parm)

void UUIDataStoreSubscriber::NotifyDataStoreValueUpdated(class UUIDataStore* SourceDataStore, bool bValuesInvalidated, const class FName& PropertyTag, class UUIDataProvider* SourceProvider, int32_t ArrayIndex)
{
	static UFunction* uFnNotifyDataStoreValueUpdated = nullptr;

	if (!uFnNotifyDataStoreValueUpdated)
	{
		uFnNotifyDataStoreValueUpdated = UFunction::FindFunction("Function Engine.UIDataStoreSubscriber.NotifyDataStoreValueUpdated");
	}

	UUIDataStoreSubscriber_execNotifyDataStoreValueUpdated_Params NotifyDataStoreValueUpdated_Params;
	memset(&NotifyDataStoreValueUpdated_Params, 0, sizeof(NotifyDataStoreValueUpdated_Params));
	NotifyDataStoreValueUpdated_Params.SourceDataStore = SourceDataStore;
	NotifyDataStoreValueUpdated_Params.bValuesInvalidated = bValuesInvalidated;
	memcpy_s(&NotifyDataStoreValueUpdated_Params.PropertyTag, sizeof(NotifyDataStoreValueUpdated_Params.PropertyTag), &PropertyTag, sizeof(PropertyTag));
	NotifyDataStoreValueUpdated_Params.SourceProvider = SourceProvider;
	memcpy_s(&NotifyDataStoreValueUpdated_Params.ArrayIndex, sizeof(NotifyDataStoreValueUpdated_Params.ArrayIndex), &ArrayIndex, sizeof(ArrayIndex));

	uFnNotifyDataStoreValueUpdated->iNative = 0;
	uFnNotifyDataStoreValueUpdated->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnNotifyDataStoreValueUpdated, &NotifyDataStoreValueUpdated_Params, nullptr);
	uFnNotifyDataStoreValueUpdated->FunctionFlags |= 0x400;
	uFnNotifyDataStoreValueUpdated->iNative = 23382;
};

// Function Engine.UIDataStoreSubscriber.RefreshSubscriberValue
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[25013])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        BindingIndex                   (CPF_OptionalParm | CPF_Parm)

bool UUIDataStoreSubscriber::RefreshSubscriberValue(int32_t BindingIndex)
{
	static UFunction* uFnRefreshSubscriberValue = nullptr;

	if (!uFnRefreshSubscriberValue)
	{
		uFnRefreshSubscriberValue = UFunction::FindFunction("Function Engine.UIDataStoreSubscriber.RefreshSubscriberValue");
	}

	UUIDataStoreSubscriber_execRefreshSubscriberValue_Params RefreshSubscriberValue_Params;
	memset(&RefreshSubscriberValue_Params, 0, sizeof(RefreshSubscriberValue_Params));
	memcpy_s(&RefreshSubscriberValue_Params.BindingIndex, sizeof(RefreshSubscriberValue_Params.BindingIndex), &BindingIndex, sizeof(BindingIndex));

	uFnRefreshSubscriberValue->iNative = 0;
	uFnRefreshSubscriberValue->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnRefreshSubscriberValue, &RefreshSubscriberValue_Params, nullptr);
	uFnRefreshSubscriberValue->FunctionFlags |= 0x400;
	uFnRefreshSubscriberValue->iNative = 25013;

	return RefreshSubscriberValue_Params.ReturnValue;
};

// Function Engine.UIDataStoreSubscriber.GetDataStoreBinding
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[20555])
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)
// int32_t                        BindingIndex                   (CPF_OptionalParm | CPF_Parm)

class FString UUIDataStoreSubscriber::GetDataStoreBinding(int32_t BindingIndex)
{
	static UFunction* uFnGetDataStoreBinding = nullptr;

	if (!uFnGetDataStoreBinding)
	{
		uFnGetDataStoreBinding = UFunction::FindFunction("Function Engine.UIDataStoreSubscriber.GetDataStoreBinding");
	}

	UUIDataStoreSubscriber_execGetDataStoreBinding_Params GetDataStoreBinding_Params;
	memset(&GetDataStoreBinding_Params, 0, sizeof(GetDataStoreBinding_Params));
	memcpy_s(&GetDataStoreBinding_Params.BindingIndex, sizeof(GetDataStoreBinding_Params.BindingIndex), &BindingIndex, sizeof(BindingIndex));

	uFnGetDataStoreBinding->iNative = 0;
	uFnGetDataStoreBinding->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetDataStoreBinding, &GetDataStoreBinding_Params, nullptr);
	uFnGetDataStoreBinding->FunctionFlags |= 0x400;
	uFnGetDataStoreBinding->iNative = 20555;

	return GetDataStoreBinding_Params.ReturnValue;
};

// Function Engine.UIDataStoreSubscriber.SetDataStoreBinding
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[25631])
// Parameter Info:
// class FString                  MarkupText                     (CPF_Parm | CPF_NeedCtorLink)
// int32_t                        BindingIndex                   (CPF_OptionalParm | CPF_Parm)

void UUIDataStoreSubscriber::SetDataStoreBinding(const class FString& MarkupText, int32_t BindingIndex)
{
	static UFunction* uFnSetDataStoreBinding = nullptr;

	if (!uFnSetDataStoreBinding)
	{
		uFnSetDataStoreBinding = UFunction::FindFunction("Function Engine.UIDataStoreSubscriber.SetDataStoreBinding");
	}

	UUIDataStoreSubscriber_execSetDataStoreBinding_Params SetDataStoreBinding_Params;
	memset(&SetDataStoreBinding_Params, 0, sizeof(SetDataStoreBinding_Params));
	memcpy_s(&SetDataStoreBinding_Params.MarkupText, sizeof(SetDataStoreBinding_Params.MarkupText), &MarkupText, sizeof(MarkupText));
	memcpy_s(&SetDataStoreBinding_Params.BindingIndex, sizeof(SetDataStoreBinding_Params.BindingIndex), &BindingIndex, sizeof(BindingIndex));

	uFnSetDataStoreBinding->iNative = 0;
	uFnSetDataStoreBinding->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetDataStoreBinding, &SetDataStoreBinding_Params, nullptr);
	uFnSetDataStoreBinding->FunctionFlags |= 0x400;
	uFnSetDataStoreBinding->iNative = 25631;
};

// Function Engine.UIDataStorePublisher.SaveSubscriberValue
// [0x00424400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[25336])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        BindingIndex                   (CPF_OptionalParm | CPF_Parm)
// class TArray<class UUIDataStore*> out_BoundDataStores            (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

bool UUIDataStorePublisher::SaveSubscriberValue(int32_t BindingIndex, class TArray<class UUIDataStore*>& out_BoundDataStores)
{
	static UFunction* uFnSaveSubscriberValue = nullptr;

	if (!uFnSaveSubscriberValue)
	{
		uFnSaveSubscriberValue = UFunction::FindFunction("Function Engine.UIDataStorePublisher.SaveSubscriberValue");
	}

	UUIDataStorePublisher_execSaveSubscriberValue_Params SaveSubscriberValue_Params;
	memset(&SaveSubscriberValue_Params, 0, sizeof(SaveSubscriberValue_Params));
	memcpy_s(&SaveSubscriberValue_Params.BindingIndex, sizeof(SaveSubscriberValue_Params.BindingIndex), &BindingIndex, sizeof(BindingIndex));
	memcpy_s(&SaveSubscriberValue_Params.out_BoundDataStores, sizeof(SaveSubscriberValue_Params.out_BoundDataStores), &out_BoundDataStores, sizeof(out_BoundDataStores));

	uFnSaveSubscriberValue->iNative = 0;
	uFnSaveSubscriberValue->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSaveSubscriberValue, &SaveSubscriberValue_Params, nullptr);
	uFnSaveSubscriberValue->FunctionFlags |= 0x400;
	uFnSaveSubscriberValue->iNative = 25336;

	memcpy_s(&out_BoundDataStores, sizeof(out_BoundDataStores), &SaveSubscriberValue_Params.out_BoundDataStores, sizeof(SaveSubscriberValue_Params.out_BoundDataStores));

	return SaveSubscriberValue_Params.ReturnValue;
};

// Function Engine.UIDataProvider.ParseTagArrayDelimiter
// [0x00420003] (FUNC_Final | FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    FieldName                      (CPF_Parm | CPF_OutParm)

int32_t UUIDataProvider::ParseTagArrayDelimiter(class FName& FieldName)
{
	static UFunction* uFnParseTagArrayDelimiter = nullptr;

	if (!uFnParseTagArrayDelimiter)
	{
		uFnParseTagArrayDelimiter = UFunction::FindFunction("Function Engine.UIDataProvider.ParseTagArrayDelimiter");
	}

	UUIDataProvider_execParseTagArrayDelimiter_Params ParseTagArrayDelimiter_Params;
	memset(&ParseTagArrayDelimiter_Params, 0, sizeof(ParseTagArrayDelimiter_Params));
	memcpy_s(&ParseTagArrayDelimiter_Params.FieldName, sizeof(ParseTagArrayDelimiter_Params.FieldName), &FieldName, sizeof(FieldName));

	this->ProcessEvent(uFnParseTagArrayDelimiter, &ParseTagArrayDelimiter_Params, nullptr);

	memcpy_s(&FieldName, sizeof(FieldName), &ParseTagArrayDelimiter_Params.FieldName, sizeof(ParseTagArrayDelimiter_Params.FieldName));

	return ParseTagArrayDelimiter_Params.ReturnValue;
};

// Function Engine.UIDataProvider.RemovePropertyNotificationChangeRequest
// [0x00020003] (FUNC_Final | FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FScriptDelegate         InDelegate                     (CPF_Parm | CPF_NeedCtorLink)

bool UUIDataProvider::RemovePropertyNotificationChangeRequest(const struct FScriptDelegate& InDelegate)
{
	static UFunction* uFnRemovePropertyNotificationChangeRequest = nullptr;

	if (!uFnRemovePropertyNotificationChangeRequest)
	{
		uFnRemovePropertyNotificationChangeRequest = UFunction::FindFunction("Function Engine.UIDataProvider.RemovePropertyNotificationChangeRequest");
	}

	UUIDataProvider_execRemovePropertyNotificationChangeRequest_Params RemovePropertyNotificationChangeRequest_Params;
	memset(&RemovePropertyNotificationChangeRequest_Params, 0, sizeof(RemovePropertyNotificationChangeRequest_Params));
	memcpy_s(&RemovePropertyNotificationChangeRequest_Params.InDelegate, sizeof(RemovePropertyNotificationChangeRequest_Params.InDelegate), &InDelegate, sizeof(InDelegate));

	this->ProcessEvent(uFnRemovePropertyNotificationChangeRequest, &RemovePropertyNotificationChangeRequest_Params, nullptr);

	return RemovePropertyNotificationChangeRequest_Params.ReturnValue;
};

// Function Engine.UIDataProvider.AddPropertyNotificationChangeRequest
// [0x00024003] (FUNC_Final | FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FScriptDelegate         InDelegate                     (CPF_Parm | CPF_NeedCtorLink)
// uint32_t                       bAllowDuplicates               (CPF_OptionalParm | CPF_Parm)

bool UUIDataProvider::AddPropertyNotificationChangeRequest(const struct FScriptDelegate& InDelegate, bool bAllowDuplicates)
{
	static UFunction* uFnAddPropertyNotificationChangeRequest = nullptr;

	if (!uFnAddPropertyNotificationChangeRequest)
	{
		uFnAddPropertyNotificationChangeRequest = UFunction::FindFunction("Function Engine.UIDataProvider.AddPropertyNotificationChangeRequest");
	}

	UUIDataProvider_execAddPropertyNotificationChangeRequest_Params AddPropertyNotificationChangeRequest_Params;
	memset(&AddPropertyNotificationChangeRequest_Params, 0, sizeof(AddPropertyNotificationChangeRequest_Params));
	memcpy_s(&AddPropertyNotificationChangeRequest_Params.InDelegate, sizeof(AddPropertyNotificationChangeRequest_Params.InDelegate), &InDelegate, sizeof(InDelegate));
	AddPropertyNotificationChangeRequest_Params.bAllowDuplicates = bAllowDuplicates;

	this->ProcessEvent(uFnAddPropertyNotificationChangeRequest, &AddPropertyNotificationChangeRequest_Params, nullptr);

	return AddPropertyNotificationChangeRequest_Params.ReturnValue;
};

// Function Engine.UIDataProvider.NotifyPropertyChanged
// [0x00024802] (FUNC_Defined | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FName                    PropTag                        (CPF_OptionalParm | CPF_Parm)

void UUIDataProvider::eventNotifyPropertyChanged(const class FName& PropTag)
{
	static UFunction* uFnNotifyPropertyChanged = nullptr;

	if (!uFnNotifyPropertyChanged)
	{
		uFnNotifyPropertyChanged = UFunction::FindFunction("Function Engine.UIDataProvider.NotifyPropertyChanged");
	}

	UUIDataProvider_eventNotifyPropertyChanged_Params NotifyPropertyChanged_Params;
	memset(&NotifyPropertyChanged_Params, 0, sizeof(NotifyPropertyChanged_Params));
	memcpy_s(&NotifyPropertyChanged_Params.PropTag, sizeof(NotifyPropertyChanged_Params.PropTag), &PropTag, sizeof(PropTag));

	this->ProcessEvent(uFnNotifyPropertyChanged, &NotifyPropertyChanged_Params, nullptr);
};

// Function Engine.UIDataProvider.IsCollectionDataType
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUIDataProviderFieldType       FieldType                      (CPF_Parm)

bool UUIDataProvider::eventIsCollectionDataType(EUIDataProviderFieldType FieldType)
{
	static UFunction* uFnIsCollectionDataType = nullptr;

	if (!uFnIsCollectionDataType)
	{
		uFnIsCollectionDataType = UFunction::FindFunction("Function Engine.UIDataProvider.IsCollectionDataType");
	}

	UUIDataProvider_eventIsCollectionDataType_Params IsCollectionDataType_Params;
	memset(&IsCollectionDataType_Params, 0, sizeof(IsCollectionDataType_Params));
	memcpy_s(&IsCollectionDataType_Params.FieldType, sizeof(IsCollectionDataType_Params.FieldType), &FieldType, sizeof(FieldType));

	this->ProcessEvent(uFnIsCollectionDataType, &IsCollectionDataType_Params, nullptr);

	return IsCollectionDataType_Params.ReturnValue;
};

// Function Engine.UIDataProvider.IsProviderDisabled
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UUIDataProvider::eventIsProviderDisabled()
{
	static UFunction* uFnIsProviderDisabled = nullptr;

	if (!uFnIsProviderDisabled)
	{
		uFnIsProviderDisabled = UFunction::FindFunction("Function Engine.UIDataProvider.IsProviderDisabled");
	}

	UUIDataProvider_eventIsProviderDisabled_Params IsProviderDisabled_Params;
	memset(&IsProviderDisabled_Params, 0, sizeof(IsProviderDisabled_Params));

	this->ProcessEvent(uFnIsProviderDisabled, &IsProviderDisabled_Params, nullptr);

	return IsProviderDisabled_Params.ReturnValue;
};

// Function Engine.UIDataProvider.GenerateFillerData
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)
// class FString                  DataTag                        (CPF_Parm | CPF_NeedCtorLink)

class FString UUIDataProvider::eventGenerateFillerData(const class FString& DataTag)
{
	static UFunction* uFnGenerateFillerData = nullptr;

	if (!uFnGenerateFillerData)
	{
		uFnGenerateFillerData = UFunction::FindFunction("Function Engine.UIDataProvider.GenerateFillerData");
	}

	UUIDataProvider_eventGenerateFillerData_Params GenerateFillerData_Params;
	memset(&GenerateFillerData_Params, 0, sizeof(GenerateFillerData_Params));
	memcpy_s(&GenerateFillerData_Params.DataTag, sizeof(GenerateFillerData_Params.DataTag), &DataTag, sizeof(DataTag));

	this->ProcessEvent(uFnGenerateFillerData, &GenerateFillerData_Params, nullptr);

	return GenerateFillerData_Params.ReturnValue;
};

// Function Engine.UIDataProvider.GenerateScriptMarkupString
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)
// class FName                    DataTag                        (CPF_Parm)

class FString UUIDataProvider::eventGenerateScriptMarkupString(const class FName& DataTag)
{
	static UFunction* uFnGenerateScriptMarkupString = nullptr;

	if (!uFnGenerateScriptMarkupString)
	{
		uFnGenerateScriptMarkupString = UFunction::FindFunction("Function Engine.UIDataProvider.GenerateScriptMarkupString");
	}

	UUIDataProvider_eventGenerateScriptMarkupString_Params GenerateScriptMarkupString_Params;
	memset(&GenerateScriptMarkupString_Params, 0, sizeof(GenerateScriptMarkupString_Params));
	memcpy_s(&GenerateScriptMarkupString_Params.DataTag, sizeof(GenerateScriptMarkupString_Params.DataTag), &DataTag, sizeof(DataTag));

	this->ProcessEvent(uFnGenerateScriptMarkupString, &GenerateScriptMarkupString_Params, nullptr);

	return GenerateScriptMarkupString_Params.ReturnValue;
};

// Function Engine.UIDataProvider.SetFieldValue
// [0x00424800] (FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FString                  FieldName                      (CPF_Parm | CPF_NeedCtorLink)
// int32_t                        ArrayIndex                     (CPF_OptionalParm | CPF_Parm)
// struct FUIProviderScriptFieldValue FieldValue                     (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

bool UUIDataProvider::eventSetFieldValue(const class FString& FieldName, int32_t ArrayIndex, struct FUIProviderScriptFieldValue& FieldValue)
{
	static UFunction* uFnSetFieldValue = nullptr;

	if (!uFnSetFieldValue)
	{
		uFnSetFieldValue = UFunction::FindFunction("Function Engine.UIDataProvider.SetFieldValue");
	}

	UUIDataProvider_eventSetFieldValue_Params SetFieldValue_Params;
	memset(&SetFieldValue_Params, 0, sizeof(SetFieldValue_Params));
	memcpy_s(&SetFieldValue_Params.FieldName, sizeof(SetFieldValue_Params.FieldName), &FieldName, sizeof(FieldName));
	memcpy_s(&SetFieldValue_Params.ArrayIndex, sizeof(SetFieldValue_Params.ArrayIndex), &ArrayIndex, sizeof(ArrayIndex));
	memcpy_s(&SetFieldValue_Params.FieldValue, sizeof(SetFieldValue_Params.FieldValue), &FieldValue, sizeof(FieldValue));

	this->ProcessEvent(uFnSetFieldValue, &SetFieldValue_Params, nullptr);

	memcpy_s(&FieldValue, sizeof(FieldValue), &SetFieldValue_Params.FieldValue, sizeof(SetFieldValue_Params.FieldValue));

	return SetFieldValue_Params.ReturnValue;
};

// Function Engine.UIDataProvider.GetFieldValue
// [0x00424800] (FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FString                  FieldName                      (CPF_Parm | CPF_NeedCtorLink)
// int32_t                        ArrayIndex                     (CPF_OptionalParm | CPF_Parm)
// struct FUIProviderScriptFieldValue FieldValue                     (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

bool UUIDataProvider::eventGetFieldValue(const class FString& FieldName, int32_t ArrayIndex, struct FUIProviderScriptFieldValue& FieldValue)
{
	static UFunction* uFnGetFieldValue = nullptr;

	if (!uFnGetFieldValue)
	{
		uFnGetFieldValue = UFunction::FindFunction("Function Engine.UIDataProvider.GetFieldValue");
	}

	UUIDataProvider_eventGetFieldValue_Params GetFieldValue_Params;
	memset(&GetFieldValue_Params, 0, sizeof(GetFieldValue_Params));
	memcpy_s(&GetFieldValue_Params.FieldName, sizeof(GetFieldValue_Params.FieldName), &FieldName, sizeof(FieldName));
	memcpy_s(&GetFieldValue_Params.ArrayIndex, sizeof(GetFieldValue_Params.ArrayIndex), &ArrayIndex, sizeof(ArrayIndex));
	memcpy_s(&GetFieldValue_Params.FieldValue, sizeof(GetFieldValue_Params.FieldValue), &FieldValue, sizeof(FieldValue));

	this->ProcessEvent(uFnGetFieldValue, &GetFieldValue_Params, nullptr);

	memcpy_s(&FieldValue, sizeof(FieldValue), &GetFieldValue_Params.FieldValue, sizeof(GetFieldValue_Params.FieldValue));

	return GetFieldValue_Params.ReturnValue;
};

// Function Engine.UIDataProvider.AllowPublishingToField
// [0x00024800] (FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FString                  FieldName                      (CPF_Parm | CPF_NeedCtorLink)
// int32_t                        ArrayIndex                     (CPF_OptionalParm | CPF_Parm)

bool UUIDataProvider::eventAllowPublishingToField(const class FString& FieldName, int32_t ArrayIndex)
{
	static UFunction* uFnAllowPublishingToField = nullptr;

	if (!uFnAllowPublishingToField)
	{
		uFnAllowPublishingToField = UFunction::FindFunction("Function Engine.UIDataProvider.AllowPublishingToField");
	}

	UUIDataProvider_eventAllowPublishingToField_Params AllowPublishingToField_Params;
	memset(&AllowPublishingToField_Params, 0, sizeof(AllowPublishingToField_Params));
	memcpy_s(&AllowPublishingToField_Params.FieldName, sizeof(AllowPublishingToField_Params.FieldName), &FieldName, sizeof(FieldName));
	memcpy_s(&AllowPublishingToField_Params.ArrayIndex, sizeof(AllowPublishingToField_Params.ArrayIndex), &ArrayIndex, sizeof(ArrayIndex));

	this->ProcessEvent(uFnAllowPublishingToField, &AllowPublishingToField_Params, nullptr);

	return AllowPublishingToField_Params.ReturnValue;
};

// Function Engine.UIDataProvider.GetSupportedScriptFields
// [0x00420800] (FUNC_Event | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// class TArray<struct FUIDataProviderField> out_Fields                     (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void UUIDataProvider::eventGetSupportedScriptFields(class TArray<struct FUIDataProviderField>& out_Fields)
{
	static UFunction* uFnGetSupportedScriptFields = nullptr;

	if (!uFnGetSupportedScriptFields)
	{
		uFnGetSupportedScriptFields = UFunction::FindFunction("Function Engine.UIDataProvider.GetSupportedScriptFields");
	}

	UUIDataProvider_eventGetSupportedScriptFields_Params GetSupportedScriptFields_Params;
	memset(&GetSupportedScriptFields_Params, 0, sizeof(GetSupportedScriptFields_Params));
	memcpy_s(&GetSupportedScriptFields_Params.out_Fields, sizeof(GetSupportedScriptFields_Params.out_Fields), &out_Fields, sizeof(out_Fields));

	this->ProcessEvent(uFnGetSupportedScriptFields, &GetSupportedScriptFields_Params, nullptr);

	memcpy_s(&out_Fields, sizeof(out_Fields), &GetSupportedScriptFields_Params.out_Fields, sizeof(GetSupportedScriptFields_Params.out_Fields));
};

// Function Engine.UIDataProvider.ParseArrayDelimiter
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[23925])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FString                  DataTag                        (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

int32_t UUIDataProvider::ParseArrayDelimiter(class FString& DataTag)
{
	static UFunction* uFnParseArrayDelimiter = nullptr;

	if (!uFnParseArrayDelimiter)
	{
		uFnParseArrayDelimiter = UFunction::FindFunction("Function Engine.UIDataProvider.ParseArrayDelimiter");
	}

	UUIDataProvider_execParseArrayDelimiter_Params ParseArrayDelimiter_Params;
	memset(&ParseArrayDelimiter_Params, 0, sizeof(ParseArrayDelimiter_Params));
	memcpy_s(&ParseArrayDelimiter_Params.DataTag, sizeof(ParseArrayDelimiter_Params.DataTag), &DataTag, sizeof(DataTag));

	uFnParseArrayDelimiter->iNative = 0;
	uFnParseArrayDelimiter->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnParseArrayDelimiter, &ParseArrayDelimiter_Params, nullptr);
	uFnParseArrayDelimiter->FunctionFlags |= 0x400;
	uFnParseArrayDelimiter->iNative = 23925;

	memcpy_s(&DataTag, sizeof(DataTag), &ParseArrayDelimiter_Params.DataTag, sizeof(ParseArrayDelimiter_Params.DataTag));

	return ParseArrayDelimiter_Params.ReturnValue;
};

// Function Engine.UIDataProvider.GetProviderFieldType
// [0x00420401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20721])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FString                  DataTag                        (CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink)
// EUIDataProviderFieldType       out_ProviderFieldType          (CPF_Parm | CPF_OutParm)

bool UUIDataProvider::GetProviderFieldType(const class FString& DataTag, EUIDataProviderFieldType& out_ProviderFieldType)
{
	static UFunction* uFnGetProviderFieldType = nullptr;

	if (!uFnGetProviderFieldType)
	{
		uFnGetProviderFieldType = UFunction::FindFunction("Function Engine.UIDataProvider.GetProviderFieldType");
	}

	UUIDataProvider_execGetProviderFieldType_Params GetProviderFieldType_Params;
	memset(&GetProviderFieldType_Params, 0, sizeof(GetProviderFieldType_Params));
	memcpy_s(&GetProviderFieldType_Params.DataTag, sizeof(GetProviderFieldType_Params.DataTag), &DataTag, sizeof(DataTag));
	memcpy_s(&GetProviderFieldType_Params.out_ProviderFieldType, sizeof(GetProviderFieldType_Params.out_ProviderFieldType), &out_ProviderFieldType, sizeof(out_ProviderFieldType));

	uFnGetProviderFieldType->iNative = 0;
	uFnGetProviderFieldType->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetProviderFieldType, &GetProviderFieldType_Params, nullptr);
	uFnGetProviderFieldType->FunctionFlags |= 0x400;
	uFnGetProviderFieldType->iNative = 20721;

	memcpy_s(&out_ProviderFieldType, sizeof(out_ProviderFieldType), &GetProviderFieldType_Params.out_ProviderFieldType, sizeof(GetProviderFieldType_Params.out_ProviderFieldType));

	return GetProviderFieldType_Params.ReturnValue;
};

// Function Engine.UIDataProvider.OnDataProviderPropertyChange
// [0x00124000] (FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// class UUIDataProvider*         SourceProvider                 (CPF_Parm)
// class FName                    PropTag                        (CPF_OptionalParm | CPF_Parm)

void UUIDataProvider::OnDataProviderPropertyChange(class UUIDataProvider* SourceProvider, const class FName& PropTag)
{
	static UFunction* uFnOnDataProviderPropertyChange = nullptr;

	if (!uFnOnDataProviderPropertyChange)
	{
		uFnOnDataProviderPropertyChange = UFunction::FindFunction("Function Engine.UIDataProvider.OnDataProviderPropertyChange");
	}

	UUIDataProvider_execOnDataProviderPropertyChange_Params OnDataProviderPropertyChange_Params;
	memset(&OnDataProviderPropertyChange_Params, 0, sizeof(OnDataProviderPropertyChange_Params));
	OnDataProviderPropertyChange_Params.SourceProvider = SourceProvider;
	memcpy_s(&OnDataProviderPropertyChange_Params.PropTag, sizeof(OnDataProviderPropertyChange_Params.PropTag), &PropTag, sizeof(PropTag));

	this->ProcessEvent(uFnOnDataProviderPropertyChange, &OnDataProviderPropertyChange_Params, nullptr);
};

// Function Engine.UIDataProvider_OnlinePlayerDataBase.OnUnregister
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UUIDataProvider_OnlinePlayerDataBase::eventOnUnregister()
{
	static UFunction* uFnOnUnregister = nullptr;

	if (!uFnOnUnregister)
	{
		uFnOnUnregister = UFunction::FindFunction("Function Engine.UIDataProvider_OnlinePlayerDataBase.OnUnregister");
	}

	UUIDataProvider_OnlinePlayerDataBase_eventOnUnregister_Params OnUnregister_Params;
	memset(&OnUnregister_Params, 0, sizeof(OnUnregister_Params));

	this->ProcessEvent(uFnOnUnregister, &OnUnregister_Params, nullptr);
};

// Function Engine.UIDataProvider_OnlinePlayerDataBase.OnRegister
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class ULocalPlayer*            InPlayer                       (CPF_Parm)

void UUIDataProvider_OnlinePlayerDataBase::eventOnRegister(class ULocalPlayer* InPlayer)
{
	static UFunction* uFnOnRegister = nullptr;

	if (!uFnOnRegister)
	{
		uFnOnRegister = UFunction::FindFunction("Function Engine.UIDataProvider_OnlinePlayerDataBase.OnRegister");
	}

	UUIDataProvider_OnlinePlayerDataBase_eventOnRegister_Params OnRegister_Params;
	memset(&OnRegister_Params, 0, sizeof(OnRegister_Params));
	OnRegister_Params.InPlayer = InPlayer;

	this->ProcessEvent(uFnOnRegister, &OnRegister_Params, nullptr);
};

// Function Engine.UIDataProvider_OnlineFriends.RefreshFriendsList
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UUIDataProvider_OnlineFriends::eventRefreshFriendsList()
{
	static UFunction* uFnRefreshFriendsList = nullptr;

	if (!uFnRefreshFriendsList)
	{
		uFnRefreshFriendsList = UFunction::FindFunction("Function Engine.UIDataProvider_OnlineFriends.RefreshFriendsList");
	}

	UUIDataProvider_OnlineFriends_eventRefreshFriendsList_Params RefreshFriendsList_Params;
	memset(&RefreshFriendsList_Params, 0, sizeof(RefreshFriendsList_Params));

	this->ProcessEvent(uFnRefreshFriendsList, &RefreshFriendsList_Params, nullptr);
};

// Function Engine.UIDataProvider_OnlineFriends.OnLoginChange
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint8_t                        LocalUserNum                   (CPF_Parm)

void UUIDataProvider_OnlineFriends::OnLoginChange(uint8_t LocalUserNum)
{
	static UFunction* uFnOnLoginChange = nullptr;

	if (!uFnOnLoginChange)
	{
		uFnOnLoginChange = UFunction::FindFunction("Function Engine.UIDataProvider_OnlineFriends.OnLoginChange");
	}

	UUIDataProvider_OnlineFriends_execOnLoginChange_Params OnLoginChange_Params;
	memset(&OnLoginChange_Params, 0, sizeof(OnLoginChange_Params));
	memcpy_s(&OnLoginChange_Params.LocalUserNum, sizeof(OnLoginChange_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));

	this->ProcessEvent(uFnOnLoginChange, &OnLoginChange_Params, nullptr);
};

// Function Engine.UIDataProvider_OnlineFriends.OnFriendsReadComplete
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bWasSuccessful                 (CPF_Parm)

void UUIDataProvider_OnlineFriends::OnFriendsReadComplete(bool bWasSuccessful)
{
	static UFunction* uFnOnFriendsReadComplete = nullptr;

	if (!uFnOnFriendsReadComplete)
	{
		uFnOnFriendsReadComplete = UFunction::FindFunction("Function Engine.UIDataProvider_OnlineFriends.OnFriendsReadComplete");
	}

	UUIDataProvider_OnlineFriends_execOnFriendsReadComplete_Params OnFriendsReadComplete_Params;
	memset(&OnFriendsReadComplete_Params, 0, sizeof(OnFriendsReadComplete_Params));
	OnFriendsReadComplete_Params.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent(uFnOnFriendsReadComplete, &OnFriendsReadComplete_Params, nullptr);
};

// Function Engine.UIDataProvider_OnlineFriends.OnUnregister
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UUIDataProvider_OnlineFriends::eventOnUnregister()
{
	static UFunction* uFnOnUnregister = nullptr;

	if (!uFnOnUnregister)
	{
		uFnOnUnregister = UFunction::FindFunction("Function Engine.UIDataProvider_OnlineFriends.OnUnregister");
	}

	UUIDataProvider_OnlineFriends_eventOnUnregister_Params OnUnregister_Params;
	memset(&OnUnregister_Params, 0, sizeof(OnUnregister_Params));

	this->ProcessEvent(uFnOnUnregister, &OnUnregister_Params, nullptr);
};

// Function Engine.UIDataProvider_OnlineFriends.OnRegister
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class ULocalPlayer*            InPlayer                       (CPF_Parm)

void UUIDataProvider_OnlineFriends::eventOnRegister(class ULocalPlayer* InPlayer)
{
	static UFunction* uFnOnRegister = nullptr;

	if (!uFnOnRegister)
	{
		uFnOnRegister = UFunction::FindFunction("Function Engine.UIDataProvider_OnlineFriends.OnRegister");
	}

	UUIDataProvider_OnlineFriends_eventOnRegister_Params OnRegister_Params;
	memset(&OnRegister_Params, 0, sizeof(OnRegister_Params));
	OnRegister_Params.InPlayer = InPlayer;

	this->ProcessEvent(uFnOnRegister, &OnRegister_Params, nullptr);
};

// Function Engine.UIDataProvider_OnlinePlayerStorage.OnStorageDeviceChange
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UUIDataProvider_OnlinePlayerStorage::OnStorageDeviceChange()
{
	static UFunction* uFnOnStorageDeviceChange = nullptr;

	if (!uFnOnStorageDeviceChange)
	{
		uFnOnStorageDeviceChange = UFunction::FindFunction("Function Engine.UIDataProvider_OnlinePlayerStorage.OnStorageDeviceChange");
	}

	UUIDataProvider_OnlinePlayerStorage_execOnStorageDeviceChange_Params OnStorageDeviceChange_Params;
	memset(&OnStorageDeviceChange_Params, 0, sizeof(OnStorageDeviceChange_Params));

	this->ProcessEvent(uFnOnStorageDeviceChange, &OnStorageDeviceChange_Params, nullptr);
};

// Function Engine.UIDataProvider_OnlinePlayerStorage.OnSettingValueUpdated
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FName                    SettingName                    (CPF_Parm)

void UUIDataProvider_OnlinePlayerStorage::OnSettingValueUpdated(const class FName& SettingName)
{
	static UFunction* uFnOnSettingValueUpdated = nullptr;

	if (!uFnOnSettingValueUpdated)
	{
		uFnOnSettingValueUpdated = UFunction::FindFunction("Function Engine.UIDataProvider_OnlinePlayerStorage.OnSettingValueUpdated");
	}

	UUIDataProvider_OnlinePlayerStorage_execOnSettingValueUpdated_Params OnSettingValueUpdated_Params;
	memset(&OnSettingValueUpdated_Params, 0, sizeof(OnSettingValueUpdated_Params));
	memcpy_s(&OnSettingValueUpdated_Params.SettingName, sizeof(OnSettingValueUpdated_Params.SettingName), &SettingName, sizeof(SettingName));

	this->ProcessEvent(uFnOnSettingValueUpdated, &OnSettingValueUpdated_Params, nullptr);
};

// Function Engine.UIDataProvider_OnlinePlayerStorage.ArrayProviderPropertyChanged
// [0x00024002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UUIDataProvider*         SourceProvider                 (CPF_Parm)
// class FName                    PropTag                        (CPF_OptionalParm | CPF_Parm)

void UUIDataProvider_OnlinePlayerStorage::ArrayProviderPropertyChanged(class UUIDataProvider* SourceProvider, const class FName& PropTag)
{
	static UFunction* uFnArrayProviderPropertyChanged = nullptr;

	if (!uFnArrayProviderPropertyChanged)
	{
		uFnArrayProviderPropertyChanged = UFunction::FindFunction("Function Engine.UIDataProvider_OnlinePlayerStorage.ArrayProviderPropertyChanged");
	}

	UUIDataProvider_OnlinePlayerStorage_execArrayProviderPropertyChanged_Params ArrayProviderPropertyChanged_Params;
	memset(&ArrayProviderPropertyChanged_Params, 0, sizeof(ArrayProviderPropertyChanged_Params));
	ArrayProviderPropertyChanged_Params.SourceProvider = SourceProvider;
	memcpy_s(&ArrayProviderPropertyChanged_Params.PropTag, sizeof(ArrayProviderPropertyChanged_Params.PropTag), &PropTag, sizeof(PropTag));

	this->ProcessEvent(uFnArrayProviderPropertyChanged, &ArrayProviderPropertyChanged_Params, nullptr);
};

// Function Engine.UIDataProvider_OnlinePlayerStorage.SaveStorageData
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UUIDataProvider_OnlinePlayerStorage::eventSaveStorageData()
{
	static UFunction* uFnSaveStorageData = nullptr;

	if (!uFnSaveStorageData)
	{
		uFnSaveStorageData = UFunction::FindFunction("Function Engine.UIDataProvider_OnlinePlayerStorage.SaveStorageData");
	}

	UUIDataProvider_OnlinePlayerStorage_eventSaveStorageData_Params SaveStorageData_Params;
	memset(&SaveStorageData_Params, 0, sizeof(SaveStorageData_Params));

	this->ProcessEvent(uFnSaveStorageData, &SaveStorageData_Params, nullptr);

	return SaveStorageData_Params.ReturnValue;
};

// Function Engine.UIDataProvider_OnlinePlayerStorage.OnDeviceSelectionComplete
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bWasSuccessful                 (CPF_Parm)

void UUIDataProvider_OnlinePlayerStorage::OnDeviceSelectionComplete(bool bWasSuccessful)
{
	static UFunction* uFnOnDeviceSelectionComplete = nullptr;

	if (!uFnOnDeviceSelectionComplete)
	{
		uFnOnDeviceSelectionComplete = UFunction::FindFunction("Function Engine.UIDataProvider_OnlinePlayerStorage.OnDeviceSelectionComplete");
	}

	UUIDataProvider_OnlinePlayerStorage_execOnDeviceSelectionComplete_Params OnDeviceSelectionComplete_Params;
	memset(&OnDeviceSelectionComplete_Params, 0, sizeof(OnDeviceSelectionComplete_Params));
	OnDeviceSelectionComplete_Params.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent(uFnOnDeviceSelectionComplete, &OnDeviceSelectionComplete_Params, nullptr);
};

// Function Engine.UIDataProvider_OnlinePlayerStorage.RefreshStorageData
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UUIDataProvider_OnlinePlayerStorage::RefreshStorageData()
{
	static UFunction* uFnRefreshStorageData = nullptr;

	if (!uFnRefreshStorageData)
	{
		uFnRefreshStorageData = UFunction::FindFunction("Function Engine.UIDataProvider_OnlinePlayerStorage.RefreshStorageData");
	}

	UUIDataProvider_OnlinePlayerStorage_execRefreshStorageData_Params RefreshStorageData_Params;
	memset(&RefreshStorageData_Params, 0, sizeof(RefreshStorageData_Params));

	this->ProcessEvent(uFnRefreshStorageData, &RefreshStorageData_Params, nullptr);
};

// Function Engine.UIDataProvider_OnlinePlayerStorage.OnLoginChange
// [0x00820002] (FUNC_Defined | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// uint8_t                        LocalUserNum                   (CPF_Parm)

void UUIDataProvider_OnlinePlayerStorage::OnLoginChange(uint8_t LocalUserNum)
{
	static UFunction* uFnOnLoginChange = nullptr;

	if (!uFnOnLoginChange)
	{
		uFnOnLoginChange = UFunction::FindFunction("Function Engine.UIDataProvider_OnlinePlayerStorage.OnLoginChange");
	}

	UUIDataProvider_OnlinePlayerStorage_execOnLoginChange_Params OnLoginChange_Params;
	memset(&OnLoginChange_Params, 0, sizeof(OnLoginChange_Params));
	memcpy_s(&OnLoginChange_Params.LocalUserNum, sizeof(OnLoginChange_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));

	this->ProcessEvent(uFnOnLoginChange, &OnLoginChange_Params, nullptr);
};

// Function Engine.UIDataProvider_OnlinePlayerStorage.OnReadStorageComplete
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint8_t                        LocalUserNum                   (CPF_Parm)
// uint32_t                       bWasSuccessful                 (CPF_Parm)

void UUIDataProvider_OnlinePlayerStorage::OnReadStorageComplete(uint8_t LocalUserNum, bool bWasSuccessful)
{
	static UFunction* uFnOnReadStorageComplete = nullptr;

	if (!uFnOnReadStorageComplete)
	{
		uFnOnReadStorageComplete = UFunction::FindFunction("Function Engine.UIDataProvider_OnlinePlayerStorage.OnReadStorageComplete");
	}

	UUIDataProvider_OnlinePlayerStorage_execOnReadStorageComplete_Params OnReadStorageComplete_Params;
	memset(&OnReadStorageComplete_Params, 0, sizeof(OnReadStorageComplete_Params));
	memcpy_s(&OnReadStorageComplete_Params.LocalUserNum, sizeof(OnReadStorageComplete_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	OnReadStorageComplete_Params.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent(uFnOnReadStorageComplete, &OnReadStorageComplete_Params, nullptr);
};

// Function Engine.UIDataProvider_OnlinePlayerStorage.OnReadStorageComplete_Native
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[23642])
// Parameter Info:

void UUIDataProvider_OnlinePlayerStorage::OnReadStorageComplete_Native()
{
	static UFunction* uFnOnReadStorageComplete_Native = nullptr;

	if (!uFnOnReadStorageComplete_Native)
	{
		uFnOnReadStorageComplete_Native = UFunction::FindFunction("Function Engine.UIDataProvider_OnlinePlayerStorage.OnReadStorageComplete_Native");
	}

	UUIDataProvider_OnlinePlayerStorage_execOnReadStorageComplete_Native_Params OnReadStorageComplete_Native_Params;
	memset(&OnReadStorageComplete_Native_Params, 0, sizeof(OnReadStorageComplete_Native_Params));

	uFnOnReadStorageComplete_Native->iNative = 0;
	uFnOnReadStorageComplete_Native->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnOnReadStorageComplete_Native, &OnReadStorageComplete_Native_Params, nullptr);
	uFnOnReadStorageComplete_Native->FunctionFlags |= 0x400;
	uFnOnReadStorageComplete_Native->iNative = 23642;
};

// Function Engine.UIDataProvider_OnlinePlayerStorage.OnUnregister
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UUIDataProvider_OnlinePlayerStorage::eventOnUnregister()
{
	static UFunction* uFnOnUnregister = nullptr;

	if (!uFnOnUnregister)
	{
		uFnOnUnregister = UFunction::FindFunction("Function Engine.UIDataProvider_OnlinePlayerStorage.OnUnregister");
	}

	UUIDataProvider_OnlinePlayerStorage_eventOnUnregister_Params OnUnregister_Params;
	memset(&OnUnregister_Params, 0, sizeof(OnUnregister_Params));

	this->ProcessEvent(uFnOnUnregister, &OnUnregister_Params, nullptr);
};

// Function Engine.UIDataProvider_OnlinePlayerStorage.OnRegister
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class ULocalPlayer*            InPlayer                       (CPF_Parm)

void UUIDataProvider_OnlinePlayerStorage::eventOnRegister(class ULocalPlayer* InPlayer)
{
	static UFunction* uFnOnRegister = nullptr;

	if (!uFnOnRegister)
	{
		uFnOnRegister = UFunction::FindFunction("Function Engine.UIDataProvider_OnlinePlayerStorage.OnRegister");
	}

	UUIDataProvider_OnlinePlayerStorage_eventOnRegister_Params OnRegister_Params;
	memset(&OnRegister_Params, 0, sizeof(OnRegister_Params));
	OnRegister_Params.InPlayer = InPlayer;

	this->ProcessEvent(uFnOnRegister, &OnRegister_Params, nullptr);
};

// Function Engine.UIDataProvider_OnlinePlayerStorage.ClearReadCompleteDelegate
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UOnlinePlayerInterface*  PlayerInterface                (CPF_Parm)
// uint8_t                        LocalUserNum                   (CPF_Parm)

void UUIDataProvider_OnlinePlayerStorage::ClearReadCompleteDelegate(class UOnlinePlayerInterface* PlayerInterface, uint8_t LocalUserNum)
{
	static UFunction* uFnClearReadCompleteDelegate = nullptr;

	if (!uFnClearReadCompleteDelegate)
	{
		uFnClearReadCompleteDelegate = UFunction::FindFunction("Function Engine.UIDataProvider_OnlinePlayerStorage.ClearReadCompleteDelegate");
	}

	UUIDataProvider_OnlinePlayerStorage_execClearReadCompleteDelegate_Params ClearReadCompleteDelegate_Params;
	memset(&ClearReadCompleteDelegate_Params, 0, sizeof(ClearReadCompleteDelegate_Params));
	ClearReadCompleteDelegate_Params.PlayerInterface = PlayerInterface;
	memcpy_s(&ClearReadCompleteDelegate_Params.LocalUserNum, sizeof(ClearReadCompleteDelegate_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));

	this->ProcessEvent(uFnClearReadCompleteDelegate, &ClearReadCompleteDelegate_Params, nullptr);
};

// Function Engine.UIDataProvider_OnlinePlayerStorage.AddReadCompleteDelegate
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UOnlinePlayerInterface*  PlayerInterface                (CPF_Parm)
// uint8_t                        LocalUserNum                   (CPF_Parm)

void UUIDataProvider_OnlinePlayerStorage::AddReadCompleteDelegate(class UOnlinePlayerInterface* PlayerInterface, uint8_t LocalUserNum)
{
	static UFunction* uFnAddReadCompleteDelegate = nullptr;

	if (!uFnAddReadCompleteDelegate)
	{
		uFnAddReadCompleteDelegate = UFunction::FindFunction("Function Engine.UIDataProvider_OnlinePlayerStorage.AddReadCompleteDelegate");
	}

	UUIDataProvider_OnlinePlayerStorage_execAddReadCompleteDelegate_Params AddReadCompleteDelegate_Params;
	memset(&AddReadCompleteDelegate_Params, 0, sizeof(AddReadCompleteDelegate_Params));
	AddReadCompleteDelegate_Params.PlayerInterface = PlayerInterface;
	memcpy_s(&AddReadCompleteDelegate_Params.LocalUserNum, sizeof(AddReadCompleteDelegate_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));

	this->ProcessEvent(uFnAddReadCompleteDelegate, &AddReadCompleteDelegate_Params, nullptr);
};

// Function Engine.UIDataProvider_OnlinePlayerStorage.GetData
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UOnlinePlayerInterface*  PlayerInterface                (CPF_Parm)
// uint8_t                        LocalUserNum                   (CPF_Parm)
// class UOnlinePlayerStorage*    PlayerStorage                  (CPF_Parm)

bool UUIDataProvider_OnlinePlayerStorage::GetData(class UOnlinePlayerInterface* PlayerInterface, uint8_t LocalUserNum, class UOnlinePlayerStorage* PlayerStorage)
{
	static UFunction* uFnGetData = nullptr;

	if (!uFnGetData)
	{
		uFnGetData = UFunction::FindFunction("Function Engine.UIDataProvider_OnlinePlayerStorage.GetData");
	}

	UUIDataProvider_OnlinePlayerStorage_execGetData_Params GetData_Params;
	memset(&GetData_Params, 0, sizeof(GetData_Params));
	GetData_Params.PlayerInterface = PlayerInterface;
	memcpy_s(&GetData_Params.LocalUserNum, sizeof(GetData_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	GetData_Params.PlayerStorage = PlayerStorage;

	this->ProcessEvent(uFnGetData, &GetData_Params, nullptr);

	return GetData_Params.ReturnValue;
};

// Function Engine.UIDataProvider_OnlinePlayerStorage.WriteData
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UOnlinePlayerInterface*  PlayerInterface                (CPF_Parm)
// uint8_t                        LocalUserNum                   (CPF_Parm)
// int32_t                        DeviceID                       (CPF_Parm)
// class UOnlinePlayerStorage*    PlayerStorage                  (CPF_Parm)

bool UUIDataProvider_OnlinePlayerStorage::WriteData(class UOnlinePlayerInterface* PlayerInterface, uint8_t LocalUserNum, int32_t DeviceID, class UOnlinePlayerStorage* PlayerStorage)
{
	static UFunction* uFnWriteData = nullptr;

	if (!uFnWriteData)
	{
		uFnWriteData = UFunction::FindFunction("Function Engine.UIDataProvider_OnlinePlayerStorage.WriteData");
	}

	UUIDataProvider_OnlinePlayerStorage_execWriteData_Params WriteData_Params;
	memset(&WriteData_Params, 0, sizeof(WriteData_Params));
	WriteData_Params.PlayerInterface = PlayerInterface;
	memcpy_s(&WriteData_Params.LocalUserNum, sizeof(WriteData_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	memcpy_s(&WriteData_Params.DeviceID, sizeof(WriteData_Params.DeviceID), &DeviceID, sizeof(DeviceID));
	WriteData_Params.PlayerStorage = PlayerStorage;

	this->ProcessEvent(uFnWriteData, &WriteData_Params, nullptr);

	return WriteData_Params.ReturnValue;
};

// Function Engine.UIDataProvider_OnlinePlayerStorage.ReadData
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UOnlinePlayerInterface*  PlayerInterface                (CPF_Parm)
// uint8_t                        LocalUserNum                   (CPF_Parm)
// int32_t                        DeviceID                       (CPF_Parm)
// class UOnlinePlayerStorage*    PlayerStorage                  (CPF_Parm)

bool UUIDataProvider_OnlinePlayerStorage::ReadData(class UOnlinePlayerInterface* PlayerInterface, uint8_t LocalUserNum, int32_t DeviceID, class UOnlinePlayerStorage* PlayerStorage)
{
	static UFunction* uFnReadData = nullptr;

	if (!uFnReadData)
	{
		uFnReadData = UFunction::FindFunction("Function Engine.UIDataProvider_OnlinePlayerStorage.ReadData");
	}

	UUIDataProvider_OnlinePlayerStorage_execReadData_Params ReadData_Params;
	memset(&ReadData_Params, 0, sizeof(ReadData_Params));
	ReadData_Params.PlayerInterface = PlayerInterface;
	memcpy_s(&ReadData_Params.LocalUserNum, sizeof(ReadData_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	memcpy_s(&ReadData_Params.DeviceID, sizeof(ReadData_Params.DeviceID), &DeviceID, sizeof(DeviceID));
	ReadData_Params.PlayerStorage = PlayerStorage;

	this->ProcessEvent(uFnReadData, &ReadData_Params, nullptr);

	return ReadData_Params.ReturnValue;
};

// Function Engine.UIDataProvider_OnlineProfileSettings.RefreshStorageData
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UUIDataProvider_OnlineProfileSettings::RefreshStorageData()
{
	static UFunction* uFnRefreshStorageData = nullptr;

	if (!uFnRefreshStorageData)
	{
		uFnRefreshStorageData = UFunction::FindFunction("Function Engine.UIDataProvider_OnlineProfileSettings.RefreshStorageData");
	}

	UUIDataProvider_OnlineProfileSettings_execRefreshStorageData_Params RefreshStorageData_Params;
	memset(&RefreshStorageData_Params, 0, sizeof(RefreshStorageData_Params));

	this->ProcessEvent(uFnRefreshStorageData, &RefreshStorageData_Params, nullptr);
};

// Function Engine.UIDataProvider_OnlineProfileSettings.ClearReadCompleteDelegate
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UOnlinePlayerInterface*  PlayerInterface                (CPF_Parm)
// uint8_t                        LocalUserNum                   (CPF_Parm)

void UUIDataProvider_OnlineProfileSettings::ClearReadCompleteDelegate(class UOnlinePlayerInterface* PlayerInterface, uint8_t LocalUserNum)
{
	static UFunction* uFnClearReadCompleteDelegate = nullptr;

	if (!uFnClearReadCompleteDelegate)
	{
		uFnClearReadCompleteDelegate = UFunction::FindFunction("Function Engine.UIDataProvider_OnlineProfileSettings.ClearReadCompleteDelegate");
	}

	UUIDataProvider_OnlineProfileSettings_execClearReadCompleteDelegate_Params ClearReadCompleteDelegate_Params;
	memset(&ClearReadCompleteDelegate_Params, 0, sizeof(ClearReadCompleteDelegate_Params));
	ClearReadCompleteDelegate_Params.PlayerInterface = PlayerInterface;
	memcpy_s(&ClearReadCompleteDelegate_Params.LocalUserNum, sizeof(ClearReadCompleteDelegate_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));

	this->ProcessEvent(uFnClearReadCompleteDelegate, &ClearReadCompleteDelegate_Params, nullptr);
};

// Function Engine.UIDataProvider_OnlineProfileSettings.AddReadCompleteDelegate
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UOnlinePlayerInterface*  PlayerInterface                (CPF_Parm)
// uint8_t                        LocalUserNum                   (CPF_Parm)

void UUIDataProvider_OnlineProfileSettings::AddReadCompleteDelegate(class UOnlinePlayerInterface* PlayerInterface, uint8_t LocalUserNum)
{
	static UFunction* uFnAddReadCompleteDelegate = nullptr;

	if (!uFnAddReadCompleteDelegate)
	{
		uFnAddReadCompleteDelegate = UFunction::FindFunction("Function Engine.UIDataProvider_OnlineProfileSettings.AddReadCompleteDelegate");
	}

	UUIDataProvider_OnlineProfileSettings_execAddReadCompleteDelegate_Params AddReadCompleteDelegate_Params;
	memset(&AddReadCompleteDelegate_Params, 0, sizeof(AddReadCompleteDelegate_Params));
	AddReadCompleteDelegate_Params.PlayerInterface = PlayerInterface;
	memcpy_s(&AddReadCompleteDelegate_Params.LocalUserNum, sizeof(AddReadCompleteDelegate_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));

	this->ProcessEvent(uFnAddReadCompleteDelegate, &AddReadCompleteDelegate_Params, nullptr);
};

// Function Engine.UIDataProvider_OnlineProfileSettings.GetData
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UOnlinePlayerInterface*  PlayerInterface                (CPF_Parm)
// uint8_t                        LocalUserNum                   (CPF_Parm)
// class UOnlinePlayerStorage*    PlayerStorage                  (CPF_Parm)

bool UUIDataProvider_OnlineProfileSettings::GetData(class UOnlinePlayerInterface* PlayerInterface, uint8_t LocalUserNum, class UOnlinePlayerStorage* PlayerStorage)
{
	static UFunction* uFnGetData = nullptr;

	if (!uFnGetData)
	{
		uFnGetData = UFunction::FindFunction("Function Engine.UIDataProvider_OnlineProfileSettings.GetData");
	}

	UUIDataProvider_OnlineProfileSettings_execGetData_Params GetData_Params;
	memset(&GetData_Params, 0, sizeof(GetData_Params));
	GetData_Params.PlayerInterface = PlayerInterface;
	memcpy_s(&GetData_Params.LocalUserNum, sizeof(GetData_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	GetData_Params.PlayerStorage = PlayerStorage;

	this->ProcessEvent(uFnGetData, &GetData_Params, nullptr);

	return GetData_Params.ReturnValue;
};

// Function Engine.UIDataProvider_OnlineProfileSettings.WriteData
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UOnlinePlayerInterface*  PlayerInterface                (CPF_Parm)
// uint8_t                        LocalUserNum                   (CPF_Parm)
// int32_t                        DeviceID                       (CPF_Parm)
// class UOnlinePlayerStorage*    PlayerStorage                  (CPF_Parm)

bool UUIDataProvider_OnlineProfileSettings::WriteData(class UOnlinePlayerInterface* PlayerInterface, uint8_t LocalUserNum, int32_t DeviceID, class UOnlinePlayerStorage* PlayerStorage)
{
	static UFunction* uFnWriteData = nullptr;

	if (!uFnWriteData)
	{
		uFnWriteData = UFunction::FindFunction("Function Engine.UIDataProvider_OnlineProfileSettings.WriteData");
	}

	UUIDataProvider_OnlineProfileSettings_execWriteData_Params WriteData_Params;
	memset(&WriteData_Params, 0, sizeof(WriteData_Params));
	WriteData_Params.PlayerInterface = PlayerInterface;
	memcpy_s(&WriteData_Params.LocalUserNum, sizeof(WriteData_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	memcpy_s(&WriteData_Params.DeviceID, sizeof(WriteData_Params.DeviceID), &DeviceID, sizeof(DeviceID));
	WriteData_Params.PlayerStorage = PlayerStorage;

	this->ProcessEvent(uFnWriteData, &WriteData_Params, nullptr);

	return WriteData_Params.ReturnValue;
};

// Function Engine.UIDataProvider_OnlineProfileSettings.ReadData
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UOnlinePlayerInterface*  PlayerInterface                (CPF_Parm)
// uint8_t                        LocalUserNum                   (CPF_Parm)
// int32_t                        DeviceID                       (CPF_Parm)
// class UOnlinePlayerStorage*    PlayerStorage                  (CPF_Parm)

bool UUIDataProvider_OnlineProfileSettings::ReadData(class UOnlinePlayerInterface* PlayerInterface, uint8_t LocalUserNum, int32_t DeviceID, class UOnlinePlayerStorage* PlayerStorage)
{
	static UFunction* uFnReadData = nullptr;

	if (!uFnReadData)
	{
		uFnReadData = UFunction::FindFunction("Function Engine.UIDataProvider_OnlineProfileSettings.ReadData");
	}

	UUIDataProvider_OnlineProfileSettings_execReadData_Params ReadData_Params;
	memset(&ReadData_Params, 0, sizeof(ReadData_Params));
	ReadData_Params.PlayerInterface = PlayerInterface;
	memcpy_s(&ReadData_Params.LocalUserNum, sizeof(ReadData_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	memcpy_s(&ReadData_Params.DeviceID, sizeof(ReadData_Params.DeviceID), &DeviceID, sizeof(DeviceID));
	ReadData_Params.PlayerStorage = PlayerStorage;

	this->ProcessEvent(uFnReadData, &ReadData_Params, nullptr);

	return ReadData_Params.ReturnValue;
};

// Function Engine.UIDataProvider_PlayerAchievements.UpdateAchievements
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UUIDataProvider_PlayerAchievements::UpdateAchievements()
{
	static UFunction* uFnUpdateAchievements = nullptr;

	if (!uFnUpdateAchievements)
	{
		uFnUpdateAchievements = UFunction::FindFunction("Function Engine.UIDataProvider_PlayerAchievements.UpdateAchievements");
	}

	UUIDataProvider_PlayerAchievements_execUpdateAchievements_Params UpdateAchievements_Params;
	memset(&UpdateAchievements_Params, 0, sizeof(UpdateAchievements_Params));

	this->ProcessEvent(uFnUpdateAchievements, &UpdateAchievements_Params, nullptr);
};

// Function Engine.UIDataProvider_PlayerAchievements.OnLoginChange
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint8_t                        LocalUserNum                   (CPF_Parm)

void UUIDataProvider_PlayerAchievements::OnLoginChange(uint8_t LocalUserNum)
{
	static UFunction* uFnOnLoginChange = nullptr;

	if (!uFnOnLoginChange)
	{
		uFnOnLoginChange = UFunction::FindFunction("Function Engine.UIDataProvider_PlayerAchievements.OnLoginChange");
	}

	UUIDataProvider_PlayerAchievements_execOnLoginChange_Params OnLoginChange_Params;
	memset(&OnLoginChange_Params, 0, sizeof(OnLoginChange_Params));
	memcpy_s(&OnLoginChange_Params.LocalUserNum, sizeof(OnLoginChange_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));

	this->ProcessEvent(uFnOnLoginChange, &OnLoginChange_Params, nullptr);
};

// Function Engine.UIDataProvider_PlayerAchievements.OnUnregister
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UUIDataProvider_PlayerAchievements::eventOnUnregister()
{
	static UFunction* uFnOnUnregister = nullptr;

	if (!uFnOnUnregister)
	{
		uFnOnUnregister = UFunction::FindFunction("Function Engine.UIDataProvider_PlayerAchievements.OnUnregister");
	}

	UUIDataProvider_PlayerAchievements_eventOnUnregister_Params OnUnregister_Params;
	memset(&OnUnregister_Params, 0, sizeof(OnUnregister_Params));

	this->ProcessEvent(uFnOnUnregister, &OnUnregister_Params, nullptr);
};

// Function Engine.UIDataProvider_PlayerAchievements.OnRegister
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class ULocalPlayer*            InPlayer                       (CPF_Parm)

void UUIDataProvider_PlayerAchievements::eventOnRegister(class ULocalPlayer* InPlayer)
{
	static UFunction* uFnOnRegister = nullptr;

	if (!uFnOnRegister)
	{
		uFnOnRegister = UFunction::FindFunction("Function Engine.UIDataProvider_PlayerAchievements.OnRegister");
	}

	UUIDataProvider_PlayerAchievements_eventOnRegister_Params OnRegister_Params;
	memset(&OnRegister_Params, 0, sizeof(OnRegister_Params));
	OnRegister_Params.InPlayer = InPlayer;

	this->ProcessEvent(uFnOnRegister, &OnRegister_Params, nullptr);
};

// Function Engine.UIDataProvider_PlayerAchievements.OnPlayerAchievementUnlocked
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bWasSuccessful                 (CPF_Parm)

void UUIDataProvider_PlayerAchievements::OnPlayerAchievementUnlocked(bool bWasSuccessful)
{
	static UFunction* uFnOnPlayerAchievementUnlocked = nullptr;

	if (!uFnOnPlayerAchievementUnlocked)
	{
		uFnOnPlayerAchievementUnlocked = UFunction::FindFunction("Function Engine.UIDataProvider_PlayerAchievements.OnPlayerAchievementUnlocked");
	}

	UUIDataProvider_PlayerAchievements_execOnPlayerAchievementUnlocked_Params OnPlayerAchievementUnlocked_Params;
	memset(&OnPlayerAchievementUnlocked_Params, 0, sizeof(OnPlayerAchievementUnlocked_Params));
	OnPlayerAchievementUnlocked_Params.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent(uFnOnPlayerAchievementUnlocked, &OnPlayerAchievementUnlocked_Params, nullptr);
};

// Function Engine.UIDataProvider_PlayerAchievements.OnPlayerAchievementsChanged
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        TitleId                        (CPF_Parm)

void UUIDataProvider_PlayerAchievements::OnPlayerAchievementsChanged(int32_t TitleId)
{
	static UFunction* uFnOnPlayerAchievementsChanged = nullptr;

	if (!uFnOnPlayerAchievementsChanged)
	{
		uFnOnPlayerAchievementsChanged = UFunction::FindFunction("Function Engine.UIDataProvider_PlayerAchievements.OnPlayerAchievementsChanged");
	}

	UUIDataProvider_PlayerAchievements_execOnPlayerAchievementsChanged_Params OnPlayerAchievementsChanged_Params;
	memset(&OnPlayerAchievementsChanged_Params, 0, sizeof(OnPlayerAchievementsChanged_Params));
	memcpy_s(&OnPlayerAchievementsChanged_Params.TitleId, sizeof(OnPlayerAchievementsChanged_Params.TitleId), &TitleId, sizeof(TitleId));

	this->ProcessEvent(uFnOnPlayerAchievementsChanged, &OnPlayerAchievementsChanged_Params, nullptr);
};

// Function Engine.UIDataProvider_PlayerAchievements.GetAchievementDetails
// [0x00420002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// int32_t                        AchievementId                  (CPF_Const | CPF_Parm)
// struct FAchievementDetails     OutAchievementDetails          (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void UUIDataProvider_PlayerAchievements::GetAchievementDetails(int32_t AchievementId, struct FAchievementDetails& OutAchievementDetails)
{
	static UFunction* uFnGetAchievementDetails = nullptr;

	if (!uFnGetAchievementDetails)
	{
		uFnGetAchievementDetails = UFunction::FindFunction("Function Engine.UIDataProvider_PlayerAchievements.GetAchievementDetails");
	}

	UUIDataProvider_PlayerAchievements_execGetAchievementDetails_Params GetAchievementDetails_Params;
	memset(&GetAchievementDetails_Params, 0, sizeof(GetAchievementDetails_Params));
	memcpy_s(&GetAchievementDetails_Params.AchievementId, sizeof(GetAchievementDetails_Params.AchievementId), &AchievementId, sizeof(AchievementId));
	memcpy_s(&GetAchievementDetails_Params.OutAchievementDetails, sizeof(GetAchievementDetails_Params.OutAchievementDetails), &OutAchievementDetails, sizeof(OutAchievementDetails));

	this->ProcessEvent(uFnGetAchievementDetails, &GetAchievementDetails_Params, nullptr);

	memcpy_s(&OutAchievementDetails, sizeof(OutAchievementDetails), &GetAchievementDetails_Params.OutAchievementDetails, sizeof(GetAchievementDetails_Params.OutAchievementDetails));
};

// Function Engine.UIDataProvider_PlayerAchievements.GetAchievementIconPathName
// [0x00024000] (FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)
// int32_t                        AchievementId                  (CPF_Parm)
// uint32_t                       bReturnLockedIcon              (CPF_OptionalParm | CPF_Parm)

class FString UUIDataProvider_PlayerAchievements::GetAchievementIconPathName(int32_t AchievementId, bool bReturnLockedIcon)
{
	static UFunction* uFnGetAchievementIconPathName = nullptr;

	if (!uFnGetAchievementIconPathName)
	{
		uFnGetAchievementIconPathName = UFunction::FindFunction("Function Engine.UIDataProvider_PlayerAchievements.GetAchievementIconPathName");
	}

	UUIDataProvider_PlayerAchievements_execGetAchievementIconPathName_Params GetAchievementIconPathName_Params;
	memset(&GetAchievementIconPathName_Params, 0, sizeof(GetAchievementIconPathName_Params));
	memcpy_s(&GetAchievementIconPathName_Params.AchievementId, sizeof(GetAchievementIconPathName_Params.AchievementId), &AchievementId, sizeof(AchievementId));
	GetAchievementIconPathName_Params.bReturnLockedIcon = bReturnLockedIcon;

	this->ProcessEvent(uFnGetAchievementIconPathName, &GetAchievementIconPathName_Params, nullptr);

	return GetAchievementIconPathName_Params.ReturnValue;
};

// Function Engine.UIDataProvider_PlayerAchievements.PopulateAchievementIcons
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UUIDataProvider_PlayerAchievements::PopulateAchievementIcons()
{
	static UFunction* uFnPopulateAchievementIcons = nullptr;

	if (!uFnPopulateAchievementIcons)
	{
		uFnPopulateAchievementIcons = UFunction::FindFunction("Function Engine.UIDataProvider_PlayerAchievements.PopulateAchievementIcons");
	}

	UUIDataProvider_PlayerAchievements_execPopulateAchievementIcons_Params PopulateAchievementIcons_Params;
	memset(&PopulateAchievementIcons_Params, 0, sizeof(PopulateAchievementIcons_Params));

	this->ProcessEvent(uFnPopulateAchievementIcons, &PopulateAchievementIcons_Params, nullptr);
};

// Function Engine.UIDataProvider_PlayerAchievements.GetMaxTotalGamerScore
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20641])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t UUIDataProvider_PlayerAchievements::GetMaxTotalGamerScore()
{
	static UFunction* uFnGetMaxTotalGamerScore = nullptr;

	if (!uFnGetMaxTotalGamerScore)
	{
		uFnGetMaxTotalGamerScore = UFunction::FindFunction("Function Engine.UIDataProvider_PlayerAchievements.GetMaxTotalGamerScore");
	}

	UUIDataProvider_PlayerAchievements_execGetMaxTotalGamerScore_Params GetMaxTotalGamerScore_Params;
	memset(&GetMaxTotalGamerScore_Params, 0, sizeof(GetMaxTotalGamerScore_Params));

	uFnGetMaxTotalGamerScore->iNative = 0;
	uFnGetMaxTotalGamerScore->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetMaxTotalGamerScore, &GetMaxTotalGamerScore_Params, nullptr);
	uFnGetMaxTotalGamerScore->FunctionFlags |= 0x400;
	uFnGetMaxTotalGamerScore->iNative = 20641;

	return GetMaxTotalGamerScore_Params.ReturnValue;
};

// Function Engine.UIDataProvider_PlayerAchievements.GetTotalGamerScore
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20792])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t UUIDataProvider_PlayerAchievements::GetTotalGamerScore()
{
	static UFunction* uFnGetTotalGamerScore = nullptr;

	if (!uFnGetTotalGamerScore)
	{
		uFnGetTotalGamerScore = UFunction::FindFunction("Function Engine.UIDataProvider_PlayerAchievements.GetTotalGamerScore");
	}

	UUIDataProvider_PlayerAchievements_execGetTotalGamerScore_Params GetTotalGamerScore_Params;
	memset(&GetTotalGamerScore_Params, 0, sizeof(GetTotalGamerScore_Params));

	uFnGetTotalGamerScore->iNative = 0;
	uFnGetTotalGamerScore->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetTotalGamerScore, &GetTotalGamerScore_Params, nullptr);
	uFnGetTotalGamerScore->FunctionFlags |= 0x400;
	uFnGetTotalGamerScore->iNative = 20792;

	return GetTotalGamerScore_Params.ReturnValue;
};

// Function Engine.UIDataStore.GetDataStoreClient
// [0x00020003] (FUNC_Final | FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UDataStoreClient*        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class UDataStoreClient* UUIDataStore::GetDataStoreClient()
{
	static UFunction* uFnGetDataStoreClient = nullptr;

	if (!uFnGetDataStoreClient)
	{
		uFnGetDataStoreClient = UFunction::FindFunction("Function Engine.UIDataStore.GetDataStoreClient");
	}

	UUIDataStore_execGetDataStoreClient_Params GetDataStoreClient_Params;
	memset(&GetDataStoreClient_Params, 0, sizeof(GetDataStoreClient_Params));

	this->ProcessEvent(uFnGetDataStoreClient, &GetDataStoreClient_Params, nullptr);

	return GetDataStoreClient_Params.ReturnValue;
};

// Function Engine.UIDataStore.OnCommit
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[23578])
// Parameter Info:

void UUIDataStore::OnCommit()
{
	static UFunction* uFnOnCommit = nullptr;

	if (!uFnOnCommit)
	{
		uFnOnCommit = UFunction::FindFunction("Function Engine.UIDataStore.OnCommit");
	}

	UUIDataStore_execOnCommit_Params OnCommit_Params;
	memset(&OnCommit_Params, 0, sizeof(OnCommit_Params));

	uFnOnCommit->iNative = 0;
	uFnOnCommit->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnOnCommit, &OnCommit_Params, nullptr);
	uFnOnCommit->FunctionFlags |= 0x400;
	uFnOnCommit->iNative = 23578;
};

// Function Engine.UIDataStore.RefreshSubscribers
// [0x00024803] (FUNC_Final | FUNC_Defined | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FName                    PropertyTag                    (CPF_OptionalParm | CPF_Parm)
// uint32_t                       bInvalidateValues              (CPF_OptionalParm | CPF_Parm)
// class UUIDataProvider*         SourceProvider                 (CPF_OptionalParm | CPF_Parm)
// int32_t                        ArrayIndex                     (CPF_OptionalParm | CPF_Parm)

void UUIDataStore::eventRefreshSubscribers(const class FName& PropertyTag, bool bInvalidateValues, class UUIDataProvider* SourceProvider, int32_t ArrayIndex)
{
	static UFunction* uFnRefreshSubscribers = nullptr;

	if (!uFnRefreshSubscribers)
	{
		uFnRefreshSubscribers = UFunction::FindFunction("Function Engine.UIDataStore.RefreshSubscribers");
	}

	UUIDataStore_eventRefreshSubscribers_Params RefreshSubscribers_Params;
	memset(&RefreshSubscribers_Params, 0, sizeof(RefreshSubscribers_Params));
	memcpy_s(&RefreshSubscribers_Params.PropertyTag, sizeof(RefreshSubscribers_Params.PropertyTag), &PropertyTag, sizeof(PropertyTag));
	RefreshSubscribers_Params.bInvalidateValues = bInvalidateValues;
	RefreshSubscribers_Params.SourceProvider = SourceProvider;
	memcpy_s(&RefreshSubscribers_Params.ArrayIndex, sizeof(RefreshSubscribers_Params.ArrayIndex), &ArrayIndex, sizeof(ArrayIndex));

	this->ProcessEvent(uFnRefreshSubscribers, &RefreshSubscribers_Params, nullptr);
};

// Function Engine.UIDataStore.NotifyGameSessionEnded
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UUIDataStore::NotifyGameSessionEnded()
{
	static UFunction* uFnNotifyGameSessionEnded = nullptr;

	if (!uFnNotifyGameSessionEnded)
	{
		uFnNotifyGameSessionEnded = UFunction::FindFunction("Function Engine.UIDataStore.NotifyGameSessionEnded");
	}

	UUIDataStore_execNotifyGameSessionEnded_Params NotifyGameSessionEnded_Params;
	memset(&NotifyGameSessionEnded_Params, 0, sizeof(NotifyGameSessionEnded_Params));

	this->ProcessEvent(uFnNotifyGameSessionEnded, &NotifyGameSessionEnded_Params, nullptr);

	return NotifyGameSessionEnded_Params.ReturnValue;
};

// Function Engine.UIDataStore.SubscriberDetached
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UUIDataStoreSubscriber*  Subscriber                     (CPF_Parm)

void UUIDataStore::eventSubscriberDetached(class UUIDataStoreSubscriber* Subscriber)
{
	static UFunction* uFnSubscriberDetached = nullptr;

	if (!uFnSubscriberDetached)
	{
		uFnSubscriberDetached = UFunction::FindFunction("Function Engine.UIDataStore.SubscriberDetached");
	}

	UUIDataStore_eventSubscriberDetached_Params SubscriberDetached_Params;
	memset(&SubscriberDetached_Params, 0, sizeof(SubscriberDetached_Params));
	SubscriberDetached_Params.Subscriber = Subscriber;

	this->ProcessEvent(uFnSubscriberDetached, &SubscriberDetached_Params, nullptr);
};

// Function Engine.UIDataStore.SubscriberAttached
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UUIDataStoreSubscriber*  Subscriber                     (CPF_Parm)

void UUIDataStore::eventSubscriberAttached(class UUIDataStoreSubscriber* Subscriber)
{
	static UFunction* uFnSubscriberAttached = nullptr;

	if (!uFnSubscriberAttached)
	{
		uFnSubscriberAttached = UFunction::FindFunction("Function Engine.UIDataStore.SubscriberAttached");
	}

	UUIDataStore_eventSubscriberAttached_Params SubscriberAttached_Params;
	memset(&SubscriberAttached_Params, 0, sizeof(SubscriberAttached_Params));
	SubscriberAttached_Params.Subscriber = Subscriber;

	this->ProcessEvent(uFnSubscriberAttached, &SubscriberAttached_Params, nullptr);
};

// Function Engine.UIDataStore.Unregistered
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class ULocalPlayer*            PlayerOwner                    (CPF_Parm)

void UUIDataStore::eventUnregistered(class ULocalPlayer* PlayerOwner)
{
	static UFunction* uFnUnregistered = nullptr;

	if (!uFnUnregistered)
	{
		uFnUnregistered = UFunction::FindFunction("Function Engine.UIDataStore.Unregistered");
	}

	UUIDataStore_eventUnregistered_Params Unregistered_Params;
	memset(&Unregistered_Params, 0, sizeof(Unregistered_Params));
	Unregistered_Params.PlayerOwner = PlayerOwner;

	this->ProcessEvent(uFnUnregistered, &Unregistered_Params, nullptr);
};

// Function Engine.UIDataStore.Registered
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class ULocalPlayer*            PlayerOwner                    (CPF_Parm)

void UUIDataStore::eventRegistered(class ULocalPlayer* PlayerOwner)
{
	static UFunction* uFnRegistered = nullptr;

	if (!uFnRegistered)
	{
		uFnRegistered = UFunction::FindFunction("Function Engine.UIDataStore.Registered");
	}

	UUIDataStore_eventRegistered_Params Registered_Params;
	memset(&Registered_Params, 0, sizeof(Registered_Params));
	Registered_Params.PlayerOwner = PlayerOwner;

	this->ProcessEvent(uFnRegistered, &Registered_Params, nullptr);
};

// Function Engine.UIDataStore.OnDataStoreValueUpdated
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// class UUIDataStore*            SourceDataStore                (CPF_Parm)
// uint32_t                       bValuesInvalidated             (CPF_Parm)
// class FName                    PropertyTag                    (CPF_Parm)
// class UUIDataProvider*         SourceProvider                 (CPF_Parm)
// int32_t                        ArrayIndex                     (CPF_Parm)

void UUIDataStore::OnDataStoreValueUpdated(class UUIDataStore* SourceDataStore, bool bValuesInvalidated, const class FName& PropertyTag, class UUIDataProvider* SourceProvider, int32_t ArrayIndex)
{
	static UFunction* uFnOnDataStoreValueUpdated = nullptr;

	if (!uFnOnDataStoreValueUpdated)
	{
		uFnOnDataStoreValueUpdated = UFunction::FindFunction("Function Engine.UIDataStore.OnDataStoreValueUpdated");
	}

	UUIDataStore_execOnDataStoreValueUpdated_Params OnDataStoreValueUpdated_Params;
	memset(&OnDataStoreValueUpdated_Params, 0, sizeof(OnDataStoreValueUpdated_Params));
	OnDataStoreValueUpdated_Params.SourceDataStore = SourceDataStore;
	OnDataStoreValueUpdated_Params.bValuesInvalidated = bValuesInvalidated;
	memcpy_s(&OnDataStoreValueUpdated_Params.PropertyTag, sizeof(OnDataStoreValueUpdated_Params.PropertyTag), &PropertyTag, sizeof(PropertyTag));
	OnDataStoreValueUpdated_Params.SourceProvider = SourceProvider;
	memcpy_s(&OnDataStoreValueUpdated_Params.ArrayIndex, sizeof(OnDataStoreValueUpdated_Params.ArrayIndex), &ArrayIndex, sizeof(ArrayIndex));

	this->ProcessEvent(uFnOnDataStoreValueUpdated, &OnDataStoreValueUpdated_Params, nullptr);
};

// Function Engine.UIDataStore_DynamicResource.Unregistered
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class ULocalPlayer*            PlayerOwner                    (CPF_Parm)

void UUIDataStore_DynamicResource::eventUnregistered(class ULocalPlayer* PlayerOwner)
{
	static UFunction* uFnUnregistered = nullptr;

	if (!uFnUnregistered)
	{
		uFnUnregistered = UFunction::FindFunction("Function Engine.UIDataStore_DynamicResource.Unregistered");
	}

	UUIDataStore_DynamicResource_eventUnregistered_Params Unregistered_Params;
	memset(&Unregistered_Params, 0, sizeof(Unregistered_Params));
	Unregistered_Params.PlayerOwner = PlayerOwner;

	this->ProcessEvent(uFnUnregistered, &Unregistered_Params, nullptr);
};

// Function Engine.UIDataStore_DynamicResource.Registered
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class ULocalPlayer*            PlayerOwner                    (CPF_Parm)

void UUIDataStore_DynamicResource::eventRegistered(class ULocalPlayer* PlayerOwner)
{
	static UFunction* uFnRegistered = nullptr;

	if (!uFnRegistered)
	{
		uFnRegistered = UFunction::FindFunction("Function Engine.UIDataStore_DynamicResource.Registered");
	}

	UUIDataStore_DynamicResource_eventRegistered_Params Registered_Params;
	memset(&Registered_Params, 0, sizeof(Registered_Params));
	Registered_Params.PlayerOwner = PlayerOwner;

	this->ProcessEvent(uFnRegistered, &Registered_Params, nullptr);
};

// Function Engine.UIDataStore_DynamicResource.OnLoginChange
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[9776])
// Parameter Info:
// uint8_t                        LocalUserNum                   (CPF_Parm)

void UUIDataStore_DynamicResource::OnLoginChange(uint8_t LocalUserNum)
{
	static UFunction* uFnOnLoginChange = nullptr;

	if (!uFnOnLoginChange)
	{
		uFnOnLoginChange = UFunction::FindFunction("Function Engine.UIDataStore_DynamicResource.OnLoginChange");
	}

	UUIDataStore_DynamicResource_execOnLoginChange_Params OnLoginChange_Params;
	memset(&OnLoginChange_Params, 0, sizeof(OnLoginChange_Params));
	memcpy_s(&OnLoginChange_Params.LocalUserNum, sizeof(OnLoginChange_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));

	uFnOnLoginChange->iNative = 0;
	uFnOnLoginChange->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnOnLoginChange, &OnLoginChange_Params, nullptr);
	uFnOnLoginChange->FunctionFlags |= 0x400;
	uFnOnLoginChange->iNative = 9776;
};

// Function Engine.UIDataStore_DynamicResource.FindProviderIndexByFieldValue
// [0x00420401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20116])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    ProviderTag                    (CPF_Parm)
// class FName                    SearchField                    (CPF_Parm)
// struct FUIProviderScriptFieldValue ValueToSearchFor               (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

int32_t UUIDataStore_DynamicResource::FindProviderIndexByFieldValue(const class FName& ProviderTag, const class FName& SearchField, struct FUIProviderScriptFieldValue& ValueToSearchFor)
{
	static UFunction* uFnFindProviderIndexByFieldValue = nullptr;

	if (!uFnFindProviderIndexByFieldValue)
	{
		uFnFindProviderIndexByFieldValue = UFunction::FindFunction("Function Engine.UIDataStore_DynamicResource.FindProviderIndexByFieldValue");
	}

	UUIDataStore_DynamicResource_execFindProviderIndexByFieldValue_Params FindProviderIndexByFieldValue_Params;
	memset(&FindProviderIndexByFieldValue_Params, 0, sizeof(FindProviderIndexByFieldValue_Params));
	memcpy_s(&FindProviderIndexByFieldValue_Params.ProviderTag, sizeof(FindProviderIndexByFieldValue_Params.ProviderTag), &ProviderTag, sizeof(ProviderTag));
	memcpy_s(&FindProviderIndexByFieldValue_Params.SearchField, sizeof(FindProviderIndexByFieldValue_Params.SearchField), &SearchField, sizeof(SearchField));
	memcpy_s(&FindProviderIndexByFieldValue_Params.ValueToSearchFor, sizeof(FindProviderIndexByFieldValue_Params.ValueToSearchFor), &ValueToSearchFor, sizeof(ValueToSearchFor));

	uFnFindProviderIndexByFieldValue->iNative = 0;
	uFnFindProviderIndexByFieldValue->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnFindProviderIndexByFieldValue, &FindProviderIndexByFieldValue_Params, nullptr);
	uFnFindProviderIndexByFieldValue->FunctionFlags |= 0x400;
	uFnFindProviderIndexByFieldValue->iNative = 20116;

	memcpy_s(&ValueToSearchFor, sizeof(ValueToSearchFor), &FindProviderIndexByFieldValue_Params.ValueToSearchFor, sizeof(FindProviderIndexByFieldValue_Params.ValueToSearchFor));

	return FindProviderIndexByFieldValue_Params.ReturnValue;
};

// Function Engine.UIDataStore_DynamicResource.GetProviderFieldValue
// [0x00420401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20722])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    ProviderTag                    (CPF_Parm)
// class FName                    SearchField                    (CPF_Parm)
// int32_t                        ProviderIndex                  (CPF_Parm)
// struct FUIProviderScriptFieldValue out_FieldValue                 (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

bool UUIDataStore_DynamicResource::GetProviderFieldValue(const class FName& ProviderTag, const class FName& SearchField, int32_t ProviderIndex, struct FUIProviderScriptFieldValue& out_FieldValue)
{
	static UFunction* uFnGetProviderFieldValue = nullptr;

	if (!uFnGetProviderFieldValue)
	{
		uFnGetProviderFieldValue = UFunction::FindFunction("Function Engine.UIDataStore_DynamicResource.GetProviderFieldValue");
	}

	UUIDataStore_DynamicResource_execGetProviderFieldValue_Params GetProviderFieldValue_Params;
	memset(&GetProviderFieldValue_Params, 0, sizeof(GetProviderFieldValue_Params));
	memcpy_s(&GetProviderFieldValue_Params.ProviderTag, sizeof(GetProviderFieldValue_Params.ProviderTag), &ProviderTag, sizeof(ProviderTag));
	memcpy_s(&GetProviderFieldValue_Params.SearchField, sizeof(GetProviderFieldValue_Params.SearchField), &SearchField, sizeof(SearchField));
	memcpy_s(&GetProviderFieldValue_Params.ProviderIndex, sizeof(GetProviderFieldValue_Params.ProviderIndex), &ProviderIndex, sizeof(ProviderIndex));
	memcpy_s(&GetProviderFieldValue_Params.out_FieldValue, sizeof(GetProviderFieldValue_Params.out_FieldValue), &out_FieldValue, sizeof(out_FieldValue));

	uFnGetProviderFieldValue->iNative = 0;
	uFnGetProviderFieldValue->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetProviderFieldValue, &GetProviderFieldValue_Params, nullptr);
	uFnGetProviderFieldValue->FunctionFlags |= 0x400;
	uFnGetProviderFieldValue->iNative = 20722;

	memcpy_s(&out_FieldValue, sizeof(out_FieldValue), &GetProviderFieldValue_Params.out_FieldValue, sizeof(GetProviderFieldValue_Params.out_FieldValue));

	return GetProviderFieldValue_Params.ReturnValue;
};

// Function Engine.UIDataStore_DynamicResource.GetResourceProviderFields
// [0x00420401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20735])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    ProviderTag                    (CPF_Parm)
// class TArray<class FName>      ProviderFieldTags              (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

bool UUIDataStore_DynamicResource::GetResourceProviderFields(const class FName& ProviderTag, class TArray<class FName>& ProviderFieldTags)
{
	static UFunction* uFnGetResourceProviderFields = nullptr;

	if (!uFnGetResourceProviderFields)
	{
		uFnGetResourceProviderFields = UFunction::FindFunction("Function Engine.UIDataStore_DynamicResource.GetResourceProviderFields");
	}

	UUIDataStore_DynamicResource_execGetResourceProviderFields_Params GetResourceProviderFields_Params;
	memset(&GetResourceProviderFields_Params, 0, sizeof(GetResourceProviderFields_Params));
	memcpy_s(&GetResourceProviderFields_Params.ProviderTag, sizeof(GetResourceProviderFields_Params.ProviderTag), &ProviderTag, sizeof(ProviderTag));
	memcpy_s(&GetResourceProviderFields_Params.ProviderFieldTags, sizeof(GetResourceProviderFields_Params.ProviderFieldTags), &ProviderFieldTags, sizeof(ProviderFieldTags));

	uFnGetResourceProviderFields->iNative = 0;
	uFnGetResourceProviderFields->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetResourceProviderFields, &GetResourceProviderFields_Params, nullptr);
	uFnGetResourceProviderFields->FunctionFlags |= 0x400;
	uFnGetResourceProviderFields->iNative = 20735;

	memcpy_s(&ProviderFieldTags, sizeof(ProviderFieldTags), &GetResourceProviderFields_Params.ProviderFieldTags, sizeof(GetResourceProviderFields_Params.ProviderFieldTags));

	return GetResourceProviderFields_Params.ReturnValue;
};

// Function Engine.UIDataStore_DynamicResource.GetResourceProviders
// [0x00420401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20736])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    ProviderTag                    (CPF_Parm)
// class TArray<class UUIResourceCombinationProvider*> out_Providers                  (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

bool UUIDataStore_DynamicResource::GetResourceProviders(const class FName& ProviderTag, class TArray<class UUIResourceCombinationProvider*>& out_Providers)
{
	static UFunction* uFnGetResourceProviders = nullptr;

	if (!uFnGetResourceProviders)
	{
		uFnGetResourceProviders = UFunction::FindFunction("Function Engine.UIDataStore_DynamicResource.GetResourceProviders");
	}

	UUIDataStore_DynamicResource_execGetResourceProviders_Params GetResourceProviders_Params;
	memset(&GetResourceProviders_Params, 0, sizeof(GetResourceProviders_Params));
	memcpy_s(&GetResourceProviders_Params.ProviderTag, sizeof(GetResourceProviders_Params.ProviderTag), &ProviderTag, sizeof(ProviderTag));
	memcpy_s(&GetResourceProviders_Params.out_Providers, sizeof(GetResourceProviders_Params.out_Providers), &out_Providers, sizeof(out_Providers));

	uFnGetResourceProviders->iNative = 0;
	uFnGetResourceProviders->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetResourceProviders, &GetResourceProviders_Params, nullptr);
	uFnGetResourceProviders->FunctionFlags |= 0x400;
	uFnGetResourceProviders->iNative = 20736;

	memcpy_s(&out_Providers, sizeof(out_Providers), &GetResourceProviders_Params.out_Providers, sizeof(GetResourceProviders_Params.out_Providers));

	return GetResourceProviders_Params.ReturnValue;
};

// Function Engine.UIDataStore_DynamicResource.GetProviderCount
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20720])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    ProviderTag                    (CPF_Parm)

int32_t UUIDataStore_DynamicResource::GetProviderCount(const class FName& ProviderTag)
{
	static UFunction* uFnGetProviderCount = nullptr;

	if (!uFnGetProviderCount)
	{
		uFnGetProviderCount = UFunction::FindFunction("Function Engine.UIDataStore_DynamicResource.GetProviderCount");
	}

	UUIDataStore_DynamicResource_execGetProviderCount_Params GetProviderCount_Params;
	memset(&GetProviderCount_Params, 0, sizeof(GetProviderCount_Params));
	memcpy_s(&GetProviderCount_Params.ProviderTag, sizeof(GetProviderCount_Params.ProviderTag), &ProviderTag, sizeof(ProviderTag));

	uFnGetProviderCount->iNative = 0;
	uFnGetProviderCount->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetProviderCount, &GetProviderCount_Params, nullptr);
	uFnGetProviderCount->FunctionFlags |= 0x400;
	uFnGetProviderCount->iNative = 20720;

	return GetProviderCount_Params.ReturnValue;
};

// Function Engine.UIDataStore_DynamicResource.GenerateProviderAccessTag
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20470])
// Parameter Info:
// class FName                    ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        ProviderIndex                  (CPF_Parm)
// int32_t                        InstanceIndex                  (CPF_Parm)

class FName UUIDataStore_DynamicResource::GenerateProviderAccessTag(int32_t ProviderIndex, int32_t InstanceIndex)
{
	static UFunction* uFnGenerateProviderAccessTag = nullptr;

	if (!uFnGenerateProviderAccessTag)
	{
		uFnGenerateProviderAccessTag = UFunction::FindFunction("Function Engine.UIDataStore_DynamicResource.GenerateProviderAccessTag");
	}

	UUIDataStore_DynamicResource_execGenerateProviderAccessTag_Params GenerateProviderAccessTag_Params;
	memset(&GenerateProviderAccessTag_Params, 0, sizeof(GenerateProviderAccessTag_Params));
	memcpy_s(&GenerateProviderAccessTag_Params.ProviderIndex, sizeof(GenerateProviderAccessTag_Params.ProviderIndex), &ProviderIndex, sizeof(ProviderIndex));
	memcpy_s(&GenerateProviderAccessTag_Params.InstanceIndex, sizeof(GenerateProviderAccessTag_Params.InstanceIndex), &InstanceIndex, sizeof(InstanceIndex));

	uFnGenerateProviderAccessTag->iNative = 0;
	uFnGenerateProviderAccessTag->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGenerateProviderAccessTag, &GenerateProviderAccessTag_Params, nullptr);
	uFnGenerateProviderAccessTag->FunctionFlags |= 0x400;
	uFnGenerateProviderAccessTag->iNative = 20470;

	return GenerateProviderAccessTag_Params.ReturnValue;
};

// Function Engine.UIDataStore_DynamicResource.FindProviderTypeIndex
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20117])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    ProviderTag                    (CPF_Parm)

int32_t UUIDataStore_DynamicResource::FindProviderTypeIndex(const class FName& ProviderTag)
{
	static UFunction* uFnFindProviderTypeIndex = nullptr;

	if (!uFnFindProviderTypeIndex)
	{
		uFnFindProviderTypeIndex = UFunction::FindFunction("Function Engine.UIDataStore_DynamicResource.FindProviderTypeIndex");
	}

	UUIDataStore_DynamicResource_execFindProviderTypeIndex_Params FindProviderTypeIndex_Params;
	memset(&FindProviderTypeIndex_Params, 0, sizeof(FindProviderTypeIndex_Params));
	memcpy_s(&FindProviderTypeIndex_Params.ProviderTag, sizeof(FindProviderTypeIndex_Params.ProviderTag), &ProviderTag, sizeof(ProviderTag));

	uFnFindProviderTypeIndex->iNative = 0;
	uFnFindProviderTypeIndex->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnFindProviderTypeIndex, &FindProviderTypeIndex_Params, nullptr);
	uFnFindProviderTypeIndex->FunctionFlags |= 0x400;
	uFnFindProviderTypeIndex->iNative = 20117;

	return FindProviderTypeIndex_Params.ReturnValue;
};

// Function Engine.UIDataStore_GameResource.FindProviderIndexByFieldValue
// [0x00420401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20116])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    ProviderTag                    (CPF_Parm)
// class FName                    SearchField                    (CPF_Parm)
// struct FUIProviderScriptFieldValue ValueToSearchFor               (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

int32_t UUIDataStore_GameResource::FindProviderIndexByFieldValue(const class FName& ProviderTag, const class FName& SearchField, struct FUIProviderScriptFieldValue& ValueToSearchFor)
{
	static UFunction* uFnFindProviderIndexByFieldValue = nullptr;

	if (!uFnFindProviderIndexByFieldValue)
	{
		uFnFindProviderIndexByFieldValue = UFunction::FindFunction("Function Engine.UIDataStore_GameResource.FindProviderIndexByFieldValue");
	}

	UUIDataStore_GameResource_execFindProviderIndexByFieldValue_Params FindProviderIndexByFieldValue_Params;
	memset(&FindProviderIndexByFieldValue_Params, 0, sizeof(FindProviderIndexByFieldValue_Params));
	memcpy_s(&FindProviderIndexByFieldValue_Params.ProviderTag, sizeof(FindProviderIndexByFieldValue_Params.ProviderTag), &ProviderTag, sizeof(ProviderTag));
	memcpy_s(&FindProviderIndexByFieldValue_Params.SearchField, sizeof(FindProviderIndexByFieldValue_Params.SearchField), &SearchField, sizeof(SearchField));
	memcpy_s(&FindProviderIndexByFieldValue_Params.ValueToSearchFor, sizeof(FindProviderIndexByFieldValue_Params.ValueToSearchFor), &ValueToSearchFor, sizeof(ValueToSearchFor));

	uFnFindProviderIndexByFieldValue->iNative = 0;
	uFnFindProviderIndexByFieldValue->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnFindProviderIndexByFieldValue, &FindProviderIndexByFieldValue_Params, nullptr);
	uFnFindProviderIndexByFieldValue->FunctionFlags |= 0x400;
	uFnFindProviderIndexByFieldValue->iNative = 20116;

	memcpy_s(&ValueToSearchFor, sizeof(ValueToSearchFor), &FindProviderIndexByFieldValue_Params.ValueToSearchFor, sizeof(FindProviderIndexByFieldValue_Params.ValueToSearchFor));

	return FindProviderIndexByFieldValue_Params.ReturnValue;
};

// Function Engine.UIDataStore_GameResource.GetProviderFieldValue
// [0x00420401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20722])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    ProviderTag                    (CPF_Parm)
// class FName                    SearchField                    (CPF_Parm)
// int32_t                        ProviderIndex                  (CPF_Parm)
// struct FUIProviderScriptFieldValue out_FieldValue                 (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

bool UUIDataStore_GameResource::GetProviderFieldValue(const class FName& ProviderTag, const class FName& SearchField, int32_t ProviderIndex, struct FUIProviderScriptFieldValue& out_FieldValue)
{
	static UFunction* uFnGetProviderFieldValue = nullptr;

	if (!uFnGetProviderFieldValue)
	{
		uFnGetProviderFieldValue = UFunction::FindFunction("Function Engine.UIDataStore_GameResource.GetProviderFieldValue");
	}

	UUIDataStore_GameResource_execGetProviderFieldValue_Params GetProviderFieldValue_Params;
	memset(&GetProviderFieldValue_Params, 0, sizeof(GetProviderFieldValue_Params));
	memcpy_s(&GetProviderFieldValue_Params.ProviderTag, sizeof(GetProviderFieldValue_Params.ProviderTag), &ProviderTag, sizeof(ProviderTag));
	memcpy_s(&GetProviderFieldValue_Params.SearchField, sizeof(GetProviderFieldValue_Params.SearchField), &SearchField, sizeof(SearchField));
	memcpy_s(&GetProviderFieldValue_Params.ProviderIndex, sizeof(GetProviderFieldValue_Params.ProviderIndex), &ProviderIndex, sizeof(ProviderIndex));
	memcpy_s(&GetProviderFieldValue_Params.out_FieldValue, sizeof(GetProviderFieldValue_Params.out_FieldValue), &out_FieldValue, sizeof(out_FieldValue));

	uFnGetProviderFieldValue->iNative = 0;
	uFnGetProviderFieldValue->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetProviderFieldValue, &GetProviderFieldValue_Params, nullptr);
	uFnGetProviderFieldValue->FunctionFlags |= 0x400;
	uFnGetProviderFieldValue->iNative = 20722;

	memcpy_s(&out_FieldValue, sizeof(out_FieldValue), &GetProviderFieldValue_Params.out_FieldValue, sizeof(GetProviderFieldValue_Params.out_FieldValue));

	return GetProviderFieldValue_Params.ReturnValue;
};

// Function Engine.UIDataStore_GameResource.GetResourceProviderFields
// [0x00420401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20735])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    ProviderTag                    (CPF_Parm)
// class TArray<class FName>      ProviderFieldTags              (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

bool UUIDataStore_GameResource::GetResourceProviderFields(const class FName& ProviderTag, class TArray<class FName>& ProviderFieldTags)
{
	static UFunction* uFnGetResourceProviderFields = nullptr;

	if (!uFnGetResourceProviderFields)
	{
		uFnGetResourceProviderFields = UFunction::FindFunction("Function Engine.UIDataStore_GameResource.GetResourceProviderFields");
	}

	UUIDataStore_GameResource_execGetResourceProviderFields_Params GetResourceProviderFields_Params;
	memset(&GetResourceProviderFields_Params, 0, sizeof(GetResourceProviderFields_Params));
	memcpy_s(&GetResourceProviderFields_Params.ProviderTag, sizeof(GetResourceProviderFields_Params.ProviderTag), &ProviderTag, sizeof(ProviderTag));
	memcpy_s(&GetResourceProviderFields_Params.ProviderFieldTags, sizeof(GetResourceProviderFields_Params.ProviderFieldTags), &ProviderFieldTags, sizeof(ProviderFieldTags));

	uFnGetResourceProviderFields->iNative = 0;
	uFnGetResourceProviderFields->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetResourceProviderFields, &GetResourceProviderFields_Params, nullptr);
	uFnGetResourceProviderFields->FunctionFlags |= 0x400;
	uFnGetResourceProviderFields->iNative = 20735;

	memcpy_s(&ProviderFieldTags, sizeof(ProviderFieldTags), &GetResourceProviderFields_Params.ProviderFieldTags, sizeof(GetResourceProviderFields_Params.ProviderFieldTags));

	return GetResourceProviderFields_Params.ReturnValue;
};

// Function Engine.UIDataStore_GameResource.GetResourceProviders
// [0x00420401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20736])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    ProviderTag                    (CPF_Parm)
// class TArray<class UUIResourceDataProvider*> out_Providers                  (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

bool UUIDataStore_GameResource::GetResourceProviders(const class FName& ProviderTag, class TArray<class UUIResourceDataProvider*>& out_Providers)
{
	static UFunction* uFnGetResourceProviders = nullptr;

	if (!uFnGetResourceProviders)
	{
		uFnGetResourceProviders = UFunction::FindFunction("Function Engine.UIDataStore_GameResource.GetResourceProviders");
	}

	UUIDataStore_GameResource_execGetResourceProviders_Params GetResourceProviders_Params;
	memset(&GetResourceProviders_Params, 0, sizeof(GetResourceProviders_Params));
	memcpy_s(&GetResourceProviders_Params.ProviderTag, sizeof(GetResourceProviders_Params.ProviderTag), &ProviderTag, sizeof(ProviderTag));
	memcpy_s(&GetResourceProviders_Params.out_Providers, sizeof(GetResourceProviders_Params.out_Providers), &out_Providers, sizeof(out_Providers));

	uFnGetResourceProviders->iNative = 0;
	uFnGetResourceProviders->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetResourceProviders, &GetResourceProviders_Params, nullptr);
	uFnGetResourceProviders->FunctionFlags |= 0x400;
	uFnGetResourceProviders->iNative = 20736;

	memcpy_s(&out_Providers, sizeof(out_Providers), &GetResourceProviders_Params.out_Providers, sizeof(GetResourceProviders_Params.out_Providers));

	return GetResourceProviders_Params.ReturnValue;
};

// Function Engine.UIDataStore_GameResource.GetProviderCount
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20720])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    ProviderTag                    (CPF_Parm)

int32_t UUIDataStore_GameResource::GetProviderCount(const class FName& ProviderTag)
{
	static UFunction* uFnGetProviderCount = nullptr;

	if (!uFnGetProviderCount)
	{
		uFnGetProviderCount = UFunction::FindFunction("Function Engine.UIDataStore_GameResource.GetProviderCount");
	}

	UUIDataStore_GameResource_execGetProviderCount_Params GetProviderCount_Params;
	memset(&GetProviderCount_Params, 0, sizeof(GetProviderCount_Params));
	memcpy_s(&GetProviderCount_Params.ProviderTag, sizeof(GetProviderCount_Params.ProviderTag), &ProviderTag, sizeof(ProviderTag));

	uFnGetProviderCount->iNative = 0;
	uFnGetProviderCount->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetProviderCount, &GetProviderCount_Params, nullptr);
	uFnGetProviderCount->FunctionFlags |= 0x400;
	uFnGetProviderCount->iNative = 20720;

	return GetProviderCount_Params.ReturnValue;
};

// Function Engine.UIDataStore_GameResource.GenerateProviderAccessTag
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20470])
// Parameter Info:
// class FName                    ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        ProviderIndex                  (CPF_Parm)
// int32_t                        InstanceIndex                  (CPF_Parm)

class FName UUIDataStore_GameResource::GenerateProviderAccessTag(int32_t ProviderIndex, int32_t InstanceIndex)
{
	static UFunction* uFnGenerateProviderAccessTag = nullptr;

	if (!uFnGenerateProviderAccessTag)
	{
		uFnGenerateProviderAccessTag = UFunction::FindFunction("Function Engine.UIDataStore_GameResource.GenerateProviderAccessTag");
	}

	UUIDataStore_GameResource_execGenerateProviderAccessTag_Params GenerateProviderAccessTag_Params;
	memset(&GenerateProviderAccessTag_Params, 0, sizeof(GenerateProviderAccessTag_Params));
	memcpy_s(&GenerateProviderAccessTag_Params.ProviderIndex, sizeof(GenerateProviderAccessTag_Params.ProviderIndex), &ProviderIndex, sizeof(ProviderIndex));
	memcpy_s(&GenerateProviderAccessTag_Params.InstanceIndex, sizeof(GenerateProviderAccessTag_Params.InstanceIndex), &InstanceIndex, sizeof(InstanceIndex));

	uFnGenerateProviderAccessTag->iNative = 0;
	uFnGenerateProviderAccessTag->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGenerateProviderAccessTag, &GenerateProviderAccessTag_Params, nullptr);
	uFnGenerateProviderAccessTag->FunctionFlags |= 0x400;
	uFnGenerateProviderAccessTag->iNative = 20470;

	return GenerateProviderAccessTag_Params.ReturnValue;
};

// Function Engine.UIDataStore_GameResource.FindProviderTypeIndex
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20117])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    ProviderTag                    (CPF_Parm)

int32_t UUIDataStore_GameResource::FindProviderTypeIndex(const class FName& ProviderTag)
{
	static UFunction* uFnFindProviderTypeIndex = nullptr;

	if (!uFnFindProviderTypeIndex)
	{
		uFnFindProviderTypeIndex = UFunction::FindFunction("Function Engine.UIDataStore_GameResource.FindProviderTypeIndex");
	}

	UUIDataStore_GameResource_execFindProviderTypeIndex_Params FindProviderTypeIndex_Params;
	memset(&FindProviderTypeIndex_Params, 0, sizeof(FindProviderTypeIndex_Params));
	memcpy_s(&FindProviderTypeIndex_Params.ProviderTag, sizeof(FindProviderTypeIndex_Params.ProviderTag), &ProviderTag, sizeof(ProviderTag));

	uFnFindProviderTypeIndex->iNative = 0;
	uFnFindProviderTypeIndex->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnFindProviderTypeIndex, &FindProviderTypeIndex_Params, nullptr);
	uFnFindProviderTypeIndex->FunctionFlags |= 0x400;
	uFnFindProviderTypeIndex->iNative = 20117;

	return FindProviderTypeIndex_Params.ReturnValue;
};

// Function Engine.UIDataStore_MenuItems.GetSet
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20747])
// Parameter Info:
// class FName                    SetName                        (CPF_Parm)
// class TArray<class UUIDataProvider_MenuItem*> OutProviders                   (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void UUIDataStore_MenuItems::GetSet(const class FName& SetName, class TArray<class UUIDataProvider_MenuItem*>& OutProviders)
{
	static UFunction* uFnGetSet = nullptr;

	if (!uFnGetSet)
	{
		uFnGetSet = UFunction::FindFunction("Function Engine.UIDataStore_MenuItems.GetSet");
	}

	UUIDataStore_MenuItems_execGetSet_Params GetSet_Params;
	memset(&GetSet_Params, 0, sizeof(GetSet_Params));
	memcpy_s(&GetSet_Params.SetName, sizeof(GetSet_Params.SetName), &SetName, sizeof(SetName));
	memcpy_s(&GetSet_Params.OutProviders, sizeof(GetSet_Params.OutProviders), &OutProviders, sizeof(OutProviders));

	uFnGetSet->iNative = 0;
	uFnGetSet->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetSet, &GetSet_Params, nullptr);
	uFnGetSet->FunctionFlags |= 0x400;
	uFnGetSet->iNative = 20747;

	memcpy_s(&OutProviders, sizeof(OutProviders), &GetSet_Params.OutProviders, sizeof(GetSet_Params.OutProviders));
};

// Function Engine.UIDataStore_MenuItems.AppendToSet
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[15626])
// Parameter Info:
// class FName                    SetName                        (CPF_Parm)
// int32_t                        NumOptions                     (CPF_Parm)

void UUIDataStore_MenuItems::AppendToSet(const class FName& SetName, int32_t NumOptions)
{
	static UFunction* uFnAppendToSet = nullptr;

	if (!uFnAppendToSet)
	{
		uFnAppendToSet = UFunction::FindFunction("Function Engine.UIDataStore_MenuItems.AppendToSet");
	}

	UUIDataStore_MenuItems_execAppendToSet_Params AppendToSet_Params;
	memset(&AppendToSet_Params, 0, sizeof(AppendToSet_Params));
	memcpy_s(&AppendToSet_Params.SetName, sizeof(AppendToSet_Params.SetName), &SetName, sizeof(SetName));
	memcpy_s(&AppendToSet_Params.NumOptions, sizeof(AppendToSet_Params.NumOptions), &NumOptions, sizeof(NumOptions));

	uFnAppendToSet->iNative = 0;
	uFnAppendToSet->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnAppendToSet, &AppendToSet_Params, nullptr);
	uFnAppendToSet->FunctionFlags |= 0x400;
	uFnAppendToSet->iNative = 15626;
};

// Function Engine.UIDataStore_MenuItems.ClearSet
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[18169])
// Parameter Info:
// class FName                    SetName                        (CPF_Parm)

void UUIDataStore_MenuItems::ClearSet(const class FName& SetName)
{
	static UFunction* uFnClearSet = nullptr;

	if (!uFnClearSet)
	{
		uFnClearSet = UFunction::FindFunction("Function Engine.UIDataStore_MenuItems.ClearSet");
	}

	UUIDataStore_MenuItems_execClearSet_Params ClearSet_Params;
	memset(&ClearSet_Params, 0, sizeof(ClearSet_Params));
	memcpy_s(&ClearSet_Params.SetName, sizeof(ClearSet_Params.SetName), &SetName, sizeof(SetName));

	uFnClearSet->iNative = 0;
	uFnClearSet->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnClearSet, &ClearSet_Params, nullptr);
	uFnClearSet->FunctionFlags |= 0x400;
	uFnClearSet->iNative = 18169;
};

// Function Engine.UIDataStore_GameState.NotifyGameSessionEnded
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UUIDataStore_GameState::NotifyGameSessionEnded()
{
	static UFunction* uFnNotifyGameSessionEnded = nullptr;

	if (!uFnNotifyGameSessionEnded)
	{
		uFnNotifyGameSessionEnded = UFunction::FindFunction("Function Engine.UIDataStore_GameState.NotifyGameSessionEnded");
	}

	UUIDataStore_GameState_execNotifyGameSessionEnded_Params NotifyGameSessionEnded_Params;
	memset(&NotifyGameSessionEnded_Params, 0, sizeof(NotifyGameSessionEnded_Params));

	this->ProcessEvent(uFnNotifyGameSessionEnded, &NotifyGameSessionEnded_Params, nullptr);

	return NotifyGameSessionEnded_Params.ReturnValue;
};

// Function Engine.UIDataStore_GameState.OnRefreshDataFieldValue
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:

void UUIDataStore_GameState::OnRefreshDataFieldValue()
{
	static UFunction* uFnOnRefreshDataFieldValue = nullptr;

	if (!uFnOnRefreshDataFieldValue)
	{
		uFnOnRefreshDataFieldValue = UFunction::FindFunction("Function Engine.UIDataStore_GameState.OnRefreshDataFieldValue");
	}

	UUIDataStore_GameState_execOnRefreshDataFieldValue_Params OnRefreshDataFieldValue_Params;
	memset(&OnRefreshDataFieldValue_Params, 0, sizeof(OnRefreshDataFieldValue_Params));

	this->ProcessEvent(uFnOnRefreshDataFieldValue, &OnRefreshDataFieldValue_Params, nullptr);
};

// Function Engine.UIDataStore_Registry.GetDataProvider
// [0x00020003] (FUNC_Final | FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UUIDynamicFieldProvider* ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class UUIDynamicFieldProvider* UUIDataStore_Registry::GetDataProvider()
{
	static UFunction* uFnGetDataProvider = nullptr;

	if (!uFnGetDataProvider)
	{
		uFnGetDataProvider = UFunction::FindFunction("Function Engine.UIDataStore_Registry.GetDataProvider");
	}

	UUIDataStore_Registry_execGetDataProvider_Params GetDataProvider_Params;
	memset(&GetDataProvider_Params, 0, sizeof(GetDataProvider_Params));

	this->ProcessEvent(uFnGetDataProvider, &GetDataProvider_Params, nullptr);

	return GetDataProvider_Params.ReturnValue;
};

// Function Engine.UIDataStore_OnlinePlayerData.GetCachedPlayerStorage
// [0x00022802] (FUNC_Defined | FUNC_Event | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UOnlinePlayerStorage*    ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        ControllerId                   (CPF_Parm)

class UOnlinePlayerStorage* UUIDataStore_OnlinePlayerData::eventGetCachedPlayerStorage(int32_t ControllerId)
{
	static UFunction* uFnGetCachedPlayerStorage = nullptr;

	if (!uFnGetCachedPlayerStorage)
	{
		uFnGetCachedPlayerStorage = UFunction::FindFunction("Function Engine.UIDataStore_OnlinePlayerData.GetCachedPlayerStorage");
	}

	UUIDataStore_OnlinePlayerData_eventGetCachedPlayerStorage_Params GetCachedPlayerStorage_Params;
	memset(&GetCachedPlayerStorage_Params, 0, sizeof(GetCachedPlayerStorage_Params));
	memcpy_s(&GetCachedPlayerStorage_Params.ControllerId, sizeof(GetCachedPlayerStorage_Params.ControllerId), &ControllerId, sizeof(ControllerId));

	UUIDataStore_OnlinePlayerData::StaticClass()->ProcessEvent(uFnGetCachedPlayerStorage, &GetCachedPlayerStorage_Params, nullptr);

	return GetCachedPlayerStorage_Params.ReturnValue;
};

// Function Engine.UIDataStore_OnlinePlayerData.GetCachedPlayerProfile
// [0x00022802] (FUNC_Defined | FUNC_Event | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UOnlineProfileSettings*  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        ControllerId                   (CPF_Parm)

class UOnlineProfileSettings* UUIDataStore_OnlinePlayerData::eventGetCachedPlayerProfile(int32_t ControllerId)
{
	static UFunction* uFnGetCachedPlayerProfile = nullptr;

	if (!uFnGetCachedPlayerProfile)
	{
		uFnGetCachedPlayerProfile = UFunction::FindFunction("Function Engine.UIDataStore_OnlinePlayerData.GetCachedPlayerProfile");
	}

	UUIDataStore_OnlinePlayerData_eventGetCachedPlayerProfile_Params GetCachedPlayerProfile_Params;
	memset(&GetCachedPlayerProfile_Params, 0, sizeof(GetCachedPlayerProfile_Params));
	memcpy_s(&GetCachedPlayerProfile_Params.ControllerId, sizeof(GetCachedPlayerProfile_Params.ControllerId), &ControllerId, sizeof(ControllerId));

	UUIDataStore_OnlinePlayerData::StaticClass()->ProcessEvent(uFnGetCachedPlayerProfile, &GetCachedPlayerProfile_Params, nullptr);

	return GetCachedPlayerProfile_Params.ReturnValue;
};

// Function Engine.UIDataStore_OnlinePlayerData.SaveProfileData
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UUIDataStore_OnlinePlayerData::eventSaveProfileData()
{
	static UFunction* uFnSaveProfileData = nullptr;

	if (!uFnSaveProfileData)
	{
		uFnSaveProfileData = UFunction::FindFunction("Function Engine.UIDataStore_OnlinePlayerData.SaveProfileData");
	}

	UUIDataStore_OnlinePlayerData_eventSaveProfileData_Params SaveProfileData_Params;
	memset(&SaveProfileData_Params, 0, sizeof(SaveProfileData_Params));

	this->ProcessEvent(uFnSaveProfileData, &SaveProfileData_Params, nullptr);

	return SaveProfileData_Params.ReturnValue;
};

// Function Engine.UIDataStore_OnlinePlayerData.OnDownloadableContentQueryDone
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bWasSuccessful                 (CPF_Parm)

void UUIDataStore_OnlinePlayerData::OnDownloadableContentQueryDone(bool bWasSuccessful)
{
	static UFunction* uFnOnDownloadableContentQueryDone = nullptr;

	if (!uFnOnDownloadableContentQueryDone)
	{
		uFnOnDownloadableContentQueryDone = UFunction::FindFunction("Function Engine.UIDataStore_OnlinePlayerData.OnDownloadableContentQueryDone");
	}

	UUIDataStore_OnlinePlayerData_execOnDownloadableContentQueryDone_Params OnDownloadableContentQueryDone_Params;
	memset(&OnDownloadableContentQueryDone_Params, 0, sizeof(OnDownloadableContentQueryDone_Params));
	OnDownloadableContentQueryDone_Params.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent(uFnOnDownloadableContentQueryDone, &OnDownloadableContentQueryDone_Params, nullptr);
};

// Function Engine.UIDataStore_OnlinePlayerData.ClearDelegates
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UUIDataStore_OnlinePlayerData::ClearDelegates()
{
	static UFunction* uFnClearDelegates = nullptr;

	if (!uFnClearDelegates)
	{
		uFnClearDelegates = UFunction::FindFunction("Function Engine.UIDataStore_OnlinePlayerData.ClearDelegates");
	}

	UUIDataStore_OnlinePlayerData_execClearDelegates_Params ClearDelegates_Params;
	memset(&ClearDelegates_Params, 0, sizeof(ClearDelegates_Params));

	this->ProcessEvent(uFnClearDelegates, &ClearDelegates_Params, nullptr);
};

// Function Engine.UIDataStore_OnlinePlayerData.RegisterDelegates
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UUIDataStore_OnlinePlayerData::RegisterDelegates()
{
	static UFunction* uFnRegisterDelegates = nullptr;

	if (!uFnRegisterDelegates)
	{
		uFnRegisterDelegates = UFunction::FindFunction("Function Engine.UIDataStore_OnlinePlayerData.RegisterDelegates");
	}

	UUIDataStore_OnlinePlayerData_execRegisterDelegates_Params RegisterDelegates_Params;
	memset(&RegisterDelegates_Params, 0, sizeof(RegisterDelegates_Params));

	this->ProcessEvent(uFnRegisterDelegates, &RegisterDelegates_Params, nullptr);
};

// Function Engine.UIDataStore_OnlinePlayerData.OnPlayerDataChange
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UUIDataStore_OnlinePlayerData::OnPlayerDataChange()
{
	static UFunction* uFnOnPlayerDataChange = nullptr;

	if (!uFnOnPlayerDataChange)
	{
		uFnOnPlayerDataChange = UFunction::FindFunction("Function Engine.UIDataStore_OnlinePlayerData.OnPlayerDataChange");
	}

	UUIDataStore_OnlinePlayerData_execOnPlayerDataChange_Params OnPlayerDataChange_Params;
	memset(&OnPlayerDataChange_Params, 0, sizeof(OnPlayerDataChange_Params));

	this->ProcessEvent(uFnOnPlayerDataChange, &OnPlayerDataChange_Params, nullptr);
};

// Function Engine.UIDataStore_OnlinePlayerData.OnLoginChange
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint8_t                        LocalUserNum                   (CPF_Parm)

void UUIDataStore_OnlinePlayerData::OnLoginChange(uint8_t LocalUserNum)
{
	static UFunction* uFnOnLoginChange = nullptr;

	if (!uFnOnLoginChange)
	{
		uFnOnLoginChange = UFunction::FindFunction("Function Engine.UIDataStore_OnlinePlayerData.OnLoginChange");
	}

	UUIDataStore_OnlinePlayerData_execOnLoginChange_Params OnLoginChange_Params;
	memset(&OnLoginChange_Params, 0, sizeof(OnLoginChange_Params));
	memcpy_s(&OnLoginChange_Params.LocalUserNum, sizeof(OnLoginChange_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));

	this->ProcessEvent(uFnOnLoginChange, &OnLoginChange_Params, nullptr);
};

// Function Engine.UIDataStore_OnlinePlayerData.OnUnregister
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UUIDataStore_OnlinePlayerData::eventOnUnregister()
{
	static UFunction* uFnOnUnregister = nullptr;

	if (!uFnOnUnregister)
	{
		uFnOnUnregister = UFunction::FindFunction("Function Engine.UIDataStore_OnlinePlayerData.OnUnregister");
	}

	UUIDataStore_OnlinePlayerData_eventOnUnregister_Params OnUnregister_Params;
	memset(&OnUnregister_Params, 0, sizeof(OnUnregister_Params));

	this->ProcessEvent(uFnOnUnregister, &OnUnregister_Params, nullptr);
};

// Function Engine.UIDataStore_OnlinePlayerData.OnRegister
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class ULocalPlayer*            InPlayer                       (CPF_Parm)

void UUIDataStore_OnlinePlayerData::eventOnRegister(class ULocalPlayer* InPlayer)
{
	static UFunction* uFnOnRegister = nullptr;

	if (!uFnOnRegister)
	{
		uFnOnRegister = UFunction::FindFunction("Function Engine.UIDataStore_OnlinePlayerData.OnRegister");
	}

	UUIDataStore_OnlinePlayerData_eventOnRegister_Params OnRegister_Params;
	memset(&OnRegister_Params, 0, sizeof(OnRegister_Params));
	OnRegister_Params.InPlayer = InPlayer;

	this->ProcessEvent(uFnOnRegister, &OnRegister_Params, nullptr);
};

// Function Engine.UIDataStore_OnlinePlayerData.OnSettingProviderChanged
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[23653])
// Parameter Info:
// class UUIDataProvider*         SourceProvider                 (CPF_Parm)
// class FName                    SettingsName                   (CPF_OptionalParm | CPF_Parm)

void UUIDataStore_OnlinePlayerData::OnSettingProviderChanged(class UUIDataProvider* SourceProvider, const class FName& SettingsName)
{
	static UFunction* uFnOnSettingProviderChanged = nullptr;

	if (!uFnOnSettingProviderChanged)
	{
		uFnOnSettingProviderChanged = UFunction::FindFunction("Function Engine.UIDataStore_OnlinePlayerData.OnSettingProviderChanged");
	}

	UUIDataStore_OnlinePlayerData_execOnSettingProviderChanged_Params OnSettingProviderChanged_Params;
	memset(&OnSettingProviderChanged_Params, 0, sizeof(OnSettingProviderChanged_Params));
	OnSettingProviderChanged_Params.SourceProvider = SourceProvider;
	memcpy_s(&OnSettingProviderChanged_Params.SettingsName, sizeof(OnSettingProviderChanged_Params.SettingsName), &SettingsName, sizeof(SettingsName));

	uFnOnSettingProviderChanged->iNative = 0;
	uFnOnSettingProviderChanged->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnOnSettingProviderChanged, &OnSettingProviderChanged_Params, nullptr);
	uFnOnSettingProviderChanged->FunctionFlags |= 0x400;
	uFnOnSettingProviderChanged->iNative = 23653;
};

// Function Engine.UIDataStore_OnlineStats.SortResultsByRank
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[26042])
// Parameter Info:

void UUIDataStore_OnlineStats::SortResultsByRank()
{
	static UFunction* uFnSortResultsByRank = nullptr;

	if (!uFnSortResultsByRank)
	{
		uFnSortResultsByRank = UFunction::FindFunction("Function Engine.UIDataStore_OnlineStats.SortResultsByRank");
	}

	UUIDataStore_OnlineStats_execSortResultsByRank_Params SortResultsByRank_Params;
	memset(&SortResultsByRank_Params, 0, sizeof(SortResultsByRank_Params));

	uFnSortResultsByRank->iNative = 0;
	uFnSortResultsByRank->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSortResultsByRank, &SortResultsByRank_Params, nullptr);
	uFnSortResultsByRank->FunctionFlags |= 0x400;
	uFnSortResultsByRank->iNative = 26042;
};

// Function Engine.UIDataStore_OnlineStats.OnReadComplete
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bWasSuccessful                 (CPF_Parm)

void UUIDataStore_OnlineStats::OnReadComplete(bool bWasSuccessful)
{
	static UFunction* uFnOnReadComplete = nullptr;

	if (!uFnOnReadComplete)
	{
		uFnOnReadComplete = UFunction::FindFunction("Function Engine.UIDataStore_OnlineStats.OnReadComplete");
	}

	UUIDataStore_OnlineStats_execOnReadComplete_Params OnReadComplete_Params;
	memset(&OnReadComplete_Params, 0, sizeof(OnReadComplete_Params));
	OnReadComplete_Params.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent(uFnOnReadComplete, &OnReadComplete_Params, nullptr);
};

// Function Engine.UIDataStore_OnlineStats.ShowGamercard
// [0x00820802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint8_t                        ConrollerIndex                 (CPF_Parm)
// int32_t                        ListIndex                      (CPF_Parm)

bool UUIDataStore_OnlineStats::eventShowGamercard(uint8_t ConrollerIndex, int32_t ListIndex)
{
	static UFunction* uFnShowGamercard = nullptr;

	if (!uFnShowGamercard)
	{
		uFnShowGamercard = UFunction::FindFunction("Function Engine.UIDataStore_OnlineStats.ShowGamercard");
	}

	UUIDataStore_OnlineStats_eventShowGamercard_Params ShowGamercard_Params;
	memset(&ShowGamercard_Params, 0, sizeof(ShowGamercard_Params));
	memcpy_s(&ShowGamercard_Params.ConrollerIndex, sizeof(ShowGamercard_Params.ConrollerIndex), &ConrollerIndex, sizeof(ConrollerIndex));
	memcpy_s(&ShowGamercard_Params.ListIndex, sizeof(ShowGamercard_Params.ListIndex), &ListIndex, sizeof(ListIndex));

	this->ProcessEvent(uFnShowGamercard, &ShowGamercard_Params, nullptr);

	return ShowGamercard_Params.ReturnValue;
};

// Function Engine.UIDataStore_OnlineStats.RefreshStats
// [0x00820802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint8_t                        ControllerIndex                (CPF_Parm)

bool UUIDataStore_OnlineStats::eventRefreshStats(uint8_t ControllerIndex)
{
	static UFunction* uFnRefreshStats = nullptr;

	if (!uFnRefreshStats)
	{
		uFnRefreshStats = UFunction::FindFunction("Function Engine.UIDataStore_OnlineStats.RefreshStats");
	}

	UUIDataStore_OnlineStats_eventRefreshStats_Params RefreshStats_Params;
	memset(&RefreshStats_Params, 0, sizeof(RefreshStats_Params));
	memcpy_s(&RefreshStats_Params.ControllerIndex, sizeof(RefreshStats_Params.ControllerIndex), &ControllerIndex, sizeof(ControllerIndex));

	this->ProcessEvent(uFnRefreshStats, &RefreshStats_Params, nullptr);

	return RefreshStats_Params.ReturnValue;
};

// Function Engine.UIDataStore_OnlineStats.SetStatsReadInfo
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UUIDataStore_OnlineStats::SetStatsReadInfo()
{
	static UFunction* uFnSetStatsReadInfo = nullptr;

	if (!uFnSetStatsReadInfo)
	{
		uFnSetStatsReadInfo = UFunction::FindFunction("Function Engine.UIDataStore_OnlineStats.SetStatsReadInfo");
	}

	UUIDataStore_OnlineStats_execSetStatsReadInfo_Params SetStatsReadInfo_Params;
	memset(&SetStatsReadInfo_Params, 0, sizeof(SetStatsReadInfo_Params));

	this->ProcessEvent(uFnSetStatsReadInfo, &SetStatsReadInfo_Params, nullptr);
};

// Function Engine.UIDataStore_OnlineStats.Init
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UUIDataStore_OnlineStats::eventInit()
{
	static UFunction* uFnInit = nullptr;

	if (!uFnInit)
	{
		uFnInit = UFunction::FindFunction("Function Engine.UIDataStore_OnlineStats.Init");
	}

	UUIDataStore_OnlineStats_eventInit_Params Init_Params;
	memset(&Init_Params, 0, sizeof(Init_Params));

	this->ProcessEvent(uFnInit, &Init_Params, nullptr);
};

// Function Engine.UIDataStore_InputAlias.HasAliasMappingForPlatform
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20901])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    DesiredAlias                   (CPF_Parm)
// EInputPlatformType             DesiredPlatform                (CPF_Parm)

bool UUIDataStore_InputAlias::HasAliasMappingForPlatform(const class FName& DesiredAlias, EInputPlatformType DesiredPlatform)
{
	static UFunction* uFnHasAliasMappingForPlatform = nullptr;

	if (!uFnHasAliasMappingForPlatform)
	{
		uFnHasAliasMappingForPlatform = UFunction::FindFunction("Function Engine.UIDataStore_InputAlias.HasAliasMappingForPlatform");
	}

	UUIDataStore_InputAlias_execHasAliasMappingForPlatform_Params HasAliasMappingForPlatform_Params;
	memset(&HasAliasMappingForPlatform_Params, 0, sizeof(HasAliasMappingForPlatform_Params));
	memcpy_s(&HasAliasMappingForPlatform_Params.DesiredAlias, sizeof(HasAliasMappingForPlatform_Params.DesiredAlias), &DesiredAlias, sizeof(DesiredAlias));
	memcpy_s(&HasAliasMappingForPlatform_Params.DesiredPlatform, sizeof(HasAliasMappingForPlatform_Params.DesiredPlatform), &DesiredPlatform, sizeof(DesiredPlatform));

	uFnHasAliasMappingForPlatform->iNative = 0;
	uFnHasAliasMappingForPlatform->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnHasAliasMappingForPlatform, &HasAliasMappingForPlatform_Params, nullptr);
	uFnHasAliasMappingForPlatform->FunctionFlags |= 0x400;
	uFnHasAliasMappingForPlatform->iNative = 20901;

	return HasAliasMappingForPlatform_Params.ReturnValue;
};

// Function Engine.UIDataStore_InputAlias.FindInputAliasIndex
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20106])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    DesiredAlias                   (CPF_Parm)

int32_t UUIDataStore_InputAlias::FindInputAliasIndex(const class FName& DesiredAlias)
{
	static UFunction* uFnFindInputAliasIndex = nullptr;

	if (!uFnFindInputAliasIndex)
	{
		uFnFindInputAliasIndex = UFunction::FindFunction("Function Engine.UIDataStore_InputAlias.FindInputAliasIndex");
	}

	UUIDataStore_InputAlias_execFindInputAliasIndex_Params FindInputAliasIndex_Params;
	memset(&FindInputAliasIndex_Params, 0, sizeof(FindInputAliasIndex_Params));
	memcpy_s(&FindInputAliasIndex_Params.DesiredAlias, sizeof(FindInputAliasIndex_Params.DesiredAlias), &DesiredAlias, sizeof(DesiredAlias));

	uFnFindInputAliasIndex->iNative = 0;
	uFnFindInputAliasIndex->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnFindInputAliasIndex, &FindInputAliasIndex_Params, nullptr);
	uFnFindInputAliasIndex->FunctionFlags |= 0x400;
	uFnFindInputAliasIndex->iNative = 20106;

	return FindInputAliasIndex_Params.ReturnValue;
};

// Function Engine.UIDataStore_InputAlias.GetAliasInputKeyDataByIndex
// [0x00424401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20489])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        AliasIndex                     (CPF_Parm)
// EInputPlatformType             OverridePlatform               (CPF_OptionalParm | CPF_Parm)
// struct FRawInputKeyEventData   out_InputKeyData               (CPF_Parm | CPF_OutParm)

bool UUIDataStore_InputAlias::GetAliasInputKeyDataByIndex(int32_t AliasIndex, EInputPlatformType OverridePlatform, struct FRawInputKeyEventData& out_InputKeyData)
{
	static UFunction* uFnGetAliasInputKeyDataByIndex = nullptr;

	if (!uFnGetAliasInputKeyDataByIndex)
	{
		uFnGetAliasInputKeyDataByIndex = UFunction::FindFunction("Function Engine.UIDataStore_InputAlias.GetAliasInputKeyDataByIndex");
	}

	UUIDataStore_InputAlias_execGetAliasInputKeyDataByIndex_Params GetAliasInputKeyDataByIndex_Params;
	memset(&GetAliasInputKeyDataByIndex_Params, 0, sizeof(GetAliasInputKeyDataByIndex_Params));
	memcpy_s(&GetAliasInputKeyDataByIndex_Params.AliasIndex, sizeof(GetAliasInputKeyDataByIndex_Params.AliasIndex), &AliasIndex, sizeof(AliasIndex));
	memcpy_s(&GetAliasInputKeyDataByIndex_Params.OverridePlatform, sizeof(GetAliasInputKeyDataByIndex_Params.OverridePlatform), &OverridePlatform, sizeof(OverridePlatform));
	memcpy_s(&GetAliasInputKeyDataByIndex_Params.out_InputKeyData, sizeof(GetAliasInputKeyDataByIndex_Params.out_InputKeyData), &out_InputKeyData, sizeof(out_InputKeyData));

	uFnGetAliasInputKeyDataByIndex->iNative = 0;
	uFnGetAliasInputKeyDataByIndex->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetAliasInputKeyDataByIndex, &GetAliasInputKeyDataByIndex_Params, nullptr);
	uFnGetAliasInputKeyDataByIndex->FunctionFlags |= 0x400;
	uFnGetAliasInputKeyDataByIndex->iNative = 20489;

	memcpy_s(&out_InputKeyData, sizeof(out_InputKeyData), &GetAliasInputKeyDataByIndex_Params.out_InputKeyData, sizeof(GetAliasInputKeyDataByIndex_Params.out_InputKeyData));

	return GetAliasInputKeyDataByIndex_Params.ReturnValue;
};

// Function Engine.UIDataStore_InputAlias.GetAliasInputKeyData
// [0x00424401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20488])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    DesiredAlias                   (CPF_Parm)
// EInputPlatformType             OverridePlatform               (CPF_OptionalParm | CPF_Parm)
// struct FRawInputKeyEventData   out_InputKeyData               (CPF_Parm | CPF_OutParm)

bool UUIDataStore_InputAlias::GetAliasInputKeyData(const class FName& DesiredAlias, EInputPlatformType OverridePlatform, struct FRawInputKeyEventData& out_InputKeyData)
{
	static UFunction* uFnGetAliasInputKeyData = nullptr;

	if (!uFnGetAliasInputKeyData)
	{
		uFnGetAliasInputKeyData = UFunction::FindFunction("Function Engine.UIDataStore_InputAlias.GetAliasInputKeyData");
	}

	UUIDataStore_InputAlias_execGetAliasInputKeyData_Params GetAliasInputKeyData_Params;
	memset(&GetAliasInputKeyData_Params, 0, sizeof(GetAliasInputKeyData_Params));
	memcpy_s(&GetAliasInputKeyData_Params.DesiredAlias, sizeof(GetAliasInputKeyData_Params.DesiredAlias), &DesiredAlias, sizeof(DesiredAlias));
	memcpy_s(&GetAliasInputKeyData_Params.OverridePlatform, sizeof(GetAliasInputKeyData_Params.OverridePlatform), &OverridePlatform, sizeof(OverridePlatform));
	memcpy_s(&GetAliasInputKeyData_Params.out_InputKeyData, sizeof(GetAliasInputKeyData_Params.out_InputKeyData), &out_InputKeyData, sizeof(out_InputKeyData));

	uFnGetAliasInputKeyData->iNative = 0;
	uFnGetAliasInputKeyData->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetAliasInputKeyData, &GetAliasInputKeyData_Params, nullptr);
	uFnGetAliasInputKeyData->FunctionFlags |= 0x400;
	uFnGetAliasInputKeyData->iNative = 20488;

	memcpy_s(&out_InputKeyData, sizeof(out_InputKeyData), &GetAliasInputKeyData_Params.out_InputKeyData, sizeof(GetAliasInputKeyData_Params.out_InputKeyData));

	return GetAliasInputKeyData_Params.ReturnValue;
};

// Function Engine.UIDataStore_InputAlias.GetAliasInputKeyNameByIndex
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[20491])
// Parameter Info:
// class FName                    ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        AliasIndex                     (CPF_Parm)
// EInputPlatformType             OverridePlatform               (CPF_OptionalParm | CPF_Parm)

class FName UUIDataStore_InputAlias::GetAliasInputKeyNameByIndex(int32_t AliasIndex, EInputPlatformType OverridePlatform)
{
	static UFunction* uFnGetAliasInputKeyNameByIndex = nullptr;

	if (!uFnGetAliasInputKeyNameByIndex)
	{
		uFnGetAliasInputKeyNameByIndex = UFunction::FindFunction("Function Engine.UIDataStore_InputAlias.GetAliasInputKeyNameByIndex");
	}

	UUIDataStore_InputAlias_execGetAliasInputKeyNameByIndex_Params GetAliasInputKeyNameByIndex_Params;
	memset(&GetAliasInputKeyNameByIndex_Params, 0, sizeof(GetAliasInputKeyNameByIndex_Params));
	memcpy_s(&GetAliasInputKeyNameByIndex_Params.AliasIndex, sizeof(GetAliasInputKeyNameByIndex_Params.AliasIndex), &AliasIndex, sizeof(AliasIndex));
	memcpy_s(&GetAliasInputKeyNameByIndex_Params.OverridePlatform, sizeof(GetAliasInputKeyNameByIndex_Params.OverridePlatform), &OverridePlatform, sizeof(OverridePlatform));

	uFnGetAliasInputKeyNameByIndex->iNative = 0;
	uFnGetAliasInputKeyNameByIndex->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetAliasInputKeyNameByIndex, &GetAliasInputKeyNameByIndex_Params, nullptr);
	uFnGetAliasInputKeyNameByIndex->FunctionFlags |= 0x400;
	uFnGetAliasInputKeyNameByIndex->iNative = 20491;

	return GetAliasInputKeyNameByIndex_Params.ReturnValue;
};

// Function Engine.UIDataStore_InputAlias.GetAliasInputKeyName
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[20490])
// Parameter Info:
// class FName                    ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    DesiredAlias                   (CPF_Parm)
// EInputPlatformType             OverridePlatform               (CPF_OptionalParm | CPF_Parm)

class FName UUIDataStore_InputAlias::GetAliasInputKeyName(const class FName& DesiredAlias, EInputPlatformType OverridePlatform)
{
	static UFunction* uFnGetAliasInputKeyName = nullptr;

	if (!uFnGetAliasInputKeyName)
	{
		uFnGetAliasInputKeyName = UFunction::FindFunction("Function Engine.UIDataStore_InputAlias.GetAliasInputKeyName");
	}

	UUIDataStore_InputAlias_execGetAliasInputKeyName_Params GetAliasInputKeyName_Params;
	memset(&GetAliasInputKeyName_Params, 0, sizeof(GetAliasInputKeyName_Params));
	memcpy_s(&GetAliasInputKeyName_Params.DesiredAlias, sizeof(GetAliasInputKeyName_Params.DesiredAlias), &DesiredAlias, sizeof(DesiredAlias));
	memcpy_s(&GetAliasInputKeyName_Params.OverridePlatform, sizeof(GetAliasInputKeyName_Params.OverridePlatform), &OverridePlatform, sizeof(OverridePlatform));

	uFnGetAliasInputKeyName->iNative = 0;
	uFnGetAliasInputKeyName->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetAliasInputKeyName, &GetAliasInputKeyName_Params, nullptr);
	uFnGetAliasInputKeyName->FunctionFlags |= 0x400;
	uFnGetAliasInputKeyName->iNative = 20490;

	return GetAliasInputKeyName_Params.ReturnValue;
};

// Function Engine.UIDataStore_InputAlias.GetAliasFontMarkupByIndex
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[20487])
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)
// int32_t                        AliasIndex                     (CPF_Parm)
// EInputPlatformType             OverridePlatform               (CPF_OptionalParm | CPF_Parm)

class FString UUIDataStore_InputAlias::GetAliasFontMarkupByIndex(int32_t AliasIndex, EInputPlatformType OverridePlatform)
{
	static UFunction* uFnGetAliasFontMarkupByIndex = nullptr;

	if (!uFnGetAliasFontMarkupByIndex)
	{
		uFnGetAliasFontMarkupByIndex = UFunction::FindFunction("Function Engine.UIDataStore_InputAlias.GetAliasFontMarkupByIndex");
	}

	UUIDataStore_InputAlias_execGetAliasFontMarkupByIndex_Params GetAliasFontMarkupByIndex_Params;
	memset(&GetAliasFontMarkupByIndex_Params, 0, sizeof(GetAliasFontMarkupByIndex_Params));
	memcpy_s(&GetAliasFontMarkupByIndex_Params.AliasIndex, sizeof(GetAliasFontMarkupByIndex_Params.AliasIndex), &AliasIndex, sizeof(AliasIndex));
	memcpy_s(&GetAliasFontMarkupByIndex_Params.OverridePlatform, sizeof(GetAliasFontMarkupByIndex_Params.OverridePlatform), &OverridePlatform, sizeof(OverridePlatform));

	uFnGetAliasFontMarkupByIndex->iNative = 0;
	uFnGetAliasFontMarkupByIndex->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetAliasFontMarkupByIndex, &GetAliasFontMarkupByIndex_Params, nullptr);
	uFnGetAliasFontMarkupByIndex->FunctionFlags |= 0x400;
	uFnGetAliasFontMarkupByIndex->iNative = 20487;

	return GetAliasFontMarkupByIndex_Params.ReturnValue;
};

// Function Engine.UIDataStore_InputAlias.GetAliasFontMarkup
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[20486])
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)
// class FName                    DesiredAlias                   (CPF_Parm)
// EInputPlatformType             OverridePlatform               (CPF_OptionalParm | CPF_Parm)

class FString UUIDataStore_InputAlias::GetAliasFontMarkup(const class FName& DesiredAlias, EInputPlatformType OverridePlatform)
{
	static UFunction* uFnGetAliasFontMarkup = nullptr;

	if (!uFnGetAliasFontMarkup)
	{
		uFnGetAliasFontMarkup = UFunction::FindFunction("Function Engine.UIDataStore_InputAlias.GetAliasFontMarkup");
	}

	UUIDataStore_InputAlias_execGetAliasFontMarkup_Params GetAliasFontMarkup_Params;
	memset(&GetAliasFontMarkup_Params, 0, sizeof(GetAliasFontMarkup_Params));
	memcpy_s(&GetAliasFontMarkup_Params.DesiredAlias, sizeof(GetAliasFontMarkup_Params.DesiredAlias), &DesiredAlias, sizeof(DesiredAlias));
	memcpy_s(&GetAliasFontMarkup_Params.OverridePlatform, sizeof(GetAliasFontMarkup_Params.OverridePlatform), &OverridePlatform, sizeof(OverridePlatform));

	uFnGetAliasFontMarkup->iNative = 0;
	uFnGetAliasFontMarkup->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetAliasFontMarkup, &GetAliasFontMarkup_Params, nullptr);
	uFnGetAliasFontMarkup->FunctionFlags |= 0x400;
	uFnGetAliasFontMarkup->iNative = 20486;

	return GetAliasFontMarkup_Params.ReturnValue;
};

// Function Engine.UIDataStore_StringAliasMap.GetStringWithFieldName
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20774])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FString                  FieldName                      (CPF_Parm | CPF_NeedCtorLink)
// class FString                  MappedString                   (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

int32_t UUIDataStore_StringAliasMap::GetStringWithFieldName(const class FString& FieldName, class FString& MappedString)
{
	static UFunction* uFnGetStringWithFieldName = nullptr;

	if (!uFnGetStringWithFieldName)
	{
		uFnGetStringWithFieldName = UFunction::FindFunction("Function Engine.UIDataStore_StringAliasMap.GetStringWithFieldName");
	}

	UUIDataStore_StringAliasMap_execGetStringWithFieldName_Params GetStringWithFieldName_Params;
	memset(&GetStringWithFieldName_Params, 0, sizeof(GetStringWithFieldName_Params));
	memcpy_s(&GetStringWithFieldName_Params.FieldName, sizeof(GetStringWithFieldName_Params.FieldName), &FieldName, sizeof(FieldName));
	memcpy_s(&GetStringWithFieldName_Params.MappedString, sizeof(GetStringWithFieldName_Params.MappedString), &MappedString, sizeof(MappedString));

	uFnGetStringWithFieldName->iNative = 0;
	uFnGetStringWithFieldName->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetStringWithFieldName, &GetStringWithFieldName_Params, nullptr);
	uFnGetStringWithFieldName->FunctionFlags |= 0x400;
	uFnGetStringWithFieldName->iNative = 20774;

	memcpy_s(&MappedString, sizeof(MappedString), &GetStringWithFieldName_Params.MappedString, sizeof(GetStringWithFieldName_Params.MappedString));

	return GetStringWithFieldName_Params.ReturnValue;
};

// Function Engine.UIDataStore_StringAliasMap.FindMappingWithFieldName
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[20109])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FString                  FieldName                      (CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink)
// class FString                  SetName                        (CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink)

int32_t UUIDataStore_StringAliasMap::FindMappingWithFieldName(const class FString& FieldName, const class FString& SetName)
{
	static UFunction* uFnFindMappingWithFieldName = nullptr;

	if (!uFnFindMappingWithFieldName)
	{
		uFnFindMappingWithFieldName = UFunction::FindFunction("Function Engine.UIDataStore_StringAliasMap.FindMappingWithFieldName");
	}

	UUIDataStore_StringAliasMap_execFindMappingWithFieldName_Params FindMappingWithFieldName_Params;
	memset(&FindMappingWithFieldName_Params, 0, sizeof(FindMappingWithFieldName_Params));
	memcpy_s(&FindMappingWithFieldName_Params.FieldName, sizeof(FindMappingWithFieldName_Params.FieldName), &FieldName, sizeof(FieldName));
	memcpy_s(&FindMappingWithFieldName_Params.SetName, sizeof(FindMappingWithFieldName_Params.SetName), &SetName, sizeof(SetName));

	uFnFindMappingWithFieldName->iNative = 0;
	uFnFindMappingWithFieldName->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnFindMappingWithFieldName, &FindMappingWithFieldName_Params, nullptr);
	uFnFindMappingWithFieldName->FunctionFlags |= 0x400;
	uFnFindMappingWithFieldName->iNative = 20109;

	return FindMappingWithFieldName_Params.ReturnValue;
};

// Function Engine.UIDataStore_StringAliasMap.GetPlayerOwner
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20684])
// Parameter Info:
// class ULocalPlayer*            ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class ULocalPlayer* UUIDataStore_StringAliasMap::GetPlayerOwner()
{
	static UFunction* uFnGetPlayerOwner = nullptr;

	if (!uFnGetPlayerOwner)
	{
		uFnGetPlayerOwner = UFunction::FindFunction("Function Engine.UIDataStore_StringAliasMap.GetPlayerOwner");
	}

	UUIDataStore_StringAliasMap_execGetPlayerOwner_Params GetPlayerOwner_Params;
	memset(&GetPlayerOwner_Params, 0, sizeof(GetPlayerOwner_Params));

	uFnGetPlayerOwner->iNative = 0;
	uFnGetPlayerOwner->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetPlayerOwner, &GetPlayerOwner_Params, nullptr);
	uFnGetPlayerOwner->FunctionFlags |= 0x400;
	uFnGetPlayerOwner->iNative = 20684;

	return GetPlayerOwner_Params.ReturnValue;
};

// Function Engine.UIDynamicFieldProvider.FindCollectionValueIndex
// [0x00424401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20090])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    FieldName                      (CPF_Parm)
// uint32_t                       bPersistent                    (CPF_OptionalParm | CPF_Parm)
// class FName                    CellTag                        (CPF_OptionalParm | CPF_Parm)
// class FString                  ValueToFind                    (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

int32_t UUIDynamicFieldProvider::FindCollectionValueIndex(const class FName& FieldName, bool bPersistent, const class FName& CellTag, class FString& ValueToFind)
{
	static UFunction* uFnFindCollectionValueIndex = nullptr;

	if (!uFnFindCollectionValueIndex)
	{
		uFnFindCollectionValueIndex = UFunction::FindFunction("Function Engine.UIDynamicFieldProvider.FindCollectionValueIndex");
	}

	UUIDynamicFieldProvider_execFindCollectionValueIndex_Params FindCollectionValueIndex_Params;
	memset(&FindCollectionValueIndex_Params, 0, sizeof(FindCollectionValueIndex_Params));
	memcpy_s(&FindCollectionValueIndex_Params.FieldName, sizeof(FindCollectionValueIndex_Params.FieldName), &FieldName, sizeof(FieldName));
	FindCollectionValueIndex_Params.bPersistent = bPersistent;
	memcpy_s(&FindCollectionValueIndex_Params.CellTag, sizeof(FindCollectionValueIndex_Params.CellTag), &CellTag, sizeof(CellTag));
	memcpy_s(&FindCollectionValueIndex_Params.ValueToFind, sizeof(FindCollectionValueIndex_Params.ValueToFind), &ValueToFind, sizeof(ValueToFind));

	uFnFindCollectionValueIndex->iNative = 0;
	uFnFindCollectionValueIndex->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnFindCollectionValueIndex, &FindCollectionValueIndex_Params, nullptr);
	uFnFindCollectionValueIndex->FunctionFlags |= 0x400;
	uFnFindCollectionValueIndex->iNative = 20090;

	memcpy_s(&ValueToFind, sizeof(ValueToFind), &FindCollectionValueIndex_Params.ValueToFind, sizeof(FindCollectionValueIndex_Params.ValueToFind));

	return FindCollectionValueIndex_Params.ReturnValue;
};

// Function Engine.UIDynamicFieldProvider.GetCollectionValue
// [0x00424401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20528])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    FieldName                      (CPF_Parm)
// int32_t                        ValueIndex                     (CPF_Parm)
// uint32_t                       bPersistent                    (CPF_OptionalParm | CPF_Parm)
// class FName                    CellTag                        (CPF_OptionalParm | CPF_Parm)
// class FString                  out_Value                      (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

bool UUIDynamicFieldProvider::GetCollectionValue(const class FName& FieldName, int32_t ValueIndex, bool bPersistent, const class FName& CellTag, class FString& out_Value)
{
	static UFunction* uFnGetCollectionValue = nullptr;

	if (!uFnGetCollectionValue)
	{
		uFnGetCollectionValue = UFunction::FindFunction("Function Engine.UIDynamicFieldProvider.GetCollectionValue");
	}

	UUIDynamicFieldProvider_execGetCollectionValue_Params GetCollectionValue_Params;
	memset(&GetCollectionValue_Params, 0, sizeof(GetCollectionValue_Params));
	memcpy_s(&GetCollectionValue_Params.FieldName, sizeof(GetCollectionValue_Params.FieldName), &FieldName, sizeof(FieldName));
	memcpy_s(&GetCollectionValue_Params.ValueIndex, sizeof(GetCollectionValue_Params.ValueIndex), &ValueIndex, sizeof(ValueIndex));
	GetCollectionValue_Params.bPersistent = bPersistent;
	memcpy_s(&GetCollectionValue_Params.CellTag, sizeof(GetCollectionValue_Params.CellTag), &CellTag, sizeof(CellTag));
	memcpy_s(&GetCollectionValue_Params.out_Value, sizeof(GetCollectionValue_Params.out_Value), &out_Value, sizeof(out_Value));

	uFnGetCollectionValue->iNative = 0;
	uFnGetCollectionValue->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetCollectionValue, &GetCollectionValue_Params, nullptr);
	uFnGetCollectionValue->FunctionFlags |= 0x400;
	uFnGetCollectionValue->iNative = 20528;

	memcpy_s(&out_Value, sizeof(out_Value), &GetCollectionValue_Params.out_Value, sizeof(GetCollectionValue_Params.out_Value));

	return GetCollectionValue_Params.ReturnValue;
};

// Function Engine.UIDynamicFieldProvider.ClearCollectionValueArray
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[18112])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    FieldName                      (CPF_Parm)
// uint32_t                       bPersistent                    (CPF_OptionalParm | CPF_Parm)
// class FName                    CellTag                        (CPF_OptionalParm | CPF_Parm)

bool UUIDynamicFieldProvider::ClearCollectionValueArray(const class FName& FieldName, bool bPersistent, const class FName& CellTag)
{
	static UFunction* uFnClearCollectionValueArray = nullptr;

	if (!uFnClearCollectionValueArray)
	{
		uFnClearCollectionValueArray = UFunction::FindFunction("Function Engine.UIDynamicFieldProvider.ClearCollectionValueArray");
	}

	UUIDynamicFieldProvider_execClearCollectionValueArray_Params ClearCollectionValueArray_Params;
	memset(&ClearCollectionValueArray_Params, 0, sizeof(ClearCollectionValueArray_Params));
	memcpy_s(&ClearCollectionValueArray_Params.FieldName, sizeof(ClearCollectionValueArray_Params.FieldName), &FieldName, sizeof(FieldName));
	ClearCollectionValueArray_Params.bPersistent = bPersistent;
	memcpy_s(&ClearCollectionValueArray_Params.CellTag, sizeof(ClearCollectionValueArray_Params.CellTag), &CellTag, sizeof(CellTag));

	uFnClearCollectionValueArray->iNative = 0;
	uFnClearCollectionValueArray->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnClearCollectionValueArray, &ClearCollectionValueArray_Params, nullptr);
	uFnClearCollectionValueArray->FunctionFlags |= 0x400;
	uFnClearCollectionValueArray->iNative = 18112;

	return ClearCollectionValueArray_Params.ReturnValue;
};

// Function Engine.UIDynamicFieldProvider.ReplaceCollectionValueByIndex
// [0x00424401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[25103])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    FieldName                      (CPF_Parm)
// int32_t                        ValueIndex                     (CPF_Parm)
// uint32_t                       bPersistent                    (CPF_OptionalParm | CPF_Parm)
// class FName                    CellTag                        (CPF_OptionalParm | CPF_Parm)
// class FString                  NewValue                       (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

bool UUIDynamicFieldProvider::ReplaceCollectionValueByIndex(const class FName& FieldName, int32_t ValueIndex, bool bPersistent, const class FName& CellTag, class FString& NewValue)
{
	static UFunction* uFnReplaceCollectionValueByIndex = nullptr;

	if (!uFnReplaceCollectionValueByIndex)
	{
		uFnReplaceCollectionValueByIndex = UFunction::FindFunction("Function Engine.UIDynamicFieldProvider.ReplaceCollectionValueByIndex");
	}

	UUIDynamicFieldProvider_execReplaceCollectionValueByIndex_Params ReplaceCollectionValueByIndex_Params;
	memset(&ReplaceCollectionValueByIndex_Params, 0, sizeof(ReplaceCollectionValueByIndex_Params));
	memcpy_s(&ReplaceCollectionValueByIndex_Params.FieldName, sizeof(ReplaceCollectionValueByIndex_Params.FieldName), &FieldName, sizeof(FieldName));
	memcpy_s(&ReplaceCollectionValueByIndex_Params.ValueIndex, sizeof(ReplaceCollectionValueByIndex_Params.ValueIndex), &ValueIndex, sizeof(ValueIndex));
	ReplaceCollectionValueByIndex_Params.bPersistent = bPersistent;
	memcpy_s(&ReplaceCollectionValueByIndex_Params.CellTag, sizeof(ReplaceCollectionValueByIndex_Params.CellTag), &CellTag, sizeof(CellTag));
	memcpy_s(&ReplaceCollectionValueByIndex_Params.NewValue, sizeof(ReplaceCollectionValueByIndex_Params.NewValue), &NewValue, sizeof(NewValue));

	uFnReplaceCollectionValueByIndex->iNative = 0;
	uFnReplaceCollectionValueByIndex->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnReplaceCollectionValueByIndex, &ReplaceCollectionValueByIndex_Params, nullptr);
	uFnReplaceCollectionValueByIndex->FunctionFlags |= 0x400;
	uFnReplaceCollectionValueByIndex->iNative = 25103;

	memcpy_s(&NewValue, sizeof(NewValue), &ReplaceCollectionValueByIndex_Params.NewValue, sizeof(ReplaceCollectionValueByIndex_Params.NewValue));

	return ReplaceCollectionValueByIndex_Params.ReturnValue;
};

// Function Engine.UIDynamicFieldProvider.ReplaceCollectionValue
// [0x00424401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[25102])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    FieldName                      (CPF_Parm)
// uint32_t                       bPersistent                    (CPF_OptionalParm | CPF_Parm)
// class FName                    CellTag                        (CPF_OptionalParm | CPF_Parm)
// class FString                  CurrentValue                   (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)
// class FString                  NewValue                       (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

bool UUIDynamicFieldProvider::ReplaceCollectionValue(const class FName& FieldName, bool bPersistent, const class FName& CellTag, class FString& CurrentValue, class FString& NewValue)
{
	static UFunction* uFnReplaceCollectionValue = nullptr;

	if (!uFnReplaceCollectionValue)
	{
		uFnReplaceCollectionValue = UFunction::FindFunction("Function Engine.UIDynamicFieldProvider.ReplaceCollectionValue");
	}

	UUIDynamicFieldProvider_execReplaceCollectionValue_Params ReplaceCollectionValue_Params;
	memset(&ReplaceCollectionValue_Params, 0, sizeof(ReplaceCollectionValue_Params));
	memcpy_s(&ReplaceCollectionValue_Params.FieldName, sizeof(ReplaceCollectionValue_Params.FieldName), &FieldName, sizeof(FieldName));
	ReplaceCollectionValue_Params.bPersistent = bPersistent;
	memcpy_s(&ReplaceCollectionValue_Params.CellTag, sizeof(ReplaceCollectionValue_Params.CellTag), &CellTag, sizeof(CellTag));
	memcpy_s(&ReplaceCollectionValue_Params.CurrentValue, sizeof(ReplaceCollectionValue_Params.CurrentValue), &CurrentValue, sizeof(CurrentValue));
	memcpy_s(&ReplaceCollectionValue_Params.NewValue, sizeof(ReplaceCollectionValue_Params.NewValue), &NewValue, sizeof(NewValue));

	uFnReplaceCollectionValue->iNative = 0;
	uFnReplaceCollectionValue->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnReplaceCollectionValue, &ReplaceCollectionValue_Params, nullptr);
	uFnReplaceCollectionValue->FunctionFlags |= 0x400;
	uFnReplaceCollectionValue->iNative = 25102;

	memcpy_s(&CurrentValue, sizeof(CurrentValue), &ReplaceCollectionValue_Params.CurrentValue, sizeof(ReplaceCollectionValue_Params.CurrentValue));
	memcpy_s(&NewValue, sizeof(NewValue), &ReplaceCollectionValue_Params.NewValue, sizeof(ReplaceCollectionValue_Params.NewValue));

	return ReplaceCollectionValue_Params.ReturnValue;
};

// Function Engine.UIDynamicFieldProvider.RemoveCollectionValueByIndex
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[25066])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    FieldName                      (CPF_Parm)
// int32_t                        ValueIndex                     (CPF_Parm)
// uint32_t                       bPersistent                    (CPF_OptionalParm | CPF_Parm)
// class FName                    CellTag                        (CPF_OptionalParm | CPF_Parm)

bool UUIDynamicFieldProvider::RemoveCollectionValueByIndex(const class FName& FieldName, int32_t ValueIndex, bool bPersistent, const class FName& CellTag)
{
	static UFunction* uFnRemoveCollectionValueByIndex = nullptr;

	if (!uFnRemoveCollectionValueByIndex)
	{
		uFnRemoveCollectionValueByIndex = UFunction::FindFunction("Function Engine.UIDynamicFieldProvider.RemoveCollectionValueByIndex");
	}

	UUIDynamicFieldProvider_execRemoveCollectionValueByIndex_Params RemoveCollectionValueByIndex_Params;
	memset(&RemoveCollectionValueByIndex_Params, 0, sizeof(RemoveCollectionValueByIndex_Params));
	memcpy_s(&RemoveCollectionValueByIndex_Params.FieldName, sizeof(RemoveCollectionValueByIndex_Params.FieldName), &FieldName, sizeof(FieldName));
	memcpy_s(&RemoveCollectionValueByIndex_Params.ValueIndex, sizeof(RemoveCollectionValueByIndex_Params.ValueIndex), &ValueIndex, sizeof(ValueIndex));
	RemoveCollectionValueByIndex_Params.bPersistent = bPersistent;
	memcpy_s(&RemoveCollectionValueByIndex_Params.CellTag, sizeof(RemoveCollectionValueByIndex_Params.CellTag), &CellTag, sizeof(CellTag));

	uFnRemoveCollectionValueByIndex->iNative = 0;
	uFnRemoveCollectionValueByIndex->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnRemoveCollectionValueByIndex, &RemoveCollectionValueByIndex_Params, nullptr);
	uFnRemoveCollectionValueByIndex->FunctionFlags |= 0x400;
	uFnRemoveCollectionValueByIndex->iNative = 25066;

	return RemoveCollectionValueByIndex_Params.ReturnValue;
};

// Function Engine.UIDynamicFieldProvider.RemoveCollectionValue
// [0x00424401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[25065])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    FieldName                      (CPF_Parm)
// uint32_t                       bPersistent                    (CPF_OptionalParm | CPF_Parm)
// class FName                    CellTag                        (CPF_OptionalParm | CPF_Parm)
// class FString                  ValueToRemove                  (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

bool UUIDynamicFieldProvider::RemoveCollectionValue(const class FName& FieldName, bool bPersistent, const class FName& CellTag, class FString& ValueToRemove)
{
	static UFunction* uFnRemoveCollectionValue = nullptr;

	if (!uFnRemoveCollectionValue)
	{
		uFnRemoveCollectionValue = UFunction::FindFunction("Function Engine.UIDynamicFieldProvider.RemoveCollectionValue");
	}

	UUIDynamicFieldProvider_execRemoveCollectionValue_Params RemoveCollectionValue_Params;
	memset(&RemoveCollectionValue_Params, 0, sizeof(RemoveCollectionValue_Params));
	memcpy_s(&RemoveCollectionValue_Params.FieldName, sizeof(RemoveCollectionValue_Params.FieldName), &FieldName, sizeof(FieldName));
	RemoveCollectionValue_Params.bPersistent = bPersistent;
	memcpy_s(&RemoveCollectionValue_Params.CellTag, sizeof(RemoveCollectionValue_Params.CellTag), &CellTag, sizeof(CellTag));
	memcpy_s(&RemoveCollectionValue_Params.ValueToRemove, sizeof(RemoveCollectionValue_Params.ValueToRemove), &ValueToRemove, sizeof(ValueToRemove));

	uFnRemoveCollectionValue->iNative = 0;
	uFnRemoveCollectionValue->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnRemoveCollectionValue, &RemoveCollectionValue_Params, nullptr);
	uFnRemoveCollectionValue->FunctionFlags |= 0x400;
	uFnRemoveCollectionValue->iNative = 25065;

	memcpy_s(&ValueToRemove, sizeof(ValueToRemove), &RemoveCollectionValue_Params.ValueToRemove, sizeof(RemoveCollectionValue_Params.ValueToRemove));

	return RemoveCollectionValue_Params.ReturnValue;
};

// Function Engine.UIDynamicFieldProvider.InsertCollectionValue
// [0x00424401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[21236])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    FieldName                      (CPF_Parm)
// int32_t                        InsertIndex                    (CPF_OptionalParm | CPF_Parm)
// uint32_t                       bPersistent                    (CPF_OptionalParm | CPF_Parm)
// uint32_t                       bAllowDuplicateValues          (CPF_OptionalParm | CPF_Parm)
// class FName                    CellTag                        (CPF_OptionalParm | CPF_Parm)
// class FString                  NewValue                       (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

bool UUIDynamicFieldProvider::InsertCollectionValue(const class FName& FieldName, int32_t InsertIndex, bool bPersistent, bool bAllowDuplicateValues, const class FName& CellTag, class FString& NewValue)
{
	static UFunction* uFnInsertCollectionValue = nullptr;

	if (!uFnInsertCollectionValue)
	{
		uFnInsertCollectionValue = UFunction::FindFunction("Function Engine.UIDynamicFieldProvider.InsertCollectionValue");
	}

	UUIDynamicFieldProvider_execInsertCollectionValue_Params InsertCollectionValue_Params;
	memset(&InsertCollectionValue_Params, 0, sizeof(InsertCollectionValue_Params));
	memcpy_s(&InsertCollectionValue_Params.FieldName, sizeof(InsertCollectionValue_Params.FieldName), &FieldName, sizeof(FieldName));
	memcpy_s(&InsertCollectionValue_Params.InsertIndex, sizeof(InsertCollectionValue_Params.InsertIndex), &InsertIndex, sizeof(InsertIndex));
	InsertCollectionValue_Params.bPersistent = bPersistent;
	InsertCollectionValue_Params.bAllowDuplicateValues = bAllowDuplicateValues;
	memcpy_s(&InsertCollectionValue_Params.CellTag, sizeof(InsertCollectionValue_Params.CellTag), &CellTag, sizeof(CellTag));
	memcpy_s(&InsertCollectionValue_Params.NewValue, sizeof(InsertCollectionValue_Params.NewValue), &NewValue, sizeof(NewValue));

	uFnInsertCollectionValue->iNative = 0;
	uFnInsertCollectionValue->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnInsertCollectionValue, &InsertCollectionValue_Params, nullptr);
	uFnInsertCollectionValue->FunctionFlags |= 0x400;
	uFnInsertCollectionValue->iNative = 21236;

	memcpy_s(&NewValue, sizeof(NewValue), &InsertCollectionValue_Params.NewValue, sizeof(InsertCollectionValue_Params.NewValue));

	return InsertCollectionValue_Params.ReturnValue;
};

// Function Engine.UIDynamicFieldProvider.SetCollectionValueArray
// [0x00424401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[25615])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    FieldName                      (CPF_Parm)
// uint32_t                       bClearExisting                 (CPF_OptionalParm | CPF_Parm)
// int32_t                        InsertIndex                    (CPF_OptionalParm | CPF_Parm)
// uint32_t                       bPersistent                    (CPF_OptionalParm | CPF_Parm)
// class FName                    CellTag                        (CPF_OptionalParm | CPF_Parm)
// class TArray<class FString>    CollectionValues               (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

bool UUIDynamicFieldProvider::SetCollectionValueArray(const class FName& FieldName, bool bClearExisting, int32_t InsertIndex, bool bPersistent, const class FName& CellTag, class TArray<class FString>& CollectionValues)
{
	static UFunction* uFnSetCollectionValueArray = nullptr;

	if (!uFnSetCollectionValueArray)
	{
		uFnSetCollectionValueArray = UFunction::FindFunction("Function Engine.UIDynamicFieldProvider.SetCollectionValueArray");
	}

	UUIDynamicFieldProvider_execSetCollectionValueArray_Params SetCollectionValueArray_Params;
	memset(&SetCollectionValueArray_Params, 0, sizeof(SetCollectionValueArray_Params));
	memcpy_s(&SetCollectionValueArray_Params.FieldName, sizeof(SetCollectionValueArray_Params.FieldName), &FieldName, sizeof(FieldName));
	SetCollectionValueArray_Params.bClearExisting = bClearExisting;
	memcpy_s(&SetCollectionValueArray_Params.InsertIndex, sizeof(SetCollectionValueArray_Params.InsertIndex), &InsertIndex, sizeof(InsertIndex));
	SetCollectionValueArray_Params.bPersistent = bPersistent;
	memcpy_s(&SetCollectionValueArray_Params.CellTag, sizeof(SetCollectionValueArray_Params.CellTag), &CellTag, sizeof(CellTag));
	memcpy_s(&SetCollectionValueArray_Params.CollectionValues, sizeof(SetCollectionValueArray_Params.CollectionValues), &CollectionValues, sizeof(CollectionValues));

	uFnSetCollectionValueArray->iNative = 0;
	uFnSetCollectionValueArray->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetCollectionValueArray, &SetCollectionValueArray_Params, nullptr);
	uFnSetCollectionValueArray->FunctionFlags |= 0x400;
	uFnSetCollectionValueArray->iNative = 25615;

	memcpy_s(&CollectionValues, sizeof(CollectionValues), &SetCollectionValueArray_Params.CollectionValues, sizeof(SetCollectionValueArray_Params.CollectionValues));

	return SetCollectionValueArray_Params.ReturnValue;
};

// Function Engine.UIDynamicFieldProvider.GetCollectionValueArray
// [0x00424401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20529])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    FieldName                      (CPF_Parm)
// uint32_t                       bPersistent                    (CPF_OptionalParm | CPF_Parm)
// class FName                    CellTag                        (CPF_OptionalParm | CPF_Parm)
// class TArray<class FString>    out_DataValueArray             (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

bool UUIDynamicFieldProvider::GetCollectionValueArray(const class FName& FieldName, bool bPersistent, const class FName& CellTag, class TArray<class FString>& out_DataValueArray)
{
	static UFunction* uFnGetCollectionValueArray = nullptr;

	if (!uFnGetCollectionValueArray)
	{
		uFnGetCollectionValueArray = UFunction::FindFunction("Function Engine.UIDynamicFieldProvider.GetCollectionValueArray");
	}

	UUIDynamicFieldProvider_execGetCollectionValueArray_Params GetCollectionValueArray_Params;
	memset(&GetCollectionValueArray_Params, 0, sizeof(GetCollectionValueArray_Params));
	memcpy_s(&GetCollectionValueArray_Params.FieldName, sizeof(GetCollectionValueArray_Params.FieldName), &FieldName, sizeof(FieldName));
	GetCollectionValueArray_Params.bPersistent = bPersistent;
	memcpy_s(&GetCollectionValueArray_Params.CellTag, sizeof(GetCollectionValueArray_Params.CellTag), &CellTag, sizeof(CellTag));
	memcpy_s(&GetCollectionValueArray_Params.out_DataValueArray, sizeof(GetCollectionValueArray_Params.out_DataValueArray), &out_DataValueArray, sizeof(out_DataValueArray));

	uFnGetCollectionValueArray->iNative = 0;
	uFnGetCollectionValueArray->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetCollectionValueArray, &GetCollectionValueArray_Params, nullptr);
	uFnGetCollectionValueArray->FunctionFlags |= 0x400;
	uFnGetCollectionValueArray->iNative = 20529;

	memcpy_s(&out_DataValueArray, sizeof(out_DataValueArray), &GetCollectionValueArray_Params.out_DataValueArray, sizeof(GetCollectionValueArray_Params.out_DataValueArray));

	return GetCollectionValueArray_Params.ReturnValue;
};

// Function Engine.UIDynamicFieldProvider.GetCollectionValueSchema
// [0x00424401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20530])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    FieldName                      (CPF_Parm)
// uint32_t                       bPersistent                    (CPF_OptionalParm | CPF_Parm)
// class TArray<class FName>      out_CellTagArray               (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

bool UUIDynamicFieldProvider::GetCollectionValueSchema(const class FName& FieldName, bool bPersistent, class TArray<class FName>& out_CellTagArray)
{
	static UFunction* uFnGetCollectionValueSchema = nullptr;

	if (!uFnGetCollectionValueSchema)
	{
		uFnGetCollectionValueSchema = UFunction::FindFunction("Function Engine.UIDynamicFieldProvider.GetCollectionValueSchema");
	}

	UUIDynamicFieldProvider_execGetCollectionValueSchema_Params GetCollectionValueSchema_Params;
	memset(&GetCollectionValueSchema_Params, 0, sizeof(GetCollectionValueSchema_Params));
	memcpy_s(&GetCollectionValueSchema_Params.FieldName, sizeof(GetCollectionValueSchema_Params.FieldName), &FieldName, sizeof(FieldName));
	GetCollectionValueSchema_Params.bPersistent = bPersistent;
	memcpy_s(&GetCollectionValueSchema_Params.out_CellTagArray, sizeof(GetCollectionValueSchema_Params.out_CellTagArray), &out_CellTagArray, sizeof(out_CellTagArray));

	uFnGetCollectionValueSchema->iNative = 0;
	uFnGetCollectionValueSchema->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetCollectionValueSchema, &GetCollectionValueSchema_Params, nullptr);
	uFnGetCollectionValueSchema->FunctionFlags |= 0x400;
	uFnGetCollectionValueSchema->iNative = 20530;

	memcpy_s(&out_CellTagArray, sizeof(out_CellTagArray), &GetCollectionValueSchema_Params.out_CellTagArray, sizeof(GetCollectionValueSchema_Params.out_CellTagArray));

	return GetCollectionValueSchema_Params.ReturnValue;
};

// Function Engine.UIDynamicFieldProvider.SavePersistentProviderData
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25335])
// Parameter Info:

void UUIDynamicFieldProvider::SavePersistentProviderData()
{
	static UFunction* uFnSavePersistentProviderData = nullptr;

	if (!uFnSavePersistentProviderData)
	{
		uFnSavePersistentProviderData = UFunction::FindFunction("Function Engine.UIDynamicFieldProvider.SavePersistentProviderData");
	}

	UUIDynamicFieldProvider_execSavePersistentProviderData_Params SavePersistentProviderData_Params;
	memset(&SavePersistentProviderData_Params, 0, sizeof(SavePersistentProviderData_Params));

	uFnSavePersistentProviderData->iNative = 0;
	uFnSavePersistentProviderData->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSavePersistentProviderData, &SavePersistentProviderData_Params, nullptr);
	uFnSavePersistentProviderData->FunctionFlags |= 0x400;
	uFnSavePersistentProviderData->iNative = 25335;
};

// Function Engine.UIDynamicFieldProvider.SetField
// [0x00424401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[25652])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    FieldName                      (CPF_Parm)
// uint32_t                       bChangeExistingOnly            (CPF_OptionalParm | CPF_Parm)
// struct FUIProviderScriptFieldValue FieldValue                     (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

bool UUIDynamicFieldProvider::SetField(const class FName& FieldName, bool bChangeExistingOnly, struct FUIProviderScriptFieldValue& FieldValue)
{
	static UFunction* uFnSetField = nullptr;

	if (!uFnSetField)
	{
		uFnSetField = UFunction::FindFunction("Function Engine.UIDynamicFieldProvider.SetField");
	}

	UUIDynamicFieldProvider_execSetField_Params SetField_Params;
	memset(&SetField_Params, 0, sizeof(SetField_Params));
	memcpy_s(&SetField_Params.FieldName, sizeof(SetField_Params.FieldName), &FieldName, sizeof(FieldName));
	SetField_Params.bChangeExistingOnly = bChangeExistingOnly;
	memcpy_s(&SetField_Params.FieldValue, sizeof(SetField_Params.FieldValue), &FieldValue, sizeof(FieldValue));

	uFnSetField->iNative = 0;
	uFnSetField->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetField, &SetField_Params, nullptr);
	uFnSetField->FunctionFlags |= 0x400;
	uFnSetField->iNative = 25652;

	memcpy_s(&FieldValue, sizeof(FieldValue), &SetField_Params.FieldValue, sizeof(SetField_Params.FieldValue));

	return SetField_Params.ReturnValue;
};

// Function Engine.UIDynamicFieldProvider.GetField
// [0x00420401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20577])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    FieldName                      (CPF_Parm)
// struct FUIProviderScriptFieldValue out_Field                      (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

bool UUIDynamicFieldProvider::GetField(const class FName& FieldName, struct FUIProviderScriptFieldValue& out_Field)
{
	static UFunction* uFnGetField = nullptr;

	if (!uFnGetField)
	{
		uFnGetField = UFunction::FindFunction("Function Engine.UIDynamicFieldProvider.GetField");
	}

	UUIDynamicFieldProvider_execGetField_Params GetField_Params;
	memset(&GetField_Params, 0, sizeof(GetField_Params));
	memcpy_s(&GetField_Params.FieldName, sizeof(GetField_Params.FieldName), &FieldName, sizeof(FieldName));
	memcpy_s(&GetField_Params.out_Field, sizeof(GetField_Params.out_Field), &out_Field, sizeof(out_Field));

	uFnGetField->iNative = 0;
	uFnGetField->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetField, &GetField_Params, nullptr);
	uFnGetField->FunctionFlags |= 0x400;
	uFnGetField->iNative = 20577;

	memcpy_s(&out_Field, sizeof(out_Field), &GetField_Params.out_Field, sizeof(GetField_Params.out_Field));

	return GetField_Params.ReturnValue;
};

// Function Engine.UIDynamicFieldProvider.ClearFields
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[18128])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       bReinitializeRuntimeFields     (CPF_OptionalParm | CPF_Parm)

bool UUIDynamicFieldProvider::ClearFields(bool bReinitializeRuntimeFields)
{
	static UFunction* uFnClearFields = nullptr;

	if (!uFnClearFields)
	{
		uFnClearFields = UFunction::FindFunction("Function Engine.UIDynamicFieldProvider.ClearFields");
	}

	UUIDynamicFieldProvider_execClearFields_Params ClearFields_Params;
	memset(&ClearFields_Params, 0, sizeof(ClearFields_Params));
	ClearFields_Params.bReinitializeRuntimeFields = bReinitializeRuntimeFields;

	uFnClearFields->iNative = 0;
	uFnClearFields->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnClearFields, &ClearFields_Params, nullptr);
	uFnClearFields->FunctionFlags |= 0x400;
	uFnClearFields->iNative = 18128;

	return ClearFields_Params.ReturnValue;
};

// Function Engine.UIDynamicFieldProvider.FindFieldIndex
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[20101])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    FieldName                      (CPF_Parm)
// uint32_t                       bSearchPersistentFields        (CPF_OptionalParm | CPF_Parm)

int32_t UUIDynamicFieldProvider::FindFieldIndex(const class FName& FieldName, bool bSearchPersistentFields)
{
	static UFunction* uFnFindFieldIndex = nullptr;

	if (!uFnFindFieldIndex)
	{
		uFnFindFieldIndex = UFunction::FindFunction("Function Engine.UIDynamicFieldProvider.FindFieldIndex");
	}

	UUIDynamicFieldProvider_execFindFieldIndex_Params FindFieldIndex_Params;
	memset(&FindFieldIndex_Params, 0, sizeof(FindFieldIndex_Params));
	memcpy_s(&FindFieldIndex_Params.FieldName, sizeof(FindFieldIndex_Params.FieldName), &FieldName, sizeof(FieldName));
	FindFieldIndex_Params.bSearchPersistentFields = bSearchPersistentFields;

	uFnFindFieldIndex->iNative = 0;
	uFnFindFieldIndex->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnFindFieldIndex, &FindFieldIndex_Params, nullptr);
	uFnFindFieldIndex->FunctionFlags |= 0x400;
	uFnFindFieldIndex->iNative = 20101;

	return FindFieldIndex_Params.ReturnValue;
};

// Function Engine.UIDynamicFieldProvider.RemoveField
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25069])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    FieldName                      (CPF_Parm)

bool UUIDynamicFieldProvider::RemoveField(const class FName& FieldName)
{
	static UFunction* uFnRemoveField = nullptr;

	if (!uFnRemoveField)
	{
		uFnRemoveField = UFunction::FindFunction("Function Engine.UIDynamicFieldProvider.RemoveField");
	}

	UUIDynamicFieldProvider_execRemoveField_Params RemoveField_Params;
	memset(&RemoveField_Params, 0, sizeof(RemoveField_Params));
	memcpy_s(&RemoveField_Params.FieldName, sizeof(RemoveField_Params.FieldName), &FieldName, sizeof(FieldName));

	uFnRemoveField->iNative = 0;
	uFnRemoveField->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnRemoveField, &RemoveField_Params, nullptr);
	uFnRemoveField->FunctionFlags |= 0x400;
	uFnRemoveField->iNative = 25069;

	return RemoveField_Params.ReturnValue;
};

// Function Engine.UIDynamicFieldProvider.AddField
// [0x00424401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[15305])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    FieldName                      (CPF_Parm)
// EUIDataProviderFieldType       FieldType                      (CPF_OptionalParm | CPF_Parm)
// uint32_t                       bPersistent                    (CPF_OptionalParm | CPF_Parm)
// int32_t                        out_InsertPosition             (CPF_OptionalParm | CPF_Parm | CPF_OutParm)

bool UUIDynamicFieldProvider::AddField(const class FName& FieldName, EUIDataProviderFieldType FieldType, bool bPersistent, int32_t& out_InsertPosition)
{
	static UFunction* uFnAddField = nullptr;

	if (!uFnAddField)
	{
		uFnAddField = UFunction::FindFunction("Function Engine.UIDynamicFieldProvider.AddField");
	}

	UUIDynamicFieldProvider_execAddField_Params AddField_Params;
	memset(&AddField_Params, 0, sizeof(AddField_Params));
	memcpy_s(&AddField_Params.FieldName, sizeof(AddField_Params.FieldName), &FieldName, sizeof(FieldName));
	memcpy_s(&AddField_Params.FieldType, sizeof(AddField_Params.FieldType), &FieldType, sizeof(FieldType));
	AddField_Params.bPersistent = bPersistent;
	memcpy_s(&AddField_Params.out_InsertPosition, sizeof(AddField_Params.out_InsertPosition), &out_InsertPosition, sizeof(out_InsertPosition));

	uFnAddField->iNative = 0;
	uFnAddField->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnAddField, &AddField_Params, nullptr);
	uFnAddField->FunctionFlags |= 0x400;
	uFnAddField->iNative = 15305;

	memcpy_s(&out_InsertPosition, sizeof(out_InsertPosition), &AddField_Params.out_InsertPosition, sizeof(AddField_Params.out_InsertPosition));

	return AddField_Params.ReturnValue;
};

// Function Engine.UIDynamicFieldProvider.InitializeRuntimeFields
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[21152])
// Parameter Info:

void UUIDynamicFieldProvider::InitializeRuntimeFields()
{
	static UFunction* uFnInitializeRuntimeFields = nullptr;

	if (!uFnInitializeRuntimeFields)
	{
		uFnInitializeRuntimeFields = UFunction::FindFunction("Function Engine.UIDynamicFieldProvider.InitializeRuntimeFields");
	}

	UUIDynamicFieldProvider_execInitializeRuntimeFields_Params InitializeRuntimeFields_Params;
	memset(&InitializeRuntimeFields_Params, 0, sizeof(InitializeRuntimeFields_Params));

	uFnInitializeRuntimeFields->iNative = 0;
	uFnInitializeRuntimeFields->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnInitializeRuntimeFields, &InitializeRuntimeFields_Params, nullptr);
	uFnInitializeRuntimeFields->FunctionFlags |= 0x400;
	uFnInitializeRuntimeFields->iNative = 21152;
};

// Function Engine.UIPropertyDataProvider.GetCustomPropertyValue
// [0x00424800] (FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        ArrayIndex                     (CPF_OptionalParm | CPF_Parm)
// struct FUIProviderScriptFieldValue PropertyValue                  (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

bool UUIPropertyDataProvider::eventGetCustomPropertyValue(int32_t ArrayIndex, struct FUIProviderScriptFieldValue& PropertyValue)
{
	static UFunction* uFnGetCustomPropertyValue = nullptr;

	if (!uFnGetCustomPropertyValue)
	{
		uFnGetCustomPropertyValue = UFunction::FindFunction("Function Engine.UIPropertyDataProvider.GetCustomPropertyValue");
	}

	UUIPropertyDataProvider_eventGetCustomPropertyValue_Params GetCustomPropertyValue_Params;
	memset(&GetCustomPropertyValue_Params, 0, sizeof(GetCustomPropertyValue_Params));
	memcpy_s(&GetCustomPropertyValue_Params.ArrayIndex, sizeof(GetCustomPropertyValue_Params.ArrayIndex), &ArrayIndex, sizeof(ArrayIndex));
	memcpy_s(&GetCustomPropertyValue_Params.PropertyValue, sizeof(GetCustomPropertyValue_Params.PropertyValue), &PropertyValue, sizeof(PropertyValue));

	this->ProcessEvent(uFnGetCustomPropertyValue, &GetCustomPropertyValue_Params, nullptr);

	memcpy_s(&PropertyValue, sizeof(PropertyValue), &GetCustomPropertyValue_Params.PropertyValue, sizeof(GetCustomPropertyValue_Params.PropertyValue));

	return GetCustomPropertyValue_Params.ReturnValue;
};

// Function Engine.UIPropertyDataProvider.CanSupportComplexPropertyType
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UProperty*               UnsupportedProperty            (CPF_Parm)

bool UUIPropertyDataProvider::CanSupportComplexPropertyType(class UProperty* UnsupportedProperty)
{
	static UFunction* uFnCanSupportComplexPropertyType = nullptr;

	if (!uFnCanSupportComplexPropertyType)
	{
		uFnCanSupportComplexPropertyType = UFunction::FindFunction("Function Engine.UIPropertyDataProvider.CanSupportComplexPropertyType");
	}

	UUIPropertyDataProvider_execCanSupportComplexPropertyType_Params CanSupportComplexPropertyType_Params;
	memset(&CanSupportComplexPropertyType_Params, 0, sizeof(CanSupportComplexPropertyType_Params));
	CanSupportComplexPropertyType_Params.UnsupportedProperty = UnsupportedProperty;

	this->ProcessEvent(uFnCanSupportComplexPropertyType, &CanSupportComplexPropertyType_Params, nullptr);

	return CanSupportComplexPropertyType_Params.ReturnValue;
};

// Function Engine.UIDynamicDataProvider.CleanupDataProvider
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UUIDynamicDataProvider::CleanupDataProvider()
{
	static UFunction* uFnCleanupDataProvider = nullptr;

	if (!uFnCleanupDataProvider)
	{
		uFnCleanupDataProvider = UFunction::FindFunction("Function Engine.UIDynamicDataProvider.CleanupDataProvider");
	}

	UUIDynamicDataProvider_execCleanupDataProvider_Params CleanupDataProvider_Params;
	memset(&CleanupDataProvider_Params, 0, sizeof(CleanupDataProvider_Params));

	this->ProcessEvent(uFnCleanupDataProvider, &CleanupDataProvider_Params, nullptr);

	return CleanupDataProvider_Params.ReturnValue;
};

// Function Engine.UIDynamicDataProvider.GetDataSource
// [0x00020003] (FUNC_Final | FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UObject*                 ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class UObject* UUIDynamicDataProvider::GetDataSource()
{
	static UFunction* uFnGetDataSource = nullptr;

	if (!uFnGetDataSource)
	{
		uFnGetDataSource = UFunction::FindFunction("Function Engine.UIDynamicDataProvider.GetDataSource");
	}

	UUIDynamicDataProvider_execGetDataSource_Params GetDataSource_Params;
	memset(&GetDataSource_Params, 0, sizeof(GetDataSource_Params));

	this->ProcessEvent(uFnGetDataSource, &GetDataSource_Params, nullptr);

	return GetDataSource_Params.ReturnValue;
};

// Function Engine.UIDynamicDataProvider.IsValidDataSourceClass
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UObject*                 PotentialDataSourceClass       (CPF_Parm)

bool UUIDynamicDataProvider::eventIsValidDataSourceClass(class UObject* PotentialDataSourceClass)
{
	static UFunction* uFnIsValidDataSourceClass = nullptr;

	if (!uFnIsValidDataSourceClass)
	{
		uFnIsValidDataSourceClass = UFunction::FindFunction("Function Engine.UIDynamicDataProvider.IsValidDataSourceClass");
	}

	UUIDynamicDataProvider_eventIsValidDataSourceClass_Params IsValidDataSourceClass_Params;
	memset(&IsValidDataSourceClass_Params, 0, sizeof(IsValidDataSourceClass_Params));
	IsValidDataSourceClass_Params.PotentialDataSourceClass = PotentialDataSourceClass;

	this->ProcessEvent(uFnIsValidDataSourceClass, &IsValidDataSourceClass_Params, nullptr);

	return IsValidDataSourceClass_Params.ReturnValue;
};

// Function Engine.UIDynamicDataProvider.ProviderInstanceUnbound
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UObject*                 DataSourceInstance             (CPF_Parm)

void UUIDynamicDataProvider::eventProviderInstanceUnbound(class UObject* DataSourceInstance)
{
	static UFunction* uFnProviderInstanceUnbound = nullptr;

	if (!uFnProviderInstanceUnbound)
	{
		uFnProviderInstanceUnbound = UFunction::FindFunction("Function Engine.UIDynamicDataProvider.ProviderInstanceUnbound");
	}

	UUIDynamicDataProvider_eventProviderInstanceUnbound_Params ProviderInstanceUnbound_Params;
	memset(&ProviderInstanceUnbound_Params, 0, sizeof(ProviderInstanceUnbound_Params));
	ProviderInstanceUnbound_Params.DataSourceInstance = DataSourceInstance;

	this->ProcessEvent(uFnProviderInstanceUnbound, &ProviderInstanceUnbound_Params, nullptr);
};

// Function Engine.UIDynamicDataProvider.ProviderInstanceBound
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UObject*                 DataSourceInstance             (CPF_Parm)

void UUIDynamicDataProvider::eventProviderInstanceBound(class UObject* DataSourceInstance)
{
	static UFunction* uFnProviderInstanceBound = nullptr;

	if (!uFnProviderInstanceBound)
	{
		uFnProviderInstanceBound = UFunction::FindFunction("Function Engine.UIDynamicDataProvider.ProviderInstanceBound");
	}

	UUIDynamicDataProvider_eventProviderInstanceBound_Params ProviderInstanceBound_Params;
	memset(&ProviderInstanceBound_Params, 0, sizeof(ProviderInstanceBound_Params));
	ProviderInstanceBound_Params.DataSourceInstance = DataSourceInstance;

	this->ProcessEvent(uFnProviderInstanceBound, &ProviderInstanceBound_Params, nullptr);
};

// Function Engine.UIDynamicDataProvider.UnbindProviderInstance
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[26930])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UUIDynamicDataProvider::UnbindProviderInstance()
{
	static UFunction* uFnUnbindProviderInstance = nullptr;

	if (!uFnUnbindProviderInstance)
	{
		uFnUnbindProviderInstance = UFunction::FindFunction("Function Engine.UIDynamicDataProvider.UnbindProviderInstance");
	}

	UUIDynamicDataProvider_execUnbindProviderInstance_Params UnbindProviderInstance_Params;
	memset(&UnbindProviderInstance_Params, 0, sizeof(UnbindProviderInstance_Params));

	uFnUnbindProviderInstance->iNative = 0;
	uFnUnbindProviderInstance->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnUnbindProviderInstance, &UnbindProviderInstance_Params, nullptr);
	uFnUnbindProviderInstance->FunctionFlags |= 0x400;
	uFnUnbindProviderInstance->iNative = 26930;

	return UnbindProviderInstance_Params.ReturnValue;
};

// Function Engine.UIDynamicDataProvider.BindProviderInstance
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[16569])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UObject*                 DataSourceInstance             (CPF_Parm)

bool UUIDynamicDataProvider::BindProviderInstance(class UObject* DataSourceInstance)
{
	static UFunction* uFnBindProviderInstance = nullptr;

	if (!uFnBindProviderInstance)
	{
		uFnBindProviderInstance = UFunction::FindFunction("Function Engine.UIDynamicDataProvider.BindProviderInstance");
	}

	UUIDynamicDataProvider_execBindProviderInstance_Params BindProviderInstance_Params;
	memset(&BindProviderInstance_Params, 0, sizeof(BindProviderInstance_Params));
	BindProviderInstance_Params.DataSourceInstance = DataSourceInstance;

	uFnBindProviderInstance->iNative = 0;
	uFnBindProviderInstance->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnBindProviderInstance, &BindProviderInstance_Params, nullptr);
	uFnBindProviderInstance->FunctionFlags |= 0x400;
	uFnBindProviderInstance->iNative = 16569;

	return BindProviderInstance_Params.ReturnValue;
};

// Function Engine.UIDataProvider_Settings.OnSettingValueUpdated
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FName                    SettingName                    (CPF_Parm)

void UUIDataProvider_Settings::OnSettingValueUpdated(const class FName& SettingName)
{
	static UFunction* uFnOnSettingValueUpdated = nullptr;

	if (!uFnOnSettingValueUpdated)
	{
		uFnOnSettingValueUpdated = UFunction::FindFunction("Function Engine.UIDataProvider_Settings.OnSettingValueUpdated");
	}

	UUIDataProvider_Settings_execOnSettingValueUpdated_Params OnSettingValueUpdated_Params;
	memset(&OnSettingValueUpdated_Params, 0, sizeof(OnSettingValueUpdated_Params));
	memcpy_s(&OnSettingValueUpdated_Params.SettingName, sizeof(OnSettingValueUpdated_Params.SettingName), &SettingName, sizeof(SettingName));

	this->ProcessEvent(uFnOnSettingValueUpdated, &OnSettingValueUpdated_Params, nullptr);
};

// Function Engine.UIDataProvider_Settings.ArrayProviderPropertyChanged
// [0x00024002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UUIDataProvider*         SourceProvider                 (CPF_Parm)
// class FName                    PropTag                        (CPF_OptionalParm | CPF_Parm)

void UUIDataProvider_Settings::ArrayProviderPropertyChanged(class UUIDataProvider* SourceProvider, const class FName& PropTag)
{
	static UFunction* uFnArrayProviderPropertyChanged = nullptr;

	if (!uFnArrayProviderPropertyChanged)
	{
		uFnArrayProviderPropertyChanged = UFunction::FindFunction("Function Engine.UIDataProvider_Settings.ArrayProviderPropertyChanged");
	}

	UUIDataProvider_Settings_execArrayProviderPropertyChanged_Params ArrayProviderPropertyChanged_Params;
	memset(&ArrayProviderPropertyChanged_Params, 0, sizeof(ArrayProviderPropertyChanged_Params));
	ArrayProviderPropertyChanged_Params.SourceProvider = SourceProvider;
	memcpy_s(&ArrayProviderPropertyChanged_Params.PropTag, sizeof(ArrayProviderPropertyChanged_Params.PropTag), &PropTag, sizeof(PropTag));

	this->ProcessEvent(uFnArrayProviderPropertyChanged, &ArrayProviderPropertyChanged_Params, nullptr);
};

// Function Engine.UIDataProvider_Settings.ProviderInstanceUnbound
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UObject*                 DataSourceInstance             (CPF_Parm)

void UUIDataProvider_Settings::eventProviderInstanceUnbound(class UObject* DataSourceInstance)
{
	static UFunction* uFnProviderInstanceUnbound = nullptr;

	if (!uFnProviderInstanceUnbound)
	{
		uFnProviderInstanceUnbound = UFunction::FindFunction("Function Engine.UIDataProvider_Settings.ProviderInstanceUnbound");
	}

	UUIDataProvider_Settings_eventProviderInstanceUnbound_Params ProviderInstanceUnbound_Params;
	memset(&ProviderInstanceUnbound_Params, 0, sizeof(ProviderInstanceUnbound_Params));
	ProviderInstanceUnbound_Params.DataSourceInstance = DataSourceInstance;

	this->ProcessEvent(uFnProviderInstanceUnbound, &ProviderInstanceUnbound_Params, nullptr);
};

// Function Engine.UIDataProvider_Settings.ProviderInstanceBound
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UObject*                 DataSourceInstance             (CPF_Parm)

void UUIDataProvider_Settings::eventProviderInstanceBound(class UObject* DataSourceInstance)
{
	static UFunction* uFnProviderInstanceBound = nullptr;

	if (!uFnProviderInstanceBound)
	{
		uFnProviderInstanceBound = UFunction::FindFunction("Function Engine.UIDataProvider_Settings.ProviderInstanceBound");
	}

	UUIDataProvider_Settings_eventProviderInstanceBound_Params ProviderInstanceBound_Params;
	memset(&ProviderInstanceBound_Params, 0, sizeof(ProviderInstanceBound_Params));
	ProviderInstanceBound_Params.DataSourceInstance = DataSourceInstance;

	this->ProcessEvent(uFnProviderInstanceBound, &ProviderInstanceBound_Params, nullptr);
};

// Function Engine.UIResourceDataProvider.InitializeProvider
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bIsEditor                      (CPF_Parm)

void UUIResourceDataProvider::eventInitializeProvider(bool bIsEditor)
{
	static UFunction* uFnInitializeProvider = nullptr;

	if (!uFnInitializeProvider)
	{
		uFnInitializeProvider = UFunction::FindFunction("Function Engine.UIResourceDataProvider.InitializeProvider");
	}

	UUIResourceDataProvider_eventInitializeProvider_Params InitializeProvider_Params;
	memset(&InitializeProvider_Params, 0, sizeof(InitializeProvider_Params));
	InitializeProvider_Params.bIsEditor = bIsEditor;

	this->ProcessEvent(uFnInitializeProvider, &InitializeProvider_Params, nullptr);
};

// Function Engine.UIDataProvider_MenuItem.IsFiltered
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[21378])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UUIDataProvider_MenuItem::IsFiltered()
{
	static UFunction* uFnIsFiltered = nullptr;

	if (!uFnIsFiltered)
	{
		uFnIsFiltered = UFunction::FindFunction("Function Engine.UIDataProvider_MenuItem.IsFiltered");
	}

	UUIDataProvider_MenuItem_execIsFiltered_Params IsFiltered_Params;
	memset(&IsFiltered_Params, 0, sizeof(IsFiltered_Params));

	uFnIsFiltered->iNative = 0;
	uFnIsFiltered->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnIsFiltered, &IsFiltered_Params, nullptr);
	uFnIsFiltered->FunctionFlags |= 0x400;
	uFnIsFiltered->iNative = 21378;

	return IsFiltered_Params.ReturnValue;
};

// Function Engine.UIResourceCombinationProvider.ReplaceProviderCollection
// [0x00420002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    TargetFieldTag                 (CPF_Parm)
// class TArray<struct FUIDataProviderField> out_Fields                     (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)
// class TArray<class UUIDataProvider*> ReplacementProviders           (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

bool UUIResourceCombinationProvider::ReplaceProviderCollection(const class FName& TargetFieldTag, class TArray<struct FUIDataProviderField>& out_Fields, class TArray<class UUIDataProvider*>& ReplacementProviders)
{
	static UFunction* uFnReplaceProviderCollection = nullptr;

	if (!uFnReplaceProviderCollection)
	{
		uFnReplaceProviderCollection = UFunction::FindFunction("Function Engine.UIResourceCombinationProvider.ReplaceProviderCollection");
	}

	UUIResourceCombinationProvider_execReplaceProviderCollection_Params ReplaceProviderCollection_Params;
	memset(&ReplaceProviderCollection_Params, 0, sizeof(ReplaceProviderCollection_Params));
	memcpy_s(&ReplaceProviderCollection_Params.TargetFieldTag, sizeof(ReplaceProviderCollection_Params.TargetFieldTag), &TargetFieldTag, sizeof(TargetFieldTag));
	memcpy_s(&ReplaceProviderCollection_Params.out_Fields, sizeof(ReplaceProviderCollection_Params.out_Fields), &out_Fields, sizeof(out_Fields));
	memcpy_s(&ReplaceProviderCollection_Params.ReplacementProviders, sizeof(ReplaceProviderCollection_Params.ReplacementProviders), &ReplacementProviders, sizeof(ReplacementProviders));

	this->ProcessEvent(uFnReplaceProviderCollection, &ReplaceProviderCollection_Params, nullptr);

	memcpy_s(&out_Fields, sizeof(out_Fields), &ReplaceProviderCollection_Params.out_Fields, sizeof(ReplaceProviderCollection_Params.out_Fields));
	memcpy_s(&ReplacementProviders, sizeof(ReplacementProviders), &ReplaceProviderCollection_Params.ReplacementProviders, sizeof(ReplaceProviderCollection_Params.ReplacementProviders));

	return ReplaceProviderCollection_Params.ReturnValue;
};

// Function Engine.UIResourceCombinationProvider.ReplaceProviderValue
// [0x00420002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    TargetFieldTag                 (CPF_Parm)
// class UUIDataProvider*         ReplacementProvider            (CPF_Parm)
// class TArray<struct FUIDataProviderField> out_Fields                     (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

bool UUIResourceCombinationProvider::ReplaceProviderValue(const class FName& TargetFieldTag, class UUIDataProvider* ReplacementProvider, class TArray<struct FUIDataProviderField>& out_Fields)
{
	static UFunction* uFnReplaceProviderValue = nullptr;

	if (!uFnReplaceProviderValue)
	{
		uFnReplaceProviderValue = UFunction::FindFunction("Function Engine.UIResourceCombinationProvider.ReplaceProviderValue");
	}

	UUIResourceCombinationProvider_execReplaceProviderValue_Params ReplaceProviderValue_Params;
	memset(&ReplaceProviderValue_Params, 0, sizeof(ReplaceProviderValue_Params));
	memcpy_s(&ReplaceProviderValue_Params.TargetFieldTag, sizeof(ReplaceProviderValue_Params.TargetFieldTag), &TargetFieldTag, sizeof(TargetFieldTag));
	ReplaceProviderValue_Params.ReplacementProvider = ReplacementProvider;
	memcpy_s(&ReplaceProviderValue_Params.out_Fields, sizeof(ReplaceProviderValue_Params.out_Fields), &out_Fields, sizeof(out_Fields));

	this->ProcessEvent(uFnReplaceProviderValue, &ReplaceProviderValue_Params, nullptr);

	memcpy_s(&out_Fields, sizeof(out_Fields), &ReplaceProviderValue_Params.out_Fields, sizeof(ReplaceProviderValue_Params.out_Fields));

	return ReplaceProviderValue_Params.ReturnValue;
};

// Function Engine.UIResourceCombinationProvider.ClearProviderReferences
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UUIResourceCombinationProvider::ClearProviderReferences()
{
	static UFunction* uFnClearProviderReferences = nullptr;

	if (!uFnClearProviderReferences)
	{
		uFnClearProviderReferences = UFunction::FindFunction("Function Engine.UIResourceCombinationProvider.ClearProviderReferences");
	}

	UUIResourceCombinationProvider_execClearProviderReferences_Params ClearProviderReferences_Params;
	memset(&ClearProviderReferences_Params, 0, sizeof(ClearProviderReferences_Params));

	this->ProcessEvent(uFnClearProviderReferences, &ClearProviderReferences_Params, nullptr);
};

// Function Engine.UIResourceCombinationProvider.GetCellFieldValue
// [0x00424802] (FUNC_Defined | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    FieldName                      (CPF_Parm)
// class FName                    CellTag                        (CPF_Parm)
// int32_t                        ListIndex                      (CPF_Parm)
// int32_t                        ArrayIndex                     (CPF_OptionalParm | CPF_Parm)
// struct FUIProviderFieldValue   out_FieldValue                 (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

bool UUIResourceCombinationProvider::eventGetCellFieldValue(const class FName& FieldName, const class FName& CellTag, int32_t ListIndex, int32_t ArrayIndex, struct FUIProviderFieldValue& out_FieldValue)
{
	static UFunction* uFnGetCellFieldValue = nullptr;

	if (!uFnGetCellFieldValue)
	{
		uFnGetCellFieldValue = UFunction::FindFunction("Function Engine.UIResourceCombinationProvider.GetCellFieldValue");
	}

	UUIResourceCombinationProvider_eventGetCellFieldValue_Params GetCellFieldValue_Params;
	memset(&GetCellFieldValue_Params, 0, sizeof(GetCellFieldValue_Params));
	memcpy_s(&GetCellFieldValue_Params.FieldName, sizeof(GetCellFieldValue_Params.FieldName), &FieldName, sizeof(FieldName));
	memcpy_s(&GetCellFieldValue_Params.CellTag, sizeof(GetCellFieldValue_Params.CellTag), &CellTag, sizeof(CellTag));
	memcpy_s(&GetCellFieldValue_Params.ListIndex, sizeof(GetCellFieldValue_Params.ListIndex), &ListIndex, sizeof(ListIndex));
	memcpy_s(&GetCellFieldValue_Params.ArrayIndex, sizeof(GetCellFieldValue_Params.ArrayIndex), &ArrayIndex, sizeof(ArrayIndex));
	memcpy_s(&GetCellFieldValue_Params.out_FieldValue, sizeof(GetCellFieldValue_Params.out_FieldValue), &out_FieldValue, sizeof(out_FieldValue));

	this->ProcessEvent(uFnGetCellFieldValue, &GetCellFieldValue_Params, nullptr);

	memcpy_s(&out_FieldValue, sizeof(out_FieldValue), &GetCellFieldValue_Params.out_FieldValue, sizeof(GetCellFieldValue_Params.out_FieldValue));

	return GetCellFieldValue_Params.ReturnValue;
};

// Function Engine.UIResourceCombinationProvider.GetCellFieldType
// [0x00420802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    FieldName                      (CPF_Parm)
// class FName                    CellTag                        (CPF_Parm)
// EUIDataProviderFieldType       FieldType                      (CPF_Parm | CPF_OutParm)

bool UUIResourceCombinationProvider::eventGetCellFieldType(const class FName& FieldName, const class FName& CellTag, EUIDataProviderFieldType& FieldType)
{
	static UFunction* uFnGetCellFieldType = nullptr;

	if (!uFnGetCellFieldType)
	{
		uFnGetCellFieldType = UFunction::FindFunction("Function Engine.UIResourceCombinationProvider.GetCellFieldType");
	}

	UUIResourceCombinationProvider_eventGetCellFieldType_Params GetCellFieldType_Params;
	memset(&GetCellFieldType_Params, 0, sizeof(GetCellFieldType_Params));
	memcpy_s(&GetCellFieldType_Params.FieldName, sizeof(GetCellFieldType_Params.FieldName), &FieldName, sizeof(FieldName));
	memcpy_s(&GetCellFieldType_Params.CellTag, sizeof(GetCellFieldType_Params.CellTag), &CellTag, sizeof(CellTag));
	memcpy_s(&GetCellFieldType_Params.FieldType, sizeof(GetCellFieldType_Params.FieldType), &FieldType, sizeof(FieldType));

	this->ProcessEvent(uFnGetCellFieldType, &GetCellFieldType_Params, nullptr);

	memcpy_s(&FieldType, sizeof(FieldType), &GetCellFieldType_Params.FieldType, sizeof(GetCellFieldType_Params.FieldType));

	return GetCellFieldType_Params.ReturnValue;
};

// Function Engine.UIResourceCombinationProvider.GetElementCellTags
// [0x00424802] (FUNC_Defined | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// class FName                    FieldName                      (CPF_Parm)
// class TArray<class FName>      CellFieldTags                  (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)
// class TArray<class FString>    ColumnHeaderDisplayText        (CPF_OptionalParm | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void UUIResourceCombinationProvider::eventGetElementCellTags(const class FName& FieldName, class TArray<class FName>& CellFieldTags, class TArray<class FString>& ColumnHeaderDisplayText)
{
	static UFunction* uFnGetElementCellTags = nullptr;

	if (!uFnGetElementCellTags)
	{
		uFnGetElementCellTags = UFunction::FindFunction("Function Engine.UIResourceCombinationProvider.GetElementCellTags");
	}

	UUIResourceCombinationProvider_eventGetElementCellTags_Params GetElementCellTags_Params;
	memset(&GetElementCellTags_Params, 0, sizeof(GetElementCellTags_Params));
	memcpy_s(&GetElementCellTags_Params.FieldName, sizeof(GetElementCellTags_Params.FieldName), &FieldName, sizeof(FieldName));
	memcpy_s(&GetElementCellTags_Params.CellFieldTags, sizeof(GetElementCellTags_Params.CellFieldTags), &CellFieldTags, sizeof(CellFieldTags));
	memcpy_s(&GetElementCellTags_Params.ColumnHeaderDisplayText, sizeof(GetElementCellTags_Params.ColumnHeaderDisplayText), &ColumnHeaderDisplayText, sizeof(ColumnHeaderDisplayText));

	this->ProcessEvent(uFnGetElementCellTags, &GetElementCellTags_Params, nullptr);

	memcpy_s(&CellFieldTags, sizeof(CellFieldTags), &GetElementCellTags_Params.CellFieldTags, sizeof(GetElementCellTags_Params.CellFieldTags));
	memcpy_s(&ColumnHeaderDisplayText, sizeof(ColumnHeaderDisplayText), &GetElementCellTags_Params.ColumnHeaderDisplayText, sizeof(GetElementCellTags_Params.ColumnHeaderDisplayText));
};

// Function Engine.UIResourceCombinationProvider.GetElementCellValueProvider
// [0x00420802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    FieldName                      (CPF_Parm)
// int32_t                        ListIndex                      (CPF_Parm)
// class UUIListElementCellProvider* out_ValueProvider              (CPF_Parm | CPF_OutParm)

bool UUIResourceCombinationProvider::eventGetElementCellValueProvider(const class FName& FieldName, int32_t ListIndex, class UUIListElementCellProvider*& out_ValueProvider)
{
	static UFunction* uFnGetElementCellValueProvider = nullptr;

	if (!uFnGetElementCellValueProvider)
	{
		uFnGetElementCellValueProvider = UFunction::FindFunction("Function Engine.UIResourceCombinationProvider.GetElementCellValueProvider");
	}

	UUIResourceCombinationProvider_eventGetElementCellValueProvider_Params GetElementCellValueProvider_Params;
	memset(&GetElementCellValueProvider_Params, 0, sizeof(GetElementCellValueProvider_Params));
	memcpy_s(&GetElementCellValueProvider_Params.FieldName, sizeof(GetElementCellValueProvider_Params.FieldName), &FieldName, sizeof(FieldName));
	memcpy_s(&GetElementCellValueProvider_Params.ListIndex, sizeof(GetElementCellValueProvider_Params.ListIndex), &ListIndex, sizeof(ListIndex));
	GetElementCellValueProvider_Params.out_ValueProvider = out_ValueProvider;

	this->ProcessEvent(uFnGetElementCellValueProvider, &GetElementCellValueProvider_Params, nullptr);

	out_ValueProvider = GetElementCellValueProvider_Params.out_ValueProvider;

	return GetElementCellValueProvider_Params.ReturnValue;
};

// Function Engine.UIResourceCombinationProvider.GetElementCellSchemaProvider
// [0x00420802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    FieldName                      (CPF_Parm)
// class UUIListElementCellProvider* out_SchemaProvider             (CPF_Parm | CPF_OutParm)

bool UUIResourceCombinationProvider::eventGetElementCellSchemaProvider(const class FName& FieldName, class UUIListElementCellProvider*& out_SchemaProvider)
{
	static UFunction* uFnGetElementCellSchemaProvider = nullptr;

	if (!uFnGetElementCellSchemaProvider)
	{
		uFnGetElementCellSchemaProvider = UFunction::FindFunction("Function Engine.UIResourceCombinationProvider.GetElementCellSchemaProvider");
	}

	UUIResourceCombinationProvider_eventGetElementCellSchemaProvider_Params GetElementCellSchemaProvider_Params;
	memset(&GetElementCellSchemaProvider_Params, 0, sizeof(GetElementCellSchemaProvider_Params));
	memcpy_s(&GetElementCellSchemaProvider_Params.FieldName, sizeof(GetElementCellSchemaProvider_Params.FieldName), &FieldName, sizeof(FieldName));
	GetElementCellSchemaProvider_Params.out_SchemaProvider = out_SchemaProvider;

	this->ProcessEvent(uFnGetElementCellSchemaProvider, &GetElementCellSchemaProvider_Params, nullptr);

	out_SchemaProvider = GetElementCellSchemaProvider_Params.out_SchemaProvider;

	return GetElementCellSchemaProvider_Params.ReturnValue;
};

// Function Engine.UIResourceCombinationProvider.IsElementEnabled
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    FieldName                      (CPF_Parm)
// int32_t                        CollectionIndex                (CPF_Parm)

bool UUIResourceCombinationProvider::eventIsElementEnabled(const class FName& FieldName, int32_t CollectionIndex)
{
	static UFunction* uFnIsElementEnabled = nullptr;

	if (!uFnIsElementEnabled)
	{
		uFnIsElementEnabled = UFunction::FindFunction("Function Engine.UIResourceCombinationProvider.IsElementEnabled");
	}

	UUIResourceCombinationProvider_eventIsElementEnabled_Params IsElementEnabled_Params;
	memset(&IsElementEnabled_Params, 0, sizeof(IsElementEnabled_Params));
	memcpy_s(&IsElementEnabled_Params.FieldName, sizeof(IsElementEnabled_Params.FieldName), &FieldName, sizeof(FieldName));
	memcpy_s(&IsElementEnabled_Params.CollectionIndex, sizeof(IsElementEnabled_Params.CollectionIndex), &CollectionIndex, sizeof(CollectionIndex));

	this->ProcessEvent(uFnIsElementEnabled, &IsElementEnabled_Params, nullptr);

	return IsElementEnabled_Params.ReturnValue;
};

// Function Engine.UIResourceCombinationProvider.GetListElements
// [0x00420802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    FieldName                      (CPF_Parm)
// class TArray<int32_t>          out_Elements                   (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

bool UUIResourceCombinationProvider::eventGetListElements(const class FName& FieldName, class TArray<int32_t>& out_Elements)
{
	static UFunction* uFnGetListElements = nullptr;

	if (!uFnGetListElements)
	{
		uFnGetListElements = UFunction::FindFunction("Function Engine.UIResourceCombinationProvider.GetListElements");
	}

	UUIResourceCombinationProvider_eventGetListElements_Params GetListElements_Params;
	memset(&GetListElements_Params, 0, sizeof(GetListElements_Params));
	memcpy_s(&GetListElements_Params.FieldName, sizeof(GetListElements_Params.FieldName), &FieldName, sizeof(FieldName));
	memcpy_s(&GetListElements_Params.out_Elements, sizeof(GetListElements_Params.out_Elements), &out_Elements, sizeof(out_Elements));

	this->ProcessEvent(uFnGetListElements, &GetListElements_Params, nullptr);

	memcpy_s(&out_Elements, sizeof(out_Elements), &GetListElements_Params.out_Elements, sizeof(GetListElements_Params.out_Elements));

	return GetListElements_Params.ReturnValue;
};

// Function Engine.UIResourceCombinationProvider.GetElementCount
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    FieldName                      (CPF_Parm)

int32_t UUIResourceCombinationProvider::eventGetElementCount(const class FName& FieldName)
{
	static UFunction* uFnGetElementCount = nullptr;

	if (!uFnGetElementCount)
	{
		uFnGetElementCount = UFunction::FindFunction("Function Engine.UIResourceCombinationProvider.GetElementCount");
	}

	UUIResourceCombinationProvider_eventGetElementCount_Params GetElementCount_Params;
	memset(&GetElementCount_Params, 0, sizeof(GetElementCount_Params));
	memcpy_s(&GetElementCount_Params.FieldName, sizeof(GetElementCount_Params.FieldName), &FieldName, sizeof(FieldName));

	this->ProcessEvent(uFnGetElementCount, &GetElementCount_Params, nullptr);

	return GetElementCount_Params.ReturnValue;
};

// Function Engine.UIResourceCombinationProvider.GetElementProviderTags
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class TArray<class FName>      ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)

class TArray<class FName> UUIResourceCombinationProvider::eventGetElementProviderTags()
{
	static UFunction* uFnGetElementProviderTags = nullptr;

	if (!uFnGetElementProviderTags)
	{
		uFnGetElementProviderTags = UFunction::FindFunction("Function Engine.UIResourceCombinationProvider.GetElementProviderTags");
	}

	UUIResourceCombinationProvider_eventGetElementProviderTags_Params GetElementProviderTags_Params;
	memset(&GetElementProviderTags_Params, 0, sizeof(GetElementProviderTags_Params));

	this->ProcessEvent(uFnGetElementProviderTags, &GetElementProviderTags_Params, nullptr);

	return GetElementProviderTags_Params.ReturnValue;
};

// Function Engine.UIResourceCombinationProvider.InitializeProvider
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bIsEditor                      (CPF_Parm)
// class UUIResourceDataProvider* InStaticResourceProvider       (CPF_Parm)
// class UUIDataProvider_OnlineProfileSettings* InProfileProvider              (CPF_Parm)

void UUIResourceCombinationProvider::eventInitializeProvider(bool bIsEditor, class UUIResourceDataProvider* InStaticResourceProvider, class UUIDataProvider_OnlineProfileSettings* InProfileProvider)
{
	static UFunction* uFnInitializeProvider = nullptr;

	if (!uFnInitializeProvider)
	{
		uFnInitializeProvider = UFunction::FindFunction("Function Engine.UIResourceCombinationProvider.InitializeProvider");
	}

	UUIResourceCombinationProvider_eventInitializeProvider_Params InitializeProvider_Params;
	memset(&InitializeProvider_Params, 0, sizeof(InitializeProvider_Params));
	InitializeProvider_Params.bIsEditor = bIsEditor;
	InitializeProvider_Params.InStaticResourceProvider = InStaticResourceProvider;
	InitializeProvider_Params.InProfileProvider = InProfileProvider;

	this->ProcessEvent(uFnInitializeProvider, &InitializeProvider_Params, nullptr);
};

// Function Engine.GameUISceneClient.FindLocalPlayerIndex
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UPlayer*                 P                              (CPF_Parm)

int32_t UGameUISceneClient::FindLocalPlayerIndex(class UPlayer* P)
{
	static UFunction* uFnFindLocalPlayerIndex = nullptr;

	if (!uFnFindLocalPlayerIndex)
	{
		uFnFindLocalPlayerIndex = UFunction::FindFunction("Function Engine.GameUISceneClient.FindLocalPlayerIndex");
	}

	UGameUISceneClient_execFindLocalPlayerIndex_Params FindLocalPlayerIndex_Params;
	memset(&FindLocalPlayerIndex_Params, 0, sizeof(FindLocalPlayerIndex_Params));
	FindLocalPlayerIndex_Params.P = P;

	this->ProcessEvent(uFnFindLocalPlayerIndex, &FindLocalPlayerIndex_Params, nullptr);

	return FindLocalPlayerIndex_Params.ReturnValue;
};

// Function Engine.GameUISceneClient.ClearMenuProgression
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UGameUISceneClient::ClearMenuProgression()
{
	static UFunction* uFnClearMenuProgression = nullptr;

	if (!uFnClearMenuProgression)
	{
		uFnClearMenuProgression = UFunction::FindFunction("Function Engine.GameUISceneClient.ClearMenuProgression");
	}

	UGameUISceneClient_execClearMenuProgression_Params ClearMenuProgression_Params;
	memset(&ClearMenuProgression_Params, 0, sizeof(ClearMenuProgression_Params));

	this->ProcessEvent(uFnClearMenuProgression, &ClearMenuProgression_Params, nullptr);
};

// Function Engine.GameUISceneClient.SaveMenuProgression
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UGameUISceneClient::SaveMenuProgression()
{
	static UFunction* uFnSaveMenuProgression = nullptr;

	if (!uFnSaveMenuProgression)
	{
		uFnSaveMenuProgression = UFunction::FindFunction("Function Engine.GameUISceneClient.SaveMenuProgression");
	}

	UGameUISceneClient_execSaveMenuProgression_Params SaveMenuProgression_Params;
	memset(&SaveMenuProgression_Params, 0, sizeof(SaveMenuProgression_Params));

	this->ProcessEvent(uFnSaveMenuProgression, &SaveMenuProgression_Params, nullptr);
};

// Function Engine.GameUISceneClient.NotifyStorageDeviceChanged
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UGameUISceneClient::NotifyStorageDeviceChanged()
{
	static UFunction* uFnNotifyStorageDeviceChanged = nullptr;

	if (!uFnNotifyStorageDeviceChanged)
	{
		uFnNotifyStorageDeviceChanged = UFunction::FindFunction("Function Engine.GameUISceneClient.NotifyStorageDeviceChanged");
	}

	UGameUISceneClient_execNotifyStorageDeviceChanged_Params NotifyStorageDeviceChanged_Params;
	memset(&NotifyStorageDeviceChanged_Params, 0, sizeof(NotifyStorageDeviceChanged_Params));

	this->ProcessEvent(uFnNotifyStorageDeviceChanged, &NotifyStorageDeviceChanged_Params, nullptr);
};

// Function Engine.GameUISceneClient.NotifyPlayerRemoved
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        PlayerIndex                    (CPF_Parm)
// class ULocalPlayer*            RemovedPlayer                  (CPF_Parm)

void UGameUISceneClient::NotifyPlayerRemoved(int32_t PlayerIndex, class ULocalPlayer* RemovedPlayer)
{
	static UFunction* uFnNotifyPlayerRemoved = nullptr;

	if (!uFnNotifyPlayerRemoved)
	{
		uFnNotifyPlayerRemoved = UFunction::FindFunction("Function Engine.GameUISceneClient.NotifyPlayerRemoved");
	}

	UGameUISceneClient_execNotifyPlayerRemoved_Params NotifyPlayerRemoved_Params;
	memset(&NotifyPlayerRemoved_Params, 0, sizeof(NotifyPlayerRemoved_Params));
	memcpy_s(&NotifyPlayerRemoved_Params.PlayerIndex, sizeof(NotifyPlayerRemoved_Params.PlayerIndex), &PlayerIndex, sizeof(PlayerIndex));
	NotifyPlayerRemoved_Params.RemovedPlayer = RemovedPlayer;

	this->ProcessEvent(uFnNotifyPlayerRemoved, &NotifyPlayerRemoved_Params, nullptr);
};

// Function Engine.GameUISceneClient.NotifyPlayerAdded
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        PlayerIndex                    (CPF_Parm)
// class ULocalPlayer*            AddedPlayer                    (CPF_Parm)

void UGameUISceneClient::NotifyPlayerAdded(int32_t PlayerIndex, class ULocalPlayer* AddedPlayer)
{
	static UFunction* uFnNotifyPlayerAdded = nullptr;

	if (!uFnNotifyPlayerAdded)
	{
		uFnNotifyPlayerAdded = UFunction::FindFunction("Function Engine.GameUISceneClient.NotifyPlayerAdded");
	}

	UGameUISceneClient_execNotifyPlayerAdded_Params NotifyPlayerAdded_Params;
	memset(&NotifyPlayerAdded_Params, 0, sizeof(NotifyPlayerAdded_Params));
	memcpy_s(&NotifyPlayerAdded_Params.PlayerIndex, sizeof(NotifyPlayerAdded_Params.PlayerIndex), &PlayerIndex, sizeof(PlayerIndex));
	NotifyPlayerAdded_Params.AddedPlayer = AddedPlayer;

	this->ProcessEvent(uFnNotifyPlayerAdded, &NotifyPlayerAdded_Params, nullptr);
};

// Function Engine.GameUISceneClient.NotifyLinkStatusChanged
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bConnected                     (CPF_Parm)

void UGameUISceneClient::NotifyLinkStatusChanged(bool bConnected)
{
	static UFunction* uFnNotifyLinkStatusChanged = nullptr;

	if (!uFnNotifyLinkStatusChanged)
	{
		uFnNotifyLinkStatusChanged = UFunction::FindFunction("Function Engine.GameUISceneClient.NotifyLinkStatusChanged");
	}

	UGameUISceneClient_execNotifyLinkStatusChanged_Params NotifyLinkStatusChanged_Params;
	memset(&NotifyLinkStatusChanged_Params, 0, sizeof(NotifyLinkStatusChanged_Params));
	NotifyLinkStatusChanged_Params.bConnected = bConnected;

	this->ProcessEvent(uFnNotifyLinkStatusChanged, &NotifyLinkStatusChanged_Params, nullptr);
};

// Function Engine.GameUISceneClient.NotifyOnlineServiceStatusChanged
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EOnlineServerConnectionStatus  NewConnectionStatus            (CPF_Parm)

void UGameUISceneClient::NotifyOnlineServiceStatusChanged(EOnlineServerConnectionStatus NewConnectionStatus)
{
	static UFunction* uFnNotifyOnlineServiceStatusChanged = nullptr;

	if (!uFnNotifyOnlineServiceStatusChanged)
	{
		uFnNotifyOnlineServiceStatusChanged = UFunction::FindFunction("Function Engine.GameUISceneClient.NotifyOnlineServiceStatusChanged");
	}

	UGameUISceneClient_execNotifyOnlineServiceStatusChanged_Params NotifyOnlineServiceStatusChanged_Params;
	memset(&NotifyOnlineServiceStatusChanged_Params, 0, sizeof(NotifyOnlineServiceStatusChanged_Params));
	memcpy_s(&NotifyOnlineServiceStatusChanged_Params.NewConnectionStatus, sizeof(NotifyOnlineServiceStatusChanged_Params.NewConnectionStatus), &NewConnectionStatus, sizeof(NewConnectionStatus));

	this->ProcessEvent(uFnNotifyOnlineServiceStatusChanged, &NotifyOnlineServiceStatusChanged_Params, nullptr);
};

// Function Engine.GameUISceneClient.NotifyControllerChanged
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ControllerId                   (CPF_Parm)
// uint32_t                       bConnected                     (CPF_Parm)

void UGameUISceneClient::NotifyControllerChanged(int32_t ControllerId, bool bConnected)
{
	static UFunction* uFnNotifyControllerChanged = nullptr;

	if (!uFnNotifyControllerChanged)
	{
		uFnNotifyControllerChanged = UFunction::FindFunction("Function Engine.GameUISceneClient.NotifyControllerChanged");
	}

	UGameUISceneClient_execNotifyControllerChanged_Params NotifyControllerChanged_Params;
	memset(&NotifyControllerChanged_Params, 0, sizeof(NotifyControllerChanged_Params));
	memcpy_s(&NotifyControllerChanged_Params.ControllerId, sizeof(NotifyControllerChanged_Params.ControllerId), &ControllerId, sizeof(ControllerId));
	NotifyControllerChanged_Params.bConnected = bConnected;

	this->ProcessEvent(uFnNotifyControllerChanged, &NotifyControllerChanged_Params, nullptr);
};

// Function Engine.GameUISceneClient.OnLoginChange
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint8_t                        ControllerId                   (CPF_Parm)

void UGameUISceneClient::OnLoginChange(uint8_t ControllerId)
{
	static UFunction* uFnOnLoginChange = nullptr;

	if (!uFnOnLoginChange)
	{
		uFnOnLoginChange = UFunction::FindFunction("Function Engine.GameUISceneClient.OnLoginChange");
	}

	UGameUISceneClient_execOnLoginChange_Params OnLoginChange_Params;
	memset(&OnLoginChange_Params, 0, sizeof(OnLoginChange_Params));
	memcpy_s(&OnLoginChange_Params.ControllerId, sizeof(OnLoginChange_Params.ControllerId), &ControllerId, sizeof(ControllerId));

	this->ProcessEvent(uFnOnLoginChange, &OnLoginChange_Params, nullptr);
};

// Function Engine.GameUISceneClient.NotifyGameSessionEnded
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UGameUISceneClient::NotifyGameSessionEnded()
{
	static UFunction* uFnNotifyGameSessionEnded = nullptr;

	if (!uFnNotifyGameSessionEnded)
	{
		uFnNotifyGameSessionEnded = UFunction::FindFunction("Function Engine.GameUISceneClient.NotifyGameSessionEnded");
	}

	UGameUISceneClient_execNotifyGameSessionEnded_Params NotifyGameSessionEnded_Params;
	memset(&NotifyGameSessionEnded_Params, 0, sizeof(NotifyGameSessionEnded_Params));

	this->ProcessEvent(uFnNotifyGameSessionEnded, &NotifyGameSessionEnded_Params, nullptr);
};

// Function Engine.GameUISceneClient.NotifyClientTravel
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class APlayerController*       TravellingPlayer               (CPF_Parm)
// class FString                  TravelURL                      (CPF_Parm | CPF_NeedCtorLink)
// ETravelType                    TravelType                     (CPF_Parm)
// uint32_t                       bIsSeamlessTravel              (CPF_Parm)

void UGameUISceneClient::NotifyClientTravel(class APlayerController* TravellingPlayer, const class FString& TravelURL, ETravelType TravelType, bool bIsSeamlessTravel)
{
	static UFunction* uFnNotifyClientTravel = nullptr;

	if (!uFnNotifyClientTravel)
	{
		uFnNotifyClientTravel = UFunction::FindFunction("Function Engine.GameUISceneClient.NotifyClientTravel");
	}

	UGameUISceneClient_execNotifyClientTravel_Params NotifyClientTravel_Params;
	memset(&NotifyClientTravel_Params, 0, sizeof(NotifyClientTravel_Params));
	NotifyClientTravel_Params.TravellingPlayer = TravellingPlayer;
	memcpy_s(&NotifyClientTravel_Params.TravelURL, sizeof(NotifyClientTravel_Params.TravelURL), &TravelURL, sizeof(TravelURL));
	memcpy_s(&NotifyClientTravel_Params.TravelType, sizeof(NotifyClientTravel_Params.TravelType), &TravelType, sizeof(TravelType));
	NotifyClientTravel_Params.bIsSeamlessTravel = bIsSeamlessTravel;

	this->ProcessEvent(uFnNotifyClientTravel, &NotifyClientTravel_Params, nullptr);
};

// Function Engine.GameUISceneClient.IsAllowedToModifyPlayerCount
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UGameUISceneClient::IsAllowedToModifyPlayerCount()
{
	static UFunction* uFnIsAllowedToModifyPlayerCount = nullptr;

	if (!uFnIsAllowedToModifyPlayerCount)
	{
		uFnIsAllowedToModifyPlayerCount = UFunction::FindFunction("Function Engine.GameUISceneClient.IsAllowedToModifyPlayerCount");
	}

	UGameUISceneClient_execIsAllowedToModifyPlayerCount_Params IsAllowedToModifyPlayerCount_Params;
	memset(&IsAllowedToModifyPlayerCount_Params, 0, sizeof(IsAllowedToModifyPlayerCount_Params));

	this->ProcessEvent(uFnIsAllowedToModifyPlayerCount, &IsAllowedToModifyPlayerCount_Params, nullptr);

	return IsAllowedToModifyPlayerCount_Params.ReturnValue;
};

// Function Engine.GameUISceneClient.SynchronizePlayers
// [0x00024802] (FUNC_Defined | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bAllowJoins                    (CPF_OptionalParm | CPF_Parm)
// uint32_t                       bAllowRemoval                  (CPF_OptionalParm | CPF_Parm)

void UGameUISceneClient::eventSynchronizePlayers(bool bAllowJoins, bool bAllowRemoval)
{
	static UFunction* uFnSynchronizePlayers = nullptr;

	if (!uFnSynchronizePlayers)
	{
		uFnSynchronizePlayers = UFunction::FindFunction("Function Engine.GameUISceneClient.SynchronizePlayers");
	}

	UGameUISceneClient_eventSynchronizePlayers_Params SynchronizePlayers_Params;
	memset(&SynchronizePlayers_Params, 0, sizeof(SynchronizePlayers_Params));
	SynchronizePlayers_Params.bAllowJoins = bAllowJoins;
	SynchronizePlayers_Params.bAllowRemoval = bAllowRemoval;

	this->ProcessEvent(uFnSynchronizePlayers, &SynchronizePlayers_Params, nullptr);
};

// Function Engine.GameUISceneClient.InitializeSceneClient
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UGameUISceneClient::eventInitializeSceneClient()
{
	static UFunction* uFnInitializeSceneClient = nullptr;

	if (!uFnInitializeSceneClient)
	{
		uFnInitializeSceneClient = UFunction::FindFunction("Function Engine.GameUISceneClient.InitializeSceneClient");
	}

	UGameUISceneClient_eventInitializeSceneClient_Params InitializeSceneClient_Params;
	memset(&InitializeSceneClient_Params, 0, sizeof(InitializeSceneClient_Params));

	this->ProcessEvent(uFnInitializeSceneClient, &InitializeSceneClient_Params, nullptr);
};

// Function Engine.GameUISceneClient.PauseGame
// [0x00024802] (FUNC_Defined | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bDesiredPauseState             (CPF_Parm)
// int32_t                        PlayerIndex                    (CPF_OptionalParm | CPF_Parm)

void UGameUISceneClient::eventPauseGame(bool bDesiredPauseState, int32_t PlayerIndex)
{
	static UFunction* uFnPauseGame = nullptr;

	if (!uFnPauseGame)
	{
		uFnPauseGame = UFunction::FindFunction("Function Engine.GameUISceneClient.PauseGame");
	}

	UGameUISceneClient_eventPauseGame_Params PauseGame_Params;
	memset(&PauseGame_Params, 0, sizeof(PauseGame_Params));
	PauseGame_Params.bDesiredPauseState = bDesiredPauseState;
	memcpy_s(&PauseGame_Params.PlayerIndex, sizeof(PauseGame_Params.PlayerIndex), &PlayerIndex, sizeof(PlayerIndex));

	this->ProcessEvent(uFnPauseGame, &PauseGame_Params, nullptr);
};

// Function Engine.GameUISceneClient.CanUnpauseInternalUI
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[17966])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UGameUISceneClient::CanUnpauseInternalUI()
{
	static UFunction* uFnCanUnpauseInternalUI = nullptr;

	if (!uFnCanUnpauseInternalUI)
	{
		uFnCanUnpauseInternalUI = UFunction::FindFunction("Function Engine.GameUISceneClient.CanUnpauseInternalUI");
	}

	UGameUISceneClient_execCanUnpauseInternalUI_Params CanUnpauseInternalUI_Params;
	memset(&CanUnpauseInternalUI_Params, 0, sizeof(CanUnpauseInternalUI_Params));

	uFnCanUnpauseInternalUI->iNative = 0;
	uFnCanUnpauseInternalUI->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnCanUnpauseInternalUI, &CanUnpauseInternalUI_Params, nullptr);
	uFnCanUnpauseInternalUI->FunctionFlags |= 0x400;
	uFnCanUnpauseInternalUI->iNative = 17966;

	return CanUnpauseInternalUI_Params.ReturnValue;
};

// Function Engine.GameUISceneClient.RequestInputProcessingUpdate
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25127])
// Parameter Info:

void UGameUISceneClient::RequestInputProcessingUpdate()
{
	static UFunction* uFnRequestInputProcessingUpdate = nullptr;

	if (!uFnRequestInputProcessingUpdate)
	{
		uFnRequestInputProcessingUpdate = UFunction::FindFunction("Function Engine.GameUISceneClient.RequestInputProcessingUpdate");
	}

	UGameUISceneClient_execRequestInputProcessingUpdate_Params RequestInputProcessingUpdate_Params;
	memset(&RequestInputProcessingUpdate_Params, 0, sizeof(RequestInputProcessingUpdate_Params));

	uFnRequestInputProcessingUpdate->iNative = 0;
	uFnRequestInputProcessingUpdate->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnRequestInputProcessingUpdate, &RequestInputProcessingUpdate_Params, nullptr);
	uFnRequestInputProcessingUpdate->FunctionFlags |= 0x400;
	uFnRequestInputProcessingUpdate->iNative = 25127;
};

// Function Engine.UIScreenObject.BecomePrimaryPlayer
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        PlayerIndex                    (CPF_Parm)

void UUIScreenObject::BecomePrimaryPlayer(int32_t PlayerIndex)
{
	static UFunction* uFnBecomePrimaryPlayer = nullptr;

	if (!uFnBecomePrimaryPlayer)
	{
		uFnBecomePrimaryPlayer = UFunction::FindFunction("Function Engine.UIScreenObject.BecomePrimaryPlayer");
	}

	UUIScreenObject_execBecomePrimaryPlayer_Params BecomePrimaryPlayer_Params;
	memset(&BecomePrimaryPlayer_Params, 0, sizeof(BecomePrimaryPlayer_Params));
	memcpy_s(&BecomePrimaryPlayer_Params.PlayerIndex, sizeof(BecomePrimaryPlayer_Params.PlayerIndex), &PlayerIndex, sizeof(PlayerIndex));

	this->ProcessEvent(uFnBecomePrimaryPlayer, &BecomePrimaryPlayer_Params, nullptr);
};

// Function Engine.UIScreenObject.GetNATType
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// ENATType                       ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

ENATType UUIScreenObject::GetNATType()
{
	static UFunction* uFnGetNATType = nullptr;

	if (!uFnGetNATType)
	{
		uFnGetNATType = UFunction::FindFunction("Function Engine.UIScreenObject.GetNATType");
	}

	UUIScreenObject_execGetNATType_Params GetNATType_Params;
	memset(&GetNATType_Params, 0, sizeof(GetNATType_Params));

	this->ProcessEvent(uFnGetNATType, &GetNATType_Params, nullptr);

	return static_cast<ENATType>(GetNATType_Params.ReturnValue);
};

// Function Engine.UIScreenObject.GetLoggedInControllerIds
// [0x00426003] (FUNC_Final | FUNC_Defined | FUNC_Static | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bRequireOnlineLogin            (CPF_OptionalParm | CPF_Parm)
// int32_t                        MaxPlayersToCheck              (CPF_OptionalParm | CPF_Parm)
// class TArray<int32_t>          ControllerIds                  (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void UUIScreenObject::GetLoggedInControllerIds(bool bRequireOnlineLogin, int32_t MaxPlayersToCheck, class TArray<int32_t>& ControllerIds)
{
	static UFunction* uFnGetLoggedInControllerIds = nullptr;

	if (!uFnGetLoggedInControllerIds)
	{
		uFnGetLoggedInControllerIds = UFunction::FindFunction("Function Engine.UIScreenObject.GetLoggedInControllerIds");
	}

	UUIScreenObject_execGetLoggedInControllerIds_Params GetLoggedInControllerIds_Params;
	memset(&GetLoggedInControllerIds_Params, 0, sizeof(GetLoggedInControllerIds_Params));
	GetLoggedInControllerIds_Params.bRequireOnlineLogin = bRequireOnlineLogin;
	memcpy_s(&GetLoggedInControllerIds_Params.MaxPlayersToCheck, sizeof(GetLoggedInControllerIds_Params.MaxPlayersToCheck), &MaxPlayersToCheck, sizeof(MaxPlayersToCheck));
	memcpy_s(&GetLoggedInControllerIds_Params.ControllerIds, sizeof(GetLoggedInControllerIds_Params.ControllerIds), &ControllerIds, sizeof(ControllerIds));

	UUIScreenObject::StaticClass()->ProcessEvent(uFnGetLoggedInControllerIds, &GetLoggedInControllerIds_Params, nullptr);

	memcpy_s(&ControllerIds, sizeof(ControllerIds), &GetLoggedInControllerIds_Params.ControllerIds, sizeof(GetLoggedInControllerIds_Params.ControllerIds));
};

// Function Engine.UIScreenObject.GetLoggedInPlayerCount
// [0x00026003] (FUNC_Final | FUNC_Defined | FUNC_Static | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       bRequireOnlineLogin            (CPF_OptionalParm | CPF_Parm)
// int32_t                        MaxPlayersToCheck              (CPF_OptionalParm | CPF_Parm)

int32_t UUIScreenObject::GetLoggedInPlayerCount(bool bRequireOnlineLogin, int32_t MaxPlayersToCheck)
{
	static UFunction* uFnGetLoggedInPlayerCount = nullptr;

	if (!uFnGetLoggedInPlayerCount)
	{
		uFnGetLoggedInPlayerCount = UFunction::FindFunction("Function Engine.UIScreenObject.GetLoggedInPlayerCount");
	}

	UUIScreenObject_execGetLoggedInPlayerCount_Params GetLoggedInPlayerCount_Params;
	memset(&GetLoggedInPlayerCount_Params, 0, sizeof(GetLoggedInPlayerCount_Params));
	GetLoggedInPlayerCount_Params.bRequireOnlineLogin = bRequireOnlineLogin;
	memcpy_s(&GetLoggedInPlayerCount_Params.MaxPlayersToCheck, sizeof(GetLoggedInPlayerCount_Params.MaxPlayersToCheck), &MaxPlayersToCheck, sizeof(MaxPlayersToCheck));

	UUIScreenObject::StaticClass()->ProcessEvent(uFnGetLoggedInPlayerCount, &GetLoggedInPlayerCount_Params, nullptr);

	return GetLoggedInPlayerCount_Params.ReturnValue;
};

// Function Engine.UIScreenObject.HasLinkConnection
// [0x00022003] (FUNC_Final | FUNC_Defined | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UUIScreenObject::HasLinkConnection()
{
	static UFunction* uFnHasLinkConnection = nullptr;

	if (!uFnHasLinkConnection)
	{
		uFnHasLinkConnection = UFunction::FindFunction("Function Engine.UIScreenObject.HasLinkConnection");
	}

	UUIScreenObject_execHasLinkConnection_Params HasLinkConnection_Params;
	memset(&HasLinkConnection_Params, 0, sizeof(HasLinkConnection_Params));

	UUIScreenObject::StaticClass()->ProcessEvent(uFnHasLinkConnection, &HasLinkConnection_Params, nullptr);

	return HasLinkConnection_Params.ReturnValue;
};

// Function Engine.UIScreenObject.GetLoginStatus
// [0x00024003] (FUNC_Final | FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// ELoginStatus                   ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        ControllerId                   (CPF_OptionalParm | CPF_Parm)

ELoginStatus UUIScreenObject::GetLoginStatus(int32_t ControllerId)
{
	static UFunction* uFnGetLoginStatus = nullptr;

	if (!uFnGetLoginStatus)
	{
		uFnGetLoginStatus = UFunction::FindFunction("Function Engine.UIScreenObject.GetLoginStatus");
	}

	UUIScreenObject_execGetLoginStatus_Params GetLoginStatus_Params;
	memset(&GetLoginStatus_Params, 0, sizeof(GetLoginStatus_Params));
	memcpy_s(&GetLoginStatus_Params.ControllerId, sizeof(GetLoginStatus_Params.ControllerId), &ControllerId, sizeof(ControllerId));

	this->ProcessEvent(uFnGetLoginStatus, &GetLoginStatus_Params, nullptr);

	return static_cast<ELoginStatus>(GetLoginStatus_Params.ReturnValue);
};

// Function Engine.UIScreenObject.DisableWidget
// [0x00020003] (FUNC_Final | FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        PlayerIndex                    (CPF_Parm)

bool UUIScreenObject::DisableWidget(int32_t PlayerIndex)
{
	static UFunction* uFnDisableWidget = nullptr;

	if (!uFnDisableWidget)
	{
		uFnDisableWidget = UFunction::FindFunction("Function Engine.UIScreenObject.DisableWidget");
	}

	UUIScreenObject_execDisableWidget_Params DisableWidget_Params;
	memset(&DisableWidget_Params, 0, sizeof(DisableWidget_Params));
	memcpy_s(&DisableWidget_Params.PlayerIndex, sizeof(DisableWidget_Params.PlayerIndex), &PlayerIndex, sizeof(PlayerIndex));

	this->ProcessEvent(uFnDisableWidget, &DisableWidget_Params, nullptr);

	return DisableWidget_Params.ReturnValue;
};

// Function Engine.UIScreenObject.EnableWidget
// [0x00020003] (FUNC_Final | FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        PlayerIndex                    (CPF_Parm)

bool UUIScreenObject::EnableWidget(int32_t PlayerIndex)
{
	static UFunction* uFnEnableWidget = nullptr;

	if (!uFnEnableWidget)
	{
		uFnEnableWidget = UFunction::FindFunction("Function Engine.UIScreenObject.EnableWidget");
	}

	UUIScreenObject_execEnableWidget_Params EnableWidget_Params;
	memset(&EnableWidget_Params, 0, sizeof(EnableWidget_Params));
	memcpy_s(&EnableWidget_Params.PlayerIndex, sizeof(EnableWidget_Params.PlayerIndex), &PlayerIndex, sizeof(PlayerIndex));

	this->ProcessEvent(uFnEnableWidget, &EnableWidget_Params, nullptr);

	return EnableWidget_Params.ReturnValue;
};

// Function Engine.UIScreenObject.GetParent
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UUIScreenObject*         ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class UUIScreenObject* UUIScreenObject::GetParent()
{
	static UFunction* uFnGetParent = nullptr;

	if (!uFnGetParent)
	{
		uFnGetParent = UFunction::FindFunction("Function Engine.UIScreenObject.GetParent");
	}

	UUIScreenObject_execGetParent_Params GetParent_Params;
	memset(&GetParent_Params, 0, sizeof(GetParent_Params));

	this->ProcessEvent(uFnGetParent, &GetParent_Params, nullptr);

	return GetParent_Params.ReturnValue;
};

// Function Engine.UIScreenObject.GetSupportedUIActionKeyNames
// [0x00420800] (FUNC_Event | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// class TArray<class FName>      out_KeyNames                   (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void UUIScreenObject::eventGetSupportedUIActionKeyNames(class TArray<class FName>& out_KeyNames)
{
	static UFunction* uFnGetSupportedUIActionKeyNames = nullptr;

	if (!uFnGetSupportedUIActionKeyNames)
	{
		uFnGetSupportedUIActionKeyNames = UFunction::FindFunction("Function Engine.UIScreenObject.GetSupportedUIActionKeyNames");
	}

	UUIScreenObject_eventGetSupportedUIActionKeyNames_Params GetSupportedUIActionKeyNames_Params;
	memset(&GetSupportedUIActionKeyNames_Params, 0, sizeof(GetSupportedUIActionKeyNames_Params));
	memcpy_s(&GetSupportedUIActionKeyNames_Params.out_KeyNames, sizeof(GetSupportedUIActionKeyNames_Params.out_KeyNames), &out_KeyNames, sizeof(out_KeyNames));

	this->ProcessEvent(uFnGetSupportedUIActionKeyNames, &GetSupportedUIActionKeyNames_Params, nullptr);

	memcpy_s(&out_KeyNames, sizeof(out_KeyNames), &GetSupportedUIActionKeyNames_Params.out_KeyNames, sizeof(GetSupportedUIActionKeyNames_Params.out_KeyNames));
};

// Function Engine.UIScreenObject.DisablePlayerInput
// [0x00024803] (FUNC_Final | FUNC_Defined | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint8_t                        PlayerIndex                    (CPF_Parm)
// uint32_t                       bRecurse                       (CPF_OptionalParm | CPF_Parm)

void UUIScreenObject::eventDisablePlayerInput(uint8_t PlayerIndex, bool bRecurse)
{
	static UFunction* uFnDisablePlayerInput = nullptr;

	if (!uFnDisablePlayerInput)
	{
		uFnDisablePlayerInput = UFunction::FindFunction("Function Engine.UIScreenObject.DisablePlayerInput");
	}

	UUIScreenObject_eventDisablePlayerInput_Params DisablePlayerInput_Params;
	memset(&DisablePlayerInput_Params, 0, sizeof(DisablePlayerInput_Params));
	memcpy_s(&DisablePlayerInput_Params.PlayerIndex, sizeof(DisablePlayerInput_Params.PlayerIndex), &PlayerIndex, sizeof(PlayerIndex));
	DisablePlayerInput_Params.bRecurse = bRecurse;

	this->ProcessEvent(uFnDisablePlayerInput, &DisablePlayerInput_Params, nullptr);
};

// Function Engine.UIScreenObject.EnablePlayerInput
// [0x00024803] (FUNC_Final | FUNC_Defined | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint8_t                        PlayerIndex                    (CPF_Parm)
// uint32_t                       bRecurse                       (CPF_OptionalParm | CPF_Parm)

void UUIScreenObject::eventEnablePlayerInput(uint8_t PlayerIndex, bool bRecurse)
{
	static UFunction* uFnEnablePlayerInput = nullptr;

	if (!uFnEnablePlayerInput)
	{
		uFnEnablePlayerInput = UFunction::FindFunction("Function Engine.UIScreenObject.EnablePlayerInput");
	}

	UUIScreenObject_eventEnablePlayerInput_Params EnablePlayerInput_Params;
	memset(&EnablePlayerInput_Params, 0, sizeof(EnablePlayerInput_Params));
	memcpy_s(&EnablePlayerInput_Params.PlayerIndex, sizeof(EnablePlayerInput_Params.PlayerIndex), &PlayerIndex, sizeof(PlayerIndex));
	EnablePlayerInput_Params.bRecurse = bRecurse;

	this->ProcessEvent(uFnEnablePlayerInput, &EnablePlayerInput_Params, nullptr);
};

// Function Engine.UIScreenObject.SetVisibility
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bIsVisible                     (CPF_Parm)

void UUIScreenObject::eventSetVisibility(bool bIsVisible)
{
	static UFunction* uFnSetVisibility = nullptr;

	if (!uFnSetVisibility)
	{
		uFnSetVisibility = UFunction::FindFunction("Function Engine.UIScreenObject.SetVisibility");
	}

	UUIScreenObject_eventSetVisibility_Params SetVisibility_Params;
	memset(&SetVisibility_Params, 0, sizeof(SetVisibility_Params));
	SetVisibility_Params.bIsVisible = bIsVisible;

	this->ProcessEvent(uFnSetVisibility, &SetVisibility_Params, nullptr);
};

// Function Engine.UIScreenObject.PrivateSetVisibility
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bVisible                       (CPF_Parm)

void UUIScreenObject::PrivateSetVisibility(bool bVisible)
{
	static UFunction* uFnPrivateSetVisibility = nullptr;

	if (!uFnPrivateSetVisibility)
	{
		uFnPrivateSetVisibility = UFunction::FindFunction("Function Engine.UIScreenObject.PrivateSetVisibility");
	}

	UUIScreenObject_execPrivateSetVisibility_Params PrivateSetVisibility_Params;
	memset(&PrivateSetVisibility_Params, 0, sizeof(PrivateSetVisibility_Params));
	PrivateSetVisibility_Params.bVisible = bVisible;

	this->ProcessEvent(uFnPrivateSetVisibility, &PrivateSetVisibility_Params, nullptr);
};

// Function Engine.UIScreenObject.IsGamepadConnected
// [0x00024803] (FUNC_Final | FUNC_Defined | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        ControllerId                   (CPF_OptionalParm | CPF_Parm)

bool UUIScreenObject::eventIsGamepadConnected(int32_t ControllerId)
{
	static UFunction* uFnIsGamepadConnected = nullptr;

	if (!uFnIsGamepadConnected)
	{
		uFnIsGamepadConnected = UFunction::FindFunction("Function Engine.UIScreenObject.IsGamepadConnected");
	}

	UUIScreenObject_eventIsGamepadConnected_Params IsGamepadConnected_Params;
	memset(&IsGamepadConnected_Params, 0, sizeof(IsGamepadConnected_Params));
	memcpy_s(&IsGamepadConnected_Params.ControllerId, sizeof(IsGamepadConnected_Params.ControllerId), &ControllerId, sizeof(ControllerId));

	this->ProcessEvent(uFnIsGamepadConnected, &IsGamepadConnected_Params, nullptr);

	return IsGamepadConnected_Params.ReturnValue;
};

// Function Engine.UIScreenObject.IsLoggedIn
// [0x00024802] (FUNC_Defined | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        ControllerId                   (CPF_OptionalParm | CPF_Parm)
// uint32_t                       bRequireOnlineLogin            (CPF_OptionalParm | CPF_Parm)

bool UUIScreenObject::eventIsLoggedIn(int32_t ControllerId, bool bRequireOnlineLogin)
{
	static UFunction* uFnIsLoggedIn = nullptr;

	if (!uFnIsLoggedIn)
	{
		uFnIsLoggedIn = UFunction::FindFunction("Function Engine.UIScreenObject.IsLoggedIn");
	}

	UUIScreenObject_eventIsLoggedIn_Params IsLoggedIn_Params;
	memset(&IsLoggedIn_Params, 0, sizeof(IsLoggedIn_Params));
	memcpy_s(&IsLoggedIn_Params.ControllerId, sizeof(IsLoggedIn_Params.ControllerId), &ControllerId, sizeof(ControllerId));
	IsLoggedIn_Params.bRequireOnlineLogin = bRequireOnlineLogin;

	this->ProcessEvent(uFnIsLoggedIn, &IsLoggedIn_Params, nullptr);

	return IsLoggedIn_Params.ReturnValue;
};

// Function Engine.UIScreenObject.RemovedFromParent
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UUIScreenObject*         WidgetOwner                    (CPF_Parm)

void UUIScreenObject::eventRemovedFromParent(class UUIScreenObject* WidgetOwner)
{
	static UFunction* uFnRemovedFromParent = nullptr;

	if (!uFnRemovedFromParent)
	{
		uFnRemovedFromParent = UFunction::FindFunction("Function Engine.UIScreenObject.RemovedFromParent");
	}

	UUIScreenObject_eventRemovedFromParent_Params RemovedFromParent_Params;
	memset(&RemovedFromParent_Params, 0, sizeof(RemovedFromParent_Params));
	RemovedFromParent_Params.WidgetOwner = WidgetOwner;

	this->ProcessEvent(uFnRemovedFromParent, &RemovedFromParent_Params, nullptr);
};

// Function Engine.UIScreenObject.PostInitialize
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UUIScreenObject::eventPostInitialize()
{
	static UFunction* uFnPostInitialize = nullptr;

	if (!uFnPostInitialize)
	{
		uFnPostInitialize = UFunction::FindFunction("Function Engine.UIScreenObject.PostInitialize");
	}

	UUIScreenObject_eventPostInitialize_Params PostInitialize_Params;
	memset(&PostInitialize_Params, 0, sizeof(PostInitialize_Params));

	this->ProcessEvent(uFnPostInitialize, &PostInitialize_Params, nullptr);
};

// Function Engine.UIScreenObject.Initialized
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UUIScreenObject::eventInitialized()
{
	static UFunction* uFnInitialized = nullptr;

	if (!uFnInitialized)
	{
		uFnInitialized = UFunction::FindFunction("Function Engine.UIScreenObject.Initialized");
	}

	UUIScreenObject_eventInitialized_Params Initialized_Params;
	memset(&Initialized_Params, 0, sizeof(Initialized_Params));

	this->ProcessEvent(uFnInitialized, &Initialized_Params, nullptr);
};

// Function Engine.UIScreenObject.GetWidgetPathName
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20820])
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)

class FString UUIScreenObject::GetWidgetPathName()
{
	static UFunction* uFnGetWidgetPathName = nullptr;

	if (!uFnGetWidgetPathName)
	{
		uFnGetWidgetPathName = UFunction::FindFunction("Function Engine.UIScreenObject.GetWidgetPathName");
	}

	UUIScreenObject_execGetWidgetPathName_Params GetWidgetPathName_Params;
	memset(&GetWidgetPathName_Params, 0, sizeof(GetWidgetPathName_Params));

	uFnGetWidgetPathName->iNative = 0;
	uFnGetWidgetPathName->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetWidgetPathName, &GetWidgetPathName_Params, nullptr);
	uFnGetWidgetPathName->FunctionFlags |= 0x400;
	uFnGetWidgetPathName->iNative = 20820;

	return GetWidgetPathName_Params.ReturnValue;
};

// Function Engine.UIScreenObject.GetAspectRatioAutoScaleFactor
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[20499])
// Parameter Info:
// float                          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UFont*                   BaseFont                       (CPF_OptionalParm | CPF_Parm)

float UUIScreenObject::GetAspectRatioAutoScaleFactor(class UFont* BaseFont)
{
	static UFunction* uFnGetAspectRatioAutoScaleFactor = nullptr;

	if (!uFnGetAspectRatioAutoScaleFactor)
	{
		uFnGetAspectRatioAutoScaleFactor = UFunction::FindFunction("Function Engine.UIScreenObject.GetAspectRatioAutoScaleFactor");
	}

	UUIScreenObject_execGetAspectRatioAutoScaleFactor_Params GetAspectRatioAutoScaleFactor_Params;
	memset(&GetAspectRatioAutoScaleFactor_Params, 0, sizeof(GetAspectRatioAutoScaleFactor_Params));
	GetAspectRatioAutoScaleFactor_Params.BaseFont = BaseFont;

	uFnGetAspectRatioAutoScaleFactor->iNative = 0;
	uFnGetAspectRatioAutoScaleFactor->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetAspectRatioAutoScaleFactor, &GetAspectRatioAutoScaleFactor_Params, nullptr);
	uFnGetAspectRatioAutoScaleFactor->FunctionFlags |= 0x400;
	uFnGetAspectRatioAutoScaleFactor->iNative = 20499;

	return GetAspectRatioAutoScaleFactor_Params.ReturnValue;
};

// Function Engine.UIScreenObject.GetInverseCanvasToScreen
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20612])
// Parameter Info:
// struct FMatrix                 ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

struct FMatrix UUIScreenObject::GetInverseCanvasToScreen()
{
	static UFunction* uFnGetInverseCanvasToScreen = nullptr;

	if (!uFnGetInverseCanvasToScreen)
	{
		uFnGetInverseCanvasToScreen = UFunction::FindFunction("Function Engine.UIScreenObject.GetInverseCanvasToScreen");
	}

	UUIScreenObject_execGetInverseCanvasToScreen_Params GetInverseCanvasToScreen_Params;
	memset(&GetInverseCanvasToScreen_Params, 0, sizeof(GetInverseCanvasToScreen_Params));

	uFnGetInverseCanvasToScreen->iNative = 0;
	uFnGetInverseCanvasToScreen->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetInverseCanvasToScreen, &GetInverseCanvasToScreen_Params, nullptr);
	uFnGetInverseCanvasToScreen->FunctionFlags |= 0x400;
	uFnGetInverseCanvasToScreen->iNative = 20612;

	return GetInverseCanvasToScreen_Params.ReturnValue;
};

// Function Engine.UIScreenObject.GetCanvasToScreen
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20525])
// Parameter Info:
// struct FMatrix                 ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

struct FMatrix UUIScreenObject::GetCanvasToScreen()
{
	static UFunction* uFnGetCanvasToScreen = nullptr;

	if (!uFnGetCanvasToScreen)
	{
		uFnGetCanvasToScreen = UFunction::FindFunction("Function Engine.UIScreenObject.GetCanvasToScreen");
	}

	UUIScreenObject_execGetCanvasToScreen_Params GetCanvasToScreen_Params;
	memset(&GetCanvasToScreen_Params, 0, sizeof(GetCanvasToScreen_Params));

	uFnGetCanvasToScreen->iNative = 0;
	uFnGetCanvasToScreen->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetCanvasToScreen, &GetCanvasToScreen_Params, nullptr);
	uFnGetCanvasToScreen->FunctionFlags |= 0x400;
	uFnGetCanvasToScreen->iNative = 20525;

	return GetCanvasToScreen_Params.ReturnValue;
};

// Function Engine.UIScreenObject.PixelToCanvas
// [0x00420401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[24263])
// Parameter Info:
// struct FVector                 ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FVector2D               PixelPosition                  (CPF_Const | CPF_Parm | CPF_OutParm)

struct FVector UUIScreenObject::PixelToCanvas(struct FVector2D& PixelPosition)
{
	static UFunction* uFnPixelToCanvas = nullptr;

	if (!uFnPixelToCanvas)
	{
		uFnPixelToCanvas = UFunction::FindFunction("Function Engine.UIScreenObject.PixelToCanvas");
	}

	UUIScreenObject_execPixelToCanvas_Params PixelToCanvas_Params;
	memset(&PixelToCanvas_Params, 0, sizeof(PixelToCanvas_Params));
	memcpy_s(&PixelToCanvas_Params.PixelPosition, sizeof(PixelToCanvas_Params.PixelPosition), &PixelPosition, sizeof(PixelPosition));

	uFnPixelToCanvas->iNative = 0;
	uFnPixelToCanvas->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnPixelToCanvas, &PixelToCanvas_Params, nullptr);
	uFnPixelToCanvas->FunctionFlags |= 0x400;
	uFnPixelToCanvas->iNative = 24263;

	memcpy_s(&PixelPosition, sizeof(PixelPosition), &PixelToCanvas_Params.PixelPosition, sizeof(PixelToCanvas_Params.PixelPosition));

	return PixelToCanvas_Params.ReturnValue;
};

// Function Engine.UIScreenObject.ScreenToCanvas
// [0x00420401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[25409])
// Parameter Info:
// struct FVector                 ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FVector4                ScreenPosition                 (CPF_Const | CPF_Parm | CPF_OutParm)

struct FVector UUIScreenObject::ScreenToCanvas(struct FVector4& ScreenPosition)
{
	static UFunction* uFnScreenToCanvas = nullptr;

	if (!uFnScreenToCanvas)
	{
		uFnScreenToCanvas = UFunction::FindFunction("Function Engine.UIScreenObject.ScreenToCanvas");
	}

	UUIScreenObject_execScreenToCanvas_Params ScreenToCanvas_Params;
	memset(&ScreenToCanvas_Params, 0, sizeof(ScreenToCanvas_Params));
	memcpy_s(&ScreenToCanvas_Params.ScreenPosition, sizeof(ScreenToCanvas_Params.ScreenPosition), &ScreenPosition, sizeof(ScreenPosition));

	uFnScreenToCanvas->iNative = 0;
	uFnScreenToCanvas->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnScreenToCanvas, &ScreenToCanvas_Params, nullptr);
	uFnScreenToCanvas->FunctionFlags |= 0x400;
	uFnScreenToCanvas->iNative = 25409;

	memcpy_s(&ScreenPosition, sizeof(ScreenPosition), &ScreenToCanvas_Params.ScreenPosition, sizeof(ScreenToCanvas_Params.ScreenPosition));

	return ScreenToCanvas_Params.ReturnValue;
};

// Function Engine.UIScreenObject.PixelToScreen
// [0x00420401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[24264])
// Parameter Info:
// struct FVector4                ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FVector2D               PixelPosition                  (CPF_Const | CPF_Parm | CPF_OutParm)

struct FVector4 UUIScreenObject::PixelToScreen(struct FVector2D& PixelPosition)
{
	static UFunction* uFnPixelToScreen = nullptr;

	if (!uFnPixelToScreen)
	{
		uFnPixelToScreen = UFunction::FindFunction("Function Engine.UIScreenObject.PixelToScreen");
	}

	UUIScreenObject_execPixelToScreen_Params PixelToScreen_Params;
	memset(&PixelToScreen_Params, 0, sizeof(PixelToScreen_Params));
	memcpy_s(&PixelToScreen_Params.PixelPosition, sizeof(PixelToScreen_Params.PixelPosition), &PixelPosition, sizeof(PixelPosition));

	uFnPixelToScreen->iNative = 0;
	uFnPixelToScreen->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnPixelToScreen, &PixelToScreen_Params, nullptr);
	uFnPixelToScreen->FunctionFlags |= 0x400;
	uFnPixelToScreen->iNative = 24264;

	memcpy_s(&PixelPosition, sizeof(PixelPosition), &PixelToScreen_Params.PixelPosition, sizeof(PixelToScreen_Params.PixelPosition));

	return PixelToScreen_Params.ReturnValue;
};

// Function Engine.UIScreenObject.ScreenToPixel
// [0x00420401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[25410])
// Parameter Info:
// struct FVector2D               ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FVector4                ScreenPosition                 (CPF_Const | CPF_Parm | CPF_OutParm)

struct FVector2D UUIScreenObject::ScreenToPixel(struct FVector4& ScreenPosition)
{
	static UFunction* uFnScreenToPixel = nullptr;

	if (!uFnScreenToPixel)
	{
		uFnScreenToPixel = UFunction::FindFunction("Function Engine.UIScreenObject.ScreenToPixel");
	}

	UUIScreenObject_execScreenToPixel_Params ScreenToPixel_Params;
	memset(&ScreenToPixel_Params, 0, sizeof(ScreenToPixel_Params));
	memcpy_s(&ScreenToPixel_Params.ScreenPosition, sizeof(ScreenToPixel_Params.ScreenPosition), &ScreenPosition, sizeof(ScreenPosition));

	uFnScreenToPixel->iNative = 0;
	uFnScreenToPixel->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnScreenToPixel, &ScreenToPixel_Params, nullptr);
	uFnScreenToPixel->FunctionFlags |= 0x400;
	uFnScreenToPixel->iNative = 25410;

	memcpy_s(&ScreenPosition, sizeof(ScreenPosition), &ScreenToPixel_Params.ScreenPosition, sizeof(ScreenToPixel_Params.ScreenPosition));

	return ScreenToPixel_Params.ReturnValue;
};

// Function Engine.UIScreenObject.CanvasToScreen
// [0x00420401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[17970])
// Parameter Info:
// struct FVector4                ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FVector                 CanvasPosition                 (CPF_Const | CPF_Parm | CPF_OutParm)

struct FVector4 UUIScreenObject::CanvasToScreen(struct FVector& CanvasPosition)
{
	static UFunction* uFnCanvasToScreen = nullptr;

	if (!uFnCanvasToScreen)
	{
		uFnCanvasToScreen = UFunction::FindFunction("Function Engine.UIScreenObject.CanvasToScreen");
	}

	UUIScreenObject_execCanvasToScreen_Params CanvasToScreen_Params;
	memset(&CanvasToScreen_Params, 0, sizeof(CanvasToScreen_Params));
	memcpy_s(&CanvasToScreen_Params.CanvasPosition, sizeof(CanvasToScreen_Params.CanvasPosition), &CanvasPosition, sizeof(CanvasPosition));

	uFnCanvasToScreen->iNative = 0;
	uFnCanvasToScreen->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnCanvasToScreen, &CanvasToScreen_Params, nullptr);
	uFnCanvasToScreen->FunctionFlags |= 0x400;
	uFnCanvasToScreen->iNative = 17970;

	memcpy_s(&CanvasPosition, sizeof(CanvasPosition), &CanvasToScreen_Params.CanvasPosition, sizeof(CanvasToScreen_Params.CanvasPosition));

	return CanvasToScreen_Params.ReturnValue;
};

// Function Engine.UIScreenObject.DeProject
// [0x00420401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[18892])
// Parameter Info:
// struct FVector                 ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FVector                 PixelPosition                  (CPF_Const | CPF_Parm | CPF_OutParm)

struct FVector UUIScreenObject::DeProject(struct FVector& PixelPosition)
{
	static UFunction* uFnDeProject = nullptr;

	if (!uFnDeProject)
	{
		uFnDeProject = UFunction::FindFunction("Function Engine.UIScreenObject.DeProject");
	}

	UUIScreenObject_execDeProject_Params DeProject_Params;
	memset(&DeProject_Params, 0, sizeof(DeProject_Params));
	memcpy_s(&DeProject_Params.PixelPosition, sizeof(DeProject_Params.PixelPosition), &PixelPosition, sizeof(PixelPosition));

	uFnDeProject->iNative = 0;
	uFnDeProject->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnDeProject, &DeProject_Params, nullptr);
	uFnDeProject->FunctionFlags |= 0x400;
	uFnDeProject->iNative = 18892;

	memcpy_s(&PixelPosition, sizeof(PixelPosition), &DeProject_Params.PixelPosition, sizeof(DeProject_Params.PixelPosition));

	return DeProject_Params.ReturnValue;
};

// Function Engine.UIScreenObject.Project
// [0x00420401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[24578])
// Parameter Info:
// struct FVector                 ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FVector                 CanvasPosition                 (CPF_Const | CPF_Parm | CPF_OutParm)

struct FVector UUIScreenObject::Project(struct FVector& CanvasPosition)
{
	static UFunction* uFnProject = nullptr;

	if (!uFnProject)
	{
		uFnProject = UFunction::FindFunction("Function Engine.UIScreenObject.Project");
	}

	UUIScreenObject_execProject_Params Project_Params;
	memset(&Project_Params, 0, sizeof(Project_Params));
	memcpy_s(&Project_Params.CanvasPosition, sizeof(Project_Params.CanvasPosition), &CanvasPosition, sizeof(CanvasPosition));

	uFnProject->iNative = 0;
	uFnProject->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnProject, &Project_Params, nullptr);
	uFnProject->FunctionFlags |= 0x400;
	uFnProject->iNative = 24578;

	memcpy_s(&CanvasPosition, sizeof(CanvasPosition), &Project_Params.CanvasPosition, sizeof(Project_Params.CanvasPosition));

	return Project_Params.ReturnValue;
};

// Function Engine.UIScreenObject.GetPositionVector
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[20691])
// Parameter Info:
// struct FVector                 ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       bIncludeParentPosition         (CPF_OptionalParm | CPF_Parm)

struct FVector UUIScreenObject::GetPositionVector(bool bIncludeParentPosition)
{
	static UFunction* uFnGetPositionVector = nullptr;

	if (!uFnGetPositionVector)
	{
		uFnGetPositionVector = UFunction::FindFunction("Function Engine.UIScreenObject.GetPositionVector");
	}

	UUIScreenObject_execGetPositionVector_Params GetPositionVector_Params;
	memset(&GetPositionVector_Params, 0, sizeof(GetPositionVector_Params));
	GetPositionVector_Params.bIncludeParentPosition = bIncludeParentPosition;

	uFnGetPositionVector->iNative = 0;
	uFnGetPositionVector->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetPositionVector, &GetPositionVector_Params, nullptr);
	uFnGetPositionVector->FunctionFlags |= 0x400;
	uFnGetPositionVector->iNative = 20691;

	return GetPositionVector_Params.ReturnValue;
};

// Function Engine.UIScreenObject.InvalidateAllPositions
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[21328])
// Parameter Info:
// uint32_t                       bIgnoreDockedFaces             (CPF_OptionalParm | CPF_Parm)

void UUIScreenObject::InvalidateAllPositions(bool bIgnoreDockedFaces)
{
	static UFunction* uFnInvalidateAllPositions = nullptr;

	if (!uFnInvalidateAllPositions)
	{
		uFnInvalidateAllPositions = UFunction::FindFunction("Function Engine.UIScreenObject.InvalidateAllPositions");
	}

	UUIScreenObject_execInvalidateAllPositions_Params InvalidateAllPositions_Params;
	memset(&InvalidateAllPositions_Params, 0, sizeof(InvalidateAllPositions_Params));
	InvalidateAllPositions_Params.bIgnoreDockedFaces = bIgnoreDockedFaces;

	uFnInvalidateAllPositions->iNative = 0;
	uFnInvalidateAllPositions->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnInvalidateAllPositions, &InvalidateAllPositions_Params, nullptr);
	uFnInvalidateAllPositions->FunctionFlags |= 0x400;
	uFnInvalidateAllPositions->iNative = 21328;
};

// Function Engine.UIScreenObject.GetPlayerOwnerIndex
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[20685])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       bRequireValidIndex             (CPF_OptionalParm | CPF_Parm)

int32_t UUIScreenObject::GetPlayerOwnerIndex(bool bRequireValidIndex)
{
	static UFunction* uFnGetPlayerOwnerIndex = nullptr;

	if (!uFnGetPlayerOwnerIndex)
	{
		uFnGetPlayerOwnerIndex = UFunction::FindFunction("Function Engine.UIScreenObject.GetPlayerOwnerIndex");
	}

	UUIScreenObject_execGetPlayerOwnerIndex_Params GetPlayerOwnerIndex_Params;
	memset(&GetPlayerOwnerIndex_Params, 0, sizeof(GetPlayerOwnerIndex_Params));
	GetPlayerOwnerIndex_Params.bRequireValidIndex = bRequireValidIndex;

	uFnGetPlayerOwnerIndex->iNative = 0;
	uFnGetPlayerOwnerIndex->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetPlayerOwnerIndex, &GetPlayerOwnerIndex_Params, nullptr);
	uFnGetPlayerOwnerIndex->FunctionFlags |= 0x400;
	uFnGetPlayerOwnerIndex->iNative = 20685;

	return GetPlayerOwnerIndex_Params.ReturnValue;
};

// Function Engine.UIScreenObject.GetBestControllerId
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20506])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t UUIScreenObject::GetBestControllerId()
{
	static UFunction* uFnGetBestControllerId = nullptr;

	if (!uFnGetBestControllerId)
	{
		uFnGetBestControllerId = UFunction::FindFunction("Function Engine.UIScreenObject.GetBestControllerId");
	}

	UUIScreenObject_execGetBestControllerId_Params GetBestControllerId_Params;
	memset(&GetBestControllerId_Params, 0, sizeof(GetBestControllerId_Params));

	uFnGetBestControllerId->iNative = 0;
	uFnGetBestControllerId->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetBestControllerId, &GetBestControllerId_Params, nullptr);
	uFnGetBestControllerId->FunctionFlags |= 0x400;
	uFnGetBestControllerId->iNative = 20506;

	return GetBestControllerId_Params.ReturnValue;
};

// Function Engine.UIScreenObject.GetBestPlayerIndex
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20507])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t UUIScreenObject::GetBestPlayerIndex()
{
	static UFunction* uFnGetBestPlayerIndex = nullptr;

	if (!uFnGetBestPlayerIndex)
	{
		uFnGetBestPlayerIndex = UFunction::FindFunction("Function Engine.UIScreenObject.GetBestPlayerIndex");
	}

	UUIScreenObject_execGetBestPlayerIndex_Params GetBestPlayerIndex_Params;
	memset(&GetBestPlayerIndex_Params, 0, sizeof(GetBestPlayerIndex_Params));

	uFnGetBestPlayerIndex->iNative = 0;
	uFnGetBestPlayerIndex->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetBestPlayerIndex, &GetBestPlayerIndex_Params, nullptr);
	uFnGetBestPlayerIndex->FunctionFlags |= 0x400;
	uFnGetBestPlayerIndex->iNative = 20507;

	return GetBestPlayerIndex_Params.ReturnValue;
};

// Function Engine.UIScreenObject.GetSupportedPlayerCount
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20777])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t UUIScreenObject::GetSupportedPlayerCount()
{
	static UFunction* uFnGetSupportedPlayerCount = nullptr;

	if (!uFnGetSupportedPlayerCount)
	{
		uFnGetSupportedPlayerCount = UFunction::FindFunction("Function Engine.UIScreenObject.GetSupportedPlayerCount");
	}

	UUIScreenObject_execGetSupportedPlayerCount_Params GetSupportedPlayerCount_Params;
	memset(&GetSupportedPlayerCount_Params, 0, sizeof(GetSupportedPlayerCount_Params));

	uFnGetSupportedPlayerCount->iNative = 0;
	uFnGetSupportedPlayerCount->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetSupportedPlayerCount, &GetSupportedPlayerCount_Params, nullptr);
	uFnGetSupportedPlayerCount->FunctionFlags |= 0x400;
	uFnGetSupportedPlayerCount->iNative = 20777;

	return GetSupportedPlayerCount_Params.ReturnValue;
};

// Function Engine.UIScreenObject.GetActivePlayerCount
// [0x00022401] (FUNC_Final | FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags) (iNative[20480])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t UUIScreenObject::GetActivePlayerCount()
{
	static UFunction* uFnGetActivePlayerCount = nullptr;

	if (!uFnGetActivePlayerCount)
	{
		uFnGetActivePlayerCount = UFunction::FindFunction("Function Engine.UIScreenObject.GetActivePlayerCount");
	}

	UUIScreenObject_execGetActivePlayerCount_Params GetActivePlayerCount_Params;
	memset(&GetActivePlayerCount_Params, 0, sizeof(GetActivePlayerCount_Params));

	uFnGetActivePlayerCount->iNative = 0;
	uFnGetActivePlayerCount->FunctionFlags &= ~0x400;
	UUIScreenObject::StaticClass()->ProcessEvent(uFnGetActivePlayerCount, &GetActivePlayerCount_Params, nullptr);
	uFnGetActivePlayerCount->FunctionFlags |= 0x400;
	uFnGetActivePlayerCount->iNative = 20480;

	return GetActivePlayerCount_Params.ReturnValue;
};

// Function Engine.UIScreenObject.SetInputMask
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[25680])
// Parameter Info:
// uint8_t                        NewInputMask                   (CPF_Parm)
// uint32_t                       bRecurse                       (CPF_OptionalParm | CPF_Parm)
// uint32_t                       bForcedOverride                (CPF_OptionalParm | CPF_Parm)

void UUIScreenObject::SetInputMask(uint8_t NewInputMask, bool bRecurse, bool bForcedOverride)
{
	static UFunction* uFnSetInputMask = nullptr;

	if (!uFnSetInputMask)
	{
		uFnSetInputMask = UFunction::FindFunction("Function Engine.UIScreenObject.SetInputMask");
	}

	UUIScreenObject_execSetInputMask_Params SetInputMask_Params;
	memset(&SetInputMask_Params, 0, sizeof(SetInputMask_Params));
	memcpy_s(&SetInputMask_Params.NewInputMask, sizeof(SetInputMask_Params.NewInputMask), &NewInputMask, sizeof(NewInputMask));
	SetInputMask_Params.bRecurse = bRecurse;
	SetInputMask_Params.bForcedOverride = bForcedOverride;

	uFnSetInputMask->iNative = 0;
	uFnSetInputMask->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetInputMask, &SetInputMask_Params, nullptr);
	uFnSetInputMask->FunctionFlags |= 0x400;
	uFnSetInputMask->iNative = 25680;
};

// Function Engine.UIScreenObject.GetInputMask
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[20606])
// Parameter Info:
// uint8_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       bInheritedMaskOnly             (CPF_OptionalParm | CPF_Parm)
// uint32_t                       bOverrideMaskOnly              (CPF_OptionalParm | CPF_Parm)

uint8_t UUIScreenObject::GetInputMask(bool bInheritedMaskOnly, bool bOverrideMaskOnly)
{
	static UFunction* uFnGetInputMask = nullptr;

	if (!uFnGetInputMask)
	{
		uFnGetInputMask = UFunction::FindFunction("Function Engine.UIScreenObject.GetInputMask");
	}

	UUIScreenObject_execGetInputMask_Params GetInputMask_Params;
	memset(&GetInputMask_Params, 0, sizeof(GetInputMask_Params));
	GetInputMask_Params.bInheritedMaskOnly = bInheritedMaskOnly;
	GetInputMask_Params.bOverrideMaskOnly = bOverrideMaskOnly;

	uFnGetInputMask->iNative = 0;
	uFnGetInputMask->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetInputMask, &GetInputMask_Params, nullptr);
	uFnGetInputMask->FunctionFlags |= 0x400;
	uFnGetInputMask->iNative = 20606;

	return GetInputMask_Params.ReturnValue;
};

// Function Engine.UIScreenObject.AcceptsPlayerInput
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[15025])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        PlayerIndex                    (CPF_Parm)

bool UUIScreenObject::AcceptsPlayerInput(int32_t PlayerIndex)
{
	static UFunction* uFnAcceptsPlayerInput = nullptr;

	if (!uFnAcceptsPlayerInput)
	{
		uFnAcceptsPlayerInput = UFunction::FindFunction("Function Engine.UIScreenObject.AcceptsPlayerInput");
	}

	UUIScreenObject_execAcceptsPlayerInput_Params AcceptsPlayerInput_Params;
	memset(&AcceptsPlayerInput_Params, 0, sizeof(AcceptsPlayerInput_Params));
	memcpy_s(&AcceptsPlayerInput_Params.PlayerIndex, sizeof(AcceptsPlayerInput_Params.PlayerIndex), &PlayerIndex, sizeof(PlayerIndex));

	uFnAcceptsPlayerInput->iNative = 0;
	uFnAcceptsPlayerInput->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnAcceptsPlayerInput, &AcceptsPlayerInput_Params, nullptr);
	uFnAcceptsPlayerInput->FunctionFlags |= 0x400;
	uFnAcceptsPlayerInput->iNative = 15025;

	return AcceptsPlayerInput_Params.ReturnValue;
};

// Function Engine.UIScreenObject.IsRuntimeInstance
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[21424])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UUIScreenObject::IsRuntimeInstance()
{
	static UFunction* uFnIsRuntimeInstance = nullptr;

	if (!uFnIsRuntimeInstance)
	{
		uFnIsRuntimeInstance = UFunction::FindFunction("Function Engine.UIScreenObject.IsRuntimeInstance");
	}

	UUIScreenObject_execIsRuntimeInstance_Params IsRuntimeInstance_Params;
	memset(&IsRuntimeInstance_Params, 0, sizeof(IsRuntimeInstance_Params));

	uFnIsRuntimeInstance->iNative = 0;
	uFnIsRuntimeInstance->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnIsRuntimeInstance, &IsRuntimeInstance_Params, nullptr);
	uFnIsRuntimeInstance->FunctionFlags |= 0x400;
	uFnIsRuntimeInstance->iNative = 21424;

	return IsRuntimeInstance_Params.ReturnValue;
};

// Function Engine.UIScreenObject.IsPressed
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[21418])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        PlayerIndex                    (CPF_OptionalParm | CPF_Parm)

bool UUIScreenObject::IsPressed(int32_t PlayerIndex)
{
	static UFunction* uFnIsPressed = nullptr;

	if (!uFnIsPressed)
	{
		uFnIsPressed = UFunction::FindFunction("Function Engine.UIScreenObject.IsPressed");
	}

	UUIScreenObject_execIsPressed_Params IsPressed_Params;
	memset(&IsPressed_Params, 0, sizeof(IsPressed_Params));
	memcpy_s(&IsPressed_Params.PlayerIndex, sizeof(IsPressed_Params.PlayerIndex), &PlayerIndex, sizeof(PlayerIndex));

	uFnIsPressed->iNative = 0;
	uFnIsPressed->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnIsPressed, &IsPressed_Params, nullptr);
	uFnIsPressed->FunctionFlags |= 0x400;
	uFnIsPressed->iNative = 21418;

	return IsPressed_Params.ReturnValue;
};

// Function Engine.UIScreenObject.IsActive
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[21354])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        PlayerIndex                    (CPF_OptionalParm | CPF_Parm)

bool UUIScreenObject::IsActive(int32_t PlayerIndex)
{
	static UFunction* uFnIsActive = nullptr;

	if (!uFnIsActive)
	{
		uFnIsActive = UFunction::FindFunction("Function Engine.UIScreenObject.IsActive");
	}

	UUIScreenObject_execIsActive_Params IsActive_Params;
	memset(&IsActive_Params, 0, sizeof(IsActive_Params));
	memcpy_s(&IsActive_Params.PlayerIndex, sizeof(IsActive_Params.PlayerIndex), &PlayerIndex, sizeof(PlayerIndex));

	uFnIsActive->iNative = 0;
	uFnIsActive->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnIsActive, &IsActive_Params, nullptr);
	uFnIsActive->FunctionFlags |= 0x400;
	uFnIsActive->iNative = 21354;

	return IsActive_Params.ReturnValue;
};

// Function Engine.UIScreenObject.IsFocused
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[21380])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        PlayerIndex                    (CPF_OptionalParm | CPF_Parm)

bool UUIScreenObject::IsFocused(int32_t PlayerIndex)
{
	static UFunction* uFnIsFocused = nullptr;

	if (!uFnIsFocused)
	{
		uFnIsFocused = UFunction::FindFunction("Function Engine.UIScreenObject.IsFocused");
	}

	UUIScreenObject_execIsFocused_Params IsFocused_Params;
	memset(&IsFocused_Params, 0, sizeof(IsFocused_Params));
	memcpy_s(&IsFocused_Params.PlayerIndex, sizeof(IsFocused_Params.PlayerIndex), &PlayerIndex, sizeof(PlayerIndex));

	uFnIsFocused->iNative = 0;
	uFnIsFocused->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnIsFocused, &IsFocused_Params, nullptr);
	uFnIsFocused->FunctionFlags |= 0x400;
	uFnIsFocused->iNative = 21380;

	return IsFocused_Params.ReturnValue;
};

// Function Engine.UIScreenObject.IsDisabled
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[21376])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        PlayerIndex                    (CPF_OptionalParm | CPF_Parm)
// uint32_t                       bCheckOwnerChain               (CPF_OptionalParm | CPF_Parm)

bool UUIScreenObject::IsDisabled(int32_t PlayerIndex, bool bCheckOwnerChain)
{
	static UFunction* uFnIsDisabled = nullptr;

	if (!uFnIsDisabled)
	{
		uFnIsDisabled = UFunction::FindFunction("Function Engine.UIScreenObject.IsDisabled");
	}

	UUIScreenObject_execIsDisabled_Params IsDisabled_Params;
	memset(&IsDisabled_Params, 0, sizeof(IsDisabled_Params));
	memcpy_s(&IsDisabled_Params.PlayerIndex, sizeof(IsDisabled_Params.PlayerIndex), &PlayerIndex, sizeof(PlayerIndex));
	IsDisabled_Params.bCheckOwnerChain = bCheckOwnerChain;

	uFnIsDisabled->iNative = 0;
	uFnIsDisabled->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnIsDisabled, &IsDisabled_Params, nullptr);
	uFnIsDisabled->FunctionFlags |= 0x400;
	uFnIsDisabled->iNative = 21376;

	return IsDisabled_Params.ReturnValue;
};

// Function Engine.UIScreenObject.IsEnabled
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[13590])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        PlayerIndex                    (CPF_OptionalParm | CPF_Parm)
// uint32_t                       bCheckOwnerChain               (CPF_OptionalParm | CPF_Parm)

bool UUIScreenObject::IsEnabled(int32_t PlayerIndex, bool bCheckOwnerChain)
{
	static UFunction* uFnIsEnabled = nullptr;

	if (!uFnIsEnabled)
	{
		uFnIsEnabled = UFunction::FindFunction("Function Engine.UIScreenObject.IsEnabled");
	}

	UUIScreenObject_execIsEnabled_Params IsEnabled_Params;
	memset(&IsEnabled_Params, 0, sizeof(IsEnabled_Params));
	memcpy_s(&IsEnabled_Params.PlayerIndex, sizeof(IsEnabled_Params.PlayerIndex), &PlayerIndex, sizeof(PlayerIndex));
	IsEnabled_Params.bCheckOwnerChain = bCheckOwnerChain;

	uFnIsEnabled->iNative = 0;
	uFnIsEnabled->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnIsEnabled, &IsEnabled_Params, nullptr);
	uFnIsEnabled->FunctionFlags |= 0x400;
	uFnIsEnabled->iNative = 13590;

	return IsEnabled_Params.ReturnValue;
};

// Function Engine.UIScreenObject.KillFocus
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[21508])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UUIScreenObject*         Sender                         (CPF_Parm)
// int32_t                        PlayerIndex                    (CPF_OptionalParm | CPF_Parm)

bool UUIScreenObject::KillFocus(class UUIScreenObject* Sender, int32_t PlayerIndex)
{
	static UFunction* uFnKillFocus = nullptr;

	if (!uFnKillFocus)
	{
		uFnKillFocus = UFunction::FindFunction("Function Engine.UIScreenObject.KillFocus");
	}

	UUIScreenObject_execKillFocus_Params KillFocus_Params;
	memset(&KillFocus_Params, 0, sizeof(KillFocus_Params));
	KillFocus_Params.Sender = Sender;
	memcpy_s(&KillFocus_Params.PlayerIndex, sizeof(KillFocus_Params.PlayerIndex), &PlayerIndex, sizeof(PlayerIndex));

	uFnKillFocus->iNative = 0;
	uFnKillFocus->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnKillFocus, &KillFocus_Params, nullptr);
	uFnKillFocus->FunctionFlags |= 0x400;
	uFnKillFocus->iNative = 21508;

	return KillFocus_Params.ReturnValue;
};

// Function Engine.UIScreenObject.SetFocus
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[25660])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UUIScreenObject*         Sender                         (CPF_Parm)
// int32_t                        PlayerIndex                    (CPF_OptionalParm | CPF_Parm)

bool UUIScreenObject::SetFocus(class UUIScreenObject* Sender, int32_t PlayerIndex)
{
	static UFunction* uFnSetFocus = nullptr;

	if (!uFnSetFocus)
	{
		uFnSetFocus = UFunction::FindFunction("Function Engine.UIScreenObject.SetFocus");
	}

	UUIScreenObject_execSetFocus_Params SetFocus_Params;
	memset(&SetFocus_Params, 0, sizeof(SetFocus_Params));
	SetFocus_Params.Sender = Sender;
	memcpy_s(&SetFocus_Params.PlayerIndex, sizeof(SetFocus_Params.PlayerIndex), &PlayerIndex, sizeof(PlayerIndex));

	uFnSetFocus->iNative = 0;
	uFnSetFocus->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetFocus, &SetFocus_Params, nullptr);
	uFnSetFocus->FunctionFlags |= 0x400;
	uFnSetFocus->iNative = 25660;

	return SetFocus_Params.ReturnValue;
};

// Function Engine.UIScreenObject.CanAcceptFocus
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[17937])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        PlayerIndex                    (CPF_OptionalParm | CPF_Parm)
// uint32_t                       bIncludeParentVisibility       (CPF_OptionalParm | CPF_Parm)

bool UUIScreenObject::CanAcceptFocus(int32_t PlayerIndex, bool bIncludeParentVisibility)
{
	static UFunction* uFnCanAcceptFocus = nullptr;

	if (!uFnCanAcceptFocus)
	{
		uFnCanAcceptFocus = UFunction::FindFunction("Function Engine.UIScreenObject.CanAcceptFocus");
	}

	UUIScreenObject_execCanAcceptFocus_Params CanAcceptFocus_Params;
	memset(&CanAcceptFocus_Params, 0, sizeof(CanAcceptFocus_Params));
	memcpy_s(&CanAcceptFocus_Params.PlayerIndex, sizeof(CanAcceptFocus_Params.PlayerIndex), &PlayerIndex, sizeof(PlayerIndex));
	CanAcceptFocus_Params.bIncludeParentVisibility = bIncludeParentVisibility;

	uFnCanAcceptFocus->iNative = 0;
	uFnCanAcceptFocus->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnCanAcceptFocus, &CanAcceptFocus_Params, nullptr);
	uFnCanAcceptFocus->FunctionFlags |= 0x400;
	uFnCanAcceptFocus->iNative = 17937;

	return CanAcceptFocus_Params.ReturnValue;
};

// Function Engine.UIScreenObject.IsNeverFocused
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[21409])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UUIScreenObject::IsNeverFocused()
{
	static UFunction* uFnIsNeverFocused = nullptr;

	if (!uFnIsNeverFocused)
	{
		uFnIsNeverFocused = UFunction::FindFunction("Function Engine.UIScreenObject.IsNeverFocused");
	}

	UUIScreenObject_execIsNeverFocused_Params IsNeverFocused_Params;
	memset(&IsNeverFocused_Params, 0, sizeof(IsNeverFocused_Params));

	uFnIsNeverFocused->iNative = 0;
	uFnIsNeverFocused->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnIsNeverFocused, &IsNeverFocused_Params, nullptr);
	uFnIsNeverFocused->FunctionFlags |= 0x400;
	uFnIsNeverFocused->iNative = 21409;

	return IsNeverFocused_Params.ReturnValue;
};

// Function Engine.UIScreenObject.PrevControl
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[24482])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UUIScreenObject*         Sender                         (CPF_Parm)
// int32_t                        PlayerIndex                    (CPF_OptionalParm | CPF_Parm)

bool UUIScreenObject::PrevControl(class UUIScreenObject* Sender, int32_t PlayerIndex)
{
	static UFunction* uFnPrevControl = nullptr;

	if (!uFnPrevControl)
	{
		uFnPrevControl = UFunction::FindFunction("Function Engine.UIScreenObject.PrevControl");
	}

	UUIScreenObject_execPrevControl_Params PrevControl_Params;
	memset(&PrevControl_Params, 0, sizeof(PrevControl_Params));
	PrevControl_Params.Sender = Sender;
	memcpy_s(&PrevControl_Params.PlayerIndex, sizeof(PrevControl_Params.PlayerIndex), &PlayerIndex, sizeof(PlayerIndex));

	uFnPrevControl->iNative = 0;
	uFnPrevControl->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnPrevControl, &PrevControl_Params, nullptr);
	uFnPrevControl->FunctionFlags |= 0x400;
	uFnPrevControl->iNative = 24482;

	return PrevControl_Params.ReturnValue;
};

// Function Engine.UIScreenObject.NextControl
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[23297])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UUIScreenObject*         Sender                         (CPF_Parm)
// int32_t                        PlayerIndex                    (CPF_OptionalParm | CPF_Parm)

bool UUIScreenObject::NextControl(class UUIScreenObject* Sender, int32_t PlayerIndex)
{
	static UFunction* uFnNextControl = nullptr;

	if (!uFnNextControl)
	{
		uFnNextControl = UFunction::FindFunction("Function Engine.UIScreenObject.NextControl");
	}

	UUIScreenObject_execNextControl_Params NextControl_Params;
	memset(&NextControl_Params, 0, sizeof(NextControl_Params));
	NextControl_Params.Sender = Sender;
	memcpy_s(&NextControl_Params.PlayerIndex, sizeof(NextControl_Params.PlayerIndex), &PlayerIndex, sizeof(PlayerIndex));

	uFnNextControl->iNative = 0;
	uFnNextControl->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnNextControl, &NextControl_Params, nullptr);
	uFnNextControl->FunctionFlags |= 0x400;
	uFnNextControl->iNative = 23297;

	return NextControl_Params.ReturnValue;
};

// Function Engine.UIScreenObject.FocusLastControl
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[20214])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UUIScreenObject*         Sender                         (CPF_Parm)
// int32_t                        PlayerIndex                    (CPF_OptionalParm | CPF_Parm)

bool UUIScreenObject::FocusLastControl(class UUIScreenObject* Sender, int32_t PlayerIndex)
{
	static UFunction* uFnFocusLastControl = nullptr;

	if (!uFnFocusLastControl)
	{
		uFnFocusLastControl = UFunction::FindFunction("Function Engine.UIScreenObject.FocusLastControl");
	}

	UUIScreenObject_execFocusLastControl_Params FocusLastControl_Params;
	memset(&FocusLastControl_Params, 0, sizeof(FocusLastControl_Params));
	FocusLastControl_Params.Sender = Sender;
	memcpy_s(&FocusLastControl_Params.PlayerIndex, sizeof(FocusLastControl_Params.PlayerIndex), &PlayerIndex, sizeof(PlayerIndex));

	uFnFocusLastControl->iNative = 0;
	uFnFocusLastControl->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnFocusLastControl, &FocusLastControl_Params, nullptr);
	uFnFocusLastControl->FunctionFlags |= 0x400;
	uFnFocusLastControl->iNative = 20214;

	return FocusLastControl_Params.ReturnValue;
};

// Function Engine.UIScreenObject.FocusFirstControl
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[20212])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UUIScreenObject*         Sender                         (CPF_Parm)
// int32_t                        PlayerIndex                    (CPF_OptionalParm | CPF_Parm)

bool UUIScreenObject::FocusFirstControl(class UUIScreenObject* Sender, int32_t PlayerIndex)
{
	static UFunction* uFnFocusFirstControl = nullptr;

	if (!uFnFocusFirstControl)
	{
		uFnFocusFirstControl = UFunction::FindFunction("Function Engine.UIScreenObject.FocusFirstControl");
	}

	UUIScreenObject_execFocusFirstControl_Params FocusFirstControl_Params;
	memset(&FocusFirstControl_Params, 0, sizeof(FocusFirstControl_Params));
	FocusFirstControl_Params.Sender = Sender;
	memcpy_s(&FocusFirstControl_Params.PlayerIndex, sizeof(FocusFirstControl_Params.PlayerIndex), &PlayerIndex, sizeof(PlayerIndex));

	uFnFocusFirstControl->iNative = 0;
	uFnFocusFirstControl->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnFocusFirstControl, &FocusFirstControl_Params, nullptr);
	uFnFocusFirstControl->FunctionFlags |= 0x400;
	uFnFocusFirstControl->iNative = 20212;

	return FocusFirstControl_Params.ReturnValue;
};

// Function Engine.UIScreenObject.IsHoldingShift
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[21389])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        ControllerId                   (CPF_Parm)

bool UUIScreenObject::IsHoldingShift(int32_t ControllerId)
{
	static UFunction* uFnIsHoldingShift = nullptr;

	if (!uFnIsHoldingShift)
	{
		uFnIsHoldingShift = UFunction::FindFunction("Function Engine.UIScreenObject.IsHoldingShift");
	}

	UUIScreenObject_execIsHoldingShift_Params IsHoldingShift_Params;
	memset(&IsHoldingShift_Params, 0, sizeof(IsHoldingShift_Params));
	memcpy_s(&IsHoldingShift_Params.ControllerId, sizeof(IsHoldingShift_Params.ControllerId), &ControllerId, sizeof(ControllerId));

	uFnIsHoldingShift->iNative = 0;
	uFnIsHoldingShift->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnIsHoldingShift, &IsHoldingShift_Params, nullptr);
	uFnIsHoldingShift->FunctionFlags |= 0x400;
	uFnIsHoldingShift->iNative = 21389;

	return IsHoldingShift_Params.ReturnValue;
};

// Function Engine.UIScreenObject.IsHoldingAlt
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[21387])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        ControllerId                   (CPF_Parm)

bool UUIScreenObject::IsHoldingAlt(int32_t ControllerId)
{
	static UFunction* uFnIsHoldingAlt = nullptr;

	if (!uFnIsHoldingAlt)
	{
		uFnIsHoldingAlt = UFunction::FindFunction("Function Engine.UIScreenObject.IsHoldingAlt");
	}

	UUIScreenObject_execIsHoldingAlt_Params IsHoldingAlt_Params;
	memset(&IsHoldingAlt_Params, 0, sizeof(IsHoldingAlt_Params));
	memcpy_s(&IsHoldingAlt_Params.ControllerId, sizeof(IsHoldingAlt_Params.ControllerId), &ControllerId, sizeof(ControllerId));

	uFnIsHoldingAlt->iNative = 0;
	uFnIsHoldingAlt->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnIsHoldingAlt, &IsHoldingAlt_Params, nullptr);
	uFnIsHoldingAlt->FunctionFlags |= 0x400;
	uFnIsHoldingAlt->iNative = 21387;

	return IsHoldingAlt_Params.ReturnValue;
};

// Function Engine.UIScreenObject.IsHoldingCtrl
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[21388])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        ControllerId                   (CPF_Parm)

bool UUIScreenObject::IsHoldingCtrl(int32_t ControllerId)
{
	static UFunction* uFnIsHoldingCtrl = nullptr;

	if (!uFnIsHoldingCtrl)
	{
		uFnIsHoldingCtrl = UFunction::FindFunction("Function Engine.UIScreenObject.IsHoldingCtrl");
	}

	UUIScreenObject_execIsHoldingCtrl_Params IsHoldingCtrl_Params;
	memset(&IsHoldingCtrl_Params, 0, sizeof(IsHoldingCtrl_Params));
	memcpy_s(&IsHoldingCtrl_Params.ControllerId, sizeof(IsHoldingCtrl_Params.ControllerId), &ControllerId, sizeof(ControllerId));

	uFnIsHoldingCtrl->iNative = 0;
	uFnIsHoldingCtrl->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnIsHoldingCtrl, &IsHoldingCtrl_Params, nullptr);
	uFnIsHoldingCtrl->FunctionFlags |= 0x400;
	uFnIsHoldingCtrl->iNative = 21388;

	return IsHoldingCtrl_Params.ReturnValue;
};

// Function Engine.UIScreenObject.ConditionalPropagateEnabledState
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[18334])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        PlayerIndex                    (CPF_Parm)
// uint32_t                       bForce                         (CPF_OptionalParm | CPF_Parm)

bool UUIScreenObject::ConditionalPropagateEnabledState(int32_t PlayerIndex, bool bForce)
{
	static UFunction* uFnConditionalPropagateEnabledState = nullptr;

	if (!uFnConditionalPropagateEnabledState)
	{
		uFnConditionalPropagateEnabledState = UFunction::FindFunction("Function Engine.UIScreenObject.ConditionalPropagateEnabledState");
	}

	UUIScreenObject_execConditionalPropagateEnabledState_Params ConditionalPropagateEnabledState_Params;
	memset(&ConditionalPropagateEnabledState_Params, 0, sizeof(ConditionalPropagateEnabledState_Params));
	memcpy_s(&ConditionalPropagateEnabledState_Params.PlayerIndex, sizeof(ConditionalPropagateEnabledState_Params.PlayerIndex), &PlayerIndex, sizeof(PlayerIndex));
	ConditionalPropagateEnabledState_Params.bForce = bForce;

	uFnConditionalPropagateEnabledState->iNative = 0;
	uFnConditionalPropagateEnabledState->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnConditionalPropagateEnabledState, &ConditionalPropagateEnabledState_Params, nullptr);
	uFnConditionalPropagateEnabledState->FunctionFlags |= 0x400;
	uFnConditionalPropagateEnabledState->iNative = 18334;

	return ConditionalPropagateEnabledState_Params.ReturnValue;
};

// Function Engine.UIScreenObject.DeactivateStateByClass
// [0x00424401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[18615])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UUIState*                StateToRemove                  (CPF_Parm)
// int32_t                        PlayerIndex                    (CPF_Parm)
// class UUIState*                StateThatWasRemoved            (CPF_OptionalParm | CPF_Parm | CPF_OutParm)

bool UUIScreenObject::DeactivateStateByClass(class UUIState* StateToRemove, int32_t PlayerIndex, class UUIState*& StateThatWasRemoved)
{
	static UFunction* uFnDeactivateStateByClass = nullptr;

	if (!uFnDeactivateStateByClass)
	{
		uFnDeactivateStateByClass = UFunction::FindFunction("Function Engine.UIScreenObject.DeactivateStateByClass");
	}

	UUIScreenObject_execDeactivateStateByClass_Params DeactivateStateByClass_Params;
	memset(&DeactivateStateByClass_Params, 0, sizeof(DeactivateStateByClass_Params));
	DeactivateStateByClass_Params.StateToRemove = StateToRemove;
	memcpy_s(&DeactivateStateByClass_Params.PlayerIndex, sizeof(DeactivateStateByClass_Params.PlayerIndex), &PlayerIndex, sizeof(PlayerIndex));
	DeactivateStateByClass_Params.StateThatWasRemoved = StateThatWasRemoved;

	uFnDeactivateStateByClass->iNative = 0;
	uFnDeactivateStateByClass->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnDeactivateStateByClass, &DeactivateStateByClass_Params, nullptr);
	uFnDeactivateStateByClass->FunctionFlags |= 0x400;
	uFnDeactivateStateByClass->iNative = 18615;

	StateThatWasRemoved = DeactivateStateByClass_Params.StateThatWasRemoved;

	return DeactivateStateByClass_Params.ReturnValue;
};

// Function Engine.UIScreenObject.DeactivateState
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13514])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UUIState*                StateToRemove                  (CPF_Parm)
// int32_t                        PlayerIndex                    (CPF_Parm)

bool UUIScreenObject::DeactivateState(class UUIState* StateToRemove, int32_t PlayerIndex)
{
	static UFunction* uFnDeactivateState = nullptr;

	if (!uFnDeactivateState)
	{
		uFnDeactivateState = UFunction::FindFunction("Function Engine.UIScreenObject.DeactivateState");
	}

	UUIScreenObject_execDeactivateState_Params DeactivateState_Params;
	memset(&DeactivateState_Params, 0, sizeof(DeactivateState_Params));
	DeactivateState_Params.StateToRemove = StateToRemove;
	memcpy_s(&DeactivateState_Params.PlayerIndex, sizeof(DeactivateState_Params.PlayerIndex), &PlayerIndex, sizeof(PlayerIndex));

	uFnDeactivateState->iNative = 0;
	uFnDeactivateState->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnDeactivateState, &DeactivateState_Params, nullptr);
	uFnDeactivateState->FunctionFlags |= 0x400;
	uFnDeactivateState->iNative = 13514;

	return DeactivateState_Params.ReturnValue;
};

// Function Engine.UIScreenObject.ActivateStateByClass
// [0x00424401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[15069])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UUIState*                StateToActivate                (CPF_Parm)
// int32_t                        PlayerIndex                    (CPF_Parm)
// class UUIState*                StateThatWasAdded              (CPF_OptionalParm | CPF_Parm | CPF_OutParm)

bool UUIScreenObject::ActivateStateByClass(class UUIState* StateToActivate, int32_t PlayerIndex, class UUIState*& StateThatWasAdded)
{
	static UFunction* uFnActivateStateByClass = nullptr;

	if (!uFnActivateStateByClass)
	{
		uFnActivateStateByClass = UFunction::FindFunction("Function Engine.UIScreenObject.ActivateStateByClass");
	}

	UUIScreenObject_execActivateStateByClass_Params ActivateStateByClass_Params;
	memset(&ActivateStateByClass_Params, 0, sizeof(ActivateStateByClass_Params));
	ActivateStateByClass_Params.StateToActivate = StateToActivate;
	memcpy_s(&ActivateStateByClass_Params.PlayerIndex, sizeof(ActivateStateByClass_Params.PlayerIndex), &PlayerIndex, sizeof(PlayerIndex));
	ActivateStateByClass_Params.StateThatWasAdded = StateThatWasAdded;

	uFnActivateStateByClass->iNative = 0;
	uFnActivateStateByClass->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnActivateStateByClass, &ActivateStateByClass_Params, nullptr);
	uFnActivateStateByClass->FunctionFlags |= 0x400;
	uFnActivateStateByClass->iNative = 15069;

	StateThatWasAdded = ActivateStateByClass_Params.StateThatWasAdded;

	return ActivateStateByClass_Params.ReturnValue;
};

// Function Engine.UIScreenObject.ActivateState
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13461])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UUIState*                StateToActivate                (CPF_Parm)
// int32_t                        PlayerIndex                    (CPF_Parm)

bool UUIScreenObject::ActivateState(class UUIState* StateToActivate, int32_t PlayerIndex)
{
	static UFunction* uFnActivateState = nullptr;

	if (!uFnActivateState)
	{
		uFnActivateState = UFunction::FindFunction("Function Engine.UIScreenObject.ActivateState");
	}

	UUIScreenObject_execActivateState_Params ActivateState_Params;
	memset(&ActivateState_Params, 0, sizeof(ActivateState_Params));
	ActivateState_Params.StateToActivate = StateToActivate;
	memcpy_s(&ActivateState_Params.PlayerIndex, sizeof(ActivateState_Params.PlayerIndex), &PlayerIndex, sizeof(PlayerIndex));

	uFnActivateState->iNative = 0;
	uFnActivateState->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnActivateState, &ActivateState_Params, nullptr);
	uFnActivateState->FunctionFlags |= 0x400;
	uFnActivateState->iNative = 13461;

	return ActivateState_Params.ReturnValue;
};

// Function Engine.UIScreenObject.HasActiveStateOfClass
// [0x00424401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20900])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UUIState*                StateClass                     (CPF_Parm)
// int32_t                        PlayerIndex                    (CPF_Parm)
// int32_t                        StateIndex                     (CPF_OptionalParm | CPF_Parm | CPF_OutParm)

bool UUIScreenObject::HasActiveStateOfClass(class UUIState* StateClass, int32_t PlayerIndex, int32_t& StateIndex)
{
	static UFunction* uFnHasActiveStateOfClass = nullptr;

	if (!uFnHasActiveStateOfClass)
	{
		uFnHasActiveStateOfClass = UFunction::FindFunction("Function Engine.UIScreenObject.HasActiveStateOfClass");
	}

	UUIScreenObject_execHasActiveStateOfClass_Params HasActiveStateOfClass_Params;
	memset(&HasActiveStateOfClass_Params, 0, sizeof(HasActiveStateOfClass_Params));
	HasActiveStateOfClass_Params.StateClass = StateClass;
	memcpy_s(&HasActiveStateOfClass_Params.PlayerIndex, sizeof(HasActiveStateOfClass_Params.PlayerIndex), &PlayerIndex, sizeof(PlayerIndex));
	memcpy_s(&HasActiveStateOfClass_Params.StateIndex, sizeof(HasActiveStateOfClass_Params.StateIndex), &StateIndex, sizeof(StateIndex));

	uFnHasActiveStateOfClass->iNative = 0;
	uFnHasActiveStateOfClass->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnHasActiveStateOfClass, &HasActiveStateOfClass_Params, nullptr);
	uFnHasActiveStateOfClass->FunctionFlags |= 0x400;
	uFnHasActiveStateOfClass->iNative = 20900;

	memcpy_s(&StateIndex, sizeof(StateIndex), &HasActiveStateOfClass_Params.StateIndex, sizeof(HasActiveStateOfClass_Params.StateIndex));

	return HasActiveStateOfClass_Params.ReturnValue;
};

// Function Engine.UIScreenObject.GetCurrentState
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[20547])
// Parameter Info:
// class UUIState*                ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        PlayerIndex                    (CPF_OptionalParm | CPF_Parm)

class UUIState* UUIScreenObject::GetCurrentState(int32_t PlayerIndex)
{
	static UFunction* uFnGetCurrentState = nullptr;

	if (!uFnGetCurrentState)
	{
		uFnGetCurrentState = UFunction::FindFunction("Function Engine.UIScreenObject.GetCurrentState");
	}

	UUIScreenObject_execGetCurrentState_Params GetCurrentState_Params;
	memset(&GetCurrentState_Params, 0, sizeof(GetCurrentState_Params));
	memcpy_s(&GetCurrentState_Params.PlayerIndex, sizeof(GetCurrentState_Params.PlayerIndex), &PlayerIndex, sizeof(PlayerIndex));

	uFnGetCurrentState->iNative = 0;
	uFnGetCurrentState->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetCurrentState, &GetCurrentState_Params, nullptr);
	uFnGetCurrentState->FunctionFlags |= 0x400;
	uFnGetCurrentState->iNative = 20547;

	return GetCurrentState_Params.ReturnValue;
};

// Function Engine.UIScreenObject.SetEnabled
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[13734])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       bEnabled                       (CPF_Parm)
// int32_t                        PlayerIndex                    (CPF_OptionalParm | CPF_Parm)

bool UUIScreenObject::SetEnabled(bool bEnabled, int32_t PlayerIndex)
{
	static UFunction* uFnSetEnabled = nullptr;

	if (!uFnSetEnabled)
	{
		uFnSetEnabled = UFunction::FindFunction("Function Engine.UIScreenObject.SetEnabled");
	}

	UUIScreenObject_execSetEnabled_Params SetEnabled_Params;
	memset(&SetEnabled_Params, 0, sizeof(SetEnabled_Params));
	SetEnabled_Params.bEnabled = bEnabled;
	memcpy_s(&SetEnabled_Params.PlayerIndex, sizeof(SetEnabled_Params.PlayerIndex), &PlayerIndex, sizeof(PlayerIndex));

	uFnSetEnabled->iNative = 0;
	uFnSetEnabled->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetEnabled, &SetEnabled_Params, nullptr);
	uFnSetEnabled->FunctionFlags |= 0x400;
	uFnSetEnabled->iNative = 13734;

	return SetEnabled_Params.ReturnValue;
};

// Function Engine.UIScreenObject.GetAspectRatio
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20498])
// Parameter Info:
// float                          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

float UUIScreenObject::GetAspectRatio()
{
	static UFunction* uFnGetAspectRatio = nullptr;

	if (!uFnGetAspectRatio)
	{
		uFnGetAspectRatio = UFunction::FindFunction("Function Engine.UIScreenObject.GetAspectRatio");
	}

	UUIScreenObject_execGetAspectRatio_Params GetAspectRatio_Params;
	memset(&GetAspectRatio_Params, 0, sizeof(GetAspectRatio_Params));

	uFnGetAspectRatio->iNative = 0;
	uFnGetAspectRatio->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetAspectRatio, &GetAspectRatio_Params, nullptr);
	uFnGetAspectRatio->FunctionFlags |= 0x400;
	uFnGetAspectRatio->iNative = 20498;

	return GetAspectRatio_Params.ReturnValue;
};

// Function Engine.UIScreenObject.GetViewportHeight
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20813])
// Parameter Info:
// float                          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

float UUIScreenObject::GetViewportHeight()
{
	static UFunction* uFnGetViewportHeight = nullptr;

	if (!uFnGetViewportHeight)
	{
		uFnGetViewportHeight = UFunction::FindFunction("Function Engine.UIScreenObject.GetViewportHeight");
	}

	UUIScreenObject_execGetViewportHeight_Params GetViewportHeight_Params;
	memset(&GetViewportHeight_Params, 0, sizeof(GetViewportHeight_Params));

	uFnGetViewportHeight->iNative = 0;
	uFnGetViewportHeight->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetViewportHeight, &GetViewportHeight_Params, nullptr);
	uFnGetViewportHeight->FunctionFlags |= 0x400;
	uFnGetViewportHeight->iNative = 20813;

	return GetViewportHeight_Params.ReturnValue;
};

// Function Engine.UIScreenObject.GetViewportWidth
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20818])
// Parameter Info:
// float                          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

float UUIScreenObject::GetViewportWidth()
{
	static UFunction* uFnGetViewportWidth = nullptr;

	if (!uFnGetViewportWidth)
	{
		uFnGetViewportWidth = UFunction::FindFunction("Function Engine.UIScreenObject.GetViewportWidth");
	}

	UUIScreenObject_execGetViewportWidth_Params GetViewportWidth_Params;
	memset(&GetViewportWidth_Params, 0, sizeof(GetViewportWidth_Params));

	uFnGetViewportWidth->iNative = 0;
	uFnGetViewportWidth->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetViewportWidth, &GetViewportWidth_Params, nullptr);
	uFnGetViewportWidth->FunctionFlags |= 0x400;
	uFnGetViewportWidth->iNative = 20818;

	return GetViewportWidth_Params.ReturnValue;
};

// Function Engine.UIScreenObject.GetViewportSize
// [0x00420401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20817])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FVector2D               out_ViewportSize               (CPF_Parm | CPF_OutParm)

bool UUIScreenObject::GetViewportSize(struct FVector2D& out_ViewportSize)
{
	static UFunction* uFnGetViewportSize = nullptr;

	if (!uFnGetViewportSize)
	{
		uFnGetViewportSize = UFunction::FindFunction("Function Engine.UIScreenObject.GetViewportSize");
	}

	UUIScreenObject_execGetViewportSize_Params GetViewportSize_Params;
	memset(&GetViewportSize_Params, 0, sizeof(GetViewportSize_Params));
	memcpy_s(&GetViewportSize_Params.out_ViewportSize, sizeof(GetViewportSize_Params.out_ViewportSize), &out_ViewportSize, sizeof(out_ViewportSize));

	uFnGetViewportSize->iNative = 0;
	uFnGetViewportSize->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetViewportSize, &GetViewportSize_Params, nullptr);
	uFnGetViewportSize->FunctionFlags |= 0x400;
	uFnGetViewportSize->iNative = 20817;

	memcpy_s(&out_ViewportSize, sizeof(out_ViewportSize), &GetViewportSize_Params.out_ViewportSize, sizeof(GetViewportSize_Params.out_ViewportSize));

	return GetViewportSize_Params.ReturnValue;
};

// Function Engine.UIScreenObject.GetViewportOrigin
// [0x00420401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20815])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FVector2D               out_ViewportOrigin             (CPF_Parm | CPF_OutParm)

bool UUIScreenObject::GetViewportOrigin(struct FVector2D& out_ViewportOrigin)
{
	static UFunction* uFnGetViewportOrigin = nullptr;

	if (!uFnGetViewportOrigin)
	{
		uFnGetViewportOrigin = UFunction::FindFunction("Function Engine.UIScreenObject.GetViewportOrigin");
	}

	UUIScreenObject_execGetViewportOrigin_Params GetViewportOrigin_Params;
	memset(&GetViewportOrigin_Params, 0, sizeof(GetViewportOrigin_Params));
	memcpy_s(&GetViewportOrigin_Params.out_ViewportOrigin, sizeof(GetViewportOrigin_Params.out_ViewportOrigin), &out_ViewportOrigin, sizeof(out_ViewportOrigin));

	uFnGetViewportOrigin->iNative = 0;
	uFnGetViewportOrigin->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetViewportOrigin, &GetViewportOrigin_Params, nullptr);
	uFnGetViewportOrigin->FunctionFlags |= 0x400;
	uFnGetViewportOrigin->iNative = 20815;

	memcpy_s(&out_ViewportOrigin, sizeof(out_ViewportOrigin), &GetViewportOrigin_Params.out_ViewportOrigin, sizeof(GetViewportOrigin_Params.out_ViewportOrigin));

	return GetViewportOrigin_Params.ReturnValue;
};

// Function Engine.UIScreenObject.GetViewportScale
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20816])
// Parameter Info:
// float                          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

float UUIScreenObject::GetViewportScale()
{
	static UFunction* uFnGetViewportScale = nullptr;

	if (!uFnGetViewportScale)
	{
		uFnGetViewportScale = UFunction::FindFunction("Function Engine.UIScreenObject.GetViewportScale");
	}

	UUIScreenObject_execGetViewportScale_Params GetViewportScale_Params;
	memset(&GetViewportScale_Params, 0, sizeof(GetViewportScale_Params));

	uFnGetViewportScale->iNative = 0;
	uFnGetViewportScale->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetViewportScale, &GetViewportScale_Params, nullptr);
	uFnGetViewportScale->FunctionFlags |= 0x400;
	uFnGetViewportScale->iNative = 20816;

	return GetViewportScale_Params.ReturnValue;
};

// Function Engine.UIScreenObject.GetViewportOffset
// [0x00420401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20814])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FVector2D               out_ViewportOffset             (CPF_Parm | CPF_OutParm)

bool UUIScreenObject::GetViewportOffset(struct FVector2D& out_ViewportOffset)
{
	static UFunction* uFnGetViewportOffset = nullptr;

	if (!uFnGetViewportOffset)
	{
		uFnGetViewportOffset = UFunction::FindFunction("Function Engine.UIScreenObject.GetViewportOffset");
	}

	UUIScreenObject_execGetViewportOffset_Params GetViewportOffset_Params;
	memset(&GetViewportOffset_Params, 0, sizeof(GetViewportOffset_Params));
	memcpy_s(&GetViewportOffset_Params.out_ViewportOffset, sizeof(GetViewportOffset_Params.out_ViewportOffset), &out_ViewportOffset, sizeof(out_ViewportOffset));

	uFnGetViewportOffset->iNative = 0;
	uFnGetViewportOffset->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetViewportOffset, &GetViewportOffset_Params, nullptr);
	uFnGetViewportOffset->FunctionFlags |= 0x400;
	uFnGetViewportOffset->iNative = 20814;

	memcpy_s(&out_ViewportOffset, sizeof(out_ViewportOffset), &GetViewportOffset_Params.out_ViewportOffset, sizeof(GetViewportOffset_Params.out_ViewportOffset));

	return GetViewportOffset_Params.ReturnValue;
};

// Function Engine.UIScreenObject.RebuildNavigationLinks
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[24976])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UUIScreenObject::RebuildNavigationLinks()
{
	static UFunction* uFnRebuildNavigationLinks = nullptr;

	if (!uFnRebuildNavigationLinks)
	{
		uFnRebuildNavigationLinks = UFunction::FindFunction("Function Engine.UIScreenObject.RebuildNavigationLinks");
	}

	UUIScreenObject_execRebuildNavigationLinks_Params RebuildNavigationLinks_Params;
	memset(&RebuildNavigationLinks_Params, 0, sizeof(RebuildNavigationLinks_Params));

	uFnRebuildNavigationLinks->iNative = 0;
	uFnRebuildNavigationLinks->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnRebuildNavigationLinks, &RebuildNavigationLinks_Params, nullptr);
	uFnRebuildNavigationLinks->FunctionFlags |= 0x400;
	uFnRebuildNavigationLinks->iNative = 24976;

	return RebuildNavigationLinks_Params.ReturnValue;
};

// Function Engine.UIScreenObject.RequestPrimitiveReview
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25128])
// Parameter Info:
// uint32_t                       bReinitializePrimitives        (CPF_Parm)
// uint32_t                       bReviewPrimitiveUsage          (CPF_Parm)

void UUIScreenObject::RequestPrimitiveReview(bool bReinitializePrimitives, bool bReviewPrimitiveUsage)
{
	static UFunction* uFnRequestPrimitiveReview = nullptr;

	if (!uFnRequestPrimitiveReview)
	{
		uFnRequestPrimitiveReview = UFunction::FindFunction("Function Engine.UIScreenObject.RequestPrimitiveReview");
	}

	UUIScreenObject_execRequestPrimitiveReview_Params RequestPrimitiveReview_Params;
	memset(&RequestPrimitiveReview_Params, 0, sizeof(RequestPrimitiveReview_Params));
	RequestPrimitiveReview_Params.bReinitializePrimitives = bReinitializePrimitives;
	RequestPrimitiveReview_Params.bReviewPrimitiveUsage = bReviewPrimitiveUsage;

	uFnRequestPrimitiveReview->iNative = 0;
	uFnRequestPrimitiveReview->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnRequestPrimitiveReview, &RequestPrimitiveReview_Params, nullptr);
	uFnRequestPrimitiveReview->FunctionFlags |= 0x400;
	uFnRequestPrimitiveReview->iNative = 25128;
};

// Function Engine.UIScreenObject.RequestSceneInputMaskUpdate
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25129])
// Parameter Info:

void UUIScreenObject::RequestSceneInputMaskUpdate()
{
	static UFunction* uFnRequestSceneInputMaskUpdate = nullptr;

	if (!uFnRequestSceneInputMaskUpdate)
	{
		uFnRequestSceneInputMaskUpdate = UFunction::FindFunction("Function Engine.UIScreenObject.RequestSceneInputMaskUpdate");
	}

	UUIScreenObject_execRequestSceneInputMaskUpdate_Params RequestSceneInputMaskUpdate_Params;
	memset(&RequestSceneInputMaskUpdate_Params, 0, sizeof(RequestSceneInputMaskUpdate_Params));

	uFnRequestSceneInputMaskUpdate->iNative = 0;
	uFnRequestSceneInputMaskUpdate->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnRequestSceneInputMaskUpdate, &RequestSceneInputMaskUpdate_Params, nullptr);
	uFnRequestSceneInputMaskUpdate->FunctionFlags |= 0x400;
	uFnRequestSceneInputMaskUpdate->iNative = 25129;
};

// Function Engine.UIScreenObject.RequestFormattingUpdate
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25126])
// Parameter Info:

void UUIScreenObject::RequestFormattingUpdate()
{
	static UFunction* uFnRequestFormattingUpdate = nullptr;

	if (!uFnRequestFormattingUpdate)
	{
		uFnRequestFormattingUpdate = UFunction::FindFunction("Function Engine.UIScreenObject.RequestFormattingUpdate");
	}

	UUIScreenObject_execRequestFormattingUpdate_Params RequestFormattingUpdate_Params;
	memset(&RequestFormattingUpdate_Params, 0, sizeof(RequestFormattingUpdate_Params));

	uFnRequestFormattingUpdate->iNative = 0;
	uFnRequestFormattingUpdate->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnRequestFormattingUpdate, &RequestFormattingUpdate_Params, nullptr);
	uFnRequestFormattingUpdate->FunctionFlags |= 0x400;
	uFnRequestFormattingUpdate->iNative = 25126;
};

// Function Engine.UIScreenObject.RequestSceneUpdate
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[25130])
// Parameter Info:
// uint32_t                       bDockingStackChanged           (CPF_Parm)
// uint32_t                       bPositionsChanged              (CPF_Parm)
// uint32_t                       bNavLinksOutdated              (CPF_OptionalParm | CPF_Parm)
// uint32_t                       bWidgetStylesChanged           (CPF_OptionalParm | CPF_Parm)

void UUIScreenObject::RequestSceneUpdate(bool bDockingStackChanged, bool bPositionsChanged, bool bNavLinksOutdated, bool bWidgetStylesChanged)
{
	static UFunction* uFnRequestSceneUpdate = nullptr;

	if (!uFnRequestSceneUpdate)
	{
		uFnRequestSceneUpdate = UFunction::FindFunction("Function Engine.UIScreenObject.RequestSceneUpdate");
	}

	UUIScreenObject_execRequestSceneUpdate_Params RequestSceneUpdate_Params;
	memset(&RequestSceneUpdate_Params, 0, sizeof(RequestSceneUpdate_Params));
	RequestSceneUpdate_Params.bDockingStackChanged = bDockingStackChanged;
	RequestSceneUpdate_Params.bPositionsChanged = bPositionsChanged;
	RequestSceneUpdate_Params.bNavLinksOutdated = bNavLinksOutdated;
	RequestSceneUpdate_Params.bWidgetStylesChanged = bWidgetStylesChanged;

	uFnRequestSceneUpdate->iNative = 0;
	uFnRequestSceneUpdate->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnRequestSceneUpdate, &RequestSceneUpdate_Params, nullptr);
	uFnRequestSceneUpdate->FunctionFlags |= 0x400;
	uFnRequestSceneUpdate->iNative = 25130;
};

// Function Engine.UIScreenObject.FindChildIndex
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20088])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    WidgetName                     (CPF_Parm)

int32_t UUIScreenObject::FindChildIndex(const class FName& WidgetName)
{
	static UFunction* uFnFindChildIndex = nullptr;

	if (!uFnFindChildIndex)
	{
		uFnFindChildIndex = UFunction::FindFunction("Function Engine.UIScreenObject.FindChildIndex");
	}

	UUIScreenObject_execFindChildIndex_Params FindChildIndex_Params;
	memset(&FindChildIndex_Params, 0, sizeof(FindChildIndex_Params));
	memcpy_s(&FindChildIndex_Params.WidgetName, sizeof(FindChildIndex_Params.WidgetName), &WidgetName, sizeof(WidgetName));

	uFnFindChildIndex->iNative = 0;
	uFnFindChildIndex->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnFindChildIndex, &FindChildIndex_Params, nullptr);
	uFnFindChildIndex->FunctionFlags |= 0x400;
	uFnFindChildIndex->iNative = 20088;

	return FindChildIndex_Params.ReturnValue;
};

// Function Engine.UIScreenObject.GetPlayerOwner
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[20684])
// Parameter Info:
// class ULocalPlayer*            ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        PlayerIndex                    (CPF_OptionalParm | CPF_Parm)

class ULocalPlayer* UUIScreenObject::GetPlayerOwner(int32_t PlayerIndex)
{
	static UFunction* uFnGetPlayerOwner = nullptr;

	if (!uFnGetPlayerOwner)
	{
		uFnGetPlayerOwner = UFunction::FindFunction("Function Engine.UIScreenObject.GetPlayerOwner");
	}

	UUIScreenObject_execGetPlayerOwner_Params GetPlayerOwner_Params;
	memset(&GetPlayerOwner_Params, 0, sizeof(GetPlayerOwner_Params));
	memcpy_s(&GetPlayerOwner_Params.PlayerIndex, sizeof(GetPlayerOwner_Params.PlayerIndex), &PlayerIndex, sizeof(PlayerIndex));

	uFnGetPlayerOwner->iNative = 0;
	uFnGetPlayerOwner->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetPlayerOwner, &GetPlayerOwner_Params, nullptr);
	uFnGetPlayerOwner->FunctionFlags |= 0x400;
	uFnGetPlayerOwner->iNative = 20684;

	return GetPlayerOwner_Params.ReturnValue;
};

// Function Engine.UIScreenObject.InitializePlayerTracking
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[21151])
// Parameter Info:

void UUIScreenObject::InitializePlayerTracking()
{
	static UFunction* uFnInitializePlayerTracking = nullptr;

	if (!uFnInitializePlayerTracking)
	{
		uFnInitializePlayerTracking = UFunction::FindFunction("Function Engine.UIScreenObject.InitializePlayerTracking");
	}

	UUIScreenObject_execInitializePlayerTracking_Params InitializePlayerTracking_Params;
	memset(&InitializePlayerTracking_Params, 0, sizeof(InitializePlayerTracking_Params));

	uFnInitializePlayerTracking->iNative = 0;
	uFnInitializePlayerTracking->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnInitializePlayerTracking, &InitializePlayerTracking_Params, nullptr);
	uFnInitializePlayerTracking->FunctionFlags |= 0x400;
	uFnInitializePlayerTracking->iNative = 21151;
};

// Function Engine.UIScreenObject.RemovePlayerData
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25077])
// Parameter Info:
// int32_t                        PlayerIndex                    (CPF_Parm)
// class ULocalPlayer*            RemovedPlayer                  (CPF_Parm)

void UUIScreenObject::RemovePlayerData(int32_t PlayerIndex, class ULocalPlayer* RemovedPlayer)
{
	static UFunction* uFnRemovePlayerData = nullptr;

	if (!uFnRemovePlayerData)
	{
		uFnRemovePlayerData = UFunction::FindFunction("Function Engine.UIScreenObject.RemovePlayerData");
	}

	UUIScreenObject_execRemovePlayerData_Params RemovePlayerData_Params;
	memset(&RemovePlayerData_Params, 0, sizeof(RemovePlayerData_Params));
	memcpy_s(&RemovePlayerData_Params.PlayerIndex, sizeof(RemovePlayerData_Params.PlayerIndex), &PlayerIndex, sizeof(PlayerIndex));
	RemovePlayerData_Params.RemovedPlayer = RemovedPlayer;

	uFnRemovePlayerData->iNative = 0;
	uFnRemovePlayerData->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnRemovePlayerData, &RemovePlayerData_Params, nullptr);
	uFnRemovePlayerData->FunctionFlags |= 0x400;
	uFnRemovePlayerData->iNative = 25077;
};

// Function Engine.UIScreenObject.CreatePlayerData
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[18449])
// Parameter Info:
// int32_t                        PlayerIndex                    (CPF_Parm)
// class ULocalPlayer*            AddedPlayer                    (CPF_Parm)

void UUIScreenObject::CreatePlayerData(int32_t PlayerIndex, class ULocalPlayer* AddedPlayer)
{
	static UFunction* uFnCreatePlayerData = nullptr;

	if (!uFnCreatePlayerData)
	{
		uFnCreatePlayerData = UFunction::FindFunction("Function Engine.UIScreenObject.CreatePlayerData");
	}

	UUIScreenObject_execCreatePlayerData_Params CreatePlayerData_Params;
	memset(&CreatePlayerData_Params, 0, sizeof(CreatePlayerData_Params));
	memcpy_s(&CreatePlayerData_Params.PlayerIndex, sizeof(CreatePlayerData_Params.PlayerIndex), &PlayerIndex, sizeof(PlayerIndex));
	CreatePlayerData_Params.AddedPlayer = AddedPlayer;

	uFnCreatePlayerData->iNative = 0;
	uFnCreatePlayerData->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnCreatePlayerData, &CreatePlayerData_Params, nullptr);
	uFnCreatePlayerData->FunctionFlags |= 0x400;
	uFnCreatePlayerData->iNative = 18449;
};

// Function Engine.UIScreenObject.SetZDepth
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[25841])
// Parameter Info:
// float                          NewZDepth                      (CPF_Parm)
// uint32_t                       bPropagateToChildren           (CPF_OptionalParm | CPF_Parm)

void UUIScreenObject::SetZDepth(float NewZDepth, bool bPropagateToChildren)
{
	static UFunction* uFnSetZDepth = nullptr;

	if (!uFnSetZDepth)
	{
		uFnSetZDepth = UFunction::FindFunction("Function Engine.UIScreenObject.SetZDepth");
	}

	UUIScreenObject_execSetZDepth_Params SetZDepth_Params;
	memset(&SetZDepth_Params, 0, sizeof(SetZDepth_Params));
	memcpy_s(&SetZDepth_Params.NewZDepth, sizeof(SetZDepth_Params.NewZDepth), &NewZDepth, sizeof(NewZDepth));
	SetZDepth_Params.bPropagateToChildren = bPropagateToChildren;

	uFnSetZDepth->iNative = 0;
	uFnSetZDepth->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetZDepth, &SetZDepth_Params, nullptr);
	uFnSetZDepth->FunctionFlags |= 0x400;
	uFnSetZDepth->iNative = 25841;
};

// Function Engine.UIScreenObject.GetZDepth
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20825])
// Parameter Info:
// float                          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

float UUIScreenObject::GetZDepth()
{
	static UFunction* uFnGetZDepth = nullptr;

	if (!uFnGetZDepth)
	{
		uFnGetZDepth = UFunction::FindFunction("Function Engine.UIScreenObject.GetZDepth");
	}

	UUIScreenObject_execGetZDepth_Params GetZDepth_Params;
	memset(&GetZDepth_Params, 0, sizeof(GetZDepth_Params));

	uFnGetZDepth->iNative = 0;
	uFnGetZDepth->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetZDepth, &GetZDepth_Params, nullptr);
	uFnGetZDepth->FunctionFlags |= 0x400;
	uFnGetZDepth->iNative = 20825;

	return GetZDepth_Params.ReturnValue;
};

// Function Engine.UIScreenObject.IsHidden
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[21386])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       bIncludeParents                (CPF_OptionalParm | CPF_Parm)

bool UUIScreenObject::IsHidden(bool bIncludeParents)
{
	static UFunction* uFnIsHidden = nullptr;

	if (!uFnIsHidden)
	{
		uFnIsHidden = UFunction::FindFunction("Function Engine.UIScreenObject.IsHidden");
	}

	UUIScreenObject_execIsHidden_Params IsHidden_Params;
	memset(&IsHidden_Params, 0, sizeof(IsHidden_Params));
	IsHidden_Params.bIncludeParents = bIncludeParents;

	uFnIsHidden->iNative = 0;
	uFnIsHidden->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnIsHidden, &IsHidden_Params, nullptr);
	uFnIsHidden->FunctionFlags |= 0x400;
	uFnIsHidden->iNative = 21386;

	return IsHidden_Params.ReturnValue;
};

// Function Engine.UIScreenObject.IsVisible
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[21433])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       bIncludeParents                (CPF_OptionalParm | CPF_Parm)

bool UUIScreenObject::IsVisible(bool bIncludeParents)
{
	static UFunction* uFnIsVisible = nullptr;

	if (!uFnIsVisible)
	{
		uFnIsVisible = UFunction::FindFunction("Function Engine.UIScreenObject.IsVisible");
	}

	UUIScreenObject_execIsVisible_Params IsVisible_Params;
	memset(&IsVisible_Params, 0, sizeof(IsVisible_Params));
	IsVisible_Params.bIncludeParents = bIncludeParents;

	uFnIsVisible->iNative = 0;
	uFnIsVisible->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnIsVisible, &IsVisible_Params, nullptr);
	uFnIsVisible->FunctionFlags |= 0x400;
	uFnIsVisible->iNative = 21433;

	return IsVisible_Params.ReturnValue;
};

// Function Engine.UIScreenObject.IsInitialized
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[21392])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UUIScreenObject::IsInitialized()
{
	static UFunction* uFnIsInitialized = nullptr;

	if (!uFnIsInitialized)
	{
		uFnIsInitialized = UFunction::FindFunction("Function Engine.UIScreenObject.IsInitialized");
	}

	UUIScreenObject_execIsInitialized_Params IsInitialized_Params;
	memset(&IsInitialized_Params, 0, sizeof(IsInitialized_Params));

	uFnIsInitialized->iNative = 0;
	uFnIsInitialized->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnIsInitialized, &IsInitialized_Params, nullptr);
	uFnIsInitialized->FunctionFlags |= 0x400;
	uFnIsInitialized->iNative = 21392;

	return IsInitialized_Params.ReturnValue;
};

// Function Engine.UIScreenObject.OnInitialSceneUpdate
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:

void UUIScreenObject::OnInitialSceneUpdate()
{
	static UFunction* uFnOnInitialSceneUpdate = nullptr;

	if (!uFnOnInitialSceneUpdate)
	{
		uFnOnInitialSceneUpdate = UFunction::FindFunction("Function Engine.UIScreenObject.OnInitialSceneUpdate");
	}

	UUIScreenObject_execOnInitialSceneUpdate_Params OnInitialSceneUpdate_Params;
	memset(&OnInitialSceneUpdate_Params, 0, sizeof(OnInitialSceneUpdate_Params));

	this->ProcessEvent(uFnOnInitialSceneUpdate, &OnInitialSceneUpdate_Params, nullptr);
};

// Function Engine.UIScreenObject.NotifyVisibilityChanged
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// class UUIScreenObject*         SourceWidget                   (CPF_Parm)
// uint32_t                       bIsVisible                     (CPF_Parm)

void UUIScreenObject::NotifyVisibilityChanged(class UUIScreenObject* SourceWidget, bool bIsVisible)
{
	static UFunction* uFnNotifyVisibilityChanged = nullptr;

	if (!uFnNotifyVisibilityChanged)
	{
		uFnNotifyVisibilityChanged = UFunction::FindFunction("Function Engine.UIScreenObject.NotifyVisibilityChanged");
	}

	UUIScreenObject_execNotifyVisibilityChanged_Params NotifyVisibilityChanged_Params;
	memset(&NotifyVisibilityChanged_Params, 0, sizeof(NotifyVisibilityChanged_Params));
	NotifyVisibilityChanged_Params.SourceWidget = SourceWidget;
	NotifyVisibilityChanged_Params.bIsVisible = bIsVisible;

	this->ProcessEvent(uFnNotifyVisibilityChanged, &NotifyVisibilityChanged_Params, nullptr);
};

// Function Engine.UIScreenObject.NotifyActiveStateChanged
// [0x00124000] (FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// class UUIScreenObject*         Sender                         (CPF_Parm)
// int32_t                        PlayerIndex                    (CPF_Parm)
// class UUIState*                NewlyActiveState               (CPF_Parm)
// class UUIState*                PreviouslyActiveState          (CPF_OptionalParm | CPF_Parm)

void UUIScreenObject::NotifyActiveStateChanged(class UUIScreenObject* Sender, int32_t PlayerIndex, class UUIState* NewlyActiveState, class UUIState* PreviouslyActiveState)
{
	static UFunction* uFnNotifyActiveStateChanged = nullptr;

	if (!uFnNotifyActiveStateChanged)
	{
		uFnNotifyActiveStateChanged = UFunction::FindFunction("Function Engine.UIScreenObject.NotifyActiveStateChanged");
	}

	UUIScreenObject_execNotifyActiveStateChanged_Params NotifyActiveStateChanged_Params;
	memset(&NotifyActiveStateChanged_Params, 0, sizeof(NotifyActiveStateChanged_Params));
	NotifyActiveStateChanged_Params.Sender = Sender;
	memcpy_s(&NotifyActiveStateChanged_Params.PlayerIndex, sizeof(NotifyActiveStateChanged_Params.PlayerIndex), &PlayerIndex, sizeof(PlayerIndex));
	NotifyActiveStateChanged_Params.NewlyActiveState = NewlyActiveState;
	NotifyActiveStateChanged_Params.PreviouslyActiveState = PreviouslyActiveState;

	this->ProcessEvent(uFnNotifyActiveStateChanged, &NotifyActiveStateChanged_Params, nullptr);
};

// Function Engine.UIScreenObject.NotifyResolutionChanged
// [0x00520000] (FUNC_Public | FUNC_Delegate | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// struct FVector2D               OldViewportsize                (CPF_Const | CPF_Parm | CPF_OutParm)
// struct FVector2D               NewViewportSize                (CPF_Const | CPF_Parm | CPF_OutParm)

void UUIScreenObject::NotifyResolutionChanged(struct FVector2D& OldViewportsize, struct FVector2D& NewViewportSize)
{
	static UFunction* uFnNotifyResolutionChanged = nullptr;

	if (!uFnNotifyResolutionChanged)
	{
		uFnNotifyResolutionChanged = UFunction::FindFunction("Function Engine.UIScreenObject.NotifyResolutionChanged");
	}

	UUIScreenObject_execNotifyResolutionChanged_Params NotifyResolutionChanged_Params;
	memset(&NotifyResolutionChanged_Params, 0, sizeof(NotifyResolutionChanged_Params));
	memcpy_s(&NotifyResolutionChanged_Params.OldViewportsize, sizeof(NotifyResolutionChanged_Params.OldViewportsize), &OldViewportsize, sizeof(OldViewportsize));
	memcpy_s(&NotifyResolutionChanged_Params.NewViewportSize, sizeof(NotifyResolutionChanged_Params.NewViewportSize), &NewViewportSize, sizeof(NewViewportSize));

	this->ProcessEvent(uFnNotifyResolutionChanged, &NotifyResolutionChanged_Params, nullptr);

	memcpy_s(&OldViewportsize, sizeof(OldViewportsize), &NotifyResolutionChanged_Params.OldViewportsize, sizeof(NotifyResolutionChanged_Params.OldViewportsize));
	memcpy_s(&NewViewportSize, sizeof(NewViewportSize), &NotifyResolutionChanged_Params.NewViewportSize, sizeof(NotifyResolutionChanged_Params.NewViewportSize));
};

// Function Engine.UIScreenObject.NotifyPositionChanged
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// class UUIScreenObject*         Sender                         (CPF_Parm)

void UUIScreenObject::NotifyPositionChanged(class UUIScreenObject* Sender)
{
	static UFunction* uFnNotifyPositionChanged = nullptr;

	if (!uFnNotifyPositionChanged)
	{
		uFnNotifyPositionChanged = UFunction::FindFunction("Function Engine.UIScreenObject.NotifyPositionChanged");
	}

	UUIScreenObject_execNotifyPositionChanged_Params NotifyPositionChanged_Params;
	memset(&NotifyPositionChanged_Params, 0, sizeof(NotifyPositionChanged_Params));
	NotifyPositionChanged_Params.Sender = Sender;

	this->ProcessEvent(uFnNotifyPositionChanged, &NotifyPositionChanged_Params, nullptr);
};

// Function Engine.UIScreenObject.OnProcessInputAxis
// [0x00520000] (FUNC_Public | FUNC_Delegate | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FSubscribedInputEventParameters EventParms                     (CPF_Const | CPF_Parm | CPF_OutParm)

bool UUIScreenObject::OnProcessInputAxis(struct FSubscribedInputEventParameters& EventParms)
{
	static UFunction* uFnOnProcessInputAxis = nullptr;

	if (!uFnOnProcessInputAxis)
	{
		uFnOnProcessInputAxis = UFunction::FindFunction("Function Engine.UIScreenObject.OnProcessInputAxis");
	}

	UUIScreenObject_execOnProcessInputAxis_Params OnProcessInputAxis_Params;
	memset(&OnProcessInputAxis_Params, 0, sizeof(OnProcessInputAxis_Params));
	memcpy_s(&OnProcessInputAxis_Params.EventParms, sizeof(OnProcessInputAxis_Params.EventParms), &EventParms, sizeof(EventParms));

	this->ProcessEvent(uFnOnProcessInputAxis, &OnProcessInputAxis_Params, nullptr);

	memcpy_s(&EventParms, sizeof(EventParms), &OnProcessInputAxis_Params.EventParms, sizeof(OnProcessInputAxis_Params.EventParms));

	return OnProcessInputAxis_Params.ReturnValue;
};

// Function Engine.UIScreenObject.OnProcessInputKey
// [0x00520000] (FUNC_Public | FUNC_Delegate | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FSubscribedInputEventParameters EventParms                     (CPF_Const | CPF_Parm | CPF_OutParm)

bool UUIScreenObject::OnProcessInputKey(struct FSubscribedInputEventParameters& EventParms)
{
	static UFunction* uFnOnProcessInputKey = nullptr;

	if (!uFnOnProcessInputKey)
	{
		uFnOnProcessInputKey = UFunction::FindFunction("Function Engine.UIScreenObject.OnProcessInputKey");
	}

	UUIScreenObject_execOnProcessInputKey_Params OnProcessInputKey_Params;
	memset(&OnProcessInputKey_Params, 0, sizeof(OnProcessInputKey_Params));
	memcpy_s(&OnProcessInputKey_Params.EventParms, sizeof(OnProcessInputKey_Params.EventParms), &EventParms, sizeof(EventParms));

	this->ProcessEvent(uFnOnProcessInputKey, &OnProcessInputKey_Params, nullptr);

	memcpy_s(&EventParms, sizeof(EventParms), &OnProcessInputKey_Params.EventParms, sizeof(OnProcessInputKey_Params.EventParms));

	return OnProcessInputKey_Params.ReturnValue;
};

// Function Engine.UIScreenObject.OnRawInputAxis
// [0x00520000] (FUNC_Public | FUNC_Delegate | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FInputEventParameters   EventParms                     (CPF_Const | CPF_Parm | CPF_OutParm)

bool UUIScreenObject::OnRawInputAxis(struct FInputEventParameters& EventParms)
{
	static UFunction* uFnOnRawInputAxis = nullptr;

	if (!uFnOnRawInputAxis)
	{
		uFnOnRawInputAxis = UFunction::FindFunction("Function Engine.UIScreenObject.OnRawInputAxis");
	}

	UUIScreenObject_execOnRawInputAxis_Params OnRawInputAxis_Params;
	memset(&OnRawInputAxis_Params, 0, sizeof(OnRawInputAxis_Params));
	memcpy_s(&OnRawInputAxis_Params.EventParms, sizeof(OnRawInputAxis_Params.EventParms), &EventParms, sizeof(EventParms));

	this->ProcessEvent(uFnOnRawInputAxis, &OnRawInputAxis_Params, nullptr);

	memcpy_s(&EventParms, sizeof(EventParms), &OnRawInputAxis_Params.EventParms, sizeof(OnRawInputAxis_Params.EventParms));

	return OnRawInputAxis_Params.ReturnValue;
};

// Function Engine.UIScreenObject.OnRawInputKey
// [0x00520000] (FUNC_Public | FUNC_Delegate | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FInputEventParameters   EventParms                     (CPF_Const | CPF_Parm | CPF_OutParm)

bool UUIScreenObject::OnRawInputKey(struct FInputEventParameters& EventParms)
{
	static UFunction* uFnOnRawInputKey = nullptr;

	if (!uFnOnRawInputKey)
	{
		uFnOnRawInputKey = UFunction::FindFunction("Function Engine.UIScreenObject.OnRawInputKey");
	}

	UUIScreenObject_execOnRawInputKey_Params OnRawInputKey_Params;
	memset(&OnRawInputKey_Params, 0, sizeof(OnRawInputKey_Params));
	memcpy_s(&OnRawInputKey_Params.EventParms, sizeof(OnRawInputKey_Params.EventParms), &EventParms, sizeof(EventParms));

	this->ProcessEvent(uFnOnRawInputKey, &OnRawInputKey_Params, nullptr);

	memcpy_s(&EventParms, sizeof(EventParms), &OnRawInputKey_Params.EventParms, sizeof(OnRawInputKey_Params.EventParms));

	return OnRawInputKey_Params.ReturnValue;
};

// Function Engine.UIScreenObject.NotifyActiveSkinChanged
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:

void UUIScreenObject::NotifyActiveSkinChanged()
{
	static UFunction* uFnNotifyActiveSkinChanged = nullptr;

	if (!uFnNotifyActiveSkinChanged)
	{
		uFnNotifyActiveSkinChanged = UFunction::FindFunction("Function Engine.UIScreenObject.NotifyActiveSkinChanged");
	}

	UUIScreenObject_execNotifyActiveSkinChanged_Params NotifyActiveSkinChanged_Params;
	memset(&NotifyActiveSkinChanged_Params, 0, sizeof(NotifyActiveSkinChanged_Params));

	this->ProcessEvent(uFnNotifyActiveSkinChanged, &NotifyActiveSkinChanged_Params, nullptr);
};

// Function Engine.UIState_Focused.ActivateState
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UUIScreenObject*         Target                         (CPF_Parm)
// int32_t                        PlayerIndex                    (CPF_Parm)

bool UUIState_Focused::eventActivateState(class UUIScreenObject* Target, int32_t PlayerIndex)
{
	static UFunction* uFnActivateState = nullptr;

	if (!uFnActivateState)
	{
		uFnActivateState = UFunction::FindFunction("Function Engine.UIState_Focused.ActivateState");
	}

	UUIState_Focused_eventActivateState_Params ActivateState_Params;
	memset(&ActivateState_Params, 0, sizeof(ActivateState_Params));
	ActivateState_Params.Target = Target;
	memcpy_s(&ActivateState_Params.PlayerIndex, sizeof(ActivateState_Params.PlayerIndex), &PlayerIndex, sizeof(PlayerIndex));

	this->ProcessEvent(uFnActivateState, &ActivateState_Params, nullptr);

	return ActivateState_Params.ReturnValue;
};

// Function Engine.SpeedTreeComponent.SetMaterial
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25709])
// Parameter Info:
// ESpeedTreeMeshType             MeshType                       (CPF_Parm)
// class UMaterialInterface*      Material                       (CPF_Parm)

void USpeedTreeComponent::SetMaterial(ESpeedTreeMeshType MeshType, class UMaterialInterface* Material)
{
	static UFunction* uFnSetMaterial = nullptr;

	if (!uFnSetMaterial)
	{
		uFnSetMaterial = UFunction::FindFunction("Function Engine.SpeedTreeComponent.SetMaterial");
	}

	USpeedTreeComponent_execSetMaterial_Params SetMaterial_Params;
	memset(&SetMaterial_Params, 0, sizeof(SetMaterial_Params));
	memcpy_s(&SetMaterial_Params.MeshType, sizeof(SetMaterial_Params.MeshType), &MeshType, sizeof(MeshType));
	SetMaterial_Params.Material = Material;

	uFnSetMaterial->iNative = 0;
	uFnSetMaterial->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetMaterial, &SetMaterial_Params, nullptr);
	uFnSetMaterial->FunctionFlags |= 0x400;
	uFnSetMaterial->iNative = 25709;
};

// Function Engine.SpeedTreeComponent.GetMaterial
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20637])
// Parameter Info:
// class UMaterialInterface*      ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// ESpeedTreeMeshType             MeshType                       (CPF_Parm)

class UMaterialInterface* USpeedTreeComponent::GetMaterial(ESpeedTreeMeshType MeshType)
{
	static UFunction* uFnGetMaterial = nullptr;

	if (!uFnGetMaterial)
	{
		uFnGetMaterial = UFunction::FindFunction("Function Engine.SpeedTreeComponent.GetMaterial");
	}

	USpeedTreeComponent_execGetMaterial_Params GetMaterial_Params;
	memset(&GetMaterial_Params, 0, sizeof(GetMaterial_Params));
	memcpy_s(&GetMaterial_Params.MeshType, sizeof(GetMaterial_Params.MeshType), &MeshType, sizeof(MeshType));

	uFnGetMaterial->iNative = 0;
	uFnGetMaterial->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetMaterial, &GetMaterial_Params, nullptr);
	uFnGetMaterial->FunctionFlags |= 0x400;
	uFnGetMaterial->iNative = 20637;

	return GetMaterial_Params.ReturnValue;
};

// Function Engine.LensFlareSource.SetActorParameter
// [0x00020100] (FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FName                    ParameterName                  (CPF_Parm)
// class AActor*                  Param                          (CPF_Parm)

void ALensFlareSource::SetActorParameter(const class FName& ParameterName, class AActor* Param)
{
	static UFunction* uFnSetActorParameter = nullptr;

	if (!uFnSetActorParameter)
	{
		uFnSetActorParameter = UFunction::FindFunction("Function Engine.LensFlareSource.SetActorParameter");
	}

	ALensFlareSource_execSetActorParameter_Params SetActorParameter_Params;
	memset(&SetActorParameter_Params, 0, sizeof(SetActorParameter_Params));
	memcpy_s(&SetActorParameter_Params.ParameterName, sizeof(SetActorParameter_Params.ParameterName), &ParameterName, sizeof(ParameterName));
	SetActorParameter_Params.Param = Param;

	this->ProcessEvent(uFnSetActorParameter, &SetActorParameter_Params, nullptr);
};

// Function Engine.LensFlareSource.SetExtColorParameter
// [0x00020100] (FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FName                    ParameterName                  (CPF_Parm)
// float                          Red                            (CPF_Parm)
// float                          Green                          (CPF_Parm)
// float                          Blue                           (CPF_Parm)
// float                          Alpha                          (CPF_Parm)

void ALensFlareSource::SetExtColorParameter(const class FName& ParameterName, float Red, float Green, float Blue, float Alpha)
{
	static UFunction* uFnSetExtColorParameter = nullptr;

	if (!uFnSetExtColorParameter)
	{
		uFnSetExtColorParameter = UFunction::FindFunction("Function Engine.LensFlareSource.SetExtColorParameter");
	}

	ALensFlareSource_execSetExtColorParameter_Params SetExtColorParameter_Params;
	memset(&SetExtColorParameter_Params, 0, sizeof(SetExtColorParameter_Params));
	memcpy_s(&SetExtColorParameter_Params.ParameterName, sizeof(SetExtColorParameter_Params.ParameterName), &ParameterName, sizeof(ParameterName));
	memcpy_s(&SetExtColorParameter_Params.Red, sizeof(SetExtColorParameter_Params.Red), &Red, sizeof(Red));
	memcpy_s(&SetExtColorParameter_Params.Green, sizeof(SetExtColorParameter_Params.Green), &Green, sizeof(Green));
	memcpy_s(&SetExtColorParameter_Params.Blue, sizeof(SetExtColorParameter_Params.Blue), &Blue, sizeof(Blue));
	memcpy_s(&SetExtColorParameter_Params.Alpha, sizeof(SetExtColorParameter_Params.Alpha), &Alpha, sizeof(Alpha));

	this->ProcessEvent(uFnSetExtColorParameter, &SetExtColorParameter_Params, nullptr);
};

// Function Engine.LensFlareSource.SetColorParameter
// [0x00020100] (FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FName                    ParameterName                  (CPF_Parm)
// struct FLinearColor            Param                          (CPF_Parm)

void ALensFlareSource::SetColorParameter(const class FName& ParameterName, const struct FLinearColor& Param)
{
	static UFunction* uFnSetColorParameter = nullptr;

	if (!uFnSetColorParameter)
	{
		uFnSetColorParameter = UFunction::FindFunction("Function Engine.LensFlareSource.SetColorParameter");
	}

	ALensFlareSource_execSetColorParameter_Params SetColorParameter_Params;
	memset(&SetColorParameter_Params, 0, sizeof(SetColorParameter_Params));
	memcpy_s(&SetColorParameter_Params.ParameterName, sizeof(SetColorParameter_Params.ParameterName), &ParameterName, sizeof(ParameterName));
	memcpy_s(&SetColorParameter_Params.Param, sizeof(SetColorParameter_Params.Param), &Param, sizeof(Param));

	this->ProcessEvent(uFnSetColorParameter, &SetColorParameter_Params, nullptr);
};

// Function Engine.LensFlareSource.SetVectorParameter
// [0x00020100] (FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FName                    ParameterName                  (CPF_Parm)
// struct FVector                 Param                          (CPF_Parm)

void ALensFlareSource::SetVectorParameter(const class FName& ParameterName, const struct FVector& Param)
{
	static UFunction* uFnSetVectorParameter = nullptr;

	if (!uFnSetVectorParameter)
	{
		uFnSetVectorParameter = UFunction::FindFunction("Function Engine.LensFlareSource.SetVectorParameter");
	}

	ALensFlareSource_execSetVectorParameter_Params SetVectorParameter_Params;
	memset(&SetVectorParameter_Params, 0, sizeof(SetVectorParameter_Params));
	memcpy_s(&SetVectorParameter_Params.ParameterName, sizeof(SetVectorParameter_Params.ParameterName), &ParameterName, sizeof(ParameterName));
	memcpy_s(&SetVectorParameter_Params.Param, sizeof(SetVectorParameter_Params.Param), &Param, sizeof(Param));

	this->ProcessEvent(uFnSetVectorParameter, &SetVectorParameter_Params, nullptr);
};

// Function Engine.LensFlareSource.SetFloatParameter
// [0x00020100] (FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FName                    ParameterName                  (CPF_Parm)
// float                          Param                          (CPF_Parm)

void ALensFlareSource::SetFloatParameter(const class FName& ParameterName, float Param)
{
	static UFunction* uFnSetFloatParameter = nullptr;

	if (!uFnSetFloatParameter)
	{
		uFnSetFloatParameter = UFunction::FindFunction("Function Engine.LensFlareSource.SetFloatParameter");
	}

	ALensFlareSource_execSetFloatParameter_Params SetFloatParameter_Params;
	memset(&SetFloatParameter_Params, 0, sizeof(SetFloatParameter_Params));
	memcpy_s(&SetFloatParameter_Params.ParameterName, sizeof(SetFloatParameter_Params.ParameterName), &ParameterName, sizeof(ParameterName));
	memcpy_s(&SetFloatParameter_Params.Param, sizeof(SetFloatParameter_Params.Param), &Param, sizeof(Param));

	this->ProcessEvent(uFnSetFloatParameter, &SetFloatParameter_Params, nullptr);
};

// Function Engine.LensFlareSource.OnToggle
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_Toggle*          Action                         (CPF_Parm)

void ALensFlareSource::OnToggle(class USeqAct_Toggle* Action)
{
	static UFunction* uFnOnToggle = nullptr;

	if (!uFnOnToggle)
	{
		uFnOnToggle = UFunction::FindFunction("Function Engine.LensFlareSource.OnToggle");
	}

	ALensFlareSource_execOnToggle_Params OnToggle_Params;
	memset(&OnToggle_Params, 0, sizeof(OnToggle_Params));
	OnToggle_Params.Action = Action;

	this->ProcessEvent(uFnOnToggle, &OnToggle_Params, nullptr);
};

// Function Engine.LensFlareSource.SetTemplate
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13745])
// Parameter Info:
// class ULensFlare*              NewTemplate                    (CPF_Parm)

void ALensFlareSource::SetTemplate(class ULensFlare* NewTemplate)
{
	static UFunction* uFnSetTemplate = nullptr;

	if (!uFnSetTemplate)
	{
		uFnSetTemplate = UFunction::FindFunction("Function Engine.LensFlareSource.SetTemplate");
	}

	ALensFlareSource_execSetTemplate_Params SetTemplate_Params;
	memset(&SetTemplate_Params, 0, sizeof(SetTemplate_Params));
	SetTemplate_Params.NewTemplate = NewTemplate;

	uFnSetTemplate->iNative = 0;
	uFnSetTemplate->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetTemplate, &SetTemplate_Params, nullptr);
	uFnSetTemplate->FunctionFlags |= 0x400;
	uFnSetTemplate->iNative = 13745;
};

// Function Engine.LensFlareComponent.SetIsActive
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25685])
// Parameter Info:
// uint32_t                       bInIsActive                    (CPF_Parm)

void ULensFlareComponent::SetIsActive(bool bInIsActive)
{
	static UFunction* uFnSetIsActive = nullptr;

	if (!uFnSetIsActive)
	{
		uFnSetIsActive = UFunction::FindFunction("Function Engine.LensFlareComponent.SetIsActive");
	}

	ULensFlareComponent_execSetIsActive_Params SetIsActive_Params;
	memset(&SetIsActive_Params, 0, sizeof(SetIsActive_Params));
	SetIsActive_Params.bInIsActive = bInIsActive;

	uFnSetIsActive->iNative = 0;
	uFnSetIsActive->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetIsActive, &SetIsActive_Params, nullptr);
	uFnSetIsActive->FunctionFlags |= 0x400;
	uFnSetIsActive->iNative = 25685;
};

// Function Engine.LensFlareComponent.SetSourceColor
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25797])
// Parameter Info:
// struct FLinearColor            InSourceColor                  (CPF_Parm)

void ULensFlareComponent::SetSourceColor(const struct FLinearColor& InSourceColor)
{
	static UFunction* uFnSetSourceColor = nullptr;

	if (!uFnSetSourceColor)
	{
		uFnSetSourceColor = UFunction::FindFunction("Function Engine.LensFlareComponent.SetSourceColor");
	}

	ULensFlareComponent_execSetSourceColor_Params SetSourceColor_Params;
	memset(&SetSourceColor_Params, 0, sizeof(SetSourceColor_Params));
	memcpy_s(&SetSourceColor_Params.InSourceColor, sizeof(SetSourceColor_Params.InSourceColor), &InSourceColor, sizeof(InSourceColor));

	uFnSetSourceColor->iNative = 0;
	uFnSetSourceColor->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetSourceColor, &SetSourceColor_Params, nullptr);
	uFnSetSourceColor->FunctionFlags |= 0x400;
	uFnSetSourceColor->iNative = 25797;
};

// Function Engine.LensFlareComponent.SetTemplate
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[13745])
// Parameter Info:
// class ULensFlare*              NewTemplate                    (CPF_Parm)
// uint32_t                       bForceSet                      (CPF_OptionalParm | CPF_Parm)

void ULensFlareComponent::SetTemplate(class ULensFlare* NewTemplate, bool bForceSet)
{
	static UFunction* uFnSetTemplate = nullptr;

	if (!uFnSetTemplate)
	{
		uFnSetTemplate = UFunction::FindFunction("Function Engine.LensFlareComponent.SetTemplate");
	}

	ULensFlareComponent_execSetTemplate_Params SetTemplate_Params;
	memset(&SetTemplate_Params, 0, sizeof(SetTemplate_Params));
	SetTemplate_Params.NewTemplate = NewTemplate;
	SetTemplate_Params.bForceSet = bForceSet;

	uFnSetTemplate->iNative = 0;
	uFnSetTemplate->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetTemplate, &SetTemplate_Params, nullptr);
	uFnSetTemplate->FunctionFlags |= 0x400;
	uFnSetTemplate->iNative = 13745;
};

// Function Engine.TextureFlipBook.SetCurrentFrame
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25625])
// Parameter Info:
// int32_t                        Row                            (CPF_Parm)
// int32_t                        Col                            (CPF_Parm)

void UTextureFlipBook::SetCurrentFrame(int32_t Row, int32_t Col)
{
	static UFunction* uFnSetCurrentFrame = nullptr;

	if (!uFnSetCurrentFrame)
	{
		uFnSetCurrentFrame = UFunction::FindFunction("Function Engine.TextureFlipBook.SetCurrentFrame");
	}

	UTextureFlipBook_execSetCurrentFrame_Params SetCurrentFrame_Params;
	memset(&SetCurrentFrame_Params, 0, sizeof(SetCurrentFrame_Params));
	memcpy_s(&SetCurrentFrame_Params.Row, sizeof(SetCurrentFrame_Params.Row), &Row, sizeof(Row));
	memcpy_s(&SetCurrentFrame_Params.Col, sizeof(SetCurrentFrame_Params.Col), &Col, sizeof(Col));

	uFnSetCurrentFrame->iNative = 0;
	uFnSetCurrentFrame->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetCurrentFrame, &SetCurrentFrame_Params, nullptr);
	uFnSetCurrentFrame->FunctionFlags |= 0x400;
	uFnSetCurrentFrame->iNative = 25625;
};

// Function Engine.TextureFlipBook.Stop
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[623])
// Parameter Info:

void UTextureFlipBook::Stop()
{
	static UFunction* uFnStop = nullptr;

	if (!uFnStop)
	{
		uFnStop = UFunction::FindFunction("Function Engine.TextureFlipBook.Stop");
	}

	UTextureFlipBook_execStop_Params Stop_Params;
	memset(&Stop_Params, 0, sizeof(Stop_Params));

	uFnStop->iNative = 0;
	uFnStop->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnStop, &Stop_Params, nullptr);
	uFnStop->FunctionFlags |= 0x400;
	uFnStop->iNative = 623;
};

// Function Engine.TextureFlipBook.Pause
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[5012])
// Parameter Info:

void UTextureFlipBook::Pause()
{
	static UFunction* uFnPause = nullptr;

	if (!uFnPause)
	{
		uFnPause = UFunction::FindFunction("Function Engine.TextureFlipBook.Pause");
	}

	UTextureFlipBook_execPause_Params Pause_Params;
	memset(&Pause_Params, 0, sizeof(Pause_Params));

	uFnPause->iNative = 0;
	uFnPause->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnPause, &Pause_Params, nullptr);
	uFnPause->FunctionFlags |= 0x400;
	uFnPause->iNative = 5012;
};

// Function Engine.TextureFlipBook.Play
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[765])
// Parameter Info:

void UTextureFlipBook::Play()
{
	static UFunction* uFnPlay = nullptr;

	if (!uFnPlay)
	{
		uFnPlay = UFunction::FindFunction("Function Engine.TextureFlipBook.Play");
	}

	UTextureFlipBook_execPlay_Params Play_Params;
	memset(&Play_Params, 0, sizeof(Play_Params));

	uFnPlay->iNative = 0;
	uFnPlay->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnPlay, &Play_Params, nullptr);
	uFnPlay->FunctionFlags |= 0x400;
	uFnPlay->iNative = 765;
};

// Function Engine.Texture2DComposite.ResetSourceRegions
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25158])
// Parameter Info:

void UTexture2DComposite::ResetSourceRegions()
{
	static UFunction* uFnResetSourceRegions = nullptr;

	if (!uFnResetSourceRegions)
	{
		uFnResetSourceRegions = UFunction::FindFunction("Function Engine.Texture2DComposite.ResetSourceRegions");
	}

	UTexture2DComposite_execResetSourceRegions_Params ResetSourceRegions_Params;
	memset(&ResetSourceRegions_Params, 0, sizeof(ResetSourceRegions_Params));

	uFnResetSourceRegions->iNative = 0;
	uFnResetSourceRegions->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnResetSourceRegions, &ResetSourceRegions_Params, nullptr);
	uFnResetSourceRegions->FunctionFlags |= 0x400;
	uFnResetSourceRegions->iNative = 25158;
};

// Function Engine.Texture2DComposite.UpdateCompositeTexture
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[26977])
// Parameter Info:
// int32_t                        NumMipsToGenerate              (CPF_Parm)

void UTexture2DComposite::UpdateCompositeTexture(int32_t NumMipsToGenerate)
{
	static UFunction* uFnUpdateCompositeTexture = nullptr;

	if (!uFnUpdateCompositeTexture)
	{
		uFnUpdateCompositeTexture = UFunction::FindFunction("Function Engine.Texture2DComposite.UpdateCompositeTexture");
	}

	UTexture2DComposite_execUpdateCompositeTexture_Params UpdateCompositeTexture_Params;
	memset(&UpdateCompositeTexture_Params, 0, sizeof(UpdateCompositeTexture_Params));
	memcpy_s(&UpdateCompositeTexture_Params.NumMipsToGenerate, sizeof(UpdateCompositeTexture_Params.NumMipsToGenerate), &NumMipsToGenerate, sizeof(NumMipsToGenerate));

	uFnUpdateCompositeTexture->iNative = 0;
	uFnUpdateCompositeTexture->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnUpdateCompositeTexture, &UpdateCompositeTexture_Params, nullptr);
	uFnUpdateCompositeTexture->FunctionFlags |= 0x400;
	uFnUpdateCompositeTexture->iNative = 26977;
};

// Function Engine.Texture2DComposite.SourceTexturesFullyStreamedIn
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[26073])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UTexture2DComposite::SourceTexturesFullyStreamedIn()
{
	static UFunction* uFnSourceTexturesFullyStreamedIn = nullptr;

	if (!uFnSourceTexturesFullyStreamedIn)
	{
		uFnSourceTexturesFullyStreamedIn = UFunction::FindFunction("Function Engine.Texture2DComposite.SourceTexturesFullyStreamedIn");
	}

	UTexture2DComposite_execSourceTexturesFullyStreamedIn_Params SourceTexturesFullyStreamedIn_Params;
	memset(&SourceTexturesFullyStreamedIn_Params, 0, sizeof(SourceTexturesFullyStreamedIn_Params));

	uFnSourceTexturesFullyStreamedIn->iNative = 0;
	uFnSourceTexturesFullyStreamedIn->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSourceTexturesFullyStreamedIn, &SourceTexturesFullyStreamedIn_Params, nullptr);
	uFnSourceTexturesFullyStreamedIn->FunctionFlags |= 0x400;
	uFnSourceTexturesFullyStreamedIn->iNative = 26073;

	return SourceTexturesFullyStreamedIn_Params.ReturnValue;
};

// Function Engine.Texture2DDynamic.Create
// [0x00026401] (FUNC_Final | FUNC_Native | FUNC_Static | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[4014])
// Parameter Info:
// class UTexture2DDynamic*       ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        InSizeX                        (CPF_Parm)
// int32_t                        InSizeY                        (CPF_Parm)
// EPixelFormat                   InFormat                       (CPF_OptionalParm | CPF_Parm)
// uint32_t                       InIsResolveTarget              (CPF_OptionalParm | CPF_Parm)

class UTexture2DDynamic* UTexture2DDynamic::Create(int32_t InSizeX, int32_t InSizeY, EPixelFormat InFormat, bool InIsResolveTarget)
{
	static UFunction* uFnCreate = nullptr;

	if (!uFnCreate)
	{
		uFnCreate = UFunction::FindFunction("Function Engine.Texture2DDynamic.Create");
	}

	UTexture2DDynamic_execCreate_Params Create_Params;
	memset(&Create_Params, 0, sizeof(Create_Params));
	memcpy_s(&Create_Params.InSizeX, sizeof(Create_Params.InSizeX), &InSizeX, sizeof(InSizeX));
	memcpy_s(&Create_Params.InSizeY, sizeof(Create_Params.InSizeY), &InSizeY, sizeof(InSizeY));
	memcpy_s(&Create_Params.InFormat, sizeof(Create_Params.InFormat), &InFormat, sizeof(InFormat));
	Create_Params.InIsResolveTarget = InIsResolveTarget;

	uFnCreate->iNative = 0;
	uFnCreate->FunctionFlags &= ~0x400;
	UTexture2DDynamic::StaticClass()->ProcessEvent(uFnCreate, &Create_Params, nullptr);
	uFnCreate->FunctionFlags |= 0x400;
	uFnCreate->iNative = 4014;

	return Create_Params.ReturnValue;
};

// Function Engine.Texture2DDynamic.Init
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[762])
// Parameter Info:
// int32_t                        InSizeX                        (CPF_Parm)
// int32_t                        InSizeY                        (CPF_Parm)
// EPixelFormat                   InFormat                       (CPF_OptionalParm | CPF_Parm)
// uint32_t                       InIsResolveTarget              (CPF_OptionalParm | CPF_Parm)

void UTexture2DDynamic::Init(int32_t InSizeX, int32_t InSizeY, EPixelFormat InFormat, bool InIsResolveTarget)
{
	static UFunction* uFnInit = nullptr;

	if (!uFnInit)
	{
		uFnInit = UFunction::FindFunction("Function Engine.Texture2DDynamic.Init");
	}

	UTexture2DDynamic_execInit_Params Init_Params;
	memset(&Init_Params, 0, sizeof(Init_Params));
	memcpy_s(&Init_Params.InSizeX, sizeof(Init_Params.InSizeX), &InSizeX, sizeof(InSizeX));
	memcpy_s(&Init_Params.InSizeY, sizeof(Init_Params.InSizeY), &InSizeY, sizeof(InSizeY));
	memcpy_s(&Init_Params.InFormat, sizeof(Init_Params.InFormat), &InFormat, sizeof(InFormat));
	Init_Params.InIsResolveTarget = InIsResolveTarget;

	uFnInit->iNative = 0;
	uFnInit->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnInit, &Init_Params, nullptr);
	uFnInit->FunctionFlags |= 0x400;
	uFnInit->iNative = 762;
};

// Function Engine.TextureMovie.Stop
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[623])
// Parameter Info:

void UTextureMovie::Stop()
{
	static UFunction* uFnStop = nullptr;

	if (!uFnStop)
	{
		uFnStop = UFunction::FindFunction("Function Engine.TextureMovie.Stop");
	}

	UTextureMovie_execStop_Params Stop_Params;
	memset(&Stop_Params, 0, sizeof(Stop_Params));

	uFnStop->iNative = 0;
	uFnStop->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnStop, &Stop_Params, nullptr);
	uFnStop->FunctionFlags |= 0x400;
	uFnStop->iNative = 623;
};

// Function Engine.TextureMovie.Pause
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[5012])
// Parameter Info:

void UTextureMovie::Pause()
{
	static UFunction* uFnPause = nullptr;

	if (!uFnPause)
	{
		uFnPause = UFunction::FindFunction("Function Engine.TextureMovie.Pause");
	}

	UTextureMovie_execPause_Params Pause_Params;
	memset(&Pause_Params, 0, sizeof(Pause_Params));

	uFnPause->iNative = 0;
	uFnPause->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnPause, &Pause_Params, nullptr);
	uFnPause->FunctionFlags |= 0x400;
	uFnPause->iNative = 5012;
};

// Function Engine.TextureMovie.Play
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[765])
// Parameter Info:

void UTextureMovie::Play()
{
	static UFunction* uFnPlay = nullptr;

	if (!uFnPlay)
	{
		uFnPlay = UFunction::FindFunction("Function Engine.TextureMovie.Play");
	}

	UTextureMovie_execPlay_Params Play_Params;
	memset(&Play_Params, 0, sizeof(Play_Params));

	uFnPlay->iNative = 0;
	uFnPlay->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnPlay, &Play_Params, nullptr);
	uFnPlay->FunctionFlags |= 0x400;
	uFnPlay->iNative = 765;
};

// Function Engine.TextureRenderTarget2D.Create
// [0x00026401] (FUNC_Final | FUNC_Native | FUNC_Static | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[4014])
// Parameter Info:
// class UTextureRenderTarget2D*  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        InSizeX                        (CPF_Parm)
// int32_t                        InSizeY                        (CPF_Parm)
// EPixelFormat                   InFormat                       (CPF_OptionalParm | CPF_Parm)
// struct FLinearColor            InClearColor                   (CPF_OptionalParm | CPF_Parm)
// uint32_t                       bOnlyRenderOnce                (CPF_OptionalParm | CPF_Parm)

class UTextureRenderTarget2D* UTextureRenderTarget2D::Create(int32_t InSizeX, int32_t InSizeY, EPixelFormat InFormat, const struct FLinearColor& InClearColor, bool bOnlyRenderOnce)
{
	static UFunction* uFnCreate = nullptr;

	if (!uFnCreate)
	{
		uFnCreate = UFunction::FindFunction("Function Engine.TextureRenderTarget2D.Create");
	}

	UTextureRenderTarget2D_execCreate_Params Create_Params;
	memset(&Create_Params, 0, sizeof(Create_Params));
	memcpy_s(&Create_Params.InSizeX, sizeof(Create_Params.InSizeX), &InSizeX, sizeof(InSizeX));
	memcpy_s(&Create_Params.InSizeY, sizeof(Create_Params.InSizeY), &InSizeY, sizeof(InSizeY));
	memcpy_s(&Create_Params.InFormat, sizeof(Create_Params.InFormat), &InFormat, sizeof(InFormat));
	memcpy_s(&Create_Params.InClearColor, sizeof(Create_Params.InClearColor), &InClearColor, sizeof(InClearColor));
	Create_Params.bOnlyRenderOnce = bOnlyRenderOnce;

	uFnCreate->iNative = 0;
	uFnCreate->FunctionFlags &= ~0x400;
	UTextureRenderTarget2D::StaticClass()->ProcessEvent(uFnCreate, &Create_Params, nullptr);
	uFnCreate->FunctionFlags |= 0x400;
	uFnCreate->iNative = 4014;

	return Create_Params.ReturnValue;
};

// Function Engine.ScriptedTexture.Render
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// class UCanvas*                 C                              (CPF_Parm)

void UScriptedTexture::Render(class UCanvas* C)
{
	static UFunction* uFnRender = nullptr;

	if (!uFnRender)
	{
		uFnRender = UFunction::FindFunction("Function Engine.ScriptedTexture.Render");
	}

	UScriptedTexture_execRender_Params Render_Params;
	memset(&Render_Params, 0, sizeof(Render_Params));
	Render_Params.C = C;

	this->ProcessEvent(uFnRender, &Render_Params, nullptr);
};

// Function Engine.DebugCameraController.ConsoleCommand
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[18363])
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)
// class FString                  Command                        (CPF_Parm | CPF_NeedCtorLink)
// uint32_t                       bWriteToLog                    (CPF_OptionalParm | CPF_Parm)

class FString ADebugCameraController::ConsoleCommand(const class FString& Command, bool bWriteToLog)
{
	static UFunction* uFnConsoleCommand = nullptr;

	if (!uFnConsoleCommand)
	{
		uFnConsoleCommand = UFunction::FindFunction("Function Engine.DebugCameraController.ConsoleCommand");
	}

	ADebugCameraController_execConsoleCommand_Params ConsoleCommand_Params;
	memset(&ConsoleCommand_Params, 0, sizeof(ConsoleCommand_Params));
	memcpy_s(&ConsoleCommand_Params.Command, sizeof(ConsoleCommand_Params.Command), &Command, sizeof(Command));
	ConsoleCommand_Params.bWriteToLog = bWriteToLog;

	uFnConsoleCommand->iNative = 0;
	uFnConsoleCommand->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnConsoleCommand, &ConsoleCommand_Params, nullptr);
	uFnConsoleCommand->FunctionFlags |= 0x400;
	uFnConsoleCommand->iNative = 18363;

	return ConsoleCommand_Params.ReturnValue;
};

// Function Engine.DebugCameraController.ShowDebugSelectedInfo
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void ADebugCameraController::ShowDebugSelectedInfo()
{
	static UFunction* uFnShowDebugSelectedInfo = nullptr;

	if (!uFnShowDebugSelectedInfo)
	{
		uFnShowDebugSelectedInfo = UFunction::FindFunction("Function Engine.DebugCameraController.ShowDebugSelectedInfo");
	}

	ADebugCameraController_execShowDebugSelectedInfo_Params ShowDebugSelectedInfo_Params;
	memset(&ShowDebugSelectedInfo_Params, 0, sizeof(ShowDebugSelectedInfo_Params));

	this->ProcessEvent(uFnShowDebugSelectedInfo, &ShowDebugSelectedInfo_Params, nullptr);
};

// Function Engine.DebugCameraController.NativeInputKey
// [0x00824002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        ControllerId                   (CPF_Parm)
// class FName                    Key                            (CPF_Parm)
// EInputEvent                    Event                          (CPF_Parm)
// float                          AmountDepressed                (CPF_OptionalParm | CPF_Parm)
// uint32_t                       bGamepad                       (CPF_OptionalParm | CPF_Parm)

bool ADebugCameraController::NativeInputKey(int32_t ControllerId, const class FName& Key, EInputEvent Event, float AmountDepressed, bool bGamepad)
{
	static UFunction* uFnNativeInputKey = nullptr;

	if (!uFnNativeInputKey)
	{
		uFnNativeInputKey = UFunction::FindFunction("Function Engine.DebugCameraController.NativeInputKey");
	}

	ADebugCameraController_execNativeInputKey_Params NativeInputKey_Params;
	memset(&NativeInputKey_Params, 0, sizeof(NativeInputKey_Params));
	memcpy_s(&NativeInputKey_Params.ControllerId, sizeof(NativeInputKey_Params.ControllerId), &ControllerId, sizeof(ControllerId));
	memcpy_s(&NativeInputKey_Params.Key, sizeof(NativeInputKey_Params.Key), &Key, sizeof(Key));
	memcpy_s(&NativeInputKey_Params.Event, sizeof(NativeInputKey_Params.Event), &Event, sizeof(Event));
	memcpy_s(&NativeInputKey_Params.AmountDepressed, sizeof(NativeInputKey_Params.AmountDepressed), &AmountDepressed, sizeof(AmountDepressed));
	NativeInputKey_Params.bGamepad = bGamepad;

	this->ProcessEvent(uFnNativeInputKey, &NativeInputKey_Params, nullptr);

	return NativeInputKey_Params.ReturnValue;
};

// Function Engine.DebugCameraController.DisableDebugCamera
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void ADebugCameraController::DisableDebugCamera()
{
	static UFunction* uFnDisableDebugCamera = nullptr;

	if (!uFnDisableDebugCamera)
	{
		uFnDisableDebugCamera = UFunction::FindFunction("Function Engine.DebugCameraController.DisableDebugCamera");
	}

	ADebugCameraController_execDisableDebugCamera_Params DisableDebugCamera_Params;
	memset(&DisableDebugCamera_Params, 0, sizeof(DisableDebugCamera_Params));

	this->ProcessEvent(uFnDisableDebugCamera, &DisableDebugCamera_Params, nullptr);
};

// Function Engine.DebugCameraController.NormalSpeed
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void ADebugCameraController::NormalSpeed()
{
	static UFunction* uFnNormalSpeed = nullptr;

	if (!uFnNormalSpeed)
	{
		uFnNormalSpeed = UFunction::FindFunction("Function Engine.DebugCameraController.NormalSpeed");
	}

	ADebugCameraController_execNormalSpeed_Params NormalSpeed_Params;
	memset(&NormalSpeed_Params, 0, sizeof(NormalSpeed_Params));

	this->ProcessEvent(uFnNormalSpeed, &NormalSpeed_Params, nullptr);
};

// Function Engine.DebugCameraController.MoreSpeed
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void ADebugCameraController::MoreSpeed()
{
	static UFunction* uFnMoreSpeed = nullptr;

	if (!uFnMoreSpeed)
	{
		uFnMoreSpeed = UFunction::FindFunction("Function Engine.DebugCameraController.MoreSpeed");
	}

	ADebugCameraController_execMoreSpeed_Params MoreSpeed_Params;
	memset(&MoreSpeed_Params, 0, sizeof(MoreSpeed_Params));

	this->ProcessEvent(uFnMoreSpeed, &MoreSpeed_Params, nullptr);
};

// Function Engine.DebugCameraController.SetFreezeRendering
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void ADebugCameraController::SetFreezeRendering()
{
	static UFunction* uFnSetFreezeRendering = nullptr;

	if (!uFnSetFreezeRendering)
	{
		uFnSetFreezeRendering = UFunction::FindFunction("Function Engine.DebugCameraController.SetFreezeRendering");
	}

	ADebugCameraController_execSetFreezeRendering_Params SetFreezeRendering_Params;
	memset(&SetFreezeRendering_Params, 0, sizeof(SetFreezeRendering_Params));

	this->ProcessEvent(uFnSetFreezeRendering, &SetFreezeRendering_Params, nullptr);
};

// Function Engine.DebugCameraController.OnDeactivate
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class APlayerController*       PC                             (CPF_Parm)

void ADebugCameraController::OnDeactivate(class APlayerController* PC)
{
	static UFunction* uFnOnDeactivate = nullptr;

	if (!uFnOnDeactivate)
	{
		uFnOnDeactivate = UFunction::FindFunction("Function Engine.DebugCameraController.OnDeactivate");
	}

	ADebugCameraController_execOnDeactivate_Params OnDeactivate_Params;
	memset(&OnDeactivate_Params, 0, sizeof(OnDeactivate_Params));
	OnDeactivate_Params.PC = PC;

	this->ProcessEvent(uFnOnDeactivate, &OnDeactivate_Params, nullptr);
};

// Function Engine.DebugCameraController.OnActivate
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class APlayerController*       PC                             (CPF_Parm)

void ADebugCameraController::OnActivate(class APlayerController* PC)
{
	static UFunction* uFnOnActivate = nullptr;

	if (!uFnOnActivate)
	{
		uFnOnActivate = UFunction::FindFunction("Function Engine.DebugCameraController.OnActivate");
	}

	ADebugCameraController_execOnActivate_Params OnActivate_Params;
	memset(&OnActivate_Params, 0, sizeof(OnActivate_Params));
	OnActivate_Params.PC = PC;

	this->ProcessEvent(uFnOnActivate, &OnActivate_Params, nullptr);
};

// Function Engine.DebugCameraController.PostBeginPlay
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void ADebugCameraController::eventPostBeginPlay()
{
	static UFunction* uFnPostBeginPlay = nullptr;

	if (!uFnPostBeginPlay)
	{
		uFnPostBeginPlay = UFunction::FindFunction("Function Engine.DebugCameraController.PostBeginPlay");
	}

	ADebugCameraController_eventPostBeginPlay_Params PostBeginPlay_Params;
	memset(&PostBeginPlay_Params, 0, sizeof(PostBeginPlay_Params));

	this->ProcessEvent(uFnPostBeginPlay, &PostBeginPlay_Params, nullptr);
};

// Function Engine.DebugCameraController.Unselect
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[26961])
// Parameter Info:

void ADebugCameraController::Unselect()
{
	static UFunction* uFnUnselect = nullptr;

	if (!uFnUnselect)
	{
		uFnUnselect = UFunction::FindFunction("Function Engine.DebugCameraController.Unselect");
	}

	ADebugCameraController_execUnselect_Params Unselect_Params;
	memset(&Unselect_Params, 0, sizeof(Unselect_Params));

	uFnUnselect->iNative = 0;
	uFnUnselect->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnUnselect, &Unselect_Params, nullptr);
	uFnUnselect->FunctionFlags |= 0x400;
	uFnUnselect->iNative = 26961;
};

// Function Engine.DebugCameraController.SecondarySelect
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25444])
// Parameter Info:
// struct FVector                 HitLoc                         (CPF_Parm)
// struct FVector                 HitNormal                      (CPF_Parm)
// struct FTraceHitInfo           HitInfo                        (CPF_Parm)

void ADebugCameraController::SecondarySelect(const struct FVector& HitLoc, const struct FVector& HitNormal, const struct FTraceHitInfo& HitInfo)
{
	static UFunction* uFnSecondarySelect = nullptr;

	if (!uFnSecondarySelect)
	{
		uFnSecondarySelect = UFunction::FindFunction("Function Engine.DebugCameraController.SecondarySelect");
	}

	ADebugCameraController_execSecondarySelect_Params SecondarySelect_Params;
	memset(&SecondarySelect_Params, 0, sizeof(SecondarySelect_Params));
	memcpy_s(&SecondarySelect_Params.HitLoc, sizeof(SecondarySelect_Params.HitLoc), &HitLoc, sizeof(HitLoc));
	memcpy_s(&SecondarySelect_Params.HitNormal, sizeof(SecondarySelect_Params.HitNormal), &HitNormal, sizeof(HitNormal));
	memcpy_s(&SecondarySelect_Params.HitInfo, sizeof(SecondarySelect_Params.HitInfo), &HitInfo, sizeof(HitInfo));

	uFnSecondarySelect->iNative = 0;
	uFnSecondarySelect->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSecondarySelect, &SecondarySelect_Params, nullptr);
	uFnSecondarySelect->FunctionFlags |= 0x400;
	uFnSecondarySelect->iNative = 25444;
};

// Function Engine.DebugCameraController.PrimarySelect
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[24530])
// Parameter Info:
// struct FVector                 HitLoc                         (CPF_Parm)
// struct FVector                 HitNormal                      (CPF_Parm)
// struct FTraceHitInfo           HitInfo                        (CPF_Parm)

void ADebugCameraController::PrimarySelect(const struct FVector& HitLoc, const struct FVector& HitNormal, const struct FTraceHitInfo& HitInfo)
{
	static UFunction* uFnPrimarySelect = nullptr;

	if (!uFnPrimarySelect)
	{
		uFnPrimarySelect = UFunction::FindFunction("Function Engine.DebugCameraController.PrimarySelect");
	}

	ADebugCameraController_execPrimarySelect_Params PrimarySelect_Params;
	memset(&PrimarySelect_Params, 0, sizeof(PrimarySelect_Params));
	memcpy_s(&PrimarySelect_Params.HitLoc, sizeof(PrimarySelect_Params.HitLoc), &HitLoc, sizeof(HitLoc));
	memcpy_s(&PrimarySelect_Params.HitNormal, sizeof(PrimarySelect_Params.HitNormal), &HitNormal, sizeof(HitNormal));
	memcpy_s(&PrimarySelect_Params.HitInfo, sizeof(PrimarySelect_Params.HitInfo), &HitInfo, sizeof(HitInfo));

	uFnPrimarySelect->iNative = 0;
	uFnPrimarySelect->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnPrimarySelect, &PrimarySelect_Params, nullptr);
	uFnPrimarySelect->FunctionFlags |= 0x400;
	uFnPrimarySelect->iNative = 24530;
};

// Function Engine.Pawn.SetScalarParameterInterp
// [0x00420501] (FUNC_Final | FUNC_Simulated | FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[25775])
// Parameter Info:
// struct FScalarParameterInterpStruct ScalarParameterInterp          (CPF_Const | CPF_Parm | CPF_OutParm)

void APawn::SetScalarParameterInterp(struct FScalarParameterInterpStruct& ScalarParameterInterp)
{
	static UFunction* uFnSetScalarParameterInterp = nullptr;

	if (!uFnSetScalarParameterInterp)
	{
		uFnSetScalarParameterInterp = UFunction::FindFunction("Function Engine.Pawn.SetScalarParameterInterp");
	}

	APawn_execSetScalarParameterInterp_Params SetScalarParameterInterp_Params;
	memset(&SetScalarParameterInterp_Params, 0, sizeof(SetScalarParameterInterp_Params));
	memcpy_s(&SetScalarParameterInterp_Params.ScalarParameterInterp, sizeof(SetScalarParameterInterp_Params.ScalarParameterInterp), &ScalarParameterInterp, sizeof(ScalarParameterInterp));

	uFnSetScalarParameterInterp->iNative = 0;
	uFnSetScalarParameterInterp->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetScalarParameterInterp, &SetScalarParameterInterp_Params, nullptr);
	uFnSetScalarParameterInterp->FunctionFlags |= 0x400;
	uFnSetScalarParameterInterp->iNative = 25775;

	memcpy_s(&ScalarParameterInterp, sizeof(ScalarParameterInterp), &SetScalarParameterInterp_Params.ScalarParameterInterp, sizeof(SetScalarParameterInterp_Params.ScalarParameterInterp));
};

// Function Engine.Pawn.SetRootMotionInterpCurrentTime
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[25771])
// Parameter Info:
// float                          inTime                         (CPF_Parm)
// float                          DeltaTime                      (CPF_OptionalParm | CPF_Parm)
// uint32_t                       bUpdateSkelPose                (CPF_OptionalParm | CPF_Parm)

void APawn::SetRootMotionInterpCurrentTime(float inTime, float DeltaTime, bool bUpdateSkelPose)
{
	static UFunction* uFnSetRootMotionInterpCurrentTime = nullptr;

	if (!uFnSetRootMotionInterpCurrentTime)
	{
		uFnSetRootMotionInterpCurrentTime = UFunction::FindFunction("Function Engine.Pawn.SetRootMotionInterpCurrentTime");
	}

	APawn_execSetRootMotionInterpCurrentTime_Params SetRootMotionInterpCurrentTime_Params;
	memset(&SetRootMotionInterpCurrentTime_Params, 0, sizeof(SetRootMotionInterpCurrentTime_Params));
	memcpy_s(&SetRootMotionInterpCurrentTime_Params.inTime, sizeof(SetRootMotionInterpCurrentTime_Params.inTime), &inTime, sizeof(inTime));
	memcpy_s(&SetRootMotionInterpCurrentTime_Params.DeltaTime, sizeof(SetRootMotionInterpCurrentTime_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));
	SetRootMotionInterpCurrentTime_Params.bUpdateSkelPose = bUpdateSkelPose;

	uFnSetRootMotionInterpCurrentTime->iNative = 0;
	uFnSetRootMotionInterpCurrentTime->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetRootMotionInterpCurrentTime, &SetRootMotionInterpCurrentTime_Params, nullptr);
	uFnSetRootMotionInterpCurrentTime->FunctionFlags |= 0x400;
	uFnSetRootMotionInterpCurrentTime->iNative = 25771;
};

// Function Engine.Pawn.ZeroMovementVariables
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void APawn::ZeroMovementVariables()
{
	static UFunction* uFnZeroMovementVariables = nullptr;

	if (!uFnZeroMovementVariables)
	{
		uFnZeroMovementVariables = UFunction::FindFunction("Function Engine.Pawn.ZeroMovementVariables");
	}

	APawn_execZeroMovementVariables_Params ZeroMovementVariables_Params;
	memset(&ZeroMovementVariables_Params, 0, sizeof(ZeroMovementVariables_Params));

	this->ProcessEvent(uFnZeroMovementVariables, &ZeroMovementVariables_Params, nullptr);
};

// Function Engine.Pawn.ClearPathStep
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[18145])
// Parameter Info:

void APawn::ClearPathStep()
{
	static UFunction* uFnClearPathStep = nullptr;

	if (!uFnClearPathStep)
	{
		uFnClearPathStep = UFunction::FindFunction("Function Engine.Pawn.ClearPathStep");
	}

	APawn_execClearPathStep_Params ClearPathStep_Params;
	memset(&ClearPathStep_Params, 0, sizeof(ClearPathStep_Params));

	uFnClearPathStep->iNative = 0;
	uFnClearPathStep->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnClearPathStep, &ClearPathStep_Params, nullptr);
	uFnClearPathStep->FunctionFlags |= 0x400;
	uFnClearPathStep->iNative = 18145;
};

// Function Engine.Pawn.DrawPathStep
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[19191])
// Parameter Info:
// class UCanvas*                 C                              (CPF_Parm)

void APawn::DrawPathStep(class UCanvas* C)
{
	static UFunction* uFnDrawPathStep = nullptr;

	if (!uFnDrawPathStep)
	{
		uFnDrawPathStep = UFunction::FindFunction("Function Engine.Pawn.DrawPathStep");
	}

	APawn_execDrawPathStep_Params DrawPathStep_Params;
	memset(&DrawPathStep_Params, 0, sizeof(DrawPathStep_Params));
	DrawPathStep_Params.C = C;

	uFnDrawPathStep->iNative = 0;
	uFnDrawPathStep->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnDrawPathStep, &DrawPathStep_Params, nullptr);
	uFnDrawPathStep->FunctionFlags |= 0x400;
	uFnDrawPathStep->iNative = 19191;
};

// Function Engine.Pawn.IncrementPathChild
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[21074])
// Parameter Info:
// int32_t                        Cnt                            (CPF_Parm)
// class UCanvas*                 C                              (CPF_Parm)

void APawn::IncrementPathChild(int32_t Cnt, class UCanvas* C)
{
	static UFunction* uFnIncrementPathChild = nullptr;

	if (!uFnIncrementPathChild)
	{
		uFnIncrementPathChild = UFunction::FindFunction("Function Engine.Pawn.IncrementPathChild");
	}

	APawn_execIncrementPathChild_Params IncrementPathChild_Params;
	memset(&IncrementPathChild_Params, 0, sizeof(IncrementPathChild_Params));
	memcpy_s(&IncrementPathChild_Params.Cnt, sizeof(IncrementPathChild_Params.Cnt), &Cnt, sizeof(Cnt));
	IncrementPathChild_Params.C = C;

	uFnIncrementPathChild->iNative = 0;
	uFnIncrementPathChild->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnIncrementPathChild, &IncrementPathChild_Params, nullptr);
	uFnIncrementPathChild->FunctionFlags |= 0x400;
	uFnIncrementPathChild->iNative = 21074;
};

// Function Engine.Pawn.IncrementPathStep
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[21075])
// Parameter Info:
// int32_t                        Cnt                            (CPF_Parm)
// class UCanvas*                 C                              (CPF_Parm)

void APawn::IncrementPathStep(int32_t Cnt, class UCanvas* C)
{
	static UFunction* uFnIncrementPathStep = nullptr;

	if (!uFnIncrementPathStep)
	{
		uFnIncrementPathStep = UFunction::FindFunction("Function Engine.Pawn.IncrementPathStep");
	}

	APawn_execIncrementPathStep_Params IncrementPathStep_Params;
	memset(&IncrementPathStep_Params, 0, sizeof(IncrementPathStep_Params));
	memcpy_s(&IncrementPathStep_Params.Cnt, sizeof(IncrementPathStep_Params.Cnt), &Cnt, sizeof(Cnt));
	IncrementPathStep_Params.C = C;

	uFnIncrementPathStep->iNative = 0;
	uFnIncrementPathStep->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnIncrementPathStep, &IncrementPathStep_Params, nullptr);
	uFnIncrementPathStep->FunctionFlags |= 0x400;
	uFnIncrementPathStep->iNative = 21075;
};

// Function Engine.Pawn.SoakPause
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void APawn::eventSoakPause()
{
	static UFunction* uFnSoakPause = nullptr;

	if (!uFnSoakPause)
	{
		uFnSoakPause = UFunction::FindFunction("Function Engine.Pawn.SoakPause");
	}

	APawn_eventSoakPause_Params SoakPause_Params;
	memset(&SoakPause_Params, 0, sizeof(SoakPause_Params));

	this->ProcessEvent(uFnSoakPause, &SoakPause_Params, nullptr);
};

// Function Engine.Pawn.MessagePlayer
// [0x00020801] (FUNC_Final | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  Message                        (CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink)

void APawn::eventMessagePlayer(const class FString& Message)
{
	static UFunction* uFnMessagePlayer = nullptr;

	if (!uFnMessagePlayer)
	{
		uFnMessagePlayer = UFunction::FindFunction("Function Engine.Pawn.MessagePlayer");
	}

	APawn_eventMessagePlayer_Params MessagePlayer_Params;
	memset(&MessagePlayer_Params, 0, sizeof(MessagePlayer_Params));
	memcpy_s(&MessagePlayer_Params.Message, sizeof(MessagePlayer_Params.Message), &Message, sizeof(Message));

	this->ProcessEvent(uFnMessagePlayer, &MessagePlayer_Params, nullptr);
};

// Function Engine.Pawn.OnTeleport
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_Teleport*        Action                         (CPF_Parm)

void APawn::OnTeleport(class USeqAct_Teleport* Action)
{
	static UFunction* uFnOnTeleport = nullptr;

	if (!uFnOnTeleport)
	{
		uFnOnTeleport = UFunction::FindFunction("Function Engine.Pawn.OnTeleport");
	}

	APawn_execOnTeleport_Params OnTeleport_Params;
	memset(&OnTeleport_Params, 0, sizeof(OnTeleport_Params));
	OnTeleport_Params.Action = Action;

	this->ProcessEvent(uFnOnTeleport, &OnTeleport_Params, nullptr);
};

// Function Engine.Pawn.OnSetMaterial
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_SetMaterial*     Action                         (CPF_Parm)

void APawn::OnSetMaterial(class USeqAct_SetMaterial* Action)
{
	static UFunction* uFnOnSetMaterial = nullptr;

	if (!uFnOnSetMaterial)
	{
		uFnOnSetMaterial = UFunction::FindFunction("Function Engine.Pawn.OnSetMaterial");
	}

	APawn_execOnSetMaterial_Params OnSetMaterial_Params;
	memset(&OnSetMaterial_Params, 0, sizeof(OnSetMaterial_Params));
	OnSetMaterial_Params.Action = Action;

	this->ProcessEvent(uFnOnSetMaterial, &OnSetMaterial_Params, nullptr);
};

// Function Engine.Pawn.SpawnedByKismet
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void APawn::eventSpawnedByKismet()
{
	static UFunction* uFnSpawnedByKismet = nullptr;

	if (!uFnSpawnedByKismet)
	{
		uFnSpawnedByKismet = UFunction::FindFunction("Function Engine.Pawn.SpawnedByKismet");
	}

	APawn_eventSpawnedByKismet_Params SpawnedByKismet_Params;
	memset(&SpawnedByKismet_Params, 0, sizeof(SpawnedByKismet_Params));

	this->ProcessEvent(uFnSpawnedByKismet, &SpawnedByKismet_Params, nullptr);
};

// Function Engine.Pawn.GetCollisionExtent
// [0x00820103] (FUNC_Final | FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// struct FVector                 ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

struct FVector APawn::GetCollisionExtent()
{
	static UFunction* uFnGetCollisionExtent = nullptr;

	if (!uFnGetCollisionExtent)
	{
		uFnGetCollisionExtent = UFunction::FindFunction("Function Engine.Pawn.GetCollisionExtent");
	}

	APawn_execGetCollisionExtent_Params GetCollisionExtent_Params;
	memset(&GetCollisionExtent_Params, 0, sizeof(GetCollisionExtent_Params));

	this->ProcessEvent(uFnGetCollisionExtent, &GetCollisionExtent_Params, nullptr);

	return GetCollisionExtent_Params.ReturnValue;
};

// Function Engine.Pawn.GetCollisionHeight
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

float APawn::GetCollisionHeight()
{
	static UFunction* uFnGetCollisionHeight = nullptr;

	if (!uFnGetCollisionHeight)
	{
		uFnGetCollisionHeight = UFunction::FindFunction("Function Engine.Pawn.GetCollisionHeight");
	}

	APawn_execGetCollisionHeight_Params GetCollisionHeight_Params;
	memset(&GetCollisionHeight_Params, 0, sizeof(GetCollisionHeight_Params));

	this->ProcessEvent(uFnGetCollisionHeight, &GetCollisionHeight_Params, nullptr);

	return GetCollisionHeight_Params.ReturnValue;
};

// Function Engine.Pawn.GetCollisionRadius
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

float APawn::GetCollisionRadius()
{
	static UFunction* uFnGetCollisionRadius = nullptr;

	if (!uFnGetCollisionRadius)
	{
		uFnGetCollisionRadius = UFunction::FindFunction("Function Engine.Pawn.GetCollisionRadius");
	}

	APawn_execGetCollisionRadius_Params GetCollisionRadius_Params;
	memset(&GetCollisionRadius_Params, 0, sizeof(GetCollisionRadius_Params));

	this->ProcessEvent(uFnGetCollisionRadius, &GetCollisionRadius_Params, nullptr);

	return GetCollisionRadius_Params.ReturnValue;
};

// Function Engine.Pawn.CheatFly
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool APawn::CheatFly()
{
	static UFunction* uFnCheatFly = nullptr;

	if (!uFnCheatFly)
	{
		uFnCheatFly = UFunction::FindFunction("Function Engine.Pawn.CheatFly");
	}

	APawn_execCheatFly_Params CheatFly_Params;
	memset(&CheatFly_Params, 0, sizeof(CheatFly_Params));

	this->ProcessEvent(uFnCheatFly, &CheatFly_Params, nullptr);

	return CheatFly_Params.ReturnValue;
};

// Function Engine.Pawn.CheatGhost
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool APawn::CheatGhost()
{
	static UFunction* uFnCheatGhost = nullptr;

	if (!uFnCheatGhost)
	{
		uFnCheatGhost = UFunction::FindFunction("Function Engine.Pawn.CheatGhost");
	}

	APawn_execCheatGhost_Params CheatGhost_Params;
	memset(&CheatGhost_Params, 0, sizeof(CheatGhost_Params));

	this->ProcessEvent(uFnCheatGhost, &CheatGhost_Params, nullptr);

	return CheatGhost_Params.ReturnValue;
};

// Function Engine.Pawn.CheatWalk
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool APawn::CheatWalk()
{
	static UFunction* uFnCheatWalk = nullptr;

	if (!uFnCheatWalk)
	{
		uFnCheatWalk = UFunction::FindFunction("Function Engine.Pawn.CheatWalk");
	}

	APawn_execCheatWalk_Params CheatWalk_Params;
	memset(&CheatWalk_Params, 0, sizeof(CheatWalk_Params));

	this->ProcessEvent(uFnCheatWalk, &CheatWalk_Params, nullptr);

	return CheatWalk_Params.ReturnValue;
};

// Function Engine.Pawn.ThrowActiveWeapon
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void APawn::ThrowActiveWeapon()
{
	static UFunction* uFnThrowActiveWeapon = nullptr;

	if (!uFnThrowActiveWeapon)
	{
		uFnThrowActiveWeapon = UFunction::FindFunction("Function Engine.Pawn.ThrowActiveWeapon");
	}

	APawn_execThrowActiveWeapon_Params ThrowActiveWeapon_Params;
	memset(&ThrowActiveWeapon_Params, 0, sizeof(ThrowActiveWeapon_Params));

	this->ProcessEvent(uFnThrowActiveWeapon, &ThrowActiveWeapon_Params, nullptr);
};

// Function Engine.Pawn.DrawHUD
// [0x00020100] (FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AHUD*                    H                              (CPF_Parm)

void APawn::DrawHUD(class AHUD* H)
{
	static UFunction* uFnDrawHUD = nullptr;

	if (!uFnDrawHUD)
	{
		uFnDrawHUD = UFunction::FindFunction("Function Engine.Pawn.DrawHUD");
	}

	APawn_execDrawHUD_Params DrawHUD_Params;
	memset(&DrawHUD_Params, 0, sizeof(DrawHUD_Params));
	DrawHUD_Params.H = H;

	this->ProcessEvent(uFnDrawHUD, &DrawHUD_Params, nullptr);
};

// Function Engine.Pawn.AddDefaultInventory
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void APawn::AddDefaultInventory()
{
	static UFunction* uFnAddDefaultInventory = nullptr;

	if (!uFnAddDefaultInventory)
	{
		uFnAddDefaultInventory = UFunction::FindFunction("Function Engine.Pawn.AddDefaultInventory");
	}

	APawn_execAddDefaultInventory_Params AddDefaultInventory_Params;
	memset(&AddDefaultInventory_Params, 0, sizeof(AddDefaultInventory_Params));

	this->ProcessEvent(uFnAddDefaultInventory, &AddDefaultInventory_Params, nullptr);
};

// Function Engine.Pawn.CanThrowWeapon
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool APawn::CanThrowWeapon()
{
	static UFunction* uFnCanThrowWeapon = nullptr;

	if (!uFnCanThrowWeapon)
	{
		uFnCanThrowWeapon = UFunction::FindFunction("Function Engine.Pawn.CanThrowWeapon");
	}

	APawn_execCanThrowWeapon_Params CanThrowWeapon_Params;
	memset(&CanThrowWeapon_Params, 0, sizeof(CanThrowWeapon_Params));

	this->ProcessEvent(uFnCanThrowWeapon, &CanThrowWeapon_Params, nullptr);

	return CanThrowWeapon_Params.ReturnValue;
};

// Function Engine.Pawn.Suicide
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void APawn::Suicide()
{
	static UFunction* uFnSuicide = nullptr;

	if (!uFnSuicide)
	{
		uFnSuicide = UFunction::FindFunction("Function Engine.Pawn.Suicide");
	}

	APawn_execSuicide_Params Suicide_Params;
	memset(&Suicide_Params, 0, sizeof(Suicide_Params));

	this->ProcessEvent(uFnSuicide, &Suicide_Params, nullptr);
};

// Function Engine.Pawn.PlayLanded
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          ImpactVel                      (CPF_Parm)

void APawn::PlayLanded(float ImpactVel)
{
	static UFunction* uFnPlayLanded = nullptr;

	if (!uFnPlayLanded)
	{
		uFnPlayLanded = UFunction::FindFunction("Function Engine.Pawn.PlayLanded");
	}

	APawn_execPlayLanded_Params PlayLanded_Params;
	memset(&PlayLanded_Params, 0, sizeof(PlayLanded_Params));
	memcpy_s(&PlayLanded_Params.ImpactVel, sizeof(PlayLanded_Params.ImpactVel), &ImpactVel, sizeof(ImpactVel));

	this->ProcessEvent(uFnPlayLanded, &PlayLanded_Params, nullptr);
};

// Function Engine.Pawn.CannotJumpNow
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool APawn::CannotJumpNow()
{
	static UFunction* uFnCannotJumpNow = nullptr;

	if (!uFnCannotJumpNow)
	{
		uFnCannotJumpNow = UFunction::FindFunction("Function Engine.Pawn.CannotJumpNow");
	}

	APawn_execCannotJumpNow_Params CannotJumpNow_Params;
	memset(&CannotJumpNow_Params, 0, sizeof(CannotJumpNow_Params));

	this->ProcessEvent(uFnCannotJumpNow, &CannotJumpNow_Params, nullptr);

	return CannotJumpNow_Params.ReturnValue;
};

// Function Engine.Pawn.PlayFootStepSound
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        FootDown                       (CPF_Parm)

void APawn::eventPlayFootStepSound(int32_t FootDown)
{
	static UFunction* uFnPlayFootStepSound = nullptr;

	if (!uFnPlayFootStepSound)
	{
		uFnPlayFootStepSound = UFunction::FindFunction("Function Engine.Pawn.PlayFootStepSound");
	}

	APawn_eventPlayFootStepSound_Params PlayFootStepSound_Params;
	memset(&PlayFootStepSound_Params, 0, sizeof(PlayFootStepSound_Params));
	memcpy_s(&PlayFootStepSound_Params.FootDown, sizeof(PlayFootStepSound_Params.FootDown), &FootDown, sizeof(FootDown));

	this->ProcessEvent(uFnPlayFootStepSound, &PlayFootStepSound_Params, nullptr);
};

// Function Engine.Pawn.TornOff
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void APawn::eventTornOff()
{
	static UFunction* uFnTornOff = nullptr;

	if (!uFnTornOff)
	{
		uFnTornOff = UFunction::FindFunction("Function Engine.Pawn.TornOff");
	}

	APawn_eventTornOff_Params TornOff_Params;
	memset(&TornOff_Params, 0, sizeof(TornOff_Params));

	this->ProcessEvent(uFnTornOff, &TornOff_Params, nullptr);
};

// Function Engine.Pawn.PlayDying
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AController*             Killer                         (CPF_Parm)
// class UDamageType*             DamageType                     (CPF_Parm)
// struct FVector                 HitLoc                         (CPF_Parm)

void APawn::eventPlayDying(class AController* Killer, class UDamageType* DamageType, const struct FVector& HitLoc)
{
	static UFunction* uFnPlayDying = nullptr;

	if (!uFnPlayDying)
	{
		uFnPlayDying = UFunction::FindFunction("Function Engine.Pawn.PlayDying");
	}

	APawn_eventPlayDying_Params PlayDying_Params;
	memset(&PlayDying_Params, 0, sizeof(PlayDying_Params));
	PlayDying_Params.Killer = Killer;
	PlayDying_Params.DamageType = DamageType;
	memcpy_s(&PlayDying_Params.HitLoc, sizeof(PlayDying_Params.HitLoc), &HitLoc, sizeof(HitLoc));

	this->ProcessEvent(uFnPlayDying, &PlayDying_Params, nullptr);
};

// Function Engine.Pawn.SetDyingPhysics
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void APawn::SetDyingPhysics()
{
	static UFunction* uFnSetDyingPhysics = nullptr;

	if (!uFnSetDyingPhysics)
	{
		uFnSetDyingPhysics = UFunction::FindFunction("Function Engine.Pawn.SetDyingPhysics");
	}

	APawn_execSetDyingPhysics_Params SetDyingPhysics_Params;
	memset(&SetDyingPhysics_Params, 0, sizeof(SetDyingPhysics_Params));

	this->ProcessEvent(uFnSetDyingPhysics, &SetDyingPhysics_Params, nullptr);
};

// Function Engine.Pawn.PlayHit
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[24338])
// Parameter Info:
// float                          Damage                         (CPF_Parm)
// class AController*             InstigatedBy                   (CPF_Parm)
// struct FVector                 HitLocation                    (CPF_Parm)
// class UDamageType*             DamageType                     (CPF_Parm)
// struct FVector                 Momentum                       (CPF_Parm)
// struct FTraceHitInfo           HitInfo                        (CPF_Parm)

void APawn::PlayHit(float Damage, class AController* InstigatedBy, const struct FVector& HitLocation, class UDamageType* DamageType, const struct FVector& Momentum, const struct FTraceHitInfo& HitInfo)
{
	static UFunction* uFnPlayHit = nullptr;

	if (!uFnPlayHit)
	{
		uFnPlayHit = UFunction::FindFunction("Function Engine.Pawn.PlayHit");
	}

	APawn_execPlayHit_Params PlayHit_Params;
	memset(&PlayHit_Params, 0, sizeof(PlayHit_Params));
	memcpy_s(&PlayHit_Params.Damage, sizeof(PlayHit_Params.Damage), &Damage, sizeof(Damage));
	PlayHit_Params.InstigatedBy = InstigatedBy;
	memcpy_s(&PlayHit_Params.HitLocation, sizeof(PlayHit_Params.HitLocation), &HitLocation, sizeof(HitLocation));
	PlayHit_Params.DamageType = DamageType;
	memcpy_s(&PlayHit_Params.Momentum, sizeof(PlayHit_Params.Momentum), &Momentum, sizeof(Momentum));
	memcpy_s(&PlayHit_Params.HitInfo, sizeof(PlayHit_Params.HitInfo), &HitInfo, sizeof(HitInfo));

	uFnPlayHit->iNative = 0;
	uFnPlayHit->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnPlayHit, &PlayHit_Params, nullptr);
	uFnPlayHit->FunctionFlags |= 0x400;
	uFnPlayHit->iNative = 24338;
};

// Function Engine.Pawn.PlayDyingSound
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void APawn::PlayDyingSound()
{
	static UFunction* uFnPlayDyingSound = nullptr;

	if (!uFnPlayDyingSound)
	{
		uFnPlayDyingSound = UFunction::FindFunction("Function Engine.Pawn.PlayDyingSound");
	}

	APawn_execPlayDyingSound_Params PlayDyingSound_Params;
	memset(&PlayDyingSound_Params, 0, sizeof(PlayDyingSound_Params));

	this->ProcessEvent(uFnPlayDyingSound, &PlayDyingSound_Params, nullptr);
};

// Function Engine.Pawn.DoJump
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       bUpdating                      (CPF_Parm)

bool APawn::DoJump(bool bUpdating)
{
	static UFunction* uFnDoJump = nullptr;

	if (!uFnDoJump)
	{
		uFnDoJump = UFunction::FindFunction("Function Engine.Pawn.DoJump");
	}

	APawn_execDoJump_Params DoJump_Params;
	memset(&DoJump_Params, 0, sizeof(DoJump_Params));
	DoJump_Params.bUpdating = bUpdating;

	this->ProcessEvent(uFnDoJump, &DoJump_Params, nullptr);

	return DoJump_Params.ReturnValue;
};

// Function Engine.Pawn.CheckWaterJump
// [0x00C20002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FVector                 WallNormal                     (CPF_Parm | CPF_OutParm)

bool APawn::CheckWaterJump(struct FVector& WallNormal)
{
	static UFunction* uFnCheckWaterJump = nullptr;

	if (!uFnCheckWaterJump)
	{
		uFnCheckWaterJump = UFunction::FindFunction("Function Engine.Pawn.CheckWaterJump");
	}

	APawn_execCheckWaterJump_Params CheckWaterJump_Params;
	memset(&CheckWaterJump_Params, 0, sizeof(CheckWaterJump_Params));
	memcpy_s(&CheckWaterJump_Params.WallNormal, sizeof(CheckWaterJump_Params.WallNormal), &WallNormal, sizeof(WallNormal));

	this->ProcessEvent(uFnCheckWaterJump, &CheckWaterJump_Params, nullptr);

	memcpy_s(&WallNormal, sizeof(WallNormal), &CheckWaterJump_Params.WallNormal, sizeof(CheckWaterJump_Params.WallNormal));

	return CheckWaterJump_Params.ReturnValue;
};

// Function Engine.Pawn.TouchingWaterVolume
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool APawn::TouchingWaterVolume()
{
	static UFunction* uFnTouchingWaterVolume = nullptr;

	if (!uFnTouchingWaterVolume)
	{
		uFnTouchingWaterVolume = UFunction::FindFunction("Function Engine.Pawn.TouchingWaterVolume");
	}

	APawn_execTouchingWaterVolume_Params TouchingWaterVolume_Params;
	memset(&TouchingWaterVolume_Params, 0, sizeof(TouchingWaterVolume_Params));

	this->ProcessEvent(uFnTouchingWaterVolume, &TouchingWaterVolume_Params, nullptr);

	return TouchingWaterVolume_Params.ReturnValue;
};

// Function Engine.Pawn.HeadVolumeChange
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class APhysicsVolume*          newHeadVolume                  (CPF_Parm)

void APawn::eventHeadVolumeChange(class APhysicsVolume* newHeadVolume)
{
	static UFunction* uFnHeadVolumeChange = nullptr;

	if (!uFnHeadVolumeChange)
	{
		uFnHeadVolumeChange = UFunction::FindFunction("Function Engine.Pawn.HeadVolumeChange");
	}

	APawn_eventHeadVolumeChange_Params HeadVolumeChange_Params;
	memset(&HeadVolumeChange_Params, 0, sizeof(HeadVolumeChange_Params));
	HeadVolumeChange_Params.newHeadVolume = newHeadVolume;

	this->ProcessEvent(uFnHeadVolumeChange, &HeadVolumeChange_Params, nullptr);
};

// Function Engine.Pawn.Landed
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FVector                 HitNormal                      (CPF_Parm)
// class AActor*                  FloorActor                     (CPF_Parm)

void APawn::eventLanded(const struct FVector& HitNormal, class AActor* FloorActor)
{
	static UFunction* uFnLanded = nullptr;

	if (!uFnLanded)
	{
		uFnLanded = UFunction::FindFunction("Function Engine.Pawn.Landed");
	}

	APawn_eventLanded_Params Landed_Params;
	memset(&Landed_Params, 0, sizeof(Landed_Params));
	memcpy_s(&Landed_Params.HitNormal, sizeof(Landed_Params.HitNormal), &HitNormal, sizeof(HitNormal));
	Landed_Params.FloorActor = FloorActor;

	this->ProcessEvent(uFnLanded, &Landed_Params, nullptr);
};

// Function Engine.Pawn.Falling
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void APawn::eventFalling()
{
	static UFunction* uFnFalling = nullptr;

	if (!uFnFalling)
	{
		uFnFalling = UFunction::FindFunction("Function Engine.Pawn.Falling");
	}

	APawn_eventFalling_Params Falling_Params;
	memset(&Falling_Params, 0, sizeof(Falling_Params));

	this->ProcessEvent(uFnFalling, &Falling_Params, nullptr);
};

// Function Engine.Pawn.Died
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[18931])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class AController*             Killer                         (CPF_Parm)
// class UDamageType*             DamageType                     (CPF_Parm)
// struct FVector                 HitLocation                    (CPF_Parm)

bool APawn::Died(class AController* Killer, class UDamageType* DamageType, const struct FVector& HitLocation)
{
	static UFunction* uFnDied = nullptr;

	if (!uFnDied)
	{
		uFnDied = UFunction::FindFunction("Function Engine.Pawn.Died");
	}

	APawn_execDied_Params Died_Params;
	memset(&Died_Params, 0, sizeof(Died_Params));
	Died_Params.Killer = Killer;
	Died_Params.DamageType = DamageType;
	memcpy_s(&Died_Params.HitLocation, sizeof(Died_Params.HitLocation), &HitLocation, sizeof(HitLocation));

	uFnDied->iNative = 0;
	uFnDied->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnDied, &Died_Params, nullptr);
	uFnDied->FunctionFlags |= 0x400;
	uFnDied->iNative = 18931;

	return Died_Params.ReturnValue;
};

// Function Engine.Pawn.ChooseAndTriggerDeathEvent
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UDamageType*             _pDamageType                   (CPF_Parm)

void APawn::eventChooseAndTriggerDeathEvent(class UDamageType* _pDamageType)
{
	static UFunction* uFnChooseAndTriggerDeathEvent = nullptr;

	if (!uFnChooseAndTriggerDeathEvent)
	{
		uFnChooseAndTriggerDeathEvent = UFunction::FindFunction("Function Engine.Pawn.ChooseAndTriggerDeathEvent");
	}

	APawn_eventChooseAndTriggerDeathEvent_Params ChooseAndTriggerDeathEvent_Params;
	memset(&ChooseAndTriggerDeathEvent_Params, 0, sizeof(ChooseAndTriggerDeathEvent_Params));
	ChooseAndTriggerDeathEvent_Params._pDamageType = _pDamageType;

	this->ProcessEvent(uFnChooseAndTriggerDeathEvent, &ChooseAndTriggerDeathEvent_Params, nullptr);
};

// Function Engine.Pawn.IsSameTeam
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class APawn*                   Other                          (CPF_Parm)

bool APawn::eventIsSameTeam(class APawn* Other)
{
	static UFunction* uFnIsSameTeam = nullptr;

	if (!uFnIsSameTeam)
	{
		uFnIsSameTeam = UFunction::FindFunction("Function Engine.Pawn.IsSameTeam");
	}

	APawn_eventIsSameTeam_Params IsSameTeam_Params;
	memset(&IsSameTeam_Params, 0, sizeof(IsSameTeam_Params));
	IsSameTeam_Params.Other = Other;

	this->ProcessEvent(uFnIsSameTeam, &IsSameTeam_Params, nullptr);

	return IsSameTeam_Params.ReturnValue;
};

// Function Engine.Pawn.GetTeam
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class ATeamInfo*               ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class ATeamInfo* APawn::GetTeam()
{
	static UFunction* uFnGetTeam = nullptr;

	if (!uFnGetTeam)
	{
		uFnGetTeam = UFunction::FindFunction("Function Engine.Pawn.GetTeam");
	}

	APawn_execGetTeam_Params GetTeam_Params;
	memset(&GetTeam_Params, 0, sizeof(GetTeam_Params));

	this->ProcessEvent(uFnGetTeam, &GetTeam_Params, nullptr);

	return GetTeam_Params.ReturnValue;
};

// Function Engine.Pawn.GetTeamNum
// [0x00020500] (FUNC_Simulated | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20783])
// Parameter Info:
// uint8_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

uint8_t APawn::GetTeamNum()
{
	static UFunction* uFnGetTeamNum = nullptr;

	if (!uFnGetTeamNum)
	{
		uFnGetTeamNum = UFunction::FindFunction("Function Engine.Pawn.GetTeamNum");
	}

	APawn_execGetTeamNum_Params GetTeamNum_Params;
	memset(&GetTeamNum_Params, 0, sizeof(GetTeamNum_Params));

	uFnGetTeamNum->iNative = 0;
	uFnGetTeamNum->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetTeamNum, &GetTeamNum_Params, nullptr);
	uFnGetTeamNum->FunctionFlags |= 0x400;
	uFnGetTeamNum->iNative = 20783;

	return GetTeamNum_Params.ReturnValue;
};

// Function Engine.Pawn.TakeDamage
// [0x00024C00] (FUNC_Native | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[13766])
// Parameter Info:
// int32_t                        Damage                         (CPF_Parm)
// class AController*             InstigatedBy                   (CPF_Parm)
// struct FVector                 HitLocation                    (CPF_Parm)
// struct FVector                 Momentum                       (CPF_Parm)
// class UDamageType*             DamageType                     (CPF_Parm)
// struct FTraceHitInfo           HitInfo                        (CPF_OptionalParm | CPF_Parm)
// class AActor*                  DamageCauser                   (CPF_OptionalParm | CPF_Parm)

void APawn::eventTakeDamage(int32_t Damage, class AController* InstigatedBy, const struct FVector& HitLocation, const struct FVector& Momentum, class UDamageType* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser)
{
	static UFunction* uFnTakeDamage = nullptr;

	if (!uFnTakeDamage)
	{
		uFnTakeDamage = UFunction::FindFunction("Function Engine.Pawn.TakeDamage");
	}

	APawn_eventTakeDamage_Params TakeDamage_Params;
	memset(&TakeDamage_Params, 0, sizeof(TakeDamage_Params));
	memcpy_s(&TakeDamage_Params.Damage, sizeof(TakeDamage_Params.Damage), &Damage, sizeof(Damage));
	TakeDamage_Params.InstigatedBy = InstigatedBy;
	memcpy_s(&TakeDamage_Params.HitLocation, sizeof(TakeDamage_Params.HitLocation), &HitLocation, sizeof(HitLocation));
	memcpy_s(&TakeDamage_Params.Momentum, sizeof(TakeDamage_Params.Momentum), &Momentum, sizeof(Momentum));
	TakeDamage_Params.DamageType = DamageType;
	memcpy_s(&TakeDamage_Params.HitInfo, sizeof(TakeDamage_Params.HitInfo), &HitInfo, sizeof(HitInfo));
	TakeDamage_Params.DamageCauser = DamageCauser;

	uFnTakeDamage->iNative = 0;
	uFnTakeDamage->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnTakeDamage, &TakeDamage_Params, nullptr);
	uFnTakeDamage->FunctionFlags |= 0x400;
	uFnTakeDamage->iNative = 13766;
};

// Function Engine.Pawn.SetKillInstigator
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AController*             ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class AController*             InstigatedBy                   (CPF_Parm)
// class UDamageType*             DamageType                     (CPF_Parm)

class AController* APawn::SetKillInstigator(class AController* InstigatedBy, class UDamageType* DamageType)
{
	static UFunction* uFnSetKillInstigator = nullptr;

	if (!uFnSetKillInstigator)
	{
		uFnSetKillInstigator = UFunction::FindFunction("Function Engine.Pawn.SetKillInstigator");
	}

	APawn_execSetKillInstigator_Params SetKillInstigator_Params;
	memset(&SetKillInstigator_Params, 0, sizeof(SetKillInstigator_Params));
	SetKillInstigator_Params.InstigatedBy = InstigatedBy;
	SetKillInstigator_Params.DamageType = DamageType;

	this->ProcessEvent(uFnSetKillInstigator, &SetKillInstigator_Params, nullptr);

	return SetKillInstigator_Params.ReturnValue;
};

// Function Engine.Pawn.NotifyTakeHit
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AController*             InstigatedBy                   (CPF_Parm)
// struct FVector                 HitLocation                    (CPF_Parm)
// int32_t                        Damage                         (CPF_Parm)
// class UDamageType*             DamageType                     (CPF_Parm)
// struct FVector                 Momentum                       (CPF_Parm)

void APawn::eventNotifyTakeHit(class AController* InstigatedBy, const struct FVector& HitLocation, int32_t Damage, class UDamageType* DamageType, const struct FVector& Momentum)
{
	static UFunction* uFnNotifyTakeHit = nullptr;

	if (!uFnNotifyTakeHit)
	{
		uFnNotifyTakeHit = UFunction::FindFunction("Function Engine.Pawn.NotifyTakeHit");
	}

	APawn_eventNotifyTakeHit_Params NotifyTakeHit_Params;
	memset(&NotifyTakeHit_Params, 0, sizeof(NotifyTakeHit_Params));
	NotifyTakeHit_Params.InstigatedBy = InstigatedBy;
	memcpy_s(&NotifyTakeHit_Params.HitLocation, sizeof(NotifyTakeHit_Params.HitLocation), &HitLocation, sizeof(HitLocation));
	memcpy_s(&NotifyTakeHit_Params.Damage, sizeof(NotifyTakeHit_Params.Damage), &Damage, sizeof(Damage));
	NotifyTakeHit_Params.DamageType = DamageType;
	memcpy_s(&NotifyTakeHit_Params.Momentum, sizeof(NotifyTakeHit_Params.Momentum), &Momentum, sizeof(Momentum));

	this->ProcessEvent(uFnNotifyTakeHit, &NotifyTakeHit_Params, nullptr);
};

// Function Engine.Pawn.TakeRadiusDamageOnBones
// [0x00820802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class AController*             InstigatedBy                   (CPF_Parm)
// float                          BaseDamage                     (CPF_Parm)
// float                          DamageRadius                   (CPF_Parm)
// class UDamageType*             DamageType                     (CPF_Parm)
// float                          Momentum                       (CPF_Parm)
// struct FVector                 HurtOrigin                     (CPF_Parm)
// uint32_t                       bFullDamage                    (CPF_Parm)
// class AActor*                  DamageCauser                   (CPF_Parm)
// class TArray<class FName>      Bones                          (CPF_Parm | CPF_NeedCtorLink)

bool APawn::eventTakeRadiusDamageOnBones(class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UDamageType* DamageType, float Momentum, const struct FVector& HurtOrigin, bool bFullDamage, class AActor* DamageCauser, const class TArray<class FName>& Bones)
{
	static UFunction* uFnTakeRadiusDamageOnBones = nullptr;

	if (!uFnTakeRadiusDamageOnBones)
	{
		uFnTakeRadiusDamageOnBones = UFunction::FindFunction("Function Engine.Pawn.TakeRadiusDamageOnBones");
	}

	APawn_eventTakeRadiusDamageOnBones_Params TakeRadiusDamageOnBones_Params;
	memset(&TakeRadiusDamageOnBones_Params, 0, sizeof(TakeRadiusDamageOnBones_Params));
	TakeRadiusDamageOnBones_Params.InstigatedBy = InstigatedBy;
	memcpy_s(&TakeRadiusDamageOnBones_Params.BaseDamage, sizeof(TakeRadiusDamageOnBones_Params.BaseDamage), &BaseDamage, sizeof(BaseDamage));
	memcpy_s(&TakeRadiusDamageOnBones_Params.DamageRadius, sizeof(TakeRadiusDamageOnBones_Params.DamageRadius), &DamageRadius, sizeof(DamageRadius));
	TakeRadiusDamageOnBones_Params.DamageType = DamageType;
	memcpy_s(&TakeRadiusDamageOnBones_Params.Momentum, sizeof(TakeRadiusDamageOnBones_Params.Momentum), &Momentum, sizeof(Momentum));
	memcpy_s(&TakeRadiusDamageOnBones_Params.HurtOrigin, sizeof(TakeRadiusDamageOnBones_Params.HurtOrigin), &HurtOrigin, sizeof(HurtOrigin));
	TakeRadiusDamageOnBones_Params.bFullDamage = bFullDamage;
	TakeRadiusDamageOnBones_Params.DamageCauser = DamageCauser;
	memcpy_s(&TakeRadiusDamageOnBones_Params.Bones, sizeof(TakeRadiusDamageOnBones_Params.Bones), &Bones, sizeof(Bones));

	this->ProcessEvent(uFnTakeRadiusDamageOnBones, &TakeRadiusDamageOnBones_Params, nullptr);

	return TakeRadiusDamageOnBones_Params.ReturnValue;
};

// Function Engine.Pawn.PruneDamagedBoneList
// [0x00420000] (FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// class TArray<class FName>      Bones                          (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void APawn::PruneDamagedBoneList(class TArray<class FName>& Bones)
{
	static UFunction* uFnPruneDamagedBoneList = nullptr;

	if (!uFnPruneDamagedBoneList)
	{
		uFnPruneDamagedBoneList = UFunction::FindFunction("Function Engine.Pawn.PruneDamagedBoneList");
	}

	APawn_execPruneDamagedBoneList_Params PruneDamagedBoneList_Params;
	memset(&PruneDamagedBoneList_Params, 0, sizeof(PruneDamagedBoneList_Params));
	memcpy_s(&PruneDamagedBoneList_Params.Bones, sizeof(PruneDamagedBoneList_Params.Bones), &Bones, sizeof(Bones));

	this->ProcessEvent(uFnPruneDamagedBoneList, &PruneDamagedBoneList_Params, nullptr);

	memcpy_s(&Bones, sizeof(Bones), &PruneDamagedBoneList_Params.Bones, sizeof(PruneDamagedBoneList_Params.Bones));
};

// Function Engine.Pawn.HealDamage
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        Amount                         (CPF_Parm)
// class AController*             Healer                         (CPF_Parm)
// class UDamageType*             DamageType                     (CPF_Parm)

bool APawn::eventHealDamage(int32_t Amount, class AController* Healer, class UDamageType* DamageType)
{
	static UFunction* uFnHealDamage = nullptr;

	if (!uFnHealDamage)
	{
		uFnHealDamage = UFunction::FindFunction("Function Engine.Pawn.HealDamage");
	}

	APawn_eventHealDamage_Params HealDamage_Params;
	memset(&HealDamage_Params, 0, sizeof(HealDamage_Params));
	memcpy_s(&HealDamage_Params.Amount, sizeof(HealDamage_Params.Amount), &Amount, sizeof(Amount));
	HealDamage_Params.Healer = Healer;
	HealDamage_Params.DamageType = DamageType;

	this->ProcessEvent(uFnHealDamage, &HealDamage_Params, nullptr);

	return HealDamage_Params.ReturnValue;
};

// Function Engine.Pawn.AdjustDamage
// [0x00420000] (FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// class AController*             InstigatedBy                   (CPF_Parm)
// struct FVector                 HitLocation                    (CPF_Parm)
// class UDamageType*             DamageType                     (CPF_Parm)
// struct FTraceHitInfo           HitInfo                        (CPF_Parm)
// class AActor*                  DamageCauser                   (CPF_Parm)
// int32_t                        InDamage                       (CPF_Parm | CPF_OutParm)
// struct FVector                 Momentum                       (CPF_Parm | CPF_OutParm)

void APawn::AdjustDamage(class AController* InstigatedBy, const struct FVector& HitLocation, class UDamageType* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser, int32_t& InDamage, struct FVector& Momentum)
{
	static UFunction* uFnAdjustDamage = nullptr;

	if (!uFnAdjustDamage)
	{
		uFnAdjustDamage = UFunction::FindFunction("Function Engine.Pawn.AdjustDamage");
	}

	APawn_execAdjustDamage_Params AdjustDamage_Params;
	memset(&AdjustDamage_Params, 0, sizeof(AdjustDamage_Params));
	AdjustDamage_Params.InstigatedBy = InstigatedBy;
	memcpy_s(&AdjustDamage_Params.HitLocation, sizeof(AdjustDamage_Params.HitLocation), &HitLocation, sizeof(HitLocation));
	AdjustDamage_Params.DamageType = DamageType;
	memcpy_s(&AdjustDamage_Params.HitInfo, sizeof(AdjustDamage_Params.HitInfo), &HitInfo, sizeof(HitInfo));
	AdjustDamage_Params.DamageCauser = DamageCauser;
	memcpy_s(&AdjustDamage_Params.InDamage, sizeof(AdjustDamage_Params.InDamage), &InDamage, sizeof(InDamage));
	memcpy_s(&AdjustDamage_Params.Momentum, sizeof(AdjustDamage_Params.Momentum), &Momentum, sizeof(Momentum));

	this->ProcessEvent(uFnAdjustDamage, &AdjustDamage_Params, nullptr);

	memcpy_s(&InDamage, sizeof(InDamage), &AdjustDamage_Params.InDamage, sizeof(AdjustDamage_Params.InDamage));
	memcpy_s(&Momentum, sizeof(Momentum), &AdjustDamage_Params.Momentum, sizeof(AdjustDamage_Params.Momentum));
};

// Function Engine.Pawn.SetMovementPhysics
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void APawn::SetMovementPhysics()
{
	static UFunction* uFnSetMovementPhysics = nullptr;

	if (!uFnSetMovementPhysics)
	{
		uFnSetMovementPhysics = UFunction::FindFunction("Function Engine.Pawn.SetMovementPhysics");
	}

	APawn_execSetMovementPhysics_Params SetMovementPhysics_Params;
	memset(&SetMovementPhysics_Params, 0, sizeof(SetMovementPhysics_Params));

	this->ProcessEvent(uFnSetMovementPhysics, &SetMovementPhysics_Params, nullptr);
};

// Function Engine.Pawn.Gasp
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void APawn::Gasp()
{
	static UFunction* uFnGasp = nullptr;

	if (!uFnGasp)
	{
		uFnGasp = UFunction::FindFunction("Function Engine.Pawn.Gasp");
	}

	APawn_execGasp_Params Gasp_Params;
	memset(&Gasp_Params, 0, sizeof(Gasp_Params));

	this->ProcessEvent(uFnGasp, &Gasp_Params, nullptr);
};

// Function Engine.Pawn.OnAssignController
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_AssignController* inAction                       (CPF_Parm)

void APawn::OnAssignController(class USeqAct_AssignController* inAction)
{
	static UFunction* uFnOnAssignController = nullptr;

	if (!uFnOnAssignController)
	{
		uFnOnAssignController = UFunction::FindFunction("Function Engine.Pawn.OnAssignController");
	}

	APawn_execOnAssignController_Params OnAssignController_Params;
	memset(&OnAssignController_Params, 0, sizeof(OnAssignController_Params));
	OnAssignController_Params.inAction = inAction;

	this->ProcessEvent(uFnOnAssignController, &OnAssignController_Params, nullptr);
};

// Function Engine.Pawn.ReceivedNewEvent
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USequenceEvent*          Evt                            (CPF_Parm)

void APawn::eventReceivedNewEvent(class USequenceEvent* Evt)
{
	static UFunction* uFnReceivedNewEvent = nullptr;

	if (!uFnReceivedNewEvent)
	{
		uFnReceivedNewEvent = UFunction::FindFunction("Function Engine.Pawn.ReceivedNewEvent");
	}

	APawn_eventReceivedNewEvent_Params ReceivedNewEvent_Params;
	memset(&ReceivedNewEvent_Params, 0, sizeof(ReceivedNewEvent_Params));
	ReceivedNewEvent_Params.Evt = Evt;

	this->ProcessEvent(uFnReceivedNewEvent, &ReceivedNewEvent_Params, nullptr);
};

// Function Engine.Pawn.SpawnDefaultController
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void APawn::SpawnDefaultController()
{
	static UFunction* uFnSpawnDefaultController = nullptr;

	if (!uFnSpawnDefaultController)
	{
		uFnSpawnDefaultController = UFunction::FindFunction("Function Engine.Pawn.SpawnDefaultController");
	}

	APawn_execSpawnDefaultController_Params SpawnDefaultController_Params;
	memset(&SpawnDefaultController_Params, 0, sizeof(SpawnDefaultController_Params));

	this->ProcessEvent(uFnSpawnDefaultController, &SpawnDefaultController_Params, nullptr);
};

// Function Engine.Pawn.PostBeginPlay
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void APawn::eventPostBeginPlay()
{
	static UFunction* uFnPostBeginPlay = nullptr;

	if (!uFnPostBeginPlay)
	{
		uFnPostBeginPlay = UFunction::FindFunction("Function Engine.Pawn.PostBeginPlay");
	}

	APawn_eventPostBeginPlay_Params PostBeginPlay_Params;
	memset(&PostBeginPlay_Params, 0, sizeof(PostBeginPlay_Params));

	this->ProcessEvent(uFnPostBeginPlay, &PostBeginPlay_Params, nullptr);
};

// Function Engine.Pawn.PreBeginPlay
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void APawn::eventPreBeginPlay()
{
	static UFunction* uFnPreBeginPlay = nullptr;

	if (!uFnPreBeginPlay)
	{
		uFnPreBeginPlay = UFunction::FindFunction("Function Engine.Pawn.PreBeginPlay");
	}

	APawn_eventPreBeginPlay_Params PreBeginPlay_Params;
	memset(&PreBeginPlay_Params, 0, sizeof(PreBeginPlay_Params));

	this->ProcessEvent(uFnPreBeginPlay, &PreBeginPlay_Params, nullptr);
};

// Function Engine.Pawn.Destroyed
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void APawn::eventDestroyed()
{
	static UFunction* uFnDestroyed = nullptr;

	if (!uFnDestroyed)
	{
		uFnDestroyed = UFunction::FindFunction("Function Engine.Pawn.Destroyed");
	}

	APawn_eventDestroyed_Params Destroyed_Params;
	memset(&Destroyed_Params, 0, sizeof(Destroyed_Params));

	this->ProcessEvent(uFnDestroyed, &Destroyed_Params, nullptr);
};

// Function Engine.Pawn.DetachFromController
// [0x00024002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bDestroyController             (CPF_OptionalParm | CPF_Parm)

void APawn::DetachFromController(bool bDestroyController)
{
	static UFunction* uFnDetachFromController = nullptr;

	if (!uFnDetachFromController)
	{
		uFnDetachFromController = UFunction::FindFunction("Function Engine.Pawn.DetachFromController");
	}

	APawn_execDetachFromController_Params DetachFromController_Params;
	memset(&DetachFromController_Params, 0, sizeof(DetachFromController_Params));
	DetachFromController_Params.bDestroyController = bDestroyController;

	this->ProcessEvent(uFnDetachFromController, &DetachFromController_Params, nullptr);
};

// Function Engine.Pawn.CrushedBy
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class APawn*                   OtherPawn                      (CPF_Parm)

void APawn::CrushedBy(class APawn* OtherPawn)
{
	static UFunction* uFnCrushedBy = nullptr;

	if (!uFnCrushedBy)
	{
		uFnCrushedBy = UFunction::FindFunction("Function Engine.Pawn.CrushedBy");
	}

	APawn_execCrushedBy_Params CrushedBy_Params;
	memset(&CrushedBy_Params, 0, sizeof(CrushedBy_Params));
	CrushedBy_Params.OtherPawn = OtherPawn;

	this->ProcessEvent(uFnCrushedBy, &CrushedBy_Params, nullptr);
};

// Function Engine.Pawn.CanBeBaseForPawn
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class APawn*                   APawn                          (CPF_Parm)

bool APawn::CanBeBaseForPawn(class APawn* APawn)
{
	static UFunction* uFnCanBeBaseForPawn = nullptr;

	if (!uFnCanBeBaseForPawn)
	{
		uFnCanBeBaseForPawn = UFunction::FindFunction("Function Engine.Pawn.CanBeBaseForPawn");
	}

	APawn_execCanBeBaseForPawn_Params CanBeBaseForPawn_Params;
	memset(&CanBeBaseForPawn_Params, 0, sizeof(CanBeBaseForPawn_Params));
	CanBeBaseForPawn_Params.APawn = APawn;

	this->ProcessEvent(uFnCanBeBaseForPawn, &CanBeBaseForPawn_Params, nullptr);

	return CanBeBaseForPawn_Params.ReturnValue;
};

// Function Engine.Pawn.BaseChange
// [0x00020822] (FUNC_Defined | FUNC_Singular | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void APawn::eventBaseChange()
{
	static UFunction* uFnBaseChange = nullptr;

	if (!uFnBaseChange)
	{
		uFnBaseChange = UFunction::FindFunction("Function Engine.Pawn.BaseChange");
	}

	APawn_eventBaseChange_Params BaseChange_Params;
	memset(&BaseChange_Params, 0, sizeof(BaseChange_Params));

	this->ProcessEvent(uFnBaseChange, &BaseChange_Params, nullptr);
};

// Function Engine.Pawn.StuckOnPawn
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class APawn*                   OtherPawn                      (CPF_Parm)

void APawn::eventStuckOnPawn(class APawn* OtherPawn)
{
	static UFunction* uFnStuckOnPawn = nullptr;

	if (!uFnStuckOnPawn)
	{
		uFnStuckOnPawn = UFunction::FindFunction("Function Engine.Pawn.StuckOnPawn");
	}

	APawn_eventStuckOnPawn_Params StuckOnPawn_Params;
	memset(&StuckOnPawn_Params, 0, sizeof(StuckOnPawn_Params));
	StuckOnPawn_Params.OtherPawn = OtherPawn;

	this->ProcessEvent(uFnStuckOnPawn, &StuckOnPawn_Params, nullptr);
};

// Function Engine.Pawn.JumpOffPawn
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void APawn::JumpOffPawn()
{
	static UFunction* uFnJumpOffPawn = nullptr;

	if (!uFnJumpOffPawn)
	{
		uFnJumpOffPawn = UFunction::FindFunction("Function Engine.Pawn.JumpOffPawn");
	}

	APawn_execJumpOffPawn_Params JumpOffPawn_Params;
	memset(&JumpOffPawn_Params, 0, sizeof(JumpOffPawn_Params));

	this->ProcessEvent(uFnJumpOffPawn, &JumpOffPawn_Params, nullptr);
};

// Function Engine.Pawn.EncroachedBy
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AActor*                  Other                          (CPF_Parm)

void APawn::eventEncroachedBy(class AActor* Other)
{
	static UFunction* uFnEncroachedBy = nullptr;

	if (!uFnEncroachedBy)
	{
		uFnEncroachedBy = UFunction::FindFunction("Function Engine.Pawn.EncroachedBy");
	}

	APawn_eventEncroachedBy_Params EncroachedBy_Params;
	memset(&EncroachedBy_Params, 0, sizeof(EncroachedBy_Params));
	EncroachedBy_Params.Other = Other;

	this->ProcessEvent(uFnEncroachedBy, &EncroachedBy_Params, nullptr);
};

// Function Engine.Pawn.EncroachingOn
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class AActor*                  Other                          (CPF_Parm)

bool APawn::eventEncroachingOn(class AActor* Other)
{
	static UFunction* uFnEncroachingOn = nullptr;

	if (!uFnEncroachingOn)
	{
		uFnEncroachingOn = UFunction::FindFunction("Function Engine.Pawn.EncroachingOn");
	}

	APawn_eventEncroachingOn_Params EncroachingOn_Params;
	memset(&EncroachingOn_Params, 0, sizeof(EncroachingOn_Params));
	EncroachingOn_Params.Other = Other;

	this->ProcessEvent(uFnEncroachingOn, &EncroachingOn_Params, nullptr);

	return EncroachingOn_Params.ReturnValue;
};

// Function Engine.Pawn.FaceRotation
// [0x00020500] (FUNC_Simulated | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[19984])
// Parameter Info:
// struct FRotator                NewRotation                    (CPF_Parm)
// float                          DeltaTime                      (CPF_Parm)

void APawn::FaceRotation(const struct FRotator& NewRotation, float DeltaTime)
{
	static UFunction* uFnFaceRotation = nullptr;

	if (!uFnFaceRotation)
	{
		uFnFaceRotation = UFunction::FindFunction("Function Engine.Pawn.FaceRotation");
	}

	APawn_execFaceRotation_Params FaceRotation_Params;
	memset(&FaceRotation_Params, 0, sizeof(FaceRotation_Params));
	memcpy_s(&FaceRotation_Params.NewRotation, sizeof(FaceRotation_Params.NewRotation), &NewRotation, sizeof(NewRotation));
	memcpy_s(&FaceRotation_Params.DeltaTime, sizeof(FaceRotation_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));

	uFnFaceRotation->iNative = 0;
	uFnFaceRotation->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnFaceRotation, &FaceRotation_Params, nullptr);
	uFnFaceRotation->FunctionFlags |= 0x400;
	uFnFaceRotation->iNative = 19984;
};

// Function Engine.Pawn.UpdatePawnRotation
// [0x00020903] (FUNC_Final | FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FRotator                NewRotation                    (CPF_Parm)

void APawn::eventUpdatePawnRotation(const struct FRotator& NewRotation)
{
	static UFunction* uFnUpdatePawnRotation = nullptr;

	if (!uFnUpdatePawnRotation)
	{
		uFnUpdatePawnRotation = UFunction::FindFunction("Function Engine.Pawn.UpdatePawnRotation");
	}

	APawn_eventUpdatePawnRotation_Params UpdatePawnRotation_Params;
	memset(&UpdatePawnRotation_Params, 0, sizeof(UpdatePawnRotation_Params));
	memcpy_s(&UpdatePawnRotation_Params.NewRotation, sizeof(UpdatePawnRotation_Params.NewRotation), &NewRotation, sizeof(NewRotation));

	this->ProcessEvent(uFnUpdatePawnRotation, &UpdatePawnRotation_Params, nullptr);
};

// Function Engine.Pawn.ClientSetRotation
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FRotator                NewRotation                    (CPF_Parm)

void APawn::ClientSetRotation(const struct FRotator& NewRotation)
{
	static UFunction* uFnClientSetRotation = nullptr;

	if (!uFnClientSetRotation)
	{
		uFnClientSetRotation = UFunction::FindFunction("Function Engine.Pawn.ClientSetRotation");
	}

	APawn_execClientSetRotation_Params ClientSetRotation_Params;
	memset(&ClientSetRotation_Params, 0, sizeof(ClientSetRotation_Params));
	memcpy_s(&ClientSetRotation_Params.NewRotation, sizeof(ClientSetRotation_Params.NewRotation), &NewRotation, sizeof(NewRotation));

	this->ProcessEvent(uFnClientSetRotation, &ClientSetRotation_Params, nullptr);
};

// Function Engine.Pawn.ClientRestart
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void APawn::ClientRestart()
{
	static UFunction* uFnClientRestart = nullptr;

	if (!uFnClientRestart)
	{
		uFnClientRestart = UFunction::FindFunction("Function Engine.Pawn.ClientRestart");
	}

	APawn_execClientRestart_Params ClientRestart_Params;
	memset(&ClientRestart_Params, 0, sizeof(ClientRestart_Params));

	this->ProcessEvent(uFnClientRestart, &ClientRestart_Params, nullptr);
};

// Function Engine.Pawn.TakeFallingDamage
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FVector                 _HitNormal                     (CPF_Parm)
// class AActor*                  _pFloorActor                   (CPF_Parm)

void APawn::TakeFallingDamage(const struct FVector& _HitNormal, class AActor* _pFloorActor)
{
	static UFunction* uFnTakeFallingDamage = nullptr;

	if (!uFnTakeFallingDamage)
	{
		uFnTakeFallingDamage = UFunction::FindFunction("Function Engine.Pawn.TakeFallingDamage");
	}

	APawn_execTakeFallingDamage_Params TakeFallingDamage_Params;
	memset(&TakeFallingDamage_Params, 0, sizeof(TakeFallingDamage_Params));
	memcpy_s(&TakeFallingDamage_Params._HitNormal, sizeof(TakeFallingDamage_Params._HitNormal), &_HitNormal, sizeof(_HitNormal));
	TakeFallingDamage_Params._pFloorActor = _pFloorActor;

	this->ProcessEvent(uFnTakeFallingDamage, &TakeFallingDamage_Params, nullptr);
};

// Function Engine.Pawn.KilledBy
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class APawn*                   EventInstigator                (CPF_Parm)

void APawn::KilledBy(class APawn* EventInstigator)
{
	static UFunction* uFnKilledBy = nullptr;

	if (!uFnKilledBy)
	{
		uFnKilledBy = UFunction::FindFunction("Function Engine.Pawn.KilledBy");
	}

	APawn_execKilledBy_Params KilledBy_Params;
	memset(&KilledBy_Params, 0, sizeof(KilledBy_Params));
	KilledBy_Params.EventInstigator = EventInstigator;

	this->ProcessEvent(uFnKilledBy, &KilledBy_Params, nullptr);
};

// Function Engine.Pawn.AddVelocity
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[15380])
// Parameter Info:
// struct FVector                 NewVelocity                    (CPF_Parm)
// struct FVector                 HitLocation                    (CPF_Parm)
// class UDamageType*             DamageType                     (CPF_Parm)
// struct FTraceHitInfo           HitInfo                        (CPF_OptionalParm | CPF_Parm)

void APawn::AddVelocity(const struct FVector& NewVelocity, const struct FVector& HitLocation, class UDamageType* DamageType, const struct FTraceHitInfo& HitInfo)
{
	static UFunction* uFnAddVelocity = nullptr;

	if (!uFnAddVelocity)
	{
		uFnAddVelocity = UFunction::FindFunction("Function Engine.Pawn.AddVelocity");
	}

	APawn_execAddVelocity_Params AddVelocity_Params;
	memset(&AddVelocity_Params, 0, sizeof(AddVelocity_Params));
	memcpy_s(&AddVelocity_Params.NewVelocity, sizeof(AddVelocity_Params.NewVelocity), &NewVelocity, sizeof(NewVelocity));
	memcpy_s(&AddVelocity_Params.HitLocation, sizeof(AddVelocity_Params.HitLocation), &HitLocation, sizeof(HitLocation));
	AddVelocity_Params.DamageType = DamageType;
	memcpy_s(&AddVelocity_Params.HitInfo, sizeof(AddVelocity_Params.HitInfo), &HitInfo, sizeof(HitInfo));

	uFnAddVelocity->iNative = 0;
	uFnAddVelocity->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnAddVelocity, &AddVelocity_Params, nullptr);
	uFnAddVelocity->FunctionFlags |= 0x400;
	uFnAddVelocity->iNative = 15380;
};

// Function Engine.Pawn.HandleMomentum
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[20895])
// Parameter Info:
// struct FVector                 Momentum                       (CPF_Parm)
// struct FVector                 HitLocation                    (CPF_Parm)
// class UDamageType*             DamageType                     (CPF_Parm)
// struct FTraceHitInfo           HitInfo                        (CPF_OptionalParm | CPF_Parm)

void APawn::HandleMomentum(const struct FVector& Momentum, const struct FVector& HitLocation, class UDamageType* DamageType, const struct FTraceHitInfo& HitInfo)
{
	static UFunction* uFnHandleMomentum = nullptr;

	if (!uFnHandleMomentum)
	{
		uFnHandleMomentum = UFunction::FindFunction("Function Engine.Pawn.HandleMomentum");
	}

	APawn_execHandleMomentum_Params HandleMomentum_Params;
	memset(&HandleMomentum_Params, 0, sizeof(HandleMomentum_Params));
	memcpy_s(&HandleMomentum_Params.Momentum, sizeof(HandleMomentum_Params.Momentum), &Momentum, sizeof(Momentum));
	memcpy_s(&HandleMomentum_Params.HitLocation, sizeof(HandleMomentum_Params.HitLocation), &HitLocation, sizeof(HitLocation));
	HandleMomentum_Params.DamageType = DamageType;
	memcpy_s(&HandleMomentum_Params.HitInfo, sizeof(HandleMomentum_Params.HitInfo), &HitInfo, sizeof(HitInfo));

	uFnHandleMomentum->iNative = 0;
	uFnHandleMomentum->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnHandleMomentum, &HandleMomentum_Params, nullptr);
	uFnHandleMomentum->FunctionFlags |= 0x400;
	uFnHandleMomentum->iNative = 20895;
};

// Function Engine.Pawn.StartCrouch
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          HeightAdjust                   (CPF_Parm)

void APawn::eventStartCrouch(float HeightAdjust)
{
	static UFunction* uFnStartCrouch = nullptr;

	if (!uFnStartCrouch)
	{
		uFnStartCrouch = UFunction::FindFunction("Function Engine.Pawn.StartCrouch");
	}

	APawn_eventStartCrouch_Params StartCrouch_Params;
	memset(&StartCrouch_Params, 0, sizeof(StartCrouch_Params));
	memcpy_s(&StartCrouch_Params.HeightAdjust, sizeof(StartCrouch_Params.HeightAdjust), &HeightAdjust, sizeof(HeightAdjust));

	this->ProcessEvent(uFnStartCrouch, &StartCrouch_Params, nullptr);
};

// Function Engine.Pawn.EndCrouch
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          HeightAdjust                   (CPF_Parm)

void APawn::eventEndCrouch(float HeightAdjust)
{
	static UFunction* uFnEndCrouch = nullptr;

	if (!uFnEndCrouch)
	{
		uFnEndCrouch = UFunction::FindFunction("Function Engine.Pawn.EndCrouch");
	}

	APawn_eventEndCrouch_Params EndCrouch_Params;
	memset(&EndCrouch_Params, 0, sizeof(EndCrouch_Params));
	memcpy_s(&EndCrouch_Params.HeightAdjust, sizeof(EndCrouch_Params.HeightAdjust), &HeightAdjust, sizeof(HeightAdjust));

	this->ProcessEvent(uFnEndCrouch, &EndCrouch_Params, nullptr);
};

// Function Engine.Pawn.ShouldCrouch
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bCrouch                        (CPF_Parm)

void APawn::ShouldCrouch(bool bCrouch)
{
	static UFunction* uFnShouldCrouch = nullptr;

	if (!uFnShouldCrouch)
	{
		uFnShouldCrouch = UFunction::FindFunction("Function Engine.Pawn.ShouldCrouch");
	}

	APawn_execShouldCrouch_Params ShouldCrouch_Params;
	memset(&ShouldCrouch_Params, 0, sizeof(ShouldCrouch_Params));
	ShouldCrouch_Params.bCrouch = bCrouch;

	this->ProcessEvent(uFnShouldCrouch, &ShouldCrouch_Params, nullptr);
};

// Function Engine.Pawn.OutsideWorldBounds
// [0x00020922] (FUNC_Defined | FUNC_Singular | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void APawn::eventOutsideWorldBounds()
{
	static UFunction* uFnOutsideWorldBounds = nullptr;

	if (!uFnOutsideWorldBounds)
	{
		uFnOutsideWorldBounds = UFunction::FindFunction("Function Engine.Pawn.OutsideWorldBounds");
	}

	APawn_eventOutsideWorldBounds_Params OutsideWorldBounds_Params;
	memset(&OutsideWorldBounds_Params, 0, sizeof(OutsideWorldBounds_Params));

	this->ProcessEvent(uFnOutsideWorldBounds, &OutsideWorldBounds_Params, nullptr);
};

// Function Engine.Pawn.FellOutOfWorld
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UDamageType*             dmgType                        (CPF_Parm)

void APawn::eventFellOutOfWorld(class UDamageType* dmgType)
{
	static UFunction* uFnFellOutOfWorld = nullptr;

	if (!uFnFellOutOfWorld)
	{
		uFnFellOutOfWorld = UFunction::FindFunction("Function Engine.Pawn.FellOutOfWorld");
	}

	APawn_eventFellOutOfWorld_Params FellOutOfWorld_Params;
	memset(&FellOutOfWorld_Params, 0, sizeof(FellOutOfWorld_Params));
	FellOutOfWorld_Params.dmgType = dmgType;

	this->ProcessEvent(uFnFellOutOfWorld, &FellOutOfWorld_Params, nullptr);
};

// Function Engine.Pawn.ClientMessage
// [0x00024802] (FUNC_Defined | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  S                              (CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink)
// class FName                    Type                           (CPF_OptionalParm | CPF_Parm)

void APawn::eventClientMessage(const class FString& S, const class FName& Type)
{
	static UFunction* uFnClientMessage = nullptr;

	if (!uFnClientMessage)
	{
		uFnClientMessage = UFunction::FindFunction("Function Engine.Pawn.ClientMessage");
	}

	APawn_eventClientMessage_Params ClientMessage_Params;
	memset(&ClientMessage_Params, 0, sizeof(ClientMessage_Params));
	memcpy_s(&ClientMessage_Params.S, sizeof(ClientMessage_Params.S), &S, sizeof(S));
	memcpy_s(&ClientMessage_Params.Type, sizeof(ClientMessage_Params.Type), &Type, sizeof(Type));

	this->ProcessEvent(uFnClientMessage, &ClientMessage_Params, nullptr);
};

// Function Engine.Pawn.InGodMode
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool APawn::InGodMode()
{
	static UFunction* uFnInGodMode = nullptr;

	if (!uFnInGodMode)
	{
		uFnInGodMode = UFunction::FindFunction("Function Engine.Pawn.InGodMode");
	}

	APawn_execInGodMode_Params InGodMode_Params;
	memset(&InGodMode_Params, 0, sizeof(InGodMode_Params));

	this->ProcessEvent(uFnInGodMode, &InGodMode_Params, nullptr);

	return InGodMode_Params.ReturnValue;
};

// Function Engine.Pawn.SetViewRotation
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FRotator                NewRotation                    (CPF_Parm)

void APawn::SetViewRotation(const struct FRotator& NewRotation)
{
	static UFunction* uFnSetViewRotation = nullptr;

	if (!uFnSetViewRotation)
	{
		uFnSetViewRotation = UFunction::FindFunction("Function Engine.Pawn.SetViewRotation");
	}

	APawn_execSetViewRotation_Params SetViewRotation_Params;
	memset(&SetViewRotation_Params, 0, sizeof(SetViewRotation_Params));
	memcpy_s(&SetViewRotation_Params.NewRotation, sizeof(SetViewRotation_Params.NewRotation), &NewRotation, sizeof(NewRotation));

	this->ProcessEvent(uFnSetViewRotation, &SetViewRotation_Params, nullptr);
};

// Function Engine.Pawn.InFreeCam
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool APawn::eventInFreeCam()
{
	static UFunction* uFnInFreeCam = nullptr;

	if (!uFnInFreeCam)
	{
		uFnInFreeCam = UFunction::FindFunction("Function Engine.Pawn.InFreeCam");
	}

	APawn_eventInFreeCam_Params InFreeCam_Params;
	memset(&InFreeCam_Params, 0, sizeof(InFreeCam_Params));

	this->ProcessEvent(uFnInFreeCam, &InFreeCam_Params, nullptr);

	return InFreeCam_Params.ReturnValue;
};

// Function Engine.Pawn.GetBaseAimRotation
// [0x00820922] (FUNC_Defined | FUNC_Singular | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// struct FRotator                ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

struct FRotator APawn::eventGetBaseAimRotation()
{
	static UFunction* uFnGetBaseAimRotation = nullptr;

	if (!uFnGetBaseAimRotation)
	{
		uFnGetBaseAimRotation = UFunction::FindFunction("Function Engine.Pawn.GetBaseAimRotation");
	}

	APawn_eventGetBaseAimRotation_Params GetBaseAimRotation_Params;
	memset(&GetBaseAimRotation_Params, 0, sizeof(GetBaseAimRotation_Params));

	this->ProcessEvent(uFnGetBaseAimRotation, &GetBaseAimRotation_Params, nullptr);

	return GetBaseAimRotation_Params.ReturnValue;
};

// Function Engine.Pawn.GetPawnViewLocation
// [0x00020D00] (FUNC_Simulated | FUNC_Native | FUNC_Event | FUNC_Public | FUNC_AllFlags) (iNative[13562])
// Parameter Info:
// struct FVector                 ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

struct FVector APawn::eventGetPawnViewLocation()
{
	static UFunction* uFnGetPawnViewLocation = nullptr;

	if (!uFnGetPawnViewLocation)
	{
		uFnGetPawnViewLocation = UFunction::FindFunction("Function Engine.Pawn.GetPawnViewLocation");
	}

	APawn_eventGetPawnViewLocation_Params GetPawnViewLocation_Params;
	memset(&GetPawnViewLocation_Params, 0, sizeof(GetPawnViewLocation_Params));

	uFnGetPawnViewLocation->iNative = 0;
	uFnGetPawnViewLocation->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetPawnViewLocation, &GetPawnViewLocation_Params, nullptr);
	uFnGetPawnViewLocation->FunctionFlags |= 0x400;
	uFnGetPawnViewLocation->iNative = 13562;

	return GetPawnViewLocation_Params.ReturnValue;
};

// Function Engine.Pawn.GetViewRotation
// [0x00020D00] (FUNC_Simulated | FUNC_Native | FUNC_Event | FUNC_Public | FUNC_AllFlags) (iNative[13570])
// Parameter Info:
// struct FRotator                ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

struct FRotator APawn::eventGetViewRotation()
{
	static UFunction* uFnGetViewRotation = nullptr;

	if (!uFnGetViewRotation)
	{
		uFnGetViewRotation = UFunction::FindFunction("Function Engine.Pawn.GetViewRotation");
	}

	APawn_eventGetViewRotation_Params GetViewRotation_Params;
	memset(&GetViewRotation_Params, 0, sizeof(GetViewRotation_Params));

	uFnGetViewRotation->iNative = 0;
	uFnGetViewRotation->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetViewRotation, &GetViewRotation_Params, nullptr);
	uFnGetViewRotation->FunctionFlags |= 0x400;
	uFnGetViewRotation->iNative = 13570;

	return GetViewRotation_Params.ReturnValue;
};

// Function Engine.Pawn.GetActorEyesViewPoint
// [0x00420902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// struct FVector                 out_Location                   (CPF_Parm | CPF_OutParm)
// struct FRotator                out_Rotation                   (CPF_Parm | CPF_OutParm)

void APawn::eventGetActorEyesViewPoint(struct FVector& out_Location, struct FRotator& out_Rotation)
{
	static UFunction* uFnGetActorEyesViewPoint = nullptr;

	if (!uFnGetActorEyesViewPoint)
	{
		uFnGetActorEyesViewPoint = UFunction::FindFunction("Function Engine.Pawn.GetActorEyesViewPoint");
	}

	APawn_eventGetActorEyesViewPoint_Params GetActorEyesViewPoint_Params;
	memset(&GetActorEyesViewPoint_Params, 0, sizeof(GetActorEyesViewPoint_Params));
	memcpy_s(&GetActorEyesViewPoint_Params.out_Location, sizeof(GetActorEyesViewPoint_Params.out_Location), &out_Location, sizeof(out_Location));
	memcpy_s(&GetActorEyesViewPoint_Params.out_Rotation, sizeof(GetActorEyesViewPoint_Params.out_Rotation), &out_Rotation, sizeof(out_Rotation));

	this->ProcessEvent(uFnGetActorEyesViewPoint, &GetActorEyesViewPoint_Params, nullptr);

	memcpy_s(&out_Location, sizeof(out_Location), &GetActorEyesViewPoint_Params.out_Location, sizeof(GetActorEyesViewPoint_Params.out_Location));
	memcpy_s(&out_Rotation, sizeof(out_Rotation), &GetActorEyesViewPoint_Params.out_Rotation, sizeof(GetActorEyesViewPoint_Params.out_Rotation));
};

// Function Engine.Pawn.IsLocallyControlled
// [0x00024501] (FUNC_Final | FUNC_Simulated | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[21400])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class AController*             PawnController                 (CPF_OptionalParm | CPF_Parm)

bool APawn::IsLocallyControlled(class AController* PawnController)
{
	static UFunction* uFnIsLocallyControlled = nullptr;

	if (!uFnIsLocallyControlled)
	{
		uFnIsLocallyControlled = UFunction::FindFunction("Function Engine.Pawn.IsLocallyControlled");
	}

	APawn_execIsLocallyControlled_Params IsLocallyControlled_Params;
	memset(&IsLocallyControlled_Params, 0, sizeof(IsLocallyControlled_Params));
	IsLocallyControlled_Params.PawnController = PawnController;

	uFnIsLocallyControlled->iNative = 0;
	uFnIsLocallyControlled->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnIsLocallyControlled, &IsLocallyControlled_Params, nullptr);
	uFnIsLocallyControlled->FunctionFlags |= 0x400;
	uFnIsLocallyControlled->iNative = 21400;

	return IsLocallyControlled_Params.ReturnValue;
};

// Function Engine.Pawn.IsHumanControlled
// [0x00024501] (FUNC_Final | FUNC_Simulated | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[21390])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class AController*             PawnController                 (CPF_OptionalParm | CPF_Parm)

bool APawn::IsHumanControlled(class AController* PawnController)
{
	static UFunction* uFnIsHumanControlled = nullptr;

	if (!uFnIsHumanControlled)
	{
		uFnIsHumanControlled = UFunction::FindFunction("Function Engine.Pawn.IsHumanControlled");
	}

	APawn_execIsHumanControlled_Params IsHumanControlled_Params;
	memset(&IsHumanControlled_Params, 0, sizeof(IsHumanControlled_Params));
	IsHumanControlled_Params.PawnController = PawnController;

	uFnIsHumanControlled->iNative = 0;
	uFnIsHumanControlled->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnIsHumanControlled, &IsHumanControlled_Params, nullptr);
	uFnIsHumanControlled->FunctionFlags |= 0x400;
	uFnIsHumanControlled->iNative = 21390;

	return IsHumanControlled_Params.ReturnValue;
};

// Function Engine.Pawn.DisplayDebug
// [0x00420102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// class AHUD*                    HUD                            (CPF_Parm)
// float                          out_YL                         (CPF_Parm | CPF_OutParm)
// float                          out_YPos                       (CPF_Parm | CPF_OutParm)

void APawn::DisplayDebug(class AHUD* HUD, float& out_YL, float& out_YPos)
{
	static UFunction* uFnDisplayDebug = nullptr;

	if (!uFnDisplayDebug)
	{
		uFnDisplayDebug = UFunction::FindFunction("Function Engine.Pawn.DisplayDebug");
	}

	APawn_execDisplayDebug_Params DisplayDebug_Params;
	memset(&DisplayDebug_Params, 0, sizeof(DisplayDebug_Params));
	DisplayDebug_Params.HUD = HUD;
	memcpy_s(&DisplayDebug_Params.out_YL, sizeof(DisplayDebug_Params.out_YL), &out_YL, sizeof(out_YL));
	memcpy_s(&DisplayDebug_Params.out_YPos, sizeof(DisplayDebug_Params.out_YPos), &out_YPos, sizeof(out_YPos));

	this->ProcessEvent(uFnDisplayDebug, &DisplayDebug_Params, nullptr);

	memcpy_s(&out_YL, sizeof(out_YL), &DisplayDebug_Params.out_YL, sizeof(DisplayDebug_Params.out_YL));
	memcpy_s(&out_YPos, sizeof(out_YPos), &DisplayDebug_Params.out_YPos, sizeof(DisplayDebug_Params.out_YPos));
};

// Function Engine.Pawn.GetDefaultCameraMode
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FName                    ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class APlayerController*       RequestedBy                    (CPF_Parm)

class FName APawn::GetDefaultCameraMode(class APlayerController* RequestedBy)
{
	static UFunction* uFnGetDefaultCameraMode = nullptr;

	if (!uFnGetDefaultCameraMode)
	{
		uFnGetDefaultCameraMode = UFunction::FindFunction("Function Engine.Pawn.GetDefaultCameraMode");
	}

	APawn_execGetDefaultCameraMode_Params GetDefaultCameraMode_Params;
	memset(&GetDefaultCameraMode_Params, 0, sizeof(GetDefaultCameraMode_Params));
	GetDefaultCameraMode_Params.RequestedBy = RequestedBy;

	this->ProcessEvent(uFnGetDefaultCameraMode, &GetDefaultCameraMode_Params, nullptr);

	return GetDefaultCameraMode_Params.ReturnValue;
};

// Function Engine.Pawn.UnPossessed
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[26955])
// Parameter Info:

void APawn::UnPossessed()
{
	static UFunction* uFnUnPossessed = nullptr;

	if (!uFnUnPossessed)
	{
		uFnUnPossessed = UFunction::FindFunction("Function Engine.Pawn.UnPossessed");
	}

	APawn_execUnPossessed_Params UnPossessed_Params;
	memset(&UnPossessed_Params, 0, sizeof(UnPossessed_Params));

	uFnUnPossessed->iNative = 0;
	uFnUnPossessed->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnUnPossessed, &UnPossessed_Params, nullptr);
	uFnUnPossessed->FunctionFlags |= 0x400;
	uFnUnPossessed->iNative = 26955;
};

// Function Engine.Pawn.UpdateControllerOnPossess
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bVehicleTransition             (CPF_Parm)

void APawn::UpdateControllerOnPossess(bool bVehicleTransition)
{
	static UFunction* uFnUpdateControllerOnPossess = nullptr;

	if (!uFnUpdateControllerOnPossess)
	{
		uFnUpdateControllerOnPossess = UFunction::FindFunction("Function Engine.Pawn.UpdateControllerOnPossess");
	}

	APawn_execUpdateControllerOnPossess_Params UpdateControllerOnPossess_Params;
	memset(&UpdateControllerOnPossess_Params, 0, sizeof(UpdateControllerOnPossess_Params));
	UpdateControllerOnPossess_Params.bVehicleTransition = bVehicleTransition;

	this->ProcessEvent(uFnUpdateControllerOnPossess, &UpdateControllerOnPossess_Params, nullptr);
};

// Function Engine.Pawn.NotifyTeamChanged
// [0x00020100] (FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void APawn::NotifyTeamChanged()
{
	static UFunction* uFnNotifyTeamChanged = nullptr;

	if (!uFnNotifyTeamChanged)
	{
		uFnNotifyTeamChanged = UFunction::FindFunction("Function Engine.Pawn.NotifyTeamChanged");
	}

	APawn_execNotifyTeamChanged_Params NotifyTeamChanged_Params;
	memset(&NotifyTeamChanged_Params, 0, sizeof(NotifyTeamChanged_Params));

	this->ProcessEvent(uFnNotifyTeamChanged, &NotifyTeamChanged_Params, nullptr);
};

// Function Engine.Pawn.GetHumanReadableName
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)

class FString APawn::GetHumanReadableName()
{
	static UFunction* uFnGetHumanReadableName = nullptr;

	if (!uFnGetHumanReadableName)
	{
		uFnGetHumanReadableName = UFunction::FindFunction("Function Engine.Pawn.GetHumanReadableName");
	}

	APawn_execGetHumanReadableName_Params GetHumanReadableName_Params;
	memset(&GetHumanReadableName_Params, 0, sizeof(GetHumanReadableName_Params));

	this->ProcessEvent(uFnGetHumanReadableName, &GetHumanReadableName_Params, nullptr);

	return GetHumanReadableName_Params.ReturnValue;
};

// Function Engine.Pawn.StopFire
// [0x00020100] (FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint8_t                        FireModeNum                    (CPF_Parm)

void APawn::StopFire(uint8_t FireModeNum)
{
	static UFunction* uFnStopFire = nullptr;

	if (!uFnStopFire)
	{
		uFnStopFire = UFunction::FindFunction("Function Engine.Pawn.StopFire");
	}

	APawn_execStopFire_Params StopFire_Params;
	memset(&StopFire_Params, 0, sizeof(StopFire_Params));
	memcpy_s(&StopFire_Params.FireModeNum, sizeof(StopFire_Params.FireModeNum), &FireModeNum, sizeof(FireModeNum));

	this->ProcessEvent(uFnStopFire, &StopFire_Params, nullptr);
};

// Function Engine.Pawn.StartFire
// [0x00020100] (FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint8_t                        FireModeNum                    (CPF_Parm)

void APawn::StartFire(uint8_t FireModeNum)
{
	static UFunction* uFnStartFire = nullptr;

	if (!uFnStartFire)
	{
		uFnStartFire = UFunction::FindFunction("Function Engine.Pawn.StartFire");
	}

	APawn_execStartFire_Params StartFire_Params;
	memset(&StartFire_Params, 0, sizeof(StartFire_Params));
	memcpy_s(&StartFire_Params.FireModeNum, sizeof(StartFire_Params.FireModeNum), &FireModeNum, sizeof(FireModeNum));

	this->ProcessEvent(uFnStartFire, &StartFire_Params, nullptr);
};

// Function Engine.Pawn.StopFiring
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool APawn::StopFiring()
{
	static UFunction* uFnStopFiring = nullptr;

	if (!uFnStopFiring)
	{
		uFnStopFiring = UFunction::FindFunction("Function Engine.Pawn.StopFiring");
	}

	APawn_execStopFiring_Params StopFiring_Params;
	memset(&StopFiring_Params, 0, sizeof(StopFiring_Params));

	this->ProcessEvent(uFnStopFiring, &StopFiring_Params, nullptr);

	return StopFiring_Params.ReturnValue;
};

// Function Engine.Pawn.Reset
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void APawn::Reset()
{
	static UFunction* uFnReset = nullptr;

	if (!uFnReset)
	{
		uFnReset = UFunction::FindFunction("Function Engine.Pawn.Reset");
	}

	APawn_execReset_Params Reset_Params;
	memset(&Reset_Params, 0, sizeof(Reset_Params));

	this->ProcessEvent(uFnReset, &Reset_Params, nullptr);
};

// Function Engine.Pawn.PlayerChangedTeam
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void APawn::PlayerChangedTeam()
{
	static UFunction* uFnPlayerChangedTeam = nullptr;

	if (!uFnPlayerChangedTeam)
	{
		uFnPlayerChangedTeam = UFunction::FindFunction("Function Engine.Pawn.PlayerChangedTeam");
	}

	APawn_execPlayerChangedTeam_Params PlayerChangedTeam_Params;
	memset(&PlayerChangedTeam_Params, 0, sizeof(PlayerChangedTeam_Params));

	this->ProcessEvent(uFnPlayerChangedTeam, &PlayerChangedTeam_Params, nullptr);
};

// Function Engine.Pawn.SetBaseEyeheight
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void APawn::SetBaseEyeheight()
{
	static UFunction* uFnSetBaseEyeheight = nullptr;

	if (!uFnSetBaseEyeheight)
	{
		uFnSetBaseEyeheight = UFunction::FindFunction("Function Engine.Pawn.SetBaseEyeheight");
	}

	APawn_execSetBaseEyeheight_Params SetBaseEyeheight_Params;
	memset(&SetBaseEyeheight_Params, 0, sizeof(SetBaseEyeheight_Params));

	this->ProcessEvent(uFnSetBaseEyeheight, &SetBaseEyeheight_Params, nullptr);
};

// Function Engine.Pawn.SpecialMoveThruEdge
// [0x00024800] (FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// ENavMeshEdgeType               Type                           (CPF_Parm)
// int32_t                        Dir                            (CPF_Parm)
// struct FVector                 MoveStart                      (CPF_Parm)
// struct FVector                 MoveDest                       (CPF_Parm)
// class AActor*                  RelActor                       (CPF_OptionalParm | CPF_Parm)
// int32_t                        RelItem                        (CPF_OptionalParm | CPF_Parm)

bool APawn::eventSpecialMoveThruEdge(ENavMeshEdgeType Type, int32_t Dir, const struct FVector& MoveStart, const struct FVector& MoveDest, class AActor* RelActor, int32_t RelItem)
{
	static UFunction* uFnSpecialMoveThruEdge = nullptr;

	if (!uFnSpecialMoveThruEdge)
	{
		uFnSpecialMoveThruEdge = UFunction::FindFunction("Function Engine.Pawn.SpecialMoveThruEdge");
	}

	APawn_eventSpecialMoveThruEdge_Params SpecialMoveThruEdge_Params;
	memset(&SpecialMoveThruEdge_Params, 0, sizeof(SpecialMoveThruEdge_Params));
	memcpy_s(&SpecialMoveThruEdge_Params.Type, sizeof(SpecialMoveThruEdge_Params.Type), &Type, sizeof(Type));
	memcpy_s(&SpecialMoveThruEdge_Params.Dir, sizeof(SpecialMoveThruEdge_Params.Dir), &Dir, sizeof(Dir));
	memcpy_s(&SpecialMoveThruEdge_Params.MoveStart, sizeof(SpecialMoveThruEdge_Params.MoveStart), &MoveStart, sizeof(MoveStart));
	memcpy_s(&SpecialMoveThruEdge_Params.MoveDest, sizeof(SpecialMoveThruEdge_Params.MoveDest), &MoveDest, sizeof(MoveDest));
	SpecialMoveThruEdge_Params.RelActor = RelActor;
	memcpy_s(&SpecialMoveThruEdge_Params.RelItem, sizeof(SpecialMoveThruEdge_Params.RelItem), &RelItem, sizeof(RelItem));

	this->ProcessEvent(uFnSpecialMoveThruEdge, &SpecialMoveThruEdge_Params, nullptr);

	return SpecialMoveThruEdge_Params.ReturnValue;
};

// Function Engine.Pawn.IsRagdoll
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[21421])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool APawn::IsRagdoll()
{
	static UFunction* uFnIsRagdoll = nullptr;

	if (!uFnIsRagdoll)
	{
		uFnIsRagdoll = UFunction::FindFunction("Function Engine.Pawn.IsRagdoll");
	}

	APawn_execIsRagdoll_Params IsRagdoll_Params;
	memset(&IsRagdoll_Params, 0, sizeof(IsRagdoll_Params));

	uFnIsRagdoll->iNative = 0;
	uFnIsRagdoll->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnIsRagdoll, &IsRagdoll_Params, nullptr);
	uFnIsRagdoll->FunctionFlags |= 0x400;
	uFnIsRagdoll->iNative = 21421;

	return IsRagdoll_Params.ReturnValue;
};

// Function Engine.Pawn.TermRagdoll
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[26558])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool APawn::TermRagdoll()
{
	static UFunction* uFnTermRagdoll = nullptr;

	if (!uFnTermRagdoll)
	{
		uFnTermRagdoll = UFunction::FindFunction("Function Engine.Pawn.TermRagdoll");
	}

	APawn_execTermRagdoll_Params TermRagdoll_Params;
	memset(&TermRagdoll_Params, 0, sizeof(TermRagdoll_Params));

	uFnTermRagdoll->iNative = 0;
	uFnTermRagdoll->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnTermRagdoll, &TermRagdoll_Params, nullptr);
	uFnTermRagdoll->FunctionFlags |= 0x400;
	uFnTermRagdoll->iNative = 26558;

	return TermRagdoll_Params.ReturnValue;
};

// Function Engine.Pawn.InitRagdoll
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[21165])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       _bApplyAnimVelToRBBones        (CPF_Parm)

bool APawn::InitRagdoll(bool _bApplyAnimVelToRBBones)
{
	static UFunction* uFnInitRagdoll = nullptr;

	if (!uFnInitRagdoll)
	{
		uFnInitRagdoll = UFunction::FindFunction("Function Engine.Pawn.InitRagdoll");
	}

	APawn_execInitRagdoll_Params InitRagdoll_Params;
	memset(&InitRagdoll_Params, 0, sizeof(InitRagdoll_Params));
	InitRagdoll_Params._bApplyAnimVelToRBBones = _bApplyAnimVelToRBBones;

	uFnInitRagdoll->iNative = 0;
	uFnInitRagdoll->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnInitRagdoll, &InitRagdoll_Params, nullptr);
	uFnInitRagdoll->FunctionFlags |= 0x400;
	uFnInitRagdoll->iNative = 21165;

	return InitRagdoll_Params.ReturnValue;
};

// Function Engine.Pawn.GetBoundingCylinder
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20520])
// Parameter Info:
// float                          CollisionRadius                (CPF_Parm | CPF_OutParm)
// float                          CollisionHeight                (CPF_Parm | CPF_OutParm)

void APawn::GetBoundingCylinder(float& CollisionRadius, float& CollisionHeight)
{
	static UFunction* uFnGetBoundingCylinder = nullptr;

	if (!uFnGetBoundingCylinder)
	{
		uFnGetBoundingCylinder = UFunction::FindFunction("Function Engine.Pawn.GetBoundingCylinder");
	}

	APawn_execGetBoundingCylinder_Params GetBoundingCylinder_Params;
	memset(&GetBoundingCylinder_Params, 0, sizeof(GetBoundingCylinder_Params));
	memcpy_s(&GetBoundingCylinder_Params.CollisionRadius, sizeof(GetBoundingCylinder_Params.CollisionRadius), &CollisionRadius, sizeof(CollisionRadius));
	memcpy_s(&GetBoundingCylinder_Params.CollisionHeight, sizeof(GetBoundingCylinder_Params.CollisionHeight), &CollisionHeight, sizeof(CollisionHeight));

	uFnGetBoundingCylinder->iNative = 0;
	uFnGetBoundingCylinder->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetBoundingCylinder, &GetBoundingCylinder_Params, nullptr);
	uFnGetBoundingCylinder->FunctionFlags |= 0x400;
	uFnGetBoundingCylinder->iNative = 20520;

	memcpy_s(&CollisionRadius, sizeof(CollisionRadius), &GetBoundingCylinder_Params.CollisionRadius, sizeof(GetBoundingCylinder_Params.CollisionRadius));
	memcpy_s(&CollisionHeight, sizeof(CollisionHeight), &GetBoundingCylinder_Params.CollisionHeight, sizeof(GetBoundingCylinder_Params.CollisionHeight));
};

// Function Engine.Pawn.NotifyPathChanged
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void APawn::eventNotifyPathChanged()
{
	static UFunction* uFnNotifyPathChanged = nullptr;

	if (!uFnNotifyPathChanged)
	{
		uFnNotifyPathChanged = UFunction::FindFunction("Function Engine.Pawn.NotifyPathChanged");
	}

	APawn_eventNotifyPathChanged_Params NotifyPathChanged_Params;
	memset(&NotifyPathChanged_Params, 0, sizeof(NotifyPathChanged_Params));

	this->ProcessEvent(uFnNotifyPathChanged, &NotifyPathChanged_Params, nullptr);
};

// Function Engine.Pawn.InitNavigationHandle
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[21162])
// Parameter Info:

void APawn::InitNavigationHandle()
{
	static UFunction* uFnInitNavigationHandle = nullptr;

	if (!uFnInitNavigationHandle)
	{
		uFnInitNavigationHandle = UFunction::FindFunction("Function Engine.Pawn.InitNavigationHandle");
	}

	APawn_execInitNavigationHandle_Params InitNavigationHandle_Params;
	memset(&InitNavigationHandle_Params, 0, sizeof(InitNavigationHandle_Params));

	uFnInitNavigationHandle->iNative = 0;
	uFnInitNavigationHandle->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnInitNavigationHandle, &InitNavigationHandle_Params, nullptr);
	uFnInitNavigationHandle->FunctionFlags |= 0x400;
	uFnInitNavigationHandle->iNative = 21162;
};

// Function Engine.Pawn.GetNavigationHandle
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20643])
// Parameter Info:
// class UNavigationHandle*       ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class UNavigationHandle* APawn::GetNavigationHandle()
{
	static UFunction* uFnGetNavigationHandle = nullptr;

	if (!uFnGetNavigationHandle)
	{
		uFnGetNavigationHandle = UFunction::FindFunction("Function Engine.Pawn.GetNavigationHandle");
	}

	APawn_execGetNavigationHandle_Params GetNavigationHandle_Params;
	memset(&GetNavigationHandle_Params, 0, sizeof(GetNavigationHandle_Params));

	uFnGetNavigationHandle->iNative = 0;
	uFnGetNavigationHandle->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetNavigationHandle, &GetNavigationHandle_Params, nullptr);
	uFnGetNavigationHandle->FunctionFlags |= 0x400;
	uFnGetNavigationHandle->iNative = 20643;

	return GetNavigationHandle_Params.ReturnValue;
};

// Function Engine.Pawn.ReachedDesiredRotation
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[24935])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool APawn::ReachedDesiredRotation()
{
	static UFunction* uFnReachedDesiredRotation = nullptr;

	if (!uFnReachedDesiredRotation)
	{
		uFnReachedDesiredRotation = UFunction::FindFunction("Function Engine.Pawn.ReachedDesiredRotation");
	}

	APawn_execReachedDesiredRotation_Params ReachedDesiredRotation_Params;
	memset(&ReachedDesiredRotation_Params, 0, sizeof(ReachedDesiredRotation_Params));

	uFnReachedDesiredRotation->iNative = 0;
	uFnReachedDesiredRotation->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnReachedDesiredRotation, &ReachedDesiredRotation_Params, nullptr);
	uFnReachedDesiredRotation->FunctionFlags |= 0x400;
	uFnReachedDesiredRotation->iNative = 24935;

	return ReachedDesiredRotation_Params.ReturnValue;
};

// Function Engine.Pawn.SetPushesRigidBodies
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25751])
// Parameter Info:
// uint32_t                       NewPush                        (CPF_Parm)

void APawn::SetPushesRigidBodies(bool NewPush)
{
	static UFunction* uFnSetPushesRigidBodies = nullptr;

	if (!uFnSetPushesRigidBodies)
	{
		uFnSetPushesRigidBodies = UFunction::FindFunction("Function Engine.Pawn.SetPushesRigidBodies");
	}

	APawn_execSetPushesRigidBodies_Params SetPushesRigidBodies_Params;
	memset(&SetPushesRigidBodies_Params, 0, sizeof(SetPushesRigidBodies_Params));
	SetPushesRigidBodies_Params.NewPush = NewPush;

	uFnSetPushesRigidBodies->iNative = 0;
	uFnSetPushesRigidBodies->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetPushesRigidBodies, &SetPushesRigidBodies_Params, nullptr);
	uFnSetPushesRigidBodies->FunctionFlags |= 0x400;
	uFnSetPushesRigidBodies->iNative = 25751;
};

// Function Engine.Pawn.ForceCrouch
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20257])
// Parameter Info:

void APawn::ForceCrouch()
{
	static UFunction* uFnForceCrouch = nullptr;

	if (!uFnForceCrouch)
	{
		uFnForceCrouch = UFunction::FindFunction("Function Engine.Pawn.ForceCrouch");
	}

	APawn_execForceCrouch_Params ForceCrouch_Params;
	memset(&ForceCrouch_Params, 0, sizeof(ForceCrouch_Params));

	uFnForceCrouch->iNative = 0;
	uFnForceCrouch->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnForceCrouch, &ForceCrouch_Params, nullptr);
	uFnForceCrouch->FunctionFlags |= 0x400;
	uFnForceCrouch->iNative = 20257;
};

// Function Engine.Pawn.ReachedPoint
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[24936])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FVector                 Point                          (CPF_Parm)
// class AActor*                  NewAnchor                      (CPF_Parm)

bool APawn::ReachedPoint(const struct FVector& Point, class AActor* NewAnchor)
{
	static UFunction* uFnReachedPoint = nullptr;

	if (!uFnReachedPoint)
	{
		uFnReachedPoint = UFunction::FindFunction("Function Engine.Pawn.ReachedPoint");
	}

	APawn_execReachedPoint_Params ReachedPoint_Params;
	memset(&ReachedPoint_Params, 0, sizeof(ReachedPoint_Params));
	memcpy_s(&ReachedPoint_Params.Point, sizeof(ReachedPoint_Params.Point), &Point, sizeof(Point));
	ReachedPoint_Params.NewAnchor = NewAnchor;

	uFnReachedPoint->iNative = 0;
	uFnReachedPoint->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnReachedPoint, &ReachedPoint_Params, nullptr);
	uFnReachedPoint->FunctionFlags |= 0x400;
	uFnReachedPoint->iNative = 24936;

	return ReachedPoint_Params.ReturnValue;
};

// Function Engine.Pawn.GetBestAnchor
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20504])
// Parameter Info:
// class ANavigationPoint*        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class AActor*                  TestActor                      (CPF_Parm)
// struct FVector                 TestLocation                   (CPF_Parm)
// uint32_t                       bStartPoint                    (CPF_Parm)
// uint32_t                       bOnlyCheckVisible              (CPF_Parm)
// float                          out_Dist                       (CPF_Parm | CPF_OutParm)

class ANavigationPoint* APawn::GetBestAnchor(class AActor* TestActor, const struct FVector& TestLocation, bool bStartPoint, bool bOnlyCheckVisible, float& out_Dist)
{
	static UFunction* uFnGetBestAnchor = nullptr;

	if (!uFnGetBestAnchor)
	{
		uFnGetBestAnchor = UFunction::FindFunction("Function Engine.Pawn.GetBestAnchor");
	}

	APawn_execGetBestAnchor_Params GetBestAnchor_Params;
	memset(&GetBestAnchor_Params, 0, sizeof(GetBestAnchor_Params));
	GetBestAnchor_Params.TestActor = TestActor;
	memcpy_s(&GetBestAnchor_Params.TestLocation, sizeof(GetBestAnchor_Params.TestLocation), &TestLocation, sizeof(TestLocation));
	GetBestAnchor_Params.bStartPoint = bStartPoint;
	GetBestAnchor_Params.bOnlyCheckVisible = bOnlyCheckVisible;
	memcpy_s(&GetBestAnchor_Params.out_Dist, sizeof(GetBestAnchor_Params.out_Dist), &out_Dist, sizeof(out_Dist));

	uFnGetBestAnchor->iNative = 0;
	uFnGetBestAnchor->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetBestAnchor, &GetBestAnchor_Params, nullptr);
	uFnGetBestAnchor->FunctionFlags |= 0x400;
	uFnGetBestAnchor->iNative = 20504;

	memcpy_s(&out_Dist, sizeof(out_Dist), &GetBestAnchor_Params.out_Dist, sizeof(GetBestAnchor_Params.out_Dist));

	return GetBestAnchor_Params.ReturnValue;
};

// Function Engine.Pawn.SetAnchor
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25577])
// Parameter Info:
// class ANavigationPoint*        NewAnchor                      (CPF_Parm)

void APawn::SetAnchor(class ANavigationPoint* NewAnchor)
{
	static UFunction* uFnSetAnchor = nullptr;

	if (!uFnSetAnchor)
	{
		uFnSetAnchor = UFunction::FindFunction("Function Engine.Pawn.SetAnchor");
	}

	APawn_execSetAnchor_Params SetAnchor_Params;
	memset(&SetAnchor_Params, 0, sizeof(SetAnchor_Params));
	SetAnchor_Params.NewAnchor = NewAnchor;

	uFnSetAnchor->iNative = 0;
	uFnSetAnchor->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetAnchor, &SetAnchor_Params, nullptr);
	uFnSetAnchor->FunctionFlags |= 0x400;
	uFnSetAnchor->iNative = 25577;
};

// Function Engine.Pawn.SetRemoteViewPitch
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25768])
// Parameter Info:
// int32_t                        NewRemoteViewPitch             (CPF_Parm)

void APawn::SetRemoteViewPitch(int32_t NewRemoteViewPitch)
{
	static UFunction* uFnSetRemoteViewPitch = nullptr;

	if (!uFnSetRemoteViewPitch)
	{
		uFnSetRemoteViewPitch = UFunction::FindFunction("Function Engine.Pawn.SetRemoteViewPitch");
	}

	APawn_execSetRemoteViewPitch_Params SetRemoteViewPitch_Params;
	memset(&SetRemoteViewPitch_Params, 0, sizeof(SetRemoteViewPitch_Params));
	memcpy_s(&SetRemoteViewPitch_Params.NewRemoteViewPitch, sizeof(SetRemoteViewPitch_Params.NewRemoteViewPitch), &NewRemoteViewPitch, sizeof(NewRemoteViewPitch));

	uFnSetRemoteViewPitch->iNative = 0;
	uFnSetRemoteViewPitch->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetRemoteViewPitch, &SetRemoteViewPitch_Params, nullptr);
	uFnSetRemoteViewPitch->FunctionFlags |= 0x400;
	uFnSetRemoteViewPitch->iNative = 25768;
};

// Function Engine.Pawn.IsInvisible
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[21396])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool APawn::IsInvisible()
{
	static UFunction* uFnIsInvisible = nullptr;

	if (!uFnIsInvisible)
	{
		uFnIsInvisible = UFunction::FindFunction("Function Engine.Pawn.IsInvisible");
	}

	APawn_execIsInvisible_Params IsInvisible_Params;
	memset(&IsInvisible_Params, 0, sizeof(IsInvisible_Params));

	uFnIsInvisible->iNative = 0;
	uFnIsInvisible->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnIsInvisible, &IsInvisible_Params, nullptr);
	uFnIsInvisible->FunctionFlags |= 0x400;
	uFnIsInvisible->iNative = 21396;

	return IsInvisible_Params.ReturnValue;
};

// Function Engine.Pawn.IsValidTargetFor
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[21432])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class AController*             C                              (CPF_Const | CPF_Parm)

bool APawn::IsValidTargetFor(class AController* C)
{
	static UFunction* uFnIsValidTargetFor = nullptr;

	if (!uFnIsValidTargetFor)
	{
		uFnIsValidTargetFor = UFunction::FindFunction("Function Engine.Pawn.IsValidTargetFor");
	}

	APawn_execIsValidTargetFor_Params IsValidTargetFor_Params;
	memset(&IsValidTargetFor_Params, 0, sizeof(IsValidTargetFor_Params));
	IsValidTargetFor_Params.C = C;

	uFnIsValidTargetFor->iNative = 0;
	uFnIsValidTargetFor->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnIsValidTargetFor, &IsValidTargetFor_Params, nullptr);
	uFnIsValidTargetFor->FunctionFlags |= 0x400;
	uFnIsValidTargetFor->iNative = 21432;

	return IsValidTargetFor_Params.ReturnValue;
};

// Function Engine.Pawn.GetFallDuration
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20576])
// Parameter Info:
// float                          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

float APawn::GetFallDuration()
{
	static UFunction* uFnGetFallDuration = nullptr;

	if (!uFnGetFallDuration)
	{
		uFnGetFallDuration = UFunction::FindFunction("Function Engine.Pawn.GetFallDuration");
	}

	APawn_execGetFallDuration_Params GetFallDuration_Params;
	memset(&GetFallDuration_Params, 0, sizeof(GetFallDuration_Params));

	uFnGetFallDuration->iNative = 0;
	uFnGetFallDuration->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetFallDuration, &GetFallDuration_Params, nullptr);
	uFnGetFallDuration->FunctionFlags |= 0x400;
	uFnGetFallDuration->iNative = 20576;

	return GetFallDuration_Params.ReturnValue;
};

// Function Engine.Pawn.SuggestJumpVelocity
// [0x00424400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[26390])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FVector                 Destination                    (CPF_Parm)
// struct FVector                 Start                          (CPF_Parm)
// uint32_t                       bRequireFallLanding            (CPF_OptionalParm | CPF_Parm)
// struct FVector                 JumpVelocity                   (CPF_Parm | CPF_OutParm)

bool APawn::SuggestJumpVelocity(const struct FVector& Destination, const struct FVector& Start, bool bRequireFallLanding, struct FVector& JumpVelocity)
{
	static UFunction* uFnSuggestJumpVelocity = nullptr;

	if (!uFnSuggestJumpVelocity)
	{
		uFnSuggestJumpVelocity = UFunction::FindFunction("Function Engine.Pawn.SuggestJumpVelocity");
	}

	APawn_execSuggestJumpVelocity_Params SuggestJumpVelocity_Params;
	memset(&SuggestJumpVelocity_Params, 0, sizeof(SuggestJumpVelocity_Params));
	memcpy_s(&SuggestJumpVelocity_Params.Destination, sizeof(SuggestJumpVelocity_Params.Destination), &Destination, sizeof(Destination));
	memcpy_s(&SuggestJumpVelocity_Params.Start, sizeof(SuggestJumpVelocity_Params.Start), &Start, sizeof(Start));
	SuggestJumpVelocity_Params.bRequireFallLanding = bRequireFallLanding;
	memcpy_s(&SuggestJumpVelocity_Params.JumpVelocity, sizeof(SuggestJumpVelocity_Params.JumpVelocity), &JumpVelocity, sizeof(JumpVelocity));

	uFnSuggestJumpVelocity->iNative = 0;
	uFnSuggestJumpVelocity->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSuggestJumpVelocity, &SuggestJumpVelocity_Params, nullptr);
	uFnSuggestJumpVelocity->FunctionFlags |= 0x400;
	uFnSuggestJumpVelocity->iNative = 26390;

	memcpy_s(&JumpVelocity, sizeof(JumpVelocity), &SuggestJumpVelocity_Params.JumpVelocity, sizeof(SuggestJumpVelocity_Params.JumpVelocity));

	return SuggestJumpVelocity_Params.ReturnValue;
};

// Function Engine.Pawn.ValidAnchor
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[27053])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool APawn::ValidAnchor()
{
	static UFunction* uFnValidAnchor = nullptr;

	if (!uFnValidAnchor)
	{
		uFnValidAnchor = UFunction::FindFunction("Function Engine.Pawn.ValidAnchor");
	}

	APawn_execValidAnchor_Params ValidAnchor_Params;
	memset(&ValidAnchor_Params, 0, sizeof(ValidAnchor_Params));

	uFnValidAnchor->iNative = 0;
	uFnValidAnchor->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnValidAnchor, &ValidAnchor_Params, nullptr);
	uFnValidAnchor->FunctionFlags |= 0x400;
	uFnValidAnchor->iNative = 27053;

	return ValidAnchor_Params.ReturnValue;
};

// Function Engine.Pawn.AdjustDestination
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[15388])
// Parameter Info:
// struct FVector                 ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class AActor*                  GoalActor                      (CPF_Parm)
// struct FVector                 Dest                           (CPF_OptionalParm | CPF_Parm)

struct FVector APawn::AdjustDestination(class AActor* GoalActor, const struct FVector& Dest)
{
	static UFunction* uFnAdjustDestination = nullptr;

	if (!uFnAdjustDestination)
	{
		uFnAdjustDestination = UFunction::FindFunction("Function Engine.Pawn.AdjustDestination");
	}

	APawn_execAdjustDestination_Params AdjustDestination_Params;
	memset(&AdjustDestination_Params, 0, sizeof(AdjustDestination_Params));
	AdjustDestination_Params.GoalActor = GoalActor;
	memcpy_s(&AdjustDestination_Params.Dest, sizeof(AdjustDestination_Params.Dest), &Dest, sizeof(Dest));

	uFnAdjustDestination->iNative = 0;
	uFnAdjustDestination->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnAdjustDestination, &AdjustDestination_Params, nullptr);
	uFnAdjustDestination->FunctionFlags |= 0x400;
	uFnAdjustDestination->iNative = 15388;

	return AdjustDestination_Params.ReturnValue;
};

// Function Engine.Pawn.IsAliveAndWell
// [0x00020501] (FUNC_Final | FUNC_Simulated | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[21358])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool APawn::IsAliveAndWell()
{
	static UFunction* uFnIsAliveAndWell = nullptr;

	if (!uFnIsAliveAndWell)
	{
		uFnIsAliveAndWell = UFunction::FindFunction("Function Engine.Pawn.IsAliveAndWell");
	}

	APawn_execIsAliveAndWell_Params IsAliveAndWell_Params;
	memset(&IsAliveAndWell_Params, 0, sizeof(IsAliveAndWell_Params));

	uFnIsAliveAndWell->iNative = 0;
	uFnIsAliveAndWell->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnIsAliveAndWell, &IsAliveAndWell_Params, nullptr);
	uFnIsAliveAndWell->FunctionFlags |= 0x400;
	uFnIsAliveAndWell->iNative = 21358;

	return IsAliveAndWell_Params.ReturnValue;
};

// Function Engine.Pawn.ReplicatedEvent
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FName                    VarName                        (CPF_Parm)

void APawn::eventReplicatedEvent(const class FName& VarName)
{
	static UFunction* uFnReplicatedEvent = nullptr;

	if (!uFnReplicatedEvent)
	{
		uFnReplicatedEvent = UFunction::FindFunction("Function Engine.Pawn.ReplicatedEvent");
	}

	APawn_eventReplicatedEvent_Params ReplicatedEvent_Params;
	memset(&ReplicatedEvent_Params, 0, sizeof(ReplicatedEvent_Params));
	memcpy_s(&ReplicatedEvent_Params.VarName, sizeof(ReplicatedEvent_Params.VarName), &VarName, sizeof(VarName));

	this->ProcessEvent(uFnReplicatedEvent, &ReplicatedEvent_Params, nullptr);
};

// Function Engine.Pawn.GetActorFaceFXAsset
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UFaceFXAsset*            ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class UFaceFXAsset* APawn::eventGetActorFaceFXAsset()
{
	static UFunction* uFnGetActorFaceFXAsset = nullptr;

	if (!uFnGetActorFaceFXAsset)
	{
		uFnGetActorFaceFXAsset = UFunction::FindFunction("Function Engine.Pawn.GetActorFaceFXAsset");
	}

	APawn_eventGetActorFaceFXAsset_Params GetActorFaceFXAsset_Params;
	memset(&GetActorFaceFXAsset_Params, 0, sizeof(GetActorFaceFXAsset_Params));

	this->ProcessEvent(uFnGetActorFaceFXAsset, &GetActorFaceFXAsset_Params, nullptr);

	return GetActorFaceFXAsset_Params.ReturnValue;
};

// Function Engine.Pawn.OnPlayFaceFXAnim
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_PlayFaceFXAnim*  inAction                       (CPF_Parm)

void APawn::OnPlayFaceFXAnim(class USeqAct_PlayFaceFXAnim* inAction)
{
	static UFunction* uFnOnPlayFaceFXAnim = nullptr;

	if (!uFnOnPlayFaceFXAnim)
	{
		uFnOnPlayFaceFXAnim = UFunction::FindFunction("Function Engine.Pawn.OnPlayFaceFXAnim");
	}

	APawn_execOnPlayFaceFXAnim_Params OnPlayFaceFXAnim_Params;
	memset(&OnPlayFaceFXAnim_Params, 0, sizeof(OnPlayFaceFXAnim_Params));
	OnPlayFaceFXAnim_Params.inAction = inAction;

	this->ProcessEvent(uFnOnPlayFaceFXAnim, &OnPlayFaceFXAnim_Params, nullptr);
};

// Function Engine.Pawn.CanActorPlayFaceFXAnim
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool APawn::CanActorPlayFaceFXAnim()
{
	static UFunction* uFnCanActorPlayFaceFXAnim = nullptr;

	if (!uFnCanActorPlayFaceFXAnim)
	{
		uFnCanActorPlayFaceFXAnim = UFunction::FindFunction("Function Engine.Pawn.CanActorPlayFaceFXAnim");
	}

	APawn_execCanActorPlayFaceFXAnim_Params CanActorPlayFaceFXAnim_Params;
	memset(&CanActorPlayFaceFXAnim_Params, 0, sizeof(CanActorPlayFaceFXAnim_Params));

	this->ProcessEvent(uFnCanActorPlayFaceFXAnim, &CanActorPlayFaceFXAnim_Params, nullptr);

	return CanActorPlayFaceFXAnim_Params.ReturnValue;
};

// Function Engine.Pawn.IsActorPlayingFaceFXAnim
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool APawn::IsActorPlayingFaceFXAnim()
{
	static UFunction* uFnIsActorPlayingFaceFXAnim = nullptr;

	if (!uFnIsActorPlayingFaceFXAnim)
	{
		uFnIsActorPlayingFaceFXAnim = UFunction::FindFunction("Function Engine.Pawn.IsActorPlayingFaceFXAnim");
	}

	APawn_execIsActorPlayingFaceFXAnim_Params IsActorPlayingFaceFXAnim_Params;
	memset(&IsActorPlayingFaceFXAnim_Params, 0, sizeof(IsActorPlayingFaceFXAnim_Params));

	this->ProcessEvent(uFnIsActorPlayingFaceFXAnim, &IsActorPlayingFaceFXAnim_Params, nullptr);

	return IsActorPlayingFaceFXAnim_Params.ReturnValue;
};

// Function Engine.Pawn.UpdateAnimSetList
// [0x00020501] (FUNC_Final | FUNC_Simulated | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[26974])
// Parameter Info:

void APawn::UpdateAnimSetList()
{
	static UFunction* uFnUpdateAnimSetList = nullptr;

	if (!uFnUpdateAnimSetList)
	{
		uFnUpdateAnimSetList = UFunction::FindFunction("Function Engine.Pawn.UpdateAnimSetList");
	}

	APawn_execUpdateAnimSetList_Params UpdateAnimSetList_Params;
	memset(&UpdateAnimSetList_Params, 0, sizeof(UpdateAnimSetList_Params));

	uFnUpdateAnimSetList->iNative = 0;
	uFnUpdateAnimSetList->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnUpdateAnimSetList, &UpdateAnimSetList_Params, nullptr);
	uFnUpdateAnimSetList->FunctionFlags |= 0x400;
	uFnUpdateAnimSetList->iNative = 26974;
};

// Function Engine.Pawn.IsDesiredRotationLocked
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[21374])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool APawn::IsDesiredRotationLocked()
{
	static UFunction* uFnIsDesiredRotationLocked = nullptr;

	if (!uFnIsDesiredRotationLocked)
	{
		uFnIsDesiredRotationLocked = UFunction::FindFunction("Function Engine.Pawn.IsDesiredRotationLocked");
	}

	APawn_execIsDesiredRotationLocked_Params IsDesiredRotationLocked_Params;
	memset(&IsDesiredRotationLocked_Params, 0, sizeof(IsDesiredRotationLocked_Params));

	uFnIsDesiredRotationLocked->iNative = 0;
	uFnIsDesiredRotationLocked->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnIsDesiredRotationLocked, &IsDesiredRotationLocked_Params, nullptr);
	uFnIsDesiredRotationLocked->FunctionFlags |= 0x400;
	uFnIsDesiredRotationLocked->iNative = 21374;

	return IsDesiredRotationLocked_Params.ReturnValue;
};

// Function Engine.Pawn.IsDesiredRotationInUse
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[21373])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool APawn::IsDesiredRotationInUse()
{
	static UFunction* uFnIsDesiredRotationInUse = nullptr;

	if (!uFnIsDesiredRotationInUse)
	{
		uFnIsDesiredRotationInUse = UFunction::FindFunction("Function Engine.Pawn.IsDesiredRotationInUse");
	}

	APawn_execIsDesiredRotationInUse_Params IsDesiredRotationInUse_Params;
	memset(&IsDesiredRotationInUse_Params, 0, sizeof(IsDesiredRotationInUse_Params));

	uFnIsDesiredRotationInUse->iNative = 0;
	uFnIsDesiredRotationInUse->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnIsDesiredRotationInUse, &IsDesiredRotationInUse_Params, nullptr);
	uFnIsDesiredRotationInUse->FunctionFlags |= 0x400;
	uFnIsDesiredRotationInUse->iNative = 21373;

	return IsDesiredRotationInUse_Params.ReturnValue;
};

// Function Engine.Pawn.CheckDesiredRotation
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[18054])
// Parameter Info:

void APawn::CheckDesiredRotation()
{
	static UFunction* uFnCheckDesiredRotation = nullptr;

	if (!uFnCheckDesiredRotation)
	{
		uFnCheckDesiredRotation = UFunction::FindFunction("Function Engine.Pawn.CheckDesiredRotation");
	}

	APawn_execCheckDesiredRotation_Params CheckDesiredRotation_Params;
	memset(&CheckDesiredRotation_Params, 0, sizeof(CheckDesiredRotation_Params));

	uFnCheckDesiredRotation->iNative = 0;
	uFnCheckDesiredRotation->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnCheckDesiredRotation, &CheckDesiredRotation_Params, nullptr);
	uFnCheckDesiredRotation->FunctionFlags |= 0x400;
	uFnCheckDesiredRotation->iNative = 18054;
};

// Function Engine.Pawn.ResetDesiredRotation
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25149])
// Parameter Info:

void APawn::ResetDesiredRotation()
{
	static UFunction* uFnResetDesiredRotation = nullptr;

	if (!uFnResetDesiredRotation)
	{
		uFnResetDesiredRotation = UFunction::FindFunction("Function Engine.Pawn.ResetDesiredRotation");
	}

	APawn_execResetDesiredRotation_Params ResetDesiredRotation_Params;
	memset(&ResetDesiredRotation_Params, 0, sizeof(ResetDesiredRotation_Params));

	uFnResetDesiredRotation->iNative = 0;
	uFnResetDesiredRotation->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnResetDesiredRotation, &ResetDesiredRotation_Params, nullptr);
	uFnResetDesiredRotation->FunctionFlags |= 0x400;
	uFnResetDesiredRotation->iNative = 25149;
};

// Function Engine.Pawn.LockDesiredRotation
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[21798])
// Parameter Info:
// uint32_t                       Lock                           (CPF_Parm)
// uint32_t                       InUnlockWhenReached            (CPF_OptionalParm | CPF_Parm)

void APawn::LockDesiredRotation(bool Lock, bool InUnlockWhenReached)
{
	static UFunction* uFnLockDesiredRotation = nullptr;

	if (!uFnLockDesiredRotation)
	{
		uFnLockDesiredRotation = UFunction::FindFunction("Function Engine.Pawn.LockDesiredRotation");
	}

	APawn_execLockDesiredRotation_Params LockDesiredRotation_Params;
	memset(&LockDesiredRotation_Params, 0, sizeof(LockDesiredRotation_Params));
	LockDesiredRotation_Params.Lock = Lock;
	LockDesiredRotation_Params.InUnlockWhenReached = InUnlockWhenReached;

	uFnLockDesiredRotation->iNative = 0;
	uFnLockDesiredRotation->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnLockDesiredRotation, &LockDesiredRotation_Params, nullptr);
	uFnLockDesiredRotation->FunctionFlags |= 0x400;
	uFnLockDesiredRotation->iNative = 21798;
};

// Function Engine.Pawn.SetDesiredRotation
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[25640])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FRotator                TargetDesiredRotation          (CPF_Parm)
// uint32_t                       InLockDesiredRotation          (CPF_OptionalParm | CPF_Parm)
// uint32_t                       InUnlockWhenReached            (CPF_OptionalParm | CPF_Parm)
// float                          InterpolationTime              (CPF_OptionalParm | CPF_Parm)
// uint32_t                       bResetRotationRate             (CPF_OptionalParm | CPF_Parm)

bool APawn::SetDesiredRotation(const struct FRotator& TargetDesiredRotation, bool InLockDesiredRotation, bool InUnlockWhenReached, float InterpolationTime, bool bResetRotationRate)
{
	static UFunction* uFnSetDesiredRotation = nullptr;

	if (!uFnSetDesiredRotation)
	{
		uFnSetDesiredRotation = UFunction::FindFunction("Function Engine.Pawn.SetDesiredRotation");
	}

	APawn_execSetDesiredRotation_Params SetDesiredRotation_Params;
	memset(&SetDesiredRotation_Params, 0, sizeof(SetDesiredRotation_Params));
	memcpy_s(&SetDesiredRotation_Params.TargetDesiredRotation, sizeof(SetDesiredRotation_Params.TargetDesiredRotation), &TargetDesiredRotation, sizeof(TargetDesiredRotation));
	SetDesiredRotation_Params.InLockDesiredRotation = InLockDesiredRotation;
	SetDesiredRotation_Params.InUnlockWhenReached = InUnlockWhenReached;
	memcpy_s(&SetDesiredRotation_Params.InterpolationTime, sizeof(SetDesiredRotation_Params.InterpolationTime), &InterpolationTime, sizeof(InterpolationTime));
	SetDesiredRotation_Params.bResetRotationRate = bResetRotationRate;

	uFnSetDesiredRotation->iNative = 0;
	uFnSetDesiredRotation->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetDesiredRotation, &SetDesiredRotation_Params, nullptr);
	uFnSetDesiredRotation->FunctionFlags |= 0x400;
	uFnSetDesiredRotation->iNative = 25640;

	return SetDesiredRotation_Params.ReturnValue;
};

// Function Engine.Scout.PreBeginPlay
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AScout::eventPreBeginPlay()
{
	static UFunction* uFnPreBeginPlay = nullptr;

	if (!uFnPreBeginPlay)
	{
		uFnPreBeginPlay = UFunction::FindFunction("Function Engine.Scout.PreBeginPlay");
	}

	AScout_eventPreBeginPlay_Params PreBeginPlay_Params;
	memset(&PreBeginPlay_Params, 0, sizeof(PreBeginPlay_Params));

	this->ProcessEvent(uFnPreBeginPlay, &PreBeginPlay_Params, nullptr);
};

// Function Engine.Light.OnToggle
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_Toggle*          Action                         (CPF_Parm)

void ALight::OnToggle(class USeqAct_Toggle* Action)
{
	static UFunction* uFnOnToggle = nullptr;

	if (!uFnOnToggle)
	{
		uFnOnToggle = UFunction::FindFunction("Function Engine.Light.OnToggle");
	}

	ALight_execOnToggle_Params OnToggle_Params;
	memset(&OnToggle_Params, 0, sizeof(OnToggle_Params));
	OnToggle_Params.Action = Action;

	this->ProcessEvent(uFnOnToggle, &OnToggle_Params, nullptr);
};

// Function Engine.Light.ReplicatedEvent
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FName                    VarName                        (CPF_Parm)

void ALight::eventReplicatedEvent(const class FName& VarName)
{
	static UFunction* uFnReplicatedEvent = nullptr;

	if (!uFnReplicatedEvent)
	{
		uFnReplicatedEvent = UFunction::FindFunction("Function Engine.Light.ReplicatedEvent");
	}

	ALight_eventReplicatedEvent_Params ReplicatedEvent_Params;
	memset(&ReplicatedEvent_Params, 0, sizeof(ReplicatedEvent_Params));
	memcpy_s(&ReplicatedEvent_Params.VarName, sizeof(ReplicatedEvent_Params.VarName), &VarName, sizeof(VarName));

	this->ProcessEvent(uFnReplicatedEvent, &ReplicatedEvent_Params, nullptr);
};

// Function Engine.PointLightToggleable.ApplyCheckpointRecord
// [0x00420002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// struct APointLightToggleable_FCheckpointRecord Record                         (CPF_Const | CPF_Parm | CPF_OutParm)

void APointLightToggleable::ApplyCheckpointRecord(struct APointLightToggleable_FCheckpointRecord& Record)
{
	static UFunction* uFnApplyCheckpointRecord = nullptr;

	if (!uFnApplyCheckpointRecord)
	{
		uFnApplyCheckpointRecord = UFunction::FindFunction("Function Engine.PointLightToggleable.ApplyCheckpointRecord");
	}

	APointLightToggleable_execApplyCheckpointRecord_Params ApplyCheckpointRecord_Params;
	memset(&ApplyCheckpointRecord_Params, 0, sizeof(ApplyCheckpointRecord_Params));
	memcpy_s(&ApplyCheckpointRecord_Params.Record, sizeof(ApplyCheckpointRecord_Params.Record), &Record, sizeof(Record));

	this->ProcessEvent(uFnApplyCheckpointRecord, &ApplyCheckpointRecord_Params, nullptr);

	memcpy_s(&Record, sizeof(Record), &ApplyCheckpointRecord_Params.Record, sizeof(ApplyCheckpointRecord_Params.Record));
};

// Function Engine.PointLightToggleable.CreateCheckpointRecord
// [0x00420002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// struct APointLightToggleable_FCheckpointRecord Record                         (CPF_Parm | CPF_OutParm)

void APointLightToggleable::CreateCheckpointRecord(struct APointLightToggleable_FCheckpointRecord& Record)
{
	static UFunction* uFnCreateCheckpointRecord = nullptr;

	if (!uFnCreateCheckpointRecord)
	{
		uFnCreateCheckpointRecord = UFunction::FindFunction("Function Engine.PointLightToggleable.CreateCheckpointRecord");
	}

	APointLightToggleable_execCreateCheckpointRecord_Params CreateCheckpointRecord_Params;
	memset(&CreateCheckpointRecord_Params, 0, sizeof(CreateCheckpointRecord_Params));
	memcpy_s(&CreateCheckpointRecord_Params.Record, sizeof(CreateCheckpointRecord_Params.Record), &Record, sizeof(Record));

	this->ProcessEvent(uFnCreateCheckpointRecord, &CreateCheckpointRecord_Params, nullptr);

	memcpy_s(&Record, sizeof(Record), &CreateCheckpointRecord_Params.Record, sizeof(CreateCheckpointRecord_Params.Record));
};

// Function Engine.PointLightToggleable.ShouldSaveForCheckpoint
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool APointLightToggleable::ShouldSaveForCheckpoint()
{
	static UFunction* uFnShouldSaveForCheckpoint = nullptr;

	if (!uFnShouldSaveForCheckpoint)
	{
		uFnShouldSaveForCheckpoint = UFunction::FindFunction("Function Engine.PointLightToggleable.ShouldSaveForCheckpoint");
	}

	APointLightToggleable_execShouldSaveForCheckpoint_Params ShouldSaveForCheckpoint_Params;
	memset(&ShouldSaveForCheckpoint_Params, 0, sizeof(ShouldSaveForCheckpoint_Params));

	this->ProcessEvent(uFnShouldSaveForCheckpoint, &ShouldSaveForCheckpoint_Params, nullptr);

	return ShouldSaveForCheckpoint_Params.ReturnValue;
};

// Function Engine.SpotLightToggleable.ApplyCheckpointRecord
// [0x00420002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// struct ASpotLightToggleable_FCheckpointRecord Record                         (CPF_Const | CPF_Parm | CPF_OutParm)

void ASpotLightToggleable::ApplyCheckpointRecord(struct ASpotLightToggleable_FCheckpointRecord& Record)
{
	static UFunction* uFnApplyCheckpointRecord = nullptr;

	if (!uFnApplyCheckpointRecord)
	{
		uFnApplyCheckpointRecord = UFunction::FindFunction("Function Engine.SpotLightToggleable.ApplyCheckpointRecord");
	}

	ASpotLightToggleable_execApplyCheckpointRecord_Params ApplyCheckpointRecord_Params;
	memset(&ApplyCheckpointRecord_Params, 0, sizeof(ApplyCheckpointRecord_Params));
	memcpy_s(&ApplyCheckpointRecord_Params.Record, sizeof(ApplyCheckpointRecord_Params.Record), &Record, sizeof(Record));

	this->ProcessEvent(uFnApplyCheckpointRecord, &ApplyCheckpointRecord_Params, nullptr);

	memcpy_s(&Record, sizeof(Record), &ApplyCheckpointRecord_Params.Record, sizeof(ApplyCheckpointRecord_Params.Record));
};

// Function Engine.SpotLightToggleable.CreateCheckpointRecord
// [0x00420002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// struct ASpotLightToggleable_FCheckpointRecord Record                         (CPF_Parm | CPF_OutParm)

void ASpotLightToggleable::CreateCheckpointRecord(struct ASpotLightToggleable_FCheckpointRecord& Record)
{
	static UFunction* uFnCreateCheckpointRecord = nullptr;

	if (!uFnCreateCheckpointRecord)
	{
		uFnCreateCheckpointRecord = UFunction::FindFunction("Function Engine.SpotLightToggleable.CreateCheckpointRecord");
	}

	ASpotLightToggleable_execCreateCheckpointRecord_Params CreateCheckpointRecord_Params;
	memset(&CreateCheckpointRecord_Params, 0, sizeof(CreateCheckpointRecord_Params));
	memcpy_s(&CreateCheckpointRecord_Params.Record, sizeof(CreateCheckpointRecord_Params.Record), &Record, sizeof(Record));

	this->ProcessEvent(uFnCreateCheckpointRecord, &CreateCheckpointRecord_Params, nullptr);

	memcpy_s(&Record, sizeof(Record), &CreateCheckpointRecord_Params.Record, sizeof(CreateCheckpointRecord_Params.Record));
};

// Function Engine.SpotLightToggleable.ShouldSaveForCheckpoint
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool ASpotLightToggleable::ShouldSaveForCheckpoint()
{
	static UFunction* uFnShouldSaveForCheckpoint = nullptr;

	if (!uFnShouldSaveForCheckpoint)
	{
		uFnShouldSaveForCheckpoint = UFunction::FindFunction("Function Engine.SpotLightToggleable.ShouldSaveForCheckpoint");
	}

	ASpotLightToggleable_execShouldSaveForCheckpoint_Params ShouldSaveForCheckpoint_Params;
	memset(&ShouldSaveForCheckpoint_Params, 0, sizeof(ShouldSaveForCheckpoint_Params));

	this->ProcessEvent(uFnShouldSaveForCheckpoint, &ShouldSaveForCheckpoint_Params, nullptr);

	return ShouldSaveForCheckpoint_Params.ReturnValue;
};

// Function Engine.LightComponent.OnUpdatePropertyOcclusionMaskDarkness
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void ULightComponent::OnUpdatePropertyOcclusionMaskDarkness()
{
	static UFunction* uFnOnUpdatePropertyOcclusionMaskDarkness = nullptr;

	if (!uFnOnUpdatePropertyOcclusionMaskDarkness)
	{
		uFnOnUpdatePropertyOcclusionMaskDarkness = UFunction::FindFunction("Function Engine.LightComponent.OnUpdatePropertyOcclusionMaskDarkness");
	}

	ULightComponent_execOnUpdatePropertyOcclusionMaskDarkness_Params OnUpdatePropertyOcclusionMaskDarkness_Params;
	memset(&OnUpdatePropertyOcclusionMaskDarkness_Params, 0, sizeof(OnUpdatePropertyOcclusionMaskDarkness_Params));

	this->ProcessEvent(uFnOnUpdatePropertyOcclusionMaskDarkness, &OnUpdatePropertyOcclusionMaskDarkness_Params, nullptr);
};

// Function Engine.LightComponent.OnUpdatePropertyBloomTint
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void ULightComponent::OnUpdatePropertyBloomTint()
{
	static UFunction* uFnOnUpdatePropertyBloomTint = nullptr;

	if (!uFnOnUpdatePropertyBloomTint)
	{
		uFnOnUpdatePropertyBloomTint = UFunction::FindFunction("Function Engine.LightComponent.OnUpdatePropertyBloomTint");
	}

	ULightComponent_execOnUpdatePropertyBloomTint_Params OnUpdatePropertyBloomTint_Params;
	memset(&OnUpdatePropertyBloomTint_Params, 0, sizeof(OnUpdatePropertyBloomTint_Params));

	this->ProcessEvent(uFnOnUpdatePropertyBloomTint, &OnUpdatePropertyBloomTint_Params, nullptr);
};

// Function Engine.LightComponent.OnUpdatePropertyBloomScale
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void ULightComponent::OnUpdatePropertyBloomScale()
{
	static UFunction* uFnOnUpdatePropertyBloomScale = nullptr;

	if (!uFnOnUpdatePropertyBloomScale)
	{
		uFnOnUpdatePropertyBloomScale = UFunction::FindFunction("Function Engine.LightComponent.OnUpdatePropertyBloomScale");
	}

	ULightComponent_execOnUpdatePropertyBloomScale_Params OnUpdatePropertyBloomScale_Params;
	memset(&OnUpdatePropertyBloomScale_Params, 0, sizeof(OnUpdatePropertyBloomScale_Params));

	this->ProcessEvent(uFnOnUpdatePropertyBloomScale, &OnUpdatePropertyBloomScale_Params, nullptr);
};

// Function Engine.LightComponent.UpdateLightShaftParameters
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[26984])
// Parameter Info:

void ULightComponent::UpdateLightShaftParameters()
{
	static UFunction* uFnUpdateLightShaftParameters = nullptr;

	if (!uFnUpdateLightShaftParameters)
	{
		uFnUpdateLightShaftParameters = UFunction::FindFunction("Function Engine.LightComponent.UpdateLightShaftParameters");
	}

	ULightComponent_execUpdateLightShaftParameters_Params UpdateLightShaftParameters_Params;
	memset(&UpdateLightShaftParameters_Params, 0, sizeof(UpdateLightShaftParameters_Params));

	uFnUpdateLightShaftParameters->iNative = 0;
	uFnUpdateLightShaftParameters->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnUpdateLightShaftParameters, &UpdateLightShaftParameters_Params, nullptr);
	uFnUpdateLightShaftParameters->FunctionFlags |= 0x400;
	uFnUpdateLightShaftParameters->iNative = 26984;
};

// Function Engine.LightComponent.UpdateColorAndBrightness
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[26975])
// Parameter Info:

void ULightComponent::UpdateColorAndBrightness()
{
	static UFunction* uFnUpdateColorAndBrightness = nullptr;

	if (!uFnUpdateColorAndBrightness)
	{
		uFnUpdateColorAndBrightness = UFunction::FindFunction("Function Engine.LightComponent.UpdateColorAndBrightness");
	}

	ULightComponent_execUpdateColorAndBrightness_Params UpdateColorAndBrightness_Params;
	memset(&UpdateColorAndBrightness_Params, 0, sizeof(UpdateColorAndBrightness_Params));

	uFnUpdateColorAndBrightness->iNative = 0;
	uFnUpdateColorAndBrightness->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnUpdateColorAndBrightness, &UpdateColorAndBrightness_Params, nullptr);
	uFnUpdateColorAndBrightness->FunctionFlags |= 0x400;
	uFnUpdateColorAndBrightness->iNative = 26975;
};

// Function Engine.LightComponent.GetDirection
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20567])
// Parameter Info:
// struct FVector                 ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

struct FVector ULightComponent::GetDirection()
{
	static UFunction* uFnGetDirection = nullptr;

	if (!uFnGetDirection)
	{
		uFnGetDirection = UFunction::FindFunction("Function Engine.LightComponent.GetDirection");
	}

	ULightComponent_execGetDirection_Params GetDirection_Params;
	memset(&GetDirection_Params, 0, sizeof(GetDirection_Params));

	uFnGetDirection->iNative = 0;
	uFnGetDirection->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetDirection, &GetDirection_Params, nullptr);
	uFnGetDirection->FunctionFlags |= 0x400;
	uFnGetDirection->iNative = 20567;

	return GetDirection_Params.ReturnValue;
};

// Function Engine.LightComponent.GetOrigin
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20665])
// Parameter Info:
// struct FVector                 ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

struct FVector ULightComponent::GetOrigin()
{
	static UFunction* uFnGetOrigin = nullptr;

	if (!uFnGetOrigin)
	{
		uFnGetOrigin = UFunction::FindFunction("Function Engine.LightComponent.GetOrigin");
	}

	ULightComponent_execGetOrigin_Params GetOrigin_Params;
	memset(&GetOrigin_Params, 0, sizeof(GetOrigin_Params));

	uFnGetOrigin->iNative = 0;
	uFnGetOrigin->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetOrigin, &GetOrigin_Params, nullptr);
	uFnGetOrigin->FunctionFlags |= 0x400;
	uFnGetOrigin->iNative = 20665;

	return GetOrigin_Params.ReturnValue;
};

// Function Engine.LightComponent.SetLightProperties
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[25695])
// Parameter Info:
// float                          NewBrightness                  (CPF_OptionalParm | CPF_Parm)
// struct FColor                  NewLightColor                  (CPF_OptionalParm | CPF_Parm)
// class ULightFunction*          NewLightFunction               (CPF_OptionalParm | CPF_Parm)

void ULightComponent::SetLightProperties(float NewBrightness, const struct FColor& NewLightColor, class ULightFunction* NewLightFunction)
{
	static UFunction* uFnSetLightProperties = nullptr;

	if (!uFnSetLightProperties)
	{
		uFnSetLightProperties = UFunction::FindFunction("Function Engine.LightComponent.SetLightProperties");
	}

	ULightComponent_execSetLightProperties_Params SetLightProperties_Params;
	memset(&SetLightProperties_Params, 0, sizeof(SetLightProperties_Params));
	memcpy_s(&SetLightProperties_Params.NewBrightness, sizeof(SetLightProperties_Params.NewBrightness), &NewBrightness, sizeof(NewBrightness));
	memcpy_s(&SetLightProperties_Params.NewLightColor, sizeof(SetLightProperties_Params.NewLightColor), &NewLightColor, sizeof(NewLightColor));
	SetLightProperties_Params.NewLightFunction = NewLightFunction;

	uFnSetLightProperties->iNative = 0;
	uFnSetLightProperties->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetLightProperties, &SetLightProperties_Params, nullptr);
	uFnSetLightProperties->FunctionFlags |= 0x400;
	uFnSetLightProperties->iNative = 25695;
};

// Function Engine.LightComponent.SetEnabled
// [0x04020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_K2Call | FUNC_AllFlags) (iNative[13734])
// Parameter Info:
// uint32_t                       bSetEnabled                    (CPF_Parm)

void ULightComponent::SetEnabled(bool bSetEnabled)
{
	static UFunction* uFnSetEnabled = nullptr;

	if (!uFnSetEnabled)
	{
		uFnSetEnabled = UFunction::FindFunction("Function Engine.LightComponent.SetEnabled");
	}

	ULightComponent_execSetEnabled_Params SetEnabled_Params;
	memset(&SetEnabled_Params, 0, sizeof(SetEnabled_Params));
	SetEnabled_Params.bSetEnabled = bSetEnabled;

	uFnSetEnabled->iNative = 0;
	uFnSetEnabled->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetEnabled, &SetEnabled_Params, nullptr);
	uFnSetEnabled->FunctionFlags |= 0x400;
	uFnSetEnabled->iNative = 13734;
};

// Function Engine.DirectionalLightComponent.OnUpdatePropertyBrightness
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UDirectionalLightComponent::OnUpdatePropertyBrightness()
{
	static UFunction* uFnOnUpdatePropertyBrightness = nullptr;

	if (!uFnOnUpdatePropertyBrightness)
	{
		uFnOnUpdatePropertyBrightness = UFunction::FindFunction("Function Engine.DirectionalLightComponent.OnUpdatePropertyBrightness");
	}

	UDirectionalLightComponent_execOnUpdatePropertyBrightness_Params OnUpdatePropertyBrightness_Params;
	memset(&OnUpdatePropertyBrightness_Params, 0, sizeof(OnUpdatePropertyBrightness_Params));

	this->ProcessEvent(uFnOnUpdatePropertyBrightness, &OnUpdatePropertyBrightness_Params, nullptr);
};

// Function Engine.DirectionalLightComponent.OnUpdatePropertyLightColor
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UDirectionalLightComponent::OnUpdatePropertyLightColor()
{
	static UFunction* uFnOnUpdatePropertyLightColor = nullptr;

	if (!uFnOnUpdatePropertyLightColor)
	{
		uFnOnUpdatePropertyLightColor = UFunction::FindFunction("Function Engine.DirectionalLightComponent.OnUpdatePropertyLightColor");
	}

	UDirectionalLightComponent_execOnUpdatePropertyLightColor_Params OnUpdatePropertyLightColor_Params;
	memset(&OnUpdatePropertyLightColor_Params, 0, sizeof(OnUpdatePropertyLightColor_Params));

	this->ProcessEvent(uFnOnUpdatePropertyLightColor, &OnUpdatePropertyLightColor_Params, nullptr);
};

// Function Engine.PointLightComponent.OnUpdatePropertyBrightness
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UPointLightComponent::OnUpdatePropertyBrightness()
{
	static UFunction* uFnOnUpdatePropertyBrightness = nullptr;

	if (!uFnOnUpdatePropertyBrightness)
	{
		uFnOnUpdatePropertyBrightness = UFunction::FindFunction("Function Engine.PointLightComponent.OnUpdatePropertyBrightness");
	}

	UPointLightComponent_execOnUpdatePropertyBrightness_Params OnUpdatePropertyBrightness_Params;
	memset(&OnUpdatePropertyBrightness_Params, 0, sizeof(OnUpdatePropertyBrightness_Params));

	this->ProcessEvent(uFnOnUpdatePropertyBrightness, &OnUpdatePropertyBrightness_Params, nullptr);
};

// Function Engine.PointLightComponent.OnUpdatePropertyLightColor
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UPointLightComponent::OnUpdatePropertyLightColor()
{
	static UFunction* uFnOnUpdatePropertyLightColor = nullptr;

	if (!uFnOnUpdatePropertyLightColor)
	{
		uFnOnUpdatePropertyLightColor = UFunction::FindFunction("Function Engine.PointLightComponent.OnUpdatePropertyLightColor");
	}

	UPointLightComponent_execOnUpdatePropertyLightColor_Params OnUpdatePropertyLightColor_Params;
	memset(&OnUpdatePropertyLightColor_Params, 0, sizeof(OnUpdatePropertyLightColor_Params));

	this->ProcessEvent(uFnOnUpdatePropertyLightColor, &OnUpdatePropertyLightColor_Params, nullptr);
};

// Function Engine.PointLightComponent.SetTranslation
// [0x04020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_K2Call | FUNC_AllFlags) (iNative[25829])
// Parameter Info:
// struct FVector                 NewTranslation                 (CPF_Parm)

void UPointLightComponent::SetTranslation(const struct FVector& NewTranslation)
{
	static UFunction* uFnSetTranslation = nullptr;

	if (!uFnSetTranslation)
	{
		uFnSetTranslation = UFunction::FindFunction("Function Engine.PointLightComponent.SetTranslation");
	}

	UPointLightComponent_execSetTranslation_Params SetTranslation_Params;
	memset(&SetTranslation_Params, 0, sizeof(SetTranslation_Params));
	memcpy_s(&SetTranslation_Params.NewTranslation, sizeof(SetTranslation_Params.NewTranslation), &NewTranslation, sizeof(NewTranslation));

	uFnSetTranslation->iNative = 0;
	uFnSetTranslation->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetTranslation, &SetTranslation_Params, nullptr);
	uFnSetTranslation->FunctionFlags |= 0x400;
	uFnSetTranslation->iNative = 25829;
};

// Function Engine.SpotLightComponent.SetRotation
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25772])
// Parameter Info:
// struct FRotator                NewRotation                    (CPF_Parm)

void USpotLightComponent::SetRotation(const struct FRotator& NewRotation)
{
	static UFunction* uFnSetRotation = nullptr;

	if (!uFnSetRotation)
	{
		uFnSetRotation = UFunction::FindFunction("Function Engine.SpotLightComponent.SetRotation");
	}

	USpotLightComponent_execSetRotation_Params SetRotation_Params;
	memset(&SetRotation_Params, 0, sizeof(SetRotation_Params));
	memcpy_s(&SetRotation_Params.NewRotation, sizeof(SetRotation_Params.NewRotation), &NewRotation, sizeof(NewRotation));

	uFnSetRotation->iNative = 0;
	uFnSetRotation->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetRotation, &SetRotation_Params, nullptr);
	uFnSetRotation->FunctionFlags |= 0x400;
	uFnSetRotation->iNative = 25772;
};

// Function Engine.LightEnvironmentComponent.IsEnabled
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13590])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool ULightEnvironmentComponent::IsEnabled()
{
	static UFunction* uFnIsEnabled = nullptr;

	if (!uFnIsEnabled)
	{
		uFnIsEnabled = UFunction::FindFunction("Function Engine.LightEnvironmentComponent.IsEnabled");
	}

	ULightEnvironmentComponent_execIsEnabled_Params IsEnabled_Params;
	memset(&IsEnabled_Params, 0, sizeof(IsEnabled_Params));

	uFnIsEnabled->iNative = 0;
	uFnIsEnabled->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnIsEnabled, &IsEnabled_Params, nullptr);
	uFnIsEnabled->FunctionFlags |= 0x400;
	uFnIsEnabled->iNative = 13590;

	return IsEnabled_Params.ReturnValue;
};

// Function Engine.LightEnvironmentComponent.SetEnabled
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13734])
// Parameter Info:
// uint32_t                       bNewEnabled                    (CPF_Parm)

void ULightEnvironmentComponent::SetEnabled(bool bNewEnabled)
{
	static UFunction* uFnSetEnabled = nullptr;

	if (!uFnSetEnabled)
	{
		uFnSetEnabled = UFunction::FindFunction("Function Engine.LightEnvironmentComponent.SetEnabled");
	}

	ULightEnvironmentComponent_execSetEnabled_Params SetEnabled_Params;
	memset(&SetEnabled_Params, 0, sizeof(SetEnabled_Params));
	SetEnabled_Params.bNewEnabled = bNewEnabled;

	uFnSetEnabled->iNative = 0;
	uFnSetEnabled->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetEnabled, &SetEnabled_Params, nullptr);
	uFnSetEnabled->FunctionFlags |= 0x400;
	uFnSetEnabled->iNative = 13734;
};

// Function Engine.DynamicLightEnvironmentComponent.ResetEnvironment
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25150])
// Parameter Info:

void UDynamicLightEnvironmentComponent::ResetEnvironment()
{
	static UFunction* uFnResetEnvironment = nullptr;

	if (!uFnResetEnvironment)
	{
		uFnResetEnvironment = UFunction::FindFunction("Function Engine.DynamicLightEnvironmentComponent.ResetEnvironment");
	}

	UDynamicLightEnvironmentComponent_execResetEnvironment_Params ResetEnvironment_Params;
	memset(&ResetEnvironment_Params, 0, sizeof(ResetEnvironment_Params));

	uFnResetEnvironment->iNative = 0;
	uFnResetEnvironment->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnResetEnvironment, &ResetEnvironment_Params, nullptr);
	uFnResetEnvironment->FunctionFlags |= 0x400;
	uFnResetEnvironment->iNative = 25150;
};

// Function Engine.SkeletalMeshComponent.BreakConstraint
// [0x00024103] (FUNC_Final | FUNC_Defined | FUNC_Simulated | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FVector                 Impulse                        (CPF_Parm)
// struct FVector                 HitLocation                    (CPF_Parm)
// class FName                    InBoneName                     (CPF_Parm)
// uint32_t                       bVelChange                     (CPF_OptionalParm | CPF_Parm)

void USkeletalMeshComponent::BreakConstraint(const struct FVector& Impulse, const struct FVector& HitLocation, const class FName& InBoneName, bool bVelChange)
{
	static UFunction* uFnBreakConstraint = nullptr;

	if (!uFnBreakConstraint)
	{
		uFnBreakConstraint = UFunction::FindFunction("Function Engine.SkeletalMeshComponent.BreakConstraint");
	}

	USkeletalMeshComponent_execBreakConstraint_Params BreakConstraint_Params;
	memset(&BreakConstraint_Params, 0, sizeof(BreakConstraint_Params));
	memcpy_s(&BreakConstraint_Params.Impulse, sizeof(BreakConstraint_Params.Impulse), &Impulse, sizeof(Impulse));
	memcpy_s(&BreakConstraint_Params.HitLocation, sizeof(BreakConstraint_Params.HitLocation), &HitLocation, sizeof(HitLocation));
	memcpy_s(&BreakConstraint_Params.InBoneName, sizeof(BreakConstraint_Params.InBoneName), &InBoneName, sizeof(InBoneName));
	BreakConstraint_Params.bVelChange = bVelChange;

	this->ProcessEvent(uFnBreakConstraint, &BreakConstraint_Params, nullptr);
};

// Function Engine.SkeletalMeshComponent.SkelMeshCompOnParticleSystemFinished
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UParticleSystemComponent* PSC                            (CPF_Parm | CPF_EditInline)

void USkeletalMeshComponent::SkelMeshCompOnParticleSystemFinished(class UParticleSystemComponent* PSC)
{
	static UFunction* uFnSkelMeshCompOnParticleSystemFinished = nullptr;

	if (!uFnSkelMeshCompOnParticleSystemFinished)
	{
		uFnSkelMeshCompOnParticleSystemFinished = UFunction::FindFunction("Function Engine.SkeletalMeshComponent.SkelMeshCompOnParticleSystemFinished");
	}

	USkeletalMeshComponent_execSkelMeshCompOnParticleSystemFinished_Params SkelMeshCompOnParticleSystemFinished_Params;
	memset(&SkelMeshCompOnParticleSystemFinished_Params, 0, sizeof(SkelMeshCompOnParticleSystemFinished_Params));
	SkelMeshCompOnParticleSystemFinished_Params.PSC = PSC;

	this->ProcessEvent(uFnSkelMeshCompOnParticleSystemFinished, &SkelMeshCompOnParticleSystemFinished_Params, nullptr);
};

// Function Engine.SkeletalMeshComponent.PlayParticleEffect
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13684])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UAnimNotify_PlayParticleEffect* AnimNotifyData                 (CPF_Const | CPF_Parm)

bool USkeletalMeshComponent::PlayParticleEffect(class UAnimNotify_PlayParticleEffect* AnimNotifyData)
{
	static UFunction* uFnPlayParticleEffect = nullptr;

	if (!uFnPlayParticleEffect)
	{
		uFnPlayParticleEffect = UFunction::FindFunction("Function Engine.SkeletalMeshComponent.PlayParticleEffect");
	}

	USkeletalMeshComponent_execPlayParticleEffect_Params PlayParticleEffect_Params;
	memset(&PlayParticleEffect_Params, 0, sizeof(PlayParticleEffect_Params));
	PlayParticleEffect_Params.AnimNotifyData = AnimNotifyData;

	uFnPlayParticleEffect->iNative = 0;
	uFnPlayParticleEffect->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnPlayParticleEffect, &PlayParticleEffect_Params, nullptr);
	uFnPlayParticleEffect->FunctionFlags |= 0x400;
	uFnPlayParticleEffect->iNative = 13684;

	return PlayParticleEffect_Params.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.ShowMaterialSection
// [0x00020501] (FUNC_Final | FUNC_Simulated | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25923])
// Parameter Info:
// int32_t                        MaterialID                     (CPF_Parm)
// uint32_t                       bShow                          (CPF_Parm)
// int32_t                        LODIndex                       (CPF_Parm)

void USkeletalMeshComponent::ShowMaterialSection(int32_t MaterialID, bool bShow, int32_t LODIndex)
{
	static UFunction* uFnShowMaterialSection = nullptr;

	if (!uFnShowMaterialSection)
	{
		uFnShowMaterialSection = UFunction::FindFunction("Function Engine.SkeletalMeshComponent.ShowMaterialSection");
	}

	USkeletalMeshComponent_execShowMaterialSection_Params ShowMaterialSection_Params;
	memset(&ShowMaterialSection_Params, 0, sizeof(ShowMaterialSection_Params));
	memcpy_s(&ShowMaterialSection_Params.MaterialID, sizeof(ShowMaterialSection_Params.MaterialID), &MaterialID, sizeof(MaterialID));
	ShowMaterialSection_Params.bShow = bShow;
	memcpy_s(&ShowMaterialSection_Params.LODIndex, sizeof(ShowMaterialSection_Params.LODIndex), &LODIndex, sizeof(LODIndex));

	uFnShowMaterialSection->iNative = 0;
	uFnShowMaterialSection->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnShowMaterialSection, &ShowMaterialSection_Params, nullptr);
	uFnShowMaterialSection->FunctionFlags |= 0x400;
	uFnShowMaterialSection->iNative = 25923;
};

// Function Engine.SkeletalMeshComponent.UpdateMeshForBrokenConstraints
// [0x00020501] (FUNC_Final | FUNC_Simulated | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[26987])
// Parameter Info:

void USkeletalMeshComponent::UpdateMeshForBrokenConstraints()
{
	static UFunction* uFnUpdateMeshForBrokenConstraints = nullptr;

	if (!uFnUpdateMeshForBrokenConstraints)
	{
		uFnUpdateMeshForBrokenConstraints = UFunction::FindFunction("Function Engine.SkeletalMeshComponent.UpdateMeshForBrokenConstraints");
	}

	USkeletalMeshComponent_execUpdateMeshForBrokenConstraints_Params UpdateMeshForBrokenConstraints_Params;
	memset(&UpdateMeshForBrokenConstraints_Params, 0, sizeof(UpdateMeshForBrokenConstraints_Params));

	uFnUpdateMeshForBrokenConstraints->iNative = 0;
	uFnUpdateMeshForBrokenConstraints->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnUpdateMeshForBrokenConstraints, &UpdateMeshForBrokenConstraints_Params, nullptr);
	uFnUpdateMeshForBrokenConstraints->FunctionFlags |= 0x400;
	uFnUpdateMeshForBrokenConstraints->iNative = 26987;
};

// Function Engine.SkeletalMeshComponent.UnHideBoneByName
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[26936])
// Parameter Info:
// class FName                    BoneName                       (CPF_Parm)

void USkeletalMeshComponent::UnHideBoneByName(const class FName& BoneName)
{
	static UFunction* uFnUnHideBoneByName = nullptr;

	if (!uFnUnHideBoneByName)
	{
		uFnUnHideBoneByName = UFunction::FindFunction("Function Engine.SkeletalMeshComponent.UnHideBoneByName");
	}

	USkeletalMeshComponent_execUnHideBoneByName_Params UnHideBoneByName_Params;
	memset(&UnHideBoneByName_Params, 0, sizeof(UnHideBoneByName_Params));
	memcpy_s(&UnHideBoneByName_Params.BoneName, sizeof(UnHideBoneByName_Params.BoneName), &BoneName, sizeof(BoneName));

	uFnUnHideBoneByName->iNative = 0;
	uFnUnHideBoneByName->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnUnHideBoneByName, &UnHideBoneByName_Params, nullptr);
	uFnUnHideBoneByName->FunctionFlags |= 0x400;
	uFnUnHideBoneByName->iNative = 26936;
};

// Function Engine.SkeletalMeshComponent.HideBoneByName
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20938])
// Parameter Info:
// class FName                    BoneName                       (CPF_Parm)
// EPhysBodyOp                    PhysBodyOption                 (CPF_Parm)

void USkeletalMeshComponent::HideBoneByName(const class FName& BoneName, EPhysBodyOp PhysBodyOption)
{
	static UFunction* uFnHideBoneByName = nullptr;

	if (!uFnHideBoneByName)
	{
		uFnHideBoneByName = UFunction::FindFunction("Function Engine.SkeletalMeshComponent.HideBoneByName");
	}

	USkeletalMeshComponent_execHideBoneByName_Params HideBoneByName_Params;
	memset(&HideBoneByName_Params, 0, sizeof(HideBoneByName_Params));
	memcpy_s(&HideBoneByName_Params.BoneName, sizeof(HideBoneByName_Params.BoneName), &BoneName, sizeof(BoneName));
	memcpy_s(&HideBoneByName_Params.PhysBodyOption, sizeof(HideBoneByName_Params.PhysBodyOption), &PhysBodyOption, sizeof(PhysBodyOption));

	uFnHideBoneByName->iNative = 0;
	uFnHideBoneByName->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnHideBoneByName, &HideBoneByName_Params, nullptr);
	uFnHideBoneByName->FunctionFlags |= 0x400;
	uFnHideBoneByName->iNative = 20938;
};

// Function Engine.SkeletalMeshComponent.UnHideBone
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[26935])
// Parameter Info:
// int32_t                        BoneIndex                      (CPF_Parm)

void USkeletalMeshComponent::UnHideBone(int32_t BoneIndex)
{
	static UFunction* uFnUnHideBone = nullptr;

	if (!uFnUnHideBone)
	{
		uFnUnHideBone = UFunction::FindFunction("Function Engine.SkeletalMeshComponent.UnHideBone");
	}

	USkeletalMeshComponent_execUnHideBone_Params UnHideBone_Params;
	memset(&UnHideBone_Params, 0, sizeof(UnHideBone_Params));
	memcpy_s(&UnHideBone_Params.BoneIndex, sizeof(UnHideBone_Params.BoneIndex), &BoneIndex, sizeof(BoneIndex));

	uFnUnHideBone->iNative = 0;
	uFnUnHideBone->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnUnHideBone, &UnHideBone_Params, nullptr);
	uFnUnHideBone->FunctionFlags |= 0x400;
	uFnUnHideBone->iNative = 26935;
};

// Function Engine.SkeletalMeshComponent.HideBone
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20937])
// Parameter Info:
// int32_t                        BoneIndex                      (CPF_Parm)
// EPhysBodyOp                    PhysBodyOption                 (CPF_Parm)

void USkeletalMeshComponent::HideBone(int32_t BoneIndex, EPhysBodyOp PhysBodyOption)
{
	static UFunction* uFnHideBone = nullptr;

	if (!uFnHideBone)
	{
		uFnHideBone = UFunction::FindFunction("Function Engine.SkeletalMeshComponent.HideBone");
	}

	USkeletalMeshComponent_execHideBone_Params HideBone_Params;
	memset(&HideBone_Params, 0, sizeof(HideBone_Params));
	memcpy_s(&HideBone_Params.BoneIndex, sizeof(HideBone_Params.BoneIndex), &BoneIndex, sizeof(BoneIndex));
	memcpy_s(&HideBone_Params.PhysBodyOption, sizeof(HideBone_Params.PhysBodyOption), &PhysBodyOption, sizeof(PhysBodyOption));

	uFnHideBone->iNative = 0;
	uFnHideBone->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnHideBone, &HideBone_Params, nullptr);
	uFnHideBone->FunctionFlags |= 0x400;
	uFnHideBone->iNative = 20937;
};

// Function Engine.SkeletalMeshComponent.SetFaceFXRegisterEx
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25650])
// Parameter Info:
// class FString                  RegName                        (CPF_Parm | CPF_NeedCtorLink)
// EFaceFXRegOp                   RegOp                          (CPF_Parm)
// float                          FirstValue                     (CPF_Parm)
// float                          FirstInterpDuration            (CPF_Parm)
// float                          NextValue                      (CPF_Parm)
// float                          NextInterpDuration             (CPF_Parm)

void USkeletalMeshComponent::SetFaceFXRegisterEx(const class FString& RegName, EFaceFXRegOp RegOp, float FirstValue, float FirstInterpDuration, float NextValue, float NextInterpDuration)
{
	static UFunction* uFnSetFaceFXRegisterEx = nullptr;

	if (!uFnSetFaceFXRegisterEx)
	{
		uFnSetFaceFXRegisterEx = UFunction::FindFunction("Function Engine.SkeletalMeshComponent.SetFaceFXRegisterEx");
	}

	USkeletalMeshComponent_execSetFaceFXRegisterEx_Params SetFaceFXRegisterEx_Params;
	memset(&SetFaceFXRegisterEx_Params, 0, sizeof(SetFaceFXRegisterEx_Params));
	memcpy_s(&SetFaceFXRegisterEx_Params.RegName, sizeof(SetFaceFXRegisterEx_Params.RegName), &RegName, sizeof(RegName));
	memcpy_s(&SetFaceFXRegisterEx_Params.RegOp, sizeof(SetFaceFXRegisterEx_Params.RegOp), &RegOp, sizeof(RegOp));
	memcpy_s(&SetFaceFXRegisterEx_Params.FirstValue, sizeof(SetFaceFXRegisterEx_Params.FirstValue), &FirstValue, sizeof(FirstValue));
	memcpy_s(&SetFaceFXRegisterEx_Params.FirstInterpDuration, sizeof(SetFaceFXRegisterEx_Params.FirstInterpDuration), &FirstInterpDuration, sizeof(FirstInterpDuration));
	memcpy_s(&SetFaceFXRegisterEx_Params.NextValue, sizeof(SetFaceFXRegisterEx_Params.NextValue), &NextValue, sizeof(NextValue));
	memcpy_s(&SetFaceFXRegisterEx_Params.NextInterpDuration, sizeof(SetFaceFXRegisterEx_Params.NextInterpDuration), &NextInterpDuration, sizeof(NextInterpDuration));

	uFnSetFaceFXRegisterEx->iNative = 0;
	uFnSetFaceFXRegisterEx->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetFaceFXRegisterEx, &SetFaceFXRegisterEx_Params, nullptr);
	uFnSetFaceFXRegisterEx->FunctionFlags |= 0x400;
	uFnSetFaceFXRegisterEx->iNative = 25650;
};

// Function Engine.SkeletalMeshComponent.SetFaceFXRegister
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[25649])
// Parameter Info:
// class FString                  RegName                        (CPF_Parm | CPF_NeedCtorLink)
// float                          RegVal                         (CPF_Parm)
// EFaceFXRegOp                   RegOp                          (CPF_Parm)
// float                          InterpDuration                 (CPF_OptionalParm | CPF_Parm)

void USkeletalMeshComponent::SetFaceFXRegister(const class FString& RegName, float RegVal, EFaceFXRegOp RegOp, float InterpDuration)
{
	static UFunction* uFnSetFaceFXRegister = nullptr;

	if (!uFnSetFaceFXRegister)
	{
		uFnSetFaceFXRegister = UFunction::FindFunction("Function Engine.SkeletalMeshComponent.SetFaceFXRegister");
	}

	USkeletalMeshComponent_execSetFaceFXRegister_Params SetFaceFXRegister_Params;
	memset(&SetFaceFXRegister_Params, 0, sizeof(SetFaceFXRegister_Params));
	memcpy_s(&SetFaceFXRegister_Params.RegName, sizeof(SetFaceFXRegister_Params.RegName), &RegName, sizeof(RegName));
	memcpy_s(&SetFaceFXRegister_Params.RegVal, sizeof(SetFaceFXRegister_Params.RegVal), &RegVal, sizeof(RegVal));
	memcpy_s(&SetFaceFXRegister_Params.RegOp, sizeof(SetFaceFXRegister_Params.RegOp), &RegOp, sizeof(RegOp));
	memcpy_s(&SetFaceFXRegister_Params.InterpDuration, sizeof(SetFaceFXRegister_Params.InterpDuration), &InterpDuration, sizeof(InterpDuration));

	uFnSetFaceFXRegister->iNative = 0;
	uFnSetFaceFXRegister->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetFaceFXRegister, &SetFaceFXRegister_Params, nullptr);
	uFnSetFaceFXRegister->FunctionFlags |= 0x400;
	uFnSetFaceFXRegister->iNative = 25649;
};

// Function Engine.SkeletalMeshComponent.GetFaceFXRegister
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20574])
// Parameter Info:
// float                          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FString                  RegName                        (CPF_Parm | CPF_NeedCtorLink)

float USkeletalMeshComponent::GetFaceFXRegister(const class FString& RegName)
{
	static UFunction* uFnGetFaceFXRegister = nullptr;

	if (!uFnGetFaceFXRegister)
	{
		uFnGetFaceFXRegister = UFunction::FindFunction("Function Engine.SkeletalMeshComponent.GetFaceFXRegister");
	}

	USkeletalMeshComponent_execGetFaceFXRegister_Params GetFaceFXRegister_Params;
	memset(&GetFaceFXRegister_Params, 0, sizeof(GetFaceFXRegister_Params));
	memcpy_s(&GetFaceFXRegister_Params.RegName, sizeof(GetFaceFXRegister_Params.RegName), &RegName, sizeof(RegName));

	uFnGetFaceFXRegister->iNative = 0;
	uFnGetFaceFXRegister->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetFaceFXRegister, &GetFaceFXRegister_Params, nullptr);
	uFnGetFaceFXRegister->FunctionFlags |= 0x400;
	uFnGetFaceFXRegister->iNative = 20574;

	return GetFaceFXRegister_Params.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.DeclareFaceFXRegister
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[18662])
// Parameter Info:
// class FString                  RegName                        (CPF_Parm | CPF_NeedCtorLink)

void USkeletalMeshComponent::DeclareFaceFXRegister(const class FString& RegName)
{
	static UFunction* uFnDeclareFaceFXRegister = nullptr;

	if (!uFnDeclareFaceFXRegister)
	{
		uFnDeclareFaceFXRegister = UFunction::FindFunction("Function Engine.SkeletalMeshComponent.DeclareFaceFXRegister");
	}

	USkeletalMeshComponent_execDeclareFaceFXRegister_Params DeclareFaceFXRegister_Params;
	memset(&DeclareFaceFXRegister_Params, 0, sizeof(DeclareFaceFXRegister_Params));
	memcpy_s(&DeclareFaceFXRegister_Params.RegName, sizeof(DeclareFaceFXRegister_Params.RegName), &RegName, sizeof(RegName));

	uFnDeclareFaceFXRegister->iNative = 0;
	uFnDeclareFaceFXRegister->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnDeclareFaceFXRegister, &DeclareFaceFXRegister_Params, nullptr);
	uFnDeclareFaceFXRegister->FunctionFlags |= 0x400;
	uFnDeclareFaceFXRegister->iNative = 18662;
};

// Function Engine.SkeletalMeshComponent.IsPlayingFaceFXAnim
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[21416])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool USkeletalMeshComponent::IsPlayingFaceFXAnim()
{
	static UFunction* uFnIsPlayingFaceFXAnim = nullptr;

	if (!uFnIsPlayingFaceFXAnim)
	{
		uFnIsPlayingFaceFXAnim = UFunction::FindFunction("Function Engine.SkeletalMeshComponent.IsPlayingFaceFXAnim");
	}

	USkeletalMeshComponent_execIsPlayingFaceFXAnim_Params IsPlayingFaceFXAnim_Params;
	memset(&IsPlayingFaceFXAnim_Params, 0, sizeof(IsPlayingFaceFXAnim_Params));

	uFnIsPlayingFaceFXAnim->iNative = 0;
	uFnIsPlayingFaceFXAnim->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnIsPlayingFaceFXAnim, &IsPlayingFaceFXAnim_Params, nullptr);
	uFnIsPlayingFaceFXAnim->FunctionFlags |= 0x400;
	uFnIsPlayingFaceFXAnim->iNative = 21416;

	return IsPlayingFaceFXAnim_Params.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.StopFaceFXAnim
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[26321])
// Parameter Info:

void USkeletalMeshComponent::StopFaceFXAnim()
{
	static UFunction* uFnStopFaceFXAnim = nullptr;

	if (!uFnStopFaceFXAnim)
	{
		uFnStopFaceFXAnim = UFunction::FindFunction("Function Engine.SkeletalMeshComponent.StopFaceFXAnim");
	}

	USkeletalMeshComponent_execStopFaceFXAnim_Params StopFaceFXAnim_Params;
	memset(&StopFaceFXAnim_Params, 0, sizeof(StopFaceFXAnim_Params));

	uFnStopFaceFXAnim->iNative = 0;
	uFnStopFaceFXAnim->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnStopFaceFXAnim, &StopFaceFXAnim_Params, nullptr);
	uFnStopFaceFXAnim->FunctionFlags |= 0x400;
	uFnStopFaceFXAnim->iNative = 26321;
};

// Function Engine.SkeletalMeshComponent.PlayFaceFXAnim
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[24335])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UFaceFXAnimSet*          FaceFXAnimSetRef               (CPF_Parm)
// class FString                  AnimName                       (CPF_Parm | CPF_NeedCtorLink)
// class FString                  GroupName                      (CPF_Parm | CPF_NeedCtorLink)
// class UAkEvent*                AkEventToPlay                  (CPF_Parm)
// float                          fStartPosition                 (CPF_Parm)

bool USkeletalMeshComponent::PlayFaceFXAnim(class UFaceFXAnimSet* FaceFXAnimSetRef, const class FString& AnimName, const class FString& GroupName, class UAkEvent* AkEventToPlay, float fStartPosition)
{
	static UFunction* uFnPlayFaceFXAnim = nullptr;

	if (!uFnPlayFaceFXAnim)
	{
		uFnPlayFaceFXAnim = UFunction::FindFunction("Function Engine.SkeletalMeshComponent.PlayFaceFXAnim");
	}

	USkeletalMeshComponent_execPlayFaceFXAnim_Params PlayFaceFXAnim_Params;
	memset(&PlayFaceFXAnim_Params, 0, sizeof(PlayFaceFXAnim_Params));
	PlayFaceFXAnim_Params.FaceFXAnimSetRef = FaceFXAnimSetRef;
	memcpy_s(&PlayFaceFXAnim_Params.AnimName, sizeof(PlayFaceFXAnim_Params.AnimName), &AnimName, sizeof(AnimName));
	memcpy_s(&PlayFaceFXAnim_Params.GroupName, sizeof(PlayFaceFXAnim_Params.GroupName), &GroupName, sizeof(GroupName));
	PlayFaceFXAnim_Params.AkEventToPlay = AkEventToPlay;
	memcpy_s(&PlayFaceFXAnim_Params.fStartPosition, sizeof(PlayFaceFXAnim_Params.fStartPosition), &fStartPosition, sizeof(fStartPosition));

	uFnPlayFaceFXAnim->iNative = 0;
	uFnPlayFaceFXAnim->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnPlayFaceFXAnim, &PlayFaceFXAnim_Params, nullptr);
	uFnPlayFaceFXAnim->FunctionFlags |= 0x400;
	uFnPlayFaceFXAnim->iNative = 24335;

	return PlayFaceFXAnim_Params.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.ToggleInstanceVertexWeights
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[26735])
// Parameter Info:
// uint32_t                       bEnable                        (CPF_Parm)
// int32_t                        LODIdx                         (CPF_Parm)

void USkeletalMeshComponent::ToggleInstanceVertexWeights(bool bEnable, int32_t LODIdx)
{
	static UFunction* uFnToggleInstanceVertexWeights = nullptr;

	if (!uFnToggleInstanceVertexWeights)
	{
		uFnToggleInstanceVertexWeights = UFunction::FindFunction("Function Engine.SkeletalMeshComponent.ToggleInstanceVertexWeights");
	}

	USkeletalMeshComponent_execToggleInstanceVertexWeights_Params ToggleInstanceVertexWeights_Params;
	memset(&ToggleInstanceVertexWeights_Params, 0, sizeof(ToggleInstanceVertexWeights_Params));
	ToggleInstanceVertexWeights_Params.bEnable = bEnable;
	memcpy_s(&ToggleInstanceVertexWeights_Params.LODIdx, sizeof(ToggleInstanceVertexWeights_Params.LODIdx), &LODIdx, sizeof(LODIdx));

	uFnToggleInstanceVertexWeights->iNative = 0;
	uFnToggleInstanceVertexWeights->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnToggleInstanceVertexWeights, &ToggleInstanceVertexWeights_Params, nullptr);
	uFnToggleInstanceVertexWeights->FunctionFlags |= 0x400;
	uFnToggleInstanceVertexWeights->iNative = 26735;
};

// Function Engine.SkeletalMeshComponent.UpdateInstanceVertexWeightBones
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[26983])
// Parameter Info:
// class TArray<struct FBonePair> BonePairs                      (CPF_Parm | CPF_NeedCtorLink)

void USkeletalMeshComponent::UpdateInstanceVertexWeightBones(const class TArray<struct FBonePair>& BonePairs)
{
	static UFunction* uFnUpdateInstanceVertexWeightBones = nullptr;

	if (!uFnUpdateInstanceVertexWeightBones)
	{
		uFnUpdateInstanceVertexWeightBones = UFunction::FindFunction("Function Engine.SkeletalMeshComponent.UpdateInstanceVertexWeightBones");
	}

	USkeletalMeshComponent_execUpdateInstanceVertexWeightBones_Params UpdateInstanceVertexWeightBones_Params;
	memset(&UpdateInstanceVertexWeightBones_Params, 0, sizeof(UpdateInstanceVertexWeightBones_Params));
	memcpy_s(&UpdateInstanceVertexWeightBones_Params.BonePairs, sizeof(UpdateInstanceVertexWeightBones_Params.BonePairs), &BonePairs, sizeof(BonePairs));

	uFnUpdateInstanceVertexWeightBones->iNative = 0;
	uFnUpdateInstanceVertexWeightBones->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnUpdateInstanceVertexWeightBones, &UpdateInstanceVertexWeightBones_Params, nullptr);
	uFnUpdateInstanceVertexWeightBones->FunctionFlags |= 0x400;
	uFnUpdateInstanceVertexWeightBones->iNative = 26983;
};

// Function Engine.SkeletalMeshComponent.FindInstanceVertexweightBonePair
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20107])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FBonePair               Bones                          (CPF_Parm)

int32_t USkeletalMeshComponent::FindInstanceVertexweightBonePair(const struct FBonePair& Bones)
{
	static UFunction* uFnFindInstanceVertexweightBonePair = nullptr;

	if (!uFnFindInstanceVertexweightBonePair)
	{
		uFnFindInstanceVertexweightBonePair = UFunction::FindFunction("Function Engine.SkeletalMeshComponent.FindInstanceVertexweightBonePair");
	}

	USkeletalMeshComponent_execFindInstanceVertexweightBonePair_Params FindInstanceVertexweightBonePair_Params;
	memset(&FindInstanceVertexweightBonePair_Params, 0, sizeof(FindInstanceVertexweightBonePair_Params));
	memcpy_s(&FindInstanceVertexweightBonePair_Params.Bones, sizeof(FindInstanceVertexweightBonePair_Params.Bones), &Bones, sizeof(Bones));

	uFnFindInstanceVertexweightBonePair->iNative = 0;
	uFnFindInstanceVertexweightBonePair->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnFindInstanceVertexweightBonePair, &FindInstanceVertexweightBonePair_Params, nullptr);
	uFnFindInstanceVertexweightBonePair->FunctionFlags |= 0x400;
	uFnFindInstanceVertexweightBonePair->iNative = 20107;

	return FindInstanceVertexweightBonePair_Params.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.RemoveInstanceVertexWeightBoneParented
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25073])
// Parameter Info:
// class FName                    BoneName                       (CPF_Parm)

void USkeletalMeshComponent::RemoveInstanceVertexWeightBoneParented(const class FName& BoneName)
{
	static UFunction* uFnRemoveInstanceVertexWeightBoneParented = nullptr;

	if (!uFnRemoveInstanceVertexWeightBoneParented)
	{
		uFnRemoveInstanceVertexWeightBoneParented = UFunction::FindFunction("Function Engine.SkeletalMeshComponent.RemoveInstanceVertexWeightBoneParented");
	}

	USkeletalMeshComponent_execRemoveInstanceVertexWeightBoneParented_Params RemoveInstanceVertexWeightBoneParented_Params;
	memset(&RemoveInstanceVertexWeightBoneParented_Params, 0, sizeof(RemoveInstanceVertexWeightBoneParented_Params));
	memcpy_s(&RemoveInstanceVertexWeightBoneParented_Params.BoneName, sizeof(RemoveInstanceVertexWeightBoneParented_Params.BoneName), &BoneName, sizeof(BoneName));

	uFnRemoveInstanceVertexWeightBoneParented->iNative = 0;
	uFnRemoveInstanceVertexWeightBoneParented->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnRemoveInstanceVertexWeightBoneParented, &RemoveInstanceVertexWeightBoneParented_Params, nullptr);
	uFnRemoveInstanceVertexWeightBoneParented->FunctionFlags |= 0x400;
	uFnRemoveInstanceVertexWeightBoneParented->iNative = 25073;
};

// Function Engine.SkeletalMeshComponent.AddInstanceVertexWeightBoneParented
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[15312])
// Parameter Info:
// class FName                    BoneName                       (CPF_Parm)
// uint32_t                       bPairWithParent                (CPF_OptionalParm | CPF_Parm)

void USkeletalMeshComponent::AddInstanceVertexWeightBoneParented(const class FName& BoneName, bool bPairWithParent)
{
	static UFunction* uFnAddInstanceVertexWeightBoneParented = nullptr;

	if (!uFnAddInstanceVertexWeightBoneParented)
	{
		uFnAddInstanceVertexWeightBoneParented = UFunction::FindFunction("Function Engine.SkeletalMeshComponent.AddInstanceVertexWeightBoneParented");
	}

	USkeletalMeshComponent_execAddInstanceVertexWeightBoneParented_Params AddInstanceVertexWeightBoneParented_Params;
	memset(&AddInstanceVertexWeightBoneParented_Params, 0, sizeof(AddInstanceVertexWeightBoneParented_Params));
	memcpy_s(&AddInstanceVertexWeightBoneParented_Params.BoneName, sizeof(AddInstanceVertexWeightBoneParented_Params.BoneName), &BoneName, sizeof(BoneName));
	AddInstanceVertexWeightBoneParented_Params.bPairWithParent = bPairWithParent;

	uFnAddInstanceVertexWeightBoneParented->iNative = 0;
	uFnAddInstanceVertexWeightBoneParented->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnAddInstanceVertexWeightBoneParented, &AddInstanceVertexWeightBoneParented_Params, nullptr);
	uFnAddInstanceVertexWeightBoneParented->FunctionFlags |= 0x400;
	uFnAddInstanceVertexWeightBoneParented->iNative = 15312;
};

// Function Engine.SkeletalMeshComponent.GetBonesWithinRadius
// [0x00420401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20517])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FVector                 Origin                         (CPF_Parm)
// float                          Radius                         (CPF_Parm)
// int32_t                        TraceFlags                     (CPF_Parm)
// class TArray<class FName>      out_Bones                      (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

bool USkeletalMeshComponent::GetBonesWithinRadius(const struct FVector& Origin, float Radius, int32_t TraceFlags, class TArray<class FName>& out_Bones)
{
	static UFunction* uFnGetBonesWithinRadius = nullptr;

	if (!uFnGetBonesWithinRadius)
	{
		uFnGetBonesWithinRadius = UFunction::FindFunction("Function Engine.SkeletalMeshComponent.GetBonesWithinRadius");
	}

	USkeletalMeshComponent_execGetBonesWithinRadius_Params GetBonesWithinRadius_Params;
	memset(&GetBonesWithinRadius_Params, 0, sizeof(GetBonesWithinRadius_Params));
	memcpy_s(&GetBonesWithinRadius_Params.Origin, sizeof(GetBonesWithinRadius_Params.Origin), &Origin, sizeof(Origin));
	memcpy_s(&GetBonesWithinRadius_Params.Radius, sizeof(GetBonesWithinRadius_Params.Radius), &Radius, sizeof(Radius));
	memcpy_s(&GetBonesWithinRadius_Params.TraceFlags, sizeof(GetBonesWithinRadius_Params.TraceFlags), &TraceFlags, sizeof(TraceFlags));
	memcpy_s(&GetBonesWithinRadius_Params.out_Bones, sizeof(GetBonesWithinRadius_Params.out_Bones), &out_Bones, sizeof(out_Bones));

	uFnGetBonesWithinRadius->iNative = 0;
	uFnGetBonesWithinRadius->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetBonesWithinRadius, &GetBonesWithinRadius_Params, nullptr);
	uFnGetBonesWithinRadius->FunctionFlags |= 0x400;
	uFnGetBonesWithinRadius->iNative = 20517;

	memcpy_s(&out_Bones, sizeof(out_Bones), &GetBonesWithinRadius_Params.out_Bones, sizeof(GetBonesWithinRadius_Params.out_Bones));

	return GetBonesWithinRadius_Params.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.UpdateAnimations
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[26973])
// Parameter Info:

void USkeletalMeshComponent::UpdateAnimations()
{
	static UFunction* uFnUpdateAnimations = nullptr;

	if (!uFnUpdateAnimations)
	{
		uFnUpdateAnimations = UFunction::FindFunction("Function Engine.SkeletalMeshComponent.UpdateAnimations");
	}

	USkeletalMeshComponent_execUpdateAnimations_Params UpdateAnimations_Params;
	memset(&UpdateAnimations_Params, 0, sizeof(UpdateAnimations_Params));

	uFnUpdateAnimations->iNative = 0;
	uFnUpdateAnimations->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnUpdateAnimations, &UpdateAnimations_Params, nullptr);
	uFnUpdateAnimations->FunctionFlags |= 0x400;
	uFnUpdateAnimations->iNative = 26973;
};

// Function Engine.SkeletalMeshComponent.ForceSkelUpdate
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20277])
// Parameter Info:

void USkeletalMeshComponent::ForceSkelUpdate()
{
	static UFunction* uFnForceSkelUpdate = nullptr;

	if (!uFnForceSkelUpdate)
	{
		uFnForceSkelUpdate = UFunction::FindFunction("Function Engine.SkeletalMeshComponent.ForceSkelUpdate");
	}

	USkeletalMeshComponent_execForceSkelUpdate_Params ForceSkelUpdate_Params;
	memset(&ForceSkelUpdate_Params, 0, sizeof(ForceSkelUpdate_Params));

	uFnForceSkelUpdate->iNative = 0;
	uFnForceSkelUpdate->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnForceSkelUpdate, &ForceSkelUpdate_Params, nullptr);
	uFnForceSkelUpdate->FunctionFlags |= 0x400;
	uFnForceSkelUpdate->iNative = 20277;
};

// Function Engine.SkeletalMeshComponent.UpdateRBBonesFromSpaceBases
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[26997])
// Parameter Info:
// uint32_t                       bMoveUnfixedBodies             (CPF_Parm)
// uint32_t                       bTeleport                      (CPF_Parm)

void USkeletalMeshComponent::UpdateRBBonesFromSpaceBases(bool bMoveUnfixedBodies, bool bTeleport)
{
	static UFunction* uFnUpdateRBBonesFromSpaceBases = nullptr;

	if (!uFnUpdateRBBonesFromSpaceBases)
	{
		uFnUpdateRBBonesFromSpaceBases = UFunction::FindFunction("Function Engine.SkeletalMeshComponent.UpdateRBBonesFromSpaceBases");
	}

	USkeletalMeshComponent_execUpdateRBBonesFromSpaceBases_Params UpdateRBBonesFromSpaceBases_Params;
	memset(&UpdateRBBonesFromSpaceBases_Params, 0, sizeof(UpdateRBBonesFromSpaceBases_Params));
	UpdateRBBonesFromSpaceBases_Params.bMoveUnfixedBodies = bMoveUnfixedBodies;
	UpdateRBBonesFromSpaceBases_Params.bTeleport = bTeleport;

	uFnUpdateRBBonesFromSpaceBases->iNative = 0;
	uFnUpdateRBBonesFromSpaceBases->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnUpdateRBBonesFromSpaceBases, &UpdateRBBonesFromSpaceBases_Params, nullptr);
	uFnUpdateRBBonesFromSpaceBases->FunctionFlags |= 0x400;
	uFnUpdateRBBonesFromSpaceBases->iNative = 26997;
};

// Function Engine.SkeletalMeshComponent.SetHasPhysicsAssetInstance
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25674])
// Parameter Info:
// uint32_t                       bHasInstance                   (CPF_Parm)

void USkeletalMeshComponent::SetHasPhysicsAssetInstance(bool bHasInstance)
{
	static UFunction* uFnSetHasPhysicsAssetInstance = nullptr;

	if (!uFnSetHasPhysicsAssetInstance)
	{
		uFnSetHasPhysicsAssetInstance = UFunction::FindFunction("Function Engine.SkeletalMeshComponent.SetHasPhysicsAssetInstance");
	}

	USkeletalMeshComponent_execSetHasPhysicsAssetInstance_Params SetHasPhysicsAssetInstance_Params;
	memset(&SetHasPhysicsAssetInstance_Params, 0, sizeof(SetHasPhysicsAssetInstance_Params));
	SetHasPhysicsAssetInstance_Params.bHasInstance = bHasInstance;

	uFnSetHasPhysicsAssetInstance->iNative = 0;
	uFnSetHasPhysicsAssetInstance->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetHasPhysicsAssetInstance, &SetHasPhysicsAssetInstance_Params, nullptr);
	uFnSetHasPhysicsAssetInstance->FunctionFlags |= 0x400;
	uFnSetHasPhysicsAssetInstance->iNative = 25674;
};

// Function Engine.SkeletalMeshComponent.FindBodyInstanceNamed
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20086])
// Parameter Info:
// class URB_BodyInstance*        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    BoneName                       (CPF_Parm)

class URB_BodyInstance* USkeletalMeshComponent::FindBodyInstanceNamed(const class FName& BoneName)
{
	static UFunction* uFnFindBodyInstanceNamed = nullptr;

	if (!uFnFindBodyInstanceNamed)
	{
		uFnFindBodyInstanceNamed = UFunction::FindFunction("Function Engine.SkeletalMeshComponent.FindBodyInstanceNamed");
	}

	USkeletalMeshComponent_execFindBodyInstanceNamed_Params FindBodyInstanceNamed_Params;
	memset(&FindBodyInstanceNamed_Params, 0, sizeof(FindBodyInstanceNamed_Params));
	memcpy_s(&FindBodyInstanceNamed_Params.BoneName, sizeof(FindBodyInstanceNamed_Params.BoneName), &BoneName, sizeof(BoneName));

	uFnFindBodyInstanceNamed->iNative = 0;
	uFnFindBodyInstanceNamed->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnFindBodyInstanceNamed, &FindBodyInstanceNamed_Params, nullptr);
	uFnFindBodyInstanceNamed->FunctionFlags |= 0x400;
	uFnFindBodyInstanceNamed->iNative = 20086;

	return FindBodyInstanceNamed_Params.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.FindConstraintBoneName
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20092])
// Parameter Info:
// class FName                    ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        ConstraintIndex                (CPF_Parm)

class FName USkeletalMeshComponent::FindConstraintBoneName(int32_t ConstraintIndex)
{
	static UFunction* uFnFindConstraintBoneName = nullptr;

	if (!uFnFindConstraintBoneName)
	{
		uFnFindConstraintBoneName = UFunction::FindFunction("Function Engine.SkeletalMeshComponent.FindConstraintBoneName");
	}

	USkeletalMeshComponent_execFindConstraintBoneName_Params FindConstraintBoneName_Params;
	memset(&FindConstraintBoneName_Params, 0, sizeof(FindConstraintBoneName_Params));
	memcpy_s(&FindConstraintBoneName_Params.ConstraintIndex, sizeof(FindConstraintBoneName_Params.ConstraintIndex), &ConstraintIndex, sizeof(ConstraintIndex));

	uFnFindConstraintBoneName->iNative = 0;
	uFnFindConstraintBoneName->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnFindConstraintBoneName, &FindConstraintBoneName_Params, nullptr);
	uFnFindConstraintBoneName->FunctionFlags |= 0x400;
	uFnFindConstraintBoneName->iNative = 20092;

	return FindConstraintBoneName_Params.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.FindConstraintIndex
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20093])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    ConstraintName                 (CPF_Parm)

int32_t USkeletalMeshComponent::FindConstraintIndex(const class FName& ConstraintName)
{
	static UFunction* uFnFindConstraintIndex = nullptr;

	if (!uFnFindConstraintIndex)
	{
		uFnFindConstraintIndex = UFunction::FindFunction("Function Engine.SkeletalMeshComponent.FindConstraintIndex");
	}

	USkeletalMeshComponent_execFindConstraintIndex_Params FindConstraintIndex_Params;
	memset(&FindConstraintIndex_Params, 0, sizeof(FindConstraintIndex_Params));
	memcpy_s(&FindConstraintIndex_Params.ConstraintName, sizeof(FindConstraintIndex_Params.ConstraintName), &ConstraintName, sizeof(ConstraintName));

	uFnFindConstraintIndex->iNative = 0;
	uFnFindConstraintIndex->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnFindConstraintIndex, &FindConstraintIndex_Params, nullptr);
	uFnFindConstraintIndex->FunctionFlags |= 0x400;
	uFnFindConstraintIndex->iNative = 20093;

	return FindConstraintIndex_Params.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.InitSkelControls
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[21168])
// Parameter Info:

void USkeletalMeshComponent::InitSkelControls()
{
	static UFunction* uFnInitSkelControls = nullptr;

	if (!uFnInitSkelControls)
	{
		uFnInitSkelControls = UFunction::FindFunction("Function Engine.SkeletalMeshComponent.InitSkelControls");
	}

	USkeletalMeshComponent_execInitSkelControls_Params InitSkelControls_Params;
	memset(&InitSkelControls_Params, 0, sizeof(InitSkelControls_Params));

	uFnInitSkelControls->iNative = 0;
	uFnInitSkelControls->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnInitSkelControls, &InitSkelControls_Params, nullptr);
	uFnInitSkelControls->FunctionFlags |= 0x400;
	uFnInitSkelControls->iNative = 21168;
};

// Function Engine.SkeletalMeshComponent.UpdateParentBoneMap
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[26992])
// Parameter Info:

void USkeletalMeshComponent::UpdateParentBoneMap()
{
	static UFunction* uFnUpdateParentBoneMap = nullptr;

	if (!uFnUpdateParentBoneMap)
	{
		uFnUpdateParentBoneMap = UFunction::FindFunction("Function Engine.SkeletalMeshComponent.UpdateParentBoneMap");
	}

	USkeletalMeshComponent_execUpdateParentBoneMap_Params UpdateParentBoneMap_Params;
	memset(&UpdateParentBoneMap_Params, 0, sizeof(UpdateParentBoneMap_Params));

	uFnUpdateParentBoneMap->iNative = 0;
	uFnUpdateParentBoneMap->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnUpdateParentBoneMap, &UpdateParentBoneMap_Params, nullptr);
	uFnUpdateParentBoneMap->FunctionFlags |= 0x400;
	uFnUpdateParentBoneMap->iNative = 26992;
};

// Function Engine.SkeletalMeshComponent.SetParentAnimComponent
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25735])
// Parameter Info:
// class USkeletalMeshComponent*  NewParentAnimComp              (CPF_Parm | CPF_EditInline)

void USkeletalMeshComponent::SetParentAnimComponent(class USkeletalMeshComponent* NewParentAnimComp)
{
	static UFunction* uFnSetParentAnimComponent = nullptr;

	if (!uFnSetParentAnimComponent)
	{
		uFnSetParentAnimComponent = UFunction::FindFunction("Function Engine.SkeletalMeshComponent.SetParentAnimComponent");
	}

	USkeletalMeshComponent_execSetParentAnimComponent_Params SetParentAnimComponent_Params;
	memset(&SetParentAnimComponent_Params, 0, sizeof(SetParentAnimComponent_Params));
	SetParentAnimComponent_Params.NewParentAnimComp = NewParentAnimComp;

	uFnSetParentAnimComponent->iNative = 0;
	uFnSetParentAnimComponent->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetParentAnimComponent, &SetParentAnimComponent_Params, nullptr);
	uFnSetParentAnimComponent->FunctionFlags |= 0x400;
	uFnSetParentAnimComponent->iNative = 25735;
};

// Function Engine.SkeletalMeshComponent.SetAnimTreeTemplate
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25587])
// Parameter Info:
// class UAnimTree*               NewTemplate                    (CPF_Parm)

void USkeletalMeshComponent::SetAnimTreeTemplate(class UAnimTree* NewTemplate)
{
	static UFunction* uFnSetAnimTreeTemplate = nullptr;

	if (!uFnSetAnimTreeTemplate)
	{
		uFnSetAnimTreeTemplate = UFunction::FindFunction("Function Engine.SkeletalMeshComponent.SetAnimTreeTemplate");
	}

	USkeletalMeshComponent_execSetAnimTreeTemplate_Params SetAnimTreeTemplate_Params;
	memset(&SetAnimTreeTemplate_Params, 0, sizeof(SetAnimTreeTemplate_Params));
	SetAnimTreeTemplate_Params.NewTemplate = NewTemplate;

	uFnSetAnimTreeTemplate->iNative = 0;
	uFnSetAnimTreeTemplate->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetAnimTreeTemplate, &SetAnimTreeTemplate_Params, nullptr);
	uFnSetAnimTreeTemplate->FunctionFlags |= 0x400;
	uFnSetAnimTreeTemplate->iNative = 25587;
};

// Function Engine.SkeletalMeshComponent.GetClosestCollidingBoneLocation
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20527])
// Parameter Info:
// struct FVector                 ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FVector                 TestLocation                   (CPF_Parm)
// uint32_t                       bCheckZeroExtent               (CPF_Parm)
// uint32_t                       bCheckNonZeroExtent            (CPF_Parm)

struct FVector USkeletalMeshComponent::GetClosestCollidingBoneLocation(const struct FVector& TestLocation, bool bCheckZeroExtent, bool bCheckNonZeroExtent)
{
	static UFunction* uFnGetClosestCollidingBoneLocation = nullptr;

	if (!uFnGetClosestCollidingBoneLocation)
	{
		uFnGetClosestCollidingBoneLocation = UFunction::FindFunction("Function Engine.SkeletalMeshComponent.GetClosestCollidingBoneLocation");
	}

	USkeletalMeshComponent_execGetClosestCollidingBoneLocation_Params GetClosestCollidingBoneLocation_Params;
	memset(&GetClosestCollidingBoneLocation_Params, 0, sizeof(GetClosestCollidingBoneLocation_Params));
	memcpy_s(&GetClosestCollidingBoneLocation_Params.TestLocation, sizeof(GetClosestCollidingBoneLocation_Params.TestLocation), &TestLocation, sizeof(TestLocation));
	GetClosestCollidingBoneLocation_Params.bCheckZeroExtent = bCheckZeroExtent;
	GetClosestCollidingBoneLocation_Params.bCheckNonZeroExtent = bCheckNonZeroExtent;

	uFnGetClosestCollidingBoneLocation->iNative = 0;
	uFnGetClosestCollidingBoneLocation->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetClosestCollidingBoneLocation, &GetClosestCollidingBoneLocation_Params, nullptr);
	uFnGetClosestCollidingBoneLocation->FunctionFlags |= 0x400;
	uFnGetClosestCollidingBoneLocation->iNative = 20527;

	return GetClosestCollidingBoneLocation_Params.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.FindClosestBone
// [0x00424401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20089])
// Parameter Info:
// class FName                    ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FVector                 TestLocation                   (CPF_Parm)
// float                          IgnoreScale                    (CPF_OptionalParm | CPF_Parm)
// struct FVector                 BoneLocation                   (CPF_OptionalParm | CPF_Parm | CPF_OutParm)

class FName USkeletalMeshComponent::FindClosestBone(const struct FVector& TestLocation, float IgnoreScale, struct FVector& BoneLocation)
{
	static UFunction* uFnFindClosestBone = nullptr;

	if (!uFnFindClosestBone)
	{
		uFnFindClosestBone = UFunction::FindFunction("Function Engine.SkeletalMeshComponent.FindClosestBone");
	}

	USkeletalMeshComponent_execFindClosestBone_Params FindClosestBone_Params;
	memset(&FindClosestBone_Params, 0, sizeof(FindClosestBone_Params));
	memcpy_s(&FindClosestBone_Params.TestLocation, sizeof(FindClosestBone_Params.TestLocation), &TestLocation, sizeof(TestLocation));
	memcpy_s(&FindClosestBone_Params.IgnoreScale, sizeof(FindClosestBone_Params.IgnoreScale), &IgnoreScale, sizeof(IgnoreScale));
	memcpy_s(&FindClosestBone_Params.BoneLocation, sizeof(FindClosestBone_Params.BoneLocation), &BoneLocation, sizeof(BoneLocation));

	uFnFindClosestBone->iNative = 0;
	uFnFindClosestBone->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnFindClosestBone, &FindClosestBone_Params, nullptr);
	uFnFindClosestBone->FunctionFlags |= 0x400;
	uFnFindClosestBone->iNative = 20089;

	memcpy_s(&BoneLocation, sizeof(BoneLocation), &FindClosestBone_Params.BoneLocation, sizeof(FindClosestBone_Params.BoneLocation));

	return FindClosestBone_Params.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.TransformFromBoneSpace
// [0x00420401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[26810])
// Parameter Info:
// class FName                    BoneName                       (CPF_Parm)
// struct FVector                 InPosition                     (CPF_Parm)
// struct FRotator                InRotation                     (CPF_Parm)
// struct FVector                 OutPosition                    (CPF_Parm | CPF_OutParm)
// struct FRotator                OutRotation                    (CPF_Parm | CPF_OutParm)

void USkeletalMeshComponent::TransformFromBoneSpace(const class FName& BoneName, const struct FVector& InPosition, const struct FRotator& InRotation, struct FVector& OutPosition, struct FRotator& OutRotation)
{
	static UFunction* uFnTransformFromBoneSpace = nullptr;

	if (!uFnTransformFromBoneSpace)
	{
		uFnTransformFromBoneSpace = UFunction::FindFunction("Function Engine.SkeletalMeshComponent.TransformFromBoneSpace");
	}

	USkeletalMeshComponent_execTransformFromBoneSpace_Params TransformFromBoneSpace_Params;
	memset(&TransformFromBoneSpace_Params, 0, sizeof(TransformFromBoneSpace_Params));
	memcpy_s(&TransformFromBoneSpace_Params.BoneName, sizeof(TransformFromBoneSpace_Params.BoneName), &BoneName, sizeof(BoneName));
	memcpy_s(&TransformFromBoneSpace_Params.InPosition, sizeof(TransformFromBoneSpace_Params.InPosition), &InPosition, sizeof(InPosition));
	memcpy_s(&TransformFromBoneSpace_Params.InRotation, sizeof(TransformFromBoneSpace_Params.InRotation), &InRotation, sizeof(InRotation));
	memcpy_s(&TransformFromBoneSpace_Params.OutPosition, sizeof(TransformFromBoneSpace_Params.OutPosition), &OutPosition, sizeof(OutPosition));
	memcpy_s(&TransformFromBoneSpace_Params.OutRotation, sizeof(TransformFromBoneSpace_Params.OutRotation), &OutRotation, sizeof(OutRotation));

	uFnTransformFromBoneSpace->iNative = 0;
	uFnTransformFromBoneSpace->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnTransformFromBoneSpace, &TransformFromBoneSpace_Params, nullptr);
	uFnTransformFromBoneSpace->FunctionFlags |= 0x400;
	uFnTransformFromBoneSpace->iNative = 26810;

	memcpy_s(&OutPosition, sizeof(OutPosition), &TransformFromBoneSpace_Params.OutPosition, sizeof(TransformFromBoneSpace_Params.OutPosition));
	memcpy_s(&OutRotation, sizeof(OutRotation), &TransformFromBoneSpace_Params.OutRotation, sizeof(TransformFromBoneSpace_Params.OutRotation));
};

// Function Engine.SkeletalMeshComponent.TransformToBoneSpace
// [0x00420401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[26814])
// Parameter Info:
// class FName                    BoneName                       (CPF_Parm)
// struct FVector                 InPosition                     (CPF_Parm)
// struct FRotator                InRotation                     (CPF_Parm)
// struct FVector                 OutPosition                    (CPF_Parm | CPF_OutParm)
// struct FRotator                OutRotation                    (CPF_Parm | CPF_OutParm)

void USkeletalMeshComponent::TransformToBoneSpace(const class FName& BoneName, const struct FVector& InPosition, const struct FRotator& InRotation, struct FVector& OutPosition, struct FRotator& OutRotation)
{
	static UFunction* uFnTransformToBoneSpace = nullptr;

	if (!uFnTransformToBoneSpace)
	{
		uFnTransformToBoneSpace = UFunction::FindFunction("Function Engine.SkeletalMeshComponent.TransformToBoneSpace");
	}

	USkeletalMeshComponent_execTransformToBoneSpace_Params TransformToBoneSpace_Params;
	memset(&TransformToBoneSpace_Params, 0, sizeof(TransformToBoneSpace_Params));
	memcpy_s(&TransformToBoneSpace_Params.BoneName, sizeof(TransformToBoneSpace_Params.BoneName), &BoneName, sizeof(BoneName));
	memcpy_s(&TransformToBoneSpace_Params.InPosition, sizeof(TransformToBoneSpace_Params.InPosition), &InPosition, sizeof(InPosition));
	memcpy_s(&TransformToBoneSpace_Params.InRotation, sizeof(TransformToBoneSpace_Params.InRotation), &InRotation, sizeof(InRotation));
	memcpy_s(&TransformToBoneSpace_Params.OutPosition, sizeof(TransformToBoneSpace_Params.OutPosition), &OutPosition, sizeof(OutPosition));
	memcpy_s(&TransformToBoneSpace_Params.OutRotation, sizeof(TransformToBoneSpace_Params.OutRotation), &OutRotation, sizeof(OutRotation));

	uFnTransformToBoneSpace->iNative = 0;
	uFnTransformToBoneSpace->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnTransformToBoneSpace, &TransformToBoneSpace_Params, nullptr);
	uFnTransformToBoneSpace->FunctionFlags |= 0x400;
	uFnTransformToBoneSpace->iNative = 26814;

	memcpy_s(&OutPosition, sizeof(OutPosition), &TransformToBoneSpace_Params.OutPosition, sizeof(TransformToBoneSpace_Params.OutPosition));
	memcpy_s(&OutRotation, sizeof(OutRotation), &TransformToBoneSpace_Params.OutRotation, sizeof(TransformToBoneSpace_Params.OutRotation));
};

// Function Engine.SkeletalMeshComponent.GetBoneAxis
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20510])
// Parameter Info:
// struct FVector                 ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    BoneName                       (CPF_Parm)
// EAxis                          Axis                           (CPF_Parm)

struct FVector USkeletalMeshComponent::GetBoneAxis(const class FName& BoneName, EAxis Axis)
{
	static UFunction* uFnGetBoneAxis = nullptr;

	if (!uFnGetBoneAxis)
	{
		uFnGetBoneAxis = UFunction::FindFunction("Function Engine.SkeletalMeshComponent.GetBoneAxis");
	}

	USkeletalMeshComponent_execGetBoneAxis_Params GetBoneAxis_Params;
	memset(&GetBoneAxis_Params, 0, sizeof(GetBoneAxis_Params));
	memcpy_s(&GetBoneAxis_Params.BoneName, sizeof(GetBoneAxis_Params.BoneName), &BoneName, sizeof(BoneName));
	memcpy_s(&GetBoneAxis_Params.Axis, sizeof(GetBoneAxis_Params.Axis), &Axis, sizeof(Axis));

	uFnGetBoneAxis->iNative = 0;
	uFnGetBoneAxis->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetBoneAxis, &GetBoneAxis_Params, nullptr);
	uFnGetBoneAxis->FunctionFlags |= 0x400;
	uFnGetBoneAxis->iNative = 20510;

	return GetBoneAxis_Params.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetRefPosePosition
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20731])
// Parameter Info:
// struct FVector                 ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        BoneIndex                      (CPF_Parm)

struct FVector USkeletalMeshComponent::GetRefPosePosition(int32_t BoneIndex)
{
	static UFunction* uFnGetRefPosePosition = nullptr;

	if (!uFnGetRefPosePosition)
	{
		uFnGetRefPosePosition = UFunction::FindFunction("Function Engine.SkeletalMeshComponent.GetRefPosePosition");
	}

	USkeletalMeshComponent_execGetRefPosePosition_Params GetRefPosePosition_Params;
	memset(&GetRefPosePosition_Params, 0, sizeof(GetRefPosePosition_Params));
	memcpy_s(&GetRefPosePosition_Params.BoneIndex, sizeof(GetRefPosePosition_Params.BoneIndex), &BoneIndex, sizeof(BoneIndex));

	uFnGetRefPosePosition->iNative = 0;
	uFnGetRefPosePosition->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetRefPosePosition, &GetRefPosePosition_Params, nullptr);
	uFnGetRefPosePosition->FunctionFlags |= 0x400;
	uFnGetRefPosePosition->iNative = 20731;

	return GetRefPosePosition_Params.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.BoneIsChildOf
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[17098])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    BoneName                       (CPF_Parm)
// class FName                    ParentBoneName                 (CPF_Parm)

bool USkeletalMeshComponent::BoneIsChildOf(const class FName& BoneName, const class FName& ParentBoneName)
{
	static UFunction* uFnBoneIsChildOf = nullptr;

	if (!uFnBoneIsChildOf)
	{
		uFnBoneIsChildOf = UFunction::FindFunction("Function Engine.SkeletalMeshComponent.BoneIsChildOf");
	}

	USkeletalMeshComponent_execBoneIsChildOf_Params BoneIsChildOf_Params;
	memset(&BoneIsChildOf_Params, 0, sizeof(BoneIsChildOf_Params));
	memcpy_s(&BoneIsChildOf_Params.BoneName, sizeof(BoneIsChildOf_Params.BoneName), &BoneName, sizeof(BoneName));
	memcpy_s(&BoneIsChildOf_Params.ParentBoneName, sizeof(BoneIsChildOf_Params.ParentBoneName), &ParentBoneName, sizeof(ParentBoneName));

	uFnBoneIsChildOf->iNative = 0;
	uFnBoneIsChildOf->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnBoneIsChildOf, &BoneIsChildOf_Params, nullptr);
	uFnBoneIsChildOf->FunctionFlags |= 0x400;
	uFnBoneIsChildOf->iNative = 17098;

	return BoneIsChildOf_Params.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetBoneNames
// [0x00420401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20515])
// Parameter Info:
// class TArray<class FName>      BoneNames                      (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void USkeletalMeshComponent::GetBoneNames(class TArray<class FName>& BoneNames)
{
	static UFunction* uFnGetBoneNames = nullptr;

	if (!uFnGetBoneNames)
	{
		uFnGetBoneNames = UFunction::FindFunction("Function Engine.SkeletalMeshComponent.GetBoneNames");
	}

	USkeletalMeshComponent_execGetBoneNames_Params GetBoneNames_Params;
	memset(&GetBoneNames_Params, 0, sizeof(GetBoneNames_Params));
	memcpy_s(&GetBoneNames_Params.BoneNames, sizeof(GetBoneNames_Params.BoneNames), &BoneNames, sizeof(BoneNames));

	uFnGetBoneNames->iNative = 0;
	uFnGetBoneNames->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetBoneNames, &GetBoneNames_Params, nullptr);
	uFnGetBoneNames->FunctionFlags |= 0x400;
	uFnGetBoneNames->iNative = 20515;

	memcpy_s(&BoneNames, sizeof(BoneNames), &GetBoneNames_Params.BoneNames, sizeof(GetBoneNames_Params.BoneNames));
};

// Function Engine.SkeletalMeshComponent.GetParentBone
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20669])
// Parameter Info:
// class FName                    ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    BoneName                       (CPF_Parm)

class FName USkeletalMeshComponent::GetParentBone(const class FName& BoneName)
{
	static UFunction* uFnGetParentBone = nullptr;

	if (!uFnGetParentBone)
	{
		uFnGetParentBone = UFunction::FindFunction("Function Engine.SkeletalMeshComponent.GetParentBone");
	}

	USkeletalMeshComponent_execGetParentBone_Params GetParentBone_Params;
	memset(&GetParentBone_Params, 0, sizeof(GetParentBone_Params));
	memcpy_s(&GetParentBone_Params.BoneName, sizeof(GetParentBone_Params.BoneName), &BoneName, sizeof(BoneName));

	uFnGetParentBone->iNative = 0;
	uFnGetParentBone->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetParentBone, &GetParentBone_Params, nullptr);
	uFnGetParentBone->FunctionFlags |= 0x400;
	uFnGetParentBone->iNative = 20669;

	return GetParentBone_Params.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetBoneMatrixLocal
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20513])
// Parameter Info:
// struct FMatrix                 ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        BoneIndex                      (CPF_Parm)

struct FMatrix USkeletalMeshComponent::GetBoneMatrixLocal(int32_t BoneIndex)
{
	static UFunction* uFnGetBoneMatrixLocal = nullptr;

	if (!uFnGetBoneMatrixLocal)
	{
		uFnGetBoneMatrixLocal = UFunction::FindFunction("Function Engine.SkeletalMeshComponent.GetBoneMatrixLocal");
	}

	USkeletalMeshComponent_execGetBoneMatrixLocal_Params GetBoneMatrixLocal_Params;
	memset(&GetBoneMatrixLocal_Params, 0, sizeof(GetBoneMatrixLocal_Params));
	memcpy_s(&GetBoneMatrixLocal_Params.BoneIndex, sizeof(GetBoneMatrixLocal_Params.BoneIndex), &BoneIndex, sizeof(BoneIndex));

	uFnGetBoneMatrixLocal->iNative = 0;
	uFnGetBoneMatrixLocal->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetBoneMatrixLocal, &GetBoneMatrixLocal_Params, nullptr);
	uFnGetBoneMatrixLocal->FunctionFlags |= 0x400;
	uFnGetBoneMatrixLocal->iNative = 20513;

	return GetBoneMatrixLocal_Params.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetBoneMatrix
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20512])
// Parameter Info:
// struct FMatrix                 ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        BoneIndex                      (CPF_Parm)

struct FMatrix USkeletalMeshComponent::GetBoneMatrix(int32_t BoneIndex)
{
	static UFunction* uFnGetBoneMatrix = nullptr;

	if (!uFnGetBoneMatrix)
	{
		uFnGetBoneMatrix = UFunction::FindFunction("Function Engine.SkeletalMeshComponent.GetBoneMatrix");
	}

	USkeletalMeshComponent_execGetBoneMatrix_Params GetBoneMatrix_Params;
	memset(&GetBoneMatrix_Params, 0, sizeof(GetBoneMatrix_Params));
	memcpy_s(&GetBoneMatrix_Params.BoneIndex, sizeof(GetBoneMatrix_Params.BoneIndex), &BoneIndex, sizeof(BoneIndex));

	uFnGetBoneMatrix->iNative = 0;
	uFnGetBoneMatrix->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetBoneMatrix, &GetBoneMatrix_Params, nullptr);
	uFnGetBoneMatrix->FunctionFlags |= 0x400;
	uFnGetBoneMatrix->iNative = 20512;

	return GetBoneMatrix_Params.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetBoneName
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20514])
// Parameter Info:
// class FName                    ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        BoneIndex                      (CPF_Parm)

class FName USkeletalMeshComponent::GetBoneName(int32_t BoneIndex)
{
	static UFunction* uFnGetBoneName = nullptr;

	if (!uFnGetBoneName)
	{
		uFnGetBoneName = UFunction::FindFunction("Function Engine.SkeletalMeshComponent.GetBoneName");
	}

	USkeletalMeshComponent_execGetBoneName_Params GetBoneName_Params;
	memset(&GetBoneName_Params, 0, sizeof(GetBoneName_Params));
	memcpy_s(&GetBoneName_Params.BoneIndex, sizeof(GetBoneName_Params.BoneIndex), &BoneIndex, sizeof(BoneIndex));

	uFnGetBoneName->iNative = 0;
	uFnGetBoneName->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetBoneName, &GetBoneName_Params, nullptr);
	uFnGetBoneName->FunctionFlags |= 0x400;
	uFnGetBoneName->iNative = 20514;

	return GetBoneName_Params.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.MatchRefBone
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[22650])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    BoneName                       (CPF_Parm)

int32_t USkeletalMeshComponent::MatchRefBone(const class FName& BoneName)
{
	static UFunction* uFnMatchRefBone = nullptr;

	if (!uFnMatchRefBone)
	{
		uFnMatchRefBone = UFunction::FindFunction("Function Engine.SkeletalMeshComponent.MatchRefBone");
	}

	USkeletalMeshComponent_execMatchRefBone_Params MatchRefBone_Params;
	memset(&MatchRefBone_Params, 0, sizeof(MatchRefBone_Params));
	memcpy_s(&MatchRefBone_Params.BoneName, sizeof(MatchRefBone_Params.BoneName), &BoneName, sizeof(BoneName));

	uFnMatchRefBone->iNative = 0;
	uFnMatchRefBone->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnMatchRefBone, &MatchRefBone_Params, nullptr);
	uFnMatchRefBone->FunctionFlags |= 0x400;
	uFnMatchRefBone->iNative = 22650;

	return MatchRefBone_Params.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetBoneLocation
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[20511])
// Parameter Info:
// struct FVector                 ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    BoneName                       (CPF_Parm)
// int32_t                        Space                          (CPF_OptionalParm | CPF_Parm)

struct FVector USkeletalMeshComponent::GetBoneLocation(const class FName& BoneName, int32_t Space)
{
	static UFunction* uFnGetBoneLocation = nullptr;

	if (!uFnGetBoneLocation)
	{
		uFnGetBoneLocation = UFunction::FindFunction("Function Engine.SkeletalMeshComponent.GetBoneLocation");
	}

	USkeletalMeshComponent_execGetBoneLocation_Params GetBoneLocation_Params;
	memset(&GetBoneLocation_Params, 0, sizeof(GetBoneLocation_Params));
	memcpy_s(&GetBoneLocation_Params.BoneName, sizeof(GetBoneLocation_Params.BoneName), &BoneName, sizeof(BoneName));
	memcpy_s(&GetBoneLocation_Params.Space, sizeof(GetBoneLocation_Params.Space), &Space, sizeof(Space));

	uFnGetBoneLocation->iNative = 0;
	uFnGetBoneLocation->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetBoneLocation, &GetBoneLocation_Params, nullptr);
	uFnGetBoneLocation->FunctionFlags |= 0x400;
	uFnGetBoneLocation->iNative = 20511;

	return GetBoneLocation_Params.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetBoneQuaternion
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[20516])
// Parameter Info:
// struct FQuat                   ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    BoneName                       (CPF_Parm)
// int32_t                        Space                          (CPF_OptionalParm | CPF_Parm)

struct FQuat USkeletalMeshComponent::GetBoneQuaternion(const class FName& BoneName, int32_t Space)
{
	static UFunction* uFnGetBoneQuaternion = nullptr;

	if (!uFnGetBoneQuaternion)
	{
		uFnGetBoneQuaternion = UFunction::FindFunction("Function Engine.SkeletalMeshComponent.GetBoneQuaternion");
	}

	USkeletalMeshComponent_execGetBoneQuaternion_Params GetBoneQuaternion_Params;
	memset(&GetBoneQuaternion_Params, 0, sizeof(GetBoneQuaternion_Params));
	memcpy_s(&GetBoneQuaternion_Params.BoneName, sizeof(GetBoneQuaternion_Params.BoneName), &BoneName, sizeof(BoneName));
	memcpy_s(&GetBoneQuaternion_Params.Space, sizeof(GetBoneQuaternion_Params.Space), &Space, sizeof(Space));

	uFnGetBoneQuaternion->iNative = 0;
	uFnGetBoneQuaternion->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetBoneQuaternion, &GetBoneQuaternion_Params, nullptr);
	uFnGetBoneQuaternion->FunctionFlags |= 0x400;
	uFnGetBoneQuaternion->iNative = 20516;

	return GetBoneQuaternion_Params.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.FindSkelControl
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20120])
// Parameter Info:
// class USkelControlBase*        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    InControlName                  (CPF_Parm)

class USkelControlBase* USkeletalMeshComponent::FindSkelControl(const class FName& InControlName)
{
	static UFunction* uFnFindSkelControl = nullptr;

	if (!uFnFindSkelControl)
	{
		uFnFindSkelControl = UFunction::FindFunction("Function Engine.SkeletalMeshComponent.FindSkelControl");
	}

	USkeletalMeshComponent_execFindSkelControl_Params FindSkelControl_Params;
	memset(&FindSkelControl_Params, 0, sizeof(FindSkelControl_Params));
	memcpy_s(&FindSkelControl_Params.InControlName, sizeof(FindSkelControl_Params.InControlName), &InControlName, sizeof(InControlName));

	uFnFindSkelControl->iNative = 0;
	uFnFindSkelControl->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnFindSkelControl, &FindSkelControl_Params, nullptr);
	uFnFindSkelControl->FunctionFlags |= 0x400;
	uFnFindSkelControl->iNative = 20120;

	return FindSkelControl_Params.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.FindAnimNode
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20081])
// Parameter Info:
// class UAnimNode*               ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    InNodeName                     (CPF_Parm)

class UAnimNode* USkeletalMeshComponent::FindAnimNode(const class FName& InNodeName)
{
	static UFunction* uFnFindAnimNode = nullptr;

	if (!uFnFindAnimNode)
	{
		uFnFindAnimNode = UFunction::FindFunction("Function Engine.SkeletalMeshComponent.FindAnimNode");
	}

	USkeletalMeshComponent_execFindAnimNode_Params FindAnimNode_Params;
	memset(&FindAnimNode_Params, 0, sizeof(FindAnimNode_Params));
	memcpy_s(&FindAnimNode_Params.InNodeName, sizeof(FindAnimNode_Params.InNodeName), &InNodeName, sizeof(InNodeName));

	uFnFindAnimNode->iNative = 0;
	uFnFindAnimNode->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnFindAnimNode, &FindAnimNode_Params, nullptr);
	uFnFindAnimNode->FunctionFlags |= 0x400;
	uFnFindAnimNode->iNative = 20081;

	return FindAnimNode_Params.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.RestoreSavedAnimSets
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25179])
// Parameter Info:

void USkeletalMeshComponent::RestoreSavedAnimSets()
{
	static UFunction* uFnRestoreSavedAnimSets = nullptr;

	if (!uFnRestoreSavedAnimSets)
	{
		uFnRestoreSavedAnimSets = UFunction::FindFunction("Function Engine.SkeletalMeshComponent.RestoreSavedAnimSets");
	}

	USkeletalMeshComponent_execRestoreSavedAnimSets_Params RestoreSavedAnimSets_Params;
	memset(&RestoreSavedAnimSets_Params, 0, sizeof(RestoreSavedAnimSets_Params));

	uFnRestoreSavedAnimSets->iNative = 0;
	uFnRestoreSavedAnimSets->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnRestoreSavedAnimSets, &RestoreSavedAnimSets_Params, nullptr);
	uFnRestoreSavedAnimSets->FunctionFlags |= 0x400;
	uFnRestoreSavedAnimSets->iNative = 25179;
};

// Function Engine.SkeletalMeshComponent.SaveAnimSets
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25316])
// Parameter Info:

void USkeletalMeshComponent::SaveAnimSets()
{
	static UFunction* uFnSaveAnimSets = nullptr;

	if (!uFnSaveAnimSets)
	{
		uFnSaveAnimSets = UFunction::FindFunction("Function Engine.SkeletalMeshComponent.SaveAnimSets");
	}

	USkeletalMeshComponent_execSaveAnimSets_Params SaveAnimSets_Params;
	memset(&SaveAnimSets_Params, 0, sizeof(SaveAnimSets_Params));

	uFnSaveAnimSets->iNative = 0;
	uFnSaveAnimSets->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSaveAnimSets, &SaveAnimSets_Params, nullptr);
	uFnSaveAnimSets->FunctionFlags |= 0x400;
	uFnSaveAnimSets->iNative = 25316;
};

// Function Engine.SkeletalMeshComponent.FindAnimSequence
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20082])
// Parameter Info:
// class UAnimSequence*           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    AnimSeqName                    (CPF_Parm)

class UAnimSequence* USkeletalMeshComponent::FindAnimSequence(const class FName& AnimSeqName)
{
	static UFunction* uFnFindAnimSequence = nullptr;

	if (!uFnFindAnimSequence)
	{
		uFnFindAnimSequence = UFunction::FindFunction("Function Engine.SkeletalMeshComponent.FindAnimSequence");
	}

	USkeletalMeshComponent_execFindAnimSequence_Params FindAnimSequence_Params;
	memset(&FindAnimSequence_Params, 0, sizeof(FindAnimSequence_Params));
	memcpy_s(&FindAnimSequence_Params.AnimSeqName, sizeof(FindAnimSequence_Params.AnimSeqName), &AnimSeqName, sizeof(AnimSeqName));

	uFnFindAnimSequence->iNative = 0;
	uFnFindAnimSequence->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnFindAnimSequence, &FindAnimSequence_Params, nullptr);
	uFnFindAnimSequence->FunctionFlags |= 0x400;
	uFnFindAnimSequence->iNative = 20082;

	return FindAnimSequence_Params.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.SetForceRefPose
// [0x00020501] (FUNC_Final | FUNC_Simulated | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25663])
// Parameter Info:
// uint32_t                       bNewForceRefPose               (CPF_Parm)

void USkeletalMeshComponent::SetForceRefPose(bool bNewForceRefPose)
{
	static UFunction* uFnSetForceRefPose = nullptr;

	if (!uFnSetForceRefPose)
	{
		uFnSetForceRefPose = UFunction::FindFunction("Function Engine.SkeletalMeshComponent.SetForceRefPose");
	}

	USkeletalMeshComponent_execSetForceRefPose_Params SetForceRefPose_Params;
	memset(&SetForceRefPose_Params, 0, sizeof(SetForceRefPose_Params));
	SetForceRefPose_Params.bNewForceRefPose = bNewForceRefPose;

	uFnSetForceRefPose->iNative = 0;
	uFnSetForceRefPose->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetForceRefPose, &SetForceRefPose_Params, nullptr);
	uFnSetForceRefPose->FunctionFlags |= 0x400;
	uFnSetForceRefPose->iNative = 25663;
};

// Function Engine.SkeletalMeshComponent.SetPhysicsAsset
// [0x00024501] (FUNC_Final | FUNC_Simulated | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[25739])
// Parameter Info:
// class UPhysicsAsset*           NewPhysicsAsset                (CPF_Parm)
// uint32_t                       bForceReInit                   (CPF_OptionalParm | CPF_Parm)

void USkeletalMeshComponent::SetPhysicsAsset(class UPhysicsAsset* NewPhysicsAsset, bool bForceReInit)
{
	static UFunction* uFnSetPhysicsAsset = nullptr;

	if (!uFnSetPhysicsAsset)
	{
		uFnSetPhysicsAsset = UFunction::FindFunction("Function Engine.SkeletalMeshComponent.SetPhysicsAsset");
	}

	USkeletalMeshComponent_execSetPhysicsAsset_Params SetPhysicsAsset_Params;
	memset(&SetPhysicsAsset_Params, 0, sizeof(SetPhysicsAsset_Params));
	SetPhysicsAsset_Params.NewPhysicsAsset = NewPhysicsAsset;
	SetPhysicsAsset_Params.bForceReInit = bForceReInit;

	uFnSetPhysicsAsset->iNative = 0;
	uFnSetPhysicsAsset->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetPhysicsAsset, &SetPhysicsAsset_Params, nullptr);
	uFnSetPhysicsAsset->FunctionFlags |= 0x400;
	uFnSetPhysicsAsset->iNative = 25739;
};

// Function Engine.SkeletalMeshComponent.SetSkeletalMesh
// [0x00024501] (FUNC_Final | FUNC_Simulated | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[25794])
// Parameter Info:
// class USkeletalMesh*           NewMesh                        (CPF_Parm)
// uint32_t                       bKeepSpaceBases                (CPF_OptionalParm | CPF_Parm)

void USkeletalMeshComponent::SetSkeletalMesh(class USkeletalMesh* NewMesh, bool bKeepSpaceBases)
{
	static UFunction* uFnSetSkeletalMesh = nullptr;

	if (!uFnSetSkeletalMesh)
	{
		uFnSetSkeletalMesh = UFunction::FindFunction("Function Engine.SkeletalMeshComponent.SetSkeletalMesh");
	}

	USkeletalMeshComponent_execSetSkeletalMesh_Params SetSkeletalMesh_Params;
	memset(&SetSkeletalMesh_Params, 0, sizeof(SetSkeletalMesh_Params));
	SetSkeletalMesh_Params.NewMesh = NewMesh;
	SetSkeletalMesh_Params.bKeepSpaceBases = bKeepSpaceBases;

	uFnSetSkeletalMesh->iNative = 0;
	uFnSetSkeletalMesh->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetSkeletalMesh, &SetSkeletalMesh_Params, nullptr);
	uFnSetSkeletalMesh->FunctionFlags |= 0x400;
	uFnSetSkeletalMesh->iNative = 25794;
};

// Function Engine.SkeletalMeshComponent.GetTransformMatrix
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20794])
// Parameter Info:
// struct FMatrix                 ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

struct FMatrix USkeletalMeshComponent::GetTransformMatrix()
{
	static UFunction* uFnGetTransformMatrix = nullptr;

	if (!uFnGetTransformMatrix)
	{
		uFnGetTransformMatrix = UFunction::FindFunction("Function Engine.SkeletalMeshComponent.GetTransformMatrix");
	}

	USkeletalMeshComponent_execGetTransformMatrix_Params GetTransformMatrix_Params;
	memset(&GetTransformMatrix_Params, 0, sizeof(GetTransformMatrix_Params));

	uFnGetTransformMatrix->iNative = 0;
	uFnGetTransformMatrix->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetTransformMatrix, &GetTransformMatrix_Params, nullptr);
	uFnGetTransformMatrix->FunctionFlags |= 0x400;
	uFnGetTransformMatrix->iNative = 20794;

	return GetTransformMatrix_Params.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.AttachedComponents
// [0x00420405] (FUNC_Final | FUNC_Iterator | FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[15718])
// Parameter Info:
// class UActorComponent*         BaseClass                      (CPF_Parm)
// class UActorComponent*         OutComponent                   (CPF_Parm | CPF_OutParm | CPF_EditInline)

void USkeletalMeshComponent::AttachedComponents(class UActorComponent* BaseClass, class UActorComponent*& OutComponent)
{
	static UFunction* uFnAttachedComponents = nullptr;

	if (!uFnAttachedComponents)
	{
		uFnAttachedComponents = UFunction::FindFunction("Function Engine.SkeletalMeshComponent.AttachedComponents");
	}

	USkeletalMeshComponent_execAttachedComponents_Params AttachedComponents_Params;
	memset(&AttachedComponents_Params, 0, sizeof(AttachedComponents_Params));
	AttachedComponents_Params.BaseClass = BaseClass;
	AttachedComponents_Params.OutComponent = OutComponent;

	uFnAttachedComponents->iNative = 0;
	uFnAttachedComponents->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnAttachedComponents, &AttachedComponents_Params, nullptr);
	uFnAttachedComponents->FunctionFlags |= 0x400;
	uFnAttachedComponents->iNative = 15718;

	OutComponent = AttachedComponents_Params.OutComponent;
};

// Function Engine.SkeletalMeshComponent.IsComponentAttached
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[21364])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UActorComponent*         Component                      (CPF_Parm | CPF_EditInline)
// class FName                    BoneName                       (CPF_OptionalParm | CPF_Parm)

bool USkeletalMeshComponent::IsComponentAttached(class UActorComponent* Component, const class FName& BoneName)
{
	static UFunction* uFnIsComponentAttached = nullptr;

	if (!uFnIsComponentAttached)
	{
		uFnIsComponentAttached = UFunction::FindFunction("Function Engine.SkeletalMeshComponent.IsComponentAttached");
	}

	USkeletalMeshComponent_execIsComponentAttached_Params IsComponentAttached_Params;
	memset(&IsComponentAttached_Params, 0, sizeof(IsComponentAttached_Params));
	IsComponentAttached_Params.Component = Component;
	memcpy_s(&IsComponentAttached_Params.BoneName, sizeof(IsComponentAttached_Params.BoneName), &BoneName, sizeof(BoneName));

	uFnIsComponentAttached->iNative = 0;
	uFnIsComponentAttached->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnIsComponentAttached, &IsComponentAttached_Params, nullptr);
	uFnIsComponentAttached->FunctionFlags |= 0x400;
	uFnIsComponentAttached->iNative = 21364;

	return IsComponentAttached_Params.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.FindComponentAttachedToBone
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20091])
// Parameter Info:
// class UActorComponent*         ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline)
// class FName                    InBoneName                     (CPF_Parm)

class UActorComponent* USkeletalMeshComponent::FindComponentAttachedToBone(const class FName& InBoneName)
{
	static UFunction* uFnFindComponentAttachedToBone = nullptr;

	if (!uFnFindComponentAttachedToBone)
	{
		uFnFindComponentAttachedToBone = UFunction::FindFunction("Function Engine.SkeletalMeshComponent.FindComponentAttachedToBone");
	}

	USkeletalMeshComponent_execFindComponentAttachedToBone_Params FindComponentAttachedToBone_Params;
	memset(&FindComponentAttachedToBone_Params, 0, sizeof(FindComponentAttachedToBone_Params));
	memcpy_s(&FindComponentAttachedToBone_Params.InBoneName, sizeof(FindComponentAttachedToBone_Params.InBoneName), &InBoneName, sizeof(InBoneName));

	uFnFindComponentAttachedToBone->iNative = 0;
	uFnFindComponentAttachedToBone->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnFindComponentAttachedToBone, &FindComponentAttachedToBone_Params, nullptr);
	uFnFindComponentAttachedToBone->FunctionFlags |= 0x400;
	uFnFindComponentAttachedToBone->iNative = 20091;

	return FindComponentAttachedToBone_Params.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetSocketBoneName
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20755])
// Parameter Info:
// class FName                    ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    InSocketName                   (CPF_Parm)

class FName USkeletalMeshComponent::GetSocketBoneName(const class FName& InSocketName)
{
	static UFunction* uFnGetSocketBoneName = nullptr;

	if (!uFnGetSocketBoneName)
	{
		uFnGetSocketBoneName = UFunction::FindFunction("Function Engine.SkeletalMeshComponent.GetSocketBoneName");
	}

	USkeletalMeshComponent_execGetSocketBoneName_Params GetSocketBoneName_Params;
	memset(&GetSocketBoneName_Params, 0, sizeof(GetSocketBoneName_Params));
	memcpy_s(&GetSocketBoneName_Params.InSocketName, sizeof(GetSocketBoneName_Params.InSocketName), &InSocketName, sizeof(InSocketName));

	uFnGetSocketBoneName->iNative = 0;
	uFnGetSocketBoneName->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetSocketBoneName, &GetSocketBoneName_Params, nullptr);
	uFnGetSocketBoneName->FunctionFlags |= 0x400;
	uFnGetSocketBoneName->iNative = 20755;

	return GetSocketBoneName_Params.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetSocketByName
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20756])
// Parameter Info:
// class USkeletalMeshSocket*     ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    InSocketName                   (CPF_Parm)

class USkeletalMeshSocket* USkeletalMeshComponent::GetSocketByName(const class FName& InSocketName)
{
	static UFunction* uFnGetSocketByName = nullptr;

	if (!uFnGetSocketByName)
	{
		uFnGetSocketByName = UFunction::FindFunction("Function Engine.SkeletalMeshComponent.GetSocketByName");
	}

	USkeletalMeshComponent_execGetSocketByName_Params GetSocketByName_Params;
	memset(&GetSocketByName_Params, 0, sizeof(GetSocketByName_Params));
	memcpy_s(&GetSocketByName_Params.InSocketName, sizeof(GetSocketByName_Params.InSocketName), &InSocketName, sizeof(InSocketName));

	uFnGetSocketByName->iNative = 0;
	uFnGetSocketByName->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetSocketByName, &GetSocketByName_Params, nullptr);
	uFnGetSocketByName->FunctionFlags |= 0x400;
	uFnGetSocketByName->iNative = 20756;

	return GetSocketByName_Params.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetSocketWorldLocationAndRotation
// [0x00424401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20757])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    InSocketName                   (CPF_Parm)
// int32_t                        Space                          (CPF_OptionalParm | CPF_Parm)
// struct FVector                 OutLocation                    (CPF_Parm | CPF_OutParm)
// struct FRotator                OutRotation                    (CPF_OptionalParm | CPF_Parm | CPF_OutParm)

bool USkeletalMeshComponent::GetSocketWorldLocationAndRotation(const class FName& InSocketName, int32_t Space, struct FVector& OutLocation, struct FRotator& OutRotation)
{
	static UFunction* uFnGetSocketWorldLocationAndRotation = nullptr;

	if (!uFnGetSocketWorldLocationAndRotation)
	{
		uFnGetSocketWorldLocationAndRotation = UFunction::FindFunction("Function Engine.SkeletalMeshComponent.GetSocketWorldLocationAndRotation");
	}

	USkeletalMeshComponent_execGetSocketWorldLocationAndRotation_Params GetSocketWorldLocationAndRotation_Params;
	memset(&GetSocketWorldLocationAndRotation_Params, 0, sizeof(GetSocketWorldLocationAndRotation_Params));
	memcpy_s(&GetSocketWorldLocationAndRotation_Params.InSocketName, sizeof(GetSocketWorldLocationAndRotation_Params.InSocketName), &InSocketName, sizeof(InSocketName));
	memcpy_s(&GetSocketWorldLocationAndRotation_Params.Space, sizeof(GetSocketWorldLocationAndRotation_Params.Space), &Space, sizeof(Space));
	memcpy_s(&GetSocketWorldLocationAndRotation_Params.OutLocation, sizeof(GetSocketWorldLocationAndRotation_Params.OutLocation), &OutLocation, sizeof(OutLocation));
	memcpy_s(&GetSocketWorldLocationAndRotation_Params.OutRotation, sizeof(GetSocketWorldLocationAndRotation_Params.OutRotation), &OutRotation, sizeof(OutRotation));

	uFnGetSocketWorldLocationAndRotation->iNative = 0;
	uFnGetSocketWorldLocationAndRotation->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetSocketWorldLocationAndRotation, &GetSocketWorldLocationAndRotation_Params, nullptr);
	uFnGetSocketWorldLocationAndRotation->FunctionFlags |= 0x400;
	uFnGetSocketWorldLocationAndRotation->iNative = 20757;

	memcpy_s(&OutLocation, sizeof(OutLocation), &GetSocketWorldLocationAndRotation_Params.OutLocation, sizeof(GetSocketWorldLocationAndRotation_Params.OutLocation));
	memcpy_s(&OutRotation, sizeof(OutRotation), &GetSocketWorldLocationAndRotation_Params.OutRotation, sizeof(GetSocketWorldLocationAndRotation_Params.OutRotation));

	return GetSocketWorldLocationAndRotation_Params.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.AttachComponentToSocket
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[15716])
// Parameter Info:
// class UActorComponent*         Component                      (CPF_Parm | CPF_EditInline)
// class FName                    SocketName                     (CPF_Parm)

void USkeletalMeshComponent::AttachComponentToSocket(class UActorComponent* Component, const class FName& SocketName)
{
	static UFunction* uFnAttachComponentToSocket = nullptr;

	if (!uFnAttachComponentToSocket)
	{
		uFnAttachComponentToSocket = UFunction::FindFunction("Function Engine.SkeletalMeshComponent.AttachComponentToSocket");
	}

	USkeletalMeshComponent_execAttachComponentToSocket_Params AttachComponentToSocket_Params;
	memset(&AttachComponentToSocket_Params, 0, sizeof(AttachComponentToSocket_Params));
	AttachComponentToSocket_Params.Component = Component;
	memcpy_s(&AttachComponentToSocket_Params.SocketName, sizeof(AttachComponentToSocket_Params.SocketName), &SocketName, sizeof(SocketName));

	uFnAttachComponentToSocket->iNative = 0;
	uFnAttachComponentToSocket->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnAttachComponentToSocket, &AttachComponentToSocket_Params, nullptr);
	uFnAttachComponentToSocket->FunctionFlags |= 0x400;
	uFnAttachComponentToSocket->iNative = 15716;
};

// Function Engine.SkeletalMeshComponent.DetachComponent
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[18923])
// Parameter Info:
// class UActorComponent*         Component                      (CPF_Parm | CPF_EditInline)

void USkeletalMeshComponent::DetachComponent(class UActorComponent* Component)
{
	static UFunction* uFnDetachComponent = nullptr;

	if (!uFnDetachComponent)
	{
		uFnDetachComponent = UFunction::FindFunction("Function Engine.SkeletalMeshComponent.DetachComponent");
	}

	USkeletalMeshComponent_execDetachComponent_Params DetachComponent_Params;
	memset(&DetachComponent_Params, 0, sizeof(DetachComponent_Params));
	DetachComponent_Params.Component = Component;

	uFnDetachComponent->iNative = 0;
	uFnDetachComponent->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnDetachComponent, &DetachComponent_Params, nullptr);
	uFnDetachComponent->FunctionFlags |= 0x400;
	uFnDetachComponent->iNative = 18923;
};

// Function Engine.SkeletalMeshComponent.AttachComponent
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[15715])
// Parameter Info:
// class UActorComponent*         Component                      (CPF_Parm | CPF_EditInline)
// class FName                    BoneName                       (CPF_Parm)
// struct FVector                 RelativeLocation               (CPF_OptionalParm | CPF_Parm)
// struct FRotator                RelativeRotation               (CPF_OptionalParm | CPF_Parm)
// struct FVector                 RelativeScale                  (CPF_OptionalParm | CPF_Parm)

void USkeletalMeshComponent::AttachComponent(class UActorComponent* Component, const class FName& BoneName, const struct FVector& RelativeLocation, const struct FRotator& RelativeRotation, const struct FVector& RelativeScale)
{
	static UFunction* uFnAttachComponent = nullptr;

	if (!uFnAttachComponent)
	{
		uFnAttachComponent = UFunction::FindFunction("Function Engine.SkeletalMeshComponent.AttachComponent");
	}

	USkeletalMeshComponent_execAttachComponent_Params AttachComponent_Params;
	memset(&AttachComponent_Params, 0, sizeof(AttachComponent_Params));
	AttachComponent_Params.Component = Component;
	memcpy_s(&AttachComponent_Params.BoneName, sizeof(AttachComponent_Params.BoneName), &BoneName, sizeof(BoneName));
	memcpy_s(&AttachComponent_Params.RelativeLocation, sizeof(AttachComponent_Params.RelativeLocation), &RelativeLocation, sizeof(RelativeLocation));
	memcpy_s(&AttachComponent_Params.RelativeRotation, sizeof(AttachComponent_Params.RelativeRotation), &RelativeRotation, sizeof(RelativeRotation));
	memcpy_s(&AttachComponent_Params.RelativeScale, sizeof(AttachComponent_Params.RelativeScale), &RelativeScale, sizeof(RelativeScale));

	uFnAttachComponent->iNative = 0;
	uFnAttachComponent->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnAttachComponent, &AttachComponent_Params, nullptr);
	uFnAttachComponent->FunctionFlags |= 0x400;
	uFnAttachComponent->iNative = 15715;
};

// Function Engine.SplineActor.OnToggle
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_Toggle*          inAction                       (CPF_Parm)

void ASplineActor::OnToggle(class USeqAct_Toggle* inAction)
{
	static UFunction* uFnOnToggle = nullptr;

	if (!uFnOnToggle)
	{
		uFnOnToggle = UFunction::FindFunction("Function Engine.SplineActor.OnToggle");
	}

	ASplineActor_execOnToggle_Params OnToggle_Params;
	memset(&OnToggle_Params, 0, sizeof(OnToggle_Params));
	OnToggle_Params.inAction = inAction;

	this->ProcessEvent(uFnOnToggle, &OnToggle_Params, nullptr);
};

// Function Engine.SplineActor.GetAllConnectedSplineActors
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20492])
// Parameter Info:
// class TArray<class ASplineActor*> OutSet                         (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void ASplineActor::GetAllConnectedSplineActors(class TArray<class ASplineActor*>& OutSet)
{
	static UFunction* uFnGetAllConnectedSplineActors = nullptr;

	if (!uFnGetAllConnectedSplineActors)
	{
		uFnGetAllConnectedSplineActors = UFunction::FindFunction("Function Engine.SplineActor.GetAllConnectedSplineActors");
	}

	ASplineActor_execGetAllConnectedSplineActors_Params GetAllConnectedSplineActors_Params;
	memset(&GetAllConnectedSplineActors_Params, 0, sizeof(GetAllConnectedSplineActors_Params));
	memcpy_s(&GetAllConnectedSplineActors_Params.OutSet, sizeof(GetAllConnectedSplineActors_Params.OutSet), &OutSet, sizeof(OutSet));

	uFnGetAllConnectedSplineActors->iNative = 0;
	uFnGetAllConnectedSplineActors->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetAllConnectedSplineActors, &GetAllConnectedSplineActors_Params, nullptr);
	uFnGetAllConnectedSplineActors->FunctionFlags |= 0x400;
	uFnGetAllConnectedSplineActors->iNative = 20492;

	memcpy_s(&OutSet, sizeof(OutSet), &GetAllConnectedSplineActors_Params.OutSet, sizeof(GetAllConnectedSplineActors_Params.OutSet));
};

// Function Engine.SplineActor.FindSplinePathTo
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20122])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class ASplineActor*            Goal                           (CPF_Parm)
// class TArray<class ASplineActor*> OutRoute                       (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

bool ASplineActor::FindSplinePathTo(class ASplineActor* Goal, class TArray<class ASplineActor*>& OutRoute)
{
	static UFunction* uFnFindSplinePathTo = nullptr;

	if (!uFnFindSplinePathTo)
	{
		uFnFindSplinePathTo = UFunction::FindFunction("Function Engine.SplineActor.FindSplinePathTo");
	}

	ASplineActor_execFindSplinePathTo_Params FindSplinePathTo_Params;
	memset(&FindSplinePathTo_Params, 0, sizeof(FindSplinePathTo_Params));
	FindSplinePathTo_Params.Goal = Goal;
	memcpy_s(&FindSplinePathTo_Params.OutRoute, sizeof(FindSplinePathTo_Params.OutRoute), &OutRoute, sizeof(OutRoute));

	uFnFindSplinePathTo->iNative = 0;
	uFnFindSplinePathTo->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnFindSplinePathTo, &FindSplinePathTo_Params, nullptr);
	uFnFindSplinePathTo->FunctionFlags |= 0x400;
	uFnFindSplinePathTo->iNative = 20122;

	memcpy_s(&OutRoute, sizeof(OutRoute), &FindSplinePathTo_Params.OutRoute, sizeof(FindSplinePathTo_Params.OutRoute));

	return FindSplinePathTo_Params.ReturnValue;
};

// Function Engine.SplineActor.GetBestConnectionInDirection
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[20505])
// Parameter Info:
// class ASplineActor*            ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FVector                 DesiredDir                     (CPF_Parm)
// uint32_t                       bUseLinksFrom                  (CPF_OptionalParm | CPF_Parm)

class ASplineActor* ASplineActor::GetBestConnectionInDirection(const struct FVector& DesiredDir, bool bUseLinksFrom)
{
	static UFunction* uFnGetBestConnectionInDirection = nullptr;

	if (!uFnGetBestConnectionInDirection)
	{
		uFnGetBestConnectionInDirection = UFunction::FindFunction("Function Engine.SplineActor.GetBestConnectionInDirection");
	}

	ASplineActor_execGetBestConnectionInDirection_Params GetBestConnectionInDirection_Params;
	memset(&GetBestConnectionInDirection_Params, 0, sizeof(GetBestConnectionInDirection_Params));
	memcpy_s(&GetBestConnectionInDirection_Params.DesiredDir, sizeof(GetBestConnectionInDirection_Params.DesiredDir), &DesiredDir, sizeof(DesiredDir));
	GetBestConnectionInDirection_Params.bUseLinksFrom = bUseLinksFrom;

	uFnGetBestConnectionInDirection->iNative = 0;
	uFnGetBestConnectionInDirection->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetBestConnectionInDirection, &GetBestConnectionInDirection_Params, nullptr);
	uFnGetBestConnectionInDirection->FunctionFlags |= 0x400;
	uFnGetBestConnectionInDirection->iNative = 20505;

	return GetBestConnectionInDirection_Params.ReturnValue;
};

// Function Engine.SplineActor.GetRandomConnection
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[20725])
// Parameter Info:
// class ASplineActor*            ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       bUseLinksFrom                  (CPF_OptionalParm | CPF_Parm)

class ASplineActor* ASplineActor::GetRandomConnection(bool bUseLinksFrom)
{
	static UFunction* uFnGetRandomConnection = nullptr;

	if (!uFnGetRandomConnection)
	{
		uFnGetRandomConnection = UFunction::FindFunction("Function Engine.SplineActor.GetRandomConnection");
	}

	ASplineActor_execGetRandomConnection_Params GetRandomConnection_Params;
	memset(&GetRandomConnection_Params, 0, sizeof(GetRandomConnection_Params));
	GetRandomConnection_Params.bUseLinksFrom = bUseLinksFrom;

	uFnGetRandomConnection->iNative = 0;
	uFnGetRandomConnection->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetRandomConnection, &GetRandomConnection_Params, nullptr);
	uFnGetRandomConnection->FunctionFlags |= 0x400;
	uFnGetRandomConnection->iNative = 20725;

	return GetRandomConnection_Params.ReturnValue;
};

// Function Engine.SplineActor.BreakAllConnectionsFrom
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[17321])
// Parameter Info:

void ASplineActor::BreakAllConnectionsFrom()
{
	static UFunction* uFnBreakAllConnectionsFrom = nullptr;

	if (!uFnBreakAllConnectionsFrom)
	{
		uFnBreakAllConnectionsFrom = UFunction::FindFunction("Function Engine.SplineActor.BreakAllConnectionsFrom");
	}

	ASplineActor_execBreakAllConnectionsFrom_Params BreakAllConnectionsFrom_Params;
	memset(&BreakAllConnectionsFrom_Params, 0, sizeof(BreakAllConnectionsFrom_Params));

	uFnBreakAllConnectionsFrom->iNative = 0;
	uFnBreakAllConnectionsFrom->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnBreakAllConnectionsFrom, &BreakAllConnectionsFrom_Params, nullptr);
	uFnBreakAllConnectionsFrom->FunctionFlags |= 0x400;
	uFnBreakAllConnectionsFrom->iNative = 17321;
};

// Function Engine.SplineActor.BreakAllConnections
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[17320])
// Parameter Info:

void ASplineActor::BreakAllConnections()
{
	static UFunction* uFnBreakAllConnections = nullptr;

	if (!uFnBreakAllConnections)
	{
		uFnBreakAllConnections = UFunction::FindFunction("Function Engine.SplineActor.BreakAllConnections");
	}

	ASplineActor_execBreakAllConnections_Params BreakAllConnections_Params;
	memset(&BreakAllConnections_Params, 0, sizeof(BreakAllConnections_Params));

	uFnBreakAllConnections->iNative = 0;
	uFnBreakAllConnections->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnBreakAllConnections, &BreakAllConnections_Params, nullptr);
	uFnBreakAllConnections->FunctionFlags |= 0x400;
	uFnBreakAllConnections->iNative = 17320;
};

// Function Engine.SplineActor.BreakConnectionTo
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[17322])
// Parameter Info:
// class ASplineActor*            NextActor                      (CPF_Parm)

void ASplineActor::BreakConnectionTo(class ASplineActor* NextActor)
{
	static UFunction* uFnBreakConnectionTo = nullptr;

	if (!uFnBreakConnectionTo)
	{
		uFnBreakConnectionTo = UFunction::FindFunction("Function Engine.SplineActor.BreakConnectionTo");
	}

	ASplineActor_execBreakConnectionTo_Params BreakConnectionTo_Params;
	memset(&BreakConnectionTo_Params, 0, sizeof(BreakConnectionTo_Params));
	BreakConnectionTo_Params.NextActor = NextActor;

	uFnBreakConnectionTo->iNative = 0;
	uFnBreakConnectionTo->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnBreakConnectionTo, &BreakConnectionTo_Params, nullptr);
	uFnBreakConnectionTo->FunctionFlags |= 0x400;
	uFnBreakConnectionTo->iNative = 17322;
};

// Function Engine.SplineActor.FindTargetForComponent
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20125])
// Parameter Info:
// class ASplineActor*            ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class USplineComponent*        SplineComp                     (CPF_Parm | CPF_EditInline)

class ASplineActor* ASplineActor::FindTargetForComponent(class USplineComponent* SplineComp)
{
	static UFunction* uFnFindTargetForComponent = nullptr;

	if (!uFnFindTargetForComponent)
	{
		uFnFindTargetForComponent = UFunction::FindFunction("Function Engine.SplineActor.FindTargetForComponent");
	}

	ASplineActor_execFindTargetForComponent_Params FindTargetForComponent_Params;
	memset(&FindTargetForComponent_Params, 0, sizeof(FindTargetForComponent_Params));
	FindTargetForComponent_Params.SplineComp = SplineComp;

	uFnFindTargetForComponent->iNative = 0;
	uFnFindTargetForComponent->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnFindTargetForComponent, &FindTargetForComponent_Params, nullptr);
	uFnFindTargetForComponent->FunctionFlags |= 0x400;
	uFnFindTargetForComponent->iNative = 20125;

	return FindTargetForComponent_Params.ReturnValue;
};

// Function Engine.SplineActor.FindSplineComponentTo
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20121])
// Parameter Info:
// class USplineComponent*        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline)
// class ASplineActor*            NextActor                      (CPF_Parm)

class USplineComponent* ASplineActor::FindSplineComponentTo(class ASplineActor* NextActor)
{
	static UFunction* uFnFindSplineComponentTo = nullptr;

	if (!uFnFindSplineComponentTo)
	{
		uFnFindSplineComponentTo = UFunction::FindFunction("Function Engine.SplineActor.FindSplineComponentTo");
	}

	ASplineActor_execFindSplineComponentTo_Params FindSplineComponentTo_Params;
	memset(&FindSplineComponentTo_Params, 0, sizeof(FindSplineComponentTo_Params));
	FindSplineComponentTo_Params.NextActor = NextActor;

	uFnFindSplineComponentTo->iNative = 0;
	uFnFindSplineComponentTo->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnFindSplineComponentTo, &FindSplineComponentTo_Params, nullptr);
	uFnFindSplineComponentTo->FunctionFlags |= 0x400;
	uFnFindSplineComponentTo->iNative = 20121;

	return FindSplineComponentTo_Params.ReturnValue;
};

// Function Engine.SplineActor.IsConnectedTo
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[21365])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class ASplineActor*            NextActor                      (CPF_Parm)
// uint32_t                       bCheckForDisableDestination    (CPF_Parm)

bool ASplineActor::IsConnectedTo(class ASplineActor* NextActor, bool bCheckForDisableDestination)
{
	static UFunction* uFnIsConnectedTo = nullptr;

	if (!uFnIsConnectedTo)
	{
		uFnIsConnectedTo = UFunction::FindFunction("Function Engine.SplineActor.IsConnectedTo");
	}

	ASplineActor_execIsConnectedTo_Params IsConnectedTo_Params;
	memset(&IsConnectedTo_Params, 0, sizeof(IsConnectedTo_Params));
	IsConnectedTo_Params.NextActor = NextActor;
	IsConnectedTo_Params.bCheckForDisableDestination = bCheckForDisableDestination;

	uFnIsConnectedTo->iNative = 0;
	uFnIsConnectedTo->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnIsConnectedTo, &IsConnectedTo_Params, nullptr);
	uFnIsConnectedTo->FunctionFlags |= 0x400;
	uFnIsConnectedTo->iNative = 21365;

	return IsConnectedTo_Params.ReturnValue;
};

// Function Engine.SplineActor.AddConnectionTo
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[15294])
// Parameter Info:
// class ASplineActor*            NextActor                      (CPF_Parm)

void ASplineActor::AddConnectionTo(class ASplineActor* NextActor)
{
	static UFunction* uFnAddConnectionTo = nullptr;

	if (!uFnAddConnectionTo)
	{
		uFnAddConnectionTo = UFunction::FindFunction("Function Engine.SplineActor.AddConnectionTo");
	}

	ASplineActor_execAddConnectionTo_Params AddConnectionTo_Params;
	memset(&AddConnectionTo_Params, 0, sizeof(AddConnectionTo_Params));
	AddConnectionTo_Params.NextActor = NextActor;

	uFnAddConnectionTo->iNative = 0;
	uFnAddConnectionTo->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnAddConnectionTo, &AddConnectionTo_Params, nullptr);
	uFnAddConnectionTo->FunctionFlags |= 0x400;
	uFnAddConnectionTo->iNative = 15294;
};

// Function Engine.SplineActor.UpdateConnectedSplineComponents
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[26978])
// Parameter Info:
// uint32_t                       bFinish                        (CPF_Parm)

void ASplineActor::UpdateConnectedSplineComponents(bool bFinish)
{
	static UFunction* uFnUpdateConnectedSplineComponents = nullptr;

	if (!uFnUpdateConnectedSplineComponents)
	{
		uFnUpdateConnectedSplineComponents = UFunction::FindFunction("Function Engine.SplineActor.UpdateConnectedSplineComponents");
	}

	ASplineActor_execUpdateConnectedSplineComponents_Params UpdateConnectedSplineComponents_Params;
	memset(&UpdateConnectedSplineComponents_Params, 0, sizeof(UpdateConnectedSplineComponents_Params));
	UpdateConnectedSplineComponents_Params.bFinish = bFinish;

	uFnUpdateConnectedSplineComponents->iNative = 0;
	uFnUpdateConnectedSplineComponents->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnUpdateConnectedSplineComponents, &UpdateConnectedSplineComponents_Params, nullptr);
	uFnUpdateConnectedSplineComponents->FunctionFlags |= 0x400;
	uFnUpdateConnectedSplineComponents->iNative = 26978;
};

// Function Engine.SplineActor.UpdateSplineComponents
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[27001])
// Parameter Info:

void ASplineActor::UpdateSplineComponents()
{
	static UFunction* uFnUpdateSplineComponents = nullptr;

	if (!uFnUpdateSplineComponents)
	{
		uFnUpdateSplineComponents = UFunction::FindFunction("Function Engine.SplineActor.UpdateSplineComponents");
	}

	ASplineActor_execUpdateSplineComponents_Params UpdateSplineComponents_Params;
	memset(&UpdateSplineComponents_Params, 0, sizeof(UpdateSplineComponents_Params));

	uFnUpdateSplineComponents->iNative = 0;
	uFnUpdateSplineComponents->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnUpdateSplineComponents, &UpdateSplineComponents_Params, nullptr);
	uFnUpdateSplineComponents->FunctionFlags |= 0x400;
	uFnUpdateSplineComponents->iNative = 27001;
};

// Function Engine.SplineActor.GetWorldSpaceTangent
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20824])
// Parameter Info:
// struct FVector                 ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

struct FVector ASplineActor::GetWorldSpaceTangent()
{
	static UFunction* uFnGetWorldSpaceTangent = nullptr;

	if (!uFnGetWorldSpaceTangent)
	{
		uFnGetWorldSpaceTangent = UFunction::FindFunction("Function Engine.SplineActor.GetWorldSpaceTangent");
	}

	ASplineActor_execGetWorldSpaceTangent_Params GetWorldSpaceTangent_Params;
	memset(&GetWorldSpaceTangent_Params, 0, sizeof(GetWorldSpaceTangent_Params));

	uFnGetWorldSpaceTangent->iNative = 0;
	uFnGetWorldSpaceTangent->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetWorldSpaceTangent, &GetWorldSpaceTangent_Params, nullptr);
	uFnGetWorldSpaceTangent->FunctionFlags |= 0x400;
	uFnGetWorldSpaceTangent->iNative = 20824;

	return GetWorldSpaceTangent_Params.ReturnValue;
};

// Function Engine.SplineLoftActor.UpdateSplineParams
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[27003])
// Parameter Info:

void ASplineLoftActor::UpdateSplineParams()
{
	static UFunction* uFnUpdateSplineParams = nullptr;

	if (!uFnUpdateSplineParams)
	{
		uFnUpdateSplineParams = UFunction::FindFunction("Function Engine.SplineLoftActor.UpdateSplineParams");
	}

	ASplineLoftActor_execUpdateSplineParams_Params UpdateSplineParams_Params;
	memset(&UpdateSplineParams_Params, 0, sizeof(UpdateSplineParams_Params));

	uFnUpdateSplineParams->iNative = 0;
	uFnUpdateSplineParams->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnUpdateSplineParams, &UpdateSplineParams_Params, nullptr);
	uFnUpdateSplineParams->FunctionFlags |= 0x400;
	uFnUpdateSplineParams->iNative = 27003;
};

// Function Engine.SplineLoftActor.ClearLoftMesh
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[18135])
// Parameter Info:

void ASplineLoftActor::ClearLoftMesh()
{
	static UFunction* uFnClearLoftMesh = nullptr;

	if (!uFnClearLoftMesh)
	{
		uFnClearLoftMesh = UFunction::FindFunction("Function Engine.SplineLoftActor.ClearLoftMesh");
	}

	ASplineLoftActor_execClearLoftMesh_Params ClearLoftMesh_Params;
	memset(&ClearLoftMesh_Params, 0, sizeof(ClearLoftMesh_Params));

	uFnClearLoftMesh->iNative = 0;
	uFnClearLoftMesh->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnClearLoftMesh, &ClearLoftMesh_Params, nullptr);
	uFnClearLoftMesh->FunctionFlags |= 0x400;
	uFnClearLoftMesh->iNative = 18135;
};

// Function Engine.SplineComponent.GetTangentAtDistanceAlongSpline
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20780])
// Parameter Info:
// struct FVector                 ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// float                          Distance                       (CPF_Parm)

struct FVector USplineComponent::GetTangentAtDistanceAlongSpline(float Distance)
{
	static UFunction* uFnGetTangentAtDistanceAlongSpline = nullptr;

	if (!uFnGetTangentAtDistanceAlongSpline)
	{
		uFnGetTangentAtDistanceAlongSpline = UFunction::FindFunction("Function Engine.SplineComponent.GetTangentAtDistanceAlongSpline");
	}

	USplineComponent_execGetTangentAtDistanceAlongSpline_Params GetTangentAtDistanceAlongSpline_Params;
	memset(&GetTangentAtDistanceAlongSpline_Params, 0, sizeof(GetTangentAtDistanceAlongSpline_Params));
	memcpy_s(&GetTangentAtDistanceAlongSpline_Params.Distance, sizeof(GetTangentAtDistanceAlongSpline_Params.Distance), &Distance, sizeof(Distance));

	uFnGetTangentAtDistanceAlongSpline->iNative = 0;
	uFnGetTangentAtDistanceAlongSpline->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetTangentAtDistanceAlongSpline, &GetTangentAtDistanceAlongSpline_Params, nullptr);
	uFnGetTangentAtDistanceAlongSpline->FunctionFlags |= 0x400;
	uFnGetTangentAtDistanceAlongSpline->iNative = 20780;

	return GetTangentAtDistanceAlongSpline_Params.ReturnValue;
};

// Function Engine.SplineComponent.GetLocationAtDistanceAlongSpline
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20626])
// Parameter Info:
// struct FVector                 ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// float                          Distance                       (CPF_Parm)

struct FVector USplineComponent::GetLocationAtDistanceAlongSpline(float Distance)
{
	static UFunction* uFnGetLocationAtDistanceAlongSpline = nullptr;

	if (!uFnGetLocationAtDistanceAlongSpline)
	{
		uFnGetLocationAtDistanceAlongSpline = UFunction::FindFunction("Function Engine.SplineComponent.GetLocationAtDistanceAlongSpline");
	}

	USplineComponent_execGetLocationAtDistanceAlongSpline_Params GetLocationAtDistanceAlongSpline_Params;
	memset(&GetLocationAtDistanceAlongSpline_Params, 0, sizeof(GetLocationAtDistanceAlongSpline_Params));
	memcpy_s(&GetLocationAtDistanceAlongSpline_Params.Distance, sizeof(GetLocationAtDistanceAlongSpline_Params.Distance), &Distance, sizeof(Distance));

	uFnGetLocationAtDistanceAlongSpline->iNative = 0;
	uFnGetLocationAtDistanceAlongSpline->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetLocationAtDistanceAlongSpline, &GetLocationAtDistanceAlongSpline_Params, nullptr);
	uFnGetLocationAtDistanceAlongSpline->FunctionFlags |= 0x400;
	uFnGetLocationAtDistanceAlongSpline->iNative = 20626;

	return GetLocationAtDistanceAlongSpline_Params.ReturnValue;
};

// Function Engine.SplineComponent.GetSplineLength
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20758])
// Parameter Info:
// float                          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

float USplineComponent::GetSplineLength()
{
	static UFunction* uFnGetSplineLength = nullptr;

	if (!uFnGetSplineLength)
	{
		uFnGetSplineLength = UFunction::FindFunction("Function Engine.SplineComponent.GetSplineLength");
	}

	USplineComponent_execGetSplineLength_Params GetSplineLength_Params;
	memset(&GetSplineLength_Params, 0, sizeof(GetSplineLength_Params));

	uFnGetSplineLength->iNative = 0;
	uFnGetSplineLength->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetSplineLength, &GetSplineLength_Params, nullptr);
	uFnGetSplineLength->FunctionFlags |= 0x400;
	uFnGetSplineLength->iNative = 20758;

	return GetSplineLength_Params.ReturnValue;
};

// Function Engine.SplineComponent.UpdateSplineReparamTable
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[27004])
// Parameter Info:

void USplineComponent::UpdateSplineReparamTable()
{
	static UFunction* uFnUpdateSplineReparamTable = nullptr;

	if (!uFnUpdateSplineReparamTable)
	{
		uFnUpdateSplineReparamTable = UFunction::FindFunction("Function Engine.SplineComponent.UpdateSplineReparamTable");
	}

	USplineComponent_execUpdateSplineReparamTable_Params UpdateSplineReparamTable_Params;
	memset(&UpdateSplineReparamTable_Params, 0, sizeof(UpdateSplineReparamTable_Params));

	uFnUpdateSplineReparamTable->iNative = 0;
	uFnUpdateSplineReparamTable->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnUpdateSplineReparamTable, &UpdateSplineReparamTable_Params, nullptr);
	uFnUpdateSplineReparamTable->FunctionFlags |= 0x400;
	uFnUpdateSplineReparamTable->iNative = 27004;
};

// Function Engine.SplineComponent.UpdateSplineCurviness
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[27002])
// Parameter Info:

void USplineComponent::UpdateSplineCurviness()
{
	static UFunction* uFnUpdateSplineCurviness = nullptr;

	if (!uFnUpdateSplineCurviness)
	{
		uFnUpdateSplineCurviness = UFunction::FindFunction("Function Engine.SplineComponent.UpdateSplineCurviness");
	}

	USplineComponent_execUpdateSplineCurviness_Params UpdateSplineCurviness_Params;
	memset(&UpdateSplineCurviness_Params, 0, sizeof(UpdateSplineCurviness_Params));

	uFnUpdateSplineCurviness->iNative = 0;
	uFnUpdateSplineCurviness->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnUpdateSplineCurviness, &UpdateSplineCurviness_Params, nullptr);
	uFnUpdateSplineCurviness->FunctionFlags |= 0x400;
	uFnUpdateSplineCurviness->iNative = 27002;
};

// Function Engine.GameReplicationInfo.ShouldShowGore
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AGameReplicationInfo::eventShouldShowGore()
{
	static UFunction* uFnShouldShowGore = nullptr;

	if (!uFnShouldShowGore)
	{
		uFnShouldShowGore = UFunction::FindFunction("Function Engine.GameReplicationInfo.ShouldShowGore");
	}

	AGameReplicationInfo_eventShouldShowGore_Params ShouldShowGore_Params;
	memset(&ShouldShowGore_Params, 0, sizeof(ShouldShowGore_Params));

	this->ProcessEvent(uFnShouldShowGore, &ShouldShowGore_Params, nullptr);

	return ShouldShowGore_Params.ReturnValue;
};

// Function Engine.GameReplicationInfo.IsCoopMultiplayerGame
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AGameReplicationInfo::IsCoopMultiplayerGame()
{
	static UFunction* uFnIsCoopMultiplayerGame = nullptr;

	if (!uFnIsCoopMultiplayerGame)
	{
		uFnIsCoopMultiplayerGame = UFunction::FindFunction("Function Engine.GameReplicationInfo.IsCoopMultiplayerGame");
	}

	AGameReplicationInfo_execIsCoopMultiplayerGame_Params IsCoopMultiplayerGame_Params;
	memset(&IsCoopMultiplayerGame_Params, 0, sizeof(IsCoopMultiplayerGame_Params));

	this->ProcessEvent(uFnIsCoopMultiplayerGame, &IsCoopMultiplayerGame_Params, nullptr);

	return IsCoopMultiplayerGame_Params.ReturnValue;
};

// Function Engine.GameReplicationInfo.IsMultiplayerGame
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AGameReplicationInfo::IsMultiplayerGame()
{
	static UFunction* uFnIsMultiplayerGame = nullptr;

	if (!uFnIsMultiplayerGame)
	{
		uFnIsMultiplayerGame = UFunction::FindFunction("Function Engine.GameReplicationInfo.IsMultiplayerGame");
	}

	AGameReplicationInfo_execIsMultiplayerGame_Params IsMultiplayerGame_Params;
	memset(&IsMultiplayerGame_Params, 0, sizeof(IsMultiplayerGame_Params));

	this->ProcessEvent(uFnIsMultiplayerGame, &IsMultiplayerGame_Params, nullptr);

	return IsMultiplayerGame_Params.ReturnValue;
};

// Function Engine.GameReplicationInfo.EndGame
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AGameReplicationInfo::EndGame()
{
	static UFunction* uFnEndGame = nullptr;

	if (!uFnEndGame)
	{
		uFnEndGame = UFunction::FindFunction("Function Engine.GameReplicationInfo.EndGame");
	}

	AGameReplicationInfo_execEndGame_Params EndGame_Params;
	memset(&EndGame_Params, 0, sizeof(EndGame_Params));

	this->ProcessEvent(uFnEndGame, &EndGame_Params, nullptr);
};

// Function Engine.GameReplicationInfo.StartMatch
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AGameReplicationInfo::StartMatch()
{
	static UFunction* uFnStartMatch = nullptr;

	if (!uFnStartMatch)
	{
		uFnStartMatch = UFunction::FindFunction("Function Engine.GameReplicationInfo.StartMatch");
	}

	AGameReplicationInfo_execStartMatch_Params StartMatch_Params;
	memset(&StartMatch_Params, 0, sizeof(StartMatch_Params));

	this->ProcessEvent(uFnStartMatch, &StartMatch_Params, nullptr);
};

// Function Engine.GameReplicationInfo.SetTeam
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Index                          (CPF_Parm)
// class ATeamInfo*               TI                             (CPF_Parm)

void AGameReplicationInfo::SetTeam(int32_t Index, class ATeamInfo* TI)
{
	static UFunction* uFnSetTeam = nullptr;

	if (!uFnSetTeam)
	{
		uFnSetTeam = UFunction::FindFunction("Function Engine.GameReplicationInfo.SetTeam");
	}

	AGameReplicationInfo_execSetTeam_Params SetTeam_Params;
	memset(&SetTeam_Params, 0, sizeof(SetTeam_Params));
	memcpy_s(&SetTeam_Params.Index, sizeof(SetTeam_Params.Index), &Index, sizeof(Index));
	SetTeam_Params.TI = TI;

	this->ProcessEvent(uFnSetTeam, &SetTeam_Params, nullptr);
};

// Function Engine.GameReplicationInfo.OnSameTeam
// [0x00020500] (FUNC_Simulated | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[23644])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class AActor*                  A                              (CPF_Parm)
// class AActor*                  B                              (CPF_Parm)

bool AGameReplicationInfo::OnSameTeam(class AActor* A, class AActor* B)
{
	static UFunction* uFnOnSameTeam = nullptr;

	if (!uFnOnSameTeam)
	{
		uFnOnSameTeam = UFunction::FindFunction("Function Engine.GameReplicationInfo.OnSameTeam");
	}

	AGameReplicationInfo_execOnSameTeam_Params OnSameTeam_Params;
	memset(&OnSameTeam_Params, 0, sizeof(OnSameTeam_Params));
	OnSameTeam_Params.A = A;
	OnSameTeam_Params.B = B;

	uFnOnSameTeam->iNative = 0;
	uFnOnSameTeam->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnOnSameTeam, &OnSameTeam_Params, nullptr);
	uFnOnSameTeam->FunctionFlags |= 0x400;
	uFnOnSameTeam->iNative = 23644;

	return OnSameTeam_Params.ReturnValue;
};

// Function Engine.GameReplicationInfo.Timer
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AGameReplicationInfo::eventTimer()
{
	static UFunction* uFnTimer = nullptr;

	if (!uFnTimer)
	{
		uFnTimer = UFunction::FindFunction("Function Engine.GameReplicationInfo.Timer");
	}

	AGameReplicationInfo_eventTimer_Params Timer_Params;
	memset(&Timer_Params, 0, sizeof(Timer_Params));

	this->ProcessEvent(uFnTimer, &Timer_Params, nullptr);
};

// Function Engine.GameReplicationInfo.Reset
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AGameReplicationInfo::Reset()
{
	static UFunction* uFnReset = nullptr;

	if (!uFnReset)
	{
		uFnReset = UFunction::FindFunction("Function Engine.GameReplicationInfo.Reset");
	}

	AGameReplicationInfo_execReset_Params Reset_Params;
	memset(&Reset_Params, 0, sizeof(Reset_Params));

	this->ProcessEvent(uFnReset, &Reset_Params, nullptr);
};

// Function Engine.GameReplicationInfo.ReceivedGameClass
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AGameReplicationInfo::ReceivedGameClass()
{
	static UFunction* uFnReceivedGameClass = nullptr;

	if (!uFnReceivedGameClass)
	{
		uFnReceivedGameClass = UFunction::FindFunction("Function Engine.GameReplicationInfo.ReceivedGameClass");
	}

	AGameReplicationInfo_execReceivedGameClass_Params ReceivedGameClass_Params;
	memset(&ReceivedGameClass_Params, 0, sizeof(ReceivedGameClass_Params));

	this->ProcessEvent(uFnReceivedGameClass, &ReceivedGameClass_Params, nullptr);
};

// Function Engine.GameReplicationInfo.ReplicatedEvent
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FName                    VarName                        (CPF_Parm)

void AGameReplicationInfo::eventReplicatedEvent(const class FName& VarName)
{
	static UFunction* uFnReplicatedEvent = nullptr;

	if (!uFnReplicatedEvent)
	{
		uFnReplicatedEvent = UFunction::FindFunction("Function Engine.GameReplicationInfo.ReplicatedEvent");
	}

	AGameReplicationInfo_eventReplicatedEvent_Params ReplicatedEvent_Params;
	memset(&ReplicatedEvent_Params, 0, sizeof(ReplicatedEvent_Params));
	memcpy_s(&ReplicatedEvent_Params.VarName, sizeof(ReplicatedEvent_Params.VarName), &VarName, sizeof(VarName));

	this->ProcessEvent(uFnReplicatedEvent, &ReplicatedEvent_Params, nullptr);
};

// Function Engine.GameReplicationInfo.PostBeginPlay
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AGameReplicationInfo::eventPostBeginPlay()
{
	static UFunction* uFnPostBeginPlay = nullptr;

	if (!uFnPostBeginPlay)
	{
		uFnPostBeginPlay = UFunction::FindFunction("Function Engine.GameReplicationInfo.PostBeginPlay");
	}

	AGameReplicationInfo_eventPostBeginPlay_Params PostBeginPlay_Params;
	memset(&PostBeginPlay_Params, 0, sizeof(PostBeginPlay_Params));

	this->ProcessEvent(uFnPostBeginPlay, &PostBeginPlay_Params, nullptr);
};

// Function Engine.TeamInfo.GetTeamNum
// [0x00020500] (FUNC_Simulated | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20783])
// Parameter Info:
// uint8_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

uint8_t ATeamInfo::GetTeamNum()
{
	static UFunction* uFnGetTeamNum = nullptr;

	if (!uFnGetTeamNum)
	{
		uFnGetTeamNum = UFunction::FindFunction("Function Engine.TeamInfo.GetTeamNum");
	}

	ATeamInfo_execGetTeamNum_Params GetTeamNum_Params;
	memset(&GetTeamNum_Params, 0, sizeof(GetTeamNum_Params));

	uFnGetTeamNum->iNative = 0;
	uFnGetTeamNum->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetTeamNum, &GetTeamNum_Params, nullptr);
	uFnGetTeamNum->FunctionFlags |= 0x400;
	uFnGetTeamNum->iNative = 20783;

	return GetTeamNum_Params.ReturnValue;
};

// Function Engine.TeamInfo.GetHUDColor
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FColor                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

struct FColor ATeamInfo::GetHUDColor()
{
	static UFunction* uFnGetHUDColor = nullptr;

	if (!uFnGetHUDColor)
	{
		uFnGetHUDColor = UFunction::FindFunction("Function Engine.TeamInfo.GetHUDColor");
	}

	ATeamInfo_execGetHUDColor_Params GetHUDColor_Params;
	memset(&GetHUDColor_Params, 0, sizeof(GetHUDColor_Params));

	this->ProcessEvent(uFnGetHUDColor, &GetHUDColor_Params, nullptr);

	return GetHUDColor_Params.ReturnValue;
};

// Function Engine.TeamInfo.GetHumanReadableName
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)

class FString ATeamInfo::GetHumanReadableName()
{
	static UFunction* uFnGetHumanReadableName = nullptr;

	if (!uFnGetHumanReadableName)
	{
		uFnGetHumanReadableName = UFunction::FindFunction("Function Engine.TeamInfo.GetHumanReadableName");
	}

	ATeamInfo_execGetHumanReadableName_Params GetHumanReadableName_Params;
	memset(&GetHumanReadableName_Params, 0, sizeof(GetHumanReadableName_Params));

	this->ProcessEvent(uFnGetHumanReadableName, &GetHumanReadableName_Params, nullptr);

	return GetHumanReadableName_Params.ReturnValue;
};

// Function Engine.TeamInfo.RemoveFromTeam
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AController*             Other                          (CPF_Parm)

void ATeamInfo::RemoveFromTeam(class AController* Other)
{
	static UFunction* uFnRemoveFromTeam = nullptr;

	if (!uFnRemoveFromTeam)
	{
		uFnRemoveFromTeam = UFunction::FindFunction("Function Engine.TeamInfo.RemoveFromTeam");
	}

	ATeamInfo_execRemoveFromTeam_Params RemoveFromTeam_Params;
	memset(&RemoveFromTeam_Params, 0, sizeof(RemoveFromTeam_Params));
	RemoveFromTeam_Params.Other = Other;

	this->ProcessEvent(uFnRemoveFromTeam, &RemoveFromTeam_Params, nullptr);
};

// Function Engine.TeamInfo.AddToTeam
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class AController*             Other                          (CPF_Parm)

bool ATeamInfo::AddToTeam(class AController* Other)
{
	static UFunction* uFnAddToTeam = nullptr;

	if (!uFnAddToTeam)
	{
		uFnAddToTeam = UFunction::FindFunction("Function Engine.TeamInfo.AddToTeam");
	}

	ATeamInfo_execAddToTeam_Params AddToTeam_Params;
	memset(&AddToTeam_Params, 0, sizeof(AddToTeam_Params));
	AddToTeam_Params.Other = Other;

	this->ProcessEvent(uFnAddToTeam, &AddToTeam_Params, nullptr);

	return AddToTeam_Params.ReturnValue;
};

// Function Engine.TeamInfo.Destroyed
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void ATeamInfo::eventDestroyed()
{
	static UFunction* uFnDestroyed = nullptr;

	if (!uFnDestroyed)
	{
		uFnDestroyed = UFunction::FindFunction("Function Engine.TeamInfo.Destroyed");
	}

	ATeamInfo_eventDestroyed_Params Destroyed_Params;
	memset(&Destroyed_Params, 0, sizeof(Destroyed_Params));

	this->ProcessEvent(uFnDestroyed, &Destroyed_Params, nullptr);
};

// Function Engine.TeamInfo.ReplicatedEvent
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FName                    VarName                        (CPF_Parm)

void ATeamInfo::eventReplicatedEvent(const class FName& VarName)
{
	static UFunction* uFnReplicatedEvent = nullptr;

	if (!uFnReplicatedEvent)
	{
		uFnReplicatedEvent = UFunction::FindFunction("Function Engine.TeamInfo.ReplicatedEvent");
	}

	ATeamInfo_eventReplicatedEvent_Params ReplicatedEvent_Params;
	memset(&ReplicatedEvent_Params, 0, sizeof(ReplicatedEvent_Params));
	memcpy_s(&ReplicatedEvent_Params.VarName, sizeof(ReplicatedEvent_Params.VarName), &VarName, sizeof(VarName));

	this->ProcessEvent(uFnReplicatedEvent, &ReplicatedEvent_Params, nullptr);
};

// Function Engine.Camera.CalcRadialShakeScale
// [0x00822002] (FUNC_Defined | FUNC_Static | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// float                          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class ACamera*                 Cam                            (CPF_Parm)
// struct FVector                 Epicenter                      (CPF_Parm)
// float                          InnerRadius                    (CPF_Parm)
// float                          OuterRadius                    (CPF_Parm)
// float                          Falloff                        (CPF_Parm)

float ACamera::CalcRadialShakeScale(class ACamera* Cam, const struct FVector& Epicenter, float InnerRadius, float OuterRadius, float Falloff)
{
	static UFunction* uFnCalcRadialShakeScale = nullptr;

	if (!uFnCalcRadialShakeScale)
	{
		uFnCalcRadialShakeScale = UFunction::FindFunction("Function Engine.Camera.CalcRadialShakeScale");
	}

	ACamera_execCalcRadialShakeScale_Params CalcRadialShakeScale_Params;
	memset(&CalcRadialShakeScale_Params, 0, sizeof(CalcRadialShakeScale_Params));
	CalcRadialShakeScale_Params.Cam = Cam;
	memcpy_s(&CalcRadialShakeScale_Params.Epicenter, sizeof(CalcRadialShakeScale_Params.Epicenter), &Epicenter, sizeof(Epicenter));
	memcpy_s(&CalcRadialShakeScale_Params.InnerRadius, sizeof(CalcRadialShakeScale_Params.InnerRadius), &InnerRadius, sizeof(InnerRadius));
	memcpy_s(&CalcRadialShakeScale_Params.OuterRadius, sizeof(CalcRadialShakeScale_Params.OuterRadius), &OuterRadius, sizeof(OuterRadius));
	memcpy_s(&CalcRadialShakeScale_Params.Falloff, sizeof(CalcRadialShakeScale_Params.Falloff), &Falloff, sizeof(Falloff));

	ACamera::StaticClass()->ProcessEvent(uFnCalcRadialShakeScale, &CalcRadialShakeScale_Params, nullptr);

	return CalcRadialShakeScale_Params.ReturnValue;
};

// Function Engine.Camera.ClearCameraLensEffects
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[18111])
// Parameter Info:

void ACamera::ClearCameraLensEffects()
{
	static UFunction* uFnClearCameraLensEffects = nullptr;

	if (!uFnClearCameraLensEffects)
	{
		uFnClearCameraLensEffects = UFunction::FindFunction("Function Engine.Camera.ClearCameraLensEffects");
	}

	ACamera_execClearCameraLensEffects_Params ClearCameraLensEffects_Params;
	memset(&ClearCameraLensEffects_Params, 0, sizeof(ClearCameraLensEffects_Params));

	uFnClearCameraLensEffects->iNative = 0;
	uFnClearCameraLensEffects->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnClearCameraLensEffects, &ClearCameraLensEffects_Params, nullptr);
	uFnClearCameraLensEffects->FunctionFlags |= 0x400;
	uFnClearCameraLensEffects->iNative = 18111;
};

// Function Engine.Camera.RemoveCameraLensEffect
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[25063])
// Parameter Info:
// class AEmitterCameraLensEffectBase* Emitter                        (CPF_Parm)

void ACamera::RemoveCameraLensEffect(class AEmitterCameraLensEffectBase* Emitter)
{
	static UFunction* uFnRemoveCameraLensEffect = nullptr;

	if (!uFnRemoveCameraLensEffect)
	{
		uFnRemoveCameraLensEffect = UFunction::FindFunction("Function Engine.Camera.RemoveCameraLensEffect");
	}

	ACamera_execRemoveCameraLensEffect_Params RemoveCameraLensEffect_Params;
	memset(&RemoveCameraLensEffect_Params, 0, sizeof(RemoveCameraLensEffect_Params));
	RemoveCameraLensEffect_Params.Emitter = Emitter;

	uFnRemoveCameraLensEffect->iNative = 0;
	uFnRemoveCameraLensEffect->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnRemoveCameraLensEffect, &RemoveCameraLensEffect_Params, nullptr);
	uFnRemoveCameraLensEffect->FunctionFlags |= 0x400;
	uFnRemoveCameraLensEffect->iNative = 25063;
};

// Function Engine.Camera.AddCameraLensEffect
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[15291])
// Parameter Info:
// class AEmitterCameraLensEffectBase* ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class AEmitterCameraLensEffectBase* LensEffectEmitterClass         (CPF_Parm)

class AEmitterCameraLensEffectBase* ACamera::AddCameraLensEffect(class AEmitterCameraLensEffectBase* LensEffectEmitterClass)
{
	static UFunction* uFnAddCameraLensEffect = nullptr;

	if (!uFnAddCameraLensEffect)
	{
		uFnAddCameraLensEffect = UFunction::FindFunction("Function Engine.Camera.AddCameraLensEffect");
	}

	ACamera_execAddCameraLensEffect_Params AddCameraLensEffect_Params;
	memset(&AddCameraLensEffect_Params, 0, sizeof(AddCameraLensEffect_Params));
	AddCameraLensEffect_Params.LensEffectEmitterClass = LensEffectEmitterClass;

	uFnAddCameraLensEffect->iNative = 0;
	uFnAddCameraLensEffect->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnAddCameraLensEffect, &AddCameraLensEffect_Params, nullptr);
	uFnAddCameraLensEffect->FunctionFlags |= 0x400;
	uFnAddCameraLensEffect->iNative = 15291;

	return AddCameraLensEffect_Params.ReturnValue;
};

// Function Engine.Camera.FindCameraLensEffect
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20087])
// Parameter Info:
// class AEmitterCameraLensEffectBase* ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class AEmitterCameraLensEffectBase* LensEffectEmitterClass         (CPF_Parm)

class AEmitterCameraLensEffectBase* ACamera::FindCameraLensEffect(class AEmitterCameraLensEffectBase* LensEffectEmitterClass)
{
	static UFunction* uFnFindCameraLensEffect = nullptr;

	if (!uFnFindCameraLensEffect)
	{
		uFnFindCameraLensEffect = UFunction::FindFunction("Function Engine.Camera.FindCameraLensEffect");
	}

	ACamera_execFindCameraLensEffect_Params FindCameraLensEffect_Params;
	memset(&FindCameraLensEffect_Params, 0, sizeof(FindCameraLensEffect_Params));
	FindCameraLensEffect_Params.LensEffectEmitterClass = LensEffectEmitterClass;

	uFnFindCameraLensEffect->iNative = 0;
	uFnFindCameraLensEffect->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnFindCameraLensEffect, &FindCameraLensEffect_Params, nullptr);
	uFnFindCameraLensEffect->FunctionFlags |= 0x400;
	uFnFindCameraLensEffect->iNative = 20087;

	return FindCameraLensEffect_Params.ReturnValue;
};

// Function Engine.Camera.DisplayDebug
// [0x00C20102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_HasOutParms | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// class AHUD*                    HUD                            (CPF_Parm)
// float                          out_YL                         (CPF_Parm | CPF_OutParm)
// float                          out_YPos                       (CPF_Parm | CPF_OutParm)

void ACamera::DisplayDebug(class AHUD* HUD, float& out_YL, float& out_YPos)
{
	static UFunction* uFnDisplayDebug = nullptr;

	if (!uFnDisplayDebug)
	{
		uFnDisplayDebug = UFunction::FindFunction("Function Engine.Camera.DisplayDebug");
	}

	ACamera_execDisplayDebug_Params DisplayDebug_Params;
	memset(&DisplayDebug_Params, 0, sizeof(DisplayDebug_Params));
	DisplayDebug_Params.HUD = HUD;
	memcpy_s(&DisplayDebug_Params.out_YL, sizeof(DisplayDebug_Params.out_YL), &out_YL, sizeof(out_YL));
	memcpy_s(&DisplayDebug_Params.out_YPos, sizeof(DisplayDebug_Params.out_YPos), &out_YPos, sizeof(out_YPos));

	this->ProcessEvent(uFnDisplayDebug, &DisplayDebug_Params, nullptr);

	memcpy_s(&out_YL, sizeof(out_YL), &DisplayDebug_Params.out_YL, sizeof(DisplayDebug_Params.out_YL));
	memcpy_s(&out_YPos, sizeof(out_YPos), &DisplayDebug_Params.out_YPos, sizeof(DisplayDebug_Params.out_YPos));
};

// Function Engine.Camera.SetViewTarget
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[25840])
// Parameter Info:
// class AActor*                  NewViewTarget                  (CPF_Parm)
// struct FViewTargetTransitionParams TransitionParams               (CPF_OptionalParm | CPF_Parm)

void ACamera::SetViewTarget(class AActor* NewViewTarget, const struct FViewTargetTransitionParams& TransitionParams)
{
	static UFunction* uFnSetViewTarget = nullptr;

	if (!uFnSetViewTarget)
	{
		uFnSetViewTarget = UFunction::FindFunction("Function Engine.Camera.SetViewTarget");
	}

	ACamera_execSetViewTarget_Params SetViewTarget_Params;
	memset(&SetViewTarget_Params, 0, sizeof(SetViewTarget_Params));
	SetViewTarget_Params.NewViewTarget = NewViewTarget;
	memcpy_s(&SetViewTarget_Params.TransitionParams, sizeof(SetViewTarget_Params.TransitionParams), &TransitionParams, sizeof(TransitionParams));

	uFnSetViewTarget->iNative = 0;
	uFnSetViewTarget->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetViewTarget, &SetViewTarget_Params, nullptr);
	uFnSetViewTarget->FunctionFlags |= 0x400;
	uFnSetViewTarget->iNative = 25840;
};

// Function Engine.Camera.CheckViewTarget
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[18069])
// Parameter Info:
// struct FTViewTarget            VT                             (CPF_Parm | CPF_OutParm)

void ACamera::CheckViewTarget(struct FTViewTarget& VT)
{
	static UFunction* uFnCheckViewTarget = nullptr;

	if (!uFnCheckViewTarget)
	{
		uFnCheckViewTarget = UFunction::FindFunction("Function Engine.Camera.CheckViewTarget");
	}

	ACamera_execCheckViewTarget_Params CheckViewTarget_Params;
	memset(&CheckViewTarget_Params, 0, sizeof(CheckViewTarget_Params));
	memcpy_s(&CheckViewTarget_Params.VT, sizeof(CheckViewTarget_Params.VT), &VT, sizeof(VT));

	uFnCheckViewTarget->iNative = 0;
	uFnCheckViewTarget->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnCheckViewTarget, &CheckViewTarget_Params, nullptr);
	uFnCheckViewTarget->FunctionFlags |= 0x400;
	uFnCheckViewTarget->iNative = 18069;

	memcpy_s(&VT, sizeof(VT), &CheckViewTarget_Params.VT, sizeof(CheckViewTarget_Params.VT));
};

// Function Engine.Camera.UpdateCamera
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13790])
// Parameter Info:
// float                          DeltaTime                      (CPF_Parm)

void ACamera::UpdateCamera(float DeltaTime)
{
	static UFunction* uFnUpdateCamera = nullptr;

	if (!uFnUpdateCamera)
	{
		uFnUpdateCamera = UFunction::FindFunction("Function Engine.Camera.UpdateCamera");
	}

	ACamera_execUpdateCamera_Params UpdateCamera_Params;
	memset(&UpdateCamera_Params, 0, sizeof(UpdateCamera_Params));
	memcpy_s(&UpdateCamera_Params.DeltaTime, sizeof(UpdateCamera_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));

	uFnUpdateCamera->iNative = 0;
	uFnUpdateCamera->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnUpdateCamera, &UpdateCamera_Params, nullptr);
	uFnUpdateCamera->FunctionFlags |= 0x400;
	uFnUpdateCamera->iNative = 13790;
};

// Function Engine.Camera.SetDesiredColorScale
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FVector                 NewColorScale                  (CPF_Parm)
// float                          InterpTime                     (CPF_Parm)

void ACamera::SetDesiredColorScale(const struct FVector& NewColorScale, float InterpTime)
{
	static UFunction* uFnSetDesiredColorScale = nullptr;

	if (!uFnSetDesiredColorScale)
	{
		uFnSetDesiredColorScale = UFunction::FindFunction("Function Engine.Camera.SetDesiredColorScale");
	}

	ACamera_execSetDesiredColorScale_Params SetDesiredColorScale_Params;
	memset(&SetDesiredColorScale_Params, 0, sizeof(SetDesiredColorScale_Params));
	memcpy_s(&SetDesiredColorScale_Params.NewColorScale, sizeof(SetDesiredColorScale_Params.NewColorScale), &NewColorScale, sizeof(NewColorScale));
	memcpy_s(&SetDesiredColorScale_Params.InterpTime, sizeof(SetDesiredColorScale_Params.InterpTime), &InterpTime, sizeof(InterpTime));

	this->ProcessEvent(uFnSetDesiredColorScale, &SetDesiredColorScale_Params, nullptr);
};

// Function Engine.Camera.GetCameraRotation
// [0x00020003] (FUNC_Final | FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FRotator                ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

struct FRotator ACamera::GetCameraRotation()
{
	static UFunction* uFnGetCameraRotation = nullptr;

	if (!uFnGetCameraRotation)
	{
		uFnGetCameraRotation = UFunction::FindFunction("Function Engine.Camera.GetCameraRotation");
	}

	ACamera_execGetCameraRotation_Params GetCameraRotation_Params;
	memset(&GetCameraRotation_Params, 0, sizeof(GetCameraRotation_Params));

	this->ProcessEvent(uFnGetCameraRotation, &GetCameraRotation_Params, nullptr);

	return GetCameraRotation_Params.ReturnValue;
};

// Function Engine.Camera.GetCameraViewPoint
// [0x00420401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[20524])
// Parameter Info:
// struct FVector                 OutCamLoc                      (CPF_Parm | CPF_OutParm)
// struct FRotator                OutCamRot                      (CPF_Parm | CPF_OutParm)

void ACamera::GetCameraViewPoint(struct FVector& OutCamLoc, struct FRotator& OutCamRot)
{
	static UFunction* uFnGetCameraViewPoint = nullptr;

	if (!uFnGetCameraViewPoint)
	{
		uFnGetCameraViewPoint = UFunction::FindFunction("Function Engine.Camera.GetCameraViewPoint");
	}

	ACamera_execGetCameraViewPoint_Params GetCameraViewPoint_Params;
	memset(&GetCameraViewPoint_Params, 0, sizeof(GetCameraViewPoint_Params));
	memcpy_s(&GetCameraViewPoint_Params.OutCamLoc, sizeof(GetCameraViewPoint_Params.OutCamLoc), &OutCamLoc, sizeof(OutCamLoc));
	memcpy_s(&GetCameraViewPoint_Params.OutCamRot, sizeof(GetCameraViewPoint_Params.OutCamRot), &OutCamRot, sizeof(OutCamRot));

	uFnGetCameraViewPoint->iNative = 0;
	uFnGetCameraViewPoint->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetCameraViewPoint, &GetCameraViewPoint_Params, nullptr);
	uFnGetCameraViewPoint->FunctionFlags |= 0x400;
	uFnGetCameraViewPoint->iNative = 20524;

	memcpy_s(&OutCamLoc, sizeof(OutCamLoc), &GetCameraViewPoint_Params.OutCamLoc, sizeof(GetCameraViewPoint_Params.OutCamLoc));
	memcpy_s(&OutCamRot, sizeof(OutCamRot), &GetCameraViewPoint_Params.OutCamRot, sizeof(GetCameraViewPoint_Params.OutCamRot));
};

// Function Engine.Camera.SetFOV
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          NewFOV                         (CPF_Parm)

void ACamera::SetFOV(float NewFOV)
{
	static UFunction* uFnSetFOV = nullptr;

	if (!uFnSetFOV)
	{
		uFnSetFOV = UFunction::FindFunction("Function Engine.Camera.SetFOV");
	}

	ACamera_execSetFOV_Params SetFOV_Params;
	memset(&SetFOV_Params, 0, sizeof(SetFOV_Params));
	memcpy_s(&SetFOV_Params.NewFOV, sizeof(SetFOV_Params.NewFOV), &NewFOV, sizeof(NewFOV));

	this->ProcessEvent(uFnSetFOV, &SetFOV_Params, nullptr);
};

// Function Engine.Camera.GetFOVAngle
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20586])
// Parameter Info:
// float                          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

float ACamera::GetFOVAngle()
{
	static UFunction* uFnGetFOVAngle = nullptr;

	if (!uFnGetFOVAngle)
	{
		uFnGetFOVAngle = UFunction::FindFunction("Function Engine.Camera.GetFOVAngle");
	}

	ACamera_execGetFOVAngle_Params GetFOVAngle_Params;
	memset(&GetFOVAngle_Params, 0, sizeof(GetFOVAngle_Params));

	uFnGetFOVAngle->iNative = 0;
	uFnGetFOVAngle->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetFOVAngle, &GetFOVAngle_Params, nullptr);
	uFnGetFOVAngle->FunctionFlags |= 0x400;
	uFnGetFOVAngle->iNative = 20586;

	return GetFOVAngle_Params.ReturnValue;
};

// Function Engine.Camera.InitializeFor
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class APlayerController*       PC                             (CPF_Parm)

void ACamera::eventInitializeFor(class APlayerController* PC)
{
	static UFunction* uFnInitializeFor = nullptr;

	if (!uFnInitializeFor)
	{
		uFnInitializeFor = UFunction::FindFunction("Function Engine.Camera.InitializeFor");
	}

	ACamera_eventInitializeFor_Params InitializeFor_Params;
	memset(&InitializeFor_Params, 0, sizeof(InitializeFor_Params));
	InitializeFor_Params.PC = PC;

	this->ProcessEvent(uFnInitializeFor, &InitializeFor_Params, nullptr);
};

// Function Engine.Camera.ApplyCameraModifiers
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[15629])
// Parameter Info:
// float                          DeltaTime                      (CPF_Parm)
// struct FTPOV                   OutPOV                         (CPF_Parm | CPF_OutParm)

void ACamera::ApplyCameraModifiers(float DeltaTime, struct FTPOV& OutPOV)
{
	static UFunction* uFnApplyCameraModifiers = nullptr;

	if (!uFnApplyCameraModifiers)
	{
		uFnApplyCameraModifiers = UFunction::FindFunction("Function Engine.Camera.ApplyCameraModifiers");
	}

	ACamera_execApplyCameraModifiers_Params ApplyCameraModifiers_Params;
	memset(&ApplyCameraModifiers_Params, 0, sizeof(ApplyCameraModifiers_Params));
	memcpy_s(&ApplyCameraModifiers_Params.DeltaTime, sizeof(ApplyCameraModifiers_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));
	memcpy_s(&ApplyCameraModifiers_Params.OutPOV, sizeof(ApplyCameraModifiers_Params.OutPOV), &OutPOV, sizeof(OutPOV));

	uFnApplyCameraModifiers->iNative = 0;
	uFnApplyCameraModifiers->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnApplyCameraModifiers, &ApplyCameraModifiers_Params, nullptr);
	uFnApplyCameraModifiers->FunctionFlags |= 0x400;
	uFnApplyCameraModifiers->iNative = 15629;

	memcpy_s(&OutPOV, sizeof(OutPOV), &ApplyCameraModifiers_Params.OutPOV, sizeof(ApplyCameraModifiers_Params.OutPOV));
};

// Function Engine.Camera.Destroyed
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void ACamera::eventDestroyed()
{
	static UFunction* uFnDestroyed = nullptr;

	if (!uFnDestroyed)
	{
		uFnDestroyed = UFunction::FindFunction("Function Engine.Camera.Destroyed");
	}

	ACamera_eventDestroyed_Params Destroyed_Params;
	memset(&Destroyed_Params, 0, sizeof(Destroyed_Params));

	this->ProcessEvent(uFnDestroyed, &Destroyed_Params, nullptr);
};

// Function Engine.Camera.PostBeginPlay
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void ACamera::PostBeginPlay()
{
	static UFunction* uFnPostBeginPlay = nullptr;

	if (!uFnPostBeginPlay)
	{
		uFnPostBeginPlay = UFunction::FindFunction("Function Engine.Camera.PostBeginPlay");
	}

	ACamera_execPostBeginPlay_Params PostBeginPlay_Params;
	memset(&PostBeginPlay_Params, 0, sizeof(PostBeginPlay_Params));

	this->ProcessEvent(uFnPostBeginPlay, &PostBeginPlay_Params, nullptr);
};

// Function Engine.Camera.CreateCameraModifier
// [0x00080002] (FUNC_Defined | FUNC_Protected | FUNC_AllFlags)
// Parameter Info:
// class UCameraModifier*         ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UCameraModifier*         ModifierClass                  (CPF_Parm)

class UCameraModifier* ACamera::CreateCameraModifier(class UCameraModifier* ModifierClass)
{
	static UFunction* uFnCreateCameraModifier = nullptr;

	if (!uFnCreateCameraModifier)
	{
		uFnCreateCameraModifier = UFunction::FindFunction("Function Engine.Camera.CreateCameraModifier");
	}

	ACamera_execCreateCameraModifier_Params CreateCameraModifier_Params;
	memset(&CreateCameraModifier_Params, 0, sizeof(CreateCameraModifier_Params));
	CreateCameraModifier_Params.ModifierClass = ModifierClass;

	this->ProcessEvent(uFnCreateCameraModifier, &CreateCameraModifier_Params, nullptr);

	return CreateCameraModifier_Params.ReturnValue;
};

// Function Engine.CameraActor.DisplayDebug
// [0x00420102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// class AHUD*                    HUD                            (CPF_Parm)
// float                          out_YL                         (CPF_Parm | CPF_OutParm)
// float                          out_YPos                       (CPF_Parm | CPF_OutParm)

void ACameraActor::DisplayDebug(class AHUD* HUD, float& out_YL, float& out_YPos)
{
	static UFunction* uFnDisplayDebug = nullptr;

	if (!uFnDisplayDebug)
	{
		uFnDisplayDebug = UFunction::FindFunction("Function Engine.CameraActor.DisplayDebug");
	}

	ACameraActor_execDisplayDebug_Params DisplayDebug_Params;
	memset(&DisplayDebug_Params, 0, sizeof(DisplayDebug_Params));
	DisplayDebug_Params.HUD = HUD;
	memcpy_s(&DisplayDebug_Params.out_YL, sizeof(DisplayDebug_Params.out_YL), &out_YL, sizeof(out_YL));
	memcpy_s(&DisplayDebug_Params.out_YPos, sizeof(DisplayDebug_Params.out_YPos), &out_YPos, sizeof(out_YPos));

	this->ProcessEvent(uFnDisplayDebug, &DisplayDebug_Params, nullptr);

	memcpy_s(&out_YL, sizeof(out_YL), &DisplayDebug_Params.out_YL, sizeof(DisplayDebug_Params.out_YL));
	memcpy_s(&out_YPos, sizeof(out_YPos), &DisplayDebug_Params.out_YPos, sizeof(DisplayDebug_Params.out_YPos));
};

// Function Engine.CameraModifier.UpdateAlpha
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[26972])
// Parameter Info:
// class ACamera*                 Camera                         (CPF_Parm)
// float                          DeltaTime                      (CPF_Parm)

void UCameraModifier::UpdateAlpha(class ACamera* Camera, float DeltaTime)
{
	static UFunction* uFnUpdateAlpha = nullptr;

	if (!uFnUpdateAlpha)
	{
		uFnUpdateAlpha = UFunction::FindFunction("Function Engine.CameraModifier.UpdateAlpha");
	}

	UCameraModifier_execUpdateAlpha_Params UpdateAlpha_Params;
	memset(&UpdateAlpha_Params, 0, sizeof(UpdateAlpha_Params));
	UpdateAlpha_Params.Camera = Camera;
	memcpy_s(&UpdateAlpha_Params.DeltaTime, sizeof(UpdateAlpha_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));

	uFnUpdateAlpha->iNative = 0;
	uFnUpdateAlpha->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnUpdateAlpha, &UpdateAlpha_Params, nullptr);
	uFnUpdateAlpha->FunctionFlags |= 0x400;
	uFnUpdateAlpha->iNative = 26972;
};

// Function Engine.CameraModifier.ProcessViewRotation
// [0x00420900] (FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class AActor*                  ViewTarget                     (CPF_Parm)
// float                          DeltaTime                      (CPF_Parm)
// struct FRotator                out_ViewRotation               (CPF_Parm | CPF_OutParm)
// struct FRotator                out_DeltaRot                   (CPF_Parm | CPF_OutParm)

bool UCameraModifier::eventProcessViewRotation(class AActor* ViewTarget, float DeltaTime, struct FRotator& out_ViewRotation, struct FRotator& out_DeltaRot)
{
	static UFunction* uFnProcessViewRotation = nullptr;

	if (!uFnProcessViewRotation)
	{
		uFnProcessViewRotation = UFunction::FindFunction("Function Engine.CameraModifier.ProcessViewRotation");
	}

	UCameraModifier_eventProcessViewRotation_Params ProcessViewRotation_Params;
	memset(&ProcessViewRotation_Params, 0, sizeof(ProcessViewRotation_Params));
	ProcessViewRotation_Params.ViewTarget = ViewTarget;
	memcpy_s(&ProcessViewRotation_Params.DeltaTime, sizeof(ProcessViewRotation_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));
	memcpy_s(&ProcessViewRotation_Params.out_ViewRotation, sizeof(ProcessViewRotation_Params.out_ViewRotation), &out_ViewRotation, sizeof(out_ViewRotation));
	memcpy_s(&ProcessViewRotation_Params.out_DeltaRot, sizeof(ProcessViewRotation_Params.out_DeltaRot), &out_DeltaRot, sizeof(out_DeltaRot));

	this->ProcessEvent(uFnProcessViewRotation, &ProcessViewRotation_Params, nullptr);

	memcpy_s(&out_ViewRotation, sizeof(out_ViewRotation), &ProcessViewRotation_Params.out_ViewRotation, sizeof(ProcessViewRotation_Params.out_ViewRotation));
	memcpy_s(&out_DeltaRot, sizeof(out_DeltaRot), &ProcessViewRotation_Params.out_DeltaRot, sizeof(ProcessViewRotation_Params.out_DeltaRot));

	return ProcessViewRotation_Params.ReturnValue;
};

// Function Engine.CameraModifier.ToggleModifier
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UCameraModifier::ToggleModifier()
{
	static UFunction* uFnToggleModifier = nullptr;

	if (!uFnToggleModifier)
	{
		uFnToggleModifier = UFunction::FindFunction("Function Engine.CameraModifier.ToggleModifier");
	}

	UCameraModifier_execToggleModifier_Params ToggleModifier_Params;
	memset(&ToggleModifier_Params, 0, sizeof(ToggleModifier_Params));

	this->ProcessEvent(uFnToggleModifier, &ToggleModifier_Params, nullptr);
};

// Function Engine.CameraModifier.EnableModifier
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UCameraModifier::EnableModifier()
{
	static UFunction* uFnEnableModifier = nullptr;

	if (!uFnEnableModifier)
	{
		uFnEnableModifier = UFunction::FindFunction("Function Engine.CameraModifier.EnableModifier");
	}

	UCameraModifier_execEnableModifier_Params EnableModifier_Params;
	memset(&EnableModifier_Params, 0, sizeof(EnableModifier_Params));

	this->ProcessEvent(uFnEnableModifier, &EnableModifier_Params, nullptr);
};

// Function Engine.CameraModifier.DisableModifier
// [0x00024802] (FUNC_Defined | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bImmediate                     (CPF_OptionalParm | CPF_Parm)

void UCameraModifier::eventDisableModifier(bool bImmediate)
{
	static UFunction* uFnDisableModifier = nullptr;

	if (!uFnDisableModifier)
	{
		uFnDisableModifier = UFunction::FindFunction("Function Engine.CameraModifier.DisableModifier");
	}

	UCameraModifier_eventDisableModifier_Params DisableModifier_Params;
	memset(&DisableModifier_Params, 0, sizeof(DisableModifier_Params));
	DisableModifier_Params.bImmediate = bImmediate;

	this->ProcessEvent(uFnDisableModifier, &DisableModifier_Params, nullptr);
};

// Function Engine.CameraModifier.RemoveCameraModifier
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class ACamera*                 Camera                         (CPF_Parm)

bool UCameraModifier::RemoveCameraModifier(class ACamera* Camera)
{
	static UFunction* uFnRemoveCameraModifier = nullptr;

	if (!uFnRemoveCameraModifier)
	{
		uFnRemoveCameraModifier = UFunction::FindFunction("Function Engine.CameraModifier.RemoveCameraModifier");
	}

	UCameraModifier_execRemoveCameraModifier_Params RemoveCameraModifier_Params;
	memset(&RemoveCameraModifier_Params, 0, sizeof(RemoveCameraModifier_Params));
	RemoveCameraModifier_Params.Camera = Camera;

	this->ProcessEvent(uFnRemoveCameraModifier, &RemoveCameraModifier_Params, nullptr);

	return RemoveCameraModifier_Params.ReturnValue;
};

// Function Engine.CameraModifier.AddCameraModifier
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class ACamera*                 Camera                         (CPF_Parm)

bool UCameraModifier::AddCameraModifier(class ACamera* Camera)
{
	static UFunction* uFnAddCameraModifier = nullptr;

	if (!uFnAddCameraModifier)
	{
		uFnAddCameraModifier = UFunction::FindFunction("Function Engine.CameraModifier.AddCameraModifier");
	}

	UCameraModifier_execAddCameraModifier_Params AddCameraModifier_Params;
	memset(&AddCameraModifier_Params, 0, sizeof(AddCameraModifier_Params));
	AddCameraModifier_Params.Camera = Camera;

	this->ProcessEvent(uFnAddCameraModifier, &AddCameraModifier_Params, nullptr);

	return AddCameraModifier_Params.ReturnValue;
};

// Function Engine.CameraModifier.IsDisabled
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[21376])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UCameraModifier::IsDisabled()
{
	static UFunction* uFnIsDisabled = nullptr;

	if (!uFnIsDisabled)
	{
		uFnIsDisabled = UFunction::FindFunction("Function Engine.CameraModifier.IsDisabled");
	}

	UCameraModifier_execIsDisabled_Params IsDisabled_Params;
	memset(&IsDisabled_Params, 0, sizeof(IsDisabled_Params));

	uFnIsDisabled->iNative = 0;
	uFnIsDisabled->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnIsDisabled, &IsDisabled_Params, nullptr);
	uFnIsDisabled->FunctionFlags |= 0x400;
	uFnIsDisabled->iNative = 21376;

	return IsDisabled_Params.ReturnValue;
};

// Function Engine.CameraModifier.ModifyCamera
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[22938])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class ACamera*                 Camera                         (CPF_Parm)
// float                          DeltaTime                      (CPF_Parm)
// struct FTPOV                   OutPOV                         (CPF_Parm | CPF_OutParm)

bool UCameraModifier::ModifyCamera(class ACamera* Camera, float DeltaTime, struct FTPOV& OutPOV)
{
	static UFunction* uFnModifyCamera = nullptr;

	if (!uFnModifyCamera)
	{
		uFnModifyCamera = UFunction::FindFunction("Function Engine.CameraModifier.ModifyCamera");
	}

	UCameraModifier_execModifyCamera_Params ModifyCamera_Params;
	memset(&ModifyCamera_Params, 0, sizeof(ModifyCamera_Params));
	ModifyCamera_Params.Camera = Camera;
	memcpy_s(&ModifyCamera_Params.DeltaTime, sizeof(ModifyCamera_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));
	memcpy_s(&ModifyCamera_Params.OutPOV, sizeof(ModifyCamera_Params.OutPOV), &OutPOV, sizeof(OutPOV));

	uFnModifyCamera->iNative = 0;
	uFnModifyCamera->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnModifyCamera, &ModifyCamera_Params, nullptr);
	uFnModifyCamera->FunctionFlags |= 0x400;
	uFnModifyCamera->iNative = 22938;

	memcpy_s(&OutPOV, sizeof(OutPOV), &ModifyCamera_Params.OutPOV, sizeof(ModifyCamera_Params.OutPOV));

	return ModifyCamera_Params.ReturnValue;
};

// Function Engine.CameraModifier.Init
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UCameraModifier::Init()
{
	static UFunction* uFnInit = nullptr;

	if (!uFnInit)
	{
		uFnInit = UFunction::FindFunction("Function Engine.CameraModifier.Init");
	}

	UCameraModifier_execInit_Params Init_Params;
	memset(&Init_Params, 0, sizeof(Init_Params));

	this->ProcessEvent(uFnInit, &Init_Params, nullptr);
};

// Function Engine.DisFog.OnToggle
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_Toggle*          Action                         (CPF_Parm)

void ADisFog::OnToggle(class USeqAct_Toggle* Action)
{
	static UFunction* uFnOnToggle = nullptr;

	if (!uFnOnToggle)
	{
		uFnOnToggle = UFunction::FindFunction("Function Engine.DisFog.OnToggle");
	}

	ADisFog_execOnToggle_Params OnToggle_Params;
	memset(&OnToggle_Params, 0, sizeof(OnToggle_Params));
	OnToggle_Params.Action = Action;

	this->ProcessEvent(uFnOnToggle, &OnToggle_Params, nullptr);
};

// Function Engine.DisFog.ReplicatedEvent
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FName                    VarName                        (CPF_Parm)

void ADisFog::eventReplicatedEvent(const class FName& VarName)
{
	static UFunction* uFnReplicatedEvent = nullptr;

	if (!uFnReplicatedEvent)
	{
		uFnReplicatedEvent = UFunction::FindFunction("Function Engine.DisFog.ReplicatedEvent");
	}

	ADisFog_eventReplicatedEvent_Params ReplicatedEvent_Params;
	memset(&ReplicatedEvent_Params, 0, sizeof(ReplicatedEvent_Params));
	memcpy_s(&ReplicatedEvent_Params.VarName, sizeof(ReplicatedEvent_Params.VarName), &VarName, sizeof(VarName));

	this->ProcessEvent(uFnReplicatedEvent, &ReplicatedEvent_Params, nullptr);
};

// Function Engine.DisFog.PostBeginPlay
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void ADisFog::eventPostBeginPlay()
{
	static UFunction* uFnPostBeginPlay = nullptr;

	if (!uFnPostBeginPlay)
	{
		uFnPostBeginPlay = UFunction::FindFunction("Function Engine.DisFog.PostBeginPlay");
	}

	ADisFog_eventPostBeginPlay_Params PostBeginPlay_Params;
	memset(&PostBeginPlay_Params, 0, sizeof(PostBeginPlay_Params));

	this->ProcessEvent(uFnPostBeginPlay, &PostBeginPlay_Params, nullptr);
};

// Function Engine.DisFogComponent.SetEnabled
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13734])
// Parameter Info:
// uint32_t                       bSetEnabled                    (CPF_Parm)

void UDisFogComponent::SetEnabled(bool bSetEnabled)
{
	static UFunction* uFnSetEnabled = nullptr;

	if (!uFnSetEnabled)
	{
		uFnSetEnabled = UFunction::FindFunction("Function Engine.DisFogComponent.SetEnabled");
	}

	UDisFogComponent_execSetEnabled_Params SetEnabled_Params;
	memset(&SetEnabled_Params, 0, sizeof(SetEnabled_Params));
	SetEnabled_Params.bSetEnabled = bSetEnabled;

	uFnSetEnabled->iNative = 0;
	uFnSetEnabled->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetEnabled, &SetEnabled_Params, nullptr);
	uFnSetEnabled->FunctionFlags |= 0x400;
	uFnSetEnabled->iNative = 13734;
};

// Function Engine.NavMeshBlockToggleable.OnToggle
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_Toggle*          _pAction                       (CPF_Parm)

void ANavMeshBlockToggleable::OnToggle(class USeqAct_Toggle* _pAction)
{
	static UFunction* uFnOnToggle = nullptr;

	if (!uFnOnToggle)
	{
		uFnOnToggle = UFunction::FindFunction("Function Engine.NavMeshBlockToggleable.OnToggle");
	}

	ANavMeshBlockToggleable_execOnToggle_Params OnToggle_Params;
	memset(&OnToggle_Params, 0, sizeof(OnToggle_Params));
	OnToggle_Params._pAction = _pAction;

	this->ProcessEvent(uFnOnToggle, &OnToggle_Params, nullptr);
};

// Function Engine.NavMeshBlockToggleable.OnToggle_Native
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[23664])
// Parameter Info:
// class USeqAct_Toggle*          _pAction                       (CPF_Parm)

void ANavMeshBlockToggleable::OnToggle_Native(class USeqAct_Toggle* _pAction)
{
	static UFunction* uFnOnToggle_Native = nullptr;

	if (!uFnOnToggle_Native)
	{
		uFnOnToggle_Native = UFunction::FindFunction("Function Engine.NavMeshBlockToggleable.OnToggle_Native");
	}

	ANavMeshBlockToggleable_execOnToggle_Native_Params OnToggle_Native_Params;
	memset(&OnToggle_Native_Params, 0, sizeof(OnToggle_Native_Params));
	OnToggle_Native_Params._pAction = _pAction;

	uFnOnToggle_Native->iNative = 0;
	uFnOnToggle_Native->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnOnToggle_Native, &OnToggle_Native_Params, nullptr);
	uFnOnToggle_Native->FunctionFlags |= 0x400;
	uFnOnToggle_Native->iNative = 23664;
};

// Function Engine.LocalMessage.PartiallyDuplicates
// [0x00022002] (FUNC_Defined | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        Switch1                        (CPF_Parm)
// int32_t                        Switch2                        (CPF_Parm)
// class UObject*                 OptionalObject1                (CPF_Parm)
// class UObject*                 OptionalObject2                (CPF_Parm)

bool ULocalMessage::PartiallyDuplicates(int32_t Switch1, int32_t Switch2, class UObject* OptionalObject1, class UObject* OptionalObject2)
{
	static UFunction* uFnPartiallyDuplicates = nullptr;

	if (!uFnPartiallyDuplicates)
	{
		uFnPartiallyDuplicates = UFunction::FindFunction("Function Engine.LocalMessage.PartiallyDuplicates");
	}

	ULocalMessage_execPartiallyDuplicates_Params PartiallyDuplicates_Params;
	memset(&PartiallyDuplicates_Params, 0, sizeof(PartiallyDuplicates_Params));
	memcpy_s(&PartiallyDuplicates_Params.Switch1, sizeof(PartiallyDuplicates_Params.Switch1), &Switch1, sizeof(Switch1));
	memcpy_s(&PartiallyDuplicates_Params.Switch2, sizeof(PartiallyDuplicates_Params.Switch2), &Switch2, sizeof(Switch2));
	PartiallyDuplicates_Params.OptionalObject1 = OptionalObject1;
	PartiallyDuplicates_Params.OptionalObject2 = OptionalObject2;

	ULocalMessage::StaticClass()->ProcessEvent(uFnPartiallyDuplicates, &PartiallyDuplicates_Params, nullptr);

	return PartiallyDuplicates_Params.ReturnValue;
};

// Function Engine.LocalMessage.IsConsoleMessage
// [0x00022002] (FUNC_Defined | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        Switch                         (CPF_Parm)

bool ULocalMessage::IsConsoleMessage(int32_t Switch)
{
	static UFunction* uFnIsConsoleMessage = nullptr;

	if (!uFnIsConsoleMessage)
	{
		uFnIsConsoleMessage = UFunction::FindFunction("Function Engine.LocalMessage.IsConsoleMessage");
	}

	ULocalMessage_execIsConsoleMessage_Params IsConsoleMessage_Params;
	memset(&IsConsoleMessage_Params, 0, sizeof(IsConsoleMessage_Params));
	memcpy_s(&IsConsoleMessage_Params.Switch, sizeof(IsConsoleMessage_Params.Switch), &Switch, sizeof(Switch));

	ULocalMessage::StaticClass()->ProcessEvent(uFnIsConsoleMessage, &IsConsoleMessage_Params, nullptr);

	return IsConsoleMessage_Params.ReturnValue;
};

// Function Engine.LocalMessage.GetLifeTime
// [0x00022002] (FUNC_Defined | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        Switch                         (CPF_Parm)

float ULocalMessage::GetLifeTime(int32_t Switch)
{
	static UFunction* uFnGetLifeTime = nullptr;

	if (!uFnGetLifeTime)
	{
		uFnGetLifeTime = UFunction::FindFunction("Function Engine.LocalMessage.GetLifeTime");
	}

	ULocalMessage_execGetLifeTime_Params GetLifeTime_Params;
	memset(&GetLifeTime_Params, 0, sizeof(GetLifeTime_Params));
	memcpy_s(&GetLifeTime_Params.Switch, sizeof(GetLifeTime_Params.Switch), &Switch, sizeof(Switch));

	ULocalMessage::StaticClass()->ProcessEvent(uFnGetLifeTime, &GetLifeTime_Params, nullptr);

	return GetLifeTime_Params.ReturnValue;
};

// Function Engine.LocalMessage.GetFontSize
// [0x00022002] (FUNC_Defined | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        Switch                         (CPF_Parm)

int32_t ULocalMessage::GetFontSize(int32_t Switch)
{
	static UFunction* uFnGetFontSize = nullptr;

	if (!uFnGetFontSize)
	{
		uFnGetFontSize = UFunction::FindFunction("Function Engine.LocalMessage.GetFontSize");
	}

	ULocalMessage_execGetFontSize_Params GetFontSize_Params;
	memset(&GetFontSize_Params, 0, sizeof(GetFontSize_Params));
	memcpy_s(&GetFontSize_Params.Switch, sizeof(GetFontSize_Params.Switch), &Switch, sizeof(Switch));

	ULocalMessage::StaticClass()->ProcessEvent(uFnGetFontSize, &GetFontSize_Params, nullptr);

	return GetFontSize_Params.ReturnValue;
};

// Function Engine.LocalMessage.GetPos
// [0x00022002] (FUNC_Defined | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        Switch                         (CPF_Parm)
// class AHUD*                    myHUD                          (CPF_Parm)

float ULocalMessage::GetPos(int32_t Switch, class AHUD* myHUD)
{
	static UFunction* uFnGetPos = nullptr;

	if (!uFnGetPos)
	{
		uFnGetPos = UFunction::FindFunction("Function Engine.LocalMessage.GetPos");
	}

	ULocalMessage_execGetPos_Params GetPos_Params;
	memset(&GetPos_Params, 0, sizeof(GetPos_Params));
	memcpy_s(&GetPos_Params.Switch, sizeof(GetPos_Params.Switch), &Switch, sizeof(Switch));
	GetPos_Params.myHUD = myHUD;

	ULocalMessage::StaticClass()->ProcessEvent(uFnGetPos, &GetPos_Params, nullptr);

	return GetPos_Params.ReturnValue;
};

// Function Engine.LocalMessage.GetColor
// [0x00026002] (FUNC_Defined | FUNC_Static | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FColor                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        Switch                         (CPF_OptionalParm | CPF_Parm)
// class UObject*                 OptionalObject                 (CPF_OptionalParm | CPF_Parm)

struct FColor ULocalMessage::GetColor(int32_t Switch, class UObject* OptionalObject)
{
	static UFunction* uFnGetColor = nullptr;

	if (!uFnGetColor)
	{
		uFnGetColor = UFunction::FindFunction("Function Engine.LocalMessage.GetColor");
	}

	ULocalMessage_execGetColor_Params GetColor_Params;
	memset(&GetColor_Params, 0, sizeof(GetColor_Params));
	memcpy_s(&GetColor_Params.Switch, sizeof(GetColor_Params.Switch), &Switch, sizeof(Switch));
	GetColor_Params.OptionalObject = OptionalObject;

	ULocalMessage::StaticClass()->ProcessEvent(uFnGetColor, &GetColor_Params, nullptr);

	return GetColor_Params.ReturnValue;
};

// Function Engine.LocalMessage.GetConsoleColor
// [0x00022002] (FUNC_Defined | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FColor                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

struct FColor ULocalMessage::GetConsoleColor()
{
	static UFunction* uFnGetConsoleColor = nullptr;

	if (!uFnGetConsoleColor)
	{
		uFnGetConsoleColor = UFunction::FindFunction("Function Engine.LocalMessage.GetConsoleColor");
	}

	ULocalMessage_execGetConsoleColor_Params GetConsoleColor_Params;
	memset(&GetConsoleColor_Params, 0, sizeof(GetConsoleColor_Params));

	ULocalMessage::StaticClass()->ProcessEvent(uFnGetConsoleColor, &GetConsoleColor_Params, nullptr);

	return GetConsoleColor_Params.ReturnValue;
};

// Function Engine.LocalMessage.GetString
// [0x00026002] (FUNC_Defined | FUNC_Static | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)
// int32_t                        Switch                         (CPF_OptionalParm | CPF_Parm)
// uint32_t                       bPRI1HUD                       (CPF_OptionalParm | CPF_Parm)
// class UObject*                 OptionalObject                 (CPF_OptionalParm | CPF_Parm)

class FString ULocalMessage::GetString(int32_t Switch, bool bPRI1HUD, class UObject* OptionalObject)
{
	static UFunction* uFnGetString = nullptr;

	if (!uFnGetString)
	{
		uFnGetString = UFunction::FindFunction("Function Engine.LocalMessage.GetString");
	}

	ULocalMessage_execGetString_Params GetString_Params;
	memset(&GetString_Params, 0, sizeof(GetString_Params));
	memcpy_s(&GetString_Params.Switch, sizeof(GetString_Params.Switch), &Switch, sizeof(Switch));
	GetString_Params.bPRI1HUD = bPRI1HUD;
	GetString_Params.OptionalObject = OptionalObject;

	ULocalMessage::StaticClass()->ProcessEvent(uFnGetString, &GetString_Params, nullptr);

	return GetString_Params.ReturnValue;
};

// Function Engine.LocalMessage.ClientReceive
// [0x00026002] (FUNC_Defined | FUNC_Static | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class APlayerController*       P                              (CPF_Parm)
// int32_t                        Switch                         (CPF_OptionalParm | CPF_Parm)
// class UObject*                 OptionalObject                 (CPF_OptionalParm | CPF_Parm)

void ULocalMessage::ClientReceive(class APlayerController* P, int32_t Switch, class UObject* OptionalObject)
{
	static UFunction* uFnClientReceive = nullptr;

	if (!uFnClientReceive)
	{
		uFnClientReceive = UFunction::FindFunction("Function Engine.LocalMessage.ClientReceive");
	}

	ULocalMessage_execClientReceive_Params ClientReceive_Params;
	memset(&ClientReceive_Params, 0, sizeof(ClientReceive_Params));
	ClientReceive_Params.P = P;
	memcpy_s(&ClientReceive_Params.Switch, sizeof(ClientReceive_Params.Switch), &Switch, sizeof(Switch));
	ClientReceive_Params.OptionalObject = OptionalObject;

	ULocalMessage::StaticClass()->ProcessEvent(uFnClientReceive, &ClientReceive_Params, nullptr);
};

// Function Engine.SeqAct_SetVelocity.GetObjClassVersion
// [0x00022802] (FUNC_Defined | FUNC_Event | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t USeqAct_SetVelocity::eventGetObjClassVersion()
{
	static UFunction* uFnGetObjClassVersion = nullptr;

	if (!uFnGetObjClassVersion)
	{
		uFnGetObjClassVersion = UFunction::FindFunction("Function Engine.SeqAct_SetVelocity.GetObjClassVersion");
	}

	USeqAct_SetVelocity_eventGetObjClassVersion_Params GetObjClassVersion_Params;
	memset(&GetObjClassVersion_Params, 0, sizeof(GetObjClassVersion_Params));

	USeqAct_SetVelocity::StaticClass()->ProcessEvent(uFnGetObjClassVersion, &GetObjClassVersion_Params, nullptr);

	return GetObjClassVersion_Params.ReturnValue;
};

// Function Engine.SeqAct_ToggleHidden.IsValidUISequenceObject
// [0x00024802] (FUNC_Defined | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UUIScreenObject*         TargetObject                   (CPF_OptionalParm | CPF_Parm)

bool USeqAct_ToggleHidden::eventIsValidUISequenceObject(class UUIScreenObject* TargetObject)
{
	static UFunction* uFnIsValidUISequenceObject = nullptr;

	if (!uFnIsValidUISequenceObject)
	{
		uFnIsValidUISequenceObject = UFunction::FindFunction("Function Engine.SeqAct_ToggleHidden.IsValidUISequenceObject");
	}

	USeqAct_ToggleHidden_eventIsValidUISequenceObject_Params IsValidUISequenceObject_Params;
	memset(&IsValidUISequenceObject_Params, 0, sizeof(IsValidUISequenceObject_Params));
	IsValidUISequenceObject_Params.TargetObject = TargetObject;

	this->ProcessEvent(uFnIsValidUISequenceObject, &IsValidUISequenceObject_Params, nullptr);

	return IsValidUISequenceObject_Params.ReturnValue;
};

// Function Engine.EmitterSpawnable.ReplicatedEvent
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FName                    VarName                        (CPF_Parm)

void AEmitterSpawnable::eventReplicatedEvent(const class FName& VarName)
{
	static UFunction* uFnReplicatedEvent = nullptr;

	if (!uFnReplicatedEvent)
	{
		uFnReplicatedEvent = UFunction::FindFunction("Function Engine.EmitterSpawnable.ReplicatedEvent");
	}

	AEmitterSpawnable_eventReplicatedEvent_Params ReplicatedEvent_Params;
	memset(&ReplicatedEvent_Params, 0, sizeof(ReplicatedEvent_Params));
	memcpy_s(&ReplicatedEvent_Params.VarName, sizeof(ReplicatedEvent_Params.VarName), &VarName, sizeof(VarName));

	this->ProcessEvent(uFnReplicatedEvent, &ReplicatedEvent_Params, nullptr);
};

// Function Engine.EmitterSpawnable.SetTemplate
// [0x00024902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UParticleSystem*         NewTemplate                    (CPF_Parm)
// uint32_t                       bDestroyOnFinish               (CPF_OptionalParm | CPF_Parm)

void AEmitterSpawnable::eventSetTemplate(class UParticleSystem* NewTemplate, bool bDestroyOnFinish)
{
	static UFunction* uFnSetTemplate = nullptr;

	if (!uFnSetTemplate)
	{
		uFnSetTemplate = UFunction::FindFunction("Function Engine.EmitterSpawnable.SetTemplate");
	}

	AEmitterSpawnable_eventSetTemplate_Params SetTemplate_Params;
	memset(&SetTemplate_Params, 0, sizeof(SetTemplate_Params));
	SetTemplate_Params.NewTemplate = NewTemplate;
	SetTemplate_Params.bDestroyOnFinish = bDestroyOnFinish;

	this->ProcessEvent(uFnSetTemplate, &SetTemplate_Params, nullptr);
};

// Function Engine.AnimNotify_PlayFaceFXAnim.Notify
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AActor*                  Owner                          (CPF_Parm)
// class UAnimNodeSequence*       AnimSeqInstigator              (CPF_Parm)

void UAnimNotify_PlayFaceFXAnim::eventNotify(class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator)
{
	static UFunction* uFnNotify = nullptr;

	if (!uFnNotify)
	{
		uFnNotify = UFunction::FindFunction("Function Engine.AnimNotify_PlayFaceFXAnim.Notify");
	}

	UAnimNotify_PlayFaceFXAnim_eventNotify_Params Notify_Params;
	memset(&Notify_Params, 0, sizeof(Notify_Params));
	Notify_Params.Owner = Owner;
	Notify_Params.AnimSeqInstigator = AnimSeqInstigator;

	this->ProcessEvent(uFnNotify, &Notify_Params, nullptr);
};

// Function Engine.BroadcastHandler.AllowBroadcastLocalizedTeam
// [0x00024802] (FUNC_Defined | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        TeamIndex                      (CPF_Parm)
// class AActor*                  Sender                         (CPF_Parm)
// class ULocalMessage*           Message                        (CPF_Parm)
// int32_t                        Switch                         (CPF_OptionalParm | CPF_Parm)
// class UObject*                 OptionalObject                 (CPF_OptionalParm | CPF_Parm)

void ABroadcastHandler::eventAllowBroadcastLocalizedTeam(int32_t TeamIndex, class AActor* Sender, class ULocalMessage* Message, int32_t Switch, class UObject* OptionalObject)
{
	static UFunction* uFnAllowBroadcastLocalizedTeam = nullptr;

	if (!uFnAllowBroadcastLocalizedTeam)
	{
		uFnAllowBroadcastLocalizedTeam = UFunction::FindFunction("Function Engine.BroadcastHandler.AllowBroadcastLocalizedTeam");
	}

	ABroadcastHandler_eventAllowBroadcastLocalizedTeam_Params AllowBroadcastLocalizedTeam_Params;
	memset(&AllowBroadcastLocalizedTeam_Params, 0, sizeof(AllowBroadcastLocalizedTeam_Params));
	memcpy_s(&AllowBroadcastLocalizedTeam_Params.TeamIndex, sizeof(AllowBroadcastLocalizedTeam_Params.TeamIndex), &TeamIndex, sizeof(TeamIndex));
	AllowBroadcastLocalizedTeam_Params.Sender = Sender;
	AllowBroadcastLocalizedTeam_Params.Message = Message;
	memcpy_s(&AllowBroadcastLocalizedTeam_Params.Switch, sizeof(AllowBroadcastLocalizedTeam_Params.Switch), &Switch, sizeof(Switch));
	AllowBroadcastLocalizedTeam_Params.OptionalObject = OptionalObject;

	this->ProcessEvent(uFnAllowBroadcastLocalizedTeam, &AllowBroadcastLocalizedTeam_Params, nullptr);
};

// Function Engine.BroadcastHandler.AllowBroadcastLocalized
// [0x00024802] (FUNC_Defined | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AActor*                  Sender                         (CPF_Parm)
// class ULocalMessage*           Message                        (CPF_Parm)
// int32_t                        Switch                         (CPF_OptionalParm | CPF_Parm)
// class UObject*                 OptionalObject                 (CPF_OptionalParm | CPF_Parm)

void ABroadcastHandler::eventAllowBroadcastLocalized(class AActor* Sender, class ULocalMessage* Message, int32_t Switch, class UObject* OptionalObject)
{
	static UFunction* uFnAllowBroadcastLocalized = nullptr;

	if (!uFnAllowBroadcastLocalized)
	{
		uFnAllowBroadcastLocalized = UFunction::FindFunction("Function Engine.BroadcastHandler.AllowBroadcastLocalized");
	}

	ABroadcastHandler_eventAllowBroadcastLocalized_Params AllowBroadcastLocalized_Params;
	memset(&AllowBroadcastLocalized_Params, 0, sizeof(AllowBroadcastLocalized_Params));
	AllowBroadcastLocalized_Params.Sender = Sender;
	AllowBroadcastLocalized_Params.Message = Message;
	memcpy_s(&AllowBroadcastLocalized_Params.Switch, sizeof(AllowBroadcastLocalized_Params.Switch), &Switch, sizeof(Switch));
	AllowBroadcastLocalized_Params.OptionalObject = OptionalObject;

	this->ProcessEvent(uFnAllowBroadcastLocalized, &AllowBroadcastLocalized_Params, nullptr);
};

// Function Engine.BroadcastHandler.BroadcastTeam
// [0x00024002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AController*             Sender                         (CPF_Parm)
// class FString                  Msg                            (CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink)
// class FName                    Type                           (CPF_OptionalParm | CPF_Parm)

void ABroadcastHandler::BroadcastTeam(class AController* Sender, const class FString& Msg, const class FName& Type)
{
	static UFunction* uFnBroadcastTeam = nullptr;

	if (!uFnBroadcastTeam)
	{
		uFnBroadcastTeam = UFunction::FindFunction("Function Engine.BroadcastHandler.BroadcastTeam");
	}

	ABroadcastHandler_execBroadcastTeam_Params BroadcastTeam_Params;
	memset(&BroadcastTeam_Params, 0, sizeof(BroadcastTeam_Params));
	BroadcastTeam_Params.Sender = Sender;
	memcpy_s(&BroadcastTeam_Params.Msg, sizeof(BroadcastTeam_Params.Msg), &Msg, sizeof(Msg));
	memcpy_s(&BroadcastTeam_Params.Type, sizeof(BroadcastTeam_Params.Type), &Type, sizeof(Type));

	this->ProcessEvent(uFnBroadcastTeam, &BroadcastTeam_Params, nullptr);
};

// Function Engine.BroadcastHandler.Broadcast
// [0x00024002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AActor*                  Sender                         (CPF_Parm)
// class FString                  Message                        (CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink)
// class FName                    Type                           (CPF_OptionalParm | CPF_Parm)

void ABroadcastHandler::Broadcast(class AActor* Sender, const class FString& Message, const class FName& Type)
{
	static UFunction* uFnBroadcast = nullptr;

	if (!uFnBroadcast)
	{
		uFnBroadcast = UFunction::FindFunction("Function Engine.BroadcastHandler.Broadcast");
	}

	ABroadcastHandler_execBroadcast_Params Broadcast_Params;
	memset(&Broadcast_Params, 0, sizeof(Broadcast_Params));
	Broadcast_Params.Sender = Sender;
	memcpy_s(&Broadcast_Params.Message, sizeof(Broadcast_Params.Message), &Message, sizeof(Message));
	memcpy_s(&Broadcast_Params.Type, sizeof(Broadcast_Params.Type), &Type, sizeof(Type));

	this->ProcessEvent(uFnBroadcast, &Broadcast_Params, nullptr);
};

// Function Engine.BroadcastHandler.BroadcastLocalized
// [0x00024002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AActor*                  Sender                         (CPF_Parm)
// class APlayerController*       Receiver                       (CPF_Parm)
// class ULocalMessage*           Message                        (CPF_Parm)
// int32_t                        Switch                         (CPF_OptionalParm | CPF_Parm)
// class UObject*                 OptionalObject                 (CPF_OptionalParm | CPF_Parm)

void ABroadcastHandler::BroadcastLocalized(class AActor* Sender, class APlayerController* Receiver, class ULocalMessage* Message, int32_t Switch, class UObject* OptionalObject)
{
	static UFunction* uFnBroadcastLocalized = nullptr;

	if (!uFnBroadcastLocalized)
	{
		uFnBroadcastLocalized = UFunction::FindFunction("Function Engine.BroadcastHandler.BroadcastLocalized");
	}

	ABroadcastHandler_execBroadcastLocalized_Params BroadcastLocalized_Params;
	memset(&BroadcastLocalized_Params, 0, sizeof(BroadcastLocalized_Params));
	BroadcastLocalized_Params.Sender = Sender;
	BroadcastLocalized_Params.Receiver = Receiver;
	BroadcastLocalized_Params.Message = Message;
	memcpy_s(&BroadcastLocalized_Params.Switch, sizeof(BroadcastLocalized_Params.Switch), &Switch, sizeof(Switch));
	BroadcastLocalized_Params.OptionalObject = OptionalObject;

	this->ProcessEvent(uFnBroadcastLocalized, &BroadcastLocalized_Params, nullptr);
};

// Function Engine.BroadcastHandler.BroadcastText
// [0x00024002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class APlayerController*       Receiver                       (CPF_Parm)
// class FString                  Msg                            (CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink)
// class FName                    Type                           (CPF_OptionalParm | CPF_Parm)

void ABroadcastHandler::BroadcastText(class APlayerController* Receiver, const class FString& Msg, const class FName& Type)
{
	static UFunction* uFnBroadcastText = nullptr;

	if (!uFnBroadcastText)
	{
		uFnBroadcastText = UFunction::FindFunction("Function Engine.BroadcastHandler.BroadcastText");
	}

	ABroadcastHandler_execBroadcastText_Params BroadcastText_Params;
	memset(&BroadcastText_Params, 0, sizeof(BroadcastText_Params));
	BroadcastText_Params.Receiver = Receiver;
	memcpy_s(&BroadcastText_Params.Msg, sizeof(BroadcastText_Params.Msg), &Msg, sizeof(Msg));
	memcpy_s(&BroadcastText_Params.Type, sizeof(BroadcastText_Params.Type), &Type, sizeof(Type));

	this->ProcessEvent(uFnBroadcastText, &BroadcastText_Params, nullptr);
};

// Function Engine.BroadcastHandler.AllowsBroadcast
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class AActor*                  broadcaster                    (CPF_Parm)
// int32_t                        InLen                          (CPF_Parm)

bool ABroadcastHandler::AllowsBroadcast(class AActor* broadcaster, int32_t InLen)
{
	static UFunction* uFnAllowsBroadcast = nullptr;

	if (!uFnAllowsBroadcast)
	{
		uFnAllowsBroadcast = UFunction::FindFunction("Function Engine.BroadcastHandler.AllowsBroadcast");
	}

	ABroadcastHandler_execAllowsBroadcast_Params AllowsBroadcast_Params;
	memset(&AllowsBroadcast_Params, 0, sizeof(AllowsBroadcast_Params));
	AllowsBroadcast_Params.broadcaster = broadcaster;
	memcpy_s(&AllowsBroadcast_Params.InLen, sizeof(AllowsBroadcast_Params.InLen), &InLen, sizeof(InLen));

	this->ProcessEvent(uFnAllowsBroadcast, &AllowsBroadcast_Params, nullptr);

	return AllowsBroadcast_Params.ReturnValue;
};

// Function Engine.BroadcastHandler.UpdateSentText
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void ABroadcastHandler::UpdateSentText()
{
	static UFunction* uFnUpdateSentText = nullptr;

	if (!uFnUpdateSentText)
	{
		uFnUpdateSentText = UFunction::FindFunction("Function Engine.BroadcastHandler.UpdateSentText");
	}

	ABroadcastHandler_execUpdateSentText_Params UpdateSentText_Params;
	memset(&UpdateSentText_Params, 0, sizeof(UpdateSentText_Params));

	this->ProcessEvent(uFnUpdateSentText, &UpdateSentText_Params, nullptr);
};

// Function Engine.OnlinePlayerInterface.GetAchievements
// [0x00424000] (FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// EOnlineEnumerationReadState    ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint8_t                        LocalUserNum                   (CPF_Parm)
// int32_t                        TitleId                        (CPF_OptionalParm | CPF_Parm)
// class TArray<struct FAchievementDetails> Achievements                   (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

EOnlineEnumerationReadState UOnlinePlayerInterface::GetAchievements(uint8_t LocalUserNum, int32_t TitleId, class TArray<struct FAchievementDetails>& Achievements)
{
	static UFunction* uFnGetAchievements = nullptr;

	if (!uFnGetAchievements)
	{
		uFnGetAchievements = UFunction::FindFunction("Function Engine.OnlinePlayerInterface.GetAchievements");
	}

	UOnlinePlayerInterface_execGetAchievements_Params GetAchievements_Params;
	memset(&GetAchievements_Params, 0, sizeof(GetAchievements_Params));
	memcpy_s(&GetAchievements_Params.LocalUserNum, sizeof(GetAchievements_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	memcpy_s(&GetAchievements_Params.TitleId, sizeof(GetAchievements_Params.TitleId), &TitleId, sizeof(TitleId));
	memcpy_s(&GetAchievements_Params.Achievements, sizeof(GetAchievements_Params.Achievements), &Achievements, sizeof(Achievements));

	this->ProcessEvent(uFnGetAchievements, &GetAchievements_Params, nullptr);

	memcpy_s(&Achievements, sizeof(Achievements), &GetAchievements_Params.Achievements, sizeof(GetAchievements_Params.Achievements));

	return static_cast<EOnlineEnumerationReadState>(GetAchievements_Params.ReturnValue);
};

// Function Engine.OnlinePlayerInterface.ClearReadAchievementsCompleteDelegate
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint8_t                        LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         ReadAchievementsCompleteDelegate (CPF_Parm | CPF_NeedCtorLink)

void UOnlinePlayerInterface::ClearReadAchievementsCompleteDelegate(uint8_t LocalUserNum, const struct FScriptDelegate& ReadAchievementsCompleteDelegate)
{
	static UFunction* uFnClearReadAchievementsCompleteDelegate = nullptr;

	if (!uFnClearReadAchievementsCompleteDelegate)
	{
		uFnClearReadAchievementsCompleteDelegate = UFunction::FindFunction("Function Engine.OnlinePlayerInterface.ClearReadAchievementsCompleteDelegate");
	}

	UOnlinePlayerInterface_execClearReadAchievementsCompleteDelegate_Params ClearReadAchievementsCompleteDelegate_Params;
	memset(&ClearReadAchievementsCompleteDelegate_Params, 0, sizeof(ClearReadAchievementsCompleteDelegate_Params));
	memcpy_s(&ClearReadAchievementsCompleteDelegate_Params.LocalUserNum, sizeof(ClearReadAchievementsCompleteDelegate_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	memcpy_s(&ClearReadAchievementsCompleteDelegate_Params.ReadAchievementsCompleteDelegate, sizeof(ClearReadAchievementsCompleteDelegate_Params.ReadAchievementsCompleteDelegate), &ReadAchievementsCompleteDelegate, sizeof(ReadAchievementsCompleteDelegate));

	this->ProcessEvent(uFnClearReadAchievementsCompleteDelegate, &ClearReadAchievementsCompleteDelegate_Params, nullptr);
};

// Function Engine.OnlinePlayerInterface.AddReadAchievementsCompleteDelegate
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint8_t                        LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         ReadAchievementsCompleteDelegate (CPF_Parm | CPF_NeedCtorLink)

void UOnlinePlayerInterface::AddReadAchievementsCompleteDelegate(uint8_t LocalUserNum, const struct FScriptDelegate& ReadAchievementsCompleteDelegate)
{
	static UFunction* uFnAddReadAchievementsCompleteDelegate = nullptr;

	if (!uFnAddReadAchievementsCompleteDelegate)
	{
		uFnAddReadAchievementsCompleteDelegate = UFunction::FindFunction("Function Engine.OnlinePlayerInterface.AddReadAchievementsCompleteDelegate");
	}

	UOnlinePlayerInterface_execAddReadAchievementsCompleteDelegate_Params AddReadAchievementsCompleteDelegate_Params;
	memset(&AddReadAchievementsCompleteDelegate_Params, 0, sizeof(AddReadAchievementsCompleteDelegate_Params));
	memcpy_s(&AddReadAchievementsCompleteDelegate_Params.LocalUserNum, sizeof(AddReadAchievementsCompleteDelegate_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	memcpy_s(&AddReadAchievementsCompleteDelegate_Params.ReadAchievementsCompleteDelegate, sizeof(AddReadAchievementsCompleteDelegate_Params.ReadAchievementsCompleteDelegate), &ReadAchievementsCompleteDelegate, sizeof(ReadAchievementsCompleteDelegate));

	this->ProcessEvent(uFnAddReadAchievementsCompleteDelegate, &AddReadAchievementsCompleteDelegate_Params, nullptr);
};

// Function Engine.OnlinePlayerInterface.OnReadAchievementsComplete
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// int32_t                        TitleId                        (CPF_Parm)

void UOnlinePlayerInterface::OnReadAchievementsComplete(int32_t TitleId)
{
	static UFunction* uFnOnReadAchievementsComplete = nullptr;

	if (!uFnOnReadAchievementsComplete)
	{
		uFnOnReadAchievementsComplete = UFunction::FindFunction("Function Engine.OnlinePlayerInterface.OnReadAchievementsComplete");
	}

	UOnlinePlayerInterface_execOnReadAchievementsComplete_Params OnReadAchievementsComplete_Params;
	memset(&OnReadAchievementsComplete_Params, 0, sizeof(OnReadAchievementsComplete_Params));
	memcpy_s(&OnReadAchievementsComplete_Params.TitleId, sizeof(OnReadAchievementsComplete_Params.TitleId), &TitleId, sizeof(TitleId));

	this->ProcessEvent(uFnOnReadAchievementsComplete, &OnReadAchievementsComplete_Params, nullptr);
};

// Function Engine.OnlinePlayerInterface.ReadAchievements
// [0x00024000] (FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint8_t                        LocalUserNum                   (CPF_Parm)
// int32_t                        TitleId                        (CPF_OptionalParm | CPF_Parm)
// uint32_t                       bShouldReadText                (CPF_OptionalParm | CPF_Parm)
// uint32_t                       bShouldReadImages              (CPF_OptionalParm | CPF_Parm)

bool UOnlinePlayerInterface::ReadAchievements(uint8_t LocalUserNum, int32_t TitleId, bool bShouldReadText, bool bShouldReadImages)
{
	static UFunction* uFnReadAchievements = nullptr;

	if (!uFnReadAchievements)
	{
		uFnReadAchievements = UFunction::FindFunction("Function Engine.OnlinePlayerInterface.ReadAchievements");
	}

	UOnlinePlayerInterface_execReadAchievements_Params ReadAchievements_Params;
	memset(&ReadAchievements_Params, 0, sizeof(ReadAchievements_Params));
	memcpy_s(&ReadAchievements_Params.LocalUserNum, sizeof(ReadAchievements_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	memcpy_s(&ReadAchievements_Params.TitleId, sizeof(ReadAchievements_Params.TitleId), &TitleId, sizeof(TitleId));
	ReadAchievements_Params.bShouldReadText = bShouldReadText;
	ReadAchievements_Params.bShouldReadImages = bShouldReadImages;

	this->ProcessEvent(uFnReadAchievements, &ReadAchievements_Params, nullptr);

	return ReadAchievements_Params.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.ClearUnlockAchievementCompleteDelegate
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint8_t                        LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         UnlockAchievementCompleteDelegate (CPF_Parm | CPF_NeedCtorLink)

void UOnlinePlayerInterface::ClearUnlockAchievementCompleteDelegate(uint8_t LocalUserNum, const struct FScriptDelegate& UnlockAchievementCompleteDelegate)
{
	static UFunction* uFnClearUnlockAchievementCompleteDelegate = nullptr;

	if (!uFnClearUnlockAchievementCompleteDelegate)
	{
		uFnClearUnlockAchievementCompleteDelegate = UFunction::FindFunction("Function Engine.OnlinePlayerInterface.ClearUnlockAchievementCompleteDelegate");
	}

	UOnlinePlayerInterface_execClearUnlockAchievementCompleteDelegate_Params ClearUnlockAchievementCompleteDelegate_Params;
	memset(&ClearUnlockAchievementCompleteDelegate_Params, 0, sizeof(ClearUnlockAchievementCompleteDelegate_Params));
	memcpy_s(&ClearUnlockAchievementCompleteDelegate_Params.LocalUserNum, sizeof(ClearUnlockAchievementCompleteDelegate_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	memcpy_s(&ClearUnlockAchievementCompleteDelegate_Params.UnlockAchievementCompleteDelegate, sizeof(ClearUnlockAchievementCompleteDelegate_Params.UnlockAchievementCompleteDelegate), &UnlockAchievementCompleteDelegate, sizeof(UnlockAchievementCompleteDelegate));

	this->ProcessEvent(uFnClearUnlockAchievementCompleteDelegate, &ClearUnlockAchievementCompleteDelegate_Params, nullptr);
};

// Function Engine.OnlinePlayerInterface.AddUnlockAchievementCompleteDelegate
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint8_t                        LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         UnlockAchievementCompleteDelegate (CPF_Parm | CPF_NeedCtorLink)

void UOnlinePlayerInterface::AddUnlockAchievementCompleteDelegate(uint8_t LocalUserNum, const struct FScriptDelegate& UnlockAchievementCompleteDelegate)
{
	static UFunction* uFnAddUnlockAchievementCompleteDelegate = nullptr;

	if (!uFnAddUnlockAchievementCompleteDelegate)
	{
		uFnAddUnlockAchievementCompleteDelegate = UFunction::FindFunction("Function Engine.OnlinePlayerInterface.AddUnlockAchievementCompleteDelegate");
	}

	UOnlinePlayerInterface_execAddUnlockAchievementCompleteDelegate_Params AddUnlockAchievementCompleteDelegate_Params;
	memset(&AddUnlockAchievementCompleteDelegate_Params, 0, sizeof(AddUnlockAchievementCompleteDelegate_Params));
	memcpy_s(&AddUnlockAchievementCompleteDelegate_Params.LocalUserNum, sizeof(AddUnlockAchievementCompleteDelegate_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	memcpy_s(&AddUnlockAchievementCompleteDelegate_Params.UnlockAchievementCompleteDelegate, sizeof(AddUnlockAchievementCompleteDelegate_Params.UnlockAchievementCompleteDelegate), &UnlockAchievementCompleteDelegate, sizeof(UnlockAchievementCompleteDelegate));

	this->ProcessEvent(uFnAddUnlockAchievementCompleteDelegate, &AddUnlockAchievementCompleteDelegate_Params, nullptr);
};

// Function Engine.OnlinePlayerInterface.OnUnlockAchievementComplete
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bWasSuccessful                 (CPF_Parm)

void UOnlinePlayerInterface::OnUnlockAchievementComplete(bool bWasSuccessful)
{
	static UFunction* uFnOnUnlockAchievementComplete = nullptr;

	if (!uFnOnUnlockAchievementComplete)
	{
		uFnOnUnlockAchievementComplete = UFunction::FindFunction("Function Engine.OnlinePlayerInterface.OnUnlockAchievementComplete");
	}

	UOnlinePlayerInterface_execOnUnlockAchievementComplete_Params OnUnlockAchievementComplete_Params;
	memset(&OnUnlockAchievementComplete_Params, 0, sizeof(OnUnlockAchievementComplete_Params));
	OnUnlockAchievementComplete_Params.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent(uFnOnUnlockAchievementComplete, &OnUnlockAchievementComplete_Params, nullptr);
};

// Function Engine.OnlinePlayerInterface.UnlockAchievement
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint8_t                        LocalUserNum                   (CPF_Parm)
// int32_t                        AchievementId                  (CPF_Parm)

bool UOnlinePlayerInterface::UnlockAchievement(uint8_t LocalUserNum, int32_t AchievementId)
{
	static UFunction* uFnUnlockAchievement = nullptr;

	if (!uFnUnlockAchievement)
	{
		uFnUnlockAchievement = UFunction::FindFunction("Function Engine.OnlinePlayerInterface.UnlockAchievement");
	}

	UOnlinePlayerInterface_execUnlockAchievement_Params UnlockAchievement_Params;
	memset(&UnlockAchievement_Params, 0, sizeof(UnlockAchievement_Params));
	memcpy_s(&UnlockAchievement_Params.LocalUserNum, sizeof(UnlockAchievement_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	memcpy_s(&UnlockAchievement_Params.AchievementId, sizeof(UnlockAchievement_Params.AchievementId), &AchievementId, sizeof(AchievementId));

	this->ProcessEvent(uFnUnlockAchievement, &UnlockAchievement_Params, nullptr);

	return UnlockAchievement_Params.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.GetKeyboardInputResults
// [0x00420000] (FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)
// uint8_t                        bWasCanceled                   (CPF_Parm | CPF_OutParm)

class FString UOnlinePlayerInterface::GetKeyboardInputResults(uint8_t& bWasCanceled)
{
	static UFunction* uFnGetKeyboardInputResults = nullptr;

	if (!uFnGetKeyboardInputResults)
	{
		uFnGetKeyboardInputResults = UFunction::FindFunction("Function Engine.OnlinePlayerInterface.GetKeyboardInputResults");
	}

	UOnlinePlayerInterface_execGetKeyboardInputResults_Params GetKeyboardInputResults_Params;
	memset(&GetKeyboardInputResults_Params, 0, sizeof(GetKeyboardInputResults_Params));
	memcpy_s(&GetKeyboardInputResults_Params.bWasCanceled, sizeof(GetKeyboardInputResults_Params.bWasCanceled), &bWasCanceled, sizeof(bWasCanceled));

	this->ProcessEvent(uFnGetKeyboardInputResults, &GetKeyboardInputResults_Params, nullptr);

	memcpy_s(&bWasCanceled, sizeof(bWasCanceled), &GetKeyboardInputResults_Params.bWasCanceled, sizeof(GetKeyboardInputResults_Params.bWasCanceled));

	return GetKeyboardInputResults_Params.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.ClearKeyboardInputDoneDelegate
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FScriptDelegate         InputDelegate                  (CPF_Parm | CPF_NeedCtorLink)

void UOnlinePlayerInterface::ClearKeyboardInputDoneDelegate(const struct FScriptDelegate& InputDelegate)
{
	static UFunction* uFnClearKeyboardInputDoneDelegate = nullptr;

	if (!uFnClearKeyboardInputDoneDelegate)
	{
		uFnClearKeyboardInputDoneDelegate = UFunction::FindFunction("Function Engine.OnlinePlayerInterface.ClearKeyboardInputDoneDelegate");
	}

	UOnlinePlayerInterface_execClearKeyboardInputDoneDelegate_Params ClearKeyboardInputDoneDelegate_Params;
	memset(&ClearKeyboardInputDoneDelegate_Params, 0, sizeof(ClearKeyboardInputDoneDelegate_Params));
	memcpy_s(&ClearKeyboardInputDoneDelegate_Params.InputDelegate, sizeof(ClearKeyboardInputDoneDelegate_Params.InputDelegate), &InputDelegate, sizeof(InputDelegate));

	this->ProcessEvent(uFnClearKeyboardInputDoneDelegate, &ClearKeyboardInputDoneDelegate_Params, nullptr);
};

// Function Engine.OnlinePlayerInterface.AddKeyboardInputDoneDelegate
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FScriptDelegate         InputDelegate                  (CPF_Parm | CPF_NeedCtorLink)

void UOnlinePlayerInterface::AddKeyboardInputDoneDelegate(const struct FScriptDelegate& InputDelegate)
{
	static UFunction* uFnAddKeyboardInputDoneDelegate = nullptr;

	if (!uFnAddKeyboardInputDoneDelegate)
	{
		uFnAddKeyboardInputDoneDelegate = UFunction::FindFunction("Function Engine.OnlinePlayerInterface.AddKeyboardInputDoneDelegate");
	}

	UOnlinePlayerInterface_execAddKeyboardInputDoneDelegate_Params AddKeyboardInputDoneDelegate_Params;
	memset(&AddKeyboardInputDoneDelegate_Params, 0, sizeof(AddKeyboardInputDoneDelegate_Params));
	memcpy_s(&AddKeyboardInputDoneDelegate_Params.InputDelegate, sizeof(AddKeyboardInputDoneDelegate_Params.InputDelegate), &InputDelegate, sizeof(InputDelegate));

	this->ProcessEvent(uFnAddKeyboardInputDoneDelegate, &AddKeyboardInputDoneDelegate_Params, nullptr);
};

// Function Engine.OnlinePlayerInterface.OnKeyboardInputComplete
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bWasSuccessful                 (CPF_Parm)

void UOnlinePlayerInterface::OnKeyboardInputComplete(bool bWasSuccessful)
{
	static UFunction* uFnOnKeyboardInputComplete = nullptr;

	if (!uFnOnKeyboardInputComplete)
	{
		uFnOnKeyboardInputComplete = UFunction::FindFunction("Function Engine.OnlinePlayerInterface.OnKeyboardInputComplete");
	}

	UOnlinePlayerInterface_execOnKeyboardInputComplete_Params OnKeyboardInputComplete_Params;
	memset(&OnKeyboardInputComplete_Params, 0, sizeof(OnKeyboardInputComplete_Params));
	OnKeyboardInputComplete_Params.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent(uFnOnKeyboardInputComplete, &OnKeyboardInputComplete_Params, nullptr);
};

// Function Engine.OnlinePlayerInterface.ShowKeyboardUI
// [0x00024000] (FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint8_t                        LocalUserNum                   (CPF_Parm)
// class FString                  TitleText                      (CPF_Parm | CPF_NeedCtorLink)
// class FString                  DescriptionText                (CPF_Parm | CPF_NeedCtorLink)
// uint32_t                       bIsPassword                    (CPF_OptionalParm | CPF_Parm)
// uint32_t                       bShouldValidate                (CPF_OptionalParm | CPF_Parm)
// class FString                  DefaultText                    (CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink)
// int32_t                        MaxResultLength                (CPF_OptionalParm | CPF_Parm)

bool UOnlinePlayerInterface::ShowKeyboardUI(uint8_t LocalUserNum, const class FString& TitleText, const class FString& DescriptionText, bool bIsPassword, bool bShouldValidate, const class FString& DefaultText, int32_t MaxResultLength)
{
	static UFunction* uFnShowKeyboardUI = nullptr;

	if (!uFnShowKeyboardUI)
	{
		uFnShowKeyboardUI = UFunction::FindFunction("Function Engine.OnlinePlayerInterface.ShowKeyboardUI");
	}

	UOnlinePlayerInterface_execShowKeyboardUI_Params ShowKeyboardUI_Params;
	memset(&ShowKeyboardUI_Params, 0, sizeof(ShowKeyboardUI_Params));
	memcpy_s(&ShowKeyboardUI_Params.LocalUserNum, sizeof(ShowKeyboardUI_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	memcpy_s(&ShowKeyboardUI_Params.TitleText, sizeof(ShowKeyboardUI_Params.TitleText), &TitleText, sizeof(TitleText));
	memcpy_s(&ShowKeyboardUI_Params.DescriptionText, sizeof(ShowKeyboardUI_Params.DescriptionText), &DescriptionText, sizeof(DescriptionText));
	ShowKeyboardUI_Params.bIsPassword = bIsPassword;
	ShowKeyboardUI_Params.bShouldValidate = bShouldValidate;
	memcpy_s(&ShowKeyboardUI_Params.DefaultText, sizeof(ShowKeyboardUI_Params.DefaultText), &DefaultText, sizeof(DefaultText));
	memcpy_s(&ShowKeyboardUI_Params.MaxResultLength, sizeof(ShowKeyboardUI_Params.MaxResultLength), &MaxResultLength, sizeof(MaxResultLength));

	this->ProcessEvent(uFnShowKeyboardUI, &ShowKeyboardUI_Params, nullptr);

	return ShowKeyboardUI_Params.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.SetOnlineStatus
// [0x00420000] (FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// uint8_t                        LocalUserNum                   (CPF_Parm)
// int32_t                        StatusId                       (CPF_Parm)
// class TArray<struct FLocalizedStringSetting> LocalizedStringSettings        (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)
// class TArray<struct FSettingsProperty> Properties                     (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void UOnlinePlayerInterface::SetOnlineStatus(uint8_t LocalUserNum, int32_t StatusId, class TArray<struct FLocalizedStringSetting>& LocalizedStringSettings, class TArray<struct FSettingsProperty>& Properties)
{
	static UFunction* uFnSetOnlineStatus = nullptr;

	if (!uFnSetOnlineStatus)
	{
		uFnSetOnlineStatus = UFunction::FindFunction("Function Engine.OnlinePlayerInterface.SetOnlineStatus");
	}

	UOnlinePlayerInterface_execSetOnlineStatus_Params SetOnlineStatus_Params;
	memset(&SetOnlineStatus_Params, 0, sizeof(SetOnlineStatus_Params));
	memcpy_s(&SetOnlineStatus_Params.LocalUserNum, sizeof(SetOnlineStatus_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	memcpy_s(&SetOnlineStatus_Params.StatusId, sizeof(SetOnlineStatus_Params.StatusId), &StatusId, sizeof(StatusId));
	memcpy_s(&SetOnlineStatus_Params.LocalizedStringSettings, sizeof(SetOnlineStatus_Params.LocalizedStringSettings), &LocalizedStringSettings, sizeof(LocalizedStringSettings));
	memcpy_s(&SetOnlineStatus_Params.Properties, sizeof(SetOnlineStatus_Params.Properties), &Properties, sizeof(Properties));

	this->ProcessEvent(uFnSetOnlineStatus, &SetOnlineStatus_Params, nullptr);

	memcpy_s(&LocalizedStringSettings, sizeof(LocalizedStringSettings), &SetOnlineStatus_Params.LocalizedStringSettings, sizeof(SetOnlineStatus_Params.LocalizedStringSettings));
	memcpy_s(&Properties, sizeof(Properties), &SetOnlineStatus_Params.Properties, sizeof(SetOnlineStatus_Params.Properties));
};

// Function Engine.OnlinePlayerInterface.GetFriendsList
// [0x00424000] (FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// EOnlineEnumerationReadState    ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint8_t                        LocalUserNum                   (CPF_Parm)
// int32_t                        Count                          (CPF_OptionalParm | CPF_Parm)
// int32_t                        StartingAt                     (CPF_OptionalParm | CPF_Parm)
// class TArray<struct FOnlineFriend> Friends                        (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

EOnlineEnumerationReadState UOnlinePlayerInterface::GetFriendsList(uint8_t LocalUserNum, int32_t Count, int32_t StartingAt, class TArray<struct FOnlineFriend>& Friends)
{
	static UFunction* uFnGetFriendsList = nullptr;

	if (!uFnGetFriendsList)
	{
		uFnGetFriendsList = UFunction::FindFunction("Function Engine.OnlinePlayerInterface.GetFriendsList");
	}

	UOnlinePlayerInterface_execGetFriendsList_Params GetFriendsList_Params;
	memset(&GetFriendsList_Params, 0, sizeof(GetFriendsList_Params));
	memcpy_s(&GetFriendsList_Params.LocalUserNum, sizeof(GetFriendsList_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	memcpy_s(&GetFriendsList_Params.Count, sizeof(GetFriendsList_Params.Count), &Count, sizeof(Count));
	memcpy_s(&GetFriendsList_Params.StartingAt, sizeof(GetFriendsList_Params.StartingAt), &StartingAt, sizeof(StartingAt));
	memcpy_s(&GetFriendsList_Params.Friends, sizeof(GetFriendsList_Params.Friends), &Friends, sizeof(Friends));

	this->ProcessEvent(uFnGetFriendsList, &GetFriendsList_Params, nullptr);

	memcpy_s(&Friends, sizeof(Friends), &GetFriendsList_Params.Friends, sizeof(GetFriendsList_Params.Friends));

	return static_cast<EOnlineEnumerationReadState>(GetFriendsList_Params.ReturnValue);
};

// Function Engine.OnlinePlayerInterface.ClearReadFriendsCompleteDelegate
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint8_t                        LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         ReadFriendsCompleteDelegate    (CPF_Parm | CPF_NeedCtorLink)

void UOnlinePlayerInterface::ClearReadFriendsCompleteDelegate(uint8_t LocalUserNum, const struct FScriptDelegate& ReadFriendsCompleteDelegate)
{
	static UFunction* uFnClearReadFriendsCompleteDelegate = nullptr;

	if (!uFnClearReadFriendsCompleteDelegate)
	{
		uFnClearReadFriendsCompleteDelegate = UFunction::FindFunction("Function Engine.OnlinePlayerInterface.ClearReadFriendsCompleteDelegate");
	}

	UOnlinePlayerInterface_execClearReadFriendsCompleteDelegate_Params ClearReadFriendsCompleteDelegate_Params;
	memset(&ClearReadFriendsCompleteDelegate_Params, 0, sizeof(ClearReadFriendsCompleteDelegate_Params));
	memcpy_s(&ClearReadFriendsCompleteDelegate_Params.LocalUserNum, sizeof(ClearReadFriendsCompleteDelegate_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	memcpy_s(&ClearReadFriendsCompleteDelegate_Params.ReadFriendsCompleteDelegate, sizeof(ClearReadFriendsCompleteDelegate_Params.ReadFriendsCompleteDelegate), &ReadFriendsCompleteDelegate, sizeof(ReadFriendsCompleteDelegate));

	this->ProcessEvent(uFnClearReadFriendsCompleteDelegate, &ClearReadFriendsCompleteDelegate_Params, nullptr);
};

// Function Engine.OnlinePlayerInterface.AddReadFriendsCompleteDelegate
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint8_t                        LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         ReadFriendsCompleteDelegate    (CPF_Parm | CPF_NeedCtorLink)

void UOnlinePlayerInterface::AddReadFriendsCompleteDelegate(uint8_t LocalUserNum, const struct FScriptDelegate& ReadFriendsCompleteDelegate)
{
	static UFunction* uFnAddReadFriendsCompleteDelegate = nullptr;

	if (!uFnAddReadFriendsCompleteDelegate)
	{
		uFnAddReadFriendsCompleteDelegate = UFunction::FindFunction("Function Engine.OnlinePlayerInterface.AddReadFriendsCompleteDelegate");
	}

	UOnlinePlayerInterface_execAddReadFriendsCompleteDelegate_Params AddReadFriendsCompleteDelegate_Params;
	memset(&AddReadFriendsCompleteDelegate_Params, 0, sizeof(AddReadFriendsCompleteDelegate_Params));
	memcpy_s(&AddReadFriendsCompleteDelegate_Params.LocalUserNum, sizeof(AddReadFriendsCompleteDelegate_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	memcpy_s(&AddReadFriendsCompleteDelegate_Params.ReadFriendsCompleteDelegate, sizeof(AddReadFriendsCompleteDelegate_Params.ReadFriendsCompleteDelegate), &ReadFriendsCompleteDelegate, sizeof(ReadFriendsCompleteDelegate));

	this->ProcessEvent(uFnAddReadFriendsCompleteDelegate, &AddReadFriendsCompleteDelegate_Params, nullptr);
};

// Function Engine.OnlinePlayerInterface.OnReadFriendsComplete
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bWasSuccessful                 (CPF_Parm)

void UOnlinePlayerInterface::OnReadFriendsComplete(bool bWasSuccessful)
{
	static UFunction* uFnOnReadFriendsComplete = nullptr;

	if (!uFnOnReadFriendsComplete)
	{
		uFnOnReadFriendsComplete = UFunction::FindFunction("Function Engine.OnlinePlayerInterface.OnReadFriendsComplete");
	}

	UOnlinePlayerInterface_execOnReadFriendsComplete_Params OnReadFriendsComplete_Params;
	memset(&OnReadFriendsComplete_Params, 0, sizeof(OnReadFriendsComplete_Params));
	OnReadFriendsComplete_Params.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent(uFnOnReadFriendsComplete, &OnReadFriendsComplete_Params, nullptr);
};

// Function Engine.OnlinePlayerInterface.ReadFriendsList
// [0x00024000] (FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint8_t                        LocalUserNum                   (CPF_Parm)
// int32_t                        Count                          (CPF_OptionalParm | CPF_Parm)
// int32_t                        StartingAt                     (CPF_OptionalParm | CPF_Parm)

bool UOnlinePlayerInterface::ReadFriendsList(uint8_t LocalUserNum, int32_t Count, int32_t StartingAt)
{
	static UFunction* uFnReadFriendsList = nullptr;

	if (!uFnReadFriendsList)
	{
		uFnReadFriendsList = UFunction::FindFunction("Function Engine.OnlinePlayerInterface.ReadFriendsList");
	}

	UOnlinePlayerInterface_execReadFriendsList_Params ReadFriendsList_Params;
	memset(&ReadFriendsList_Params, 0, sizeof(ReadFriendsList_Params));
	memcpy_s(&ReadFriendsList_Params.LocalUserNum, sizeof(ReadFriendsList_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	memcpy_s(&ReadFriendsList_Params.Count, sizeof(ReadFriendsList_Params.Count), &Count, sizeof(Count));
	memcpy_s(&ReadFriendsList_Params.StartingAt, sizeof(ReadFriendsList_Params.StartingAt), &StartingAt, sizeof(StartingAt));

	this->ProcessEvent(uFnReadFriendsList, &ReadFriendsList_Params, nullptr);

	return ReadFriendsList_Params.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.ClearWritePlayerStorageCompleteDelegate
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint8_t                        LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         WritePlayerStorageCompleteDelegate (CPF_Parm | CPF_NeedCtorLink)

void UOnlinePlayerInterface::ClearWritePlayerStorageCompleteDelegate(uint8_t LocalUserNum, const struct FScriptDelegate& WritePlayerStorageCompleteDelegate)
{
	static UFunction* uFnClearWritePlayerStorageCompleteDelegate = nullptr;

	if (!uFnClearWritePlayerStorageCompleteDelegate)
	{
		uFnClearWritePlayerStorageCompleteDelegate = UFunction::FindFunction("Function Engine.OnlinePlayerInterface.ClearWritePlayerStorageCompleteDelegate");
	}

	UOnlinePlayerInterface_execClearWritePlayerStorageCompleteDelegate_Params ClearWritePlayerStorageCompleteDelegate_Params;
	memset(&ClearWritePlayerStorageCompleteDelegate_Params, 0, sizeof(ClearWritePlayerStorageCompleteDelegate_Params));
	memcpy_s(&ClearWritePlayerStorageCompleteDelegate_Params.LocalUserNum, sizeof(ClearWritePlayerStorageCompleteDelegate_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	memcpy_s(&ClearWritePlayerStorageCompleteDelegate_Params.WritePlayerStorageCompleteDelegate, sizeof(ClearWritePlayerStorageCompleteDelegate_Params.WritePlayerStorageCompleteDelegate), &WritePlayerStorageCompleteDelegate, sizeof(WritePlayerStorageCompleteDelegate));

	this->ProcessEvent(uFnClearWritePlayerStorageCompleteDelegate, &ClearWritePlayerStorageCompleteDelegate_Params, nullptr);
};

// Function Engine.OnlinePlayerInterface.AddWritePlayerStorageCompleteDelegate
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint8_t                        LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         WritePlayerStorageCompleteDelegate (CPF_Parm | CPF_NeedCtorLink)

void UOnlinePlayerInterface::AddWritePlayerStorageCompleteDelegate(uint8_t LocalUserNum, const struct FScriptDelegate& WritePlayerStorageCompleteDelegate)
{
	static UFunction* uFnAddWritePlayerStorageCompleteDelegate = nullptr;

	if (!uFnAddWritePlayerStorageCompleteDelegate)
	{
		uFnAddWritePlayerStorageCompleteDelegate = UFunction::FindFunction("Function Engine.OnlinePlayerInterface.AddWritePlayerStorageCompleteDelegate");
	}

	UOnlinePlayerInterface_execAddWritePlayerStorageCompleteDelegate_Params AddWritePlayerStorageCompleteDelegate_Params;
	memset(&AddWritePlayerStorageCompleteDelegate_Params, 0, sizeof(AddWritePlayerStorageCompleteDelegate_Params));
	memcpy_s(&AddWritePlayerStorageCompleteDelegate_Params.LocalUserNum, sizeof(AddWritePlayerStorageCompleteDelegate_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	memcpy_s(&AddWritePlayerStorageCompleteDelegate_Params.WritePlayerStorageCompleteDelegate, sizeof(AddWritePlayerStorageCompleteDelegate_Params.WritePlayerStorageCompleteDelegate), &WritePlayerStorageCompleteDelegate, sizeof(WritePlayerStorageCompleteDelegate));

	this->ProcessEvent(uFnAddWritePlayerStorageCompleteDelegate, &AddWritePlayerStorageCompleteDelegate_Params, nullptr);
};

// Function Engine.OnlinePlayerInterface.OnWritePlayerStorageComplete
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// uint8_t                        LocalUserNum                   (CPF_Parm)
// uint32_t                       bWasSuccessful                 (CPF_Parm)

void UOnlinePlayerInterface::OnWritePlayerStorageComplete(uint8_t LocalUserNum, bool bWasSuccessful)
{
	static UFunction* uFnOnWritePlayerStorageComplete = nullptr;

	if (!uFnOnWritePlayerStorageComplete)
	{
		uFnOnWritePlayerStorageComplete = UFunction::FindFunction("Function Engine.OnlinePlayerInterface.OnWritePlayerStorageComplete");
	}

	UOnlinePlayerInterface_execOnWritePlayerStorageComplete_Params OnWritePlayerStorageComplete_Params;
	memset(&OnWritePlayerStorageComplete_Params, 0, sizeof(OnWritePlayerStorageComplete_Params));
	memcpy_s(&OnWritePlayerStorageComplete_Params.LocalUserNum, sizeof(OnWritePlayerStorageComplete_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	OnWritePlayerStorageComplete_Params.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent(uFnOnWritePlayerStorageComplete, &OnWritePlayerStorageComplete_Params, nullptr);
};

// Function Engine.OnlinePlayerInterface.WritePlayerStorage
// [0x00024000] (FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint8_t                        LocalUserNum                   (CPF_Parm)
// class UOnlinePlayerStorage*    PlayerStorage                  (CPF_Parm)
// int32_t                        DeviceID                       (CPF_OptionalParm | CPF_Parm)

bool UOnlinePlayerInterface::WritePlayerStorage(uint8_t LocalUserNum, class UOnlinePlayerStorage* PlayerStorage, int32_t DeviceID)
{
	static UFunction* uFnWritePlayerStorage = nullptr;

	if (!uFnWritePlayerStorage)
	{
		uFnWritePlayerStorage = UFunction::FindFunction("Function Engine.OnlinePlayerInterface.WritePlayerStorage");
	}

	UOnlinePlayerInterface_execWritePlayerStorage_Params WritePlayerStorage_Params;
	memset(&WritePlayerStorage_Params, 0, sizeof(WritePlayerStorage_Params));
	memcpy_s(&WritePlayerStorage_Params.LocalUserNum, sizeof(WritePlayerStorage_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	WritePlayerStorage_Params.PlayerStorage = PlayerStorage;
	memcpy_s(&WritePlayerStorage_Params.DeviceID, sizeof(WritePlayerStorage_Params.DeviceID), &DeviceID, sizeof(DeviceID));

	this->ProcessEvent(uFnWritePlayerStorage, &WritePlayerStorage_Params, nullptr);

	return WritePlayerStorage_Params.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.GetPlayerStorage
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UOnlinePlayerStorage*    ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint8_t                        LocalUserNum                   (CPF_Parm)

class UOnlinePlayerStorage* UOnlinePlayerInterface::GetPlayerStorage(uint8_t LocalUserNum)
{
	static UFunction* uFnGetPlayerStorage = nullptr;

	if (!uFnGetPlayerStorage)
	{
		uFnGetPlayerStorage = UFunction::FindFunction("Function Engine.OnlinePlayerInterface.GetPlayerStorage");
	}

	UOnlinePlayerInterface_execGetPlayerStorage_Params GetPlayerStorage_Params;
	memset(&GetPlayerStorage_Params, 0, sizeof(GetPlayerStorage_Params));
	memcpy_s(&GetPlayerStorage_Params.LocalUserNum, sizeof(GetPlayerStorage_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));

	this->ProcessEvent(uFnGetPlayerStorage, &GetPlayerStorage_Params, nullptr);

	return GetPlayerStorage_Params.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.ClearReadPlayerStorageForNetIdCompleteDelegate
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FUniqueNetId            NetId                          (CPF_Parm)
// struct FScriptDelegate         ReadPlayerStorageForNetIdCompleteDelegate (CPF_Parm | CPF_NeedCtorLink)

void UOnlinePlayerInterface::ClearReadPlayerStorageForNetIdCompleteDelegate(const struct FUniqueNetId& NetId, const struct FScriptDelegate& ReadPlayerStorageForNetIdCompleteDelegate)
{
	static UFunction* uFnClearReadPlayerStorageForNetIdCompleteDelegate = nullptr;

	if (!uFnClearReadPlayerStorageForNetIdCompleteDelegate)
	{
		uFnClearReadPlayerStorageForNetIdCompleteDelegate = UFunction::FindFunction("Function Engine.OnlinePlayerInterface.ClearReadPlayerStorageForNetIdCompleteDelegate");
	}

	UOnlinePlayerInterface_execClearReadPlayerStorageForNetIdCompleteDelegate_Params ClearReadPlayerStorageForNetIdCompleteDelegate_Params;
	memset(&ClearReadPlayerStorageForNetIdCompleteDelegate_Params, 0, sizeof(ClearReadPlayerStorageForNetIdCompleteDelegate_Params));
	memcpy_s(&ClearReadPlayerStorageForNetIdCompleteDelegate_Params.NetId, sizeof(ClearReadPlayerStorageForNetIdCompleteDelegate_Params.NetId), &NetId, sizeof(NetId));
	memcpy_s(&ClearReadPlayerStorageForNetIdCompleteDelegate_Params.ReadPlayerStorageForNetIdCompleteDelegate, sizeof(ClearReadPlayerStorageForNetIdCompleteDelegate_Params.ReadPlayerStorageForNetIdCompleteDelegate), &ReadPlayerStorageForNetIdCompleteDelegate, sizeof(ReadPlayerStorageForNetIdCompleteDelegate));

	this->ProcessEvent(uFnClearReadPlayerStorageForNetIdCompleteDelegate, &ClearReadPlayerStorageForNetIdCompleteDelegate_Params, nullptr);
};

// Function Engine.OnlinePlayerInterface.AddReadPlayerStorageForNetIdCompleteDelegate
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FUniqueNetId            NetId                          (CPF_Parm)
// struct FScriptDelegate         ReadPlayerStorageForNetIdCompleteDelegate (CPF_Parm | CPF_NeedCtorLink)

void UOnlinePlayerInterface::AddReadPlayerStorageForNetIdCompleteDelegate(const struct FUniqueNetId& NetId, const struct FScriptDelegate& ReadPlayerStorageForNetIdCompleteDelegate)
{
	static UFunction* uFnAddReadPlayerStorageForNetIdCompleteDelegate = nullptr;

	if (!uFnAddReadPlayerStorageForNetIdCompleteDelegate)
	{
		uFnAddReadPlayerStorageForNetIdCompleteDelegate = UFunction::FindFunction("Function Engine.OnlinePlayerInterface.AddReadPlayerStorageForNetIdCompleteDelegate");
	}

	UOnlinePlayerInterface_execAddReadPlayerStorageForNetIdCompleteDelegate_Params AddReadPlayerStorageForNetIdCompleteDelegate_Params;
	memset(&AddReadPlayerStorageForNetIdCompleteDelegate_Params, 0, sizeof(AddReadPlayerStorageForNetIdCompleteDelegate_Params));
	memcpy_s(&AddReadPlayerStorageForNetIdCompleteDelegate_Params.NetId, sizeof(AddReadPlayerStorageForNetIdCompleteDelegate_Params.NetId), &NetId, sizeof(NetId));
	memcpy_s(&AddReadPlayerStorageForNetIdCompleteDelegate_Params.ReadPlayerStorageForNetIdCompleteDelegate, sizeof(AddReadPlayerStorageForNetIdCompleteDelegate_Params.ReadPlayerStorageForNetIdCompleteDelegate), &ReadPlayerStorageForNetIdCompleteDelegate, sizeof(ReadPlayerStorageForNetIdCompleteDelegate));

	this->ProcessEvent(uFnAddReadPlayerStorageForNetIdCompleteDelegate, &AddReadPlayerStorageForNetIdCompleteDelegate_Params, nullptr);
};

// Function Engine.OnlinePlayerInterface.OnReadPlayerStorageForNetIdComplete
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// struct FUniqueNetId            NetId                          (CPF_Parm)
// uint32_t                       bWasSuccessful                 (CPF_Parm)

void UOnlinePlayerInterface::OnReadPlayerStorageForNetIdComplete(const struct FUniqueNetId& NetId, bool bWasSuccessful)
{
	static UFunction* uFnOnReadPlayerStorageForNetIdComplete = nullptr;

	if (!uFnOnReadPlayerStorageForNetIdComplete)
	{
		uFnOnReadPlayerStorageForNetIdComplete = UFunction::FindFunction("Function Engine.OnlinePlayerInterface.OnReadPlayerStorageForNetIdComplete");
	}

	UOnlinePlayerInterface_execOnReadPlayerStorageForNetIdComplete_Params OnReadPlayerStorageForNetIdComplete_Params;
	memset(&OnReadPlayerStorageForNetIdComplete_Params, 0, sizeof(OnReadPlayerStorageForNetIdComplete_Params));
	memcpy_s(&OnReadPlayerStorageForNetIdComplete_Params.NetId, sizeof(OnReadPlayerStorageForNetIdComplete_Params.NetId), &NetId, sizeof(NetId));
	OnReadPlayerStorageForNetIdComplete_Params.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent(uFnOnReadPlayerStorageForNetIdComplete, &OnReadPlayerStorageForNetIdComplete_Params, nullptr);
};

// Function Engine.OnlinePlayerInterface.ReadPlayerStorageForNetId
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint8_t                        LocalUserNum                   (CPF_Parm)
// struct FUniqueNetId            NetId                          (CPF_Parm)
// class UOnlinePlayerStorage*    PlayerStorage                  (CPF_Parm)

bool UOnlinePlayerInterface::ReadPlayerStorageForNetId(uint8_t LocalUserNum, const struct FUniqueNetId& NetId, class UOnlinePlayerStorage* PlayerStorage)
{
	static UFunction* uFnReadPlayerStorageForNetId = nullptr;

	if (!uFnReadPlayerStorageForNetId)
	{
		uFnReadPlayerStorageForNetId = UFunction::FindFunction("Function Engine.OnlinePlayerInterface.ReadPlayerStorageForNetId");
	}

	UOnlinePlayerInterface_execReadPlayerStorageForNetId_Params ReadPlayerStorageForNetId_Params;
	memset(&ReadPlayerStorageForNetId_Params, 0, sizeof(ReadPlayerStorageForNetId_Params));
	memcpy_s(&ReadPlayerStorageForNetId_Params.LocalUserNum, sizeof(ReadPlayerStorageForNetId_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	memcpy_s(&ReadPlayerStorageForNetId_Params.NetId, sizeof(ReadPlayerStorageForNetId_Params.NetId), &NetId, sizeof(NetId));
	ReadPlayerStorageForNetId_Params.PlayerStorage = PlayerStorage;

	this->ProcessEvent(uFnReadPlayerStorageForNetId, &ReadPlayerStorageForNetId_Params, nullptr);

	return ReadPlayerStorageForNetId_Params.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.ClearReadPlayerStorageCompleteDelegate
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint8_t                        LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         ReadPlayerStorageCompleteDelegate (CPF_Parm | CPF_NeedCtorLink)

void UOnlinePlayerInterface::ClearReadPlayerStorageCompleteDelegate(uint8_t LocalUserNum, const struct FScriptDelegate& ReadPlayerStorageCompleteDelegate)
{
	static UFunction* uFnClearReadPlayerStorageCompleteDelegate = nullptr;

	if (!uFnClearReadPlayerStorageCompleteDelegate)
	{
		uFnClearReadPlayerStorageCompleteDelegate = UFunction::FindFunction("Function Engine.OnlinePlayerInterface.ClearReadPlayerStorageCompleteDelegate");
	}

	UOnlinePlayerInterface_execClearReadPlayerStorageCompleteDelegate_Params ClearReadPlayerStorageCompleteDelegate_Params;
	memset(&ClearReadPlayerStorageCompleteDelegate_Params, 0, sizeof(ClearReadPlayerStorageCompleteDelegate_Params));
	memcpy_s(&ClearReadPlayerStorageCompleteDelegate_Params.LocalUserNum, sizeof(ClearReadPlayerStorageCompleteDelegate_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	memcpy_s(&ClearReadPlayerStorageCompleteDelegate_Params.ReadPlayerStorageCompleteDelegate, sizeof(ClearReadPlayerStorageCompleteDelegate_Params.ReadPlayerStorageCompleteDelegate), &ReadPlayerStorageCompleteDelegate, sizeof(ReadPlayerStorageCompleteDelegate));

	this->ProcessEvent(uFnClearReadPlayerStorageCompleteDelegate, &ClearReadPlayerStorageCompleteDelegate_Params, nullptr);
};

// Function Engine.OnlinePlayerInterface.AddReadPlayerStorageCompleteDelegate
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint8_t                        LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         ReadPlayerStorageCompleteDelegate (CPF_Parm | CPF_NeedCtorLink)

void UOnlinePlayerInterface::AddReadPlayerStorageCompleteDelegate(uint8_t LocalUserNum, const struct FScriptDelegate& ReadPlayerStorageCompleteDelegate)
{
	static UFunction* uFnAddReadPlayerStorageCompleteDelegate = nullptr;

	if (!uFnAddReadPlayerStorageCompleteDelegate)
	{
		uFnAddReadPlayerStorageCompleteDelegate = UFunction::FindFunction("Function Engine.OnlinePlayerInterface.AddReadPlayerStorageCompleteDelegate");
	}

	UOnlinePlayerInterface_execAddReadPlayerStorageCompleteDelegate_Params AddReadPlayerStorageCompleteDelegate_Params;
	memset(&AddReadPlayerStorageCompleteDelegate_Params, 0, sizeof(AddReadPlayerStorageCompleteDelegate_Params));
	memcpy_s(&AddReadPlayerStorageCompleteDelegate_Params.LocalUserNum, sizeof(AddReadPlayerStorageCompleteDelegate_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	memcpy_s(&AddReadPlayerStorageCompleteDelegate_Params.ReadPlayerStorageCompleteDelegate, sizeof(AddReadPlayerStorageCompleteDelegate_Params.ReadPlayerStorageCompleteDelegate), &ReadPlayerStorageCompleteDelegate, sizeof(ReadPlayerStorageCompleteDelegate));

	this->ProcessEvent(uFnAddReadPlayerStorageCompleteDelegate, &AddReadPlayerStorageCompleteDelegate_Params, nullptr);
};

// Function Engine.OnlinePlayerInterface.OnReadPlayerStorageComplete
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// uint8_t                        LocalUserNum                   (CPF_Parm)
// uint32_t                       bWasSuccessful                 (CPF_Parm)

void UOnlinePlayerInterface::OnReadPlayerStorageComplete(uint8_t LocalUserNum, bool bWasSuccessful)
{
	static UFunction* uFnOnReadPlayerStorageComplete = nullptr;

	if (!uFnOnReadPlayerStorageComplete)
	{
		uFnOnReadPlayerStorageComplete = UFunction::FindFunction("Function Engine.OnlinePlayerInterface.OnReadPlayerStorageComplete");
	}

	UOnlinePlayerInterface_execOnReadPlayerStorageComplete_Params OnReadPlayerStorageComplete_Params;
	memset(&OnReadPlayerStorageComplete_Params, 0, sizeof(OnReadPlayerStorageComplete_Params));
	memcpy_s(&OnReadPlayerStorageComplete_Params.LocalUserNum, sizeof(OnReadPlayerStorageComplete_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	OnReadPlayerStorageComplete_Params.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent(uFnOnReadPlayerStorageComplete, &OnReadPlayerStorageComplete_Params, nullptr);
};

// Function Engine.OnlinePlayerInterface.ReadPlayerStorage
// [0x00024000] (FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint8_t                        LocalUserNum                   (CPF_Parm)
// class UOnlinePlayerStorage*    PlayerStorage                  (CPF_Parm)
// int32_t                        DeviceID                       (CPF_OptionalParm | CPF_Parm)

bool UOnlinePlayerInterface::ReadPlayerStorage(uint8_t LocalUserNum, class UOnlinePlayerStorage* PlayerStorage, int32_t DeviceID)
{
	static UFunction* uFnReadPlayerStorage = nullptr;

	if (!uFnReadPlayerStorage)
	{
		uFnReadPlayerStorage = UFunction::FindFunction("Function Engine.OnlinePlayerInterface.ReadPlayerStorage");
	}

	UOnlinePlayerInterface_execReadPlayerStorage_Params ReadPlayerStorage_Params;
	memset(&ReadPlayerStorage_Params, 0, sizeof(ReadPlayerStorage_Params));
	memcpy_s(&ReadPlayerStorage_Params.LocalUserNum, sizeof(ReadPlayerStorage_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	ReadPlayerStorage_Params.PlayerStorage = PlayerStorage;
	memcpy_s(&ReadPlayerStorage_Params.DeviceID, sizeof(ReadPlayerStorage_Params.DeviceID), &DeviceID, sizeof(DeviceID));

	this->ProcessEvent(uFnReadPlayerStorage, &ReadPlayerStorage_Params, nullptr);

	return ReadPlayerStorage_Params.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.ClearWriteProfileSettingsCompleteDelegate
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint8_t                        LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         WriteProfileSettingsCompleteDelegate (CPF_Parm | CPF_NeedCtorLink)

void UOnlinePlayerInterface::ClearWriteProfileSettingsCompleteDelegate(uint8_t LocalUserNum, const struct FScriptDelegate& WriteProfileSettingsCompleteDelegate)
{
	static UFunction* uFnClearWriteProfileSettingsCompleteDelegate = nullptr;

	if (!uFnClearWriteProfileSettingsCompleteDelegate)
	{
		uFnClearWriteProfileSettingsCompleteDelegate = UFunction::FindFunction("Function Engine.OnlinePlayerInterface.ClearWriteProfileSettingsCompleteDelegate");
	}

	UOnlinePlayerInterface_execClearWriteProfileSettingsCompleteDelegate_Params ClearWriteProfileSettingsCompleteDelegate_Params;
	memset(&ClearWriteProfileSettingsCompleteDelegate_Params, 0, sizeof(ClearWriteProfileSettingsCompleteDelegate_Params));
	memcpy_s(&ClearWriteProfileSettingsCompleteDelegate_Params.LocalUserNum, sizeof(ClearWriteProfileSettingsCompleteDelegate_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	memcpy_s(&ClearWriteProfileSettingsCompleteDelegate_Params.WriteProfileSettingsCompleteDelegate, sizeof(ClearWriteProfileSettingsCompleteDelegate_Params.WriteProfileSettingsCompleteDelegate), &WriteProfileSettingsCompleteDelegate, sizeof(WriteProfileSettingsCompleteDelegate));

	this->ProcessEvent(uFnClearWriteProfileSettingsCompleteDelegate, &ClearWriteProfileSettingsCompleteDelegate_Params, nullptr);
};

// Function Engine.OnlinePlayerInterface.AddWriteProfileSettingsCompleteDelegate
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint8_t                        LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         WriteProfileSettingsCompleteDelegate (CPF_Parm | CPF_NeedCtorLink)

void UOnlinePlayerInterface::AddWriteProfileSettingsCompleteDelegate(uint8_t LocalUserNum, const struct FScriptDelegate& WriteProfileSettingsCompleteDelegate)
{
	static UFunction* uFnAddWriteProfileSettingsCompleteDelegate = nullptr;

	if (!uFnAddWriteProfileSettingsCompleteDelegate)
	{
		uFnAddWriteProfileSettingsCompleteDelegate = UFunction::FindFunction("Function Engine.OnlinePlayerInterface.AddWriteProfileSettingsCompleteDelegate");
	}

	UOnlinePlayerInterface_execAddWriteProfileSettingsCompleteDelegate_Params AddWriteProfileSettingsCompleteDelegate_Params;
	memset(&AddWriteProfileSettingsCompleteDelegate_Params, 0, sizeof(AddWriteProfileSettingsCompleteDelegate_Params));
	memcpy_s(&AddWriteProfileSettingsCompleteDelegate_Params.LocalUserNum, sizeof(AddWriteProfileSettingsCompleteDelegate_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	memcpy_s(&AddWriteProfileSettingsCompleteDelegate_Params.WriteProfileSettingsCompleteDelegate, sizeof(AddWriteProfileSettingsCompleteDelegate_Params.WriteProfileSettingsCompleteDelegate), &WriteProfileSettingsCompleteDelegate, sizeof(WriteProfileSettingsCompleteDelegate));

	this->ProcessEvent(uFnAddWriteProfileSettingsCompleteDelegate, &AddWriteProfileSettingsCompleteDelegate_Params, nullptr);
};

// Function Engine.OnlinePlayerInterface.OnWriteProfileSettingsComplete
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// uint8_t                        LocalUserNum                   (CPF_Parm)
// uint32_t                       bWasSuccessful                 (CPF_Parm)

void UOnlinePlayerInterface::OnWriteProfileSettingsComplete(uint8_t LocalUserNum, bool bWasSuccessful)
{
	static UFunction* uFnOnWriteProfileSettingsComplete = nullptr;

	if (!uFnOnWriteProfileSettingsComplete)
	{
		uFnOnWriteProfileSettingsComplete = UFunction::FindFunction("Function Engine.OnlinePlayerInterface.OnWriteProfileSettingsComplete");
	}

	UOnlinePlayerInterface_execOnWriteProfileSettingsComplete_Params OnWriteProfileSettingsComplete_Params;
	memset(&OnWriteProfileSettingsComplete_Params, 0, sizeof(OnWriteProfileSettingsComplete_Params));
	memcpy_s(&OnWriteProfileSettingsComplete_Params.LocalUserNum, sizeof(OnWriteProfileSettingsComplete_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	OnWriteProfileSettingsComplete_Params.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent(uFnOnWriteProfileSettingsComplete, &OnWriteProfileSettingsComplete_Params, nullptr);
};

// Function Engine.OnlinePlayerInterface.WriteProfileSettingsCompleted
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint8_t                        LocalUserNum                   (CPF_Parm)
// uint32_t                       bWasSuccessful                 (CPF_Parm)

void UOnlinePlayerInterface::WriteProfileSettingsCompleted(uint8_t LocalUserNum, bool bWasSuccessful)
{
	static UFunction* uFnWriteProfileSettingsCompleted = nullptr;

	if (!uFnWriteProfileSettingsCompleted)
	{
		uFnWriteProfileSettingsCompleted = UFunction::FindFunction("Function Engine.OnlinePlayerInterface.WriteProfileSettingsCompleted");
	}

	UOnlinePlayerInterface_execWriteProfileSettingsCompleted_Params WriteProfileSettingsCompleted_Params;
	memset(&WriteProfileSettingsCompleted_Params, 0, sizeof(WriteProfileSettingsCompleted_Params));
	memcpy_s(&WriteProfileSettingsCompleted_Params.LocalUserNum, sizeof(WriteProfileSettingsCompleted_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	WriteProfileSettingsCompleted_Params.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent(uFnWriteProfileSettingsCompleted, &WriteProfileSettingsCompleted_Params, nullptr);
};

// Function Engine.OnlinePlayerInterface.WriteProfileSettings
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint8_t                        LocalUserNum                   (CPF_Parm)
// class UOnlineProfileSettings*  ProfileSettings                (CPF_Parm)

bool UOnlinePlayerInterface::WriteProfileSettings(uint8_t LocalUserNum, class UOnlineProfileSettings* ProfileSettings)
{
	static UFunction* uFnWriteProfileSettings = nullptr;

	if (!uFnWriteProfileSettings)
	{
		uFnWriteProfileSettings = UFunction::FindFunction("Function Engine.OnlinePlayerInterface.WriteProfileSettings");
	}

	UOnlinePlayerInterface_execWriteProfileSettings_Params WriteProfileSettings_Params;
	memset(&WriteProfileSettings_Params, 0, sizeof(WriteProfileSettings_Params));
	memcpy_s(&WriteProfileSettings_Params.LocalUserNum, sizeof(WriteProfileSettings_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	WriteProfileSettings_Params.ProfileSettings = ProfileSettings;

	this->ProcessEvent(uFnWriteProfileSettings, &WriteProfileSettings_Params, nullptr);

	return WriteProfileSettings_Params.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.GetProfileSettings
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UOnlineProfileSettings*  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint8_t                        LocalUserNum                   (CPF_Parm)

class UOnlineProfileSettings* UOnlinePlayerInterface::GetProfileSettings(uint8_t LocalUserNum)
{
	static UFunction* uFnGetProfileSettings = nullptr;

	if (!uFnGetProfileSettings)
	{
		uFnGetProfileSettings = UFunction::FindFunction("Function Engine.OnlinePlayerInterface.GetProfileSettings");
	}

	UOnlinePlayerInterface_execGetProfileSettings_Params GetProfileSettings_Params;
	memset(&GetProfileSettings_Params, 0, sizeof(GetProfileSettings_Params));
	memcpy_s(&GetProfileSettings_Params.LocalUserNum, sizeof(GetProfileSettings_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));

	this->ProcessEvent(uFnGetProfileSettings, &GetProfileSettings_Params, nullptr);

	return GetProfileSettings_Params.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.ClearReadProfileSettingsCompleteDelegate
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint8_t                        LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         ReadProfileSettingsCompleteDelegate (CPF_Parm | CPF_NeedCtorLink)

void UOnlinePlayerInterface::ClearReadProfileSettingsCompleteDelegate(uint8_t LocalUserNum, const struct FScriptDelegate& ReadProfileSettingsCompleteDelegate)
{
	static UFunction* uFnClearReadProfileSettingsCompleteDelegate = nullptr;

	if (!uFnClearReadProfileSettingsCompleteDelegate)
	{
		uFnClearReadProfileSettingsCompleteDelegate = UFunction::FindFunction("Function Engine.OnlinePlayerInterface.ClearReadProfileSettingsCompleteDelegate");
	}

	UOnlinePlayerInterface_execClearReadProfileSettingsCompleteDelegate_Params ClearReadProfileSettingsCompleteDelegate_Params;
	memset(&ClearReadProfileSettingsCompleteDelegate_Params, 0, sizeof(ClearReadProfileSettingsCompleteDelegate_Params));
	memcpy_s(&ClearReadProfileSettingsCompleteDelegate_Params.LocalUserNum, sizeof(ClearReadProfileSettingsCompleteDelegate_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	memcpy_s(&ClearReadProfileSettingsCompleteDelegate_Params.ReadProfileSettingsCompleteDelegate, sizeof(ClearReadProfileSettingsCompleteDelegate_Params.ReadProfileSettingsCompleteDelegate), &ReadProfileSettingsCompleteDelegate, sizeof(ReadProfileSettingsCompleteDelegate));

	this->ProcessEvent(uFnClearReadProfileSettingsCompleteDelegate, &ClearReadProfileSettingsCompleteDelegate_Params, nullptr);
};

// Function Engine.OnlinePlayerInterface.AddReadProfileSettingsCompleteDelegate
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint8_t                        LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         ReadProfileSettingsCompleteDelegate (CPF_Parm | CPF_NeedCtorLink)

void UOnlinePlayerInterface::AddReadProfileSettingsCompleteDelegate(uint8_t LocalUserNum, const struct FScriptDelegate& ReadProfileSettingsCompleteDelegate)
{
	static UFunction* uFnAddReadProfileSettingsCompleteDelegate = nullptr;

	if (!uFnAddReadProfileSettingsCompleteDelegate)
	{
		uFnAddReadProfileSettingsCompleteDelegate = UFunction::FindFunction("Function Engine.OnlinePlayerInterface.AddReadProfileSettingsCompleteDelegate");
	}

	UOnlinePlayerInterface_execAddReadProfileSettingsCompleteDelegate_Params AddReadProfileSettingsCompleteDelegate_Params;
	memset(&AddReadProfileSettingsCompleteDelegate_Params, 0, sizeof(AddReadProfileSettingsCompleteDelegate_Params));
	memcpy_s(&AddReadProfileSettingsCompleteDelegate_Params.LocalUserNum, sizeof(AddReadProfileSettingsCompleteDelegate_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	memcpy_s(&AddReadProfileSettingsCompleteDelegate_Params.ReadProfileSettingsCompleteDelegate, sizeof(AddReadProfileSettingsCompleteDelegate_Params.ReadProfileSettingsCompleteDelegate), &ReadProfileSettingsCompleteDelegate, sizeof(ReadProfileSettingsCompleteDelegate));

	this->ProcessEvent(uFnAddReadProfileSettingsCompleteDelegate, &AddReadProfileSettingsCompleteDelegate_Params, nullptr);
};

// Function Engine.OnlinePlayerInterface.OnReadProfileSettingsComplete
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// uint8_t                        LocalUserNum                   (CPF_Parm)
// uint32_t                       bWasSuccessful                 (CPF_Parm)

void UOnlinePlayerInterface::OnReadProfileSettingsComplete(uint8_t LocalUserNum, bool bWasSuccessful)
{
	static UFunction* uFnOnReadProfileSettingsComplete = nullptr;

	if (!uFnOnReadProfileSettingsComplete)
	{
		uFnOnReadProfileSettingsComplete = UFunction::FindFunction("Function Engine.OnlinePlayerInterface.OnReadProfileSettingsComplete");
	}

	UOnlinePlayerInterface_execOnReadProfileSettingsComplete_Params OnReadProfileSettingsComplete_Params;
	memset(&OnReadProfileSettingsComplete_Params, 0, sizeof(OnReadProfileSettingsComplete_Params));
	memcpy_s(&OnReadProfileSettingsComplete_Params.LocalUserNum, sizeof(OnReadProfileSettingsComplete_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	OnReadProfileSettingsComplete_Params.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent(uFnOnReadProfileSettingsComplete, &OnReadProfileSettingsComplete_Params, nullptr);
};

// Function Engine.OnlinePlayerInterface.ReadProfileSettingsCompleted
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint8_t                        LocalUserNum                   (CPF_Parm)
// class TArray<uint8_t>          rProfileBuffer                 (CPF_Parm | CPF_NeedCtorLink)
// uint32_t                       bWasSuccessful                 (CPF_Parm)

void UOnlinePlayerInterface::ReadProfileSettingsCompleted(uint8_t LocalUserNum, const class TArray<uint8_t>& rProfileBuffer, bool bWasSuccessful)
{
	static UFunction* uFnReadProfileSettingsCompleted = nullptr;

	if (!uFnReadProfileSettingsCompleted)
	{
		uFnReadProfileSettingsCompleted = UFunction::FindFunction("Function Engine.OnlinePlayerInterface.ReadProfileSettingsCompleted");
	}

	UOnlinePlayerInterface_execReadProfileSettingsCompleted_Params ReadProfileSettingsCompleted_Params;
	memset(&ReadProfileSettingsCompleted_Params, 0, sizeof(ReadProfileSettingsCompleted_Params));
	memcpy_s(&ReadProfileSettingsCompleted_Params.LocalUserNum, sizeof(ReadProfileSettingsCompleted_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	memcpy_s(&ReadProfileSettingsCompleted_Params.rProfileBuffer, sizeof(ReadProfileSettingsCompleted_Params.rProfileBuffer), &rProfileBuffer, sizeof(rProfileBuffer));
	ReadProfileSettingsCompleted_Params.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent(uFnReadProfileSettingsCompleted, &ReadProfileSettingsCompleted_Params, nullptr);
};

// Function Engine.OnlinePlayerInterface.ReadProfileSettings
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint8_t                        LocalUserNum                   (CPF_Parm)
// class UOnlineProfileSettings*  ProfileSettings                (CPF_Parm)
// uint32_t                       bForceRead                     (CPF_Parm)

bool UOnlinePlayerInterface::ReadProfileSettings(uint8_t LocalUserNum, class UOnlineProfileSettings* ProfileSettings, bool bForceRead)
{
	static UFunction* uFnReadProfileSettings = nullptr;

	if (!uFnReadProfileSettings)
	{
		uFnReadProfileSettings = UFunction::FindFunction("Function Engine.OnlinePlayerInterface.ReadProfileSettings");
	}

	UOnlinePlayerInterface_execReadProfileSettings_Params ReadProfileSettings_Params;
	memset(&ReadProfileSettings_Params, 0, sizeof(ReadProfileSettings_Params));
	memcpy_s(&ReadProfileSettings_Params.LocalUserNum, sizeof(ReadProfileSettings_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	ReadProfileSettings_Params.ProfileSettings = ProfileSettings;
	ReadProfileSettings_Params.bForceRead = bForceRead;

	this->ProcessEvent(uFnReadProfileSettings, &ReadProfileSettings_Params, nullptr);

	return ReadProfileSettings_Params.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.ClearLoginCancelledDelegate
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FScriptDelegate         CancelledDelegate              (CPF_Parm | CPF_NeedCtorLink)

void UOnlinePlayerInterface::ClearLoginCancelledDelegate(const struct FScriptDelegate& CancelledDelegate)
{
	static UFunction* uFnClearLoginCancelledDelegate = nullptr;

	if (!uFnClearLoginCancelledDelegate)
	{
		uFnClearLoginCancelledDelegate = UFunction::FindFunction("Function Engine.OnlinePlayerInterface.ClearLoginCancelledDelegate");
	}

	UOnlinePlayerInterface_execClearLoginCancelledDelegate_Params ClearLoginCancelledDelegate_Params;
	memset(&ClearLoginCancelledDelegate_Params, 0, sizeof(ClearLoginCancelledDelegate_Params));
	memcpy_s(&ClearLoginCancelledDelegate_Params.CancelledDelegate, sizeof(ClearLoginCancelledDelegate_Params.CancelledDelegate), &CancelledDelegate, sizeof(CancelledDelegate));

	this->ProcessEvent(uFnClearLoginCancelledDelegate, &ClearLoginCancelledDelegate_Params, nullptr);
};

// Function Engine.OnlinePlayerInterface.AddLoginCancelledDelegate
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FScriptDelegate         CancelledDelegate              (CPF_Parm | CPF_NeedCtorLink)

void UOnlinePlayerInterface::AddLoginCancelledDelegate(const struct FScriptDelegate& CancelledDelegate)
{
	static UFunction* uFnAddLoginCancelledDelegate = nullptr;

	if (!uFnAddLoginCancelledDelegate)
	{
		uFnAddLoginCancelledDelegate = UFunction::FindFunction("Function Engine.OnlinePlayerInterface.AddLoginCancelledDelegate");
	}

	UOnlinePlayerInterface_execAddLoginCancelledDelegate_Params AddLoginCancelledDelegate_Params;
	memset(&AddLoginCancelledDelegate_Params, 0, sizeof(AddLoginCancelledDelegate_Params));
	memcpy_s(&AddLoginCancelledDelegate_Params.CancelledDelegate, sizeof(AddLoginCancelledDelegate_Params.CancelledDelegate), &CancelledDelegate, sizeof(CancelledDelegate));

	this->ProcessEvent(uFnAddLoginCancelledDelegate, &AddLoginCancelledDelegate_Params, nullptr);
};

// Function Engine.OnlinePlayerInterface.ClearLoginStatusChangeDelegate
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FScriptDelegate         LoginStatusDelegate            (CPF_Parm | CPF_NeedCtorLink)
// uint8_t                        LocalUserNum                   (CPF_Parm)

void UOnlinePlayerInterface::ClearLoginStatusChangeDelegate(const struct FScriptDelegate& LoginStatusDelegate, uint8_t LocalUserNum)
{
	static UFunction* uFnClearLoginStatusChangeDelegate = nullptr;

	if (!uFnClearLoginStatusChangeDelegate)
	{
		uFnClearLoginStatusChangeDelegate = UFunction::FindFunction("Function Engine.OnlinePlayerInterface.ClearLoginStatusChangeDelegate");
	}

	UOnlinePlayerInterface_execClearLoginStatusChangeDelegate_Params ClearLoginStatusChangeDelegate_Params;
	memset(&ClearLoginStatusChangeDelegate_Params, 0, sizeof(ClearLoginStatusChangeDelegate_Params));
	memcpy_s(&ClearLoginStatusChangeDelegate_Params.LoginStatusDelegate, sizeof(ClearLoginStatusChangeDelegate_Params.LoginStatusDelegate), &LoginStatusDelegate, sizeof(LoginStatusDelegate));
	memcpy_s(&ClearLoginStatusChangeDelegate_Params.LocalUserNum, sizeof(ClearLoginStatusChangeDelegate_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));

	this->ProcessEvent(uFnClearLoginStatusChangeDelegate, &ClearLoginStatusChangeDelegate_Params, nullptr);
};

// Function Engine.OnlinePlayerInterface.AddLoginStatusChangeDelegate
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FScriptDelegate         LoginStatusDelegate            (CPF_Parm | CPF_NeedCtorLink)
// uint8_t                        LocalUserNum                   (CPF_Parm)

void UOnlinePlayerInterface::AddLoginStatusChangeDelegate(const struct FScriptDelegate& LoginStatusDelegate, uint8_t LocalUserNum)
{
	static UFunction* uFnAddLoginStatusChangeDelegate = nullptr;

	if (!uFnAddLoginStatusChangeDelegate)
	{
		uFnAddLoginStatusChangeDelegate = UFunction::FindFunction("Function Engine.OnlinePlayerInterface.AddLoginStatusChangeDelegate");
	}

	UOnlinePlayerInterface_execAddLoginStatusChangeDelegate_Params AddLoginStatusChangeDelegate_Params;
	memset(&AddLoginStatusChangeDelegate_Params, 0, sizeof(AddLoginStatusChangeDelegate_Params));
	memcpy_s(&AddLoginStatusChangeDelegate_Params.LoginStatusDelegate, sizeof(AddLoginStatusChangeDelegate_Params.LoginStatusDelegate), &LoginStatusDelegate, sizeof(LoginStatusDelegate));
	memcpy_s(&AddLoginStatusChangeDelegate_Params.LocalUserNum, sizeof(AddLoginStatusChangeDelegate_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));

	this->ProcessEvent(uFnAddLoginStatusChangeDelegate, &AddLoginStatusChangeDelegate_Params, nullptr);
};

// Function Engine.OnlinePlayerInterface.OnLoginStatusChange
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// ELoginStatus                   NewStatus                      (CPF_Parm)
// struct FUniqueNetId            NewId                          (CPF_Parm)

void UOnlinePlayerInterface::OnLoginStatusChange(ELoginStatus NewStatus, const struct FUniqueNetId& NewId)
{
	static UFunction* uFnOnLoginStatusChange = nullptr;

	if (!uFnOnLoginStatusChange)
	{
		uFnOnLoginStatusChange = UFunction::FindFunction("Function Engine.OnlinePlayerInterface.OnLoginStatusChange");
	}

	UOnlinePlayerInterface_execOnLoginStatusChange_Params OnLoginStatusChange_Params;
	memset(&OnLoginStatusChange_Params, 0, sizeof(OnLoginStatusChange_Params));
	memcpy_s(&OnLoginStatusChange_Params.NewStatus, sizeof(OnLoginStatusChange_Params.NewStatus), &NewStatus, sizeof(NewStatus));
	memcpy_s(&OnLoginStatusChange_Params.NewId, sizeof(OnLoginStatusChange_Params.NewId), &NewId, sizeof(NewId));

	this->ProcessEvent(uFnOnLoginStatusChange, &OnLoginStatusChange_Params, nullptr);
};

// Function Engine.OnlinePlayerInterface.ClearLoginChangeDelegate
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FScriptDelegate         LoginDelegate                  (CPF_Parm | CPF_NeedCtorLink)

void UOnlinePlayerInterface::ClearLoginChangeDelegate(const struct FScriptDelegate& LoginDelegate)
{
	static UFunction* uFnClearLoginChangeDelegate = nullptr;

	if (!uFnClearLoginChangeDelegate)
	{
		uFnClearLoginChangeDelegate = UFunction::FindFunction("Function Engine.OnlinePlayerInterface.ClearLoginChangeDelegate");
	}

	UOnlinePlayerInterface_execClearLoginChangeDelegate_Params ClearLoginChangeDelegate_Params;
	memset(&ClearLoginChangeDelegate_Params, 0, sizeof(ClearLoginChangeDelegate_Params));
	memcpy_s(&ClearLoginChangeDelegate_Params.LoginDelegate, sizeof(ClearLoginChangeDelegate_Params.LoginDelegate), &LoginDelegate, sizeof(LoginDelegate));

	this->ProcessEvent(uFnClearLoginChangeDelegate, &ClearLoginChangeDelegate_Params, nullptr);
};

// Function Engine.OnlinePlayerInterface.AddLoginChangeDelegate
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FScriptDelegate         LoginDelegate                  (CPF_Parm | CPF_NeedCtorLink)

void UOnlinePlayerInterface::AddLoginChangeDelegate(const struct FScriptDelegate& LoginDelegate)
{
	static UFunction* uFnAddLoginChangeDelegate = nullptr;

	if (!uFnAddLoginChangeDelegate)
	{
		uFnAddLoginChangeDelegate = UFunction::FindFunction("Function Engine.OnlinePlayerInterface.AddLoginChangeDelegate");
	}

	UOnlinePlayerInterface_execAddLoginChangeDelegate_Params AddLoginChangeDelegate_Params;
	memset(&AddLoginChangeDelegate_Params, 0, sizeof(AddLoginChangeDelegate_Params));
	memcpy_s(&AddLoginChangeDelegate_Params.LoginDelegate, sizeof(AddLoginChangeDelegate_Params.LoginDelegate), &LoginDelegate, sizeof(LoginDelegate));

	this->ProcessEvent(uFnAddLoginChangeDelegate, &AddLoginChangeDelegate_Params, nullptr);
};

// Function Engine.OnlinePlayerInterface.ShowFriendsUI
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint8_t                        LocalUserNum                   (CPF_Parm)

bool UOnlinePlayerInterface::ShowFriendsUI(uint8_t LocalUserNum)
{
	static UFunction* uFnShowFriendsUI = nullptr;

	if (!uFnShowFriendsUI)
	{
		uFnShowFriendsUI = UFunction::FindFunction("Function Engine.OnlinePlayerInterface.ShowFriendsUI");
	}

	UOnlinePlayerInterface_execShowFriendsUI_Params ShowFriendsUI_Params;
	memset(&ShowFriendsUI_Params, 0, sizeof(ShowFriendsUI_Params));
	memcpy_s(&ShowFriendsUI_Params.LocalUserNum, sizeof(ShowFriendsUI_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));

	this->ProcessEvent(uFnShowFriendsUI, &ShowFriendsUI_Params, nullptr);

	return ShowFriendsUI_Params.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.IsMuted
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint8_t                        LocalUserNum                   (CPF_Parm)
// struct FUniqueNetId            PlayerID                       (CPF_Parm)

bool UOnlinePlayerInterface::IsMuted(uint8_t LocalUserNum, const struct FUniqueNetId& PlayerID)
{
	static UFunction* uFnIsMuted = nullptr;

	if (!uFnIsMuted)
	{
		uFnIsMuted = UFunction::FindFunction("Function Engine.OnlinePlayerInterface.IsMuted");
	}

	UOnlinePlayerInterface_execIsMuted_Params IsMuted_Params;
	memset(&IsMuted_Params, 0, sizeof(IsMuted_Params));
	memcpy_s(&IsMuted_Params.LocalUserNum, sizeof(IsMuted_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	memcpy_s(&IsMuted_Params.PlayerID, sizeof(IsMuted_Params.PlayerID), &PlayerID, sizeof(PlayerID));

	this->ProcessEvent(uFnIsMuted, &IsMuted_Params, nullptr);

	return IsMuted_Params.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.AreAnyFriends
// [0x00420000] (FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint8_t                        LocalUserNum                   (CPF_Parm)
// class TArray<struct FFriendsQuery> Query                          (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

bool UOnlinePlayerInterface::AreAnyFriends(uint8_t LocalUserNum, class TArray<struct FFriendsQuery>& Query)
{
	static UFunction* uFnAreAnyFriends = nullptr;

	if (!uFnAreAnyFriends)
	{
		uFnAreAnyFriends = UFunction::FindFunction("Function Engine.OnlinePlayerInterface.AreAnyFriends");
	}

	UOnlinePlayerInterface_execAreAnyFriends_Params AreAnyFriends_Params;
	memset(&AreAnyFriends_Params, 0, sizeof(AreAnyFriends_Params));
	memcpy_s(&AreAnyFriends_Params.LocalUserNum, sizeof(AreAnyFriends_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	memcpy_s(&AreAnyFriends_Params.Query, sizeof(AreAnyFriends_Params.Query), &Query, sizeof(Query));

	this->ProcessEvent(uFnAreAnyFriends, &AreAnyFriends_Params, nullptr);

	memcpy_s(&Query, sizeof(Query), &AreAnyFriends_Params.Query, sizeof(AreAnyFriends_Params.Query));

	return AreAnyFriends_Params.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.IsFriend
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint8_t                        LocalUserNum                   (CPF_Parm)
// struct FUniqueNetId            PlayerID                       (CPF_Parm)

bool UOnlinePlayerInterface::IsFriend(uint8_t LocalUserNum, const struct FUniqueNetId& PlayerID)
{
	static UFunction* uFnIsFriend = nullptr;

	if (!uFnIsFriend)
	{
		uFnIsFriend = UFunction::FindFunction("Function Engine.OnlinePlayerInterface.IsFriend");
	}

	UOnlinePlayerInterface_execIsFriend_Params IsFriend_Params;
	memset(&IsFriend_Params, 0, sizeof(IsFriend_Params));
	memcpy_s(&IsFriend_Params.LocalUserNum, sizeof(IsFriend_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	memcpy_s(&IsFriend_Params.PlayerID, sizeof(IsFriend_Params.PlayerID), &PlayerID, sizeof(PlayerID));

	this->ProcessEvent(uFnIsFriend, &IsFriend_Params, nullptr);

	return IsFriend_Params.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.CanShowPresenceInformation
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EFeaturePrivilegeLevel         ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint8_t                        LocalUserNum                   (CPF_Parm)

EFeaturePrivilegeLevel UOnlinePlayerInterface::CanShowPresenceInformation(uint8_t LocalUserNum)
{
	static UFunction* uFnCanShowPresenceInformation = nullptr;

	if (!uFnCanShowPresenceInformation)
	{
		uFnCanShowPresenceInformation = UFunction::FindFunction("Function Engine.OnlinePlayerInterface.CanShowPresenceInformation");
	}

	UOnlinePlayerInterface_execCanShowPresenceInformation_Params CanShowPresenceInformation_Params;
	memset(&CanShowPresenceInformation_Params, 0, sizeof(CanShowPresenceInformation_Params));
	memcpy_s(&CanShowPresenceInformation_Params.LocalUserNum, sizeof(CanShowPresenceInformation_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));

	this->ProcessEvent(uFnCanShowPresenceInformation, &CanShowPresenceInformation_Params, nullptr);

	return static_cast<EFeaturePrivilegeLevel>(CanShowPresenceInformation_Params.ReturnValue);
};

// Function Engine.OnlinePlayerInterface.CanViewPlayerProfiles
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EFeaturePrivilegeLevel         ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint8_t                        LocalUserNum                   (CPF_Parm)

EFeaturePrivilegeLevel UOnlinePlayerInterface::CanViewPlayerProfiles(uint8_t LocalUserNum)
{
	static UFunction* uFnCanViewPlayerProfiles = nullptr;

	if (!uFnCanViewPlayerProfiles)
	{
		uFnCanViewPlayerProfiles = UFunction::FindFunction("Function Engine.OnlinePlayerInterface.CanViewPlayerProfiles");
	}

	UOnlinePlayerInterface_execCanViewPlayerProfiles_Params CanViewPlayerProfiles_Params;
	memset(&CanViewPlayerProfiles_Params, 0, sizeof(CanViewPlayerProfiles_Params));
	memcpy_s(&CanViewPlayerProfiles_Params.LocalUserNum, sizeof(CanViewPlayerProfiles_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));

	this->ProcessEvent(uFnCanViewPlayerProfiles, &CanViewPlayerProfiles_Params, nullptr);

	return static_cast<EFeaturePrivilegeLevel>(CanViewPlayerProfiles_Params.ReturnValue);
};

// Function Engine.OnlinePlayerInterface.CanPurchaseContent
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EFeaturePrivilegeLevel         ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint8_t                        LocalUserNum                   (CPF_Parm)

EFeaturePrivilegeLevel UOnlinePlayerInterface::CanPurchaseContent(uint8_t LocalUserNum)
{
	static UFunction* uFnCanPurchaseContent = nullptr;

	if (!uFnCanPurchaseContent)
	{
		uFnCanPurchaseContent = UFunction::FindFunction("Function Engine.OnlinePlayerInterface.CanPurchaseContent");
	}

	UOnlinePlayerInterface_execCanPurchaseContent_Params CanPurchaseContent_Params;
	memset(&CanPurchaseContent_Params, 0, sizeof(CanPurchaseContent_Params));
	memcpy_s(&CanPurchaseContent_Params.LocalUserNum, sizeof(CanPurchaseContent_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));

	this->ProcessEvent(uFnCanPurchaseContent, &CanPurchaseContent_Params, nullptr);

	return static_cast<EFeaturePrivilegeLevel>(CanPurchaseContent_Params.ReturnValue);
};

// Function Engine.OnlinePlayerInterface.CanDownloadUserContent
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EFeaturePrivilegeLevel         ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint8_t                        LocalUserNum                   (CPF_Parm)

EFeaturePrivilegeLevel UOnlinePlayerInterface::CanDownloadUserContent(uint8_t LocalUserNum)
{
	static UFunction* uFnCanDownloadUserContent = nullptr;

	if (!uFnCanDownloadUserContent)
	{
		uFnCanDownloadUserContent = UFunction::FindFunction("Function Engine.OnlinePlayerInterface.CanDownloadUserContent");
	}

	UOnlinePlayerInterface_execCanDownloadUserContent_Params CanDownloadUserContent_Params;
	memset(&CanDownloadUserContent_Params, 0, sizeof(CanDownloadUserContent_Params));
	memcpy_s(&CanDownloadUserContent_Params.LocalUserNum, sizeof(CanDownloadUserContent_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));

	this->ProcessEvent(uFnCanDownloadUserContent, &CanDownloadUserContent_Params, nullptr);

	return static_cast<EFeaturePrivilegeLevel>(CanDownloadUserContent_Params.ReturnValue);
};

// Function Engine.OnlinePlayerInterface.IsLocalLogin
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint8_t                        LocalUserNum                   (CPF_Parm)

bool UOnlinePlayerInterface::IsLocalLogin(uint8_t LocalUserNum)
{
	static UFunction* uFnIsLocalLogin = nullptr;

	if (!uFnIsLocalLogin)
	{
		uFnIsLocalLogin = UFunction::FindFunction("Function Engine.OnlinePlayerInterface.IsLocalLogin");
	}

	UOnlinePlayerInterface_execIsLocalLogin_Params IsLocalLogin_Params;
	memset(&IsLocalLogin_Params, 0, sizeof(IsLocalLogin_Params));
	memcpy_s(&IsLocalLogin_Params.LocalUserNum, sizeof(IsLocalLogin_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));

	this->ProcessEvent(uFnIsLocalLogin, &IsLocalLogin_Params, nullptr);

	return IsLocalLogin_Params.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.IsGuestLogin
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint8_t                        LocalUserNum                   (CPF_Parm)

bool UOnlinePlayerInterface::IsGuestLogin(uint8_t LocalUserNum)
{
	static UFunction* uFnIsGuestLogin = nullptr;

	if (!uFnIsGuestLogin)
	{
		uFnIsGuestLogin = UFunction::FindFunction("Function Engine.OnlinePlayerInterface.IsGuestLogin");
	}

	UOnlinePlayerInterface_execIsGuestLogin_Params IsGuestLogin_Params;
	memset(&IsGuestLogin_Params, 0, sizeof(IsGuestLogin_Params));
	memcpy_s(&IsGuestLogin_Params.LocalUserNum, sizeof(IsGuestLogin_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));

	this->ProcessEvent(uFnIsGuestLogin, &IsGuestLogin_Params, nullptr);

	return IsGuestLogin_Params.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.GetPlayerNickname
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)
// uint8_t                        LocalUserNum                   (CPF_Parm)

class FString UOnlinePlayerInterface::GetPlayerNickname(uint8_t LocalUserNum)
{
	static UFunction* uFnGetPlayerNickname = nullptr;

	if (!uFnGetPlayerNickname)
	{
		uFnGetPlayerNickname = UFunction::FindFunction("Function Engine.OnlinePlayerInterface.GetPlayerNickname");
	}

	UOnlinePlayerInterface_execGetPlayerNickname_Params GetPlayerNickname_Params;
	memset(&GetPlayerNickname_Params, 0, sizeof(GetPlayerNickname_Params));
	memcpy_s(&GetPlayerNickname_Params.LocalUserNum, sizeof(GetPlayerNickname_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));

	this->ProcessEvent(uFnGetPlayerNickname, &GetPlayerNickname_Params, nullptr);

	return GetPlayerNickname_Params.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.GetUniquePlayerId
// [0x00420000] (FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint8_t                        LocalUserNum                   (CPF_Parm)
// struct FUniqueNetId            PlayerID                       (CPF_Parm | CPF_OutParm)

bool UOnlinePlayerInterface::GetUniquePlayerId(uint8_t LocalUserNum, struct FUniqueNetId& PlayerID)
{
	static UFunction* uFnGetUniquePlayerId = nullptr;

	if (!uFnGetUniquePlayerId)
	{
		uFnGetUniquePlayerId = UFunction::FindFunction("Function Engine.OnlinePlayerInterface.GetUniquePlayerId");
	}

	UOnlinePlayerInterface_execGetUniquePlayerId_Params GetUniquePlayerId_Params;
	memset(&GetUniquePlayerId_Params, 0, sizeof(GetUniquePlayerId_Params));
	memcpy_s(&GetUniquePlayerId_Params.LocalUserNum, sizeof(GetUniquePlayerId_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	memcpy_s(&GetUniquePlayerId_Params.PlayerID, sizeof(GetUniquePlayerId_Params.PlayerID), &PlayerID, sizeof(PlayerID));

	this->ProcessEvent(uFnGetUniquePlayerId, &GetUniquePlayerId_Params, nullptr);

	memcpy_s(&PlayerID, sizeof(PlayerID), &GetUniquePlayerId_Params.PlayerID, sizeof(GetUniquePlayerId_Params.PlayerID));

	return GetUniquePlayerId_Params.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.GetLoginStatus
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// ELoginStatus                   ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint8_t                        LocalUserNum                   (CPF_Parm)

ELoginStatus UOnlinePlayerInterface::GetLoginStatus(uint8_t LocalUserNum)
{
	static UFunction* uFnGetLoginStatus = nullptr;

	if (!uFnGetLoginStatus)
	{
		uFnGetLoginStatus = UFunction::FindFunction("Function Engine.OnlinePlayerInterface.GetLoginStatus");
	}

	UOnlinePlayerInterface_execGetLoginStatus_Params GetLoginStatus_Params;
	memset(&GetLoginStatus_Params, 0, sizeof(GetLoginStatus_Params));
	memcpy_s(&GetLoginStatus_Params.LocalUserNum, sizeof(GetLoginStatus_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));

	this->ProcessEvent(uFnGetLoginStatus, &GetLoginStatus_Params, nullptr);

	return static_cast<ELoginStatus>(GetLoginStatus_Params.ReturnValue);
};

// Function Engine.OnlinePlayerInterface.ClearLogoutCompletedDelegate
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint8_t                        LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         LogoutDelegate                 (CPF_Parm | CPF_NeedCtorLink)

void UOnlinePlayerInterface::ClearLogoutCompletedDelegate(uint8_t LocalUserNum, const struct FScriptDelegate& LogoutDelegate)
{
	static UFunction* uFnClearLogoutCompletedDelegate = nullptr;

	if (!uFnClearLogoutCompletedDelegate)
	{
		uFnClearLogoutCompletedDelegate = UFunction::FindFunction("Function Engine.OnlinePlayerInterface.ClearLogoutCompletedDelegate");
	}

	UOnlinePlayerInterface_execClearLogoutCompletedDelegate_Params ClearLogoutCompletedDelegate_Params;
	memset(&ClearLogoutCompletedDelegate_Params, 0, sizeof(ClearLogoutCompletedDelegate_Params));
	memcpy_s(&ClearLogoutCompletedDelegate_Params.LocalUserNum, sizeof(ClearLogoutCompletedDelegate_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	memcpy_s(&ClearLogoutCompletedDelegate_Params.LogoutDelegate, sizeof(ClearLogoutCompletedDelegate_Params.LogoutDelegate), &LogoutDelegate, sizeof(LogoutDelegate));

	this->ProcessEvent(uFnClearLogoutCompletedDelegate, &ClearLogoutCompletedDelegate_Params, nullptr);
};

// Function Engine.OnlinePlayerInterface.AddLogoutCompletedDelegate
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint8_t                        LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         LogoutDelegate                 (CPF_Parm | CPF_NeedCtorLink)

void UOnlinePlayerInterface::AddLogoutCompletedDelegate(uint8_t LocalUserNum, const struct FScriptDelegate& LogoutDelegate)
{
	static UFunction* uFnAddLogoutCompletedDelegate = nullptr;

	if (!uFnAddLogoutCompletedDelegate)
	{
		uFnAddLogoutCompletedDelegate = UFunction::FindFunction("Function Engine.OnlinePlayerInterface.AddLogoutCompletedDelegate");
	}

	UOnlinePlayerInterface_execAddLogoutCompletedDelegate_Params AddLogoutCompletedDelegate_Params;
	memset(&AddLogoutCompletedDelegate_Params, 0, sizeof(AddLogoutCompletedDelegate_Params));
	memcpy_s(&AddLogoutCompletedDelegate_Params.LocalUserNum, sizeof(AddLogoutCompletedDelegate_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	memcpy_s(&AddLogoutCompletedDelegate_Params.LogoutDelegate, sizeof(AddLogoutCompletedDelegate_Params.LogoutDelegate), &LogoutDelegate, sizeof(LogoutDelegate));

	this->ProcessEvent(uFnAddLogoutCompletedDelegate, &AddLogoutCompletedDelegate_Params, nullptr);
};

// Function Engine.OnlinePlayerInterface.OnLogoutCompleted
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bWasSuccessful                 (CPF_Parm)

void UOnlinePlayerInterface::OnLogoutCompleted(bool bWasSuccessful)
{
	static UFunction* uFnOnLogoutCompleted = nullptr;

	if (!uFnOnLogoutCompleted)
	{
		uFnOnLogoutCompleted = UFunction::FindFunction("Function Engine.OnlinePlayerInterface.OnLogoutCompleted");
	}

	UOnlinePlayerInterface_execOnLogoutCompleted_Params OnLogoutCompleted_Params;
	memset(&OnLogoutCompleted_Params, 0, sizeof(OnLogoutCompleted_Params));
	OnLogoutCompleted_Params.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent(uFnOnLogoutCompleted, &OnLogoutCompleted_Params, nullptr);
};

// Function Engine.OnlinePlayerInterface.Logout
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint8_t                        LocalUserNum                   (CPF_Parm)

bool UOnlinePlayerInterface::Logout(uint8_t LocalUserNum)
{
	static UFunction* uFnLogout = nullptr;

	if (!uFnLogout)
	{
		uFnLogout = UFunction::FindFunction("Function Engine.OnlinePlayerInterface.Logout");
	}

	UOnlinePlayerInterface_execLogout_Params Logout_Params;
	memset(&Logout_Params, 0, sizeof(Logout_Params));
	memcpy_s(&Logout_Params.LocalUserNum, sizeof(Logout_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));

	this->ProcessEvent(uFnLogout, &Logout_Params, nullptr);

	return Logout_Params.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.ClearLoginFailedDelegate
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint8_t                        LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         LoginDelegate                  (CPF_Parm | CPF_NeedCtorLink)

void UOnlinePlayerInterface::ClearLoginFailedDelegate(uint8_t LocalUserNum, const struct FScriptDelegate& LoginDelegate)
{
	static UFunction* uFnClearLoginFailedDelegate = nullptr;

	if (!uFnClearLoginFailedDelegate)
	{
		uFnClearLoginFailedDelegate = UFunction::FindFunction("Function Engine.OnlinePlayerInterface.ClearLoginFailedDelegate");
	}

	UOnlinePlayerInterface_execClearLoginFailedDelegate_Params ClearLoginFailedDelegate_Params;
	memset(&ClearLoginFailedDelegate_Params, 0, sizeof(ClearLoginFailedDelegate_Params));
	memcpy_s(&ClearLoginFailedDelegate_Params.LocalUserNum, sizeof(ClearLoginFailedDelegate_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	memcpy_s(&ClearLoginFailedDelegate_Params.LoginDelegate, sizeof(ClearLoginFailedDelegate_Params.LoginDelegate), &LoginDelegate, sizeof(LoginDelegate));

	this->ProcessEvent(uFnClearLoginFailedDelegate, &ClearLoginFailedDelegate_Params, nullptr);
};

// Function Engine.OnlinePlayerInterface.AddLoginFailedDelegate
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint8_t                        LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         LoginDelegate                  (CPF_Parm | CPF_NeedCtorLink)

void UOnlinePlayerInterface::AddLoginFailedDelegate(uint8_t LocalUserNum, const struct FScriptDelegate& LoginDelegate)
{
	static UFunction* uFnAddLoginFailedDelegate = nullptr;

	if (!uFnAddLoginFailedDelegate)
	{
		uFnAddLoginFailedDelegate = UFunction::FindFunction("Function Engine.OnlinePlayerInterface.AddLoginFailedDelegate");
	}

	UOnlinePlayerInterface_execAddLoginFailedDelegate_Params AddLoginFailedDelegate_Params;
	memset(&AddLoginFailedDelegate_Params, 0, sizeof(AddLoginFailedDelegate_Params));
	memcpy_s(&AddLoginFailedDelegate_Params.LocalUserNum, sizeof(AddLoginFailedDelegate_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	memcpy_s(&AddLoginFailedDelegate_Params.LoginDelegate, sizeof(AddLoginFailedDelegate_Params.LoginDelegate), &LoginDelegate, sizeof(LoginDelegate));

	this->ProcessEvent(uFnAddLoginFailedDelegate, &AddLoginFailedDelegate_Params, nullptr);
};

// Function Engine.OnlinePlayerInterface.OnLoginFailed
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// uint8_t                        LocalUserNum                   (CPF_Parm)
// EOnlineServerConnectionStatus  ErrorCode                      (CPF_Parm)

void UOnlinePlayerInterface::OnLoginFailed(uint8_t LocalUserNum, EOnlineServerConnectionStatus ErrorCode)
{
	static UFunction* uFnOnLoginFailed = nullptr;

	if (!uFnOnLoginFailed)
	{
		uFnOnLoginFailed = UFunction::FindFunction("Function Engine.OnlinePlayerInterface.OnLoginFailed");
	}

	UOnlinePlayerInterface_execOnLoginFailed_Params OnLoginFailed_Params;
	memset(&OnLoginFailed_Params, 0, sizeof(OnLoginFailed_Params));
	memcpy_s(&OnLoginFailed_Params.LocalUserNum, sizeof(OnLoginFailed_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	memcpy_s(&OnLoginFailed_Params.ErrorCode, sizeof(OnLoginFailed_Params.ErrorCode), &ErrorCode, sizeof(ErrorCode));

	this->ProcessEvent(uFnOnLoginFailed, &OnLoginFailed_Params, nullptr);
};

// Function Engine.OnlinePlayerInterface.AutoLogin
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UOnlinePlayerInterface::AutoLogin()
{
	static UFunction* uFnAutoLogin = nullptr;

	if (!uFnAutoLogin)
	{
		uFnAutoLogin = UFunction::FindFunction("Function Engine.OnlinePlayerInterface.AutoLogin");
	}

	UOnlinePlayerInterface_execAutoLogin_Params AutoLogin_Params;
	memset(&AutoLogin_Params, 0, sizeof(AutoLogin_Params));

	this->ProcessEvent(uFnAutoLogin, &AutoLogin_Params, nullptr);

	return AutoLogin_Params.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.Login
// [0x00024000] (FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint8_t                        LocalUserNum                   (CPF_Parm)
// class FString                  LoginName                      (CPF_Parm | CPF_NeedCtorLink)
// class FString                  Password                       (CPF_Parm | CPF_NeedCtorLink)
// uint32_t                       bWantsLocalOnly                (CPF_OptionalParm | CPF_Parm)

bool UOnlinePlayerInterface::Login(uint8_t LocalUserNum, const class FString& LoginName, const class FString& Password, bool bWantsLocalOnly)
{
	static UFunction* uFnLogin = nullptr;

	if (!uFnLogin)
	{
		uFnLogin = UFunction::FindFunction("Function Engine.OnlinePlayerInterface.Login");
	}

	UOnlinePlayerInterface_execLogin_Params Login_Params;
	memset(&Login_Params, 0, sizeof(Login_Params));
	memcpy_s(&Login_Params.LocalUserNum, sizeof(Login_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	memcpy_s(&Login_Params.LoginName, sizeof(Login_Params.LoginName), &LoginName, sizeof(LoginName));
	memcpy_s(&Login_Params.Password, sizeof(Login_Params.Password), &Password, sizeof(Password));
	Login_Params.bWantsLocalOnly = bWantsLocalOnly;

	this->ProcessEvent(uFnLogin, &Login_Params, nullptr);

	return Login_Params.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.ShowLoginUI
// [0x00024000] (FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       bShowOnlineOnly                (CPF_OptionalParm | CPF_Parm)

bool UOnlinePlayerInterface::ShowLoginUI(bool bShowOnlineOnly)
{
	static UFunction* uFnShowLoginUI = nullptr;

	if (!uFnShowLoginUI)
	{
		uFnShowLoginUI = UFunction::FindFunction("Function Engine.OnlinePlayerInterface.ShowLoginUI");
	}

	UOnlinePlayerInterface_execShowLoginUI_Params ShowLoginUI_Params;
	memset(&ShowLoginUI_Params, 0, sizeof(ShowLoginUI_Params));
	ShowLoginUI_Params.bShowOnlineOnly = bShowOnlineOnly;

	this->ProcessEvent(uFnShowLoginUI, &ShowLoginUI_Params, nullptr);

	return ShowLoginUI_Params.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.OnFriendsChange
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:

void UOnlinePlayerInterface::OnFriendsChange()
{
	static UFunction* uFnOnFriendsChange = nullptr;

	if (!uFnOnFriendsChange)
	{
		uFnOnFriendsChange = UFunction::FindFunction("Function Engine.OnlinePlayerInterface.OnFriendsChange");
	}

	UOnlinePlayerInterface_execOnFriendsChange_Params OnFriendsChange_Params;
	memset(&OnFriendsChange_Params, 0, sizeof(OnFriendsChange_Params));

	this->ProcessEvent(uFnOnFriendsChange, &OnFriendsChange_Params, nullptr);
};

// Function Engine.OnlinePlayerInterface.OnMutingChange
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:

void UOnlinePlayerInterface::OnMutingChange()
{
	static UFunction* uFnOnMutingChange = nullptr;

	if (!uFnOnMutingChange)
	{
		uFnOnMutingChange = UFunction::FindFunction("Function Engine.OnlinePlayerInterface.OnMutingChange");
	}

	UOnlinePlayerInterface_execOnMutingChange_Params OnMutingChange_Params;
	memset(&OnMutingChange_Params, 0, sizeof(OnMutingChange_Params));

	this->ProcessEvent(uFnOnMutingChange, &OnMutingChange_Params, nullptr);
};

// Function Engine.OnlinePlayerInterface.OnLoginCancelled
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:

void UOnlinePlayerInterface::OnLoginCancelled()
{
	static UFunction* uFnOnLoginCancelled = nullptr;

	if (!uFnOnLoginCancelled)
	{
		uFnOnLoginCancelled = UFunction::FindFunction("Function Engine.OnlinePlayerInterface.OnLoginCancelled");
	}

	UOnlinePlayerInterface_execOnLoginCancelled_Params OnLoginCancelled_Params;
	memset(&OnLoginCancelled_Params, 0, sizeof(OnLoginCancelled_Params));

	this->ProcessEvent(uFnOnLoginCancelled, &OnLoginCancelled_Params, nullptr);
};

// Function Engine.OnlinePlayerInterface.OnLoginChange
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// uint8_t                        LocalUserNum                   (CPF_Parm)

void UOnlinePlayerInterface::OnLoginChange(uint8_t LocalUserNum)
{
	static UFunction* uFnOnLoginChange = nullptr;

	if (!uFnOnLoginChange)
	{
		uFnOnLoginChange = UFunction::FindFunction("Function Engine.OnlinePlayerInterface.OnLoginChange");
	}

	UOnlinePlayerInterface_execOnLoginChange_Params OnLoginChange_Params;
	memset(&OnLoginChange_Params, 0, sizeof(OnLoginChange_Params));
	memcpy_s(&OnLoginChange_Params.LocalUserNum, sizeof(OnLoginChange_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));

	this->ProcessEvent(uFnOnLoginChange, &OnLoginChange_Params, nullptr);
};

// Function Engine.OnlineTitleFileInterface.ClearDownloadedFile
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FString                  Filename                       (CPF_Parm | CPF_NeedCtorLink)

bool UOnlineTitleFileInterface::ClearDownloadedFile(const class FString& Filename)
{
	static UFunction* uFnClearDownloadedFile = nullptr;

	if (!uFnClearDownloadedFile)
	{
		uFnClearDownloadedFile = UFunction::FindFunction("Function Engine.OnlineTitleFileInterface.ClearDownloadedFile");
	}

	UOnlineTitleFileInterface_execClearDownloadedFile_Params ClearDownloadedFile_Params;
	memset(&ClearDownloadedFile_Params, 0, sizeof(ClearDownloadedFile_Params));
	memcpy_s(&ClearDownloadedFile_Params.Filename, sizeof(ClearDownloadedFile_Params.Filename), &Filename, sizeof(Filename));

	this->ProcessEvent(uFnClearDownloadedFile, &ClearDownloadedFile_Params, nullptr);

	return ClearDownloadedFile_Params.ReturnValue;
};

// Function Engine.OnlineTitleFileInterface.ClearDownloadedFiles
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UOnlineTitleFileInterface::ClearDownloadedFiles()
{
	static UFunction* uFnClearDownloadedFiles = nullptr;

	if (!uFnClearDownloadedFiles)
	{
		uFnClearDownloadedFiles = UFunction::FindFunction("Function Engine.OnlineTitleFileInterface.ClearDownloadedFiles");
	}

	UOnlineTitleFileInterface_execClearDownloadedFiles_Params ClearDownloadedFiles_Params;
	memset(&ClearDownloadedFiles_Params, 0, sizeof(ClearDownloadedFiles_Params));

	this->ProcessEvent(uFnClearDownloadedFiles, &ClearDownloadedFiles_Params, nullptr);

	return ClearDownloadedFiles_Params.ReturnValue;
};

// Function Engine.OnlineTitleFileInterface.GetTitleFileState
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EOnlineEnumerationReadState    ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FString                  Filename                       (CPF_Parm | CPF_NeedCtorLink)

EOnlineEnumerationReadState UOnlineTitleFileInterface::GetTitleFileState(const class FString& Filename)
{
	static UFunction* uFnGetTitleFileState = nullptr;

	if (!uFnGetTitleFileState)
	{
		uFnGetTitleFileState = UFunction::FindFunction("Function Engine.OnlineTitleFileInterface.GetTitleFileState");
	}

	UOnlineTitleFileInterface_execGetTitleFileState_Params GetTitleFileState_Params;
	memset(&GetTitleFileState_Params, 0, sizeof(GetTitleFileState_Params));
	memcpy_s(&GetTitleFileState_Params.Filename, sizeof(GetTitleFileState_Params.Filename), &Filename, sizeof(Filename));

	this->ProcessEvent(uFnGetTitleFileState, &GetTitleFileState_Params, nullptr);

	return static_cast<EOnlineEnumerationReadState>(GetTitleFileState_Params.ReturnValue);
};

// Function Engine.OnlineTitleFileInterface.GetTitleFileContents
// [0x00420000] (FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FString                  Filename                       (CPF_Parm | CPF_NeedCtorLink)
// class TArray<uint8_t>          FileContents                   (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

bool UOnlineTitleFileInterface::GetTitleFileContents(const class FString& Filename, class TArray<uint8_t>& FileContents)
{
	static UFunction* uFnGetTitleFileContents = nullptr;

	if (!uFnGetTitleFileContents)
	{
		uFnGetTitleFileContents = UFunction::FindFunction("Function Engine.OnlineTitleFileInterface.GetTitleFileContents");
	}

	UOnlineTitleFileInterface_execGetTitleFileContents_Params GetTitleFileContents_Params;
	memset(&GetTitleFileContents_Params, 0, sizeof(GetTitleFileContents_Params));
	memcpy_s(&GetTitleFileContents_Params.Filename, sizeof(GetTitleFileContents_Params.Filename), &Filename, sizeof(Filename));
	memcpy_s(&GetTitleFileContents_Params.FileContents, sizeof(GetTitleFileContents_Params.FileContents), &FileContents, sizeof(FileContents));

	this->ProcessEvent(uFnGetTitleFileContents, &GetTitleFileContents_Params, nullptr);

	memcpy_s(&FileContents, sizeof(FileContents), &GetTitleFileContents_Params.FileContents, sizeof(GetTitleFileContents_Params.FileContents));

	return GetTitleFileContents_Params.ReturnValue;
};

// Function Engine.OnlineTitleFileInterface.ClearReadTitleFileCompleteDelegate
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FScriptDelegate         ReadTitleFileCompleteDelegate  (CPF_Parm | CPF_NeedCtorLink)

void UOnlineTitleFileInterface::ClearReadTitleFileCompleteDelegate(const struct FScriptDelegate& ReadTitleFileCompleteDelegate)
{
	static UFunction* uFnClearReadTitleFileCompleteDelegate = nullptr;

	if (!uFnClearReadTitleFileCompleteDelegate)
	{
		uFnClearReadTitleFileCompleteDelegate = UFunction::FindFunction("Function Engine.OnlineTitleFileInterface.ClearReadTitleFileCompleteDelegate");
	}

	UOnlineTitleFileInterface_execClearReadTitleFileCompleteDelegate_Params ClearReadTitleFileCompleteDelegate_Params;
	memset(&ClearReadTitleFileCompleteDelegate_Params, 0, sizeof(ClearReadTitleFileCompleteDelegate_Params));
	memcpy_s(&ClearReadTitleFileCompleteDelegate_Params.ReadTitleFileCompleteDelegate, sizeof(ClearReadTitleFileCompleteDelegate_Params.ReadTitleFileCompleteDelegate), &ReadTitleFileCompleteDelegate, sizeof(ReadTitleFileCompleteDelegate));

	this->ProcessEvent(uFnClearReadTitleFileCompleteDelegate, &ClearReadTitleFileCompleteDelegate_Params, nullptr);
};

// Function Engine.OnlineTitleFileInterface.AddReadTitleFileCompleteDelegate
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FScriptDelegate         ReadTitleFileCompleteDelegate  (CPF_Parm | CPF_NeedCtorLink)

void UOnlineTitleFileInterface::AddReadTitleFileCompleteDelegate(const struct FScriptDelegate& ReadTitleFileCompleteDelegate)
{
	static UFunction* uFnAddReadTitleFileCompleteDelegate = nullptr;

	if (!uFnAddReadTitleFileCompleteDelegate)
	{
		uFnAddReadTitleFileCompleteDelegate = UFunction::FindFunction("Function Engine.OnlineTitleFileInterface.AddReadTitleFileCompleteDelegate");
	}

	UOnlineTitleFileInterface_execAddReadTitleFileCompleteDelegate_Params AddReadTitleFileCompleteDelegate_Params;
	memset(&AddReadTitleFileCompleteDelegate_Params, 0, sizeof(AddReadTitleFileCompleteDelegate_Params));
	memcpy_s(&AddReadTitleFileCompleteDelegate_Params.ReadTitleFileCompleteDelegate, sizeof(AddReadTitleFileCompleteDelegate_Params.ReadTitleFileCompleteDelegate), &ReadTitleFileCompleteDelegate, sizeof(ReadTitleFileCompleteDelegate));

	this->ProcessEvent(uFnAddReadTitleFileCompleteDelegate, &AddReadTitleFileCompleteDelegate_Params, nullptr);
};

// Function Engine.OnlineTitleFileInterface.ReadTitleFile
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FString                  FileToRead                     (CPF_Parm | CPF_NeedCtorLink)

bool UOnlineTitleFileInterface::ReadTitleFile(const class FString& FileToRead)
{
	static UFunction* uFnReadTitleFile = nullptr;

	if (!uFnReadTitleFile)
	{
		uFnReadTitleFile = UFunction::FindFunction("Function Engine.OnlineTitleFileInterface.ReadTitleFile");
	}

	UOnlineTitleFileInterface_execReadTitleFile_Params ReadTitleFile_Params;
	memset(&ReadTitleFile_Params, 0, sizeof(ReadTitleFile_Params));
	memcpy_s(&ReadTitleFile_Params.FileToRead, sizeof(ReadTitleFile_Params.FileToRead), &FileToRead, sizeof(FileToRead));

	this->ProcessEvent(uFnReadTitleFile, &ReadTitleFile_Params, nullptr);

	return ReadTitleFile_Params.ReturnValue;
};

// Function Engine.OnlineTitleFileInterface.OnReadTitleFileComplete
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bWasSuccessful                 (CPF_Parm)
// class FString                  Filename                       (CPF_Parm | CPF_NeedCtorLink)

void UOnlineTitleFileInterface::OnReadTitleFileComplete(bool bWasSuccessful, const class FString& Filename)
{
	static UFunction* uFnOnReadTitleFileComplete = nullptr;

	if (!uFnOnReadTitleFileComplete)
	{
		uFnOnReadTitleFileComplete = UFunction::FindFunction("Function Engine.OnlineTitleFileInterface.OnReadTitleFileComplete");
	}

	UOnlineTitleFileInterface_execOnReadTitleFileComplete_Params OnReadTitleFileComplete_Params;
	memset(&OnReadTitleFileComplete_Params, 0, sizeof(OnReadTitleFileComplete_Params));
	OnReadTitleFileComplete_Params.bWasSuccessful = bWasSuccessful;
	memcpy_s(&OnReadTitleFileComplete_Params.Filename, sizeof(OnReadTitleFileComplete_Params.Filename), &Filename, sizeof(Filename));

	this->ProcessEvent(uFnOnReadTitleFileComplete, &OnReadTitleFileComplete_Params, nullptr);
};

// Function Engine.OnlineStatsInterface.RegisterStatGuid
// [0x00420000] (FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FUniqueNetId            PlayerID                       (CPF_Parm)
// class FString                  ClientStatGuid                 (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

bool UOnlineStatsInterface::RegisterStatGuid(const struct FUniqueNetId& PlayerID, class FString& ClientStatGuid)
{
	static UFunction* uFnRegisterStatGuid = nullptr;

	if (!uFnRegisterStatGuid)
	{
		uFnRegisterStatGuid = UFunction::FindFunction("Function Engine.OnlineStatsInterface.RegisterStatGuid");
	}

	UOnlineStatsInterface_execRegisterStatGuid_Params RegisterStatGuid_Params;
	memset(&RegisterStatGuid_Params, 0, sizeof(RegisterStatGuid_Params));
	memcpy_s(&RegisterStatGuid_Params.PlayerID, sizeof(RegisterStatGuid_Params.PlayerID), &PlayerID, sizeof(PlayerID));
	memcpy_s(&RegisterStatGuid_Params.ClientStatGuid, sizeof(RegisterStatGuid_Params.ClientStatGuid), &ClientStatGuid, sizeof(ClientStatGuid));

	this->ProcessEvent(uFnRegisterStatGuid, &RegisterStatGuid_Params, nullptr);

	memcpy_s(&ClientStatGuid, sizeof(ClientStatGuid), &RegisterStatGuid_Params.ClientStatGuid, sizeof(RegisterStatGuid_Params.ClientStatGuid));

	return RegisterStatGuid_Params.ReturnValue;
};

// Function Engine.OnlineStatsInterface.GetClientStatGuid
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)

class FString UOnlineStatsInterface::GetClientStatGuid()
{
	static UFunction* uFnGetClientStatGuid = nullptr;

	if (!uFnGetClientStatGuid)
	{
		uFnGetClientStatGuid = UFunction::FindFunction("Function Engine.OnlineStatsInterface.GetClientStatGuid");
	}

	UOnlineStatsInterface_execGetClientStatGuid_Params GetClientStatGuid_Params;
	memset(&GetClientStatGuid_Params, 0, sizeof(GetClientStatGuid_Params));

	this->ProcessEvent(uFnGetClientStatGuid, &GetClientStatGuid_Params, nullptr);

	return GetClientStatGuid_Params.ReturnValue;
};

// Function Engine.OnlineStatsInterface.ClearRegisterHostStatGuidCompleteDelegateDelegate
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FScriptDelegate         RegisterHostStatGuidCompleteDelegate (CPF_Parm | CPF_NeedCtorLink)

void UOnlineStatsInterface::ClearRegisterHostStatGuidCompleteDelegateDelegate(const struct FScriptDelegate& RegisterHostStatGuidCompleteDelegate)
{
	static UFunction* uFnClearRegisterHostStatGuidCompleteDelegateDelegate = nullptr;

	if (!uFnClearRegisterHostStatGuidCompleteDelegateDelegate)
	{
		uFnClearRegisterHostStatGuidCompleteDelegateDelegate = UFunction::FindFunction("Function Engine.OnlineStatsInterface.ClearRegisterHostStatGuidCompleteDelegateDelegate");
	}

	UOnlineStatsInterface_execClearRegisterHostStatGuidCompleteDelegateDelegate_Params ClearRegisterHostStatGuidCompleteDelegateDelegate_Params;
	memset(&ClearRegisterHostStatGuidCompleteDelegateDelegate_Params, 0, sizeof(ClearRegisterHostStatGuidCompleteDelegateDelegate_Params));
	memcpy_s(&ClearRegisterHostStatGuidCompleteDelegateDelegate_Params.RegisterHostStatGuidCompleteDelegate, sizeof(ClearRegisterHostStatGuidCompleteDelegateDelegate_Params.RegisterHostStatGuidCompleteDelegate), &RegisterHostStatGuidCompleteDelegate, sizeof(RegisterHostStatGuidCompleteDelegate));

	this->ProcessEvent(uFnClearRegisterHostStatGuidCompleteDelegateDelegate, &ClearRegisterHostStatGuidCompleteDelegateDelegate_Params, nullptr);
};

// Function Engine.OnlineStatsInterface.AddRegisterHostStatGuidCompleteDelegate
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FScriptDelegate         RegisterHostStatGuidCompleteDelegate (CPF_Parm | CPF_NeedCtorLink)

void UOnlineStatsInterface::AddRegisterHostStatGuidCompleteDelegate(const struct FScriptDelegate& RegisterHostStatGuidCompleteDelegate)
{
	static UFunction* uFnAddRegisterHostStatGuidCompleteDelegate = nullptr;

	if (!uFnAddRegisterHostStatGuidCompleteDelegate)
	{
		uFnAddRegisterHostStatGuidCompleteDelegate = UFunction::FindFunction("Function Engine.OnlineStatsInterface.AddRegisterHostStatGuidCompleteDelegate");
	}

	UOnlineStatsInterface_execAddRegisterHostStatGuidCompleteDelegate_Params AddRegisterHostStatGuidCompleteDelegate_Params;
	memset(&AddRegisterHostStatGuidCompleteDelegate_Params, 0, sizeof(AddRegisterHostStatGuidCompleteDelegate_Params));
	memcpy_s(&AddRegisterHostStatGuidCompleteDelegate_Params.RegisterHostStatGuidCompleteDelegate, sizeof(AddRegisterHostStatGuidCompleteDelegate_Params.RegisterHostStatGuidCompleteDelegate), &RegisterHostStatGuidCompleteDelegate, sizeof(RegisterHostStatGuidCompleteDelegate));

	this->ProcessEvent(uFnAddRegisterHostStatGuidCompleteDelegate, &AddRegisterHostStatGuidCompleteDelegate_Params, nullptr);
};

// Function Engine.OnlineStatsInterface.OnRegisterHostStatGuidComplete
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bWasSuccessful                 (CPF_Parm)

void UOnlineStatsInterface::OnRegisterHostStatGuidComplete(bool bWasSuccessful)
{
	static UFunction* uFnOnRegisterHostStatGuidComplete = nullptr;

	if (!uFnOnRegisterHostStatGuidComplete)
	{
		uFnOnRegisterHostStatGuidComplete = UFunction::FindFunction("Function Engine.OnlineStatsInterface.OnRegisterHostStatGuidComplete");
	}

	UOnlineStatsInterface_execOnRegisterHostStatGuidComplete_Params OnRegisterHostStatGuidComplete_Params;
	memset(&OnRegisterHostStatGuidComplete_Params, 0, sizeof(OnRegisterHostStatGuidComplete_Params));
	OnRegisterHostStatGuidComplete_Params.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent(uFnOnRegisterHostStatGuidComplete, &OnRegisterHostStatGuidComplete_Params, nullptr);
};

// Function Engine.OnlineStatsInterface.RegisterHostStatGuid
// [0x00420000] (FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FString                  HostStatGuid                   (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

bool UOnlineStatsInterface::RegisterHostStatGuid(class FString& HostStatGuid)
{
	static UFunction* uFnRegisterHostStatGuid = nullptr;

	if (!uFnRegisterHostStatGuid)
	{
		uFnRegisterHostStatGuid = UFunction::FindFunction("Function Engine.OnlineStatsInterface.RegisterHostStatGuid");
	}

	UOnlineStatsInterface_execRegisterHostStatGuid_Params RegisterHostStatGuid_Params;
	memset(&RegisterHostStatGuid_Params, 0, sizeof(RegisterHostStatGuid_Params));
	memcpy_s(&RegisterHostStatGuid_Params.HostStatGuid, sizeof(RegisterHostStatGuid_Params.HostStatGuid), &HostStatGuid, sizeof(HostStatGuid));

	this->ProcessEvent(uFnRegisterHostStatGuid, &RegisterHostStatGuid_Params, nullptr);

	memcpy_s(&HostStatGuid, sizeof(HostStatGuid), &RegisterHostStatGuid_Params.HostStatGuid, sizeof(RegisterHostStatGuid_Params.HostStatGuid));

	return RegisterHostStatGuid_Params.ReturnValue;
};

// Function Engine.OnlineStatsInterface.GetHostStatGuid
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)

class FString UOnlineStatsInterface::GetHostStatGuid()
{
	static UFunction* uFnGetHostStatGuid = nullptr;

	if (!uFnGetHostStatGuid)
	{
		uFnGetHostStatGuid = UFunction::FindFunction("Function Engine.OnlineStatsInterface.GetHostStatGuid");
	}

	UOnlineStatsInterface_execGetHostStatGuid_Params GetHostStatGuid_Params;
	memset(&GetHostStatGuid_Params, 0, sizeof(GetHostStatGuid_Params));

	this->ProcessEvent(uFnGetHostStatGuid, &GetHostStatGuid_Params, nullptr);

	return GetHostStatGuid_Params.ReturnValue;
};

// Function Engine.OnlineStatsInterface.WriteOnlinePlayerScores
// [0x00420000] (FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    SessionName                    (CPF_Parm)
// int32_t                        LeaderboardId                  (CPF_Parm)
// class TArray<struct FOnlinePlayerScore> PlayerScores                   (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

bool UOnlineStatsInterface::WriteOnlinePlayerScores(const class FName& SessionName, int32_t LeaderboardId, class TArray<struct FOnlinePlayerScore>& PlayerScores)
{
	static UFunction* uFnWriteOnlinePlayerScores = nullptr;

	if (!uFnWriteOnlinePlayerScores)
	{
		uFnWriteOnlinePlayerScores = UFunction::FindFunction("Function Engine.OnlineStatsInterface.WriteOnlinePlayerScores");
	}

	UOnlineStatsInterface_execWriteOnlinePlayerScores_Params WriteOnlinePlayerScores_Params;
	memset(&WriteOnlinePlayerScores_Params, 0, sizeof(WriteOnlinePlayerScores_Params));
	memcpy_s(&WriteOnlinePlayerScores_Params.SessionName, sizeof(WriteOnlinePlayerScores_Params.SessionName), &SessionName, sizeof(SessionName));
	memcpy_s(&WriteOnlinePlayerScores_Params.LeaderboardId, sizeof(WriteOnlinePlayerScores_Params.LeaderboardId), &LeaderboardId, sizeof(LeaderboardId));
	memcpy_s(&WriteOnlinePlayerScores_Params.PlayerScores, sizeof(WriteOnlinePlayerScores_Params.PlayerScores), &PlayerScores, sizeof(PlayerScores));

	this->ProcessEvent(uFnWriteOnlinePlayerScores, &WriteOnlinePlayerScores_Params, nullptr);

	memcpy_s(&PlayerScores, sizeof(PlayerScores), &WriteOnlinePlayerScores_Params.PlayerScores, sizeof(WriteOnlinePlayerScores_Params.PlayerScores));

	return WriteOnlinePlayerScores_Params.ReturnValue;
};

// Function Engine.OnlineStatsInterface.ClearFlushOnlineStatsCompleteDelegate
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FScriptDelegate         FlushOnlineStatsCompleteDelegate (CPF_Parm | CPF_NeedCtorLink)

void UOnlineStatsInterface::ClearFlushOnlineStatsCompleteDelegate(const struct FScriptDelegate& FlushOnlineStatsCompleteDelegate)
{
	static UFunction* uFnClearFlushOnlineStatsCompleteDelegate = nullptr;

	if (!uFnClearFlushOnlineStatsCompleteDelegate)
	{
		uFnClearFlushOnlineStatsCompleteDelegate = UFunction::FindFunction("Function Engine.OnlineStatsInterface.ClearFlushOnlineStatsCompleteDelegate");
	}

	UOnlineStatsInterface_execClearFlushOnlineStatsCompleteDelegate_Params ClearFlushOnlineStatsCompleteDelegate_Params;
	memset(&ClearFlushOnlineStatsCompleteDelegate_Params, 0, sizeof(ClearFlushOnlineStatsCompleteDelegate_Params));
	memcpy_s(&ClearFlushOnlineStatsCompleteDelegate_Params.FlushOnlineStatsCompleteDelegate, sizeof(ClearFlushOnlineStatsCompleteDelegate_Params.FlushOnlineStatsCompleteDelegate), &FlushOnlineStatsCompleteDelegate, sizeof(FlushOnlineStatsCompleteDelegate));

	this->ProcessEvent(uFnClearFlushOnlineStatsCompleteDelegate, &ClearFlushOnlineStatsCompleteDelegate_Params, nullptr);
};

// Function Engine.OnlineStatsInterface.AddFlushOnlineStatsCompleteDelegate
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FScriptDelegate         FlushOnlineStatsCompleteDelegate (CPF_Parm | CPF_NeedCtorLink)

void UOnlineStatsInterface::AddFlushOnlineStatsCompleteDelegate(const struct FScriptDelegate& FlushOnlineStatsCompleteDelegate)
{
	static UFunction* uFnAddFlushOnlineStatsCompleteDelegate = nullptr;

	if (!uFnAddFlushOnlineStatsCompleteDelegate)
	{
		uFnAddFlushOnlineStatsCompleteDelegate = UFunction::FindFunction("Function Engine.OnlineStatsInterface.AddFlushOnlineStatsCompleteDelegate");
	}

	UOnlineStatsInterface_execAddFlushOnlineStatsCompleteDelegate_Params AddFlushOnlineStatsCompleteDelegate_Params;
	memset(&AddFlushOnlineStatsCompleteDelegate_Params, 0, sizeof(AddFlushOnlineStatsCompleteDelegate_Params));
	memcpy_s(&AddFlushOnlineStatsCompleteDelegate_Params.FlushOnlineStatsCompleteDelegate, sizeof(AddFlushOnlineStatsCompleteDelegate_Params.FlushOnlineStatsCompleteDelegate), &FlushOnlineStatsCompleteDelegate, sizeof(FlushOnlineStatsCompleteDelegate));

	this->ProcessEvent(uFnAddFlushOnlineStatsCompleteDelegate, &AddFlushOnlineStatsCompleteDelegate_Params, nullptr);
};

// Function Engine.OnlineStatsInterface.OnFlushOnlineStatsComplete
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// class FName                    SessionName                    (CPF_Parm)
// uint32_t                       bWasSuccessful                 (CPF_Parm)

void UOnlineStatsInterface::OnFlushOnlineStatsComplete(const class FName& SessionName, bool bWasSuccessful)
{
	static UFunction* uFnOnFlushOnlineStatsComplete = nullptr;

	if (!uFnOnFlushOnlineStatsComplete)
	{
		uFnOnFlushOnlineStatsComplete = UFunction::FindFunction("Function Engine.OnlineStatsInterface.OnFlushOnlineStatsComplete");
	}

	UOnlineStatsInterface_execOnFlushOnlineStatsComplete_Params OnFlushOnlineStatsComplete_Params;
	memset(&OnFlushOnlineStatsComplete_Params, 0, sizeof(OnFlushOnlineStatsComplete_Params));
	memcpy_s(&OnFlushOnlineStatsComplete_Params.SessionName, sizeof(OnFlushOnlineStatsComplete_Params.SessionName), &SessionName, sizeof(SessionName));
	OnFlushOnlineStatsComplete_Params.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent(uFnOnFlushOnlineStatsComplete, &OnFlushOnlineStatsComplete_Params, nullptr);
};

// Function Engine.OnlineStatsInterface.FlushOnlineStats
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    SessionName                    (CPF_Parm)

bool UOnlineStatsInterface::FlushOnlineStats(const class FName& SessionName)
{
	static UFunction* uFnFlushOnlineStats = nullptr;

	if (!uFnFlushOnlineStats)
	{
		uFnFlushOnlineStats = UFunction::FindFunction("Function Engine.OnlineStatsInterface.FlushOnlineStats");
	}

	UOnlineStatsInterface_execFlushOnlineStats_Params FlushOnlineStats_Params;
	memset(&FlushOnlineStats_Params, 0, sizeof(FlushOnlineStats_Params));
	memcpy_s(&FlushOnlineStats_Params.SessionName, sizeof(FlushOnlineStats_Params.SessionName), &SessionName, sizeof(SessionName));

	this->ProcessEvent(uFnFlushOnlineStats, &FlushOnlineStats_Params, nullptr);

	return FlushOnlineStats_Params.ReturnValue;
};

// Function Engine.OnlineStatsInterface.WriteOnlineStats
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    SessionName                    (CPF_Parm)
// struct FUniqueNetId            Player                         (CPF_Parm)
// class UOnlineStatsWrite*       StatsWrite                     (CPF_Parm)

bool UOnlineStatsInterface::WriteOnlineStats(const class FName& SessionName, const struct FUniqueNetId& Player, class UOnlineStatsWrite* StatsWrite)
{
	static UFunction* uFnWriteOnlineStats = nullptr;

	if (!uFnWriteOnlineStats)
	{
		uFnWriteOnlineStats = UFunction::FindFunction("Function Engine.OnlineStatsInterface.WriteOnlineStats");
	}

	UOnlineStatsInterface_execWriteOnlineStats_Params WriteOnlineStats_Params;
	memset(&WriteOnlineStats_Params, 0, sizeof(WriteOnlineStats_Params));
	memcpy_s(&WriteOnlineStats_Params.SessionName, sizeof(WriteOnlineStats_Params.SessionName), &SessionName, sizeof(SessionName));
	memcpy_s(&WriteOnlineStats_Params.Player, sizeof(WriteOnlineStats_Params.Player), &Player, sizeof(Player));
	WriteOnlineStats_Params.StatsWrite = StatsWrite;

	this->ProcessEvent(uFnWriteOnlineStats, &WriteOnlineStats_Params, nullptr);

	return WriteOnlineStats_Params.ReturnValue;
};

// Function Engine.OnlineStatsInterface.FreeStats
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UOnlineStatsRead*        StatsRead                      (CPF_Parm)

void UOnlineStatsInterface::FreeStats(class UOnlineStatsRead* StatsRead)
{
	static UFunction* uFnFreeStats = nullptr;

	if (!uFnFreeStats)
	{
		uFnFreeStats = UFunction::FindFunction("Function Engine.OnlineStatsInterface.FreeStats");
	}

	UOnlineStatsInterface_execFreeStats_Params FreeStats_Params;
	memset(&FreeStats_Params, 0, sizeof(FreeStats_Params));
	FreeStats_Params.StatsRead = StatsRead;

	this->ProcessEvent(uFnFreeStats, &FreeStats_Params, nullptr);
};

// Function Engine.OnlineStatsInterface.ClearReadOnlineStatsCompleteDelegate
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FScriptDelegate         ReadOnlineStatsCompleteDelegate (CPF_Parm | CPF_NeedCtorLink)

void UOnlineStatsInterface::ClearReadOnlineStatsCompleteDelegate(const struct FScriptDelegate& ReadOnlineStatsCompleteDelegate)
{
	static UFunction* uFnClearReadOnlineStatsCompleteDelegate = nullptr;

	if (!uFnClearReadOnlineStatsCompleteDelegate)
	{
		uFnClearReadOnlineStatsCompleteDelegate = UFunction::FindFunction("Function Engine.OnlineStatsInterface.ClearReadOnlineStatsCompleteDelegate");
	}

	UOnlineStatsInterface_execClearReadOnlineStatsCompleteDelegate_Params ClearReadOnlineStatsCompleteDelegate_Params;
	memset(&ClearReadOnlineStatsCompleteDelegate_Params, 0, sizeof(ClearReadOnlineStatsCompleteDelegate_Params));
	memcpy_s(&ClearReadOnlineStatsCompleteDelegate_Params.ReadOnlineStatsCompleteDelegate, sizeof(ClearReadOnlineStatsCompleteDelegate_Params.ReadOnlineStatsCompleteDelegate), &ReadOnlineStatsCompleteDelegate, sizeof(ReadOnlineStatsCompleteDelegate));

	this->ProcessEvent(uFnClearReadOnlineStatsCompleteDelegate, &ClearReadOnlineStatsCompleteDelegate_Params, nullptr);
};

// Function Engine.OnlineStatsInterface.AddReadOnlineStatsCompleteDelegate
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FScriptDelegate         ReadOnlineStatsCompleteDelegate (CPF_Parm | CPF_NeedCtorLink)

void UOnlineStatsInterface::AddReadOnlineStatsCompleteDelegate(const struct FScriptDelegate& ReadOnlineStatsCompleteDelegate)
{
	static UFunction* uFnAddReadOnlineStatsCompleteDelegate = nullptr;

	if (!uFnAddReadOnlineStatsCompleteDelegate)
	{
		uFnAddReadOnlineStatsCompleteDelegate = UFunction::FindFunction("Function Engine.OnlineStatsInterface.AddReadOnlineStatsCompleteDelegate");
	}

	UOnlineStatsInterface_execAddReadOnlineStatsCompleteDelegate_Params AddReadOnlineStatsCompleteDelegate_Params;
	memset(&AddReadOnlineStatsCompleteDelegate_Params, 0, sizeof(AddReadOnlineStatsCompleteDelegate_Params));
	memcpy_s(&AddReadOnlineStatsCompleteDelegate_Params.ReadOnlineStatsCompleteDelegate, sizeof(AddReadOnlineStatsCompleteDelegate_Params.ReadOnlineStatsCompleteDelegate), &ReadOnlineStatsCompleteDelegate, sizeof(ReadOnlineStatsCompleteDelegate));

	this->ProcessEvent(uFnAddReadOnlineStatsCompleteDelegate, &AddReadOnlineStatsCompleteDelegate_Params, nullptr);
};

// Function Engine.OnlineStatsInterface.OnReadOnlineStatsComplete
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bWasSuccessful                 (CPF_Parm)

void UOnlineStatsInterface::OnReadOnlineStatsComplete(bool bWasSuccessful)
{
	static UFunction* uFnOnReadOnlineStatsComplete = nullptr;

	if (!uFnOnReadOnlineStatsComplete)
	{
		uFnOnReadOnlineStatsComplete = UFunction::FindFunction("Function Engine.OnlineStatsInterface.OnReadOnlineStatsComplete");
	}

	UOnlineStatsInterface_execOnReadOnlineStatsComplete_Params OnReadOnlineStatsComplete_Params;
	memset(&OnReadOnlineStatsComplete_Params, 0, sizeof(OnReadOnlineStatsComplete_Params));
	OnReadOnlineStatsComplete_Params.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent(uFnOnReadOnlineStatsComplete, &OnReadOnlineStatsComplete_Params, nullptr);
};

// Function Engine.OnlineStatsInterface.ReadOnlineStatsByRankAroundPlayer
// [0x00024000] (FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint8_t                        LocalUserNum                   (CPF_Parm)
// class UOnlineStatsRead*        StatsRead                      (CPF_Parm)
// int32_t                        NumRows                        (CPF_OptionalParm | CPF_Parm)

bool UOnlineStatsInterface::ReadOnlineStatsByRankAroundPlayer(uint8_t LocalUserNum, class UOnlineStatsRead* StatsRead, int32_t NumRows)
{
	static UFunction* uFnReadOnlineStatsByRankAroundPlayer = nullptr;

	if (!uFnReadOnlineStatsByRankAroundPlayer)
	{
		uFnReadOnlineStatsByRankAroundPlayer = UFunction::FindFunction("Function Engine.OnlineStatsInterface.ReadOnlineStatsByRankAroundPlayer");
	}

	UOnlineStatsInterface_execReadOnlineStatsByRankAroundPlayer_Params ReadOnlineStatsByRankAroundPlayer_Params;
	memset(&ReadOnlineStatsByRankAroundPlayer_Params, 0, sizeof(ReadOnlineStatsByRankAroundPlayer_Params));
	memcpy_s(&ReadOnlineStatsByRankAroundPlayer_Params.LocalUserNum, sizeof(ReadOnlineStatsByRankAroundPlayer_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	ReadOnlineStatsByRankAroundPlayer_Params.StatsRead = StatsRead;
	memcpy_s(&ReadOnlineStatsByRankAroundPlayer_Params.NumRows, sizeof(ReadOnlineStatsByRankAroundPlayer_Params.NumRows), &NumRows, sizeof(NumRows));

	this->ProcessEvent(uFnReadOnlineStatsByRankAroundPlayer, &ReadOnlineStatsByRankAroundPlayer_Params, nullptr);

	return ReadOnlineStatsByRankAroundPlayer_Params.ReturnValue;
};

// Function Engine.OnlineStatsInterface.ReadOnlineStatsByRank
// [0x00024000] (FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UOnlineStatsRead*        StatsRead                      (CPF_Parm)
// int32_t                        StartIndex                     (CPF_OptionalParm | CPF_Parm)
// int32_t                        NumToRead                      (CPF_OptionalParm | CPF_Parm)

bool UOnlineStatsInterface::ReadOnlineStatsByRank(class UOnlineStatsRead* StatsRead, int32_t StartIndex, int32_t NumToRead)
{
	static UFunction* uFnReadOnlineStatsByRank = nullptr;

	if (!uFnReadOnlineStatsByRank)
	{
		uFnReadOnlineStatsByRank = UFunction::FindFunction("Function Engine.OnlineStatsInterface.ReadOnlineStatsByRank");
	}

	UOnlineStatsInterface_execReadOnlineStatsByRank_Params ReadOnlineStatsByRank_Params;
	memset(&ReadOnlineStatsByRank_Params, 0, sizeof(ReadOnlineStatsByRank_Params));
	ReadOnlineStatsByRank_Params.StatsRead = StatsRead;
	memcpy_s(&ReadOnlineStatsByRank_Params.StartIndex, sizeof(ReadOnlineStatsByRank_Params.StartIndex), &StartIndex, sizeof(StartIndex));
	memcpy_s(&ReadOnlineStatsByRank_Params.NumToRead, sizeof(ReadOnlineStatsByRank_Params.NumToRead), &NumToRead, sizeof(NumToRead));

	this->ProcessEvent(uFnReadOnlineStatsByRank, &ReadOnlineStatsByRank_Params, nullptr);

	return ReadOnlineStatsByRank_Params.ReturnValue;
};

// Function Engine.OnlineStatsInterface.ReadOnlineStatsForFriends
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint8_t                        LocalUserNum                   (CPF_Parm)
// class UOnlineStatsRead*        StatsRead                      (CPF_Parm)

bool UOnlineStatsInterface::ReadOnlineStatsForFriends(uint8_t LocalUserNum, class UOnlineStatsRead* StatsRead)
{
	static UFunction* uFnReadOnlineStatsForFriends = nullptr;

	if (!uFnReadOnlineStatsForFriends)
	{
		uFnReadOnlineStatsForFriends = UFunction::FindFunction("Function Engine.OnlineStatsInterface.ReadOnlineStatsForFriends");
	}

	UOnlineStatsInterface_execReadOnlineStatsForFriends_Params ReadOnlineStatsForFriends_Params;
	memset(&ReadOnlineStatsForFriends_Params, 0, sizeof(ReadOnlineStatsForFriends_Params));
	memcpy_s(&ReadOnlineStatsForFriends_Params.LocalUserNum, sizeof(ReadOnlineStatsForFriends_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	ReadOnlineStatsForFriends_Params.StatsRead = StatsRead;

	this->ProcessEvent(uFnReadOnlineStatsForFriends, &ReadOnlineStatsForFriends_Params, nullptr);

	return ReadOnlineStatsForFriends_Params.ReturnValue;
};

// Function Engine.OnlineStatsInterface.ReadOnlineStats
// [0x00420000] (FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UOnlineStatsRead*        StatsRead                      (CPF_Parm)
// class TArray<struct FUniqueNetId> Players                        (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

bool UOnlineStatsInterface::ReadOnlineStats(class UOnlineStatsRead* StatsRead, class TArray<struct FUniqueNetId>& Players)
{
	static UFunction* uFnReadOnlineStats = nullptr;

	if (!uFnReadOnlineStats)
	{
		uFnReadOnlineStats = UFunction::FindFunction("Function Engine.OnlineStatsInterface.ReadOnlineStats");
	}

	UOnlineStatsInterface_execReadOnlineStats_Params ReadOnlineStats_Params;
	memset(&ReadOnlineStats_Params, 0, sizeof(ReadOnlineStats_Params));
	ReadOnlineStats_Params.StatsRead = StatsRead;
	memcpy_s(&ReadOnlineStats_Params.Players, sizeof(ReadOnlineStats_Params.Players), &Players, sizeof(Players));

	this->ProcessEvent(uFnReadOnlineStats, &ReadOnlineStats_Params, nullptr);

	memcpy_s(&Players, sizeof(Players), &ReadOnlineStats_Params.Players, sizeof(ReadOnlineStats_Params.Players));

	return ReadOnlineStats_Params.ReturnValue;
};

// Function Engine.OnlineContentInterface.ClearSaveGames
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint8_t                        LocalUserNum                   (CPF_Parm)

bool UOnlineContentInterface::ClearSaveGames(uint8_t LocalUserNum)
{
	static UFunction* uFnClearSaveGames = nullptr;

	if (!uFnClearSaveGames)
	{
		uFnClearSaveGames = UFunction::FindFunction("Function Engine.OnlineContentInterface.ClearSaveGames");
	}

	UOnlineContentInterface_execClearSaveGames_Params ClearSaveGames_Params;
	memset(&ClearSaveGames_Params, 0, sizeof(ClearSaveGames_Params));
	memcpy_s(&ClearSaveGames_Params.LocalUserNum, sizeof(ClearSaveGames_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));

	this->ProcessEvent(uFnClearSaveGames, &ClearSaveGames_Params, nullptr);

	return ClearSaveGames_Params.ReturnValue;
};

// Function Engine.OnlineContentInterface.DeleteSaveGame
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint8_t                        LocalUserNum                   (CPF_Parm)
// int32_t                        DeviceID                       (CPF_Parm)
// class FString                  FriendlyName                   (CPF_Parm | CPF_NeedCtorLink)
// class FString                  Filename                       (CPF_Parm | CPF_NeedCtorLink)

bool UOnlineContentInterface::DeleteSaveGame(uint8_t LocalUserNum, int32_t DeviceID, const class FString& FriendlyName, const class FString& Filename)
{
	static UFunction* uFnDeleteSaveGame = nullptr;

	if (!uFnDeleteSaveGame)
	{
		uFnDeleteSaveGame = UFunction::FindFunction("Function Engine.OnlineContentInterface.DeleteSaveGame");
	}

	UOnlineContentInterface_execDeleteSaveGame_Params DeleteSaveGame_Params;
	memset(&DeleteSaveGame_Params, 0, sizeof(DeleteSaveGame_Params));
	memcpy_s(&DeleteSaveGame_Params.LocalUserNum, sizeof(DeleteSaveGame_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	memcpy_s(&DeleteSaveGame_Params.DeviceID, sizeof(DeleteSaveGame_Params.DeviceID), &DeviceID, sizeof(DeviceID));
	memcpy_s(&DeleteSaveGame_Params.FriendlyName, sizeof(DeleteSaveGame_Params.FriendlyName), &FriendlyName, sizeof(FriendlyName));
	memcpy_s(&DeleteSaveGame_Params.Filename, sizeof(DeleteSaveGame_Params.Filename), &Filename, sizeof(Filename));

	this->ProcessEvent(uFnDeleteSaveGame, &DeleteSaveGame_Params, nullptr);

	return DeleteSaveGame_Params.ReturnValue;
};

// Function Engine.OnlineContentInterface.ClearWriteSaveGameDataComplete
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint8_t                        LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         WriteSaveGameDataCompleteDelegate (CPF_Parm | CPF_NeedCtorLink)

void UOnlineContentInterface::ClearWriteSaveGameDataComplete(uint8_t LocalUserNum, const struct FScriptDelegate& WriteSaveGameDataCompleteDelegate)
{
	static UFunction* uFnClearWriteSaveGameDataComplete = nullptr;

	if (!uFnClearWriteSaveGameDataComplete)
	{
		uFnClearWriteSaveGameDataComplete = UFunction::FindFunction("Function Engine.OnlineContentInterface.ClearWriteSaveGameDataComplete");
	}

	UOnlineContentInterface_execClearWriteSaveGameDataComplete_Params ClearWriteSaveGameDataComplete_Params;
	memset(&ClearWriteSaveGameDataComplete_Params, 0, sizeof(ClearWriteSaveGameDataComplete_Params));
	memcpy_s(&ClearWriteSaveGameDataComplete_Params.LocalUserNum, sizeof(ClearWriteSaveGameDataComplete_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	memcpy_s(&ClearWriteSaveGameDataComplete_Params.WriteSaveGameDataCompleteDelegate, sizeof(ClearWriteSaveGameDataComplete_Params.WriteSaveGameDataCompleteDelegate), &WriteSaveGameDataCompleteDelegate, sizeof(WriteSaveGameDataCompleteDelegate));

	this->ProcessEvent(uFnClearWriteSaveGameDataComplete, &ClearWriteSaveGameDataComplete_Params, nullptr);
};

// Function Engine.OnlineContentInterface.AddWriteSaveGameDataComplete
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint8_t                        LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         WriteSaveGameDataCompleteDelegate (CPF_Parm | CPF_NeedCtorLink)

void UOnlineContentInterface::AddWriteSaveGameDataComplete(uint8_t LocalUserNum, const struct FScriptDelegate& WriteSaveGameDataCompleteDelegate)
{
	static UFunction* uFnAddWriteSaveGameDataComplete = nullptr;

	if (!uFnAddWriteSaveGameDataComplete)
	{
		uFnAddWriteSaveGameDataComplete = UFunction::FindFunction("Function Engine.OnlineContentInterface.AddWriteSaveGameDataComplete");
	}

	UOnlineContentInterface_execAddWriteSaveGameDataComplete_Params AddWriteSaveGameDataComplete_Params;
	memset(&AddWriteSaveGameDataComplete_Params, 0, sizeof(AddWriteSaveGameDataComplete_Params));
	memcpy_s(&AddWriteSaveGameDataComplete_Params.LocalUserNum, sizeof(AddWriteSaveGameDataComplete_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	memcpy_s(&AddWriteSaveGameDataComplete_Params.WriteSaveGameDataCompleteDelegate, sizeof(AddWriteSaveGameDataComplete_Params.WriteSaveGameDataCompleteDelegate), &WriteSaveGameDataCompleteDelegate, sizeof(WriteSaveGameDataCompleteDelegate));

	this->ProcessEvent(uFnAddWriteSaveGameDataComplete, &AddWriteSaveGameDataComplete_Params, nullptr);
};

// Function Engine.OnlineContentInterface.OnWriteSaveGameDataComplete
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bWasSuccessful                 (CPF_Parm)
// uint8_t                        LocalUserNum                   (CPF_Parm)
// int32_t                        DeviceID                       (CPF_Parm)
// class FString                  FriendlyName                   (CPF_Parm | CPF_NeedCtorLink)
// class FString                  Filename                       (CPF_Parm | CPF_NeedCtorLink)
// class FString                  SaveFileName                   (CPF_Parm | CPF_NeedCtorLink)

void UOnlineContentInterface::OnWriteSaveGameDataComplete(bool bWasSuccessful, uint8_t LocalUserNum, int32_t DeviceID, const class FString& FriendlyName, const class FString& Filename, const class FString& SaveFileName)
{
	static UFunction* uFnOnWriteSaveGameDataComplete = nullptr;

	if (!uFnOnWriteSaveGameDataComplete)
	{
		uFnOnWriteSaveGameDataComplete = UFunction::FindFunction("Function Engine.OnlineContentInterface.OnWriteSaveGameDataComplete");
	}

	UOnlineContentInterface_execOnWriteSaveGameDataComplete_Params OnWriteSaveGameDataComplete_Params;
	memset(&OnWriteSaveGameDataComplete_Params, 0, sizeof(OnWriteSaveGameDataComplete_Params));
	OnWriteSaveGameDataComplete_Params.bWasSuccessful = bWasSuccessful;
	memcpy_s(&OnWriteSaveGameDataComplete_Params.LocalUserNum, sizeof(OnWriteSaveGameDataComplete_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	memcpy_s(&OnWriteSaveGameDataComplete_Params.DeviceID, sizeof(OnWriteSaveGameDataComplete_Params.DeviceID), &DeviceID, sizeof(DeviceID));
	memcpy_s(&OnWriteSaveGameDataComplete_Params.FriendlyName, sizeof(OnWriteSaveGameDataComplete_Params.FriendlyName), &FriendlyName, sizeof(FriendlyName));
	memcpy_s(&OnWriteSaveGameDataComplete_Params.Filename, sizeof(OnWriteSaveGameDataComplete_Params.Filename), &Filename, sizeof(Filename));
	memcpy_s(&OnWriteSaveGameDataComplete_Params.SaveFileName, sizeof(OnWriteSaveGameDataComplete_Params.SaveFileName), &SaveFileName, sizeof(SaveFileName));

	this->ProcessEvent(uFnOnWriteSaveGameDataComplete, &OnWriteSaveGameDataComplete_Params, nullptr);
};

// Function Engine.OnlineContentInterface.WriteSaveGameData
// [0x00420000] (FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint8_t                        LocalUserNum                   (CPF_Parm)
// int32_t                        DeviceID                       (CPF_Parm)
// class FString                  FriendlyName                   (CPF_Parm | CPF_NeedCtorLink)
// class FString                  Filename                       (CPF_Parm | CPF_NeedCtorLink)
// class FString                  SaveFileName                   (CPF_Parm | CPF_NeedCtorLink)
// class TArray<uint8_t>          SaveGameData                   (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

bool UOnlineContentInterface::WriteSaveGameData(uint8_t LocalUserNum, int32_t DeviceID, const class FString& FriendlyName, const class FString& Filename, const class FString& SaveFileName, class TArray<uint8_t>& SaveGameData)
{
	static UFunction* uFnWriteSaveGameData = nullptr;

	if (!uFnWriteSaveGameData)
	{
		uFnWriteSaveGameData = UFunction::FindFunction("Function Engine.OnlineContentInterface.WriteSaveGameData");
	}

	UOnlineContentInterface_execWriteSaveGameData_Params WriteSaveGameData_Params;
	memset(&WriteSaveGameData_Params, 0, sizeof(WriteSaveGameData_Params));
	memcpy_s(&WriteSaveGameData_Params.LocalUserNum, sizeof(WriteSaveGameData_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	memcpy_s(&WriteSaveGameData_Params.DeviceID, sizeof(WriteSaveGameData_Params.DeviceID), &DeviceID, sizeof(DeviceID));
	memcpy_s(&WriteSaveGameData_Params.FriendlyName, sizeof(WriteSaveGameData_Params.FriendlyName), &FriendlyName, sizeof(FriendlyName));
	memcpy_s(&WriteSaveGameData_Params.Filename, sizeof(WriteSaveGameData_Params.Filename), &Filename, sizeof(Filename));
	memcpy_s(&WriteSaveGameData_Params.SaveFileName, sizeof(WriteSaveGameData_Params.SaveFileName), &SaveFileName, sizeof(SaveFileName));
	memcpy_s(&WriteSaveGameData_Params.SaveGameData, sizeof(WriteSaveGameData_Params.SaveGameData), &SaveGameData, sizeof(SaveGameData));

	this->ProcessEvent(uFnWriteSaveGameData, &WriteSaveGameData_Params, nullptr);

	memcpy_s(&SaveGameData, sizeof(SaveGameData), &WriteSaveGameData_Params.SaveGameData, sizeof(WriteSaveGameData_Params.SaveGameData));

	return WriteSaveGameData_Params.ReturnValue;
};

// Function Engine.OnlineContentInterface.ClearReadSaveGameDataComplete
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint8_t                        LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         ReadSaveGameDataCompleteDelegate (CPF_Parm | CPF_NeedCtorLink)

void UOnlineContentInterface::ClearReadSaveGameDataComplete(uint8_t LocalUserNum, const struct FScriptDelegate& ReadSaveGameDataCompleteDelegate)
{
	static UFunction* uFnClearReadSaveGameDataComplete = nullptr;

	if (!uFnClearReadSaveGameDataComplete)
	{
		uFnClearReadSaveGameDataComplete = UFunction::FindFunction("Function Engine.OnlineContentInterface.ClearReadSaveGameDataComplete");
	}

	UOnlineContentInterface_execClearReadSaveGameDataComplete_Params ClearReadSaveGameDataComplete_Params;
	memset(&ClearReadSaveGameDataComplete_Params, 0, sizeof(ClearReadSaveGameDataComplete_Params));
	memcpy_s(&ClearReadSaveGameDataComplete_Params.LocalUserNum, sizeof(ClearReadSaveGameDataComplete_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	memcpy_s(&ClearReadSaveGameDataComplete_Params.ReadSaveGameDataCompleteDelegate, sizeof(ClearReadSaveGameDataComplete_Params.ReadSaveGameDataCompleteDelegate), &ReadSaveGameDataCompleteDelegate, sizeof(ReadSaveGameDataCompleteDelegate));

	this->ProcessEvent(uFnClearReadSaveGameDataComplete, &ClearReadSaveGameDataComplete_Params, nullptr);
};

// Function Engine.OnlineContentInterface.AddReadSaveGameDataComplete
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint8_t                        LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         ReadSaveGameDataCompleteDelegate (CPF_Parm | CPF_NeedCtorLink)

void UOnlineContentInterface::AddReadSaveGameDataComplete(uint8_t LocalUserNum, const struct FScriptDelegate& ReadSaveGameDataCompleteDelegate)
{
	static UFunction* uFnAddReadSaveGameDataComplete = nullptr;

	if (!uFnAddReadSaveGameDataComplete)
	{
		uFnAddReadSaveGameDataComplete = UFunction::FindFunction("Function Engine.OnlineContentInterface.AddReadSaveGameDataComplete");
	}

	UOnlineContentInterface_execAddReadSaveGameDataComplete_Params AddReadSaveGameDataComplete_Params;
	memset(&AddReadSaveGameDataComplete_Params, 0, sizeof(AddReadSaveGameDataComplete_Params));
	memcpy_s(&AddReadSaveGameDataComplete_Params.LocalUserNum, sizeof(AddReadSaveGameDataComplete_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	memcpy_s(&AddReadSaveGameDataComplete_Params.ReadSaveGameDataCompleteDelegate, sizeof(AddReadSaveGameDataComplete_Params.ReadSaveGameDataCompleteDelegate), &ReadSaveGameDataCompleteDelegate, sizeof(ReadSaveGameDataCompleteDelegate));

	this->ProcessEvent(uFnAddReadSaveGameDataComplete, &AddReadSaveGameDataComplete_Params, nullptr);
};

// Function Engine.OnlineContentInterface.OnReadSaveGameDataComplete
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bWasSuccessful                 (CPF_Parm)
// uint8_t                        LocalUserNum                   (CPF_Parm)
// int32_t                        DeviceID                       (CPF_Parm)
// class FString                  FriendlyName                   (CPF_Parm | CPF_NeedCtorLink)
// class FString                  Filename                       (CPF_Parm | CPF_NeedCtorLink)
// class FString                  SaveFileName                   (CPF_Parm | CPF_NeedCtorLink)

void UOnlineContentInterface::OnReadSaveGameDataComplete(bool bWasSuccessful, uint8_t LocalUserNum, int32_t DeviceID, const class FString& FriendlyName, const class FString& Filename, const class FString& SaveFileName)
{
	static UFunction* uFnOnReadSaveGameDataComplete = nullptr;

	if (!uFnOnReadSaveGameDataComplete)
	{
		uFnOnReadSaveGameDataComplete = UFunction::FindFunction("Function Engine.OnlineContentInterface.OnReadSaveGameDataComplete");
	}

	UOnlineContentInterface_execOnReadSaveGameDataComplete_Params OnReadSaveGameDataComplete_Params;
	memset(&OnReadSaveGameDataComplete_Params, 0, sizeof(OnReadSaveGameDataComplete_Params));
	OnReadSaveGameDataComplete_Params.bWasSuccessful = bWasSuccessful;
	memcpy_s(&OnReadSaveGameDataComplete_Params.LocalUserNum, sizeof(OnReadSaveGameDataComplete_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	memcpy_s(&OnReadSaveGameDataComplete_Params.DeviceID, sizeof(OnReadSaveGameDataComplete_Params.DeviceID), &DeviceID, sizeof(DeviceID));
	memcpy_s(&OnReadSaveGameDataComplete_Params.FriendlyName, sizeof(OnReadSaveGameDataComplete_Params.FriendlyName), &FriendlyName, sizeof(FriendlyName));
	memcpy_s(&OnReadSaveGameDataComplete_Params.Filename, sizeof(OnReadSaveGameDataComplete_Params.Filename), &Filename, sizeof(Filename));
	memcpy_s(&OnReadSaveGameDataComplete_Params.SaveFileName, sizeof(OnReadSaveGameDataComplete_Params.SaveFileName), &SaveFileName, sizeof(SaveFileName));

	this->ProcessEvent(uFnOnReadSaveGameDataComplete, &OnReadSaveGameDataComplete_Params, nullptr);
};

// Function Engine.OnlineContentInterface.GetSaveGameData
// [0x00420000] (FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint8_t                        LocalUserNum                   (CPF_Parm)
// int32_t                        DeviceID                       (CPF_Parm)
// class FString                  FriendlyName                   (CPF_Parm | CPF_NeedCtorLink)
// class FString                  Filename                       (CPF_Parm | CPF_NeedCtorLink)
// class FString                  SaveFileName                   (CPF_Parm | CPF_NeedCtorLink)
// uint8_t                        bIsValid                       (CPF_Parm | CPF_OutParm)
// class TArray<uint8_t>          SaveGameData                   (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

bool UOnlineContentInterface::GetSaveGameData(uint8_t LocalUserNum, int32_t DeviceID, const class FString& FriendlyName, const class FString& Filename, const class FString& SaveFileName, uint8_t& bIsValid, class TArray<uint8_t>& SaveGameData)
{
	static UFunction* uFnGetSaveGameData = nullptr;

	if (!uFnGetSaveGameData)
	{
		uFnGetSaveGameData = UFunction::FindFunction("Function Engine.OnlineContentInterface.GetSaveGameData");
	}

	UOnlineContentInterface_execGetSaveGameData_Params GetSaveGameData_Params;
	memset(&GetSaveGameData_Params, 0, sizeof(GetSaveGameData_Params));
	memcpy_s(&GetSaveGameData_Params.LocalUserNum, sizeof(GetSaveGameData_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	memcpy_s(&GetSaveGameData_Params.DeviceID, sizeof(GetSaveGameData_Params.DeviceID), &DeviceID, sizeof(DeviceID));
	memcpy_s(&GetSaveGameData_Params.FriendlyName, sizeof(GetSaveGameData_Params.FriendlyName), &FriendlyName, sizeof(FriendlyName));
	memcpy_s(&GetSaveGameData_Params.Filename, sizeof(GetSaveGameData_Params.Filename), &Filename, sizeof(Filename));
	memcpy_s(&GetSaveGameData_Params.SaveFileName, sizeof(GetSaveGameData_Params.SaveFileName), &SaveFileName, sizeof(SaveFileName));
	memcpy_s(&GetSaveGameData_Params.bIsValid, sizeof(GetSaveGameData_Params.bIsValid), &bIsValid, sizeof(bIsValid));
	memcpy_s(&GetSaveGameData_Params.SaveGameData, sizeof(GetSaveGameData_Params.SaveGameData), &SaveGameData, sizeof(SaveGameData));

	this->ProcessEvent(uFnGetSaveGameData, &GetSaveGameData_Params, nullptr);

	memcpy_s(&bIsValid, sizeof(bIsValid), &GetSaveGameData_Params.bIsValid, sizeof(GetSaveGameData_Params.bIsValid));
	memcpy_s(&SaveGameData, sizeof(SaveGameData), &GetSaveGameData_Params.SaveGameData, sizeof(GetSaveGameData_Params.SaveGameData));

	return GetSaveGameData_Params.ReturnValue;
};

// Function Engine.OnlineContentInterface.ReadSaveGameData
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint8_t                        LocalUserNum                   (CPF_Parm)
// int32_t                        DeviceID                       (CPF_Parm)
// class FString                  FriendlyName                   (CPF_Parm | CPF_NeedCtorLink)
// class FString                  Filename                       (CPF_Parm | CPF_NeedCtorLink)
// class FString                  SaveFileName                   (CPF_Parm | CPF_NeedCtorLink)

bool UOnlineContentInterface::ReadSaveGameData(uint8_t LocalUserNum, int32_t DeviceID, const class FString& FriendlyName, const class FString& Filename, const class FString& SaveFileName)
{
	static UFunction* uFnReadSaveGameData = nullptr;

	if (!uFnReadSaveGameData)
	{
		uFnReadSaveGameData = UFunction::FindFunction("Function Engine.OnlineContentInterface.ReadSaveGameData");
	}

	UOnlineContentInterface_execReadSaveGameData_Params ReadSaveGameData_Params;
	memset(&ReadSaveGameData_Params, 0, sizeof(ReadSaveGameData_Params));
	memcpy_s(&ReadSaveGameData_Params.LocalUserNum, sizeof(ReadSaveGameData_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	memcpy_s(&ReadSaveGameData_Params.DeviceID, sizeof(ReadSaveGameData_Params.DeviceID), &DeviceID, sizeof(DeviceID));
	memcpy_s(&ReadSaveGameData_Params.FriendlyName, sizeof(ReadSaveGameData_Params.FriendlyName), &FriendlyName, sizeof(FriendlyName));
	memcpy_s(&ReadSaveGameData_Params.Filename, sizeof(ReadSaveGameData_Params.Filename), &Filename, sizeof(Filename));
	memcpy_s(&ReadSaveGameData_Params.SaveFileName, sizeof(ReadSaveGameData_Params.SaveFileName), &SaveFileName, sizeof(SaveFileName));

	this->ProcessEvent(uFnReadSaveGameData, &ReadSaveGameData_Params, nullptr);

	return ReadSaveGameData_Params.ReturnValue;
};

// Function Engine.OnlineContentInterface.GetAvailableDownloadCounts
// [0x00420000] (FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// uint8_t                        LocalUserNum                   (CPF_Parm)
// int32_t                        NewDownloads                   (CPF_Parm | CPF_OutParm)
// int32_t                        TotalDownloads                 (CPF_Parm | CPF_OutParm)

void UOnlineContentInterface::GetAvailableDownloadCounts(uint8_t LocalUserNum, int32_t& NewDownloads, int32_t& TotalDownloads)
{
	static UFunction* uFnGetAvailableDownloadCounts = nullptr;

	if (!uFnGetAvailableDownloadCounts)
	{
		uFnGetAvailableDownloadCounts = UFunction::FindFunction("Function Engine.OnlineContentInterface.GetAvailableDownloadCounts");
	}

	UOnlineContentInterface_execGetAvailableDownloadCounts_Params GetAvailableDownloadCounts_Params;
	memset(&GetAvailableDownloadCounts_Params, 0, sizeof(GetAvailableDownloadCounts_Params));
	memcpy_s(&GetAvailableDownloadCounts_Params.LocalUserNum, sizeof(GetAvailableDownloadCounts_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	memcpy_s(&GetAvailableDownloadCounts_Params.NewDownloads, sizeof(GetAvailableDownloadCounts_Params.NewDownloads), &NewDownloads, sizeof(NewDownloads));
	memcpy_s(&GetAvailableDownloadCounts_Params.TotalDownloads, sizeof(GetAvailableDownloadCounts_Params.TotalDownloads), &TotalDownloads, sizeof(TotalDownloads));

	this->ProcessEvent(uFnGetAvailableDownloadCounts, &GetAvailableDownloadCounts_Params, nullptr);

	memcpy_s(&NewDownloads, sizeof(NewDownloads), &GetAvailableDownloadCounts_Params.NewDownloads, sizeof(GetAvailableDownloadCounts_Params.NewDownloads));
	memcpy_s(&TotalDownloads, sizeof(TotalDownloads), &GetAvailableDownloadCounts_Params.TotalDownloads, sizeof(GetAvailableDownloadCounts_Params.TotalDownloads));
};

// Function Engine.OnlineContentInterface.ClearQueryAvailableDownloadsComplete
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint8_t                        LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         QueryDownloadsDelegate         (CPF_Parm | CPF_NeedCtorLink)

void UOnlineContentInterface::ClearQueryAvailableDownloadsComplete(uint8_t LocalUserNum, const struct FScriptDelegate& QueryDownloadsDelegate)
{
	static UFunction* uFnClearQueryAvailableDownloadsComplete = nullptr;

	if (!uFnClearQueryAvailableDownloadsComplete)
	{
		uFnClearQueryAvailableDownloadsComplete = UFunction::FindFunction("Function Engine.OnlineContentInterface.ClearQueryAvailableDownloadsComplete");
	}

	UOnlineContentInterface_execClearQueryAvailableDownloadsComplete_Params ClearQueryAvailableDownloadsComplete_Params;
	memset(&ClearQueryAvailableDownloadsComplete_Params, 0, sizeof(ClearQueryAvailableDownloadsComplete_Params));
	memcpy_s(&ClearQueryAvailableDownloadsComplete_Params.LocalUserNum, sizeof(ClearQueryAvailableDownloadsComplete_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	memcpy_s(&ClearQueryAvailableDownloadsComplete_Params.QueryDownloadsDelegate, sizeof(ClearQueryAvailableDownloadsComplete_Params.QueryDownloadsDelegate), &QueryDownloadsDelegate, sizeof(QueryDownloadsDelegate));

	this->ProcessEvent(uFnClearQueryAvailableDownloadsComplete, &ClearQueryAvailableDownloadsComplete_Params, nullptr);
};

// Function Engine.OnlineContentInterface.AddQueryAvailableDownloadsComplete
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint8_t                        LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         QueryDownloadsDelegate         (CPF_Parm | CPF_NeedCtorLink)

void UOnlineContentInterface::AddQueryAvailableDownloadsComplete(uint8_t LocalUserNum, const struct FScriptDelegate& QueryDownloadsDelegate)
{
	static UFunction* uFnAddQueryAvailableDownloadsComplete = nullptr;

	if (!uFnAddQueryAvailableDownloadsComplete)
	{
		uFnAddQueryAvailableDownloadsComplete = UFunction::FindFunction("Function Engine.OnlineContentInterface.AddQueryAvailableDownloadsComplete");
	}

	UOnlineContentInterface_execAddQueryAvailableDownloadsComplete_Params AddQueryAvailableDownloadsComplete_Params;
	memset(&AddQueryAvailableDownloadsComplete_Params, 0, sizeof(AddQueryAvailableDownloadsComplete_Params));
	memcpy_s(&AddQueryAvailableDownloadsComplete_Params.LocalUserNum, sizeof(AddQueryAvailableDownloadsComplete_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	memcpy_s(&AddQueryAvailableDownloadsComplete_Params.QueryDownloadsDelegate, sizeof(AddQueryAvailableDownloadsComplete_Params.QueryDownloadsDelegate), &QueryDownloadsDelegate, sizeof(QueryDownloadsDelegate));

	this->ProcessEvent(uFnAddQueryAvailableDownloadsComplete, &AddQueryAvailableDownloadsComplete_Params, nullptr);
};

// Function Engine.OnlineContentInterface.OnQueryAvailableDownloadsComplete
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bWasSuccessful                 (CPF_Parm)

void UOnlineContentInterface::OnQueryAvailableDownloadsComplete(bool bWasSuccessful)
{
	static UFunction* uFnOnQueryAvailableDownloadsComplete = nullptr;

	if (!uFnOnQueryAvailableDownloadsComplete)
	{
		uFnOnQueryAvailableDownloadsComplete = UFunction::FindFunction("Function Engine.OnlineContentInterface.OnQueryAvailableDownloadsComplete");
	}

	UOnlineContentInterface_execOnQueryAvailableDownloadsComplete_Params OnQueryAvailableDownloadsComplete_Params;
	memset(&OnQueryAvailableDownloadsComplete_Params, 0, sizeof(OnQueryAvailableDownloadsComplete_Params));
	OnQueryAvailableDownloadsComplete_Params.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent(uFnOnQueryAvailableDownloadsComplete, &OnQueryAvailableDownloadsComplete_Params, nullptr);
};

// Function Engine.OnlineContentInterface.QueryAvailableDownloads
// [0x00024000] (FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint8_t                        LocalUserNum                   (CPF_Parm)
// int32_t                        CategoryMask                   (CPF_OptionalParm | CPF_Parm)

bool UOnlineContentInterface::QueryAvailableDownloads(uint8_t LocalUserNum, int32_t CategoryMask)
{
	static UFunction* uFnQueryAvailableDownloads = nullptr;

	if (!uFnQueryAvailableDownloads)
	{
		uFnQueryAvailableDownloads = UFunction::FindFunction("Function Engine.OnlineContentInterface.QueryAvailableDownloads");
	}

	UOnlineContentInterface_execQueryAvailableDownloads_Params QueryAvailableDownloads_Params;
	memset(&QueryAvailableDownloads_Params, 0, sizeof(QueryAvailableDownloads_Params));
	memcpy_s(&QueryAvailableDownloads_Params.LocalUserNum, sizeof(QueryAvailableDownloads_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	memcpy_s(&QueryAvailableDownloads_Params.CategoryMask, sizeof(QueryAvailableDownloads_Params.CategoryMask), &CategoryMask, sizeof(CategoryMask));

	this->ProcessEvent(uFnQueryAvailableDownloads, &QueryAvailableDownloads_Params, nullptr);

	return QueryAvailableDownloads_Params.ReturnValue;
};

// Function Engine.OnlineContentInterface.ClearCrossTitleSaveGames
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint8_t                        LocalUserNum                   (CPF_Parm)

bool UOnlineContentInterface::ClearCrossTitleSaveGames(uint8_t LocalUserNum)
{
	static UFunction* uFnClearCrossTitleSaveGames = nullptr;

	if (!uFnClearCrossTitleSaveGames)
	{
		uFnClearCrossTitleSaveGames = UFunction::FindFunction("Function Engine.OnlineContentInterface.ClearCrossTitleSaveGames");
	}

	UOnlineContentInterface_execClearCrossTitleSaveGames_Params ClearCrossTitleSaveGames_Params;
	memset(&ClearCrossTitleSaveGames_Params, 0, sizeof(ClearCrossTitleSaveGames_Params));
	memcpy_s(&ClearCrossTitleSaveGames_Params.LocalUserNum, sizeof(ClearCrossTitleSaveGames_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));

	this->ProcessEvent(uFnClearCrossTitleSaveGames, &ClearCrossTitleSaveGames_Params, nullptr);

	return ClearCrossTitleSaveGames_Params.ReturnValue;
};

// Function Engine.OnlineContentInterface.ClearReadCrossTitleSaveGameDataComplete
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint8_t                        LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         ReadSaveGameDataCompleteDelegate (CPF_Parm | CPF_NeedCtorLink)

void UOnlineContentInterface::ClearReadCrossTitleSaveGameDataComplete(uint8_t LocalUserNum, const struct FScriptDelegate& ReadSaveGameDataCompleteDelegate)
{
	static UFunction* uFnClearReadCrossTitleSaveGameDataComplete = nullptr;

	if (!uFnClearReadCrossTitleSaveGameDataComplete)
	{
		uFnClearReadCrossTitleSaveGameDataComplete = UFunction::FindFunction("Function Engine.OnlineContentInterface.ClearReadCrossTitleSaveGameDataComplete");
	}

	UOnlineContentInterface_execClearReadCrossTitleSaveGameDataComplete_Params ClearReadCrossTitleSaveGameDataComplete_Params;
	memset(&ClearReadCrossTitleSaveGameDataComplete_Params, 0, sizeof(ClearReadCrossTitleSaveGameDataComplete_Params));
	memcpy_s(&ClearReadCrossTitleSaveGameDataComplete_Params.LocalUserNum, sizeof(ClearReadCrossTitleSaveGameDataComplete_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	memcpy_s(&ClearReadCrossTitleSaveGameDataComplete_Params.ReadSaveGameDataCompleteDelegate, sizeof(ClearReadCrossTitleSaveGameDataComplete_Params.ReadSaveGameDataCompleteDelegate), &ReadSaveGameDataCompleteDelegate, sizeof(ReadSaveGameDataCompleteDelegate));

	this->ProcessEvent(uFnClearReadCrossTitleSaveGameDataComplete, &ClearReadCrossTitleSaveGameDataComplete_Params, nullptr);
};

// Function Engine.OnlineContentInterface.AddReadCrossTitleSaveGameDataComplete
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint8_t                        LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         ReadSaveGameDataCompleteDelegate (CPF_Parm | CPF_NeedCtorLink)

void UOnlineContentInterface::AddReadCrossTitleSaveGameDataComplete(uint8_t LocalUserNum, const struct FScriptDelegate& ReadSaveGameDataCompleteDelegate)
{
	static UFunction* uFnAddReadCrossTitleSaveGameDataComplete = nullptr;

	if (!uFnAddReadCrossTitleSaveGameDataComplete)
	{
		uFnAddReadCrossTitleSaveGameDataComplete = UFunction::FindFunction("Function Engine.OnlineContentInterface.AddReadCrossTitleSaveGameDataComplete");
	}

	UOnlineContentInterface_execAddReadCrossTitleSaveGameDataComplete_Params AddReadCrossTitleSaveGameDataComplete_Params;
	memset(&AddReadCrossTitleSaveGameDataComplete_Params, 0, sizeof(AddReadCrossTitleSaveGameDataComplete_Params));
	memcpy_s(&AddReadCrossTitleSaveGameDataComplete_Params.LocalUserNum, sizeof(AddReadCrossTitleSaveGameDataComplete_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	memcpy_s(&AddReadCrossTitleSaveGameDataComplete_Params.ReadSaveGameDataCompleteDelegate, sizeof(AddReadCrossTitleSaveGameDataComplete_Params.ReadSaveGameDataCompleteDelegate), &ReadSaveGameDataCompleteDelegate, sizeof(ReadSaveGameDataCompleteDelegate));

	this->ProcessEvent(uFnAddReadCrossTitleSaveGameDataComplete, &AddReadCrossTitleSaveGameDataComplete_Params, nullptr);
};

// Function Engine.OnlineContentInterface.OnReadCrossTitleSaveGameDataComplete
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bWasSuccessful                 (CPF_Parm)
// uint8_t                        LocalUserNum                   (CPF_Parm)
// int32_t                        DeviceID                       (CPF_Parm)
// int32_t                        TitleId                        (CPF_Parm)
// class FString                  FriendlyName                   (CPF_Parm | CPF_NeedCtorLink)
// class FString                  Filename                       (CPF_Parm | CPF_NeedCtorLink)
// class FString                  SaveFileName                   (CPF_Parm | CPF_NeedCtorLink)

void UOnlineContentInterface::OnReadCrossTitleSaveGameDataComplete(bool bWasSuccessful, uint8_t LocalUserNum, int32_t DeviceID, int32_t TitleId, const class FString& FriendlyName, const class FString& Filename, const class FString& SaveFileName)
{
	static UFunction* uFnOnReadCrossTitleSaveGameDataComplete = nullptr;

	if (!uFnOnReadCrossTitleSaveGameDataComplete)
	{
		uFnOnReadCrossTitleSaveGameDataComplete = UFunction::FindFunction("Function Engine.OnlineContentInterface.OnReadCrossTitleSaveGameDataComplete");
	}

	UOnlineContentInterface_execOnReadCrossTitleSaveGameDataComplete_Params OnReadCrossTitleSaveGameDataComplete_Params;
	memset(&OnReadCrossTitleSaveGameDataComplete_Params, 0, sizeof(OnReadCrossTitleSaveGameDataComplete_Params));
	OnReadCrossTitleSaveGameDataComplete_Params.bWasSuccessful = bWasSuccessful;
	memcpy_s(&OnReadCrossTitleSaveGameDataComplete_Params.LocalUserNum, sizeof(OnReadCrossTitleSaveGameDataComplete_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	memcpy_s(&OnReadCrossTitleSaveGameDataComplete_Params.DeviceID, sizeof(OnReadCrossTitleSaveGameDataComplete_Params.DeviceID), &DeviceID, sizeof(DeviceID));
	memcpy_s(&OnReadCrossTitleSaveGameDataComplete_Params.TitleId, sizeof(OnReadCrossTitleSaveGameDataComplete_Params.TitleId), &TitleId, sizeof(TitleId));
	memcpy_s(&OnReadCrossTitleSaveGameDataComplete_Params.FriendlyName, sizeof(OnReadCrossTitleSaveGameDataComplete_Params.FriendlyName), &FriendlyName, sizeof(FriendlyName));
	memcpy_s(&OnReadCrossTitleSaveGameDataComplete_Params.Filename, sizeof(OnReadCrossTitleSaveGameDataComplete_Params.Filename), &Filename, sizeof(Filename));
	memcpy_s(&OnReadCrossTitleSaveGameDataComplete_Params.SaveFileName, sizeof(OnReadCrossTitleSaveGameDataComplete_Params.SaveFileName), &SaveFileName, sizeof(SaveFileName));

	this->ProcessEvent(uFnOnReadCrossTitleSaveGameDataComplete, &OnReadCrossTitleSaveGameDataComplete_Params, nullptr);
};

// Function Engine.OnlineContentInterface.GetCrossTitleSaveGameData
// [0x00420000] (FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint8_t                        LocalUserNum                   (CPF_Parm)
// int32_t                        DeviceID                       (CPF_Parm)
// int32_t                        TitleId                        (CPF_Parm)
// class FString                  FriendlyName                   (CPF_Parm | CPF_NeedCtorLink)
// class FString                  Filename                       (CPF_Parm | CPF_NeedCtorLink)
// class FString                  SaveFileName                   (CPF_Parm | CPF_NeedCtorLink)
// uint8_t                        bIsValid                       (CPF_Parm | CPF_OutParm)
// class TArray<uint8_t>          SaveGameData                   (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

bool UOnlineContentInterface::GetCrossTitleSaveGameData(uint8_t LocalUserNum, int32_t DeviceID, int32_t TitleId, const class FString& FriendlyName, const class FString& Filename, const class FString& SaveFileName, uint8_t& bIsValid, class TArray<uint8_t>& SaveGameData)
{
	static UFunction* uFnGetCrossTitleSaveGameData = nullptr;

	if (!uFnGetCrossTitleSaveGameData)
	{
		uFnGetCrossTitleSaveGameData = UFunction::FindFunction("Function Engine.OnlineContentInterface.GetCrossTitleSaveGameData");
	}

	UOnlineContentInterface_execGetCrossTitleSaveGameData_Params GetCrossTitleSaveGameData_Params;
	memset(&GetCrossTitleSaveGameData_Params, 0, sizeof(GetCrossTitleSaveGameData_Params));
	memcpy_s(&GetCrossTitleSaveGameData_Params.LocalUserNum, sizeof(GetCrossTitleSaveGameData_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	memcpy_s(&GetCrossTitleSaveGameData_Params.DeviceID, sizeof(GetCrossTitleSaveGameData_Params.DeviceID), &DeviceID, sizeof(DeviceID));
	memcpy_s(&GetCrossTitleSaveGameData_Params.TitleId, sizeof(GetCrossTitleSaveGameData_Params.TitleId), &TitleId, sizeof(TitleId));
	memcpy_s(&GetCrossTitleSaveGameData_Params.FriendlyName, sizeof(GetCrossTitleSaveGameData_Params.FriendlyName), &FriendlyName, sizeof(FriendlyName));
	memcpy_s(&GetCrossTitleSaveGameData_Params.Filename, sizeof(GetCrossTitleSaveGameData_Params.Filename), &Filename, sizeof(Filename));
	memcpy_s(&GetCrossTitleSaveGameData_Params.SaveFileName, sizeof(GetCrossTitleSaveGameData_Params.SaveFileName), &SaveFileName, sizeof(SaveFileName));
	memcpy_s(&GetCrossTitleSaveGameData_Params.bIsValid, sizeof(GetCrossTitleSaveGameData_Params.bIsValid), &bIsValid, sizeof(bIsValid));
	memcpy_s(&GetCrossTitleSaveGameData_Params.SaveGameData, sizeof(GetCrossTitleSaveGameData_Params.SaveGameData), &SaveGameData, sizeof(SaveGameData));

	this->ProcessEvent(uFnGetCrossTitleSaveGameData, &GetCrossTitleSaveGameData_Params, nullptr);

	memcpy_s(&bIsValid, sizeof(bIsValid), &GetCrossTitleSaveGameData_Params.bIsValid, sizeof(GetCrossTitleSaveGameData_Params.bIsValid));
	memcpy_s(&SaveGameData, sizeof(SaveGameData), &GetCrossTitleSaveGameData_Params.SaveGameData, sizeof(GetCrossTitleSaveGameData_Params.SaveGameData));

	return GetCrossTitleSaveGameData_Params.ReturnValue;
};

// Function Engine.OnlineContentInterface.ReadCrossTitleSaveGameData
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint8_t                        LocalUserNum                   (CPF_Parm)
// int32_t                        DeviceID                       (CPF_Parm)
// int32_t                        TitleId                        (CPF_Parm)
// class FString                  FriendlyName                   (CPF_Parm | CPF_NeedCtorLink)
// class FString                  Filename                       (CPF_Parm | CPF_NeedCtorLink)
// class FString                  SaveFileName                   (CPF_Parm | CPF_NeedCtorLink)

bool UOnlineContentInterface::ReadCrossTitleSaveGameData(uint8_t LocalUserNum, int32_t DeviceID, int32_t TitleId, const class FString& FriendlyName, const class FString& Filename, const class FString& SaveFileName)
{
	static UFunction* uFnReadCrossTitleSaveGameData = nullptr;

	if (!uFnReadCrossTitleSaveGameData)
	{
		uFnReadCrossTitleSaveGameData = UFunction::FindFunction("Function Engine.OnlineContentInterface.ReadCrossTitleSaveGameData");
	}

	UOnlineContentInterface_execReadCrossTitleSaveGameData_Params ReadCrossTitleSaveGameData_Params;
	memset(&ReadCrossTitleSaveGameData_Params, 0, sizeof(ReadCrossTitleSaveGameData_Params));
	memcpy_s(&ReadCrossTitleSaveGameData_Params.LocalUserNum, sizeof(ReadCrossTitleSaveGameData_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	memcpy_s(&ReadCrossTitleSaveGameData_Params.DeviceID, sizeof(ReadCrossTitleSaveGameData_Params.DeviceID), &DeviceID, sizeof(DeviceID));
	memcpy_s(&ReadCrossTitleSaveGameData_Params.TitleId, sizeof(ReadCrossTitleSaveGameData_Params.TitleId), &TitleId, sizeof(TitleId));
	memcpy_s(&ReadCrossTitleSaveGameData_Params.FriendlyName, sizeof(ReadCrossTitleSaveGameData_Params.FriendlyName), &FriendlyName, sizeof(FriendlyName));
	memcpy_s(&ReadCrossTitleSaveGameData_Params.Filename, sizeof(ReadCrossTitleSaveGameData_Params.Filename), &Filename, sizeof(Filename));
	memcpy_s(&ReadCrossTitleSaveGameData_Params.SaveFileName, sizeof(ReadCrossTitleSaveGameData_Params.SaveFileName), &SaveFileName, sizeof(SaveFileName));

	this->ProcessEvent(uFnReadCrossTitleSaveGameData, &ReadCrossTitleSaveGameData_Params, nullptr);

	return ReadCrossTitleSaveGameData_Params.ReturnValue;
};

// Function Engine.OnlineContentInterface.ClearReadCrossTitleContentCompleteDelegate
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint8_t                        LocalUserNum                   (CPF_Parm)
// EOnlineContentType             ContentType                    (CPF_Parm)
// struct FScriptDelegate         ReadContentCompleteDelegate    (CPF_Parm | CPF_NeedCtorLink)

void UOnlineContentInterface::ClearReadCrossTitleContentCompleteDelegate(uint8_t LocalUserNum, EOnlineContentType ContentType, const struct FScriptDelegate& ReadContentCompleteDelegate)
{
	static UFunction* uFnClearReadCrossTitleContentCompleteDelegate = nullptr;

	if (!uFnClearReadCrossTitleContentCompleteDelegate)
	{
		uFnClearReadCrossTitleContentCompleteDelegate = UFunction::FindFunction("Function Engine.OnlineContentInterface.ClearReadCrossTitleContentCompleteDelegate");
	}

	UOnlineContentInterface_execClearReadCrossTitleContentCompleteDelegate_Params ClearReadCrossTitleContentCompleteDelegate_Params;
	memset(&ClearReadCrossTitleContentCompleteDelegate_Params, 0, sizeof(ClearReadCrossTitleContentCompleteDelegate_Params));
	memcpy_s(&ClearReadCrossTitleContentCompleteDelegate_Params.LocalUserNum, sizeof(ClearReadCrossTitleContentCompleteDelegate_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	memcpy_s(&ClearReadCrossTitleContentCompleteDelegate_Params.ContentType, sizeof(ClearReadCrossTitleContentCompleteDelegate_Params.ContentType), &ContentType, sizeof(ContentType));
	memcpy_s(&ClearReadCrossTitleContentCompleteDelegate_Params.ReadContentCompleteDelegate, sizeof(ClearReadCrossTitleContentCompleteDelegate_Params.ReadContentCompleteDelegate), &ReadContentCompleteDelegate, sizeof(ReadContentCompleteDelegate));

	this->ProcessEvent(uFnClearReadCrossTitleContentCompleteDelegate, &ClearReadCrossTitleContentCompleteDelegate_Params, nullptr);
};

// Function Engine.OnlineContentInterface.AddReadCrossTitleContentCompleteDelegate
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint8_t                        LocalUserNum                   (CPF_Parm)
// EOnlineContentType             ContentType                    (CPF_Parm)
// struct FScriptDelegate         ReadContentCompleteDelegate    (CPF_Parm | CPF_NeedCtorLink)

void UOnlineContentInterface::AddReadCrossTitleContentCompleteDelegate(uint8_t LocalUserNum, EOnlineContentType ContentType, const struct FScriptDelegate& ReadContentCompleteDelegate)
{
	static UFunction* uFnAddReadCrossTitleContentCompleteDelegate = nullptr;

	if (!uFnAddReadCrossTitleContentCompleteDelegate)
	{
		uFnAddReadCrossTitleContentCompleteDelegate = UFunction::FindFunction("Function Engine.OnlineContentInterface.AddReadCrossTitleContentCompleteDelegate");
	}

	UOnlineContentInterface_execAddReadCrossTitleContentCompleteDelegate_Params AddReadCrossTitleContentCompleteDelegate_Params;
	memset(&AddReadCrossTitleContentCompleteDelegate_Params, 0, sizeof(AddReadCrossTitleContentCompleteDelegate_Params));
	memcpy_s(&AddReadCrossTitleContentCompleteDelegate_Params.LocalUserNum, sizeof(AddReadCrossTitleContentCompleteDelegate_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	memcpy_s(&AddReadCrossTitleContentCompleteDelegate_Params.ContentType, sizeof(AddReadCrossTitleContentCompleteDelegate_Params.ContentType), &ContentType, sizeof(ContentType));
	memcpy_s(&AddReadCrossTitleContentCompleteDelegate_Params.ReadContentCompleteDelegate, sizeof(AddReadCrossTitleContentCompleteDelegate_Params.ReadContentCompleteDelegate), &ReadContentCompleteDelegate, sizeof(ReadContentCompleteDelegate));

	this->ProcessEvent(uFnAddReadCrossTitleContentCompleteDelegate, &AddReadCrossTitleContentCompleteDelegate_Params, nullptr);
};

// Function Engine.OnlineContentInterface.OnReadCrossTitleContentComplete
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bWasSuccessful                 (CPF_Parm)

void UOnlineContentInterface::OnReadCrossTitleContentComplete(bool bWasSuccessful)
{
	static UFunction* uFnOnReadCrossTitleContentComplete = nullptr;

	if (!uFnOnReadCrossTitleContentComplete)
	{
		uFnOnReadCrossTitleContentComplete = UFunction::FindFunction("Function Engine.OnlineContentInterface.OnReadCrossTitleContentComplete");
	}

	UOnlineContentInterface_execOnReadCrossTitleContentComplete_Params OnReadCrossTitleContentComplete_Params;
	memset(&OnReadCrossTitleContentComplete_Params, 0, sizeof(OnReadCrossTitleContentComplete_Params));
	OnReadCrossTitleContentComplete_Params.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent(uFnOnReadCrossTitleContentComplete, &OnReadCrossTitleContentComplete_Params, nullptr);
};

// Function Engine.OnlineContentInterface.GetCrossTitleContentList
// [0x00420000] (FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// EOnlineEnumerationReadState    ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint8_t                        LocalUserNum                   (CPF_Parm)
// EOnlineContentType             ContentType                    (CPF_Parm)
// class TArray<struct FOnlineCrossTitleContent> ContentList                    (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

EOnlineEnumerationReadState UOnlineContentInterface::GetCrossTitleContentList(uint8_t LocalUserNum, EOnlineContentType ContentType, class TArray<struct FOnlineCrossTitleContent>& ContentList)
{
	static UFunction* uFnGetCrossTitleContentList = nullptr;

	if (!uFnGetCrossTitleContentList)
	{
		uFnGetCrossTitleContentList = UFunction::FindFunction("Function Engine.OnlineContentInterface.GetCrossTitleContentList");
	}

	UOnlineContentInterface_execGetCrossTitleContentList_Params GetCrossTitleContentList_Params;
	memset(&GetCrossTitleContentList_Params, 0, sizeof(GetCrossTitleContentList_Params));
	memcpy_s(&GetCrossTitleContentList_Params.LocalUserNum, sizeof(GetCrossTitleContentList_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	memcpy_s(&GetCrossTitleContentList_Params.ContentType, sizeof(GetCrossTitleContentList_Params.ContentType), &ContentType, sizeof(ContentType));
	memcpy_s(&GetCrossTitleContentList_Params.ContentList, sizeof(GetCrossTitleContentList_Params.ContentList), &ContentList, sizeof(ContentList));

	this->ProcessEvent(uFnGetCrossTitleContentList, &GetCrossTitleContentList_Params, nullptr);

	memcpy_s(&ContentList, sizeof(ContentList), &GetCrossTitleContentList_Params.ContentList, sizeof(GetCrossTitleContentList_Params.ContentList));

	return static_cast<EOnlineEnumerationReadState>(GetCrossTitleContentList_Params.ReturnValue);
};

// Function Engine.OnlineContentInterface.ClearCrossTitleContentList
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint8_t                        LocalUserNum                   (CPF_Parm)
// EOnlineContentType             ContentType                    (CPF_Parm)

void UOnlineContentInterface::ClearCrossTitleContentList(uint8_t LocalUserNum, EOnlineContentType ContentType)
{
	static UFunction* uFnClearCrossTitleContentList = nullptr;

	if (!uFnClearCrossTitleContentList)
	{
		uFnClearCrossTitleContentList = UFunction::FindFunction("Function Engine.OnlineContentInterface.ClearCrossTitleContentList");
	}

	UOnlineContentInterface_execClearCrossTitleContentList_Params ClearCrossTitleContentList_Params;
	memset(&ClearCrossTitleContentList_Params, 0, sizeof(ClearCrossTitleContentList_Params));
	memcpy_s(&ClearCrossTitleContentList_Params.LocalUserNum, sizeof(ClearCrossTitleContentList_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	memcpy_s(&ClearCrossTitleContentList_Params.ContentType, sizeof(ClearCrossTitleContentList_Params.ContentType), &ContentType, sizeof(ContentType));

	this->ProcessEvent(uFnClearCrossTitleContentList, &ClearCrossTitleContentList_Params, nullptr);
};

// Function Engine.OnlineContentInterface.ReadCrossTitleContentList
// [0x00024000] (FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint8_t                        LocalUserNum                   (CPF_Parm)
// EOnlineContentType             ContentType                    (CPF_Parm)
// int32_t                        TitleId                        (CPF_OptionalParm | CPF_Parm)
// int32_t                        DeviceID                       (CPF_OptionalParm | CPF_Parm)

bool UOnlineContentInterface::ReadCrossTitleContentList(uint8_t LocalUserNum, EOnlineContentType ContentType, int32_t TitleId, int32_t DeviceID)
{
	static UFunction* uFnReadCrossTitleContentList = nullptr;

	if (!uFnReadCrossTitleContentList)
	{
		uFnReadCrossTitleContentList = UFunction::FindFunction("Function Engine.OnlineContentInterface.ReadCrossTitleContentList");
	}

	UOnlineContentInterface_execReadCrossTitleContentList_Params ReadCrossTitleContentList_Params;
	memset(&ReadCrossTitleContentList_Params, 0, sizeof(ReadCrossTitleContentList_Params));
	memcpy_s(&ReadCrossTitleContentList_Params.LocalUserNum, sizeof(ReadCrossTitleContentList_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	memcpy_s(&ReadCrossTitleContentList_Params.ContentType, sizeof(ReadCrossTitleContentList_Params.ContentType), &ContentType, sizeof(ContentType));
	memcpy_s(&ReadCrossTitleContentList_Params.TitleId, sizeof(ReadCrossTitleContentList_Params.TitleId), &TitleId, sizeof(TitleId));
	memcpy_s(&ReadCrossTitleContentList_Params.DeviceID, sizeof(ReadCrossTitleContentList_Params.DeviceID), &DeviceID, sizeof(DeviceID));

	this->ProcessEvent(uFnReadCrossTitleContentList, &ReadCrossTitleContentList_Params, nullptr);

	return ReadCrossTitleContentList_Params.ReturnValue;
};

// Function Engine.OnlineContentInterface.GetContentList
// [0x00420000] (FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// EOnlineEnumerationReadState    ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint8_t                        LocalUserNum                   (CPF_Parm)
// EOnlineContentType             ContentType                    (CPF_Parm)
// class TArray<struct FOnlineContent> ContentList                    (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

EOnlineEnumerationReadState UOnlineContentInterface::GetContentList(uint8_t LocalUserNum, EOnlineContentType ContentType, class TArray<struct FOnlineContent>& ContentList)
{
	static UFunction* uFnGetContentList = nullptr;

	if (!uFnGetContentList)
	{
		uFnGetContentList = UFunction::FindFunction("Function Engine.OnlineContentInterface.GetContentList");
	}

	UOnlineContentInterface_execGetContentList_Params GetContentList_Params;
	memset(&GetContentList_Params, 0, sizeof(GetContentList_Params));
	memcpy_s(&GetContentList_Params.LocalUserNum, sizeof(GetContentList_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	memcpy_s(&GetContentList_Params.ContentType, sizeof(GetContentList_Params.ContentType), &ContentType, sizeof(ContentType));
	memcpy_s(&GetContentList_Params.ContentList, sizeof(GetContentList_Params.ContentList), &ContentList, sizeof(ContentList));

	this->ProcessEvent(uFnGetContentList, &GetContentList_Params, nullptr);

	memcpy_s(&ContentList, sizeof(ContentList), &GetContentList_Params.ContentList, sizeof(GetContentList_Params.ContentList));

	return static_cast<EOnlineEnumerationReadState>(GetContentList_Params.ReturnValue);
};

// Function Engine.OnlineContentInterface.ClearContentList
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint8_t                        LocalUserNum                   (CPF_Parm)
// EOnlineContentType             ContentType                    (CPF_Parm)

void UOnlineContentInterface::ClearContentList(uint8_t LocalUserNum, EOnlineContentType ContentType)
{
	static UFunction* uFnClearContentList = nullptr;

	if (!uFnClearContentList)
	{
		uFnClearContentList = UFunction::FindFunction("Function Engine.OnlineContentInterface.ClearContentList");
	}

	UOnlineContentInterface_execClearContentList_Params ClearContentList_Params;
	memset(&ClearContentList_Params, 0, sizeof(ClearContentList_Params));
	memcpy_s(&ClearContentList_Params.LocalUserNum, sizeof(ClearContentList_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	memcpy_s(&ClearContentList_Params.ContentType, sizeof(ClearContentList_Params.ContentType), &ContentType, sizeof(ContentType));

	this->ProcessEvent(uFnClearContentList, &ClearContentList_Params, nullptr);
};

// Function Engine.OnlineContentInterface.ReadContentList
// [0x00024000] (FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint8_t                        LocalUserNum                   (CPF_Parm)
// EOnlineContentType             ContentType                    (CPF_Parm)
// int32_t                        DeviceID                       (CPF_OptionalParm | CPF_Parm)

bool UOnlineContentInterface::ReadContentList(uint8_t LocalUserNum, EOnlineContentType ContentType, int32_t DeviceID)
{
	static UFunction* uFnReadContentList = nullptr;

	if (!uFnReadContentList)
	{
		uFnReadContentList = UFunction::FindFunction("Function Engine.OnlineContentInterface.ReadContentList");
	}

	UOnlineContentInterface_execReadContentList_Params ReadContentList_Params;
	memset(&ReadContentList_Params, 0, sizeof(ReadContentList_Params));
	memcpy_s(&ReadContentList_Params.LocalUserNum, sizeof(ReadContentList_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	memcpy_s(&ReadContentList_Params.ContentType, sizeof(ReadContentList_Params.ContentType), &ContentType, sizeof(ContentType));
	memcpy_s(&ReadContentList_Params.DeviceID, sizeof(ReadContentList_Params.DeviceID), &DeviceID, sizeof(DeviceID));

	this->ProcessEvent(uFnReadContentList, &ReadContentList_Params, nullptr);

	return ReadContentList_Params.ReturnValue;
};

// Function Engine.OnlineContentInterface.ClearReadContentComplete
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint8_t                        LocalUserNum                   (CPF_Parm)
// EOnlineContentType             ContentType                    (CPF_Parm)
// struct FScriptDelegate         ReadContentCompleteDelegate    (CPF_Parm | CPF_NeedCtorLink)

void UOnlineContentInterface::ClearReadContentComplete(uint8_t LocalUserNum, EOnlineContentType ContentType, const struct FScriptDelegate& ReadContentCompleteDelegate)
{
	static UFunction* uFnClearReadContentComplete = nullptr;

	if (!uFnClearReadContentComplete)
	{
		uFnClearReadContentComplete = UFunction::FindFunction("Function Engine.OnlineContentInterface.ClearReadContentComplete");
	}

	UOnlineContentInterface_execClearReadContentComplete_Params ClearReadContentComplete_Params;
	memset(&ClearReadContentComplete_Params, 0, sizeof(ClearReadContentComplete_Params));
	memcpy_s(&ClearReadContentComplete_Params.LocalUserNum, sizeof(ClearReadContentComplete_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	memcpy_s(&ClearReadContentComplete_Params.ContentType, sizeof(ClearReadContentComplete_Params.ContentType), &ContentType, sizeof(ContentType));
	memcpy_s(&ClearReadContentComplete_Params.ReadContentCompleteDelegate, sizeof(ClearReadContentComplete_Params.ReadContentCompleteDelegate), &ReadContentCompleteDelegate, sizeof(ReadContentCompleteDelegate));

	this->ProcessEvent(uFnClearReadContentComplete, &ClearReadContentComplete_Params, nullptr);
};

// Function Engine.OnlineContentInterface.AddReadContentComplete
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint8_t                        LocalUserNum                   (CPF_Parm)
// EOnlineContentType             ContentType                    (CPF_Parm)
// struct FScriptDelegate         ReadContentCompleteDelegate    (CPF_Parm | CPF_NeedCtorLink)

void UOnlineContentInterface::AddReadContentComplete(uint8_t LocalUserNum, EOnlineContentType ContentType, const struct FScriptDelegate& ReadContentCompleteDelegate)
{
	static UFunction* uFnAddReadContentComplete = nullptr;

	if (!uFnAddReadContentComplete)
	{
		uFnAddReadContentComplete = UFunction::FindFunction("Function Engine.OnlineContentInterface.AddReadContentComplete");
	}

	UOnlineContentInterface_execAddReadContentComplete_Params AddReadContentComplete_Params;
	memset(&AddReadContentComplete_Params, 0, sizeof(AddReadContentComplete_Params));
	memcpy_s(&AddReadContentComplete_Params.LocalUserNum, sizeof(AddReadContentComplete_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	memcpy_s(&AddReadContentComplete_Params.ContentType, sizeof(AddReadContentComplete_Params.ContentType), &ContentType, sizeof(ContentType));
	memcpy_s(&AddReadContentComplete_Params.ReadContentCompleteDelegate, sizeof(AddReadContentComplete_Params.ReadContentCompleteDelegate), &ReadContentCompleteDelegate, sizeof(ReadContentCompleteDelegate));

	this->ProcessEvent(uFnAddReadContentComplete, &AddReadContentComplete_Params, nullptr);
};

// Function Engine.OnlineContentInterface.OnReadContentComplete
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bWasSuccessful                 (CPF_Parm)

void UOnlineContentInterface::OnReadContentComplete(bool bWasSuccessful)
{
	static UFunction* uFnOnReadContentComplete = nullptr;

	if (!uFnOnReadContentComplete)
	{
		uFnOnReadContentComplete = UFunction::FindFunction("Function Engine.OnlineContentInterface.OnReadContentComplete");
	}

	UOnlineContentInterface_execOnReadContentComplete_Params OnReadContentComplete_Params;
	memset(&OnReadContentComplete_Params, 0, sizeof(OnReadContentComplete_Params));
	OnReadContentComplete_Params.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent(uFnOnReadContentComplete, &OnReadContentComplete_Params, nullptr);
};

// Function Engine.OnlineContentInterface.ClearContentChangeDelegate
// [0x00024000] (FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FScriptDelegate         ContentDelegate                (CPF_Parm | CPF_NeedCtorLink)
// uint8_t                        LocalUserNum                   (CPF_OptionalParm | CPF_Parm)

void UOnlineContentInterface::ClearContentChangeDelegate(const struct FScriptDelegate& ContentDelegate, uint8_t LocalUserNum)
{
	static UFunction* uFnClearContentChangeDelegate = nullptr;

	if (!uFnClearContentChangeDelegate)
	{
		uFnClearContentChangeDelegate = UFunction::FindFunction("Function Engine.OnlineContentInterface.ClearContentChangeDelegate");
	}

	UOnlineContentInterface_execClearContentChangeDelegate_Params ClearContentChangeDelegate_Params;
	memset(&ClearContentChangeDelegate_Params, 0, sizeof(ClearContentChangeDelegate_Params));
	memcpy_s(&ClearContentChangeDelegate_Params.ContentDelegate, sizeof(ClearContentChangeDelegate_Params.ContentDelegate), &ContentDelegate, sizeof(ContentDelegate));
	memcpy_s(&ClearContentChangeDelegate_Params.LocalUserNum, sizeof(ClearContentChangeDelegate_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));

	this->ProcessEvent(uFnClearContentChangeDelegate, &ClearContentChangeDelegate_Params, nullptr);
};

// Function Engine.OnlineContentInterface.AddContentChangeDelegate
// [0x00024000] (FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FScriptDelegate         ContentDelegate                (CPF_Parm | CPF_NeedCtorLink)
// uint8_t                        LocalUserNum                   (CPF_OptionalParm | CPF_Parm)

void UOnlineContentInterface::AddContentChangeDelegate(const struct FScriptDelegate& ContentDelegate, uint8_t LocalUserNum)
{
	static UFunction* uFnAddContentChangeDelegate = nullptr;

	if (!uFnAddContentChangeDelegate)
	{
		uFnAddContentChangeDelegate = UFunction::FindFunction("Function Engine.OnlineContentInterface.AddContentChangeDelegate");
	}

	UOnlineContentInterface_execAddContentChangeDelegate_Params AddContentChangeDelegate_Params;
	memset(&AddContentChangeDelegate_Params, 0, sizeof(AddContentChangeDelegate_Params));
	memcpy_s(&AddContentChangeDelegate_Params.ContentDelegate, sizeof(AddContentChangeDelegate_Params.ContentDelegate), &ContentDelegate, sizeof(ContentDelegate));
	memcpy_s(&AddContentChangeDelegate_Params.LocalUserNum, sizeof(AddContentChangeDelegate_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));

	this->ProcessEvent(uFnAddContentChangeDelegate, &AddContentChangeDelegate_Params, nullptr);
};

// Function Engine.OnlineContentInterface.OnContentChange
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:

void UOnlineContentInterface::OnContentChange()
{
	static UFunction* uFnOnContentChange = nullptr;

	if (!uFnOnContentChange)
	{
		uFnOnContentChange = UFunction::FindFunction("Function Engine.OnlineContentInterface.OnContentChange");
	}

	UOnlineContentInterface_execOnContentChange_Params OnContentChange_Params;
	memset(&OnContentChange_Params, 0, sizeof(OnContentChange_Params));

	this->ProcessEvent(uFnOnContentChange, &OnContentChange_Params, nullptr);
};

// Function Engine.OnlineSystemInterface.GetLocale
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t UOnlineSystemInterface::GetLocale()
{
	static UFunction* uFnGetLocale = nullptr;

	if (!uFnGetLocale)
	{
		uFnGetLocale = UFunction::FindFunction("Function Engine.OnlineSystemInterface.GetLocale");
	}

	UOnlineSystemInterface_execGetLocale_Params GetLocale_Params;
	memset(&GetLocale_Params, 0, sizeof(GetLocale_Params));

	this->ProcessEvent(uFnGetLocale, &GetLocale_Params, nullptr);

	return GetLocale_Params.ReturnValue;
};

// Function Engine.OnlineSystemInterface.ClearStorageDeviceChangeDelegate
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FScriptDelegate         StorageDeviceChangeDelegate    (CPF_Parm | CPF_NeedCtorLink)

void UOnlineSystemInterface::ClearStorageDeviceChangeDelegate(const struct FScriptDelegate& StorageDeviceChangeDelegate)
{
	static UFunction* uFnClearStorageDeviceChangeDelegate = nullptr;

	if (!uFnClearStorageDeviceChangeDelegate)
	{
		uFnClearStorageDeviceChangeDelegate = UFunction::FindFunction("Function Engine.OnlineSystemInterface.ClearStorageDeviceChangeDelegate");
	}

	UOnlineSystemInterface_execClearStorageDeviceChangeDelegate_Params ClearStorageDeviceChangeDelegate_Params;
	memset(&ClearStorageDeviceChangeDelegate_Params, 0, sizeof(ClearStorageDeviceChangeDelegate_Params));
	memcpy_s(&ClearStorageDeviceChangeDelegate_Params.StorageDeviceChangeDelegate, sizeof(ClearStorageDeviceChangeDelegate_Params.StorageDeviceChangeDelegate), &StorageDeviceChangeDelegate, sizeof(StorageDeviceChangeDelegate));

	this->ProcessEvent(uFnClearStorageDeviceChangeDelegate, &ClearStorageDeviceChangeDelegate_Params, nullptr);
};

// Function Engine.OnlineSystemInterface.AddStorageDeviceChangeDelegate
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FScriptDelegate         StorageDeviceChangeDelegate    (CPF_Parm | CPF_NeedCtorLink)

void UOnlineSystemInterface::AddStorageDeviceChangeDelegate(const struct FScriptDelegate& StorageDeviceChangeDelegate)
{
	static UFunction* uFnAddStorageDeviceChangeDelegate = nullptr;

	if (!uFnAddStorageDeviceChangeDelegate)
	{
		uFnAddStorageDeviceChangeDelegate = UFunction::FindFunction("Function Engine.OnlineSystemInterface.AddStorageDeviceChangeDelegate");
	}

	UOnlineSystemInterface_execAddStorageDeviceChangeDelegate_Params AddStorageDeviceChangeDelegate_Params;
	memset(&AddStorageDeviceChangeDelegate_Params, 0, sizeof(AddStorageDeviceChangeDelegate_Params));
	memcpy_s(&AddStorageDeviceChangeDelegate_Params.StorageDeviceChangeDelegate, sizeof(AddStorageDeviceChangeDelegate_Params.StorageDeviceChangeDelegate), &StorageDeviceChangeDelegate, sizeof(StorageDeviceChangeDelegate));

	this->ProcessEvent(uFnAddStorageDeviceChangeDelegate, &AddStorageDeviceChangeDelegate_Params, nullptr);
};

// Function Engine.OnlineSystemInterface.OnStorageDeviceChange
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:

void UOnlineSystemInterface::OnStorageDeviceChange()
{
	static UFunction* uFnOnStorageDeviceChange = nullptr;

	if (!uFnOnStorageDeviceChange)
	{
		uFnOnStorageDeviceChange = UFunction::FindFunction("Function Engine.OnlineSystemInterface.OnStorageDeviceChange");
	}

	UOnlineSystemInterface_execOnStorageDeviceChange_Params OnStorageDeviceChange_Params;
	memset(&OnStorageDeviceChange_Params, 0, sizeof(OnStorageDeviceChange_Params));

	this->ProcessEvent(uFnOnStorageDeviceChange, &OnStorageDeviceChange_Params, nullptr);
};

// Function Engine.OnlineSystemInterface.GetNATType
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// ENATType                       ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

ENATType UOnlineSystemInterface::GetNATType()
{
	static UFunction* uFnGetNATType = nullptr;

	if (!uFnGetNATType)
	{
		uFnGetNATType = UFunction::FindFunction("Function Engine.OnlineSystemInterface.GetNATType");
	}

	UOnlineSystemInterface_execGetNATType_Params GetNATType_Params;
	memset(&GetNATType_Params, 0, sizeof(GetNATType_Params));

	this->ProcessEvent(uFnGetNATType, &GetNATType_Params, nullptr);

	return static_cast<ENATType>(GetNATType_Params.ReturnValue);
};

// Function Engine.OnlineSystemInterface.ClearConnectionStatusChangeDelegate
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FScriptDelegate         ConnectionStatusDelegate       (CPF_Parm | CPF_NeedCtorLink)

void UOnlineSystemInterface::ClearConnectionStatusChangeDelegate(const struct FScriptDelegate& ConnectionStatusDelegate)
{
	static UFunction* uFnClearConnectionStatusChangeDelegate = nullptr;

	if (!uFnClearConnectionStatusChangeDelegate)
	{
		uFnClearConnectionStatusChangeDelegate = UFunction::FindFunction("Function Engine.OnlineSystemInterface.ClearConnectionStatusChangeDelegate");
	}

	UOnlineSystemInterface_execClearConnectionStatusChangeDelegate_Params ClearConnectionStatusChangeDelegate_Params;
	memset(&ClearConnectionStatusChangeDelegate_Params, 0, sizeof(ClearConnectionStatusChangeDelegate_Params));
	memcpy_s(&ClearConnectionStatusChangeDelegate_Params.ConnectionStatusDelegate, sizeof(ClearConnectionStatusChangeDelegate_Params.ConnectionStatusDelegate), &ConnectionStatusDelegate, sizeof(ConnectionStatusDelegate));

	this->ProcessEvent(uFnClearConnectionStatusChangeDelegate, &ClearConnectionStatusChangeDelegate_Params, nullptr);
};

// Function Engine.OnlineSystemInterface.AddConnectionStatusChangeDelegate
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FScriptDelegate         ConnectionStatusDelegate       (CPF_Parm | CPF_NeedCtorLink)

void UOnlineSystemInterface::AddConnectionStatusChangeDelegate(const struct FScriptDelegate& ConnectionStatusDelegate)
{
	static UFunction* uFnAddConnectionStatusChangeDelegate = nullptr;

	if (!uFnAddConnectionStatusChangeDelegate)
	{
		uFnAddConnectionStatusChangeDelegate = UFunction::FindFunction("Function Engine.OnlineSystemInterface.AddConnectionStatusChangeDelegate");
	}

	UOnlineSystemInterface_execAddConnectionStatusChangeDelegate_Params AddConnectionStatusChangeDelegate_Params;
	memset(&AddConnectionStatusChangeDelegate_Params, 0, sizeof(AddConnectionStatusChangeDelegate_Params));
	memcpy_s(&AddConnectionStatusChangeDelegate_Params.ConnectionStatusDelegate, sizeof(AddConnectionStatusChangeDelegate_Params.ConnectionStatusDelegate), &ConnectionStatusDelegate, sizeof(ConnectionStatusDelegate));

	this->ProcessEvent(uFnAddConnectionStatusChangeDelegate, &AddConnectionStatusChangeDelegate_Params, nullptr);
};

// Function Engine.OnlineSystemInterface.OnConnectionStatusChange
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// EOnlineServerConnectionStatus  ConnectionStatus               (CPF_Parm)

void UOnlineSystemInterface::OnConnectionStatusChange(EOnlineServerConnectionStatus ConnectionStatus)
{
	static UFunction* uFnOnConnectionStatusChange = nullptr;

	if (!uFnOnConnectionStatusChange)
	{
		uFnOnConnectionStatusChange = UFunction::FindFunction("Function Engine.OnlineSystemInterface.OnConnectionStatusChange");
	}

	UOnlineSystemInterface_execOnConnectionStatusChange_Params OnConnectionStatusChange_Params;
	memset(&OnConnectionStatusChange_Params, 0, sizeof(OnConnectionStatusChange_Params));
	memcpy_s(&OnConnectionStatusChange_Params.ConnectionStatus, sizeof(OnConnectionStatusChange_Params.ConnectionStatus), &ConnectionStatus, sizeof(ConnectionStatus));

	this->ProcessEvent(uFnOnConnectionStatusChange, &OnConnectionStatusChange_Params, nullptr);
};

// Function Engine.OnlineSystemInterface.IsControllerConnected
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        ControllerId                   (CPF_Parm)

bool UOnlineSystemInterface::IsControllerConnected(int32_t ControllerId)
{
	static UFunction* uFnIsControllerConnected = nullptr;

	if (!uFnIsControllerConnected)
	{
		uFnIsControllerConnected = UFunction::FindFunction("Function Engine.OnlineSystemInterface.IsControllerConnected");
	}

	UOnlineSystemInterface_execIsControllerConnected_Params IsControllerConnected_Params;
	memset(&IsControllerConnected_Params, 0, sizeof(IsControllerConnected_Params));
	memcpy_s(&IsControllerConnected_Params.ControllerId, sizeof(IsControllerConnected_Params.ControllerId), &ControllerId, sizeof(ControllerId));

	this->ProcessEvent(uFnIsControllerConnected, &IsControllerConnected_Params, nullptr);

	return IsControllerConnected_Params.ReturnValue;
};

// Function Engine.OnlineSystemInterface.ClearControllerChangeDelegate
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FScriptDelegate         ControllerChangeDelegate       (CPF_Parm | CPF_NeedCtorLink)

void UOnlineSystemInterface::ClearControllerChangeDelegate(const struct FScriptDelegate& ControllerChangeDelegate)
{
	static UFunction* uFnClearControllerChangeDelegate = nullptr;

	if (!uFnClearControllerChangeDelegate)
	{
		uFnClearControllerChangeDelegate = UFunction::FindFunction("Function Engine.OnlineSystemInterface.ClearControllerChangeDelegate");
	}

	UOnlineSystemInterface_execClearControllerChangeDelegate_Params ClearControllerChangeDelegate_Params;
	memset(&ClearControllerChangeDelegate_Params, 0, sizeof(ClearControllerChangeDelegate_Params));
	memcpy_s(&ClearControllerChangeDelegate_Params.ControllerChangeDelegate, sizeof(ClearControllerChangeDelegate_Params.ControllerChangeDelegate), &ControllerChangeDelegate, sizeof(ControllerChangeDelegate));

	this->ProcessEvent(uFnClearControllerChangeDelegate, &ClearControllerChangeDelegate_Params, nullptr);
};

// Function Engine.OnlineSystemInterface.AddControllerChangeDelegate
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FScriptDelegate         ControllerChangeDelegate       (CPF_Parm | CPF_NeedCtorLink)

void UOnlineSystemInterface::AddControllerChangeDelegate(const struct FScriptDelegate& ControllerChangeDelegate)
{
	static UFunction* uFnAddControllerChangeDelegate = nullptr;

	if (!uFnAddControllerChangeDelegate)
	{
		uFnAddControllerChangeDelegate = UFunction::FindFunction("Function Engine.OnlineSystemInterface.AddControllerChangeDelegate");
	}

	UOnlineSystemInterface_execAddControllerChangeDelegate_Params AddControllerChangeDelegate_Params;
	memset(&AddControllerChangeDelegate_Params, 0, sizeof(AddControllerChangeDelegate_Params));
	memcpy_s(&AddControllerChangeDelegate_Params.ControllerChangeDelegate, sizeof(AddControllerChangeDelegate_Params.ControllerChangeDelegate), &ControllerChangeDelegate, sizeof(ControllerChangeDelegate));

	this->ProcessEvent(uFnAddControllerChangeDelegate, &AddControllerChangeDelegate_Params, nullptr);
};

// Function Engine.OnlineSystemInterface.OnControllerChange
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ControllerId                   (CPF_Parm)
// uint32_t                       bIsConnected                   (CPF_Parm)

void UOnlineSystemInterface::OnControllerChange(int32_t ControllerId, bool bIsConnected)
{
	static UFunction* uFnOnControllerChange = nullptr;

	if (!uFnOnControllerChange)
	{
		uFnOnControllerChange = UFunction::FindFunction("Function Engine.OnlineSystemInterface.OnControllerChange");
	}

	UOnlineSystemInterface_execOnControllerChange_Params OnControllerChange_Params;
	memset(&OnControllerChange_Params, 0, sizeof(OnControllerChange_Params));
	memcpy_s(&OnControllerChange_Params.ControllerId, sizeof(OnControllerChange_Params.ControllerId), &ControllerId, sizeof(ControllerId));
	OnControllerChange_Params.bIsConnected = bIsConnected;

	this->ProcessEvent(uFnOnControllerChange, &OnControllerChange_Params, nullptr);
};

// Function Engine.OnlineSystemInterface.SetNetworkNotificationPosition
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// ENetworkNotificationPosition   NewPos                         (CPF_Parm)

void UOnlineSystemInterface::SetNetworkNotificationPosition(ENetworkNotificationPosition NewPos)
{
	static UFunction* uFnSetNetworkNotificationPosition = nullptr;

	if (!uFnSetNetworkNotificationPosition)
	{
		uFnSetNetworkNotificationPosition = UFunction::FindFunction("Function Engine.OnlineSystemInterface.SetNetworkNotificationPosition");
	}

	UOnlineSystemInterface_execSetNetworkNotificationPosition_Params SetNetworkNotificationPosition_Params;
	memset(&SetNetworkNotificationPosition_Params, 0, sizeof(SetNetworkNotificationPosition_Params));
	memcpy_s(&SetNetworkNotificationPosition_Params.NewPos, sizeof(SetNetworkNotificationPosition_Params.NewPos), &NewPos, sizeof(NewPos));

	this->ProcessEvent(uFnSetNetworkNotificationPosition, &SetNetworkNotificationPosition_Params, nullptr);
};

// Function Engine.OnlineSystemInterface.GetNetworkNotificationPosition
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// ENetworkNotificationPosition   ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

ENetworkNotificationPosition UOnlineSystemInterface::GetNetworkNotificationPosition()
{
	static UFunction* uFnGetNetworkNotificationPosition = nullptr;

	if (!uFnGetNetworkNotificationPosition)
	{
		uFnGetNetworkNotificationPosition = UFunction::FindFunction("Function Engine.OnlineSystemInterface.GetNetworkNotificationPosition");
	}

	UOnlineSystemInterface_execGetNetworkNotificationPosition_Params GetNetworkNotificationPosition_Params;
	memset(&GetNetworkNotificationPosition_Params, 0, sizeof(GetNetworkNotificationPosition_Params));

	this->ProcessEvent(uFnGetNetworkNotificationPosition, &GetNetworkNotificationPosition_Params, nullptr);

	return static_cast<ENetworkNotificationPosition>(GetNetworkNotificationPosition_Params.ReturnValue);
};

// Function Engine.OnlineSystemInterface.ClearExternalUIChangeDelegate
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FScriptDelegate         ExternalUIDelegate             (CPF_Parm | CPF_NeedCtorLink)

void UOnlineSystemInterface::ClearExternalUIChangeDelegate(const struct FScriptDelegate& ExternalUIDelegate)
{
	static UFunction* uFnClearExternalUIChangeDelegate = nullptr;

	if (!uFnClearExternalUIChangeDelegate)
	{
		uFnClearExternalUIChangeDelegate = UFunction::FindFunction("Function Engine.OnlineSystemInterface.ClearExternalUIChangeDelegate");
	}

	UOnlineSystemInterface_execClearExternalUIChangeDelegate_Params ClearExternalUIChangeDelegate_Params;
	memset(&ClearExternalUIChangeDelegate_Params, 0, sizeof(ClearExternalUIChangeDelegate_Params));
	memcpy_s(&ClearExternalUIChangeDelegate_Params.ExternalUIDelegate, sizeof(ClearExternalUIChangeDelegate_Params.ExternalUIDelegate), &ExternalUIDelegate, sizeof(ExternalUIDelegate));

	this->ProcessEvent(uFnClearExternalUIChangeDelegate, &ClearExternalUIChangeDelegate_Params, nullptr);
};

// Function Engine.OnlineSystemInterface.AddExternalUIChangeDelegate
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FScriptDelegate         ExternalUIDelegate             (CPF_Parm | CPF_NeedCtorLink)

void UOnlineSystemInterface::AddExternalUIChangeDelegate(const struct FScriptDelegate& ExternalUIDelegate)
{
	static UFunction* uFnAddExternalUIChangeDelegate = nullptr;

	if (!uFnAddExternalUIChangeDelegate)
	{
		uFnAddExternalUIChangeDelegate = UFunction::FindFunction("Function Engine.OnlineSystemInterface.AddExternalUIChangeDelegate");
	}

	UOnlineSystemInterface_execAddExternalUIChangeDelegate_Params AddExternalUIChangeDelegate_Params;
	memset(&AddExternalUIChangeDelegate_Params, 0, sizeof(AddExternalUIChangeDelegate_Params));
	memcpy_s(&AddExternalUIChangeDelegate_Params.ExternalUIDelegate, sizeof(AddExternalUIChangeDelegate_Params.ExternalUIDelegate), &ExternalUIDelegate, sizeof(ExternalUIDelegate));

	this->ProcessEvent(uFnAddExternalUIChangeDelegate, &AddExternalUIChangeDelegate_Params, nullptr);
};

// Function Engine.OnlineSystemInterface.OnExternalUIChange
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bIsOpening                     (CPF_Parm)

void UOnlineSystemInterface::OnExternalUIChange(bool bIsOpening)
{
	static UFunction* uFnOnExternalUIChange = nullptr;

	if (!uFnOnExternalUIChange)
	{
		uFnOnExternalUIChange = UFunction::FindFunction("Function Engine.OnlineSystemInterface.OnExternalUIChange");
	}

	UOnlineSystemInterface_execOnExternalUIChange_Params OnExternalUIChange_Params;
	memset(&OnExternalUIChange_Params, 0, sizeof(OnExternalUIChange_Params));
	OnExternalUIChange_Params.bIsOpening = bIsOpening;

	this->ProcessEvent(uFnOnExternalUIChange, &OnExternalUIChange_Params, nullptr);
};

// Function Engine.OnlineSystemInterface.ClearLinkStatusChangeDelegate
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FScriptDelegate         LinkStatusDelegate             (CPF_Parm | CPF_NeedCtorLink)

void UOnlineSystemInterface::ClearLinkStatusChangeDelegate(const struct FScriptDelegate& LinkStatusDelegate)
{
	static UFunction* uFnClearLinkStatusChangeDelegate = nullptr;

	if (!uFnClearLinkStatusChangeDelegate)
	{
		uFnClearLinkStatusChangeDelegate = UFunction::FindFunction("Function Engine.OnlineSystemInterface.ClearLinkStatusChangeDelegate");
	}

	UOnlineSystemInterface_execClearLinkStatusChangeDelegate_Params ClearLinkStatusChangeDelegate_Params;
	memset(&ClearLinkStatusChangeDelegate_Params, 0, sizeof(ClearLinkStatusChangeDelegate_Params));
	memcpy_s(&ClearLinkStatusChangeDelegate_Params.LinkStatusDelegate, sizeof(ClearLinkStatusChangeDelegate_Params.LinkStatusDelegate), &LinkStatusDelegate, sizeof(LinkStatusDelegate));

	this->ProcessEvent(uFnClearLinkStatusChangeDelegate, &ClearLinkStatusChangeDelegate_Params, nullptr);
};

// Function Engine.OnlineSystemInterface.AddLinkStatusChangeDelegate
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FScriptDelegate         LinkStatusDelegate             (CPF_Parm | CPF_NeedCtorLink)

void UOnlineSystemInterface::AddLinkStatusChangeDelegate(const struct FScriptDelegate& LinkStatusDelegate)
{
	static UFunction* uFnAddLinkStatusChangeDelegate = nullptr;

	if (!uFnAddLinkStatusChangeDelegate)
	{
		uFnAddLinkStatusChangeDelegate = UFunction::FindFunction("Function Engine.OnlineSystemInterface.AddLinkStatusChangeDelegate");
	}

	UOnlineSystemInterface_execAddLinkStatusChangeDelegate_Params AddLinkStatusChangeDelegate_Params;
	memset(&AddLinkStatusChangeDelegate_Params, 0, sizeof(AddLinkStatusChangeDelegate_Params));
	memcpy_s(&AddLinkStatusChangeDelegate_Params.LinkStatusDelegate, sizeof(AddLinkStatusChangeDelegate_Params.LinkStatusDelegate), &LinkStatusDelegate, sizeof(LinkStatusDelegate));

	this->ProcessEvent(uFnAddLinkStatusChangeDelegate, &AddLinkStatusChangeDelegate_Params, nullptr);
};

// Function Engine.OnlineSystemInterface.OnLinkStatusChange
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bIsConnected                   (CPF_Parm)

void UOnlineSystemInterface::OnLinkStatusChange(bool bIsConnected)
{
	static UFunction* uFnOnLinkStatusChange = nullptr;

	if (!uFnOnLinkStatusChange)
	{
		uFnOnLinkStatusChange = UFunction::FindFunction("Function Engine.OnlineSystemInterface.OnLinkStatusChange");
	}

	UOnlineSystemInterface_execOnLinkStatusChange_Params OnLinkStatusChange_Params;
	memset(&OnLinkStatusChange_Params, 0, sizeof(OnLinkStatusChange_Params));
	OnLinkStatusChange_Params.bIsConnected = bIsConnected;

	this->ProcessEvent(uFnOnLinkStatusChange, &OnLinkStatusChange_Params, nullptr);
};

// Function Engine.OnlineSystemInterface.HasLinkConnection
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UOnlineSystemInterface::HasLinkConnection()
{
	static UFunction* uFnHasLinkConnection = nullptr;

	if (!uFnHasLinkConnection)
	{
		uFnHasLinkConnection = UFunction::FindFunction("Function Engine.OnlineSystemInterface.HasLinkConnection");
	}

	UOnlineSystemInterface_execHasLinkConnection_Params HasLinkConnection_Params;
	memset(&HasLinkConnection_Params, 0, sizeof(HasLinkConnection_Params));

	this->ProcessEvent(uFnHasLinkConnection, &HasLinkConnection_Params, nullptr);

	return HasLinkConnection_Params.ReturnValue;
};

// Function Engine.OnlinePlayerInterfaceEx.UnlockAvatarAward
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint8_t                        LocalUserNum                   (CPF_Parm)
// int32_t                        AvatarItemId                   (CPF_Parm)

bool UOnlinePlayerInterfaceEx::UnlockAvatarAward(uint8_t LocalUserNum, int32_t AvatarItemId)
{
	static UFunction* uFnUnlockAvatarAward = nullptr;

	if (!uFnUnlockAvatarAward)
	{
		uFnUnlockAvatarAward = UFunction::FindFunction("Function Engine.OnlinePlayerInterfaceEx.UnlockAvatarAward");
	}

	UOnlinePlayerInterfaceEx_execUnlockAvatarAward_Params UnlockAvatarAward_Params;
	memset(&UnlockAvatarAward_Params, 0, sizeof(UnlockAvatarAward_Params));
	memcpy_s(&UnlockAvatarAward_Params.LocalUserNum, sizeof(UnlockAvatarAward_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	memcpy_s(&UnlockAvatarAward_Params.AvatarItemId, sizeof(UnlockAvatarAward_Params.AvatarItemId), &AvatarItemId, sizeof(AvatarItemId));

	this->ProcessEvent(uFnUnlockAvatarAward, &UnlockAvatarAward_Params, nullptr);

	return UnlockAvatarAward_Params.ReturnValue;
};

// Function Engine.OnlinePlayerInterfaceEx.ShowCustomPlayersUI
// [0x00420000] (FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint8_t                        LocalUserNum                   (CPF_Parm)
// class FString                  Title                          (CPF_Parm | CPF_NeedCtorLink)
// class FString                  Description                    (CPF_Parm | CPF_NeedCtorLink)
// class TArray<struct FUniqueNetId> Players                        (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

bool UOnlinePlayerInterfaceEx::ShowCustomPlayersUI(uint8_t LocalUserNum, const class FString& Title, const class FString& Description, class TArray<struct FUniqueNetId>& Players)
{
	static UFunction* uFnShowCustomPlayersUI = nullptr;

	if (!uFnShowCustomPlayersUI)
	{
		uFnShowCustomPlayersUI = UFunction::FindFunction("Function Engine.OnlinePlayerInterfaceEx.ShowCustomPlayersUI");
	}

	UOnlinePlayerInterfaceEx_execShowCustomPlayersUI_Params ShowCustomPlayersUI_Params;
	memset(&ShowCustomPlayersUI_Params, 0, sizeof(ShowCustomPlayersUI_Params));
	memcpy_s(&ShowCustomPlayersUI_Params.LocalUserNum, sizeof(ShowCustomPlayersUI_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	memcpy_s(&ShowCustomPlayersUI_Params.Title, sizeof(ShowCustomPlayersUI_Params.Title), &Title, sizeof(Title));
	memcpy_s(&ShowCustomPlayersUI_Params.Description, sizeof(ShowCustomPlayersUI_Params.Description), &Description, sizeof(Description));
	memcpy_s(&ShowCustomPlayersUI_Params.Players, sizeof(ShowCustomPlayersUI_Params.Players), &Players, sizeof(Players));

	this->ProcessEvent(uFnShowCustomPlayersUI, &ShowCustomPlayersUI_Params, nullptr);

	memcpy_s(&Players, sizeof(Players), &ShowCustomPlayersUI_Params.Players, sizeof(ShowCustomPlayersUI_Params.Players));

	return ShowCustomPlayersUI_Params.ReturnValue;
};

// Function Engine.OnlinePlayerInterfaceEx.ShowPlayersUI
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint8_t                        LocalUserNum                   (CPF_Parm)

bool UOnlinePlayerInterfaceEx::ShowPlayersUI(uint8_t LocalUserNum)
{
	static UFunction* uFnShowPlayersUI = nullptr;

	if (!uFnShowPlayersUI)
	{
		uFnShowPlayersUI = UFunction::FindFunction("Function Engine.OnlinePlayerInterfaceEx.ShowPlayersUI");
	}

	UOnlinePlayerInterfaceEx_execShowPlayersUI_Params ShowPlayersUI_Params;
	memset(&ShowPlayersUI_Params, 0, sizeof(ShowPlayersUI_Params));
	memcpy_s(&ShowPlayersUI_Params.LocalUserNum, sizeof(ShowPlayersUI_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));

	this->ProcessEvent(uFnShowPlayersUI, &ShowPlayersUI_Params, nullptr);

	return ShowPlayersUI_Params.ReturnValue;
};

// Function Engine.OnlinePlayerInterfaceEx.ShowFriendsInviteUI
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint8_t                        LocalUserNum                   (CPF_Parm)
// struct FUniqueNetId            PlayerID                       (CPF_Parm)

bool UOnlinePlayerInterfaceEx::ShowFriendsInviteUI(uint8_t LocalUserNum, const struct FUniqueNetId& PlayerID)
{
	static UFunction* uFnShowFriendsInviteUI = nullptr;

	if (!uFnShowFriendsInviteUI)
	{
		uFnShowFriendsInviteUI = UFunction::FindFunction("Function Engine.OnlinePlayerInterfaceEx.ShowFriendsInviteUI");
	}

	UOnlinePlayerInterfaceEx_execShowFriendsInviteUI_Params ShowFriendsInviteUI_Params;
	memset(&ShowFriendsInviteUI_Params, 0, sizeof(ShowFriendsInviteUI_Params));
	memcpy_s(&ShowFriendsInviteUI_Params.LocalUserNum, sizeof(ShowFriendsInviteUI_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	memcpy_s(&ShowFriendsInviteUI_Params.PlayerID, sizeof(ShowFriendsInviteUI_Params.PlayerID), &PlayerID, sizeof(PlayerID));

	this->ProcessEvent(uFnShowFriendsInviteUI, &ShowFriendsInviteUI_Params, nullptr);

	return ShowFriendsInviteUI_Params.ReturnValue;
};

// Function Engine.OnlinePlayerInterfaceEx.ClearProfileDataChangedDelegate
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint8_t                        LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         ProfileDataChangedDelegate     (CPF_Parm | CPF_NeedCtorLink)

void UOnlinePlayerInterfaceEx::ClearProfileDataChangedDelegate(uint8_t LocalUserNum, const struct FScriptDelegate& ProfileDataChangedDelegate)
{
	static UFunction* uFnClearProfileDataChangedDelegate = nullptr;

	if (!uFnClearProfileDataChangedDelegate)
	{
		uFnClearProfileDataChangedDelegate = UFunction::FindFunction("Function Engine.OnlinePlayerInterfaceEx.ClearProfileDataChangedDelegate");
	}

	UOnlinePlayerInterfaceEx_execClearProfileDataChangedDelegate_Params ClearProfileDataChangedDelegate_Params;
	memset(&ClearProfileDataChangedDelegate_Params, 0, sizeof(ClearProfileDataChangedDelegate_Params));
	memcpy_s(&ClearProfileDataChangedDelegate_Params.LocalUserNum, sizeof(ClearProfileDataChangedDelegate_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	memcpy_s(&ClearProfileDataChangedDelegate_Params.ProfileDataChangedDelegate, sizeof(ClearProfileDataChangedDelegate_Params.ProfileDataChangedDelegate), &ProfileDataChangedDelegate, sizeof(ProfileDataChangedDelegate));

	this->ProcessEvent(uFnClearProfileDataChangedDelegate, &ClearProfileDataChangedDelegate_Params, nullptr);
};

// Function Engine.OnlinePlayerInterfaceEx.AddProfileDataChangedDelegate
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint8_t                        LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         ProfileDataChangedDelegate     (CPF_Parm | CPF_NeedCtorLink)

void UOnlinePlayerInterfaceEx::AddProfileDataChangedDelegate(uint8_t LocalUserNum, const struct FScriptDelegate& ProfileDataChangedDelegate)
{
	static UFunction* uFnAddProfileDataChangedDelegate = nullptr;

	if (!uFnAddProfileDataChangedDelegate)
	{
		uFnAddProfileDataChangedDelegate = UFunction::FindFunction("Function Engine.OnlinePlayerInterfaceEx.AddProfileDataChangedDelegate");
	}

	UOnlinePlayerInterfaceEx_execAddProfileDataChangedDelegate_Params AddProfileDataChangedDelegate_Params;
	memset(&AddProfileDataChangedDelegate_Params, 0, sizeof(AddProfileDataChangedDelegate_Params));
	memcpy_s(&AddProfileDataChangedDelegate_Params.LocalUserNum, sizeof(AddProfileDataChangedDelegate_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	memcpy_s(&AddProfileDataChangedDelegate_Params.ProfileDataChangedDelegate, sizeof(AddProfileDataChangedDelegate_Params.ProfileDataChangedDelegate), &ProfileDataChangedDelegate, sizeof(ProfileDataChangedDelegate));

	this->ProcessEvent(uFnAddProfileDataChangedDelegate, &AddProfileDataChangedDelegate_Params, nullptr);
};

// Function Engine.OnlinePlayerInterfaceEx.OnProfileDataChanged
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:

void UOnlinePlayerInterfaceEx::OnProfileDataChanged()
{
	static UFunction* uFnOnProfileDataChanged = nullptr;

	if (!uFnOnProfileDataChanged)
	{
		uFnOnProfileDataChanged = UFunction::FindFunction("Function Engine.OnlinePlayerInterfaceEx.OnProfileDataChanged");
	}

	UOnlinePlayerInterfaceEx_execOnProfileDataChanged_Params OnProfileDataChanged_Params;
	memset(&OnProfileDataChanged_Params, 0, sizeof(OnProfileDataChanged_Params));

	this->ProcessEvent(uFnOnProfileDataChanged, &OnProfileDataChanged_Params, nullptr);
};

// Function Engine.OnlinePlayerInterfaceEx.UnlockGamerPicture
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint8_t                        LocalUserNum                   (CPF_Parm)
// int32_t                        PictureId                      (CPF_Parm)

bool UOnlinePlayerInterfaceEx::UnlockGamerPicture(uint8_t LocalUserNum, int32_t PictureId)
{
	static UFunction* uFnUnlockGamerPicture = nullptr;

	if (!uFnUnlockGamerPicture)
	{
		uFnUnlockGamerPicture = UFunction::FindFunction("Function Engine.OnlinePlayerInterfaceEx.UnlockGamerPicture");
	}

	UOnlinePlayerInterfaceEx_execUnlockGamerPicture_Params UnlockGamerPicture_Params;
	memset(&UnlockGamerPicture_Params, 0, sizeof(UnlockGamerPicture_Params));
	memcpy_s(&UnlockGamerPicture_Params.LocalUserNum, sizeof(UnlockGamerPicture_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	memcpy_s(&UnlockGamerPicture_Params.PictureId, sizeof(UnlockGamerPicture_Params.PictureId), &PictureId, sizeof(PictureId));

	this->ProcessEvent(uFnUnlockGamerPicture, &UnlockGamerPicture_Params, nullptr);

	return UnlockGamerPicture_Params.ReturnValue;
};

// Function Engine.OnlinePlayerInterfaceEx.IsDeviceValid
// [0x00024000] (FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        DeviceID                       (CPF_Parm)
// int32_t                        SizeNeeded                     (CPF_OptionalParm | CPF_Parm)

bool UOnlinePlayerInterfaceEx::IsDeviceValid(int32_t DeviceID, int32_t SizeNeeded)
{
	static UFunction* uFnIsDeviceValid = nullptr;

	if (!uFnIsDeviceValid)
	{
		uFnIsDeviceValid = UFunction::FindFunction("Function Engine.OnlinePlayerInterfaceEx.IsDeviceValid");
	}

	UOnlinePlayerInterfaceEx_execIsDeviceValid_Params IsDeviceValid_Params;
	memset(&IsDeviceValid_Params, 0, sizeof(IsDeviceValid_Params));
	memcpy_s(&IsDeviceValid_Params.DeviceID, sizeof(IsDeviceValid_Params.DeviceID), &DeviceID, sizeof(DeviceID));
	memcpy_s(&IsDeviceValid_Params.SizeNeeded, sizeof(IsDeviceValid_Params.SizeNeeded), &SizeNeeded, sizeof(SizeNeeded));

	this->ProcessEvent(uFnIsDeviceValid, &IsDeviceValid_Params, nullptr);

	return IsDeviceValid_Params.ReturnValue;
};

// Function Engine.OnlinePlayerInterfaceEx.GetDeviceSelectionResults
// [0x00420000] (FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint8_t                        LocalUserNum                   (CPF_Parm)
// class FString                  DeviceName                     (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

int32_t UOnlinePlayerInterfaceEx::GetDeviceSelectionResults(uint8_t LocalUserNum, class FString& DeviceName)
{
	static UFunction* uFnGetDeviceSelectionResults = nullptr;

	if (!uFnGetDeviceSelectionResults)
	{
		uFnGetDeviceSelectionResults = UFunction::FindFunction("Function Engine.OnlinePlayerInterfaceEx.GetDeviceSelectionResults");
	}

	UOnlinePlayerInterfaceEx_execGetDeviceSelectionResults_Params GetDeviceSelectionResults_Params;
	memset(&GetDeviceSelectionResults_Params, 0, sizeof(GetDeviceSelectionResults_Params));
	memcpy_s(&GetDeviceSelectionResults_Params.LocalUserNum, sizeof(GetDeviceSelectionResults_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	memcpy_s(&GetDeviceSelectionResults_Params.DeviceName, sizeof(GetDeviceSelectionResults_Params.DeviceName), &DeviceName, sizeof(DeviceName));

	this->ProcessEvent(uFnGetDeviceSelectionResults, &GetDeviceSelectionResults_Params, nullptr);

	memcpy_s(&DeviceName, sizeof(DeviceName), &GetDeviceSelectionResults_Params.DeviceName, sizeof(GetDeviceSelectionResults_Params.DeviceName));

	return GetDeviceSelectionResults_Params.ReturnValue;
};

// Function Engine.OnlinePlayerInterfaceEx.ClearDeviceSelectionDoneDelegate
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint8_t                        LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         DeviceDelegate                 (CPF_Parm | CPF_NeedCtorLink)

void UOnlinePlayerInterfaceEx::ClearDeviceSelectionDoneDelegate(uint8_t LocalUserNum, const struct FScriptDelegate& DeviceDelegate)
{
	static UFunction* uFnClearDeviceSelectionDoneDelegate = nullptr;

	if (!uFnClearDeviceSelectionDoneDelegate)
	{
		uFnClearDeviceSelectionDoneDelegate = UFunction::FindFunction("Function Engine.OnlinePlayerInterfaceEx.ClearDeviceSelectionDoneDelegate");
	}

	UOnlinePlayerInterfaceEx_execClearDeviceSelectionDoneDelegate_Params ClearDeviceSelectionDoneDelegate_Params;
	memset(&ClearDeviceSelectionDoneDelegate_Params, 0, sizeof(ClearDeviceSelectionDoneDelegate_Params));
	memcpy_s(&ClearDeviceSelectionDoneDelegate_Params.LocalUserNum, sizeof(ClearDeviceSelectionDoneDelegate_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	memcpy_s(&ClearDeviceSelectionDoneDelegate_Params.DeviceDelegate, sizeof(ClearDeviceSelectionDoneDelegate_Params.DeviceDelegate), &DeviceDelegate, sizeof(DeviceDelegate));

	this->ProcessEvent(uFnClearDeviceSelectionDoneDelegate, &ClearDeviceSelectionDoneDelegate_Params, nullptr);
};

// Function Engine.OnlinePlayerInterfaceEx.AddDeviceSelectionDoneDelegate
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint8_t                        LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         DeviceDelegate                 (CPF_Parm | CPF_NeedCtorLink)

void UOnlinePlayerInterfaceEx::AddDeviceSelectionDoneDelegate(uint8_t LocalUserNum, const struct FScriptDelegate& DeviceDelegate)
{
	static UFunction* uFnAddDeviceSelectionDoneDelegate = nullptr;

	if (!uFnAddDeviceSelectionDoneDelegate)
	{
		uFnAddDeviceSelectionDoneDelegate = UFunction::FindFunction("Function Engine.OnlinePlayerInterfaceEx.AddDeviceSelectionDoneDelegate");
	}

	UOnlinePlayerInterfaceEx_execAddDeviceSelectionDoneDelegate_Params AddDeviceSelectionDoneDelegate_Params;
	memset(&AddDeviceSelectionDoneDelegate_Params, 0, sizeof(AddDeviceSelectionDoneDelegate_Params));
	memcpy_s(&AddDeviceSelectionDoneDelegate_Params.LocalUserNum, sizeof(AddDeviceSelectionDoneDelegate_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	memcpy_s(&AddDeviceSelectionDoneDelegate_Params.DeviceDelegate, sizeof(AddDeviceSelectionDoneDelegate_Params.DeviceDelegate), &DeviceDelegate, sizeof(DeviceDelegate));

	this->ProcessEvent(uFnAddDeviceSelectionDoneDelegate, &AddDeviceSelectionDoneDelegate_Params, nullptr);
};

// Function Engine.OnlinePlayerInterfaceEx.OnDeviceSelectionComplete
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bWasSuccessful                 (CPF_Parm)

void UOnlinePlayerInterfaceEx::OnDeviceSelectionComplete(bool bWasSuccessful)
{
	static UFunction* uFnOnDeviceSelectionComplete = nullptr;

	if (!uFnOnDeviceSelectionComplete)
	{
		uFnOnDeviceSelectionComplete = UFunction::FindFunction("Function Engine.OnlinePlayerInterfaceEx.OnDeviceSelectionComplete");
	}

	UOnlinePlayerInterfaceEx_execOnDeviceSelectionComplete_Params OnDeviceSelectionComplete_Params;
	memset(&OnDeviceSelectionComplete_Params, 0, sizeof(OnDeviceSelectionComplete_Params));
	OnDeviceSelectionComplete_Params.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent(uFnOnDeviceSelectionComplete, &OnDeviceSelectionComplete_Params, nullptr);
};

// Function Engine.OnlinePlayerInterfaceEx.ShowDeviceSelectionUI
// [0x00024000] (FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint8_t                        LocalUserNum                   (CPF_Parm)
// int32_t                        SizeNeeded                     (CPF_Parm)
// uint32_t                       bManageStorage                 (CPF_OptionalParm | CPF_Parm)

bool UOnlinePlayerInterfaceEx::ShowDeviceSelectionUI(uint8_t LocalUserNum, int32_t SizeNeeded, bool bManageStorage)
{
	static UFunction* uFnShowDeviceSelectionUI = nullptr;

	if (!uFnShowDeviceSelectionUI)
	{
		uFnShowDeviceSelectionUI = UFunction::FindFunction("Function Engine.OnlinePlayerInterfaceEx.ShowDeviceSelectionUI");
	}

	UOnlinePlayerInterfaceEx_execShowDeviceSelectionUI_Params ShowDeviceSelectionUI_Params;
	memset(&ShowDeviceSelectionUI_Params, 0, sizeof(ShowDeviceSelectionUI_Params));
	memcpy_s(&ShowDeviceSelectionUI_Params.LocalUserNum, sizeof(ShowDeviceSelectionUI_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	memcpy_s(&ShowDeviceSelectionUI_Params.SizeNeeded, sizeof(ShowDeviceSelectionUI_Params.SizeNeeded), &SizeNeeded, sizeof(SizeNeeded));
	ShowDeviceSelectionUI_Params.bManageStorage = bManageStorage;

	this->ProcessEvent(uFnShowDeviceSelectionUI, &ShowDeviceSelectionUI_Params, nullptr);

	return ShowDeviceSelectionUI_Params.ReturnValue;
};

// Function Engine.OnlinePlayerInterfaceEx.ShowMembershipMarketplaceUI
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint8_t                        LocalUserNum                   (CPF_Parm)

bool UOnlinePlayerInterfaceEx::ShowMembershipMarketplaceUI(uint8_t LocalUserNum)
{
	static UFunction* uFnShowMembershipMarketplaceUI = nullptr;

	if (!uFnShowMembershipMarketplaceUI)
	{
		uFnShowMembershipMarketplaceUI = UFunction::FindFunction("Function Engine.OnlinePlayerInterfaceEx.ShowMembershipMarketplaceUI");
	}

	UOnlinePlayerInterfaceEx_execShowMembershipMarketplaceUI_Params ShowMembershipMarketplaceUI_Params;
	memset(&ShowMembershipMarketplaceUI_Params, 0, sizeof(ShowMembershipMarketplaceUI_Params));
	memcpy_s(&ShowMembershipMarketplaceUI_Params.LocalUserNum, sizeof(ShowMembershipMarketplaceUI_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));

	this->ProcessEvent(uFnShowMembershipMarketplaceUI, &ShowMembershipMarketplaceUI_Params, nullptr);

	return ShowMembershipMarketplaceUI_Params.ReturnValue;
};

// Function Engine.OnlinePlayerInterfaceEx.ShowContentMarketplaceUI
// [0x00024000] (FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint8_t                        LocalUserNum                   (CPF_Parm)
// int32_t                        CategoryMask                   (CPF_OptionalParm | CPF_Parm)
// int32_t                        OfferId                        (CPF_OptionalParm | CPF_Parm)

bool UOnlinePlayerInterfaceEx::ShowContentMarketplaceUI(uint8_t LocalUserNum, int32_t CategoryMask, int32_t OfferId)
{
	static UFunction* uFnShowContentMarketplaceUI = nullptr;

	if (!uFnShowContentMarketplaceUI)
	{
		uFnShowContentMarketplaceUI = UFunction::FindFunction("Function Engine.OnlinePlayerInterfaceEx.ShowContentMarketplaceUI");
	}

	UOnlinePlayerInterfaceEx_execShowContentMarketplaceUI_Params ShowContentMarketplaceUI_Params;
	memset(&ShowContentMarketplaceUI_Params, 0, sizeof(ShowContentMarketplaceUI_Params));
	memcpy_s(&ShowContentMarketplaceUI_Params.LocalUserNum, sizeof(ShowContentMarketplaceUI_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	memcpy_s(&ShowContentMarketplaceUI_Params.CategoryMask, sizeof(ShowContentMarketplaceUI_Params.CategoryMask), &CategoryMask, sizeof(CategoryMask));
	memcpy_s(&ShowContentMarketplaceUI_Params.OfferId, sizeof(ShowContentMarketplaceUI_Params.OfferId), &OfferId, sizeof(OfferId));

	this->ProcessEvent(uFnShowContentMarketplaceUI, &ShowContentMarketplaceUI_Params, nullptr);

	return ShowContentMarketplaceUI_Params.ReturnValue;
};

// Function Engine.OnlinePlayerInterfaceEx.ShowInviteUI
// [0x00024000] (FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint8_t                        LocalUserNum                   (CPF_Parm)
// class FString                  InviteText                     (CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink)

bool UOnlinePlayerInterfaceEx::ShowInviteUI(uint8_t LocalUserNum, const class FString& InviteText)
{
	static UFunction* uFnShowInviteUI = nullptr;

	if (!uFnShowInviteUI)
	{
		uFnShowInviteUI = UFunction::FindFunction("Function Engine.OnlinePlayerInterfaceEx.ShowInviteUI");
	}

	UOnlinePlayerInterfaceEx_execShowInviteUI_Params ShowInviteUI_Params;
	memset(&ShowInviteUI_Params, 0, sizeof(ShowInviteUI_Params));
	memcpy_s(&ShowInviteUI_Params.LocalUserNum, sizeof(ShowInviteUI_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	memcpy_s(&ShowInviteUI_Params.InviteText, sizeof(ShowInviteUI_Params.InviteText), &InviteText, sizeof(InviteText));

	this->ProcessEvent(uFnShowInviteUI, &ShowInviteUI_Params, nullptr);

	return ShowInviteUI_Params.ReturnValue;
};

// Function Engine.OnlinePlayerInterfaceEx.ShowAchievementsUI
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint8_t                        LocalUserNum                   (CPF_Parm)

bool UOnlinePlayerInterfaceEx::ShowAchievementsUI(uint8_t LocalUserNum)
{
	static UFunction* uFnShowAchievementsUI = nullptr;

	if (!uFnShowAchievementsUI)
	{
		uFnShowAchievementsUI = UFunction::FindFunction("Function Engine.OnlinePlayerInterfaceEx.ShowAchievementsUI");
	}

	UOnlinePlayerInterfaceEx_execShowAchievementsUI_Params ShowAchievementsUI_Params;
	memset(&ShowAchievementsUI_Params, 0, sizeof(ShowAchievementsUI_Params));
	memcpy_s(&ShowAchievementsUI_Params.LocalUserNum, sizeof(ShowAchievementsUI_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));

	this->ProcessEvent(uFnShowAchievementsUI, &ShowAchievementsUI_Params, nullptr);

	return ShowAchievementsUI_Params.ReturnValue;
};

// Function Engine.OnlinePlayerInterfaceEx.ShowMessagesUI
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint8_t                        LocalUserNum                   (CPF_Parm)

bool UOnlinePlayerInterfaceEx::ShowMessagesUI(uint8_t LocalUserNum)
{
	static UFunction* uFnShowMessagesUI = nullptr;

	if (!uFnShowMessagesUI)
	{
		uFnShowMessagesUI = UFunction::FindFunction("Function Engine.OnlinePlayerInterfaceEx.ShowMessagesUI");
	}

	UOnlinePlayerInterfaceEx_execShowMessagesUI_Params ShowMessagesUI_Params;
	memset(&ShowMessagesUI_Params, 0, sizeof(ShowMessagesUI_Params));
	memcpy_s(&ShowMessagesUI_Params.LocalUserNum, sizeof(ShowMessagesUI_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));

	this->ProcessEvent(uFnShowMessagesUI, &ShowMessagesUI_Params, nullptr);

	return ShowMessagesUI_Params.ReturnValue;
};

// Function Engine.OnlinePlayerInterfaceEx.ShowGamerCardUI
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint8_t                        LocalUserNum                   (CPF_Parm)
// struct FUniqueNetId            PlayerID                       (CPF_Parm)

bool UOnlinePlayerInterfaceEx::ShowGamerCardUI(uint8_t LocalUserNum, const struct FUniqueNetId& PlayerID)
{
	static UFunction* uFnShowGamerCardUI = nullptr;

	if (!uFnShowGamerCardUI)
	{
		uFnShowGamerCardUI = UFunction::FindFunction("Function Engine.OnlinePlayerInterfaceEx.ShowGamerCardUI");
	}

	UOnlinePlayerInterfaceEx_execShowGamerCardUI_Params ShowGamerCardUI_Params;
	memset(&ShowGamerCardUI_Params, 0, sizeof(ShowGamerCardUI_Params));
	memcpy_s(&ShowGamerCardUI_Params.LocalUserNum, sizeof(ShowGamerCardUI_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	memcpy_s(&ShowGamerCardUI_Params.PlayerID, sizeof(ShowGamerCardUI_Params.PlayerID), &PlayerID, sizeof(PlayerID));

	this->ProcessEvent(uFnShowGamerCardUI, &ShowGamerCardUI_Params, nullptr);

	return ShowGamerCardUI_Params.ReturnValue;
};

// Function Engine.OnlinePlayerInterfaceEx.ShowFeedbackUI
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint8_t                        LocalUserNum                   (CPF_Parm)
// struct FUniqueNetId            PlayerID                       (CPF_Parm)

bool UOnlinePlayerInterfaceEx::ShowFeedbackUI(uint8_t LocalUserNum, const struct FUniqueNetId& PlayerID)
{
	static UFunction* uFnShowFeedbackUI = nullptr;

	if (!uFnShowFeedbackUI)
	{
		uFnShowFeedbackUI = UFunction::FindFunction("Function Engine.OnlinePlayerInterfaceEx.ShowFeedbackUI");
	}

	UOnlinePlayerInterfaceEx_execShowFeedbackUI_Params ShowFeedbackUI_Params;
	memset(&ShowFeedbackUI_Params, 0, sizeof(ShowFeedbackUI_Params));
	memcpy_s(&ShowFeedbackUI_Params.LocalUserNum, sizeof(ShowFeedbackUI_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	memcpy_s(&ShowFeedbackUI_Params.PlayerID, sizeof(ShowFeedbackUI_Params.PlayerID), &PlayerID, sizeof(PlayerID));

	this->ProcessEvent(uFnShowFeedbackUI, &ShowFeedbackUI_Params, nullptr);

	return ShowFeedbackUI_Params.ReturnValue;
};

// Function Engine.OnlineAccountInterface.GetLocalAccountNames
// [0x00420000] (FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class TArray<class FString>    Accounts                       (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

bool UOnlineAccountInterface::GetLocalAccountNames(class TArray<class FString>& Accounts)
{
	static UFunction* uFnGetLocalAccountNames = nullptr;

	if (!uFnGetLocalAccountNames)
	{
		uFnGetLocalAccountNames = UFunction::FindFunction("Function Engine.OnlineAccountInterface.GetLocalAccountNames");
	}

	UOnlineAccountInterface_execGetLocalAccountNames_Params GetLocalAccountNames_Params;
	memset(&GetLocalAccountNames_Params, 0, sizeof(GetLocalAccountNames_Params));
	memcpy_s(&GetLocalAccountNames_Params.Accounts, sizeof(GetLocalAccountNames_Params.Accounts), &Accounts, sizeof(Accounts));

	this->ProcessEvent(uFnGetLocalAccountNames, &GetLocalAccountNames_Params, nullptr);

	memcpy_s(&Accounts, sizeof(Accounts), &GetLocalAccountNames_Params.Accounts, sizeof(GetLocalAccountNames_Params.Accounts));

	return GetLocalAccountNames_Params.ReturnValue;
};

// Function Engine.OnlineAccountInterface.DeleteLocalAccount
// [0x00024000] (FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FString                  UserName                       (CPF_Parm | CPF_NeedCtorLink)
// class FString                  Password                       (CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink)

bool UOnlineAccountInterface::DeleteLocalAccount(const class FString& UserName, const class FString& Password)
{
	static UFunction* uFnDeleteLocalAccount = nullptr;

	if (!uFnDeleteLocalAccount)
	{
		uFnDeleteLocalAccount = UFunction::FindFunction("Function Engine.OnlineAccountInterface.DeleteLocalAccount");
	}

	UOnlineAccountInterface_execDeleteLocalAccount_Params DeleteLocalAccount_Params;
	memset(&DeleteLocalAccount_Params, 0, sizeof(DeleteLocalAccount_Params));
	memcpy_s(&DeleteLocalAccount_Params.UserName, sizeof(DeleteLocalAccount_Params.UserName), &UserName, sizeof(UserName));
	memcpy_s(&DeleteLocalAccount_Params.Password, sizeof(DeleteLocalAccount_Params.Password), &Password, sizeof(Password));

	this->ProcessEvent(uFnDeleteLocalAccount, &DeleteLocalAccount_Params, nullptr);

	return DeleteLocalAccount_Params.ReturnValue;
};

// Function Engine.OnlineAccountInterface.RenameLocalAccount
// [0x00024000] (FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FString                  NewUserName                    (CPF_Parm | CPF_NeedCtorLink)
// class FString                  OldUserName                    (CPF_Parm | CPF_NeedCtorLink)
// class FString                  Password                       (CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink)

bool UOnlineAccountInterface::RenameLocalAccount(const class FString& NewUserName, const class FString& OldUserName, const class FString& Password)
{
	static UFunction* uFnRenameLocalAccount = nullptr;

	if (!uFnRenameLocalAccount)
	{
		uFnRenameLocalAccount = UFunction::FindFunction("Function Engine.OnlineAccountInterface.RenameLocalAccount");
	}

	UOnlineAccountInterface_execRenameLocalAccount_Params RenameLocalAccount_Params;
	memset(&RenameLocalAccount_Params, 0, sizeof(RenameLocalAccount_Params));
	memcpy_s(&RenameLocalAccount_Params.NewUserName, sizeof(RenameLocalAccount_Params.NewUserName), &NewUserName, sizeof(NewUserName));
	memcpy_s(&RenameLocalAccount_Params.OldUserName, sizeof(RenameLocalAccount_Params.OldUserName), &OldUserName, sizeof(OldUserName));
	memcpy_s(&RenameLocalAccount_Params.Password, sizeof(RenameLocalAccount_Params.Password), &Password, sizeof(Password));

	this->ProcessEvent(uFnRenameLocalAccount, &RenameLocalAccount_Params, nullptr);

	return RenameLocalAccount_Params.ReturnValue;
};

// Function Engine.OnlineAccountInterface.CreateLocalAccount
// [0x00024000] (FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FString                  UserName                       (CPF_Parm | CPF_NeedCtorLink)
// class FString                  Password                       (CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink)

bool UOnlineAccountInterface::CreateLocalAccount(const class FString& UserName, const class FString& Password)
{
	static UFunction* uFnCreateLocalAccount = nullptr;

	if (!uFnCreateLocalAccount)
	{
		uFnCreateLocalAccount = UFunction::FindFunction("Function Engine.OnlineAccountInterface.CreateLocalAccount");
	}

	UOnlineAccountInterface_execCreateLocalAccount_Params CreateLocalAccount_Params;
	memset(&CreateLocalAccount_Params, 0, sizeof(CreateLocalAccount_Params));
	memcpy_s(&CreateLocalAccount_Params.UserName, sizeof(CreateLocalAccount_Params.UserName), &UserName, sizeof(UserName));
	memcpy_s(&CreateLocalAccount_Params.Password, sizeof(CreateLocalAccount_Params.Password), &Password, sizeof(Password));

	this->ProcessEvent(uFnCreateLocalAccount, &CreateLocalAccount_Params, nullptr);

	return CreateLocalAccount_Params.ReturnValue;
};

// Function Engine.OnlineAccountInterface.ClearCreateOnlineAccountCompletedDelegate
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FScriptDelegate         AccountCreateDelegate          (CPF_Parm | CPF_NeedCtorLink)

void UOnlineAccountInterface::ClearCreateOnlineAccountCompletedDelegate(const struct FScriptDelegate& AccountCreateDelegate)
{
	static UFunction* uFnClearCreateOnlineAccountCompletedDelegate = nullptr;

	if (!uFnClearCreateOnlineAccountCompletedDelegate)
	{
		uFnClearCreateOnlineAccountCompletedDelegate = UFunction::FindFunction("Function Engine.OnlineAccountInterface.ClearCreateOnlineAccountCompletedDelegate");
	}

	UOnlineAccountInterface_execClearCreateOnlineAccountCompletedDelegate_Params ClearCreateOnlineAccountCompletedDelegate_Params;
	memset(&ClearCreateOnlineAccountCompletedDelegate_Params, 0, sizeof(ClearCreateOnlineAccountCompletedDelegate_Params));
	memcpy_s(&ClearCreateOnlineAccountCompletedDelegate_Params.AccountCreateDelegate, sizeof(ClearCreateOnlineAccountCompletedDelegate_Params.AccountCreateDelegate), &AccountCreateDelegate, sizeof(AccountCreateDelegate));

	this->ProcessEvent(uFnClearCreateOnlineAccountCompletedDelegate, &ClearCreateOnlineAccountCompletedDelegate_Params, nullptr);
};

// Function Engine.OnlineAccountInterface.AddCreateOnlineAccountCompletedDelegate
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FScriptDelegate         AccountCreateDelegate          (CPF_Parm | CPF_NeedCtorLink)

void UOnlineAccountInterface::AddCreateOnlineAccountCompletedDelegate(const struct FScriptDelegate& AccountCreateDelegate)
{
	static UFunction* uFnAddCreateOnlineAccountCompletedDelegate = nullptr;

	if (!uFnAddCreateOnlineAccountCompletedDelegate)
	{
		uFnAddCreateOnlineAccountCompletedDelegate = UFunction::FindFunction("Function Engine.OnlineAccountInterface.AddCreateOnlineAccountCompletedDelegate");
	}

	UOnlineAccountInterface_execAddCreateOnlineAccountCompletedDelegate_Params AddCreateOnlineAccountCompletedDelegate_Params;
	memset(&AddCreateOnlineAccountCompletedDelegate_Params, 0, sizeof(AddCreateOnlineAccountCompletedDelegate_Params));
	memcpy_s(&AddCreateOnlineAccountCompletedDelegate_Params.AccountCreateDelegate, sizeof(AddCreateOnlineAccountCompletedDelegate_Params.AccountCreateDelegate), &AccountCreateDelegate, sizeof(AccountCreateDelegate));

	this->ProcessEvent(uFnAddCreateOnlineAccountCompletedDelegate, &AddCreateOnlineAccountCompletedDelegate_Params, nullptr);
};

// Function Engine.OnlineAccountInterface.OnCreateOnlineAccountCompleted
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// EOnlineAccountCreateStatus     ErrorStatus                    (CPF_Parm)

void UOnlineAccountInterface::OnCreateOnlineAccountCompleted(EOnlineAccountCreateStatus ErrorStatus)
{
	static UFunction* uFnOnCreateOnlineAccountCompleted = nullptr;

	if (!uFnOnCreateOnlineAccountCompleted)
	{
		uFnOnCreateOnlineAccountCompleted = UFunction::FindFunction("Function Engine.OnlineAccountInterface.OnCreateOnlineAccountCompleted");
	}

	UOnlineAccountInterface_execOnCreateOnlineAccountCompleted_Params OnCreateOnlineAccountCompleted_Params;
	memset(&OnCreateOnlineAccountCompleted_Params, 0, sizeof(OnCreateOnlineAccountCompleted_Params));
	memcpy_s(&OnCreateOnlineAccountCompleted_Params.ErrorStatus, sizeof(OnCreateOnlineAccountCompleted_Params.ErrorStatus), &ErrorStatus, sizeof(ErrorStatus));

	this->ProcessEvent(uFnOnCreateOnlineAccountCompleted, &OnCreateOnlineAccountCompleted_Params, nullptr);
};

// Function Engine.OnlineAccountInterface.CreateOnlineAccount
// [0x00024000] (FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FString                  UserName                       (CPF_Parm | CPF_NeedCtorLink)
// class FString                  Password                       (CPF_Parm | CPF_NeedCtorLink)
// class FString                  EmailAddress                   (CPF_Parm | CPF_NeedCtorLink)
// class FString                  ProductKey                     (CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink)

bool UOnlineAccountInterface::CreateOnlineAccount(const class FString& UserName, const class FString& Password, const class FString& EmailAddress, const class FString& ProductKey)
{
	static UFunction* uFnCreateOnlineAccount = nullptr;

	if (!uFnCreateOnlineAccount)
	{
		uFnCreateOnlineAccount = UFunction::FindFunction("Function Engine.OnlineAccountInterface.CreateOnlineAccount");
	}

	UOnlineAccountInterface_execCreateOnlineAccount_Params CreateOnlineAccount_Params;
	memset(&CreateOnlineAccount_Params, 0, sizeof(CreateOnlineAccount_Params));
	memcpy_s(&CreateOnlineAccount_Params.UserName, sizeof(CreateOnlineAccount_Params.UserName), &UserName, sizeof(UserName));
	memcpy_s(&CreateOnlineAccount_Params.Password, sizeof(CreateOnlineAccount_Params.Password), &Password, sizeof(Password));
	memcpy_s(&CreateOnlineAccount_Params.EmailAddress, sizeof(CreateOnlineAccount_Params.EmailAddress), &EmailAddress, sizeof(EmailAddress));
	memcpy_s(&CreateOnlineAccount_Params.ProductKey, sizeof(CreateOnlineAccount_Params.ProductKey), &ProductKey, sizeof(ProductKey));

	this->ProcessEvent(uFnCreateOnlineAccount, &CreateOnlineAccount_Params, nullptr);

	return CreateOnlineAccount_Params.ReturnValue;
};

// Function Engine.SeqAct_ToggleGodMode.IsValidUISequenceObject
// [0x00024802] (FUNC_Defined | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UUIScreenObject*         TargetObject                   (CPF_OptionalParm | CPF_Parm)

bool USeqAct_ToggleGodMode::eventIsValidUISequenceObject(class UUIScreenObject* TargetObject)
{
	static UFunction* uFnIsValidUISequenceObject = nullptr;

	if (!uFnIsValidUISequenceObject)
	{
		uFnIsValidUISequenceObject = UFunction::FindFunction("Function Engine.SeqAct_ToggleGodMode.IsValidUISequenceObject");
	}

	USeqAct_ToggleGodMode_eventIsValidUISequenceObject_Params IsValidUISequenceObject_Params;
	memset(&IsValidUISequenceObject_Params, 0, sizeof(IsValidUISequenceObject_Params));
	IsValidUISequenceObject_Params.TargetObject = TargetObject;

	this->ProcessEvent(uFnIsValidUISequenceObject, &IsValidUISequenceObject_Params, nullptr);

	return IsValidUISequenceObject_Params.ReturnValue;
};

// Function Engine.SeqAct_ToggleAffectedByHitEffects.IsValidUISequenceObject
// [0x00024802] (FUNC_Defined | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UUIScreenObject*         TargetObject                   (CPF_OptionalParm | CPF_Parm)

bool USeqAct_ToggleAffectedByHitEffects::eventIsValidUISequenceObject(class UUIScreenObject* TargetObject)
{
	static UFunction* uFnIsValidUISequenceObject = nullptr;

	if (!uFnIsValidUISequenceObject)
	{
		uFnIsValidUISequenceObject = UFunction::FindFunction("Function Engine.SeqAct_ToggleAffectedByHitEffects.IsValidUISequenceObject");
	}

	USeqAct_ToggleAffectedByHitEffects_eventIsValidUISequenceObject_Params IsValidUISequenceObject_Params;
	memset(&IsValidUISequenceObject_Params, 0, sizeof(IsValidUISequenceObject_Params));
	IsValidUISequenceObject_Params.TargetObject = TargetObject;

	this->ProcessEvent(uFnIsValidUISequenceObject, &IsValidUISequenceObject_Params, nullptr);

	return IsValidUISequenceObject_Params.ReturnValue;
};

// Function Engine.SeqAct_ControlMovieTexture.Activated
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void USeqAct_ControlMovieTexture::eventActivated()
{
	static UFunction* uFnActivated = nullptr;

	if (!uFnActivated)
	{
		uFnActivated = UFunction::FindFunction("Function Engine.SeqAct_ControlMovieTexture.Activated");
	}

	USeqAct_ControlMovieTexture_eventActivated_Params Activated_Params;
	memset(&Activated_Params, 0, sizeof(Activated_Params));

	this->ProcessEvent(uFnActivated, &Activated_Params, nullptr);
};

// Function Engine.GameMessage.GetString
// [0x00026002] (FUNC_Defined | FUNC_Static | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)
// int32_t                        Switch                         (CPF_OptionalParm | CPF_Parm)
// uint32_t                       bPRI1HUD                       (CPF_OptionalParm | CPF_Parm)
// class UObject*                 OptionalObject                 (CPF_OptionalParm | CPF_Parm)

class FString UGameMessage::GetString(int32_t Switch, bool bPRI1HUD, class UObject* OptionalObject)
{
	static UFunction* uFnGetString = nullptr;

	if (!uFnGetString)
	{
		uFnGetString = UFunction::FindFunction("Function Engine.GameMessage.GetString");
	}

	UGameMessage_execGetString_Params GetString_Params;
	memset(&GetString_Params, 0, sizeof(GetString_Params));
	memcpy_s(&GetString_Params.Switch, sizeof(GetString_Params.Switch), &Switch, sizeof(Switch));
	GetString_Params.bPRI1HUD = bPRI1HUD;
	GetString_Params.OptionalObject = OptionalObject;

	UGameMessage::StaticClass()->ProcessEvent(uFnGetString, &GetString_Params, nullptr);

	return GetString_Params.ReturnValue;
};

// Function Engine.SeqAct_ToggleInput.IsValidUISequenceObject
// [0x00024802] (FUNC_Defined | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UUIScreenObject*         TargetObject                   (CPF_OptionalParm | CPF_Parm)

bool USeqAct_ToggleInput::eventIsValidUISequenceObject(class UUIScreenObject* TargetObject)
{
	static UFunction* uFnIsValidUISequenceObject = nullptr;

	if (!uFnIsValidUISequenceObject)
	{
		uFnIsValidUISequenceObject = UFunction::FindFunction("Function Engine.SeqAct_ToggleInput.IsValidUISequenceObject");
	}

	USeqAct_ToggleInput_eventIsValidUISequenceObject_Params IsValidUISequenceObject_Params;
	memset(&IsValidUISequenceObject_Params, 0, sizeof(IsValidUISequenceObject_Params));
	IsValidUISequenceObject_Params.TargetObject = TargetObject;

	this->ProcessEvent(uFnIsValidUISequenceObject, &IsValidUISequenceObject_Params, nullptr);

	return IsValidUISequenceObject_Params.ReturnValue;
};

// Function Engine.SeqAct_ToggleHUD.GetObjClassVersion
// [0x00022802] (FUNC_Defined | FUNC_Event | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t USeqAct_ToggleHUD::eventGetObjClassVersion()
{
	static UFunction* uFnGetObjClassVersion = nullptr;

	if (!uFnGetObjClassVersion)
	{
		uFnGetObjClassVersion = UFunction::FindFunction("Function Engine.SeqAct_ToggleHUD.GetObjClassVersion");
	}

	USeqAct_ToggleHUD_eventGetObjClassVersion_Params GetObjClassVersion_Params;
	memset(&GetObjClassVersion_Params, 0, sizeof(GetObjClassVersion_Params));

	USeqAct_ToggleHUD::StaticClass()->ProcessEvent(uFnGetObjClassVersion, &GetObjClassVersion_Params, nullptr);

	return GetObjClassVersion_Params.ReturnValue;
};

// Function Engine.SeqAct_ToggleHUD.IsValidUISequenceObject
// [0x00024802] (FUNC_Defined | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UUIScreenObject*         TargetObject                   (CPF_OptionalParm | CPF_Parm)

bool USeqAct_ToggleHUD::eventIsValidUISequenceObject(class UUIScreenObject* TargetObject)
{
	static UFunction* uFnIsValidUISequenceObject = nullptr;

	if (!uFnIsValidUISequenceObject)
	{
		uFnIsValidUISequenceObject = UFunction::FindFunction("Function Engine.SeqAct_ToggleHUD.IsValidUISequenceObject");
	}

	USeqAct_ToggleHUD_eventIsValidUISequenceObject_Params IsValidUISequenceObject_Params;
	memset(&IsValidUISequenceObject_Params, 0, sizeof(IsValidUISequenceObject_Params));
	IsValidUISequenceObject_Params.TargetObject = TargetObject;

	this->ProcessEvent(uFnIsValidUISequenceObject, &IsValidUISequenceObject_Params, nullptr);

	return IsValidUISequenceObject_Params.ReturnValue;
};

// Function Engine.SeqAct_ToggleCinematicMode.IsValidUISequenceObject
// [0x00024802] (FUNC_Defined | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UUIScreenObject*         TargetObject                   (CPF_OptionalParm | CPF_Parm)

bool USeqAct_ToggleCinematicMode::eventIsValidUISequenceObject(class UUIScreenObject* TargetObject)
{
	static UFunction* uFnIsValidUISequenceObject = nullptr;

	if (!uFnIsValidUISequenceObject)
	{
		uFnIsValidUISequenceObject = UFunction::FindFunction("Function Engine.SeqAct_ToggleCinematicMode.IsValidUISequenceObject");
	}

	USeqAct_ToggleCinematicMode_eventIsValidUISequenceObject_Params IsValidUISequenceObject_Params;
	memset(&IsValidUISequenceObject_Params, 0, sizeof(IsValidUISequenceObject_Params));
	IsValidUISequenceObject_Params.TargetObject = TargetObject;

	this->ProcessEvent(uFnIsValidUISequenceObject, &IsValidUISequenceObject_Params, nullptr);

	return IsValidUISequenceObject_Params.ReturnValue;
};

// Function Engine.SeqAct_ConsoleCommand.GetObjClassVersion
// [0x00022802] (FUNC_Defined | FUNC_Event | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t USeqAct_ConsoleCommand::eventGetObjClassVersion()
{
	static UFunction* uFnGetObjClassVersion = nullptr;

	if (!uFnGetObjClassVersion)
	{
		uFnGetObjClassVersion = UFunction::FindFunction("Function Engine.SeqAct_ConsoleCommand.GetObjClassVersion");
	}

	USeqAct_ConsoleCommand_eventGetObjClassVersion_Params GetObjClassVersion_Params;
	memset(&GetObjClassVersion_Params, 0, sizeof(GetObjClassVersion_Params));

	USeqAct_ConsoleCommand::StaticClass()->ProcessEvent(uFnGetObjClassVersion, &GetObjClassVersion_Params, nullptr);

	return GetObjClassVersion_Params.ReturnValue;
};

// Function Engine.SeqAct_ConsoleCommand.VersionUpdated
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        OldVersion                     (CPF_Parm)
// int32_t                        NewVersion                     (CPF_Parm)

void USeqAct_ConsoleCommand::VersionUpdated(int32_t OldVersion, int32_t NewVersion)
{
	static UFunction* uFnVersionUpdated = nullptr;

	if (!uFnVersionUpdated)
	{
		uFnVersionUpdated = UFunction::FindFunction("Function Engine.SeqAct_ConsoleCommand.VersionUpdated");
	}

	USeqAct_ConsoleCommand_execVersionUpdated_Params VersionUpdated_Params;
	memset(&VersionUpdated_Params, 0, sizeof(VersionUpdated_Params));
	memcpy_s(&VersionUpdated_Params.OldVersion, sizeof(VersionUpdated_Params.OldVersion), &OldVersion, sizeof(OldVersion));
	memcpy_s(&VersionUpdated_Params.NewVersion, sizeof(VersionUpdated_Params.NewVersion), &NewVersion, sizeof(NewVersion));

	this->ProcessEvent(uFnVersionUpdated, &VersionUpdated_Params, nullptr);
};

// Function Engine.DebugCameraHUD.PostRender
// [0x00820802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:

void ADebugCameraHUD::eventPostRender()
{
	static UFunction* uFnPostRender = nullptr;

	if (!uFnPostRender)
	{
		uFnPostRender = UFunction::FindFunction("Function Engine.DebugCameraHUD.PostRender");
	}

	ADebugCameraHUD_eventPostRender_Params PostRender_Params;
	memset(&PostRender_Params, 0, sizeof(PostRender_Params));

	this->ProcessEvent(uFnPostRender, &PostRender_Params, nullptr);
};

// Function Engine.DebugCameraHUD.DisplayMaterials
// [0x00420002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// float                          X                              (CPF_Parm)
// float                          DY                             (CPF_Parm)
// class UMeshComponent*          MeshComp                       (CPF_Parm | CPF_EditInline)
// float                          Y                              (CPF_Parm | CPF_OutParm)

bool ADebugCameraHUD::DisplayMaterials(float X, float DY, class UMeshComponent* MeshComp, float& Y)
{
	static UFunction* uFnDisplayMaterials = nullptr;

	if (!uFnDisplayMaterials)
	{
		uFnDisplayMaterials = UFunction::FindFunction("Function Engine.DebugCameraHUD.DisplayMaterials");
	}

	ADebugCameraHUD_execDisplayMaterials_Params DisplayMaterials_Params;
	memset(&DisplayMaterials_Params, 0, sizeof(DisplayMaterials_Params));
	memcpy_s(&DisplayMaterials_Params.X, sizeof(DisplayMaterials_Params.X), &X, sizeof(X));
	memcpy_s(&DisplayMaterials_Params.DY, sizeof(DisplayMaterials_Params.DY), &DY, sizeof(DY));
	DisplayMaterials_Params.MeshComp = MeshComp;
	memcpy_s(&DisplayMaterials_Params.Y, sizeof(DisplayMaterials_Params.Y), &Y, sizeof(Y));

	this->ProcessEvent(uFnDisplayMaterials, &DisplayMaterials_Params, nullptr);

	memcpy_s(&Y, sizeof(Y), &DisplayMaterials_Params.Y, sizeof(DisplayMaterials_Params.Y));

	return DisplayMaterials_Params.ReturnValue;
};

// Function Engine.DebugCameraHUD.PostBeginPlay
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void ADebugCameraHUD::eventPostBeginPlay()
{
	static UFunction* uFnPostBeginPlay = nullptr;

	if (!uFnPostBeginPlay)
	{
		uFnPostBeginPlay = UFunction::FindFunction("Function Engine.DebugCameraHUD.PostBeginPlay");
	}

	ADebugCameraHUD_eventPostBeginPlay_Params PostBeginPlay_Params;
	memset(&PostBeginPlay_Params, 0, sizeof(PostBeginPlay_Params));

	this->ProcessEvent(uFnPostBeginPlay, &PostBeginPlay_Params, nullptr);
};

// Function Engine.DebugCameraInput.InputKey
// [0x00024002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        ControllerId                   (CPF_Parm)
// class FName                    Key                            (CPF_Parm)
// EInputEvent                    Event                          (CPF_Parm)
// float                          AmountDepressed                (CPF_OptionalParm | CPF_Parm)
// uint32_t                       bGamepad                       (CPF_OptionalParm | CPF_Parm)

bool UDebugCameraInput::InputKey(int32_t ControllerId, const class FName& Key, EInputEvent Event, float AmountDepressed, bool bGamepad)
{
	static UFunction* uFnInputKey = nullptr;

	if (!uFnInputKey)
	{
		uFnInputKey = UFunction::FindFunction("Function Engine.DebugCameraInput.InputKey");
	}

	UDebugCameraInput_execInputKey_Params InputKey_Params;
	memset(&InputKey_Params, 0, sizeof(InputKey_Params));
	memcpy_s(&InputKey_Params.ControllerId, sizeof(InputKey_Params.ControllerId), &ControllerId, sizeof(ControllerId));
	memcpy_s(&InputKey_Params.Key, sizeof(InputKey_Params.Key), &Key, sizeof(Key));
	memcpy_s(&InputKey_Params.Event, sizeof(InputKey_Params.Event), &Event, sizeof(Event));
	memcpy_s(&InputKey_Params.AmountDepressed, sizeof(InputKey_Params.AmountDepressed), &AmountDepressed, sizeof(AmountDepressed));
	InputKey_Params.bGamepad = bGamepad;

	this->ProcessEvent(uFnInputKey, &InputKey_Params, nullptr);

	return InputKey_Params.ReturnValue;
};

// Function Engine.VolumeTimer.Timer
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AVolumeTimer::eventTimer()
{
	static UFunction* uFnTimer = nullptr;

	if (!uFnTimer)
	{
		uFnTimer = UFunction::FindFunction("Function Engine.VolumeTimer.Timer");
	}

	AVolumeTimer_eventTimer_Params Timer_Params;
	memset(&Timer_Params, 0, sizeof(Timer_Params));

	this->ProcessEvent(uFnTimer, &Timer_Params, nullptr);
};

// Function Engine.VolumeTimer.PostBeginPlay
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AVolumeTimer::eventPostBeginPlay()
{
	static UFunction* uFnPostBeginPlay = nullptr;

	if (!uFnPostBeginPlay)
	{
		uFnPostBeginPlay = UFunction::FindFunction("Function Engine.VolumeTimer.PostBeginPlay");
	}

	AVolumeTimer_eventPostBeginPlay_Params PostBeginPlay_Params;
	memset(&PostBeginPlay_Params, 0, sizeof(PostBeginPlay_Params));

	this->ProcessEvent(uFnPostBeginPlay, &PostBeginPlay_Params, nullptr);
};

// Function Engine.DynamicPhysicsVolume.PostBeginPlay
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void ADynamicPhysicsVolume::eventPostBeginPlay()
{
	static UFunction* uFnPostBeginPlay = nullptr;

	if (!uFnPostBeginPlay)
	{
		uFnPostBeginPlay = UFunction::FindFunction("Function Engine.DynamicPhysicsVolume.PostBeginPlay");
	}

	ADynamicPhysicsVolume_eventPostBeginPlay_Params PostBeginPlay_Params;
	memset(&PostBeginPlay_Params, 0, sizeof(PostBeginPlay_Params));

	this->ProcessEvent(uFnPostBeginPlay, &PostBeginPlay_Params, nullptr);
};

// Function Engine.DynamicTriggerVolume.PostBeginPlay
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void ADynamicTriggerVolume::eventPostBeginPlay()
{
	static UFunction* uFnPostBeginPlay = nullptr;

	if (!uFnPostBeginPlay)
	{
		uFnPostBeginPlay = UFunction::FindFunction("Function Engine.DynamicTriggerVolume.PostBeginPlay");
	}

	ADynamicTriggerVolume_eventPostBeginPlay_Params PostBeginPlay_Params;
	memset(&PostBeginPlay_Params, 0, sizeof(PostBeginPlay_Params));

	this->ProcessEvent(uFnPostBeginPlay, &PostBeginPlay_Params, nullptr);
};

// Function Engine.FailedConnect.GetString
// [0x00026002] (FUNC_Defined | FUNC_Static | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)
// int32_t                        Switch                         (CPF_OptionalParm | CPF_Parm)
// uint32_t                       bPRI1HUD                       (CPF_OptionalParm | CPF_Parm)
// class UObject*                 OptionalObject                 (CPF_OptionalParm | CPF_Parm)

class FString UFailedConnect::GetString(int32_t Switch, bool bPRI1HUD, class UObject* OptionalObject)
{
	static UFunction* uFnGetString = nullptr;

	if (!uFnGetString)
	{
		uFnGetString = UFunction::FindFunction("Function Engine.FailedConnect.GetString");
	}

	UFailedConnect_execGetString_Params GetString_Params;
	memset(&GetString_Params, 0, sizeof(GetString_Params));
	memcpy_s(&GetString_Params.Switch, sizeof(GetString_Params.Switch), &Switch, sizeof(Switch));
	GetString_Params.bPRI1HUD = bPRI1HUD;
	GetString_Params.OptionalObject = OptionalObject;

	UFailedConnect::StaticClass()->ProcessEvent(uFnGetString, &GetString_Params, nullptr);

	return GetString_Params.ReturnValue;
};

// Function Engine.FailedConnect.GetFailSwitch
// [0x00022002] (FUNC_Defined | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FString                  FailString                     (CPF_Parm | CPF_NeedCtorLink)

int32_t UFailedConnect::GetFailSwitch(const class FString& FailString)
{
	static UFunction* uFnGetFailSwitch = nullptr;

	if (!uFnGetFailSwitch)
	{
		uFnGetFailSwitch = UFunction::FindFunction("Function Engine.FailedConnect.GetFailSwitch");
	}

	UFailedConnect_execGetFailSwitch_Params GetFailSwitch_Params;
	memset(&GetFailSwitch_Params, 0, sizeof(GetFailSwitch_Params));
	memcpy_s(&GetFailSwitch_Params.FailString, sizeof(GetFailSwitch_Params.FailString), &FailString, sizeof(FailString));

	UFailedConnect::StaticClass()->ProcessEvent(uFnGetFailSwitch, &GetFailSwitch_Params, nullptr);

	return GetFailSwitch_Params.ReturnValue;
};

// Function Engine.OnlineCommunityContentInterface.RateContent
// [0x00420000] (FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// uint8_t                        PlayerNum                      (CPF_Parm)
// int32_t                        NewRating                      (CPF_Parm)
// struct FCommunityContentFile   FileToRate                     (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void UOnlineCommunityContentInterface::RateContent(uint8_t PlayerNum, int32_t NewRating, struct FCommunityContentFile& FileToRate)
{
	static UFunction* uFnRateContent = nullptr;

	if (!uFnRateContent)
	{
		uFnRateContent = UFunction::FindFunction("Function Engine.OnlineCommunityContentInterface.RateContent");
	}

	UOnlineCommunityContentInterface_execRateContent_Params RateContent_Params;
	memset(&RateContent_Params, 0, sizeof(RateContent_Params));
	memcpy_s(&RateContent_Params.PlayerNum, sizeof(RateContent_Params.PlayerNum), &PlayerNum, sizeof(PlayerNum));
	memcpy_s(&RateContent_Params.NewRating, sizeof(RateContent_Params.NewRating), &NewRating, sizeof(NewRating));
	memcpy_s(&RateContent_Params.FileToRate, sizeof(RateContent_Params.FileToRate), &FileToRate, sizeof(FileToRate));

	this->ProcessEvent(uFnRateContent, &RateContent_Params, nullptr);

	memcpy_s(&FileToRate, sizeof(FileToRate), &RateContent_Params.FileToRate, sizeof(RateContent_Params.FileToRate));
};

// Function Engine.OnlineCommunityContentInterface.ClearGetContentPayloadCompleteDelegate
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FScriptDelegate         GetContentPayloadCompleteDelegate (CPF_Parm | CPF_NeedCtorLink)

void UOnlineCommunityContentInterface::ClearGetContentPayloadCompleteDelegate(const struct FScriptDelegate& GetContentPayloadCompleteDelegate)
{
	static UFunction* uFnClearGetContentPayloadCompleteDelegate = nullptr;

	if (!uFnClearGetContentPayloadCompleteDelegate)
	{
		uFnClearGetContentPayloadCompleteDelegate = UFunction::FindFunction("Function Engine.OnlineCommunityContentInterface.ClearGetContentPayloadCompleteDelegate");
	}

	UOnlineCommunityContentInterface_execClearGetContentPayloadCompleteDelegate_Params ClearGetContentPayloadCompleteDelegate_Params;
	memset(&ClearGetContentPayloadCompleteDelegate_Params, 0, sizeof(ClearGetContentPayloadCompleteDelegate_Params));
	memcpy_s(&ClearGetContentPayloadCompleteDelegate_Params.GetContentPayloadCompleteDelegate, sizeof(ClearGetContentPayloadCompleteDelegate_Params.GetContentPayloadCompleteDelegate), &GetContentPayloadCompleteDelegate, sizeof(GetContentPayloadCompleteDelegate));

	this->ProcessEvent(uFnClearGetContentPayloadCompleteDelegate, &ClearGetContentPayloadCompleteDelegate_Params, nullptr);
};

// Function Engine.OnlineCommunityContentInterface.AddGetContentPayloadCompleteDelegate
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FScriptDelegate         GetContentPayloadCompleteDelegate (CPF_Parm | CPF_NeedCtorLink)

void UOnlineCommunityContentInterface::AddGetContentPayloadCompleteDelegate(const struct FScriptDelegate& GetContentPayloadCompleteDelegate)
{
	static UFunction* uFnAddGetContentPayloadCompleteDelegate = nullptr;

	if (!uFnAddGetContentPayloadCompleteDelegate)
	{
		uFnAddGetContentPayloadCompleteDelegate = UFunction::FindFunction("Function Engine.OnlineCommunityContentInterface.AddGetContentPayloadCompleteDelegate");
	}

	UOnlineCommunityContentInterface_execAddGetContentPayloadCompleteDelegate_Params AddGetContentPayloadCompleteDelegate_Params;
	memset(&AddGetContentPayloadCompleteDelegate_Params, 0, sizeof(AddGetContentPayloadCompleteDelegate_Params));
	memcpy_s(&AddGetContentPayloadCompleteDelegate_Params.GetContentPayloadCompleteDelegate, sizeof(AddGetContentPayloadCompleteDelegate_Params.GetContentPayloadCompleteDelegate), &GetContentPayloadCompleteDelegate, sizeof(GetContentPayloadCompleteDelegate));

	this->ProcessEvent(uFnAddGetContentPayloadCompleteDelegate, &AddGetContentPayloadCompleteDelegate_Params, nullptr);
};

// Function Engine.OnlineCommunityContentInterface.OnGetContentPayloadComplete
// [0x00520000] (FUNC_Public | FUNC_Delegate | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bWasSuccessful                 (CPF_Parm)
// struct FCommunityContentFile   FileDownloaded                 (CPF_Parm | CPF_NeedCtorLink)
// class TArray<uint8_t>          Payload                        (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void UOnlineCommunityContentInterface::OnGetContentPayloadComplete(bool bWasSuccessful, const struct FCommunityContentFile& FileDownloaded, class TArray<uint8_t>& Payload)
{
	static UFunction* uFnOnGetContentPayloadComplete = nullptr;

	if (!uFnOnGetContentPayloadComplete)
	{
		uFnOnGetContentPayloadComplete = UFunction::FindFunction("Function Engine.OnlineCommunityContentInterface.OnGetContentPayloadComplete");
	}

	UOnlineCommunityContentInterface_execOnGetContentPayloadComplete_Params OnGetContentPayloadComplete_Params;
	memset(&OnGetContentPayloadComplete_Params, 0, sizeof(OnGetContentPayloadComplete_Params));
	OnGetContentPayloadComplete_Params.bWasSuccessful = bWasSuccessful;
	memcpy_s(&OnGetContentPayloadComplete_Params.FileDownloaded, sizeof(OnGetContentPayloadComplete_Params.FileDownloaded), &FileDownloaded, sizeof(FileDownloaded));
	memcpy_s(&OnGetContentPayloadComplete_Params.Payload, sizeof(OnGetContentPayloadComplete_Params.Payload), &Payload, sizeof(Payload));

	this->ProcessEvent(uFnOnGetContentPayloadComplete, &OnGetContentPayloadComplete_Params, nullptr);

	memcpy_s(&Payload, sizeof(Payload), &OnGetContentPayloadComplete_Params.Payload, sizeof(OnGetContentPayloadComplete_Params.Payload));
};

// Function Engine.OnlineCommunityContentInterface.GetContentPayload
// [0x00420000] (FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint8_t                        PlayerNum                      (CPF_Parm)
// struct FCommunityContentFile   FileDownloaded                 (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

bool UOnlineCommunityContentInterface::GetContentPayload(uint8_t PlayerNum, struct FCommunityContentFile& FileDownloaded)
{
	static UFunction* uFnGetContentPayload = nullptr;

	if (!uFnGetContentPayload)
	{
		uFnGetContentPayload = UFunction::FindFunction("Function Engine.OnlineCommunityContentInterface.GetContentPayload");
	}

	UOnlineCommunityContentInterface_execGetContentPayload_Params GetContentPayload_Params;
	memset(&GetContentPayload_Params, 0, sizeof(GetContentPayload_Params));
	memcpy_s(&GetContentPayload_Params.PlayerNum, sizeof(GetContentPayload_Params.PlayerNum), &PlayerNum, sizeof(PlayerNum));
	memcpy_s(&GetContentPayload_Params.FileDownloaded, sizeof(GetContentPayload_Params.FileDownloaded), &FileDownloaded, sizeof(FileDownloaded));

	this->ProcessEvent(uFnGetContentPayload, &GetContentPayload_Params, nullptr);

	memcpy_s(&FileDownloaded, sizeof(FileDownloaded), &GetContentPayload_Params.FileDownloaded, sizeof(GetContentPayload_Params.FileDownloaded));

	return GetContentPayload_Params.ReturnValue;
};

// Function Engine.OnlineCommunityContentInterface.ClearDownloadContentCompleteDelegate
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FScriptDelegate         DownloadContentCompleteDelegate (CPF_Parm | CPF_NeedCtorLink)

void UOnlineCommunityContentInterface::ClearDownloadContentCompleteDelegate(const struct FScriptDelegate& DownloadContentCompleteDelegate)
{
	static UFunction* uFnClearDownloadContentCompleteDelegate = nullptr;

	if (!uFnClearDownloadContentCompleteDelegate)
	{
		uFnClearDownloadContentCompleteDelegate = UFunction::FindFunction("Function Engine.OnlineCommunityContentInterface.ClearDownloadContentCompleteDelegate");
	}

	UOnlineCommunityContentInterface_execClearDownloadContentCompleteDelegate_Params ClearDownloadContentCompleteDelegate_Params;
	memset(&ClearDownloadContentCompleteDelegate_Params, 0, sizeof(ClearDownloadContentCompleteDelegate_Params));
	memcpy_s(&ClearDownloadContentCompleteDelegate_Params.DownloadContentCompleteDelegate, sizeof(ClearDownloadContentCompleteDelegate_Params.DownloadContentCompleteDelegate), &DownloadContentCompleteDelegate, sizeof(DownloadContentCompleteDelegate));

	this->ProcessEvent(uFnClearDownloadContentCompleteDelegate, &ClearDownloadContentCompleteDelegate_Params, nullptr);
};

// Function Engine.OnlineCommunityContentInterface.AddDownloadContentCompleteDelegate
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FScriptDelegate         DownloadContentCompleteDelegate (CPF_Parm | CPF_NeedCtorLink)

void UOnlineCommunityContentInterface::AddDownloadContentCompleteDelegate(const struct FScriptDelegate& DownloadContentCompleteDelegate)
{
	static UFunction* uFnAddDownloadContentCompleteDelegate = nullptr;

	if (!uFnAddDownloadContentCompleteDelegate)
	{
		uFnAddDownloadContentCompleteDelegate = UFunction::FindFunction("Function Engine.OnlineCommunityContentInterface.AddDownloadContentCompleteDelegate");
	}

	UOnlineCommunityContentInterface_execAddDownloadContentCompleteDelegate_Params AddDownloadContentCompleteDelegate_Params;
	memset(&AddDownloadContentCompleteDelegate_Params, 0, sizeof(AddDownloadContentCompleteDelegate_Params));
	memcpy_s(&AddDownloadContentCompleteDelegate_Params.DownloadContentCompleteDelegate, sizeof(AddDownloadContentCompleteDelegate_Params.DownloadContentCompleteDelegate), &DownloadContentCompleteDelegate, sizeof(DownloadContentCompleteDelegate));

	this->ProcessEvent(uFnAddDownloadContentCompleteDelegate, &AddDownloadContentCompleteDelegate_Params, nullptr);
};

// Function Engine.OnlineCommunityContentInterface.OnDownloadContentComplete
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bWasSuccessful                 (CPF_Parm)
// struct FCommunityContentFile   FileDownloaded                 (CPF_Parm | CPF_NeedCtorLink)

void UOnlineCommunityContentInterface::OnDownloadContentComplete(bool bWasSuccessful, const struct FCommunityContentFile& FileDownloaded)
{
	static UFunction* uFnOnDownloadContentComplete = nullptr;

	if (!uFnOnDownloadContentComplete)
	{
		uFnOnDownloadContentComplete = UFunction::FindFunction("Function Engine.OnlineCommunityContentInterface.OnDownloadContentComplete");
	}

	UOnlineCommunityContentInterface_execOnDownloadContentComplete_Params OnDownloadContentComplete_Params;
	memset(&OnDownloadContentComplete_Params, 0, sizeof(OnDownloadContentComplete_Params));
	OnDownloadContentComplete_Params.bWasSuccessful = bWasSuccessful;
	memcpy_s(&OnDownloadContentComplete_Params.FileDownloaded, sizeof(OnDownloadContentComplete_Params.FileDownloaded), &FileDownloaded, sizeof(FileDownloaded));

	this->ProcessEvent(uFnOnDownloadContentComplete, &OnDownloadContentComplete_Params, nullptr);
};

// Function Engine.OnlineCommunityContentInterface.DownloadContent
// [0x00420000] (FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint8_t                        PlayerNum                      (CPF_Parm)
// struct FCommunityContentFile   FileToDownload                 (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

bool UOnlineCommunityContentInterface::DownloadContent(uint8_t PlayerNum, struct FCommunityContentFile& FileToDownload)
{
	static UFunction* uFnDownloadContent = nullptr;

	if (!uFnDownloadContent)
	{
		uFnDownloadContent = UFunction::FindFunction("Function Engine.OnlineCommunityContentInterface.DownloadContent");
	}

	UOnlineCommunityContentInterface_execDownloadContent_Params DownloadContent_Params;
	memset(&DownloadContent_Params, 0, sizeof(DownloadContent_Params));
	memcpy_s(&DownloadContent_Params.PlayerNum, sizeof(DownloadContent_Params.PlayerNum), &PlayerNum, sizeof(PlayerNum));
	memcpy_s(&DownloadContent_Params.FileToDownload, sizeof(DownloadContent_Params.FileToDownload), &FileToDownload, sizeof(FileToDownload));

	this->ProcessEvent(uFnDownloadContent, &DownloadContent_Params, nullptr);

	memcpy_s(&FileToDownload, sizeof(FileToDownload), &DownloadContent_Params.FileToDownload, sizeof(DownloadContent_Params.FileToDownload));

	return DownloadContent_Params.ReturnValue;
};

// Function Engine.OnlineCommunityContentInterface.ClearUploadContentCompleteDelegate
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FScriptDelegate         UploadContentCompleteDelegate  (CPF_Parm | CPF_NeedCtorLink)

void UOnlineCommunityContentInterface::ClearUploadContentCompleteDelegate(const struct FScriptDelegate& UploadContentCompleteDelegate)
{
	static UFunction* uFnClearUploadContentCompleteDelegate = nullptr;

	if (!uFnClearUploadContentCompleteDelegate)
	{
		uFnClearUploadContentCompleteDelegate = UFunction::FindFunction("Function Engine.OnlineCommunityContentInterface.ClearUploadContentCompleteDelegate");
	}

	UOnlineCommunityContentInterface_execClearUploadContentCompleteDelegate_Params ClearUploadContentCompleteDelegate_Params;
	memset(&ClearUploadContentCompleteDelegate_Params, 0, sizeof(ClearUploadContentCompleteDelegate_Params));
	memcpy_s(&ClearUploadContentCompleteDelegate_Params.UploadContentCompleteDelegate, sizeof(ClearUploadContentCompleteDelegate_Params.UploadContentCompleteDelegate), &UploadContentCompleteDelegate, sizeof(UploadContentCompleteDelegate));

	this->ProcessEvent(uFnClearUploadContentCompleteDelegate, &ClearUploadContentCompleteDelegate_Params, nullptr);
};

// Function Engine.OnlineCommunityContentInterface.AddUploadContentCompleteDelegate
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FScriptDelegate         UploadContentCompleteDelegate  (CPF_Parm | CPF_NeedCtorLink)

void UOnlineCommunityContentInterface::AddUploadContentCompleteDelegate(const struct FScriptDelegate& UploadContentCompleteDelegate)
{
	static UFunction* uFnAddUploadContentCompleteDelegate = nullptr;

	if (!uFnAddUploadContentCompleteDelegate)
	{
		uFnAddUploadContentCompleteDelegate = UFunction::FindFunction("Function Engine.OnlineCommunityContentInterface.AddUploadContentCompleteDelegate");
	}

	UOnlineCommunityContentInterface_execAddUploadContentCompleteDelegate_Params AddUploadContentCompleteDelegate_Params;
	memset(&AddUploadContentCompleteDelegate_Params, 0, sizeof(AddUploadContentCompleteDelegate_Params));
	memcpy_s(&AddUploadContentCompleteDelegate_Params.UploadContentCompleteDelegate, sizeof(AddUploadContentCompleteDelegate_Params.UploadContentCompleteDelegate), &UploadContentCompleteDelegate, sizeof(UploadContentCompleteDelegate));

	this->ProcessEvent(uFnAddUploadContentCompleteDelegate, &AddUploadContentCompleteDelegate_Params, nullptr);
};

// Function Engine.OnlineCommunityContentInterface.OnUploadContentComplete
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bWasSuccessful                 (CPF_Parm)
// struct FCommunityContentFile   UploadedFile                   (CPF_Parm | CPF_NeedCtorLink)

void UOnlineCommunityContentInterface::OnUploadContentComplete(bool bWasSuccessful, const struct FCommunityContentFile& UploadedFile)
{
	static UFunction* uFnOnUploadContentComplete = nullptr;

	if (!uFnOnUploadContentComplete)
	{
		uFnOnUploadContentComplete = UFunction::FindFunction("Function Engine.OnlineCommunityContentInterface.OnUploadContentComplete");
	}

	UOnlineCommunityContentInterface_execOnUploadContentComplete_Params OnUploadContentComplete_Params;
	memset(&OnUploadContentComplete_Params, 0, sizeof(OnUploadContentComplete_Params));
	OnUploadContentComplete_Params.bWasSuccessful = bWasSuccessful;
	memcpy_s(&OnUploadContentComplete_Params.UploadedFile, sizeof(OnUploadContentComplete_Params.UploadedFile), &UploadedFile, sizeof(UploadedFile));

	this->ProcessEvent(uFnOnUploadContentComplete, &OnUploadContentComplete_Params, nullptr);
};

// Function Engine.OnlineCommunityContentInterface.UploadContent
// [0x00420000] (FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint8_t                        PlayerNum                      (CPF_Parm)
// class TArray<uint8_t>          Payload                        (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)
// struct FCommunityContentMetadata MetaData                       (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

bool UOnlineCommunityContentInterface::UploadContent(uint8_t PlayerNum, class TArray<uint8_t>& Payload, struct FCommunityContentMetadata& MetaData)
{
	static UFunction* uFnUploadContent = nullptr;

	if (!uFnUploadContent)
	{
		uFnUploadContent = UFunction::FindFunction("Function Engine.OnlineCommunityContentInterface.UploadContent");
	}

	UOnlineCommunityContentInterface_execUploadContent_Params UploadContent_Params;
	memset(&UploadContent_Params, 0, sizeof(UploadContent_Params));
	memcpy_s(&UploadContent_Params.PlayerNum, sizeof(UploadContent_Params.PlayerNum), &PlayerNum, sizeof(PlayerNum));
	memcpy_s(&UploadContent_Params.Payload, sizeof(UploadContent_Params.Payload), &Payload, sizeof(Payload));
	memcpy_s(&UploadContent_Params.MetaData, sizeof(UploadContent_Params.MetaData), &MetaData, sizeof(MetaData));

	this->ProcessEvent(uFnUploadContent, &UploadContent_Params, nullptr);

	memcpy_s(&Payload, sizeof(Payload), &UploadContent_Params.Payload, sizeof(UploadContent_Params.Payload));
	memcpy_s(&MetaData, sizeof(MetaData), &UploadContent_Params.MetaData, sizeof(UploadContent_Params.MetaData));

	return UploadContent_Params.ReturnValue;
};

// Function Engine.OnlineCommunityContentInterface.GetFriendsContentList
// [0x00420000] (FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint8_t                        PlayerNum                      (CPF_Parm)
// struct FOnlineFriend           Friend                         (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)
// class TArray<struct FCommunityContentFile> ContentFiles                   (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

bool UOnlineCommunityContentInterface::GetFriendsContentList(uint8_t PlayerNum, struct FOnlineFriend& Friend, class TArray<struct FCommunityContentFile>& ContentFiles)
{
	static UFunction* uFnGetFriendsContentList = nullptr;

	if (!uFnGetFriendsContentList)
	{
		uFnGetFriendsContentList = UFunction::FindFunction("Function Engine.OnlineCommunityContentInterface.GetFriendsContentList");
	}

	UOnlineCommunityContentInterface_execGetFriendsContentList_Params GetFriendsContentList_Params;
	memset(&GetFriendsContentList_Params, 0, sizeof(GetFriendsContentList_Params));
	memcpy_s(&GetFriendsContentList_Params.PlayerNum, sizeof(GetFriendsContentList_Params.PlayerNum), &PlayerNum, sizeof(PlayerNum));
	memcpy_s(&GetFriendsContentList_Params.Friend, sizeof(GetFriendsContentList_Params.Friend), &Friend, sizeof(Friend));
	memcpy_s(&GetFriendsContentList_Params.ContentFiles, sizeof(GetFriendsContentList_Params.ContentFiles), &ContentFiles, sizeof(ContentFiles));

	this->ProcessEvent(uFnGetFriendsContentList, &GetFriendsContentList_Params, nullptr);

	memcpy_s(&Friend, sizeof(Friend), &GetFriendsContentList_Params.Friend, sizeof(GetFriendsContentList_Params.Friend));
	memcpy_s(&ContentFiles, sizeof(ContentFiles), &GetFriendsContentList_Params.ContentFiles, sizeof(GetFriendsContentList_Params.ContentFiles));

	return GetFriendsContentList_Params.ReturnValue;
};

// Function Engine.OnlineCommunityContentInterface.ClearReadFriendsContentListCompleteDelegate
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FScriptDelegate         ReadFriendsContentListCompleteDelegate (CPF_Parm | CPF_NeedCtorLink)

void UOnlineCommunityContentInterface::ClearReadFriendsContentListCompleteDelegate(const struct FScriptDelegate& ReadFriendsContentListCompleteDelegate)
{
	static UFunction* uFnClearReadFriendsContentListCompleteDelegate = nullptr;

	if (!uFnClearReadFriendsContentListCompleteDelegate)
	{
		uFnClearReadFriendsContentListCompleteDelegate = UFunction::FindFunction("Function Engine.OnlineCommunityContentInterface.ClearReadFriendsContentListCompleteDelegate");
	}

	UOnlineCommunityContentInterface_execClearReadFriendsContentListCompleteDelegate_Params ClearReadFriendsContentListCompleteDelegate_Params;
	memset(&ClearReadFriendsContentListCompleteDelegate_Params, 0, sizeof(ClearReadFriendsContentListCompleteDelegate_Params));
	memcpy_s(&ClearReadFriendsContentListCompleteDelegate_Params.ReadFriendsContentListCompleteDelegate, sizeof(ClearReadFriendsContentListCompleteDelegate_Params.ReadFriendsContentListCompleteDelegate), &ReadFriendsContentListCompleteDelegate, sizeof(ReadFriendsContentListCompleteDelegate));

	this->ProcessEvent(uFnClearReadFriendsContentListCompleteDelegate, &ClearReadFriendsContentListCompleteDelegate_Params, nullptr);
};

// Function Engine.OnlineCommunityContentInterface.AddReadFriendsContentListCompleteDelegate
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FScriptDelegate         ReadFriendsContentListCompleteDelegate (CPF_Parm | CPF_NeedCtorLink)

void UOnlineCommunityContentInterface::AddReadFriendsContentListCompleteDelegate(const struct FScriptDelegate& ReadFriendsContentListCompleteDelegate)
{
	static UFunction* uFnAddReadFriendsContentListCompleteDelegate = nullptr;

	if (!uFnAddReadFriendsContentListCompleteDelegate)
	{
		uFnAddReadFriendsContentListCompleteDelegate = UFunction::FindFunction("Function Engine.OnlineCommunityContentInterface.AddReadFriendsContentListCompleteDelegate");
	}

	UOnlineCommunityContentInterface_execAddReadFriendsContentListCompleteDelegate_Params AddReadFriendsContentListCompleteDelegate_Params;
	memset(&AddReadFriendsContentListCompleteDelegate_Params, 0, sizeof(AddReadFriendsContentListCompleteDelegate_Params));
	memcpy_s(&AddReadFriendsContentListCompleteDelegate_Params.ReadFriendsContentListCompleteDelegate, sizeof(AddReadFriendsContentListCompleteDelegate_Params.ReadFriendsContentListCompleteDelegate), &ReadFriendsContentListCompleteDelegate, sizeof(ReadFriendsContentListCompleteDelegate));

	this->ProcessEvent(uFnAddReadFriendsContentListCompleteDelegate, &AddReadFriendsContentListCompleteDelegate_Params, nullptr);
};

// Function Engine.OnlineCommunityContentInterface.OnReadFriendsContentListComplete
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bWasSuccessful                 (CPF_Parm)

void UOnlineCommunityContentInterface::OnReadFriendsContentListComplete(bool bWasSuccessful)
{
	static UFunction* uFnOnReadFriendsContentListComplete = nullptr;

	if (!uFnOnReadFriendsContentListComplete)
	{
		uFnOnReadFriendsContentListComplete = UFunction::FindFunction("Function Engine.OnlineCommunityContentInterface.OnReadFriendsContentListComplete");
	}

	UOnlineCommunityContentInterface_execOnReadFriendsContentListComplete_Params OnReadFriendsContentListComplete_Params;
	memset(&OnReadFriendsContentListComplete_Params, 0, sizeof(OnReadFriendsContentListComplete_Params));
	OnReadFriendsContentListComplete_Params.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent(uFnOnReadFriendsContentListComplete, &OnReadFriendsContentListComplete_Params, nullptr);
};

// Function Engine.OnlineCommunityContentInterface.ReadFriendsContentList
// [0x00424000] (FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint8_t                        PlayerNum                      (CPF_Parm)
// int32_t                        StartAt                        (CPF_OptionalParm | CPF_Parm)
// int32_t                        NumToRead                      (CPF_OptionalParm | CPF_Parm)
// class TArray<struct FOnlineFriend> Friends                        (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

bool UOnlineCommunityContentInterface::ReadFriendsContentList(uint8_t PlayerNum, int32_t StartAt, int32_t NumToRead, class TArray<struct FOnlineFriend>& Friends)
{
	static UFunction* uFnReadFriendsContentList = nullptr;

	if (!uFnReadFriendsContentList)
	{
		uFnReadFriendsContentList = UFunction::FindFunction("Function Engine.OnlineCommunityContentInterface.ReadFriendsContentList");
	}

	UOnlineCommunityContentInterface_execReadFriendsContentList_Params ReadFriendsContentList_Params;
	memset(&ReadFriendsContentList_Params, 0, sizeof(ReadFriendsContentList_Params));
	memcpy_s(&ReadFriendsContentList_Params.PlayerNum, sizeof(ReadFriendsContentList_Params.PlayerNum), &PlayerNum, sizeof(PlayerNum));
	memcpy_s(&ReadFriendsContentList_Params.StartAt, sizeof(ReadFriendsContentList_Params.StartAt), &StartAt, sizeof(StartAt));
	memcpy_s(&ReadFriendsContentList_Params.NumToRead, sizeof(ReadFriendsContentList_Params.NumToRead), &NumToRead, sizeof(NumToRead));
	memcpy_s(&ReadFriendsContentList_Params.Friends, sizeof(ReadFriendsContentList_Params.Friends), &Friends, sizeof(Friends));

	this->ProcessEvent(uFnReadFriendsContentList, &ReadFriendsContentList_Params, nullptr);

	memcpy_s(&Friends, sizeof(Friends), &ReadFriendsContentList_Params.Friends, sizeof(ReadFriendsContentList_Params.Friends));

	return ReadFriendsContentList_Params.ReturnValue;
};

// Function Engine.OnlineCommunityContentInterface.GetContentList
// [0x00420000] (FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint8_t                        PlayerNum                      (CPF_Parm)
// class TArray<struct FCommunityContentFile> ContentFiles                   (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

bool UOnlineCommunityContentInterface::GetContentList(uint8_t PlayerNum, class TArray<struct FCommunityContentFile>& ContentFiles)
{
	static UFunction* uFnGetContentList = nullptr;

	if (!uFnGetContentList)
	{
		uFnGetContentList = UFunction::FindFunction("Function Engine.OnlineCommunityContentInterface.GetContentList");
	}

	UOnlineCommunityContentInterface_execGetContentList_Params GetContentList_Params;
	memset(&GetContentList_Params, 0, sizeof(GetContentList_Params));
	memcpy_s(&GetContentList_Params.PlayerNum, sizeof(GetContentList_Params.PlayerNum), &PlayerNum, sizeof(PlayerNum));
	memcpy_s(&GetContentList_Params.ContentFiles, sizeof(GetContentList_Params.ContentFiles), &ContentFiles, sizeof(ContentFiles));

	this->ProcessEvent(uFnGetContentList, &GetContentList_Params, nullptr);

	memcpy_s(&ContentFiles, sizeof(ContentFiles), &GetContentList_Params.ContentFiles, sizeof(GetContentList_Params.ContentFiles));

	return GetContentList_Params.ReturnValue;
};

// Function Engine.OnlineCommunityContentInterface.ClearReadContentListCompleteDelegate
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FScriptDelegate         ReadContentListCompleteDelegate (CPF_Parm | CPF_NeedCtorLink)

void UOnlineCommunityContentInterface::ClearReadContentListCompleteDelegate(const struct FScriptDelegate& ReadContentListCompleteDelegate)
{
	static UFunction* uFnClearReadContentListCompleteDelegate = nullptr;

	if (!uFnClearReadContentListCompleteDelegate)
	{
		uFnClearReadContentListCompleteDelegate = UFunction::FindFunction("Function Engine.OnlineCommunityContentInterface.ClearReadContentListCompleteDelegate");
	}

	UOnlineCommunityContentInterface_execClearReadContentListCompleteDelegate_Params ClearReadContentListCompleteDelegate_Params;
	memset(&ClearReadContentListCompleteDelegate_Params, 0, sizeof(ClearReadContentListCompleteDelegate_Params));
	memcpy_s(&ClearReadContentListCompleteDelegate_Params.ReadContentListCompleteDelegate, sizeof(ClearReadContentListCompleteDelegate_Params.ReadContentListCompleteDelegate), &ReadContentListCompleteDelegate, sizeof(ReadContentListCompleteDelegate));

	this->ProcessEvent(uFnClearReadContentListCompleteDelegate, &ClearReadContentListCompleteDelegate_Params, nullptr);
};

// Function Engine.OnlineCommunityContentInterface.AddReadContentListCompleteDelegate
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FScriptDelegate         ReadContentListCompleteDelegate (CPF_Parm | CPF_NeedCtorLink)

void UOnlineCommunityContentInterface::AddReadContentListCompleteDelegate(const struct FScriptDelegate& ReadContentListCompleteDelegate)
{
	static UFunction* uFnAddReadContentListCompleteDelegate = nullptr;

	if (!uFnAddReadContentListCompleteDelegate)
	{
		uFnAddReadContentListCompleteDelegate = UFunction::FindFunction("Function Engine.OnlineCommunityContentInterface.AddReadContentListCompleteDelegate");
	}

	UOnlineCommunityContentInterface_execAddReadContentListCompleteDelegate_Params AddReadContentListCompleteDelegate_Params;
	memset(&AddReadContentListCompleteDelegate_Params, 0, sizeof(AddReadContentListCompleteDelegate_Params));
	memcpy_s(&AddReadContentListCompleteDelegate_Params.ReadContentListCompleteDelegate, sizeof(AddReadContentListCompleteDelegate_Params.ReadContentListCompleteDelegate), &ReadContentListCompleteDelegate, sizeof(ReadContentListCompleteDelegate));

	this->ProcessEvent(uFnAddReadContentListCompleteDelegate, &AddReadContentListCompleteDelegate_Params, nullptr);
};

// Function Engine.OnlineCommunityContentInterface.OnReadContentListComplete
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bWasSuccessful                 (CPF_Parm)

void UOnlineCommunityContentInterface::OnReadContentListComplete(bool bWasSuccessful)
{
	static UFunction* uFnOnReadContentListComplete = nullptr;

	if (!uFnOnReadContentListComplete)
	{
		uFnOnReadContentListComplete = UFunction::FindFunction("Function Engine.OnlineCommunityContentInterface.OnReadContentListComplete");
	}

	UOnlineCommunityContentInterface_execOnReadContentListComplete_Params OnReadContentListComplete_Params;
	memset(&OnReadContentListComplete_Params, 0, sizeof(OnReadContentListComplete_Params));
	OnReadContentListComplete_Params.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent(uFnOnReadContentListComplete, &OnReadContentListComplete_Params, nullptr);
};

// Function Engine.OnlineCommunityContentInterface.ReadContentList
// [0x00024000] (FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint8_t                        PlayerNum                      (CPF_Parm)
// int32_t                        StartAt                        (CPF_OptionalParm | CPF_Parm)
// int32_t                        NumToRead                      (CPF_OptionalParm | CPF_Parm)

bool UOnlineCommunityContentInterface::ReadContentList(uint8_t PlayerNum, int32_t StartAt, int32_t NumToRead)
{
	static UFunction* uFnReadContentList = nullptr;

	if (!uFnReadContentList)
	{
		uFnReadContentList = UFunction::FindFunction("Function Engine.OnlineCommunityContentInterface.ReadContentList");
	}

	UOnlineCommunityContentInterface_execReadContentList_Params ReadContentList_Params;
	memset(&ReadContentList_Params, 0, sizeof(ReadContentList_Params));
	memcpy_s(&ReadContentList_Params.PlayerNum, sizeof(ReadContentList_Params.PlayerNum), &PlayerNum, sizeof(PlayerNum));
	memcpy_s(&ReadContentList_Params.StartAt, sizeof(ReadContentList_Params.StartAt), &StartAt, sizeof(StartAt));
	memcpy_s(&ReadContentList_Params.NumToRead, sizeof(ReadContentList_Params.NumToRead), &NumToRead, sizeof(NumToRead));

	this->ProcessEvent(uFnReadContentList, &ReadContentList_Params, nullptr);

	return ReadContentList_Params.ReturnValue;
};

// Function Engine.OnlineCommunityContentInterface.Exit
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOnlineCommunityContentInterface::Exit()
{
	static UFunction* uFnExit = nullptr;

	if (!uFnExit)
	{
		uFnExit = UFunction::FindFunction("Function Engine.OnlineCommunityContentInterface.Exit");
	}

	UOnlineCommunityContentInterface_execExit_Params Exit_Params;
	memset(&Exit_Params, 0, sizeof(Exit_Params));

	this->ProcessEvent(uFnExit, &Exit_Params, nullptr);
};

// Function Engine.OnlineCommunityContentInterface.Init
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UOnlineCommunityContentInterface::Init()
{
	static UFunction* uFnInit = nullptr;

	if (!uFnInit)
	{
		uFnInit = UFunction::FindFunction("Function Engine.OnlineCommunityContentInterface.Init");
	}

	UOnlineCommunityContentInterface_execInit_Params Init_Params;
	memset(&Init_Params, 0, sizeof(Init_Params));

	this->ProcessEvent(uFnInit, &Init_Params, nullptr);

	return Init_Params.ReturnValue;
};

// Function Engine.OnlineEventsInterface.UpdatePlaylistPopulation
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        PlaylistId                     (CPF_Parm)
// int32_t                        NumPlayers                     (CPF_Parm)

bool UOnlineEventsInterface::UpdatePlaylistPopulation(int32_t PlaylistId, int32_t NumPlayers)
{
	static UFunction* uFnUpdatePlaylistPopulation = nullptr;

	if (!uFnUpdatePlaylistPopulation)
	{
		uFnUpdatePlaylistPopulation = UFunction::FindFunction("Function Engine.OnlineEventsInterface.UpdatePlaylistPopulation");
	}

	UOnlineEventsInterface_execUpdatePlaylistPopulation_Params UpdatePlaylistPopulation_Params;
	memset(&UpdatePlaylistPopulation_Params, 0, sizeof(UpdatePlaylistPopulation_Params));
	memcpy_s(&UpdatePlaylistPopulation_Params.PlaylistId, sizeof(UpdatePlaylistPopulation_Params.PlaylistId), &PlaylistId, sizeof(PlaylistId));
	memcpy_s(&UpdatePlaylistPopulation_Params.NumPlayers, sizeof(UpdatePlaylistPopulation_Params.NumPlayers), &NumPlayers, sizeof(NumPlayers));

	this->ProcessEvent(uFnUpdatePlaylistPopulation, &UpdatePlaylistPopulation_Params, nullptr);

	return UpdatePlaylistPopulation_Params.ReturnValue;
};

// Function Engine.OnlineEventsInterface.UploadHardwareData
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FUniqueNetId            UniqueId                       (CPF_Parm)
// class FString                  PlayerNick                     (CPF_Parm | CPF_NeedCtorLink)

bool UOnlineEventsInterface::UploadHardwareData(const struct FUniqueNetId& UniqueId, const class FString& PlayerNick)
{
	static UFunction* uFnUploadHardwareData = nullptr;

	if (!uFnUploadHardwareData)
	{
		uFnUploadHardwareData = UFunction::FindFunction("Function Engine.OnlineEventsInterface.UploadHardwareData");
	}

	UOnlineEventsInterface_execUploadHardwareData_Params UploadHardwareData_Params;
	memset(&UploadHardwareData_Params, 0, sizeof(UploadHardwareData_Params));
	memcpy_s(&UploadHardwareData_Params.UniqueId, sizeof(UploadHardwareData_Params.UniqueId), &UniqueId, sizeof(UniqueId));
	memcpy_s(&UploadHardwareData_Params.PlayerNick, sizeof(UploadHardwareData_Params.PlayerNick), &PlayerNick, sizeof(PlayerNick));

	this->ProcessEvent(uFnUploadHardwareData, &UploadHardwareData_Params, nullptr);

	return UploadHardwareData_Params.ReturnValue;
};

// Function Engine.OnlineEventsInterface.UploadProfileData
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FUniqueNetId            UniqueId                       (CPF_Parm)
// class FString                  PlayerNick                     (CPF_Parm | CPF_NeedCtorLink)
// class UOnlineProfileSettings*  ProfileSettings                (CPF_Parm)

bool UOnlineEventsInterface::UploadProfileData(const struct FUniqueNetId& UniqueId, const class FString& PlayerNick, class UOnlineProfileSettings* ProfileSettings)
{
	static UFunction* uFnUploadProfileData = nullptr;

	if (!uFnUploadProfileData)
	{
		uFnUploadProfileData = UFunction::FindFunction("Function Engine.OnlineEventsInterface.UploadProfileData");
	}

	UOnlineEventsInterface_execUploadProfileData_Params UploadProfileData_Params;
	memset(&UploadProfileData_Params, 0, sizeof(UploadProfileData_Params));
	memcpy_s(&UploadProfileData_Params.UniqueId, sizeof(UploadProfileData_Params.UniqueId), &UniqueId, sizeof(UniqueId));
	memcpy_s(&UploadProfileData_Params.PlayerNick, sizeof(UploadProfileData_Params.PlayerNick), &PlayerNick, sizeof(PlayerNick));
	UploadProfileData_Params.ProfileSettings = ProfileSettings;

	this->ProcessEvent(uFnUploadProfileData, &UploadProfileData_Params, nullptr);

	return UploadProfileData_Params.ReturnValue;
};

// Function Engine.OnlineSuppliedUIInterface.ClearShowOnlineStatsUICompleteDelegate
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FScriptDelegate         ShowOnlineStatsUICompleteDelegate (CPF_Parm | CPF_NeedCtorLink)

void UOnlineSuppliedUIInterface::ClearShowOnlineStatsUICompleteDelegate(const struct FScriptDelegate& ShowOnlineStatsUICompleteDelegate)
{
	static UFunction* uFnClearShowOnlineStatsUICompleteDelegate = nullptr;

	if (!uFnClearShowOnlineStatsUICompleteDelegate)
	{
		uFnClearShowOnlineStatsUICompleteDelegate = UFunction::FindFunction("Function Engine.OnlineSuppliedUIInterface.ClearShowOnlineStatsUICompleteDelegate");
	}

	UOnlineSuppliedUIInterface_execClearShowOnlineStatsUICompleteDelegate_Params ClearShowOnlineStatsUICompleteDelegate_Params;
	memset(&ClearShowOnlineStatsUICompleteDelegate_Params, 0, sizeof(ClearShowOnlineStatsUICompleteDelegate_Params));
	memcpy_s(&ClearShowOnlineStatsUICompleteDelegate_Params.ShowOnlineStatsUICompleteDelegate, sizeof(ClearShowOnlineStatsUICompleteDelegate_Params.ShowOnlineStatsUICompleteDelegate), &ShowOnlineStatsUICompleteDelegate, sizeof(ShowOnlineStatsUICompleteDelegate));

	this->ProcessEvent(uFnClearShowOnlineStatsUICompleteDelegate, &ClearShowOnlineStatsUICompleteDelegate_Params, nullptr);
};

// Function Engine.OnlineSuppliedUIInterface.AddShowOnlineStatsUICompleteDelegate
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FScriptDelegate         ShowOnlineStatsUICompleteDelegate (CPF_Parm | CPF_NeedCtorLink)

void UOnlineSuppliedUIInterface::AddShowOnlineStatsUICompleteDelegate(const struct FScriptDelegate& ShowOnlineStatsUICompleteDelegate)
{
	static UFunction* uFnAddShowOnlineStatsUICompleteDelegate = nullptr;

	if (!uFnAddShowOnlineStatsUICompleteDelegate)
	{
		uFnAddShowOnlineStatsUICompleteDelegate = UFunction::FindFunction("Function Engine.OnlineSuppliedUIInterface.AddShowOnlineStatsUICompleteDelegate");
	}

	UOnlineSuppliedUIInterface_execAddShowOnlineStatsUICompleteDelegate_Params AddShowOnlineStatsUICompleteDelegate_Params;
	memset(&AddShowOnlineStatsUICompleteDelegate_Params, 0, sizeof(AddShowOnlineStatsUICompleteDelegate_Params));
	memcpy_s(&AddShowOnlineStatsUICompleteDelegate_Params.ShowOnlineStatsUICompleteDelegate, sizeof(AddShowOnlineStatsUICompleteDelegate_Params.ShowOnlineStatsUICompleteDelegate), &ShowOnlineStatsUICompleteDelegate, sizeof(ShowOnlineStatsUICompleteDelegate));

	this->ProcessEvent(uFnAddShowOnlineStatsUICompleteDelegate, &AddShowOnlineStatsUICompleteDelegate_Params, nullptr);
};

// Function Engine.OnlineSuppliedUIInterface.ShowOnlineStatsUI
// [0x00420000] (FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UOnlineStatsRead*        StatsRead                      (CPF_Parm)
// class TArray<struct FUniqueNetId> Players                        (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

bool UOnlineSuppliedUIInterface::ShowOnlineStatsUI(class UOnlineStatsRead* StatsRead, class TArray<struct FUniqueNetId>& Players)
{
	static UFunction* uFnShowOnlineStatsUI = nullptr;

	if (!uFnShowOnlineStatsUI)
	{
		uFnShowOnlineStatsUI = UFunction::FindFunction("Function Engine.OnlineSuppliedUIInterface.ShowOnlineStatsUI");
	}

	UOnlineSuppliedUIInterface_execShowOnlineStatsUI_Params ShowOnlineStatsUI_Params;
	memset(&ShowOnlineStatsUI_Params, 0, sizeof(ShowOnlineStatsUI_Params));
	ShowOnlineStatsUI_Params.StatsRead = StatsRead;
	memcpy_s(&ShowOnlineStatsUI_Params.Players, sizeof(ShowOnlineStatsUI_Params.Players), &Players, sizeof(Players));

	this->ProcessEvent(uFnShowOnlineStatsUI, &ShowOnlineStatsUI_Params, nullptr);

	memcpy_s(&Players, sizeof(Players), &ShowOnlineStatsUI_Params.Players, sizeof(ShowOnlineStatsUI_Params.Players));

	return ShowOnlineStatsUI_Params.ReturnValue;
};

// Function Engine.OnlineSuppliedUIInterface.OnShowOnlineStatsUIComplete
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:

void UOnlineSuppliedUIInterface::OnShowOnlineStatsUIComplete()
{
	static UFunction* uFnOnShowOnlineStatsUIComplete = nullptr;

	if (!uFnOnShowOnlineStatsUIComplete)
	{
		uFnOnShowOnlineStatsUIComplete = UFunction::FindFunction("Function Engine.OnlineSuppliedUIInterface.OnShowOnlineStatsUIComplete");
	}

	UOnlineSuppliedUIInterface_execOnShowOnlineStatsUIComplete_Params OnShowOnlineStatsUIComplete_Params;
	memset(&OnShowOnlineStatsUIComplete_Params, 0, sizeof(OnShowOnlineStatsUIComplete_Params));

	this->ProcessEvent(uFnOnShowOnlineStatsUIComplete, &OnShowOnlineStatsUIComplete_Params, nullptr);
};

// Function Engine.PathNode_Dynamic.GetDebugAbbrev
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)

class FString APathNode_Dynamic::eventGetDebugAbbrev()
{
	static UFunction* uFnGetDebugAbbrev = nullptr;

	if (!uFnGetDebugAbbrev)
	{
		uFnGetDebugAbbrev = UFunction::FindFunction("Function Engine.PathNode_Dynamic.GetDebugAbbrev");
	}

	APathNode_Dynamic_eventGetDebugAbbrev_Params GetDebugAbbrev_Params;
	memset(&GetDebugAbbrev_Params, 0, sizeof(GetDebugAbbrev_Params));

	this->ProcessEvent(uFnGetDebugAbbrev, &GetDebugAbbrev_Params, nullptr);

	return GetDebugAbbrev_Params.ReturnValue;
};

// Function Engine.SeqAct_SetVector.Activated
// [0x00820802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:

void USeqAct_SetVector::eventActivated()
{
	static UFunction* uFnActivated = nullptr;

	if (!uFnActivated)
	{
		uFnActivated = UFunction::FindFunction("Function Engine.SeqAct_SetVector.Activated");
	}

	USeqAct_SetVector_eventActivated_Params Activated_Params;
	memset(&Activated_Params, 0, sizeof(Activated_Params));

	this->ProcessEvent(uFnActivated, &Activated_Params, nullptr);
};

// Function Engine.SeqAct_UpdatePhysBonesFromAnim.GetObjClassVersion
// [0x00022802] (FUNC_Defined | FUNC_Event | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t USeqAct_UpdatePhysBonesFromAnim::eventGetObjClassVersion()
{
	static UFunction* uFnGetObjClassVersion = nullptr;

	if (!uFnGetObjClassVersion)
	{
		uFnGetObjClassVersion = UFunction::FindFunction("Function Engine.SeqAct_UpdatePhysBonesFromAnim.GetObjClassVersion");
	}

	USeqAct_UpdatePhysBonesFromAnim_eventGetObjClassVersion_Params GetObjClassVersion_Params;
	memset(&GetObjClassVersion_Params, 0, sizeof(GetObjClassVersion_Params));

	USeqAct_UpdatePhysBonesFromAnim::StaticClass()->ProcessEvent(uFnGetObjClassVersion, &GetObjClassVersion_Params, nullptr);

	return GetObjClassVersion_Params.ReturnValue;
};

// Function Engine.UIGameInfoSummary.IsProviderDisabled
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UUIGameInfoSummary::eventIsProviderDisabled()
{
	static UFunction* uFnIsProviderDisabled = nullptr;

	if (!uFnIsProviderDisabled)
	{
		uFnIsProviderDisabled = UFunction::FindFunction("Function Engine.UIGameInfoSummary.IsProviderDisabled");
	}

	UUIGameInfoSummary_eventIsProviderDisabled_Params IsProviderDisabled_Params;
	memset(&IsProviderDisabled_Params, 0, sizeof(IsProviderDisabled_Params));

	this->ProcessEvent(uFnIsProviderDisabled, &IsProviderDisabled_Params, nullptr);

	return IsProviderDisabled_Params.ReturnValue;
};

// Function Engine.UIWeaponSummary.IsProviderDisabled
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UUIWeaponSummary::eventIsProviderDisabled()
{
	static UFunction* uFnIsProviderDisabled = nullptr;

	if (!uFnIsProviderDisabled)
	{
		uFnIsProviderDisabled = UFunction::FindFunction("Function Engine.UIWeaponSummary.IsProviderDisabled");
	}

	UUIWeaponSummary_eventIsProviderDisabled_Params IsProviderDisabled_Params;
	memset(&IsProviderDisabled_Params, 0, sizeof(IsProviderDisabled_Params));

	this->ProcessEvent(uFnIsProviderDisabled, &IsProviderDisabled_Params, nullptr);

	return IsProviderDisabled_Params.ReturnValue;
};

// Function Engine.WorldRainInfo.OnToggle
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_Toggle*          Action                         (CPF_Parm)

void AWorldRainInfo::OnToggle(class USeqAct_Toggle* Action)
{
	static UFunction* uFnOnToggle = nullptr;

	if (!uFnOnToggle)
	{
		uFnOnToggle = UFunction::FindFunction("Function Engine.WorldRainInfo.OnToggle");
	}

	AWorldRainInfo_execOnToggle_Params OnToggle_Params;
	memset(&OnToggle_Params, 0, sizeof(OnToggle_Params));
	OnToggle_Params.Action = Action;

	this->ProcessEvent(uFnOnToggle, &OnToggle_Params, nullptr);
};

// Function Engine.WorldRainInfo.PostBeginPlay
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AWorldRainInfo::eventPostBeginPlay()
{
	static UFunction* uFnPostBeginPlay = nullptr;

	if (!uFnPostBeginPlay)
	{
		uFnPostBeginPlay = UFunction::FindFunction("Function Engine.WorldRainInfo.PostBeginPlay");
	}

	AWorldRainInfo_eventPostBeginPlay_Params PostBeginPlay_Params;
	memset(&PostBeginPlay_Params, 0, sizeof(PostBeginPlay_Params));

	this->ProcessEvent(uFnPostBeginPlay, &PostBeginPlay_Params, nullptr);
};

/*
# ========================================================================================= #
#
# ========================================================================================= #
*/


